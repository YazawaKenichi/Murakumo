
Murakumo_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005368  08005368  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005370  08005370  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005374  08005374  00015374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000024c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110f3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220d  00000000  00000000  00031193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  000333a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d48  00000000  00000000  000341b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002172a  00000000  00000000  00034ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fecf  00000000  00000000  00056622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6a1  00000000  00000000  000664f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00134b92  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004348  00000000  00000000  00134be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800521c 	.word	0x0800521c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800521c 	.word	0x0800521c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__io_putchar>:
static void MX_TIM6_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8000570:	1d39      	adds	r1, r7, #4
 8000572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000576:	2201      	movs	r2, #1
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <__io_putchar+0x20>)
 800057a:	f003 fb88 	bl	8003c8e <HAL_UART_Transmit>
	return ch;
 800057e:	687b      	ldr	r3, [r7, #4]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200001d4 	.word	0x200001d4

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fe55 	bl	8001240 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f85f 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 fa8b 	bl	8000ab4 <MX_GPIO_Init>
  MX_TIM4_Init();
 800059e:	f000 f96f 	bl	8000880 <MX_TIM4_Init>
  MX_TIM2_Init();
 80005a2:	f000 f915 	bl	80007d0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80005a6:	f000 f8c1 	bl	800072c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80005aa:	f000 fa39 	bl	8000a20 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80005ae:	f000 f9cb 	bl	8000948 <MX_TIM6_Init>
  MX_DMA_Init();
 80005b2:	f000 fa5f 	bl	8000a74 <MX_DMA_Init>
  MX_TIM7_Init();
 80005b6:	f000 f9fd 	bl	80009b4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 80005ba:	481f      	ldr	r0, [pc, #124]	; (8000638 <main+0xac>)
 80005bc:	f003 fee8 	bl	8004390 <puts>

	printf("Push Switch ...\r\n");
 80005c0:	481e      	ldr	r0, [pc, #120]	; (800063c <main+0xb0>)
 80005c2:	f003 fee5 	bl	8004390 <puts>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 80005c6:	e002      	b.n	80005ce <main+0x42>
	{
	  HAL_Delay(100);
 80005c8:	2064      	movs	r0, #100	; 0x64
 80005ca:	f000 feab 	bl	8001324 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	481b      	ldr	r0, [pc, #108]	; (8000640 <main+0xb4>)
 80005d4:	f002 f8f0 	bl	80027b8 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f4      	bne.n	80005c8 <main+0x3c>
	}

  printf("Starting Analog Read\r\n");
 80005de:	4819      	ldr	r0, [pc, #100]	; (8000644 <main+0xb8>)
 80005e0:	f003 fed6 	bl	8004390 <puts>
//  if(HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
//  if(HAL_ADCE1_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) { Error_Handler(); }
//  if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

	printf("Starting Analog DMA\r\n");
 80005e4:	4818      	ldr	r0, [pc, #96]	; (8000648 <main+0xbc>)
 80005e6:	f003 fed3 	bl	8004390 <puts>
	HAL_Delay(100);
 80005ea:	2064      	movs	r0, #100	; 0x64
 80005ec:	f000 fe9a 	bl	8001324 <HAL_Delay>
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 1) != HAL_OK) { Error_Handler(); }
 80005f0:	2201      	movs	r2, #1
 80005f2:	4916      	ldr	r1, [pc, #88]	; (800064c <main+0xc0>)
 80005f4:	4816      	ldr	r0, [pc, #88]	; (8000650 <main+0xc4>)
 80005f6:	f000 fefd 	bl	80013f4 <HAL_ADC_Start_DMA>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <main+0x78>
 8000600:	f000 fb2c 	bl	8000c5c <Error_Handler>
	HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f000 fe8d 	bl	8001324 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int channel = 0; channel < ADC_CONVERTED_DATA_BUFFER_SIZE; channel++)
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	e00b      	b.n	8000628 <main+0x9c>
	  {
		  printf("ADC CH%2d Value is %d\r\n", channel, analog[channel]);
 8000610:	4a0e      	ldr	r2, [pc, #56]	; (800064c <main+0xc0>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000618:	461a      	mov	r2, r3
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <main+0xc8>)
 800061e:	f003 fe31 	bl	8004284 <iprintf>
	  for(int channel = 0; channel < ADC_CONVERTED_DATA_BUFFER_SIZE; channel++)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	ddf0      	ble.n	8000610 <main+0x84>
	  }

	  HAL_Delay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000632:	f000 fe77 	bl	8001324 <HAL_Delay>
	  for(int channel = 0; channel < ADC_CONVERTED_DATA_BUFFER_SIZE; channel++)
 8000636:	e7e8      	b.n	800060a <main+0x7e>
 8000638:	08005234 	.word	0x08005234
 800063c:	08005254 	.word	0x08005254
 8000640:	40020800 	.word	0x40020800
 8000644:	08005268 	.word	0x08005268
 8000648:	08005280 	.word	0x08005280
 800064c:	2000008c 	.word	0x2000008c
 8000650:	200000e4 	.word	0x200000e4
 8000654:	08005298 	.word	0x08005298

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fe04 	bl	8004274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006cc:	23a8      	movs	r3, #168	; 0xa8
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f89d 	bl	800281c <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 fab8 	bl	8000c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2105      	movs	r1, #5
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fafe 	bl	8002d0c <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 faa1 	bl	8000c5c <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	463b      	mov	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <MX_ADC1_Init+0x9c>)
 8000742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000746:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800074a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000754:	2201      	movs	r2, #1
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_ADC1_Init+0x98>)
 800075a:	2201      	movs	r2, #1
 800075c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_ADC1_Init+0x98>)
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_ADC1_Init+0xa0>)
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_ADC1_Init+0x98>)
 800077a:	2201      	movs	r2, #1
 800077c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000780:	2201      	movs	r2, #1
 8000782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC1_Init+0x98>)
 8000788:	2201      	movs	r2, #1
 800078a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_ADC1_Init+0x98>)
 800078e:	f000 fded 	bl	800136c <HAL_ADC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000798:	f000 fa60 	bl	8000c5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007a4:	2307      	movs	r3, #7
 80007a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_ADC1_Init+0x98>)
 80007ae:	f000 ff45 	bl	800163c <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007b8:	f000 fa50 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000e4 	.word	0x200000e4
 80007c8:	40012000 	.word	0x40012000
 80007cc:	0f000001 	.word	0x0f000001

080007d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_TIM2_Init+0xac>)
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80007fa:	4b20      	ldr	r3, [pc, #128]	; (800087c <MX_TIM2_Init+0xac>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_TIM2_Init+0xac>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1679;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM2_Init+0xac>)
 8000808:	f240 628f 	movw	r2, #1679	; 0x68f
 800080c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_TIM2_Init+0xac>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_TIM2_Init+0xac>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800081a:	4818      	ldr	r0, [pc, #96]	; (800087c <MX_TIM2_Init+0xac>)
 800081c:	f002 fcbf 	bl	800319e <HAL_TIM_PWM_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000826:	f000 fa19 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	4619      	mov	r1, r3
 8000838:	4810      	ldr	r0, [pc, #64]	; (800087c <MX_TIM2_Init+0xac>)
 800083a:	f003 f94b 	bl	8003ad4 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000844:	f000 fa0a 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	4619      	mov	r1, r3
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <MX_TIM2_Init+0xac>)
 8000860:	f002 fdf4 	bl	800344c <HAL_TIM_PWM_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800086a:	f000 f9f7 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800086e:	4803      	ldr	r0, [pc, #12]	; (800087c <MX_TIM2_Init+0xac>)
 8000870:	f000 fb16 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000218 	.word	0x20000218

08000880 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008a2:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MX_TIM4_Init+0xc0>)
 80008a4:	4a27      	ldr	r2, [pc, #156]	; (8000944 <MX_TIM4_Init+0xc4>)
 80008a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_TIM4_Init+0xc0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ae:	4b24      	ldr	r3, [pc, #144]	; (8000940 <MX_TIM4_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 839;
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_TIM4_Init+0xc0>)
 80008b6:	f240 3247 	movw	r2, #839	; 0x347
 80008ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_TIM4_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_TIM4_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008c8:	481d      	ldr	r0, [pc, #116]	; (8000940 <MX_TIM4_Init+0xc0>)
 80008ca:	f002 fc68 	bl	800319e <HAL_TIM_PWM_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 f9c2 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4619      	mov	r1, r3
 80008e6:	4816      	ldr	r0, [pc, #88]	; (8000940 <MX_TIM4_Init+0xc0>)
 80008e8:	f003 f8f4 	bl	8003ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80008f2:	f000 f9b3 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f6:	2360      	movs	r3, #96	; 0x60
 80008f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_TIM4_Init+0xc0>)
 800090e:	f002 fd9d 	bl	800344c <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000918:	f000 f9a0 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2204      	movs	r2, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_TIM4_Init+0xc0>)
 8000924:	f002 fd92 	bl	800344c <HAL_TIM_PWM_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800092e:	f000 f995 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000932:	4803      	ldr	r0, [pc, #12]	; (8000940 <MX_TIM4_Init+0xc0>)
 8000934:	f000 fab4 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	; 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000009c 	.word	0x2000009c
 8000944:	40000800 	.word	0x40000800

08000948 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_TIM6_Init+0x64>)
 8000958:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <MX_TIM6_Init+0x68>)
 800095a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_TIM6_Init+0x64>)
 800095e:	2201      	movs	r2, #1
 8000960:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_TIM6_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_TIM6_Init+0x64>)
 800096a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800096e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_TIM6_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_TIM6_Init+0x64>)
 8000978:	f002 fbc2 	bl	8003100 <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000982:	f000 f96b 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_TIM6_Init+0x64>)
 8000994:	f003 f89e 	bl	8003ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800099e:	f000 f95d 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000018c 	.word	0x2000018c
 80009b0:	40001000 	.word	0x40001000

080009b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009c4:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <MX_TIM7_Init+0x68>)
 80009c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009d6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80009da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009e4:	f002 fb8c 	bl	8003100 <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80009ee:	f000 f935 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <MX_TIM7_Init+0x64>)
 8000a00:	f003 f868 	bl	8003ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a0a:	f000 f927 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000260 	.word	0x20000260
 8000a1c:	40001400 	.word	0x40001400

08000a20 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART6_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_USART6_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USART6_UART_Init+0x4c>)
 8000a2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART6_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART6_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART6_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART6_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART6_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART6_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART6_UART_Init+0x4c>)
 8000a58:	f003 f8cc 	bl	8003bf4 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f000 f8fb 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001d4 	.word	0x200001d4
 8000a70:	40011400 	.word	0x40011400

08000a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_DMA_Init+0x3c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <MX_DMA_Init+0x3c>)
 8000a84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_DMA_Init+0x3c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2038      	movs	r0, #56	; 0x38
 8000a9c:	f001 f949 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aa0:	2038      	movs	r0, #56	; 0x38
 8000aa2:	f001 f962 	bl	8001d6a <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b59      	ldr	r3, [pc, #356]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a58      	ldr	r2, [pc, #352]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b56      	ldr	r3, [pc, #344]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b52      	ldr	r3, [pc, #328]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a51      	ldr	r2, [pc, #324]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b4f      	ldr	r3, [pc, #316]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b4b      	ldr	r3, [pc, #300]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a4a      	ldr	r2, [pc, #296]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b48      	ldr	r3, [pc, #288]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a43      	ldr	r2, [pc, #268]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <MX_GPIO_Init+0x180>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8000b40:	483d      	ldr	r0, [pc, #244]	; (8000c38 <MX_GPIO_Init+0x184>)
 8000b42:	f001 fe51 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4c:	483b      	ldr	r0, [pc, #236]	; (8000c3c <MX_GPIO_Init+0x188>)
 8000b4e:	f001 fe4b 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000b58:	4839      	ldr	r0, [pc, #228]	; (8000c40 <MX_GPIO_Init+0x18c>)
 8000b5a:	f001 fe45 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2104      	movs	r1, #4
 8000b62:	4838      	ldr	r0, [pc, #224]	; (8000c44 <MX_GPIO_Init+0x190>)
 8000b64:	f001 fe40 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8000b68:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	482d      	ldr	r0, [pc, #180]	; (8000c38 <MX_GPIO_Init+0x184>)
 8000b82:	f001 fc7d 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin Rotary2_Pin Rotary8_Pin Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|Rotary2_Pin|Rotary8_Pin|Rotary1_Pin;
 8000b86:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4827      	ldr	r0, [pc, #156]	; (8000c38 <MX_GPIO_Init+0x184>)
 8000b9c:	f001 fc70 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8000ba0:	f640 0304 	movw	r3, #2052	; 0x804
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4821      	ldr	r0, [pc, #132]	; (8000c3c <MX_GPIO_Init+0x188>)
 8000bb6:	f001 fc63 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481a      	ldr	r0, [pc, #104]	; (8000c3c <MX_GPIO_Init+0x188>)
 8000bd4:	f001 fc54 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000bd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4813      	ldr	r0, [pc, #76]	; (8000c40 <MX_GPIO_Init+0x18c>)
 8000bf2:	f001 fc45 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8000bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_GPIO_Init+0x18c>)
 8000c0c:	f001 fc38 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8000c10:	2304      	movs	r3, #4
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4807      	ldr	r0, [pc, #28]	; (8000c44 <MX_GPIO_Init+0x190>)
 8000c28:	f001 fc2a 	bl	8002480 <HAL_GPIO_Init>

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020800 	.word	0x40020800
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020c00 	.word	0x40020c00

08000c48 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	// ADC END Program
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a2f      	ldr	r2, [pc, #188]	; (8000d94 <HAL_ADC_MspInit+0xdc>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d157      	bne.n	8000d8a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <HAL_ADC_MspInit+0xe0>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a2d      	ldr	r2, [pc, #180]	; (8000d98 <HAL_ADC_MspInit+0xe0>)
 8000ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <HAL_ADC_MspInit+0xe0>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <HAL_ADC_MspInit+0xe0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a26      	ldr	r2, [pc, #152]	; (8000d98 <HAL_ADC_MspInit+0xe0>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <HAL_ADC_MspInit+0xe0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d12:	2301      	movs	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d16:	2303      	movs	r3, #3
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	481d      	ldr	r0, [pc, #116]	; (8000d9c <HAL_ADC_MspInit+0xe4>)
 8000d26:	f001 fbab 	bl	8002480 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d2c:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_ADC_MspInit+0xec>)
 8000d2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d6e:	480c      	ldr	r0, [pc, #48]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d70:	f001 f816 	bl	8001da0 <HAL_DMA_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d7a:	f7ff ff6f 	bl	8000c5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
 8000d84:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <HAL_ADC_MspInit+0xe8>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40012000 	.word	0x40012000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	2000012c 	.word	0x2000012c
 8000da4:	40026410 	.word	0x40026410

08000da8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d10e      	bne.n	8000dd8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_TIM_PWM_MspInit+0x64>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <HAL_TIM_PWM_MspInit+0x64>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_TIM_PWM_MspInit+0x64>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dd6:	e012      	b.n	8000dfe <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <HAL_TIM_PWM_MspInit+0x68>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10d      	bne.n	8000dfe <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_TIM_PWM_MspInit+0x64>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <HAL_TIM_PWM_MspInit+0x64>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_TIM_PWM_MspInit+0x64>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40000800 	.word	0x40000800

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <HAL_TIM_Base_MspInit+0x80>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d116      	bne.n	8000e54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_TIM_Base_MspInit+0x84>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <HAL_TIM_Base_MspInit+0x84>)
 8000e30:	f043 0310 	orr.w	r3, r3, #16
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_TIM_Base_MspInit+0x84>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 0310 	and.w	r3, r3, #16
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2036      	movs	r0, #54	; 0x36
 8000e48:	f000 ff73 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e4c:	2036      	movs	r0, #54	; 0x36
 8000e4e:	f000 ff8c 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000e52:	e01a      	b.n	8000e8a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d115      	bne.n	8000e8a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_TIM_Base_MspInit+0x84>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <HAL_TIM_Base_MspInit+0x84>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_TIM_Base_MspInit+0x84>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2037      	movs	r0, #55	; 0x37
 8000e80:	f000 ff57 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e84:	2037      	movs	r0, #55	; 0x37
 8000e86:	f000 ff70 	bl	8001d6a <HAL_NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40001000 	.word	0x40001000
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40001400 	.word	0x40001400

08000ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec0:	d11f      	bne.n	8000f02 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <HAL_TIM_MspPostInit+0xb0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <HAL_TIM_MspPostInit+0xb0>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <HAL_TIM_MspPostInit+0xb0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4816      	ldr	r0, [pc, #88]	; (8000f54 <HAL_TIM_MspPostInit+0xb4>)
 8000efc:	f001 fac0 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f00:	e022      	b.n	8000f48 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_TIM_MspPostInit+0xb8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d11d      	bne.n	8000f48 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_TIM_MspPostInit+0xb0>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_TIM_MspPostInit+0xb0>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_TIM_MspPostInit+0xb0>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8000f28:	23c0      	movs	r3, #192	; 0xc0
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <HAL_TIM_MspPostInit+0xbc>)
 8000f44:	f001 fa9c 	bl	8002480 <HAL_GPIO_Init>
}
 8000f48:	bf00      	nop
 8000f4a:	3728      	adds	r7, #40	; 0x28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	40020400 	.word	0x40020400

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <HAL_UART_MspInit+0x84>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12b      	bne.n	8000fda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f8c:	f043 0320 	orr.w	r3, r3, #32
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fba:	23c0      	movs	r3, #192	; 0xc0
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_UART_MspInit+0x8c>)
 8000fd6:	f001 fa53 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40011400 	.word	0x40011400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020800 	.word	0x40020800

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f952 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <TIM6_DAC_IRQHandler+0x10>)
 800104a:	f002 f8f7 	bl	800323c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000018c 	.word	0x2000018c

08001058 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM7_IRQHandler+0x10>)
 800105e:	f002 f8ed 	bl	800323c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000260 	.word	0x20000260

0800106c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <DMA2_Stream0_IRQHandler+0x10>)
 8001072:	f000 ff9b 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000012c 	.word	0x2000012c

08001080 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e00a      	b.n	80010a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001092:	f3af 8000 	nop.w
 8001096:	4601      	mov	r1, r0
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	b2ca      	uxtb	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf0      	blt.n	8001092 <_read+0x12>
	}

return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e009      	b.n	80010e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa47 	bl	8000568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf1      	blt.n	80010cc <_write+0x12>
	}
	return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_close>:

int _close(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
	return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111a:	605a      	str	r2, [r3, #4]
	return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_isatty>:

int _isatty(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
	return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f003 f848 	bl	8004220 <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20020000 	.word	0x20020000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	20000090 	.word	0x20000090
 80011c4:	200002c0 	.word	0x200002c0

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011f2:	490e      	ldr	r1, [pc, #56]	; (800122c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001208:	4c0b      	ldr	r4, [pc, #44]	; (8001238 <LoopFillZerobss+0x26>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001216:	f7ff ffd7 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f003 f807 	bl	800422c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff f9b5 	bl	800058c <main>
  bx  lr    
 8001222:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001230:	08005378 	.word	0x08005378
  ldr r2, =_sbss
 8001234:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001238:	200002bc 	.word	0x200002bc

0800123c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <HAL_Init+0x40>)
 800124a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_Init+0x40>)
 8001256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_Init+0x40>)
 8001262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 fd57 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	200f      	movs	r0, #15
 8001270:	f000 f808 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f7ff fcf8 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023c00 	.word	0x40023c00

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x54>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fd6f 	bl	8001d86 <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d80a      	bhi.n	80012ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f000 fd37 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_InitTick+0x5c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000004 	.word	0x20000004

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008
 8001308:	200002a8 	.word	0x200002a8

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	200002a8 	.word	0x200002a8

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff ffee 	bl	800130c <HAL_GetTick>
 8001330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_Delay+0x44>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134a:	bf00      	nop
 800134c:	f7ff ffde 	bl	800130c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000008 	.word	0x20000008

0800136c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e033      	b.n	80013ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fc94 	bl	8000cb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d118      	bne.n	80013dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013b2:	f023 0302 	bic.w	r3, r3, #2
 80013b6:	f043 0202 	orr.w	r2, r3, #2
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 fa5e 	bl	8001880 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f023 0303 	bic.w	r3, r3, #3
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
 80013da:	e001      	b.n	80013e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_ADC_Start_DMA+0x1e>
 800140e:	2302      	movs	r3, #2
 8001410:	e0e9      	b.n	80015e6 <HAL_ADC_Start_DMA+0x1f2>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b01      	cmp	r3, #1
 8001426:	d018      	beq.n	800145a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001438:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <HAL_ADC_Start_DMA+0x1fc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a6d      	ldr	r2, [pc, #436]	; (80015f4 <HAL_ADC_Start_DMA+0x200>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0c9a      	lsrs	r2, r3, #18
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800144c:	e002      	b.n	8001454 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	3b01      	subs	r3, #1
 8001452:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f9      	bne.n	800144e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001468:	d107      	bne.n	800147a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001478:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	f040 80a1 	bne.w	80015cc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014c8:	d106      	bne.n	80014d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f023 0206 	bic.w	r2, r3, #6
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
 80014d6:	e002      	b.n	80014de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <HAL_ADC_Start_DMA+0x204>)
 80014e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	4a43      	ldr	r2, [pc, #268]	; (80015fc <HAL_ADC_Start_DMA+0x208>)
 80014f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	4a42      	ldr	r2, [pc, #264]	; (8001600 <HAL_ADC_Start_DMA+0x20c>)
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fe:	4a41      	ldr	r2, [pc, #260]	; (8001604 <HAL_ADC_Start_DMA+0x210>)
 8001500:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800150a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800151a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800152a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	334c      	adds	r3, #76	; 0x4c
 8001536:	4619      	mov	r1, r3
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f000 fcde 	bl	8001efc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2b00      	cmp	r3, #0
 800154a:	d12a      	bne.n	80015a2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2d      	ldr	r2, [pc, #180]	; (8001608 <HAL_ADC_Start_DMA+0x214>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d015      	beq.n	8001582 <HAL_ADC_Start_DMA+0x18e>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a2c      	ldr	r2, [pc, #176]	; (800160c <HAL_ADC_Start_DMA+0x218>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d105      	bne.n	800156c <HAL_ADC_Start_DMA+0x178>
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_ADC_Start_DMA+0x204>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00a      	beq.n	8001582 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <HAL_ADC_Start_DMA+0x21c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d136      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_ADC_Start_DMA+0x204>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	d130      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d129      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	e020      	b.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a18      	ldr	r2, [pc, #96]	; (8001608 <HAL_ADC_Start_DMA+0x214>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d11b      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d114      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	e00b      	b.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f043 0210 	orr.w	r2, r3, #16
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000000 	.word	0x20000000
 80015f4:	431bde83 	.word	0x431bde83
 80015f8:	40012300 	.word	0x40012300
 80015fc:	08001a79 	.word	0x08001a79
 8001600:	08001b33 	.word	0x08001b33
 8001604:	08001b4f 	.word	0x08001b4f
 8001608:	40012000 	.word	0x40012000
 800160c:	40012100 	.word	0x40012100
 8001610:	40012200 	.word	0x40012200

08001614 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x1c>
 8001654:	2302      	movs	r3, #2
 8001656:	e105      	b.n	8001864 <HAL_ADC_ConfigChannel+0x228>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b09      	cmp	r3, #9
 8001666:	d925      	bls.n	80016b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68d9      	ldr	r1, [r3, #12]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	3b1e      	subs	r3, #30
 800167e:	2207      	movs	r2, #7
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43da      	mvns	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	400a      	ands	r2, r1
 800168c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68d9      	ldr	r1, [r3, #12]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	4603      	mov	r3, r0
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4403      	add	r3, r0
 80016a6:	3b1e      	subs	r3, #30
 80016a8:	409a      	lsls	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	e022      	b.n	80016fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6919      	ldr	r1, [r3, #16]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	2207      	movs	r2, #7
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	400a      	ands	r2, r1
 80016d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6919      	ldr	r1, [r3, #16]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4403      	add	r3, r0
 80016f0:	409a      	lsls	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d824      	bhi.n	800174c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	3b05      	subs	r3, #5
 8001714:	221f      	movs	r2, #31
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	400a      	ands	r2, r1
 8001722:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b05      	subs	r3, #5
 800173e:	fa00 f203 	lsl.w	r2, r0, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
 800174a:	e04c      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d824      	bhi.n	800179e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b23      	subs	r3, #35	; 0x23
 8001766:	221f      	movs	r2, #31
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43da      	mvns	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	400a      	ands	r2, r1
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	3b23      	subs	r3, #35	; 0x23
 8001790:	fa00 f203 	lsl.w	r2, r0, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
 800179c:	e023      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3b41      	subs	r3, #65	; 0x41
 80017b0:	221f      	movs	r2, #31
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	400a      	ands	r2, r1
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	3b41      	subs	r3, #65	; 0x41
 80017da:	fa00 f203 	lsl.w	r2, r0, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e6:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_ADC_ConfigChannel+0x234>)
 80017e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_ADC_ConfigChannel+0x238>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d109      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1cc>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b12      	cmp	r3, #18
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_ADC_ConfigChannel+0x238>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d123      	bne.n	800185a <HAL_ADC_ConfigChannel+0x21e>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b10      	cmp	r3, #16
 8001818:	d003      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x1e6>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b11      	cmp	r3, #17
 8001820:	d11b      	bne.n	800185a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b10      	cmp	r3, #16
 8001834:	d111      	bne.n	800185a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_ADC_ConfigChannel+0x23c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_ADC_ConfigChannel+0x240>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	0c9a      	lsrs	r2, r3, #18
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800184c:	e002      	b.n	8001854 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3b01      	subs	r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f9      	bne.n	800184e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40012300 	.word	0x40012300
 8001874:	40012000 	.word	0x40012000
 8001878:	20000000 	.word	0x20000000
 800187c:	431bde83 	.word	0x431bde83

08001880 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001888:	4b79      	ldr	r3, [pc, #484]	; (8001a70 <ADC_Init+0x1f0>)
 800188a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	021a      	lsls	r2, r3, #8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6899      	ldr	r1, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	4a58      	ldr	r2, [pc, #352]	; (8001a74 <ADC_Init+0x1f4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d022      	beq.n	800195e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001926:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6899      	ldr	r1, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6899      	ldr	r1, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e00f      	b.n	800197e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800196c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800197c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0202 	bic.w	r2, r2, #2
 800198c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6899      	ldr	r1, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e1b      	ldrb	r3, [r3, #24]
 8001998:	005a      	lsls	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01b      	beq.n	80019e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6859      	ldr	r1, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	3b01      	subs	r3, #1
 80019d8:	035a      	lsls	r2, r3, #13
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	e007      	b.n	80019f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	051a      	lsls	r2, r3, #20
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6899      	ldr	r1, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a36:	025a      	lsls	r2, r3, #9
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6899      	ldr	r1, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	029a      	lsls	r2, r3, #10
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	609a      	str	r2, [r3, #8]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40012300 	.word	0x40012300
 8001a74:	0f000001 	.word	0x0f000001

08001a78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d13c      	bne.n	8001b0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d12b      	bne.n	8001b04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d127      	bne.n	8001b04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d119      	bne.n	8001b04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0220 	bic.w	r2, r2, #32
 8001ade:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d105      	bne.n	8001b04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f7ff f89f 	bl	8000c48 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b0a:	e00e      	b.n	8001b2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7ff fd85 	bl	8001628 <HAL_ADC_ErrorCallback>
}
 8001b1e:	e004      	b.n	8001b2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff fd67 	bl	8001614 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f043 0204 	orr.w	r2, r3, #4
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7ff fd5a 	bl	8001628 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff3e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff8e 	bl	8001c70 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff31 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff faae 	bl	800130c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e099      	b.n	8001ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ddc:	e00f      	b.n	8001dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dde:	f7ff fa95 	bl	800130c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d908      	bls.n	8001dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e078      	b.n	8001ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e8      	bne.n	8001dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_DMA_Init+0x158>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d107      	bne.n	8001e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4313      	orrs	r3, r2
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f023 0307 	bic.w	r3, r3, #7
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d117      	bne.n	8001ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fa6f 	bl	8002388 <DMA_CheckFifoParam>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e016      	b.n	8001ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa26 	bl	800231c <DMA_CalcBaseAndBitshift>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	223f      	movs	r2, #63	; 0x3f
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	f010803f 	.word	0xf010803f

08001efc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_DMA_Start_IT+0x26>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e040      	b.n	8001fa4 <HAL_DMA_Start_IT+0xa8>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d12f      	bne.n	8001f96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f9b8 	bl	80022c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	223f      	movs	r2, #63	; 0x3f
 8001f56:	409a      	lsls	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0216 	orr.w	r2, r2, #22
 8001f6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e005      	b.n	8001fa2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fb8:	4b92      	ldr	r3, [pc, #584]	; (8002204 <HAL_DMA_IRQHandler+0x258>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a92      	ldr	r2, [pc, #584]	; (8002208 <HAL_DMA_IRQHandler+0x25c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2208      	movs	r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2201      	movs	r2, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2201      	movs	r2, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2204      	movs	r2, #4
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2204      	movs	r2, #4
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2210      	movs	r2, #16
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03c      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2210      	movs	r2, #16
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
 80020da:	e01f      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e016      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2220      	movs	r2, #32
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 808e 	beq.w	800224a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8086 	beq.w	800224a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2220      	movs	r2, #32
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d136      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0216 	bic.w	r2, r2, #22
 8002164:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002174:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_DMA_IRQHandler+0x1da>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	223f      	movs	r2, #63	; 0x3f
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07d      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
        }
        return;
 80021c2:	e078      	b.n	80022b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01c      	beq.n	800220c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d030      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e02b      	b.n	800224a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d027      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
 8002202:	e022      	b.n	800224a <HAL_DMA_IRQHandler+0x29e>
 8002204:	20000000 	.word	0x20000000
 8002208:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0210 	bic.w	r2, r2, #16
 8002228:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	2b00      	cmp	r3, #0
 8002250:	d032      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d022      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2205      	movs	r2, #5
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3301      	adds	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	429a      	cmp	r2, r3
 8002280:	d307      	bcc.n	8002292 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f2      	bne.n	8002276 <HAL_DMA_IRQHandler+0x2ca>
 8002290:	e000      	b.n	8002294 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002292:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
 80022b4:	e000      	b.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022b6:	bf00      	nop
    }
  }
}
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop

080022c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d108      	bne.n	8002300 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022fe:	e007      	b.n	8002310 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3b10      	subs	r3, #16
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <DMA_CalcBaseAndBitshift+0x64>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002336:	4a13      	ldr	r2, [pc, #76]	; (8002384 <DMA_CalcBaseAndBitshift+0x68>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d909      	bls.n	800235e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	1d1a      	adds	r2, r3, #4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58
 800235c:	e007      	b.n	800236e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	aaaaaaab 	.word	0xaaaaaaab
 8002384:	080052c8 	.word	0x080052c8

08002388 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11f      	bne.n	80023e2 <DMA_CheckFifoParam+0x5a>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d856      	bhi.n	8002456 <DMA_CheckFifoParam+0xce>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <DMA_CheckFifoParam+0x28>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023d3 	.word	0x080023d3
 80023b8:	080023c1 	.word	0x080023c1
 80023bc:	08002457 	.word	0x08002457
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d046      	beq.n	800245a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e043      	b.n	800245a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023da:	d140      	bne.n	800245e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e03d      	b.n	800245e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ea:	d121      	bne.n	8002430 <DMA_CheckFifoParam+0xa8>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d837      	bhi.n	8002462 <DMA_CheckFifoParam+0xda>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <DMA_CheckFifoParam+0x70>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002409 	.word	0x08002409
 80023fc:	0800240f 	.word	0x0800240f
 8002400:	08002409 	.word	0x08002409
 8002404:	08002421 	.word	0x08002421
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e030      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d025      	beq.n	8002466 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241e:	e022      	b.n	8002466 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002428:	d11f      	bne.n	800246a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800242e:	e01c      	b.n	800246a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d903      	bls.n	800243e <DMA_CheckFifoParam+0xb6>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d003      	beq.n	8002444 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800243c:	e018      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
      break;
 8002442:	e015      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      break;
 8002454:	e00b      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 8002456:	bf00      	nop
 8002458:	e00a      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800245a:	bf00      	nop
 800245c:	e008      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800245e:	bf00      	nop
 8002460:	e006      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 8002462:	bf00      	nop
 8002464:	e004      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 8002466:	bf00      	nop
 8002468:	e002      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;   
 800246a:	bf00      	nop
 800246c:	e000      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
    }
  } 
  
  return status; 
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e16b      	b.n	8002774 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f040 815a 	bne.w	800276e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d005      	beq.n	80024d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d130      	bne.n	8002534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 0201 	and.w	r2, r3, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b03      	cmp	r3, #3
 800253e:	d017      	beq.n	8002570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d123      	bne.n	80025c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80b4 	beq.w	800276e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b60      	ldr	r3, [pc, #384]	; (800278c <HAL_GPIO_Init+0x30c>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a5f      	ldr	r2, [pc, #380]	; (800278c <HAL_GPIO_Init+0x30c>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b5d      	ldr	r3, [pc, #372]	; (800278c <HAL_GPIO_Init+0x30c>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002622:	4a5b      	ldr	r2, [pc, #364]	; (8002790 <HAL_GPIO_Init+0x310>)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_GPIO_Init+0x314>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d02b      	beq.n	80026a6 <HAL_GPIO_Init+0x226>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a51      	ldr	r2, [pc, #324]	; (8002798 <HAL_GPIO_Init+0x318>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d025      	beq.n	80026a2 <HAL_GPIO_Init+0x222>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a50      	ldr	r2, [pc, #320]	; (800279c <HAL_GPIO_Init+0x31c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d01f      	beq.n	800269e <HAL_GPIO_Init+0x21e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <HAL_GPIO_Init+0x320>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d019      	beq.n	800269a <HAL_GPIO_Init+0x21a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_GPIO_Init+0x324>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <HAL_GPIO_Init+0x216>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_GPIO_Init+0x328>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00d      	beq.n	8002692 <HAL_GPIO_Init+0x212>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_GPIO_Init+0x32c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d007      	beq.n	800268e <HAL_GPIO_Init+0x20e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_GPIO_Init+0x330>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_GPIO_Init+0x20a>
 8002686:	2307      	movs	r3, #7
 8002688:	e00e      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 800268a:	2308      	movs	r3, #8
 800268c:	e00c      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 800268e:	2306      	movs	r3, #6
 8002690:	e00a      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 8002692:	2305      	movs	r3, #5
 8002694:	e008      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 8002696:	2304      	movs	r3, #4
 8002698:	e006      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 800269a:	2303      	movs	r3, #3
 800269c:	e004      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 800269e:	2302      	movs	r3, #2
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_Init+0x228>
 80026a6:	2300      	movs	r3, #0
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	f002 0203 	and.w	r2, r2, #3
 80026ae:	0092      	lsls	r2, r2, #2
 80026b0:	4093      	lsls	r3, r2
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b8:	4935      	ldr	r1, [pc, #212]	; (8002790 <HAL_GPIO_Init+0x310>)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_GPIO_Init+0x334>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ea:	4a32      	ldr	r2, [pc, #200]	; (80027b4 <HAL_GPIO_Init+0x334>)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_GPIO_Init+0x334>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <HAL_GPIO_Init+0x334>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271a:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <HAL_GPIO_Init+0x334>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_GPIO_Init+0x334>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_GPIO_Init+0x334>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_GPIO_Init+0x334>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3301      	adds	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b0f      	cmp	r3, #15
 8002778:	f67f ae90 	bls.w	800249c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	40013800 	.word	0x40013800
 8002794:	40020000 	.word	0x40020000
 8002798:	40020400 	.word	0x40020400
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020c00 	.word	0x40020c00
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40021400 	.word	0x40021400
 80027ac:	40021800 	.word	0x40021800
 80027b0:	40021c00 	.word	0x40021c00
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	e001      	b.n	80027da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002804:	e003      	b.n	800280e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e264      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d075      	beq.n	8002926 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800283a:	4ba3      	ldr	r3, [pc, #652]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b04      	cmp	r3, #4
 8002844:	d00c      	beq.n	8002860 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002846:	4ba0      	ldr	r3, [pc, #640]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800284e:	2b08      	cmp	r3, #8
 8002850:	d112      	bne.n	8002878 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002852:	4b9d      	ldr	r3, [pc, #628]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800285e:	d10b      	bne.n	8002878 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	4b99      	ldr	r3, [pc, #612]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d05b      	beq.n	8002924 <HAL_RCC_OscConfig+0x108>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d157      	bne.n	8002924 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e23f      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d106      	bne.n	8002890 <HAL_RCC_OscConfig+0x74>
 8002882:	4b91      	ldr	r3, [pc, #580]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a90      	ldr	r2, [pc, #576]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e01d      	b.n	80028cc <HAL_RCC_OscConfig+0xb0>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x98>
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a8a      	ldr	r2, [pc, #552]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a87      	ldr	r2, [pc, #540]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0xb0>
 80028b4:	4b84      	ldr	r3, [pc, #528]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a83      	ldr	r2, [pc, #524]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b81      	ldr	r3, [pc, #516]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a80      	ldr	r2, [pc, #512]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fd1a 	bl	800130c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fd16 	bl	800130c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e204      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b76      	ldr	r3, [pc, #472]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0xc0>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe fd06 	bl	800130c <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe fd02 	bl	800130c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e1f0      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	4b6c      	ldr	r3, [pc, #432]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0xe8>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d063      	beq.n	80029fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002932:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293e:	4b62      	ldr	r3, [pc, #392]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002946:	2b08      	cmp	r3, #8
 8002948:	d11c      	bne.n	8002984 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294a:	4b5f      	ldr	r3, [pc, #380]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_RCC_OscConfig+0x152>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e1c4      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296e:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4952      	ldr	r1, [pc, #328]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	e03a      	b.n	80029fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298c:	4b4f      	ldr	r3, [pc, #316]	; (8002acc <HAL_RCC_OscConfig+0x2b0>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7fe fcbb 	bl	800130c <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299a:	f7fe fcb7 	bl	800130c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e1a5      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	4b46      	ldr	r3, [pc, #280]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4940      	ldr	r1, [pc, #256]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
 80029cc:	e015      	b.n	80029fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ce:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <HAL_RCC_OscConfig+0x2b0>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fc9a 	bl	800130c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029dc:	f7fe fc96 	bl	800130c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e184      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d030      	beq.n	8002a68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d016      	beq.n	8002a3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_RCC_OscConfig+0x2b4>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7fe fc7a 	bl	800130c <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fc76 	bl	800130c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e164      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x200>
 8002a3a:	e015      	b.n	8002a68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_OscConfig+0x2b4>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a42:	f7fe fc63 	bl	800130c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4a:	f7fe fc5f 	bl	800130c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e14d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80a0 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_OscConfig+0x2b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d121      	bne.n	8002af6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_RCC_OscConfig+0x2b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_RCC_OscConfig+0x2b8>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fc25 	bl	800130c <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	e011      	b.n	8002aea <HAL_RCC_OscConfig+0x2ce>
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	42470000 	.word	0x42470000
 8002ad0:	42470e80 	.word	0x42470e80
 8002ad4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad8:	f7fe fc18 	bl	800130c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e106      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_RCC_OscConfig+0x4e4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d106      	bne.n	8002b0c <HAL_RCC_OscConfig+0x2f0>
 8002afe:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a80      	ldr	r2, [pc, #512]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	e01c      	b.n	8002b46 <HAL_RCC_OscConfig+0x32a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x312>
 8002b14:	4b7b      	ldr	r3, [pc, #492]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a7a      	ldr	r2, [pc, #488]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b20:	4b78      	ldr	r3, [pc, #480]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a77      	ldr	r2, [pc, #476]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	e00b      	b.n	8002b46 <HAL_RCC_OscConfig+0x32a>
 8002b2e:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a74      	ldr	r2, [pc, #464]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	4b72      	ldr	r3, [pc, #456]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a71      	ldr	r2, [pc, #452]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d015      	beq.n	8002b7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fbdd 	bl	800130c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fe fbd9 	bl	800130c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0c5      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ee      	beq.n	8002b56 <HAL_RCC_OscConfig+0x33a>
 8002b78:	e014      	b.n	8002ba4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fbc7 	bl	800130c <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fe fbc3 	bl	800130c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0af      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	4b5a      	ldr	r3, [pc, #360]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ee      	bne.n	8002b82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b56      	ldr	r3, [pc, #344]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a55      	ldr	r2, [pc, #340]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 809b 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d05c      	beq.n	8002c86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d141      	bne.n	8002c58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <HAL_RCC_OscConfig+0x4ec>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7fe fb97 	bl	800130c <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be2:	f7fe fb93 	bl	800130c <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e081      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf4:	4b43      	ldr	r3, [pc, #268]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	019b      	lsls	r3, r3, #6
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	085b      	lsrs	r3, r3, #1
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	4937      	ldr	r1, [pc, #220]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_RCC_OscConfig+0x4ec>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe fb6c 	bl	800130c <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fb68 	bl	800130c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e056      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x41c>
 8002c56:	e04e      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c58:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_RCC_OscConfig+0x4ec>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fe fb55 	bl	800130c <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c66:	f7fe fb51 	bl	800130c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e03f      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c78:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x44a>
 8002c84:	e037      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e032      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c92:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <HAL_RCC_OscConfig+0x4e8>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d028      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d121      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d11a      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d111      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40007000 	.word	0x40007000
 8002d04:	40023800 	.word	0x40023800
 8002d08:	42470060 	.word	0x42470060

08002d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0cc      	b.n	8002eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d90c      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b65      	ldr	r3, [pc, #404]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0b8      	b.n	8002eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d020      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4a58      	ldr	r2, [pc, #352]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4a52      	ldr	r2, [pc, #328]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d84:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	494d      	ldr	r1, [pc, #308]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d044      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d119      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e07f      	b.n	8002eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d003      	beq.n	8002dca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dca:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06f      	b.n	8002eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e067      	b.n	8002eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dea:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4934      	ldr	r1, [pc, #208]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fa86 	bl	800130c <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7fe fa82 	bl	800130c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e04f      	b.n	8002eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 020c 	and.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1eb      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d20c      	bcs.n	8002e54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b22      	ldr	r3, [pc, #136]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e032      	b.n	8002eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4916      	ldr	r1, [pc, #88]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e92:	f000 f821 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8002e96:	4602      	mov	r2, r0
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	490a      	ldr	r1, [pc, #40]	; (8002ecc <HAL_RCC_ClockConfig+0x1c0>)
 8002ea4:	5ccb      	ldrb	r3, [r1, r3]
 8002ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f9e6 	bl	8001284 <HAL_InitTick>

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023c00 	.word	0x40023c00
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	080052b0 	.word	0x080052b0
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	20000004 	.word	0x20000004

08002ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d00d      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x40>
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	f200 80bd 	bhi.w	800307c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x34>
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d003      	beq.n	8002f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f0a:	e0b7      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f0e:	60bb      	str	r3, [r7, #8]
       break;
 8002f10:	e0b7      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f12:	4b60      	ldr	r3, [pc, #384]	; (8003094 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f14:	60bb      	str	r3, [r7, #8]
      break;
 8002f16:	e0b4      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f18:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f22:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d04d      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2e:	4b58      	ldr	r3, [pc, #352]	; (8003090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	461a      	mov	r2, r3
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f3e:	f04f 0100 	mov.w	r1, #0
 8002f42:	ea02 0800 	and.w	r8, r2, r0
 8002f46:	ea03 0901 	and.w	r9, r3, r1
 8002f4a:	4640      	mov	r0, r8
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	014b      	lsls	r3, r1, #5
 8002f58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f5c:	0142      	lsls	r2, r0, #5
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	ebb0 0008 	subs.w	r0, r0, r8
 8002f66:	eb61 0109 	sbc.w	r1, r1, r9
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	018b      	lsls	r3, r1, #6
 8002f74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f78:	0182      	lsls	r2, r0, #6
 8002f7a:	1a12      	subs	r2, r2, r0
 8002f7c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f80:	f04f 0000 	mov.w	r0, #0
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	00d9      	lsls	r1, r3, #3
 8002f8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f8e:	00d0      	lsls	r0, r2, #3
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	eb12 0208 	adds.w	r2, r2, r8
 8002f98:	eb43 0309 	adc.w	r3, r3, r9
 8002f9c:	f04f 0000 	mov.w	r0, #0
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	0299      	lsls	r1, r3, #10
 8002fa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002faa:	0290      	lsls	r0, r2, #10
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	f7fd f958 	bl	8000270 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e04a      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fda:	f04f 0100 	mov.w	r1, #0
 8002fde:	ea02 0400 	and.w	r4, r2, r0
 8002fe2:	ea03 0501 	and.w	r5, r3, r1
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	4629      	mov	r1, r5
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	014b      	lsls	r3, r1, #5
 8002ff4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ff8:	0142      	lsls	r2, r0, #5
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	1b00      	subs	r0, r0, r4
 8003000:	eb61 0105 	sbc.w	r1, r1, r5
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	018b      	lsls	r3, r1, #6
 800300e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003012:	0182      	lsls	r2, r0, #6
 8003014:	1a12      	subs	r2, r2, r0
 8003016:	eb63 0301 	sbc.w	r3, r3, r1
 800301a:	f04f 0000 	mov.w	r0, #0
 800301e:	f04f 0100 	mov.w	r1, #0
 8003022:	00d9      	lsls	r1, r3, #3
 8003024:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003028:	00d0      	lsls	r0, r2, #3
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	1912      	adds	r2, r2, r4
 8003030:	eb45 0303 	adc.w	r3, r5, r3
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f04f 0100 	mov.w	r1, #0
 800303c:	0299      	lsls	r1, r3, #10
 800303e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003042:	0290      	lsls	r0, r2, #10
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	461a      	mov	r2, r3
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	f7fd f90c 	bl	8000270 <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4613      	mov	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	3301      	adds	r3, #1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	60bb      	str	r3, [r7, #8]
      break;
 800307a:	e002      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800307e:	60bb      	str	r3, [r7, #8]
      break;
 8003080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003082:	68bb      	ldr	r3, [r7, #8]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	00f42400 	.word	0x00f42400

08003098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_RCC_GetHCLKFreq+0x14>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000000 	.word	0x20000000

080030b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030b4:	f7ff fff0 	bl	8003098 <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0a9b      	lsrs	r3, r3, #10
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	080052c0 	.word	0x080052c0

080030d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030dc:	f7ff ffdc 	bl	8003098 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0b5b      	lsrs	r3, r3, #13
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	080052c0 	.word	0x080052c0

08003100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e041      	b.n	8003196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fe74 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f000 fa78 	bl	8003634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e041      	b.n	8003234 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d106      	bne.n	80031ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7fd fdef 	bl	8000da8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 fa29 	bl	8003634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d122      	bne.n	8003298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d11b      	bne.n	8003298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0202 	mvn.w	r2, #2
 8003268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f9ba 	bl	80035f8 <HAL_TIM_IC_CaptureCallback>
 8003284:	e005      	b.n	8003292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f9ac 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f9bd 	bl	800360c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d122      	bne.n	80032ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0204 	mvn.w	r2, #4
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f990 	bl	80035f8 <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f982 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f993 	bl	800360c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d122      	bne.n	8003340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d11b      	bne.n	8003340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0208 	mvn.w	r2, #8
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2204      	movs	r2, #4
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f966 	bl	80035f8 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f958 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f969 	bl	800360c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b10      	cmp	r3, #16
 800334c:	d122      	bne.n	8003394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b10      	cmp	r3, #16
 800335a:	d11b      	bne.n	8003394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0210 	mvn.w	r2, #16
 8003364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2208      	movs	r2, #8
 800336a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f93c 	bl	80035f8 <HAL_TIM_IC_CaptureCallback>
 8003380:	e005      	b.n	800338e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f92e 	bl	80035e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f93f 	bl	800360c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10e      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0201 	mvn.w	r2, #1
 80033b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f908 	bl	80035d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d10e      	bne.n	80033ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d107      	bne.n	80033ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fbfa 	bl	8003be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d10e      	bne.n	8003418 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d107      	bne.n	8003418 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f904 	bl	8003620 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	d10e      	bne.n	8003444 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	d107      	bne.n	8003444 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0220 	mvn.w	r2, #32
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fbc4 	bl	8003bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003466:	2302      	movs	r3, #2
 8003468:	e0ae      	b.n	80035c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b0c      	cmp	r3, #12
 8003476:	f200 809f 	bhi.w	80035b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800347a:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	080034b5 	.word	0x080034b5
 8003484:	080035b9 	.word	0x080035b9
 8003488:	080035b9 	.word	0x080035b9
 800348c:	080035b9 	.word	0x080035b9
 8003490:	080034f5 	.word	0x080034f5
 8003494:	080035b9 	.word	0x080035b9
 8003498:	080035b9 	.word	0x080035b9
 800349c:	080035b9 	.word	0x080035b9
 80034a0:	08003537 	.word	0x08003537
 80034a4:	080035b9 	.word	0x080035b9
 80034a8:	080035b9 	.word	0x080035b9
 80034ac:	080035b9 	.word	0x080035b9
 80034b0:	08003577 	.word	0x08003577
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f95a 	bl	8003774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0208 	orr.w	r2, r2, #8
 80034ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0204 	bic.w	r2, r2, #4
 80034de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6999      	ldr	r1, [r3, #24]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	619a      	str	r2, [r3, #24]
      break;
 80034f2:	e064      	b.n	80035be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f9aa 	bl	8003854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6999      	ldr	r1, [r3, #24]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	021a      	lsls	r2, r3, #8
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	619a      	str	r2, [r3, #24]
      break;
 8003534:	e043      	b.n	80035be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f9ff 	bl	8003940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0208 	orr.w	r2, r2, #8
 8003550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0204 	bic.w	r2, r2, #4
 8003560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69d9      	ldr	r1, [r3, #28]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	61da      	str	r2, [r3, #28]
      break;
 8003574:	e023      	b.n	80035be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fa53 	bl	8003a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69d9      	ldr	r1, [r3, #28]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	021a      	lsls	r2, r3, #8
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	61da      	str	r2, [r3, #28]
      break;
 80035b6:	e002      	b.n	80035be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	75fb      	strb	r3, [r7, #23]
      break;
 80035bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a40      	ldr	r2, [pc, #256]	; (8003748 <TIM_Base_SetConfig+0x114>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <TIM_Base_SetConfig+0x40>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003652:	d00f      	beq.n	8003674 <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a3d      	ldr	r2, [pc, #244]	; (800374c <TIM_Base_SetConfig+0x118>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00b      	beq.n	8003674 <TIM_Base_SetConfig+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a3c      	ldr	r2, [pc, #240]	; (8003750 <TIM_Base_SetConfig+0x11c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <TIM_Base_SetConfig+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a3b      	ldr	r2, [pc, #236]	; (8003754 <TIM_Base_SetConfig+0x120>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0x40>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3a      	ldr	r2, [pc, #232]	; (8003758 <TIM_Base_SetConfig+0x124>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d108      	bne.n	8003686 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a2f      	ldr	r2, [pc, #188]	; (8003748 <TIM_Base_SetConfig+0x114>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02b      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d027      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a2c      	ldr	r2, [pc, #176]	; (800374c <TIM_Base_SetConfig+0x118>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d023      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2b      	ldr	r2, [pc, #172]	; (8003750 <TIM_Base_SetConfig+0x11c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01f      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <TIM_Base_SetConfig+0x120>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01b      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a29      	ldr	r2, [pc, #164]	; (8003758 <TIM_Base_SetConfig+0x124>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d017      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a28      	ldr	r2, [pc, #160]	; (800375c <TIM_Base_SetConfig+0x128>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a27      	ldr	r2, [pc, #156]	; (8003760 <TIM_Base_SetConfig+0x12c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00f      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a26      	ldr	r2, [pc, #152]	; (8003764 <TIM_Base_SetConfig+0x130>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a25      	ldr	r2, [pc, #148]	; (8003768 <TIM_Base_SetConfig+0x134>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a24      	ldr	r2, [pc, #144]	; (800376c <TIM_Base_SetConfig+0x138>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a23      	ldr	r2, [pc, #140]	; (8003770 <TIM_Base_SetConfig+0x13c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d108      	bne.n	80036f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <TIM_Base_SetConfig+0x114>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0xf8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <TIM_Base_SetConfig+0x124>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d103      	bne.n	8003734 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	615a      	str	r2, [r3, #20]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40010400 	.word	0x40010400
 800375c:	40014000 	.word	0x40014000
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800
 8003768:	40001800 	.word	0x40001800
 800376c:	40001c00 	.word	0x40001c00
 8003770:	40002000 	.word	0x40002000

08003774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0303 	bic.w	r3, r3, #3
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f023 0302 	bic.w	r3, r3, #2
 80037bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a20      	ldr	r2, [pc, #128]	; (800384c <TIM_OC1_SetConfig+0xd8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_OC1_SetConfig+0x64>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <TIM_OC1_SetConfig+0xdc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d10c      	bne.n	80037f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f023 0308 	bic.w	r3, r3, #8
 80037de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <TIM_OC1_SetConfig+0xd8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_OC1_SetConfig+0x8e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <TIM_OC1_SetConfig+0xdc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d111      	bne.n	8003826 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	621a      	str	r2, [r3, #32]
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40010000 	.word	0x40010000
 8003850:	40010400 	.word	0x40010400

08003854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f023 0210 	bic.w	r2, r3, #16
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0320 	bic.w	r3, r3, #32
 800389e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a22      	ldr	r2, [pc, #136]	; (8003938 <TIM_OC2_SetConfig+0xe4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_OC2_SetConfig+0x68>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a21      	ldr	r2, [pc, #132]	; (800393c <TIM_OC2_SetConfig+0xe8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d10d      	bne.n	80038d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a17      	ldr	r2, [pc, #92]	; (8003938 <TIM_OC2_SetConfig+0xe4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_OC2_SetConfig+0x94>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a16      	ldr	r2, [pc, #88]	; (800393c <TIM_OC2_SetConfig+0xe8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d113      	bne.n	8003910 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40010400 	.word	0x40010400

08003940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0303 	bic.w	r3, r3, #3
 8003976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <TIM_OC3_SetConfig+0xe0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <TIM_OC3_SetConfig+0x66>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <TIM_OC3_SetConfig+0xe4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10d      	bne.n	80039c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <TIM_OC3_SetConfig+0xe0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_OC3_SetConfig+0x92>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <TIM_OC3_SetConfig+0xe4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d113      	bne.n	80039fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010400 	.word	0x40010400

08003a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	031b      	lsls	r3, r3, #12
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a12      	ldr	r2, [pc, #72]	; (8003acc <TIM_OC4_SetConfig+0xa4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_OC4_SetConfig+0x68>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <TIM_OC4_SetConfig+0xa8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d109      	bne.n	8003aa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	019b      	lsls	r3, r3, #6
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e05a      	b.n	8003ba2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a21      	ldr	r2, [pc, #132]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d022      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d01d      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d018      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10c      	bne.n	8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	40010400 	.word	0x40010400
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40001800 	.word	0x40001800

08003bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e03f      	b.n	8003c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd f9a0 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f929 	bl	8003e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b08a      	sub	sp, #40	; 0x28
 8003c92:	af02      	add	r7, sp, #8
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d17c      	bne.n	8003da8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <HAL_UART_Transmit+0x2c>
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e075      	b.n	8003daa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Transmit+0x3e>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e06e      	b.n	8003daa <HAL_UART_Transmit+0x11c>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2221      	movs	r2, #33	; 0x21
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ce2:	f7fd fb13 	bl	800130c <HAL_GetTick>
 8003ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfc:	d108      	bne.n	8003d10 <HAL_UART_Transmit+0x82>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d104      	bne.n	8003d10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e003      	b.n	8003d18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d20:	e02a      	b.n	8003d78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f840 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e036      	b.n	8003daa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	3302      	adds	r3, #2
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	e007      	b.n	8003d6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	781a      	ldrb	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	3301      	adds	r3, #1
 8003d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1cf      	bne.n	8003d22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2140      	movs	r1, #64	; 0x40
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f810 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e006      	b.n	8003daa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e000      	b.n	8003daa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
  }
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b090      	sub	sp, #64	; 0x40
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	e050      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d04c      	beq.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dd2:	f7fd fa9b 	bl	800130c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d241      	bcs.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e02:	637a      	str	r2, [r7, #52]	; 0x34
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e5      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3314      	adds	r3, #20
 8003e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	613b      	str	r3, [r7, #16]
   return(result);
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3314      	adds	r3, #20
 8003e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e36:	623a      	str	r2, [r7, #32]
 8003e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	69f9      	ldr	r1, [r7, #28]
 8003e3c:	6a3a      	ldr	r2, [r7, #32]
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e5      	bne.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e00f      	b.n	8003e86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	bf0c      	ite	eq
 8003e76:	2301      	moveq	r3, #1
 8003e78:	2300      	movne	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d09f      	beq.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3740      	adds	r7, #64	; 0x40
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e94:	b09f      	sub	sp, #124	; 0x7c
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea6:	68d9      	ldr	r1, [r3, #12]
 8003ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	ea40 0301 	orr.w	r3, r0, r1
 8003eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ed4:	f021 010c 	bic.w	r1, r1, #12
 8003ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	6999      	ldr	r1, [r3, #24]
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	ea40 0301 	orr.w	r3, r0, r1
 8003ef8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4bc5      	ldr	r3, [pc, #788]	; (8004214 <UART_SetConfig+0x384>)
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d004      	beq.n	8003f0e <UART_SetConfig+0x7e>
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4bc3      	ldr	r3, [pc, #780]	; (8004218 <UART_SetConfig+0x388>)
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d103      	bne.n	8003f16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f0e:	f7ff f8e3 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 8003f12:	6778      	str	r0, [r7, #116]	; 0x74
 8003f14:	e002      	b.n	8003f1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f16:	f7ff f8cb 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 8003f1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f24:	f040 80b6 	bne.w	8004094 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f2a:	461c      	mov	r4, r3
 8003f2c:	f04f 0500 	mov.w	r5, #0
 8003f30:	4622      	mov	r2, r4
 8003f32:	462b      	mov	r3, r5
 8003f34:	1891      	adds	r1, r2, r2
 8003f36:	6439      	str	r1, [r7, #64]	; 0x40
 8003f38:	415b      	adcs	r3, r3
 8003f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f40:	1912      	adds	r2, r2, r4
 8003f42:	eb45 0303 	adc.w	r3, r5, r3
 8003f46:	f04f 0000 	mov.w	r0, #0
 8003f4a:	f04f 0100 	mov.w	r1, #0
 8003f4e:	00d9      	lsls	r1, r3, #3
 8003f50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f54:	00d0      	lsls	r0, r2, #3
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	1911      	adds	r1, r2, r4
 8003f5c:	6639      	str	r1, [r7, #96]	; 0x60
 8003f5e:	416b      	adcs	r3, r5
 8003f60:	667b      	str	r3, [r7, #100]	; 0x64
 8003f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	1891      	adds	r1, r2, r2
 8003f6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f70:	415b      	adcs	r3, r3
 8003f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f7c:	f7fc f978 	bl	8000270 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4ba5      	ldr	r3, [pc, #660]	; (800421c <UART_SetConfig+0x38c>)
 8003f86:	fba3 2302 	umull	r2, r3, r3, r2
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	011e      	lsls	r6, r3, #4
 8003f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f90:	461c      	mov	r4, r3
 8003f92:	f04f 0500 	mov.w	r5, #0
 8003f96:	4622      	mov	r2, r4
 8003f98:	462b      	mov	r3, r5
 8003f9a:	1891      	adds	r1, r2, r2
 8003f9c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f9e:	415b      	adcs	r3, r3
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003fa6:	1912      	adds	r2, r2, r4
 8003fa8:	eb45 0303 	adc.w	r3, r5, r3
 8003fac:	f04f 0000 	mov.w	r0, #0
 8003fb0:	f04f 0100 	mov.w	r1, #0
 8003fb4:	00d9      	lsls	r1, r3, #3
 8003fb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fba:	00d0      	lsls	r0, r2, #3
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	1911      	adds	r1, r2, r4
 8003fc2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fc4:	416b      	adcs	r3, r5
 8003fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	1891      	adds	r1, r2, r2
 8003fd4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fd6:	415b      	adcs	r3, r3
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003fe2:	f7fc f945 	bl	8000270 <__aeabi_uldivmod>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4b8c      	ldr	r3, [pc, #560]	; (800421c <UART_SetConfig+0x38c>)
 8003fec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	2164      	movs	r1, #100	; 0x64
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	3332      	adds	r3, #50	; 0x32
 8003ffe:	4a87      	ldr	r2, [pc, #540]	; (800421c <UART_SetConfig+0x38c>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800400c:	441e      	add	r6, r3
 800400e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004010:	4618      	mov	r0, r3
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	1894      	adds	r4, r2, r2
 800401c:	623c      	str	r4, [r7, #32]
 800401e:	415b      	adcs	r3, r3
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
 8004022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004026:	1812      	adds	r2, r2, r0
 8004028:	eb41 0303 	adc.w	r3, r1, r3
 800402c:	f04f 0400 	mov.w	r4, #0
 8004030:	f04f 0500 	mov.w	r5, #0
 8004034:	00dd      	lsls	r5, r3, #3
 8004036:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800403a:	00d4      	lsls	r4, r2, #3
 800403c:	4622      	mov	r2, r4
 800403e:	462b      	mov	r3, r5
 8004040:	1814      	adds	r4, r2, r0
 8004042:	653c      	str	r4, [r7, #80]	; 0x50
 8004044:	414b      	adcs	r3, r1
 8004046:	657b      	str	r3, [r7, #84]	; 0x54
 8004048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	461a      	mov	r2, r3
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	1891      	adds	r1, r2, r2
 8004054:	61b9      	str	r1, [r7, #24]
 8004056:	415b      	adcs	r3, r3
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800405e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004062:	f7fc f905 	bl	8000270 <__aeabi_uldivmod>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4b6c      	ldr	r3, [pc, #432]	; (800421c <UART_SetConfig+0x38c>)
 800406c:	fba3 1302 	umull	r1, r3, r3, r2
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	2164      	movs	r1, #100	; 0x64
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	3332      	adds	r3, #50	; 0x32
 800407e:	4a67      	ldr	r2, [pc, #412]	; (800421c <UART_SetConfig+0x38c>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	f003 0207 	and.w	r2, r3, #7
 800408a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4432      	add	r2, r6
 8004090:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004092:	e0b9      	b.n	8004208 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004096:	461c      	mov	r4, r3
 8004098:	f04f 0500 	mov.w	r5, #0
 800409c:	4622      	mov	r2, r4
 800409e:	462b      	mov	r3, r5
 80040a0:	1891      	adds	r1, r2, r2
 80040a2:	6139      	str	r1, [r7, #16]
 80040a4:	415b      	adcs	r3, r3
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040ac:	1912      	adds	r2, r2, r4
 80040ae:	eb45 0303 	adc.w	r3, r5, r3
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	00d9      	lsls	r1, r3, #3
 80040bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040c0:	00d0      	lsls	r0, r2, #3
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	eb12 0804 	adds.w	r8, r2, r4
 80040ca:	eb43 0905 	adc.w	r9, r3, r5
 80040ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f04f 0100 	mov.w	r1, #0
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	008b      	lsls	r3, r1, #2
 80040e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040e6:	0082      	lsls	r2, r0, #2
 80040e8:	4640      	mov	r0, r8
 80040ea:	4649      	mov	r1, r9
 80040ec:	f7fc f8c0 	bl	8000270 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4b49      	ldr	r3, [pc, #292]	; (800421c <UART_SetConfig+0x38c>)
 80040f6:	fba3 2302 	umull	r2, r3, r3, r2
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	011e      	lsls	r6, r3, #4
 80040fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004100:	4618      	mov	r0, r3
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	1894      	adds	r4, r2, r2
 800410c:	60bc      	str	r4, [r7, #8]
 800410e:	415b      	adcs	r3, r3
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004116:	1812      	adds	r2, r2, r0
 8004118:	eb41 0303 	adc.w	r3, r1, r3
 800411c:	f04f 0400 	mov.w	r4, #0
 8004120:	f04f 0500 	mov.w	r5, #0
 8004124:	00dd      	lsls	r5, r3, #3
 8004126:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800412a:	00d4      	lsls	r4, r2, #3
 800412c:	4622      	mov	r2, r4
 800412e:	462b      	mov	r3, r5
 8004130:	1814      	adds	r4, r2, r0
 8004132:	64bc      	str	r4, [r7, #72]	; 0x48
 8004134:	414b      	adcs	r3, r1
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	4618      	mov	r0, r3
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	008b      	lsls	r3, r1, #2
 800414c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004150:	0082      	lsls	r2, r0, #2
 8004152:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004156:	f7fc f88b 	bl	8000270 <__aeabi_uldivmod>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4b2f      	ldr	r3, [pc, #188]	; (800421c <UART_SetConfig+0x38c>)
 8004160:	fba3 1302 	umull	r1, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	2164      	movs	r1, #100	; 0x64
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	3332      	adds	r3, #50	; 0x32
 8004172:	4a2a      	ldr	r2, [pc, #168]	; (800421c <UART_SetConfig+0x38c>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417e:	441e      	add	r6, r3
 8004180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004182:	4618      	mov	r0, r3
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	1894      	adds	r4, r2, r2
 800418e:	603c      	str	r4, [r7, #0]
 8004190:	415b      	adcs	r3, r3
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004198:	1812      	adds	r2, r2, r0
 800419a:	eb41 0303 	adc.w	r3, r1, r3
 800419e:	f04f 0400 	mov.w	r4, #0
 80041a2:	f04f 0500 	mov.w	r5, #0
 80041a6:	00dd      	lsls	r5, r3, #3
 80041a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041ac:	00d4      	lsls	r4, r2, #3
 80041ae:	4622      	mov	r2, r4
 80041b0:	462b      	mov	r3, r5
 80041b2:	eb12 0a00 	adds.w	sl, r2, r0
 80041b6:	eb43 0b01 	adc.w	fp, r3, r1
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	4618      	mov	r0, r3
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	008b      	lsls	r3, r1, #2
 80041ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041d2:	0082      	lsls	r2, r0, #2
 80041d4:	4650      	mov	r0, sl
 80041d6:	4659      	mov	r1, fp
 80041d8:	f7fc f84a 	bl	8000270 <__aeabi_uldivmod>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4b0e      	ldr	r3, [pc, #56]	; (800421c <UART_SetConfig+0x38c>)
 80041e2:	fba3 1302 	umull	r1, r3, r3, r2
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2164      	movs	r1, #100	; 0x64
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	3332      	adds	r3, #50	; 0x32
 80041f4:	4a09      	ldr	r2, [pc, #36]	; (800421c <UART_SetConfig+0x38c>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4432      	add	r2, r6
 8004206:	609a      	str	r2, [r3, #8]
}
 8004208:	bf00      	nop
 800420a:	377c      	adds	r7, #124	; 0x7c
 800420c:	46bd      	mov	sp, r7
 800420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004212:	bf00      	nop
 8004214:	40011000 	.word	0x40011000
 8004218:	40011400 	.word	0x40011400
 800421c:	51eb851f 	.word	0x51eb851f

08004220 <__errno>:
 8004220:	4b01      	ldr	r3, [pc, #4]	; (8004228 <__errno+0x8>)
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	2000000c 	.word	0x2000000c

0800422c <__libc_init_array>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	4d0d      	ldr	r5, [pc, #52]	; (8004264 <__libc_init_array+0x38>)
 8004230:	4c0d      	ldr	r4, [pc, #52]	; (8004268 <__libc_init_array+0x3c>)
 8004232:	1b64      	subs	r4, r4, r5
 8004234:	10a4      	asrs	r4, r4, #2
 8004236:	2600      	movs	r6, #0
 8004238:	42a6      	cmp	r6, r4
 800423a:	d109      	bne.n	8004250 <__libc_init_array+0x24>
 800423c:	4d0b      	ldr	r5, [pc, #44]	; (800426c <__libc_init_array+0x40>)
 800423e:	4c0c      	ldr	r4, [pc, #48]	; (8004270 <__libc_init_array+0x44>)
 8004240:	f000 ffec 	bl	800521c <_init>
 8004244:	1b64      	subs	r4, r4, r5
 8004246:	10a4      	asrs	r4, r4, #2
 8004248:	2600      	movs	r6, #0
 800424a:	42a6      	cmp	r6, r4
 800424c:	d105      	bne.n	800425a <__libc_init_array+0x2e>
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	f855 3b04 	ldr.w	r3, [r5], #4
 8004254:	4798      	blx	r3
 8004256:	3601      	adds	r6, #1
 8004258:	e7ee      	b.n	8004238 <__libc_init_array+0xc>
 800425a:	f855 3b04 	ldr.w	r3, [r5], #4
 800425e:	4798      	blx	r3
 8004260:	3601      	adds	r6, #1
 8004262:	e7f2      	b.n	800424a <__libc_init_array+0x1e>
 8004264:	08005370 	.word	0x08005370
 8004268:	08005370 	.word	0x08005370
 800426c:	08005370 	.word	0x08005370
 8004270:	08005374 	.word	0x08005374

08004274 <memset>:
 8004274:	4402      	add	r2, r0
 8004276:	4603      	mov	r3, r0
 8004278:	4293      	cmp	r3, r2
 800427a:	d100      	bne.n	800427e <memset+0xa>
 800427c:	4770      	bx	lr
 800427e:	f803 1b01 	strb.w	r1, [r3], #1
 8004282:	e7f9      	b.n	8004278 <memset+0x4>

08004284 <iprintf>:
 8004284:	b40f      	push	{r0, r1, r2, r3}
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <iprintf+0x2c>)
 8004288:	b513      	push	{r0, r1, r4, lr}
 800428a:	681c      	ldr	r4, [r3, #0]
 800428c:	b124      	cbz	r4, 8004298 <iprintf+0x14>
 800428e:	69a3      	ldr	r3, [r4, #24]
 8004290:	b913      	cbnz	r3, 8004298 <iprintf+0x14>
 8004292:	4620      	mov	r0, r4
 8004294:	f000 fa5e 	bl	8004754 <__sinit>
 8004298:	ab05      	add	r3, sp, #20
 800429a:	9a04      	ldr	r2, [sp, #16]
 800429c:	68a1      	ldr	r1, [r4, #8]
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	4620      	mov	r0, r4
 80042a2:	f000 fc2f 	bl	8004b04 <_vfiprintf_r>
 80042a6:	b002      	add	sp, #8
 80042a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ac:	b004      	add	sp, #16
 80042ae:	4770      	bx	lr
 80042b0:	2000000c 	.word	0x2000000c

080042b4 <_puts_r>:
 80042b4:	b570      	push	{r4, r5, r6, lr}
 80042b6:	460e      	mov	r6, r1
 80042b8:	4605      	mov	r5, r0
 80042ba:	b118      	cbz	r0, 80042c4 <_puts_r+0x10>
 80042bc:	6983      	ldr	r3, [r0, #24]
 80042be:	b90b      	cbnz	r3, 80042c4 <_puts_r+0x10>
 80042c0:	f000 fa48 	bl	8004754 <__sinit>
 80042c4:	69ab      	ldr	r3, [r5, #24]
 80042c6:	68ac      	ldr	r4, [r5, #8]
 80042c8:	b913      	cbnz	r3, 80042d0 <_puts_r+0x1c>
 80042ca:	4628      	mov	r0, r5
 80042cc:	f000 fa42 	bl	8004754 <__sinit>
 80042d0:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <_puts_r+0xd0>)
 80042d2:	429c      	cmp	r4, r3
 80042d4:	d120      	bne.n	8004318 <_puts_r+0x64>
 80042d6:	686c      	ldr	r4, [r5, #4]
 80042d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042da:	07db      	lsls	r3, r3, #31
 80042dc:	d405      	bmi.n	80042ea <_puts_r+0x36>
 80042de:	89a3      	ldrh	r3, [r4, #12]
 80042e0:	0598      	lsls	r0, r3, #22
 80042e2:	d402      	bmi.n	80042ea <_puts_r+0x36>
 80042e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042e6:	f000 fad3 	bl	8004890 <__retarget_lock_acquire_recursive>
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	0719      	lsls	r1, r3, #28
 80042ee:	d51d      	bpl.n	800432c <_puts_r+0x78>
 80042f0:	6923      	ldr	r3, [r4, #16]
 80042f2:	b1db      	cbz	r3, 800432c <_puts_r+0x78>
 80042f4:	3e01      	subs	r6, #1
 80042f6:	68a3      	ldr	r3, [r4, #8]
 80042f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042fc:	3b01      	subs	r3, #1
 80042fe:	60a3      	str	r3, [r4, #8]
 8004300:	bb39      	cbnz	r1, 8004352 <_puts_r+0x9e>
 8004302:	2b00      	cmp	r3, #0
 8004304:	da38      	bge.n	8004378 <_puts_r+0xc4>
 8004306:	4622      	mov	r2, r4
 8004308:	210a      	movs	r1, #10
 800430a:	4628      	mov	r0, r5
 800430c:	f000 f848 	bl	80043a0 <__swbuf_r>
 8004310:	3001      	adds	r0, #1
 8004312:	d011      	beq.n	8004338 <_puts_r+0x84>
 8004314:	250a      	movs	r5, #10
 8004316:	e011      	b.n	800433c <_puts_r+0x88>
 8004318:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <_puts_r+0xd4>)
 800431a:	429c      	cmp	r4, r3
 800431c:	d101      	bne.n	8004322 <_puts_r+0x6e>
 800431e:	68ac      	ldr	r4, [r5, #8]
 8004320:	e7da      	b.n	80042d8 <_puts_r+0x24>
 8004322:	4b1a      	ldr	r3, [pc, #104]	; (800438c <_puts_r+0xd8>)
 8004324:	429c      	cmp	r4, r3
 8004326:	bf08      	it	eq
 8004328:	68ec      	ldreq	r4, [r5, #12]
 800432a:	e7d5      	b.n	80042d8 <_puts_r+0x24>
 800432c:	4621      	mov	r1, r4
 800432e:	4628      	mov	r0, r5
 8004330:	f000 f888 	bl	8004444 <__swsetup_r>
 8004334:	2800      	cmp	r0, #0
 8004336:	d0dd      	beq.n	80042f4 <_puts_r+0x40>
 8004338:	f04f 35ff 	mov.w	r5, #4294967295
 800433c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800433e:	07da      	lsls	r2, r3, #31
 8004340:	d405      	bmi.n	800434e <_puts_r+0x9a>
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	059b      	lsls	r3, r3, #22
 8004346:	d402      	bmi.n	800434e <_puts_r+0x9a>
 8004348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800434a:	f000 faa2 	bl	8004892 <__retarget_lock_release_recursive>
 800434e:	4628      	mov	r0, r5
 8004350:	bd70      	pop	{r4, r5, r6, pc}
 8004352:	2b00      	cmp	r3, #0
 8004354:	da04      	bge.n	8004360 <_puts_r+0xac>
 8004356:	69a2      	ldr	r2, [r4, #24]
 8004358:	429a      	cmp	r2, r3
 800435a:	dc06      	bgt.n	800436a <_puts_r+0xb6>
 800435c:	290a      	cmp	r1, #10
 800435e:	d004      	beq.n	800436a <_puts_r+0xb6>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	6022      	str	r2, [r4, #0]
 8004366:	7019      	strb	r1, [r3, #0]
 8004368:	e7c5      	b.n	80042f6 <_puts_r+0x42>
 800436a:	4622      	mov	r2, r4
 800436c:	4628      	mov	r0, r5
 800436e:	f000 f817 	bl	80043a0 <__swbuf_r>
 8004372:	3001      	adds	r0, #1
 8004374:	d1bf      	bne.n	80042f6 <_puts_r+0x42>
 8004376:	e7df      	b.n	8004338 <_puts_r+0x84>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	250a      	movs	r5, #10
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	6022      	str	r2, [r4, #0]
 8004380:	701d      	strb	r5, [r3, #0]
 8004382:	e7db      	b.n	800433c <_puts_r+0x88>
 8004384:	080052f4 	.word	0x080052f4
 8004388:	08005314 	.word	0x08005314
 800438c:	080052d4 	.word	0x080052d4

08004390 <puts>:
 8004390:	4b02      	ldr	r3, [pc, #8]	; (800439c <puts+0xc>)
 8004392:	4601      	mov	r1, r0
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	f7ff bf8d 	b.w	80042b4 <_puts_r>
 800439a:	bf00      	nop
 800439c:	2000000c 	.word	0x2000000c

080043a0 <__swbuf_r>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	460e      	mov	r6, r1
 80043a4:	4614      	mov	r4, r2
 80043a6:	4605      	mov	r5, r0
 80043a8:	b118      	cbz	r0, 80043b2 <__swbuf_r+0x12>
 80043aa:	6983      	ldr	r3, [r0, #24]
 80043ac:	b90b      	cbnz	r3, 80043b2 <__swbuf_r+0x12>
 80043ae:	f000 f9d1 	bl	8004754 <__sinit>
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <__swbuf_r+0x98>)
 80043b4:	429c      	cmp	r4, r3
 80043b6:	d12b      	bne.n	8004410 <__swbuf_r+0x70>
 80043b8:	686c      	ldr	r4, [r5, #4]
 80043ba:	69a3      	ldr	r3, [r4, #24]
 80043bc:	60a3      	str	r3, [r4, #8]
 80043be:	89a3      	ldrh	r3, [r4, #12]
 80043c0:	071a      	lsls	r2, r3, #28
 80043c2:	d52f      	bpl.n	8004424 <__swbuf_r+0x84>
 80043c4:	6923      	ldr	r3, [r4, #16]
 80043c6:	b36b      	cbz	r3, 8004424 <__swbuf_r+0x84>
 80043c8:	6923      	ldr	r3, [r4, #16]
 80043ca:	6820      	ldr	r0, [r4, #0]
 80043cc:	1ac0      	subs	r0, r0, r3
 80043ce:	6963      	ldr	r3, [r4, #20]
 80043d0:	b2f6      	uxtb	r6, r6
 80043d2:	4283      	cmp	r3, r0
 80043d4:	4637      	mov	r7, r6
 80043d6:	dc04      	bgt.n	80043e2 <__swbuf_r+0x42>
 80043d8:	4621      	mov	r1, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	f000 f926 	bl	800462c <_fflush_r>
 80043e0:	bb30      	cbnz	r0, 8004430 <__swbuf_r+0x90>
 80043e2:	68a3      	ldr	r3, [r4, #8]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	60a3      	str	r3, [r4, #8]
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	6022      	str	r2, [r4, #0]
 80043ee:	701e      	strb	r6, [r3, #0]
 80043f0:	6963      	ldr	r3, [r4, #20]
 80043f2:	3001      	adds	r0, #1
 80043f4:	4283      	cmp	r3, r0
 80043f6:	d004      	beq.n	8004402 <__swbuf_r+0x62>
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	07db      	lsls	r3, r3, #31
 80043fc:	d506      	bpl.n	800440c <__swbuf_r+0x6c>
 80043fe:	2e0a      	cmp	r6, #10
 8004400:	d104      	bne.n	800440c <__swbuf_r+0x6c>
 8004402:	4621      	mov	r1, r4
 8004404:	4628      	mov	r0, r5
 8004406:	f000 f911 	bl	800462c <_fflush_r>
 800440a:	b988      	cbnz	r0, 8004430 <__swbuf_r+0x90>
 800440c:	4638      	mov	r0, r7
 800440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <__swbuf_r+0x9c>)
 8004412:	429c      	cmp	r4, r3
 8004414:	d101      	bne.n	800441a <__swbuf_r+0x7a>
 8004416:	68ac      	ldr	r4, [r5, #8]
 8004418:	e7cf      	b.n	80043ba <__swbuf_r+0x1a>
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <__swbuf_r+0xa0>)
 800441c:	429c      	cmp	r4, r3
 800441e:	bf08      	it	eq
 8004420:	68ec      	ldreq	r4, [r5, #12]
 8004422:	e7ca      	b.n	80043ba <__swbuf_r+0x1a>
 8004424:	4621      	mov	r1, r4
 8004426:	4628      	mov	r0, r5
 8004428:	f000 f80c 	bl	8004444 <__swsetup_r>
 800442c:	2800      	cmp	r0, #0
 800442e:	d0cb      	beq.n	80043c8 <__swbuf_r+0x28>
 8004430:	f04f 37ff 	mov.w	r7, #4294967295
 8004434:	e7ea      	b.n	800440c <__swbuf_r+0x6c>
 8004436:	bf00      	nop
 8004438:	080052f4 	.word	0x080052f4
 800443c:	08005314 	.word	0x08005314
 8004440:	080052d4 	.word	0x080052d4

08004444 <__swsetup_r>:
 8004444:	4b32      	ldr	r3, [pc, #200]	; (8004510 <__swsetup_r+0xcc>)
 8004446:	b570      	push	{r4, r5, r6, lr}
 8004448:	681d      	ldr	r5, [r3, #0]
 800444a:	4606      	mov	r6, r0
 800444c:	460c      	mov	r4, r1
 800444e:	b125      	cbz	r5, 800445a <__swsetup_r+0x16>
 8004450:	69ab      	ldr	r3, [r5, #24]
 8004452:	b913      	cbnz	r3, 800445a <__swsetup_r+0x16>
 8004454:	4628      	mov	r0, r5
 8004456:	f000 f97d 	bl	8004754 <__sinit>
 800445a:	4b2e      	ldr	r3, [pc, #184]	; (8004514 <__swsetup_r+0xd0>)
 800445c:	429c      	cmp	r4, r3
 800445e:	d10f      	bne.n	8004480 <__swsetup_r+0x3c>
 8004460:	686c      	ldr	r4, [r5, #4]
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004468:	0719      	lsls	r1, r3, #28
 800446a:	d42c      	bmi.n	80044c6 <__swsetup_r+0x82>
 800446c:	06dd      	lsls	r5, r3, #27
 800446e:	d411      	bmi.n	8004494 <__swsetup_r+0x50>
 8004470:	2309      	movs	r3, #9
 8004472:	6033      	str	r3, [r6, #0]
 8004474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004478:	81a3      	strh	r3, [r4, #12]
 800447a:	f04f 30ff 	mov.w	r0, #4294967295
 800447e:	e03e      	b.n	80044fe <__swsetup_r+0xba>
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <__swsetup_r+0xd4>)
 8004482:	429c      	cmp	r4, r3
 8004484:	d101      	bne.n	800448a <__swsetup_r+0x46>
 8004486:	68ac      	ldr	r4, [r5, #8]
 8004488:	e7eb      	b.n	8004462 <__swsetup_r+0x1e>
 800448a:	4b24      	ldr	r3, [pc, #144]	; (800451c <__swsetup_r+0xd8>)
 800448c:	429c      	cmp	r4, r3
 800448e:	bf08      	it	eq
 8004490:	68ec      	ldreq	r4, [r5, #12]
 8004492:	e7e6      	b.n	8004462 <__swsetup_r+0x1e>
 8004494:	0758      	lsls	r0, r3, #29
 8004496:	d512      	bpl.n	80044be <__swsetup_r+0x7a>
 8004498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800449a:	b141      	cbz	r1, 80044ae <__swsetup_r+0x6a>
 800449c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044a0:	4299      	cmp	r1, r3
 80044a2:	d002      	beq.n	80044aa <__swsetup_r+0x66>
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 fa59 	bl	800495c <_free_r>
 80044aa:	2300      	movs	r3, #0
 80044ac:	6363      	str	r3, [r4, #52]	; 0x34
 80044ae:	89a3      	ldrh	r3, [r4, #12]
 80044b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044b4:	81a3      	strh	r3, [r4, #12]
 80044b6:	2300      	movs	r3, #0
 80044b8:	6063      	str	r3, [r4, #4]
 80044ba:	6923      	ldr	r3, [r4, #16]
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	89a3      	ldrh	r3, [r4, #12]
 80044c0:	f043 0308 	orr.w	r3, r3, #8
 80044c4:	81a3      	strh	r3, [r4, #12]
 80044c6:	6923      	ldr	r3, [r4, #16]
 80044c8:	b94b      	cbnz	r3, 80044de <__swsetup_r+0x9a>
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d4:	d003      	beq.n	80044de <__swsetup_r+0x9a>
 80044d6:	4621      	mov	r1, r4
 80044d8:	4630      	mov	r0, r6
 80044da:	f000 f9ff 	bl	80048dc <__smakebuf_r>
 80044de:	89a0      	ldrh	r0, [r4, #12]
 80044e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044e4:	f010 0301 	ands.w	r3, r0, #1
 80044e8:	d00a      	beq.n	8004500 <__swsetup_r+0xbc>
 80044ea:	2300      	movs	r3, #0
 80044ec:	60a3      	str	r3, [r4, #8]
 80044ee:	6963      	ldr	r3, [r4, #20]
 80044f0:	425b      	negs	r3, r3
 80044f2:	61a3      	str	r3, [r4, #24]
 80044f4:	6923      	ldr	r3, [r4, #16]
 80044f6:	b943      	cbnz	r3, 800450a <__swsetup_r+0xc6>
 80044f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044fc:	d1ba      	bne.n	8004474 <__swsetup_r+0x30>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	0781      	lsls	r1, r0, #30
 8004502:	bf58      	it	pl
 8004504:	6963      	ldrpl	r3, [r4, #20]
 8004506:	60a3      	str	r3, [r4, #8]
 8004508:	e7f4      	b.n	80044f4 <__swsetup_r+0xb0>
 800450a:	2000      	movs	r0, #0
 800450c:	e7f7      	b.n	80044fe <__swsetup_r+0xba>
 800450e:	bf00      	nop
 8004510:	2000000c 	.word	0x2000000c
 8004514:	080052f4 	.word	0x080052f4
 8004518:	08005314 	.word	0x08005314
 800451c:	080052d4 	.word	0x080052d4

08004520 <__sflush_r>:
 8004520:	898a      	ldrh	r2, [r1, #12]
 8004522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004526:	4605      	mov	r5, r0
 8004528:	0710      	lsls	r0, r2, #28
 800452a:	460c      	mov	r4, r1
 800452c:	d458      	bmi.n	80045e0 <__sflush_r+0xc0>
 800452e:	684b      	ldr	r3, [r1, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	dc05      	bgt.n	8004540 <__sflush_r+0x20>
 8004534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	dc02      	bgt.n	8004540 <__sflush_r+0x20>
 800453a:	2000      	movs	r0, #0
 800453c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004542:	2e00      	cmp	r6, #0
 8004544:	d0f9      	beq.n	800453a <__sflush_r+0x1a>
 8004546:	2300      	movs	r3, #0
 8004548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800454c:	682f      	ldr	r7, [r5, #0]
 800454e:	602b      	str	r3, [r5, #0]
 8004550:	d032      	beq.n	80045b8 <__sflush_r+0x98>
 8004552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	075a      	lsls	r2, r3, #29
 8004558:	d505      	bpl.n	8004566 <__sflush_r+0x46>
 800455a:	6863      	ldr	r3, [r4, #4]
 800455c:	1ac0      	subs	r0, r0, r3
 800455e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004560:	b10b      	cbz	r3, 8004566 <__sflush_r+0x46>
 8004562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004564:	1ac0      	subs	r0, r0, r3
 8004566:	2300      	movs	r3, #0
 8004568:	4602      	mov	r2, r0
 800456a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800456c:	6a21      	ldr	r1, [r4, #32]
 800456e:	4628      	mov	r0, r5
 8004570:	47b0      	blx	r6
 8004572:	1c43      	adds	r3, r0, #1
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	d106      	bne.n	8004586 <__sflush_r+0x66>
 8004578:	6829      	ldr	r1, [r5, #0]
 800457a:	291d      	cmp	r1, #29
 800457c:	d82c      	bhi.n	80045d8 <__sflush_r+0xb8>
 800457e:	4a2a      	ldr	r2, [pc, #168]	; (8004628 <__sflush_r+0x108>)
 8004580:	40ca      	lsrs	r2, r1
 8004582:	07d6      	lsls	r6, r2, #31
 8004584:	d528      	bpl.n	80045d8 <__sflush_r+0xb8>
 8004586:	2200      	movs	r2, #0
 8004588:	6062      	str	r2, [r4, #4]
 800458a:	04d9      	lsls	r1, r3, #19
 800458c:	6922      	ldr	r2, [r4, #16]
 800458e:	6022      	str	r2, [r4, #0]
 8004590:	d504      	bpl.n	800459c <__sflush_r+0x7c>
 8004592:	1c42      	adds	r2, r0, #1
 8004594:	d101      	bne.n	800459a <__sflush_r+0x7a>
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	b903      	cbnz	r3, 800459c <__sflush_r+0x7c>
 800459a:	6560      	str	r0, [r4, #84]	; 0x54
 800459c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800459e:	602f      	str	r7, [r5, #0]
 80045a0:	2900      	cmp	r1, #0
 80045a2:	d0ca      	beq.n	800453a <__sflush_r+0x1a>
 80045a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045a8:	4299      	cmp	r1, r3
 80045aa:	d002      	beq.n	80045b2 <__sflush_r+0x92>
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 f9d5 	bl	800495c <_free_r>
 80045b2:	2000      	movs	r0, #0
 80045b4:	6360      	str	r0, [r4, #52]	; 0x34
 80045b6:	e7c1      	b.n	800453c <__sflush_r+0x1c>
 80045b8:	6a21      	ldr	r1, [r4, #32]
 80045ba:	2301      	movs	r3, #1
 80045bc:	4628      	mov	r0, r5
 80045be:	47b0      	blx	r6
 80045c0:	1c41      	adds	r1, r0, #1
 80045c2:	d1c7      	bne.n	8004554 <__sflush_r+0x34>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0c4      	beq.n	8004554 <__sflush_r+0x34>
 80045ca:	2b1d      	cmp	r3, #29
 80045cc:	d001      	beq.n	80045d2 <__sflush_r+0xb2>
 80045ce:	2b16      	cmp	r3, #22
 80045d0:	d101      	bne.n	80045d6 <__sflush_r+0xb6>
 80045d2:	602f      	str	r7, [r5, #0]
 80045d4:	e7b1      	b.n	800453a <__sflush_r+0x1a>
 80045d6:	89a3      	ldrh	r3, [r4, #12]
 80045d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045dc:	81a3      	strh	r3, [r4, #12]
 80045de:	e7ad      	b.n	800453c <__sflush_r+0x1c>
 80045e0:	690f      	ldr	r7, [r1, #16]
 80045e2:	2f00      	cmp	r7, #0
 80045e4:	d0a9      	beq.n	800453a <__sflush_r+0x1a>
 80045e6:	0793      	lsls	r3, r2, #30
 80045e8:	680e      	ldr	r6, [r1, #0]
 80045ea:	bf08      	it	eq
 80045ec:	694b      	ldreq	r3, [r1, #20]
 80045ee:	600f      	str	r7, [r1, #0]
 80045f0:	bf18      	it	ne
 80045f2:	2300      	movne	r3, #0
 80045f4:	eba6 0807 	sub.w	r8, r6, r7
 80045f8:	608b      	str	r3, [r1, #8]
 80045fa:	f1b8 0f00 	cmp.w	r8, #0
 80045fe:	dd9c      	ble.n	800453a <__sflush_r+0x1a>
 8004600:	6a21      	ldr	r1, [r4, #32]
 8004602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004604:	4643      	mov	r3, r8
 8004606:	463a      	mov	r2, r7
 8004608:	4628      	mov	r0, r5
 800460a:	47b0      	blx	r6
 800460c:	2800      	cmp	r0, #0
 800460e:	dc06      	bgt.n	800461e <__sflush_r+0xfe>
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004616:	81a3      	strh	r3, [r4, #12]
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	e78e      	b.n	800453c <__sflush_r+0x1c>
 800461e:	4407      	add	r7, r0
 8004620:	eba8 0800 	sub.w	r8, r8, r0
 8004624:	e7e9      	b.n	80045fa <__sflush_r+0xda>
 8004626:	bf00      	nop
 8004628:	20400001 	.word	0x20400001

0800462c <_fflush_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	690b      	ldr	r3, [r1, #16]
 8004630:	4605      	mov	r5, r0
 8004632:	460c      	mov	r4, r1
 8004634:	b913      	cbnz	r3, 800463c <_fflush_r+0x10>
 8004636:	2500      	movs	r5, #0
 8004638:	4628      	mov	r0, r5
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	b118      	cbz	r0, 8004646 <_fflush_r+0x1a>
 800463e:	6983      	ldr	r3, [r0, #24]
 8004640:	b90b      	cbnz	r3, 8004646 <_fflush_r+0x1a>
 8004642:	f000 f887 	bl	8004754 <__sinit>
 8004646:	4b14      	ldr	r3, [pc, #80]	; (8004698 <_fflush_r+0x6c>)
 8004648:	429c      	cmp	r4, r3
 800464a:	d11b      	bne.n	8004684 <_fflush_r+0x58>
 800464c:	686c      	ldr	r4, [r5, #4]
 800464e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0ef      	beq.n	8004636 <_fflush_r+0xa>
 8004656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004658:	07d0      	lsls	r0, r2, #31
 800465a:	d404      	bmi.n	8004666 <_fflush_r+0x3a>
 800465c:	0599      	lsls	r1, r3, #22
 800465e:	d402      	bmi.n	8004666 <_fflush_r+0x3a>
 8004660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004662:	f000 f915 	bl	8004890 <__retarget_lock_acquire_recursive>
 8004666:	4628      	mov	r0, r5
 8004668:	4621      	mov	r1, r4
 800466a:	f7ff ff59 	bl	8004520 <__sflush_r>
 800466e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004670:	07da      	lsls	r2, r3, #31
 8004672:	4605      	mov	r5, r0
 8004674:	d4e0      	bmi.n	8004638 <_fflush_r+0xc>
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	059b      	lsls	r3, r3, #22
 800467a:	d4dd      	bmi.n	8004638 <_fflush_r+0xc>
 800467c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800467e:	f000 f908 	bl	8004892 <__retarget_lock_release_recursive>
 8004682:	e7d9      	b.n	8004638 <_fflush_r+0xc>
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <_fflush_r+0x70>)
 8004686:	429c      	cmp	r4, r3
 8004688:	d101      	bne.n	800468e <_fflush_r+0x62>
 800468a:	68ac      	ldr	r4, [r5, #8]
 800468c:	e7df      	b.n	800464e <_fflush_r+0x22>
 800468e:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <_fflush_r+0x74>)
 8004690:	429c      	cmp	r4, r3
 8004692:	bf08      	it	eq
 8004694:	68ec      	ldreq	r4, [r5, #12]
 8004696:	e7da      	b.n	800464e <_fflush_r+0x22>
 8004698:	080052f4 	.word	0x080052f4
 800469c:	08005314 	.word	0x08005314
 80046a0:	080052d4 	.word	0x080052d4

080046a4 <std>:
 80046a4:	2300      	movs	r3, #0
 80046a6:	b510      	push	{r4, lr}
 80046a8:	4604      	mov	r4, r0
 80046aa:	e9c0 3300 	strd	r3, r3, [r0]
 80046ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046b2:	6083      	str	r3, [r0, #8]
 80046b4:	8181      	strh	r1, [r0, #12]
 80046b6:	6643      	str	r3, [r0, #100]	; 0x64
 80046b8:	81c2      	strh	r2, [r0, #14]
 80046ba:	6183      	str	r3, [r0, #24]
 80046bc:	4619      	mov	r1, r3
 80046be:	2208      	movs	r2, #8
 80046c0:	305c      	adds	r0, #92	; 0x5c
 80046c2:	f7ff fdd7 	bl	8004274 <memset>
 80046c6:	4b05      	ldr	r3, [pc, #20]	; (80046dc <std+0x38>)
 80046c8:	6263      	str	r3, [r4, #36]	; 0x24
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <std+0x3c>)
 80046cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80046ce:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <std+0x40>)
 80046d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <std+0x44>)
 80046d4:	6224      	str	r4, [r4, #32]
 80046d6:	6323      	str	r3, [r4, #48]	; 0x30
 80046d8:	bd10      	pop	{r4, pc}
 80046da:	bf00      	nop
 80046dc:	080050ad 	.word	0x080050ad
 80046e0:	080050cf 	.word	0x080050cf
 80046e4:	08005107 	.word	0x08005107
 80046e8:	0800512b 	.word	0x0800512b

080046ec <_cleanup_r>:
 80046ec:	4901      	ldr	r1, [pc, #4]	; (80046f4 <_cleanup_r+0x8>)
 80046ee:	f000 b8af 	b.w	8004850 <_fwalk_reent>
 80046f2:	bf00      	nop
 80046f4:	0800462d 	.word	0x0800462d

080046f8 <__sfmoreglue>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	1e4a      	subs	r2, r1, #1
 80046fc:	2568      	movs	r5, #104	; 0x68
 80046fe:	4355      	muls	r5, r2
 8004700:	460e      	mov	r6, r1
 8004702:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004706:	f000 f979 	bl	80049fc <_malloc_r>
 800470a:	4604      	mov	r4, r0
 800470c:	b140      	cbz	r0, 8004720 <__sfmoreglue+0x28>
 800470e:	2100      	movs	r1, #0
 8004710:	e9c0 1600 	strd	r1, r6, [r0]
 8004714:	300c      	adds	r0, #12
 8004716:	60a0      	str	r0, [r4, #8]
 8004718:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800471c:	f7ff fdaa 	bl	8004274 <memset>
 8004720:	4620      	mov	r0, r4
 8004722:	bd70      	pop	{r4, r5, r6, pc}

08004724 <__sfp_lock_acquire>:
 8004724:	4801      	ldr	r0, [pc, #4]	; (800472c <__sfp_lock_acquire+0x8>)
 8004726:	f000 b8b3 	b.w	8004890 <__retarget_lock_acquire_recursive>
 800472a:	bf00      	nop
 800472c:	200002b4 	.word	0x200002b4

08004730 <__sfp_lock_release>:
 8004730:	4801      	ldr	r0, [pc, #4]	; (8004738 <__sfp_lock_release+0x8>)
 8004732:	f000 b8ae 	b.w	8004892 <__retarget_lock_release_recursive>
 8004736:	bf00      	nop
 8004738:	200002b4 	.word	0x200002b4

0800473c <__sinit_lock_acquire>:
 800473c:	4801      	ldr	r0, [pc, #4]	; (8004744 <__sinit_lock_acquire+0x8>)
 800473e:	f000 b8a7 	b.w	8004890 <__retarget_lock_acquire_recursive>
 8004742:	bf00      	nop
 8004744:	200002af 	.word	0x200002af

08004748 <__sinit_lock_release>:
 8004748:	4801      	ldr	r0, [pc, #4]	; (8004750 <__sinit_lock_release+0x8>)
 800474a:	f000 b8a2 	b.w	8004892 <__retarget_lock_release_recursive>
 800474e:	bf00      	nop
 8004750:	200002af 	.word	0x200002af

08004754 <__sinit>:
 8004754:	b510      	push	{r4, lr}
 8004756:	4604      	mov	r4, r0
 8004758:	f7ff fff0 	bl	800473c <__sinit_lock_acquire>
 800475c:	69a3      	ldr	r3, [r4, #24]
 800475e:	b11b      	cbz	r3, 8004768 <__sinit+0x14>
 8004760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004764:	f7ff bff0 	b.w	8004748 <__sinit_lock_release>
 8004768:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800476c:	6523      	str	r3, [r4, #80]	; 0x50
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <__sinit+0x68>)
 8004770:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <__sinit+0x6c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	62a2      	str	r2, [r4, #40]	; 0x28
 8004776:	42a3      	cmp	r3, r4
 8004778:	bf04      	itt	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	61a3      	streq	r3, [r4, #24]
 800477e:	4620      	mov	r0, r4
 8004780:	f000 f820 	bl	80047c4 <__sfp>
 8004784:	6060      	str	r0, [r4, #4]
 8004786:	4620      	mov	r0, r4
 8004788:	f000 f81c 	bl	80047c4 <__sfp>
 800478c:	60a0      	str	r0, [r4, #8]
 800478e:	4620      	mov	r0, r4
 8004790:	f000 f818 	bl	80047c4 <__sfp>
 8004794:	2200      	movs	r2, #0
 8004796:	60e0      	str	r0, [r4, #12]
 8004798:	2104      	movs	r1, #4
 800479a:	6860      	ldr	r0, [r4, #4]
 800479c:	f7ff ff82 	bl	80046a4 <std>
 80047a0:	68a0      	ldr	r0, [r4, #8]
 80047a2:	2201      	movs	r2, #1
 80047a4:	2109      	movs	r1, #9
 80047a6:	f7ff ff7d 	bl	80046a4 <std>
 80047aa:	68e0      	ldr	r0, [r4, #12]
 80047ac:	2202      	movs	r2, #2
 80047ae:	2112      	movs	r1, #18
 80047b0:	f7ff ff78 	bl	80046a4 <std>
 80047b4:	2301      	movs	r3, #1
 80047b6:	61a3      	str	r3, [r4, #24]
 80047b8:	e7d2      	b.n	8004760 <__sinit+0xc>
 80047ba:	bf00      	nop
 80047bc:	080052d0 	.word	0x080052d0
 80047c0:	080046ed 	.word	0x080046ed

080047c4 <__sfp>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	4607      	mov	r7, r0
 80047c8:	f7ff ffac 	bl	8004724 <__sfp_lock_acquire>
 80047cc:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <__sfp+0x84>)
 80047ce:	681e      	ldr	r6, [r3, #0]
 80047d0:	69b3      	ldr	r3, [r6, #24]
 80047d2:	b913      	cbnz	r3, 80047da <__sfp+0x16>
 80047d4:	4630      	mov	r0, r6
 80047d6:	f7ff ffbd 	bl	8004754 <__sinit>
 80047da:	3648      	adds	r6, #72	; 0x48
 80047dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	d503      	bpl.n	80047ec <__sfp+0x28>
 80047e4:	6833      	ldr	r3, [r6, #0]
 80047e6:	b30b      	cbz	r3, 800482c <__sfp+0x68>
 80047e8:	6836      	ldr	r6, [r6, #0]
 80047ea:	e7f7      	b.n	80047dc <__sfp+0x18>
 80047ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047f0:	b9d5      	cbnz	r5, 8004828 <__sfp+0x64>
 80047f2:	4b16      	ldr	r3, [pc, #88]	; (800484c <__sfp+0x88>)
 80047f4:	60e3      	str	r3, [r4, #12]
 80047f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80047fa:	6665      	str	r5, [r4, #100]	; 0x64
 80047fc:	f000 f847 	bl	800488e <__retarget_lock_init_recursive>
 8004800:	f7ff ff96 	bl	8004730 <__sfp_lock_release>
 8004804:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004808:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800480c:	6025      	str	r5, [r4, #0]
 800480e:	61a5      	str	r5, [r4, #24]
 8004810:	2208      	movs	r2, #8
 8004812:	4629      	mov	r1, r5
 8004814:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004818:	f7ff fd2c 	bl	8004274 <memset>
 800481c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004820:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004824:	4620      	mov	r0, r4
 8004826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004828:	3468      	adds	r4, #104	; 0x68
 800482a:	e7d9      	b.n	80047e0 <__sfp+0x1c>
 800482c:	2104      	movs	r1, #4
 800482e:	4638      	mov	r0, r7
 8004830:	f7ff ff62 	bl	80046f8 <__sfmoreglue>
 8004834:	4604      	mov	r4, r0
 8004836:	6030      	str	r0, [r6, #0]
 8004838:	2800      	cmp	r0, #0
 800483a:	d1d5      	bne.n	80047e8 <__sfp+0x24>
 800483c:	f7ff ff78 	bl	8004730 <__sfp_lock_release>
 8004840:	230c      	movs	r3, #12
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	e7ee      	b.n	8004824 <__sfp+0x60>
 8004846:	bf00      	nop
 8004848:	080052d0 	.word	0x080052d0
 800484c:	ffff0001 	.word	0xffff0001

08004850 <_fwalk_reent>:
 8004850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004854:	4606      	mov	r6, r0
 8004856:	4688      	mov	r8, r1
 8004858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800485c:	2700      	movs	r7, #0
 800485e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004862:	f1b9 0901 	subs.w	r9, r9, #1
 8004866:	d505      	bpl.n	8004874 <_fwalk_reent+0x24>
 8004868:	6824      	ldr	r4, [r4, #0]
 800486a:	2c00      	cmp	r4, #0
 800486c:	d1f7      	bne.n	800485e <_fwalk_reent+0xe>
 800486e:	4638      	mov	r0, r7
 8004870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004874:	89ab      	ldrh	r3, [r5, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d907      	bls.n	800488a <_fwalk_reent+0x3a>
 800487a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800487e:	3301      	adds	r3, #1
 8004880:	d003      	beq.n	800488a <_fwalk_reent+0x3a>
 8004882:	4629      	mov	r1, r5
 8004884:	4630      	mov	r0, r6
 8004886:	47c0      	blx	r8
 8004888:	4307      	orrs	r7, r0
 800488a:	3568      	adds	r5, #104	; 0x68
 800488c:	e7e9      	b.n	8004862 <_fwalk_reent+0x12>

0800488e <__retarget_lock_init_recursive>:
 800488e:	4770      	bx	lr

08004890 <__retarget_lock_acquire_recursive>:
 8004890:	4770      	bx	lr

08004892 <__retarget_lock_release_recursive>:
 8004892:	4770      	bx	lr

08004894 <__swhatbuf_r>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	460e      	mov	r6, r1
 8004898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489c:	2900      	cmp	r1, #0
 800489e:	b096      	sub	sp, #88	; 0x58
 80048a0:	4614      	mov	r4, r2
 80048a2:	461d      	mov	r5, r3
 80048a4:	da07      	bge.n	80048b6 <__swhatbuf_r+0x22>
 80048a6:	2300      	movs	r3, #0
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	89b3      	ldrh	r3, [r6, #12]
 80048ac:	061a      	lsls	r2, r3, #24
 80048ae:	d410      	bmi.n	80048d2 <__swhatbuf_r+0x3e>
 80048b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b4:	e00e      	b.n	80048d4 <__swhatbuf_r+0x40>
 80048b6:	466a      	mov	r2, sp
 80048b8:	f000 fc5e 	bl	8005178 <_fstat_r>
 80048bc:	2800      	cmp	r0, #0
 80048be:	dbf2      	blt.n	80048a6 <__swhatbuf_r+0x12>
 80048c0:	9a01      	ldr	r2, [sp, #4]
 80048c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80048c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80048ca:	425a      	negs	r2, r3
 80048cc:	415a      	adcs	r2, r3
 80048ce:	602a      	str	r2, [r5, #0]
 80048d0:	e7ee      	b.n	80048b0 <__swhatbuf_r+0x1c>
 80048d2:	2340      	movs	r3, #64	; 0x40
 80048d4:	2000      	movs	r0, #0
 80048d6:	6023      	str	r3, [r4, #0]
 80048d8:	b016      	add	sp, #88	; 0x58
 80048da:	bd70      	pop	{r4, r5, r6, pc}

080048dc <__smakebuf_r>:
 80048dc:	898b      	ldrh	r3, [r1, #12]
 80048de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048e0:	079d      	lsls	r5, r3, #30
 80048e2:	4606      	mov	r6, r0
 80048e4:	460c      	mov	r4, r1
 80048e6:	d507      	bpl.n	80048f8 <__smakebuf_r+0x1c>
 80048e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	6123      	str	r3, [r4, #16]
 80048f0:	2301      	movs	r3, #1
 80048f2:	6163      	str	r3, [r4, #20]
 80048f4:	b002      	add	sp, #8
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
 80048f8:	ab01      	add	r3, sp, #4
 80048fa:	466a      	mov	r2, sp
 80048fc:	f7ff ffca 	bl	8004894 <__swhatbuf_r>
 8004900:	9900      	ldr	r1, [sp, #0]
 8004902:	4605      	mov	r5, r0
 8004904:	4630      	mov	r0, r6
 8004906:	f000 f879 	bl	80049fc <_malloc_r>
 800490a:	b948      	cbnz	r0, 8004920 <__smakebuf_r+0x44>
 800490c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004910:	059a      	lsls	r2, r3, #22
 8004912:	d4ef      	bmi.n	80048f4 <__smakebuf_r+0x18>
 8004914:	f023 0303 	bic.w	r3, r3, #3
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	81a3      	strh	r3, [r4, #12]
 800491e:	e7e3      	b.n	80048e8 <__smakebuf_r+0xc>
 8004920:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <__smakebuf_r+0x7c>)
 8004922:	62b3      	str	r3, [r6, #40]	; 0x28
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	6020      	str	r0, [r4, #0]
 8004928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492c:	81a3      	strh	r3, [r4, #12]
 800492e:	9b00      	ldr	r3, [sp, #0]
 8004930:	6163      	str	r3, [r4, #20]
 8004932:	9b01      	ldr	r3, [sp, #4]
 8004934:	6120      	str	r0, [r4, #16]
 8004936:	b15b      	cbz	r3, 8004950 <__smakebuf_r+0x74>
 8004938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800493c:	4630      	mov	r0, r6
 800493e:	f000 fc2d 	bl	800519c <_isatty_r>
 8004942:	b128      	cbz	r0, 8004950 <__smakebuf_r+0x74>
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	81a3      	strh	r3, [r4, #12]
 8004950:	89a0      	ldrh	r0, [r4, #12]
 8004952:	4305      	orrs	r5, r0
 8004954:	81a5      	strh	r5, [r4, #12]
 8004956:	e7cd      	b.n	80048f4 <__smakebuf_r+0x18>
 8004958:	080046ed 	.word	0x080046ed

0800495c <_free_r>:
 800495c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800495e:	2900      	cmp	r1, #0
 8004960:	d048      	beq.n	80049f4 <_free_r+0x98>
 8004962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004966:	9001      	str	r0, [sp, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f1a1 0404 	sub.w	r4, r1, #4
 800496e:	bfb8      	it	lt
 8004970:	18e4      	addlt	r4, r4, r3
 8004972:	f000 fc35 	bl	80051e0 <__malloc_lock>
 8004976:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <_free_r+0x9c>)
 8004978:	9801      	ldr	r0, [sp, #4]
 800497a:	6813      	ldr	r3, [r2, #0]
 800497c:	4615      	mov	r5, r2
 800497e:	b933      	cbnz	r3, 800498e <_free_r+0x32>
 8004980:	6063      	str	r3, [r4, #4]
 8004982:	6014      	str	r4, [r2, #0]
 8004984:	b003      	add	sp, #12
 8004986:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800498a:	f000 bc2f 	b.w	80051ec <__malloc_unlock>
 800498e:	42a3      	cmp	r3, r4
 8004990:	d90b      	bls.n	80049aa <_free_r+0x4e>
 8004992:	6821      	ldr	r1, [r4, #0]
 8004994:	1862      	adds	r2, r4, r1
 8004996:	4293      	cmp	r3, r2
 8004998:	bf04      	itt	eq
 800499a:	681a      	ldreq	r2, [r3, #0]
 800499c:	685b      	ldreq	r3, [r3, #4]
 800499e:	6063      	str	r3, [r4, #4]
 80049a0:	bf04      	itt	eq
 80049a2:	1852      	addeq	r2, r2, r1
 80049a4:	6022      	streq	r2, [r4, #0]
 80049a6:	602c      	str	r4, [r5, #0]
 80049a8:	e7ec      	b.n	8004984 <_free_r+0x28>
 80049aa:	461a      	mov	r2, r3
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	b10b      	cbz	r3, 80049b4 <_free_r+0x58>
 80049b0:	42a3      	cmp	r3, r4
 80049b2:	d9fa      	bls.n	80049aa <_free_r+0x4e>
 80049b4:	6811      	ldr	r1, [r2, #0]
 80049b6:	1855      	adds	r5, r2, r1
 80049b8:	42a5      	cmp	r5, r4
 80049ba:	d10b      	bne.n	80049d4 <_free_r+0x78>
 80049bc:	6824      	ldr	r4, [r4, #0]
 80049be:	4421      	add	r1, r4
 80049c0:	1854      	adds	r4, r2, r1
 80049c2:	42a3      	cmp	r3, r4
 80049c4:	6011      	str	r1, [r2, #0]
 80049c6:	d1dd      	bne.n	8004984 <_free_r+0x28>
 80049c8:	681c      	ldr	r4, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	6053      	str	r3, [r2, #4]
 80049ce:	4421      	add	r1, r4
 80049d0:	6011      	str	r1, [r2, #0]
 80049d2:	e7d7      	b.n	8004984 <_free_r+0x28>
 80049d4:	d902      	bls.n	80049dc <_free_r+0x80>
 80049d6:	230c      	movs	r3, #12
 80049d8:	6003      	str	r3, [r0, #0]
 80049da:	e7d3      	b.n	8004984 <_free_r+0x28>
 80049dc:	6825      	ldr	r5, [r4, #0]
 80049de:	1961      	adds	r1, r4, r5
 80049e0:	428b      	cmp	r3, r1
 80049e2:	bf04      	itt	eq
 80049e4:	6819      	ldreq	r1, [r3, #0]
 80049e6:	685b      	ldreq	r3, [r3, #4]
 80049e8:	6063      	str	r3, [r4, #4]
 80049ea:	bf04      	itt	eq
 80049ec:	1949      	addeq	r1, r1, r5
 80049ee:	6021      	streq	r1, [r4, #0]
 80049f0:	6054      	str	r4, [r2, #4]
 80049f2:	e7c7      	b.n	8004984 <_free_r+0x28>
 80049f4:	b003      	add	sp, #12
 80049f6:	bd30      	pop	{r4, r5, pc}
 80049f8:	20000094 	.word	0x20000094

080049fc <_malloc_r>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	1ccd      	adds	r5, r1, #3
 8004a00:	f025 0503 	bic.w	r5, r5, #3
 8004a04:	3508      	adds	r5, #8
 8004a06:	2d0c      	cmp	r5, #12
 8004a08:	bf38      	it	cc
 8004a0a:	250c      	movcc	r5, #12
 8004a0c:	2d00      	cmp	r5, #0
 8004a0e:	4606      	mov	r6, r0
 8004a10:	db01      	blt.n	8004a16 <_malloc_r+0x1a>
 8004a12:	42a9      	cmp	r1, r5
 8004a14:	d903      	bls.n	8004a1e <_malloc_r+0x22>
 8004a16:	230c      	movs	r3, #12
 8004a18:	6033      	str	r3, [r6, #0]
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a1e:	f000 fbdf 	bl	80051e0 <__malloc_lock>
 8004a22:	4921      	ldr	r1, [pc, #132]	; (8004aa8 <_malloc_r+0xac>)
 8004a24:	680a      	ldr	r2, [r1, #0]
 8004a26:	4614      	mov	r4, r2
 8004a28:	b99c      	cbnz	r4, 8004a52 <_malloc_r+0x56>
 8004a2a:	4f20      	ldr	r7, [pc, #128]	; (8004aac <_malloc_r+0xb0>)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	b923      	cbnz	r3, 8004a3a <_malloc_r+0x3e>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4630      	mov	r0, r6
 8004a34:	f000 fb2a 	bl	800508c <_sbrk_r>
 8004a38:	6038      	str	r0, [r7, #0]
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	f000 fb25 	bl	800508c <_sbrk_r>
 8004a42:	1c43      	adds	r3, r0, #1
 8004a44:	d123      	bne.n	8004a8e <_malloc_r+0x92>
 8004a46:	230c      	movs	r3, #12
 8004a48:	6033      	str	r3, [r6, #0]
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f000 fbce 	bl	80051ec <__malloc_unlock>
 8004a50:	e7e3      	b.n	8004a1a <_malloc_r+0x1e>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	1b5b      	subs	r3, r3, r5
 8004a56:	d417      	bmi.n	8004a88 <_malloc_r+0x8c>
 8004a58:	2b0b      	cmp	r3, #11
 8004a5a:	d903      	bls.n	8004a64 <_malloc_r+0x68>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	441c      	add	r4, r3
 8004a60:	6025      	str	r5, [r4, #0]
 8004a62:	e004      	b.n	8004a6e <_malloc_r+0x72>
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	42a2      	cmp	r2, r4
 8004a68:	bf0c      	ite	eq
 8004a6a:	600b      	streq	r3, [r1, #0]
 8004a6c:	6053      	strne	r3, [r2, #4]
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f000 fbbc 	bl	80051ec <__malloc_unlock>
 8004a74:	f104 000b 	add.w	r0, r4, #11
 8004a78:	1d23      	adds	r3, r4, #4
 8004a7a:	f020 0007 	bic.w	r0, r0, #7
 8004a7e:	1ac2      	subs	r2, r0, r3
 8004a80:	d0cc      	beq.n	8004a1c <_malloc_r+0x20>
 8004a82:	1a1b      	subs	r3, r3, r0
 8004a84:	50a3      	str	r3, [r4, r2]
 8004a86:	e7c9      	b.n	8004a1c <_malloc_r+0x20>
 8004a88:	4622      	mov	r2, r4
 8004a8a:	6864      	ldr	r4, [r4, #4]
 8004a8c:	e7cc      	b.n	8004a28 <_malloc_r+0x2c>
 8004a8e:	1cc4      	adds	r4, r0, #3
 8004a90:	f024 0403 	bic.w	r4, r4, #3
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d0e3      	beq.n	8004a60 <_malloc_r+0x64>
 8004a98:	1a21      	subs	r1, r4, r0
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f000 faf6 	bl	800508c <_sbrk_r>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d1dd      	bne.n	8004a60 <_malloc_r+0x64>
 8004aa4:	e7cf      	b.n	8004a46 <_malloc_r+0x4a>
 8004aa6:	bf00      	nop
 8004aa8:	20000094 	.word	0x20000094
 8004aac:	20000098 	.word	0x20000098

08004ab0 <__sfputc_r>:
 8004ab0:	6893      	ldr	r3, [r2, #8]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	b410      	push	{r4}
 8004ab8:	6093      	str	r3, [r2, #8]
 8004aba:	da08      	bge.n	8004ace <__sfputc_r+0x1e>
 8004abc:	6994      	ldr	r4, [r2, #24]
 8004abe:	42a3      	cmp	r3, r4
 8004ac0:	db01      	blt.n	8004ac6 <__sfputc_r+0x16>
 8004ac2:	290a      	cmp	r1, #10
 8004ac4:	d103      	bne.n	8004ace <__sfputc_r+0x1e>
 8004ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aca:	f7ff bc69 	b.w	80043a0 <__swbuf_r>
 8004ace:	6813      	ldr	r3, [r2, #0]
 8004ad0:	1c58      	adds	r0, r3, #1
 8004ad2:	6010      	str	r0, [r2, #0]
 8004ad4:	7019      	strb	r1, [r3, #0]
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <__sfputs_r>:
 8004ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae0:	4606      	mov	r6, r0
 8004ae2:	460f      	mov	r7, r1
 8004ae4:	4614      	mov	r4, r2
 8004ae6:	18d5      	adds	r5, r2, r3
 8004ae8:	42ac      	cmp	r4, r5
 8004aea:	d101      	bne.n	8004af0 <__sfputs_r+0x12>
 8004aec:	2000      	movs	r0, #0
 8004aee:	e007      	b.n	8004b00 <__sfputs_r+0x22>
 8004af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af4:	463a      	mov	r2, r7
 8004af6:	4630      	mov	r0, r6
 8004af8:	f7ff ffda 	bl	8004ab0 <__sfputc_r>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d1f3      	bne.n	8004ae8 <__sfputs_r+0xa>
 8004b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b04 <_vfiprintf_r>:
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	460d      	mov	r5, r1
 8004b0a:	b09d      	sub	sp, #116	; 0x74
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	4698      	mov	r8, r3
 8004b10:	4606      	mov	r6, r0
 8004b12:	b118      	cbz	r0, 8004b1c <_vfiprintf_r+0x18>
 8004b14:	6983      	ldr	r3, [r0, #24]
 8004b16:	b90b      	cbnz	r3, 8004b1c <_vfiprintf_r+0x18>
 8004b18:	f7ff fe1c 	bl	8004754 <__sinit>
 8004b1c:	4b89      	ldr	r3, [pc, #548]	; (8004d44 <_vfiprintf_r+0x240>)
 8004b1e:	429d      	cmp	r5, r3
 8004b20:	d11b      	bne.n	8004b5a <_vfiprintf_r+0x56>
 8004b22:	6875      	ldr	r5, [r6, #4]
 8004b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b26:	07d9      	lsls	r1, r3, #31
 8004b28:	d405      	bmi.n	8004b36 <_vfiprintf_r+0x32>
 8004b2a:	89ab      	ldrh	r3, [r5, #12]
 8004b2c:	059a      	lsls	r2, r3, #22
 8004b2e:	d402      	bmi.n	8004b36 <_vfiprintf_r+0x32>
 8004b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b32:	f7ff fead 	bl	8004890 <__retarget_lock_acquire_recursive>
 8004b36:	89ab      	ldrh	r3, [r5, #12]
 8004b38:	071b      	lsls	r3, r3, #28
 8004b3a:	d501      	bpl.n	8004b40 <_vfiprintf_r+0x3c>
 8004b3c:	692b      	ldr	r3, [r5, #16]
 8004b3e:	b9eb      	cbnz	r3, 8004b7c <_vfiprintf_r+0x78>
 8004b40:	4629      	mov	r1, r5
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7ff fc7e 	bl	8004444 <__swsetup_r>
 8004b48:	b1c0      	cbz	r0, 8004b7c <_vfiprintf_r+0x78>
 8004b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b4c:	07dc      	lsls	r4, r3, #31
 8004b4e:	d50e      	bpl.n	8004b6e <_vfiprintf_r+0x6a>
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295
 8004b54:	b01d      	add	sp, #116	; 0x74
 8004b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5a:	4b7b      	ldr	r3, [pc, #492]	; (8004d48 <_vfiprintf_r+0x244>)
 8004b5c:	429d      	cmp	r5, r3
 8004b5e:	d101      	bne.n	8004b64 <_vfiprintf_r+0x60>
 8004b60:	68b5      	ldr	r5, [r6, #8]
 8004b62:	e7df      	b.n	8004b24 <_vfiprintf_r+0x20>
 8004b64:	4b79      	ldr	r3, [pc, #484]	; (8004d4c <_vfiprintf_r+0x248>)
 8004b66:	429d      	cmp	r5, r3
 8004b68:	bf08      	it	eq
 8004b6a:	68f5      	ldreq	r5, [r6, #12]
 8004b6c:	e7da      	b.n	8004b24 <_vfiprintf_r+0x20>
 8004b6e:	89ab      	ldrh	r3, [r5, #12]
 8004b70:	0598      	lsls	r0, r3, #22
 8004b72:	d4ed      	bmi.n	8004b50 <_vfiprintf_r+0x4c>
 8004b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b76:	f7ff fe8c 	bl	8004892 <__retarget_lock_release_recursive>
 8004b7a:	e7e9      	b.n	8004b50 <_vfiprintf_r+0x4c>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b80:	2320      	movs	r3, #32
 8004b82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b8a:	2330      	movs	r3, #48	; 0x30
 8004b8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d50 <_vfiprintf_r+0x24c>
 8004b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b94:	f04f 0901 	mov.w	r9, #1
 8004b98:	4623      	mov	r3, r4
 8004b9a:	469a      	mov	sl, r3
 8004b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ba0:	b10a      	cbz	r2, 8004ba6 <_vfiprintf_r+0xa2>
 8004ba2:	2a25      	cmp	r2, #37	; 0x25
 8004ba4:	d1f9      	bne.n	8004b9a <_vfiprintf_r+0x96>
 8004ba6:	ebba 0b04 	subs.w	fp, sl, r4
 8004baa:	d00b      	beq.n	8004bc4 <_vfiprintf_r+0xc0>
 8004bac:	465b      	mov	r3, fp
 8004bae:	4622      	mov	r2, r4
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f7ff ff93 	bl	8004ade <__sfputs_r>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f000 80aa 	beq.w	8004d12 <_vfiprintf_r+0x20e>
 8004bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bc0:	445a      	add	r2, fp
 8004bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8004bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80a2 	beq.w	8004d12 <_vfiprintf_r+0x20e>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bd8:	f10a 0a01 	add.w	sl, sl, #1
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	9307      	str	r3, [sp, #28]
 8004be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004be4:	931a      	str	r3, [sp, #104]	; 0x68
 8004be6:	4654      	mov	r4, sl
 8004be8:	2205      	movs	r2, #5
 8004bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bee:	4858      	ldr	r0, [pc, #352]	; (8004d50 <_vfiprintf_r+0x24c>)
 8004bf0:	f7fb faee 	bl	80001d0 <memchr>
 8004bf4:	9a04      	ldr	r2, [sp, #16]
 8004bf6:	b9d8      	cbnz	r0, 8004c30 <_vfiprintf_r+0x12c>
 8004bf8:	06d1      	lsls	r1, r2, #27
 8004bfa:	bf44      	itt	mi
 8004bfc:	2320      	movmi	r3, #32
 8004bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c02:	0713      	lsls	r3, r2, #28
 8004c04:	bf44      	itt	mi
 8004c06:	232b      	movmi	r3, #43	; 0x2b
 8004c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c10:	2b2a      	cmp	r3, #42	; 0x2a
 8004c12:	d015      	beq.n	8004c40 <_vfiprintf_r+0x13c>
 8004c14:	9a07      	ldr	r2, [sp, #28]
 8004c16:	4654      	mov	r4, sl
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f04f 0c0a 	mov.w	ip, #10
 8004c1e:	4621      	mov	r1, r4
 8004c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c24:	3b30      	subs	r3, #48	; 0x30
 8004c26:	2b09      	cmp	r3, #9
 8004c28:	d94e      	bls.n	8004cc8 <_vfiprintf_r+0x1c4>
 8004c2a:	b1b0      	cbz	r0, 8004c5a <_vfiprintf_r+0x156>
 8004c2c:	9207      	str	r2, [sp, #28]
 8004c2e:	e014      	b.n	8004c5a <_vfiprintf_r+0x156>
 8004c30:	eba0 0308 	sub.w	r3, r0, r8
 8004c34:	fa09 f303 	lsl.w	r3, r9, r3
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	9304      	str	r3, [sp, #16]
 8004c3c:	46a2      	mov	sl, r4
 8004c3e:	e7d2      	b.n	8004be6 <_vfiprintf_r+0xe2>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	1d19      	adds	r1, r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	9103      	str	r1, [sp, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bfbb      	ittet	lt
 8004c4c:	425b      	neglt	r3, r3
 8004c4e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c52:	9307      	strge	r3, [sp, #28]
 8004c54:	9307      	strlt	r3, [sp, #28]
 8004c56:	bfb8      	it	lt
 8004c58:	9204      	strlt	r2, [sp, #16]
 8004c5a:	7823      	ldrb	r3, [r4, #0]
 8004c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c5e:	d10c      	bne.n	8004c7a <_vfiprintf_r+0x176>
 8004c60:	7863      	ldrb	r3, [r4, #1]
 8004c62:	2b2a      	cmp	r3, #42	; 0x2a
 8004c64:	d135      	bne.n	8004cd2 <_vfiprintf_r+0x1ce>
 8004c66:	9b03      	ldr	r3, [sp, #12]
 8004c68:	1d1a      	adds	r2, r3, #4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	9203      	str	r2, [sp, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bfb8      	it	lt
 8004c72:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c76:	3402      	adds	r4, #2
 8004c78:	9305      	str	r3, [sp, #20]
 8004c7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d60 <_vfiprintf_r+0x25c>
 8004c7e:	7821      	ldrb	r1, [r4, #0]
 8004c80:	2203      	movs	r2, #3
 8004c82:	4650      	mov	r0, sl
 8004c84:	f7fb faa4 	bl	80001d0 <memchr>
 8004c88:	b140      	cbz	r0, 8004c9c <_vfiprintf_r+0x198>
 8004c8a:	2340      	movs	r3, #64	; 0x40
 8004c8c:	eba0 000a 	sub.w	r0, r0, sl
 8004c90:	fa03 f000 	lsl.w	r0, r3, r0
 8004c94:	9b04      	ldr	r3, [sp, #16]
 8004c96:	4303      	orrs	r3, r0
 8004c98:	3401      	adds	r4, #1
 8004c9a:	9304      	str	r3, [sp, #16]
 8004c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca0:	482c      	ldr	r0, [pc, #176]	; (8004d54 <_vfiprintf_r+0x250>)
 8004ca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ca6:	2206      	movs	r2, #6
 8004ca8:	f7fb fa92 	bl	80001d0 <memchr>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d03f      	beq.n	8004d30 <_vfiprintf_r+0x22c>
 8004cb0:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <_vfiprintf_r+0x254>)
 8004cb2:	bb1b      	cbnz	r3, 8004cfc <_vfiprintf_r+0x1f8>
 8004cb4:	9b03      	ldr	r3, [sp, #12]
 8004cb6:	3307      	adds	r3, #7
 8004cb8:	f023 0307 	bic.w	r3, r3, #7
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	9303      	str	r3, [sp, #12]
 8004cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc2:	443b      	add	r3, r7
 8004cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc6:	e767      	b.n	8004b98 <_vfiprintf_r+0x94>
 8004cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ccc:	460c      	mov	r4, r1
 8004cce:	2001      	movs	r0, #1
 8004cd0:	e7a5      	b.n	8004c1e <_vfiprintf_r+0x11a>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	3401      	adds	r4, #1
 8004cd6:	9305      	str	r3, [sp, #20]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f04f 0c0a 	mov.w	ip, #10
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ce4:	3a30      	subs	r2, #48	; 0x30
 8004ce6:	2a09      	cmp	r2, #9
 8004ce8:	d903      	bls.n	8004cf2 <_vfiprintf_r+0x1ee>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0c5      	beq.n	8004c7a <_vfiprintf_r+0x176>
 8004cee:	9105      	str	r1, [sp, #20]
 8004cf0:	e7c3      	b.n	8004c7a <_vfiprintf_r+0x176>
 8004cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e7f0      	b.n	8004cde <_vfiprintf_r+0x1da>
 8004cfc:	ab03      	add	r3, sp, #12
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	462a      	mov	r2, r5
 8004d02:	4b16      	ldr	r3, [pc, #88]	; (8004d5c <_vfiprintf_r+0x258>)
 8004d04:	a904      	add	r1, sp, #16
 8004d06:	4630      	mov	r0, r6
 8004d08:	f3af 8000 	nop.w
 8004d0c:	4607      	mov	r7, r0
 8004d0e:	1c78      	adds	r0, r7, #1
 8004d10:	d1d6      	bne.n	8004cc0 <_vfiprintf_r+0x1bc>
 8004d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d14:	07d9      	lsls	r1, r3, #31
 8004d16:	d405      	bmi.n	8004d24 <_vfiprintf_r+0x220>
 8004d18:	89ab      	ldrh	r3, [r5, #12]
 8004d1a:	059a      	lsls	r2, r3, #22
 8004d1c:	d402      	bmi.n	8004d24 <_vfiprintf_r+0x220>
 8004d1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d20:	f7ff fdb7 	bl	8004892 <__retarget_lock_release_recursive>
 8004d24:	89ab      	ldrh	r3, [r5, #12]
 8004d26:	065b      	lsls	r3, r3, #25
 8004d28:	f53f af12 	bmi.w	8004b50 <_vfiprintf_r+0x4c>
 8004d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d2e:	e711      	b.n	8004b54 <_vfiprintf_r+0x50>
 8004d30:	ab03      	add	r3, sp, #12
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	462a      	mov	r2, r5
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <_vfiprintf_r+0x258>)
 8004d38:	a904      	add	r1, sp, #16
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	f000 f880 	bl	8004e40 <_printf_i>
 8004d40:	e7e4      	b.n	8004d0c <_vfiprintf_r+0x208>
 8004d42:	bf00      	nop
 8004d44:	080052f4 	.word	0x080052f4
 8004d48:	08005314 	.word	0x08005314
 8004d4c:	080052d4 	.word	0x080052d4
 8004d50:	08005334 	.word	0x08005334
 8004d54:	0800533e 	.word	0x0800533e
 8004d58:	00000000 	.word	0x00000000
 8004d5c:	08004adf 	.word	0x08004adf
 8004d60:	0800533a 	.word	0x0800533a

08004d64 <_printf_common>:
 8004d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	4616      	mov	r6, r2
 8004d6a:	4699      	mov	r9, r3
 8004d6c:	688a      	ldr	r2, [r1, #8]
 8004d6e:	690b      	ldr	r3, [r1, #16]
 8004d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d74:	4293      	cmp	r3, r2
 8004d76:	bfb8      	it	lt
 8004d78:	4613      	movlt	r3, r2
 8004d7a:	6033      	str	r3, [r6, #0]
 8004d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d80:	4607      	mov	r7, r0
 8004d82:	460c      	mov	r4, r1
 8004d84:	b10a      	cbz	r2, 8004d8a <_printf_common+0x26>
 8004d86:	3301      	adds	r3, #1
 8004d88:	6033      	str	r3, [r6, #0]
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	0699      	lsls	r1, r3, #26
 8004d8e:	bf42      	ittt	mi
 8004d90:	6833      	ldrmi	r3, [r6, #0]
 8004d92:	3302      	addmi	r3, #2
 8004d94:	6033      	strmi	r3, [r6, #0]
 8004d96:	6825      	ldr	r5, [r4, #0]
 8004d98:	f015 0506 	ands.w	r5, r5, #6
 8004d9c:	d106      	bne.n	8004dac <_printf_common+0x48>
 8004d9e:	f104 0a19 	add.w	sl, r4, #25
 8004da2:	68e3      	ldr	r3, [r4, #12]
 8004da4:	6832      	ldr	r2, [r6, #0]
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	42ab      	cmp	r3, r5
 8004daa:	dc26      	bgt.n	8004dfa <_printf_common+0x96>
 8004dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004db0:	1e13      	subs	r3, r2, #0
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	bf18      	it	ne
 8004db6:	2301      	movne	r3, #1
 8004db8:	0692      	lsls	r2, r2, #26
 8004dba:	d42b      	bmi.n	8004e14 <_printf_common+0xb0>
 8004dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	47c0      	blx	r8
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d01e      	beq.n	8004e08 <_printf_common+0xa4>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	68e5      	ldr	r5, [r4, #12]
 8004dce:	6832      	ldr	r2, [r6, #0]
 8004dd0:	f003 0306 	and.w	r3, r3, #6
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	bf08      	it	eq
 8004dd8:	1aad      	subeq	r5, r5, r2
 8004dda:	68a3      	ldr	r3, [r4, #8]
 8004ddc:	6922      	ldr	r2, [r4, #16]
 8004dde:	bf0c      	ite	eq
 8004de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de4:	2500      	movne	r5, #0
 8004de6:	4293      	cmp	r3, r2
 8004de8:	bfc4      	itt	gt
 8004dea:	1a9b      	subgt	r3, r3, r2
 8004dec:	18ed      	addgt	r5, r5, r3
 8004dee:	2600      	movs	r6, #0
 8004df0:	341a      	adds	r4, #26
 8004df2:	42b5      	cmp	r5, r6
 8004df4:	d11a      	bne.n	8004e2c <_printf_common+0xc8>
 8004df6:	2000      	movs	r0, #0
 8004df8:	e008      	b.n	8004e0c <_printf_common+0xa8>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	4649      	mov	r1, r9
 8004e00:	4638      	mov	r0, r7
 8004e02:	47c0      	blx	r8
 8004e04:	3001      	adds	r0, #1
 8004e06:	d103      	bne.n	8004e10 <_printf_common+0xac>
 8004e08:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e10:	3501      	adds	r5, #1
 8004e12:	e7c6      	b.n	8004da2 <_printf_common+0x3e>
 8004e14:	18e1      	adds	r1, r4, r3
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	2030      	movs	r0, #48	; 0x30
 8004e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e1e:	4422      	add	r2, r4
 8004e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e28:	3302      	adds	r3, #2
 8004e2a:	e7c7      	b.n	8004dbc <_printf_common+0x58>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4622      	mov	r2, r4
 8004e30:	4649      	mov	r1, r9
 8004e32:	4638      	mov	r0, r7
 8004e34:	47c0      	blx	r8
 8004e36:	3001      	adds	r0, #1
 8004e38:	d0e6      	beq.n	8004e08 <_printf_common+0xa4>
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	e7d9      	b.n	8004df2 <_printf_common+0x8e>
	...

08004e40 <_printf_i>:
 8004e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	460c      	mov	r4, r1
 8004e46:	4691      	mov	r9, r2
 8004e48:	7e27      	ldrb	r7, [r4, #24]
 8004e4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e4c:	2f78      	cmp	r7, #120	; 0x78
 8004e4e:	4680      	mov	r8, r0
 8004e50:	469a      	mov	sl, r3
 8004e52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e56:	d807      	bhi.n	8004e68 <_printf_i+0x28>
 8004e58:	2f62      	cmp	r7, #98	; 0x62
 8004e5a:	d80a      	bhi.n	8004e72 <_printf_i+0x32>
 8004e5c:	2f00      	cmp	r7, #0
 8004e5e:	f000 80d8 	beq.w	8005012 <_printf_i+0x1d2>
 8004e62:	2f58      	cmp	r7, #88	; 0x58
 8004e64:	f000 80a3 	beq.w	8004fae <_printf_i+0x16e>
 8004e68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e70:	e03a      	b.n	8004ee8 <_printf_i+0xa8>
 8004e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e76:	2b15      	cmp	r3, #21
 8004e78:	d8f6      	bhi.n	8004e68 <_printf_i+0x28>
 8004e7a:	a001      	add	r0, pc, #4	; (adr r0, 8004e80 <_printf_i+0x40>)
 8004e7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e80:	08004ed9 	.word	0x08004ed9
 8004e84:	08004eed 	.word	0x08004eed
 8004e88:	08004e69 	.word	0x08004e69
 8004e8c:	08004e69 	.word	0x08004e69
 8004e90:	08004e69 	.word	0x08004e69
 8004e94:	08004e69 	.word	0x08004e69
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08004e69 	.word	0x08004e69
 8004ea0:	08004e69 	.word	0x08004e69
 8004ea4:	08004e69 	.word	0x08004e69
 8004ea8:	08004e69 	.word	0x08004e69
 8004eac:	08004ff9 	.word	0x08004ff9
 8004eb0:	08004f1d 	.word	0x08004f1d
 8004eb4:	08004fdb 	.word	0x08004fdb
 8004eb8:	08004e69 	.word	0x08004e69
 8004ebc:	08004e69 	.word	0x08004e69
 8004ec0:	0800501b 	.word	0x0800501b
 8004ec4:	08004e69 	.word	0x08004e69
 8004ec8:	08004f1d 	.word	0x08004f1d
 8004ecc:	08004e69 	.word	0x08004e69
 8004ed0:	08004e69 	.word	0x08004e69
 8004ed4:	08004fe3 	.word	0x08004fe3
 8004ed8:	680b      	ldr	r3, [r1, #0]
 8004eda:	1d1a      	adds	r2, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	600a      	str	r2, [r1, #0]
 8004ee0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0a3      	b.n	8005034 <_printf_i+0x1f4>
 8004eec:	6825      	ldr	r5, [r4, #0]
 8004eee:	6808      	ldr	r0, [r1, #0]
 8004ef0:	062e      	lsls	r6, r5, #24
 8004ef2:	f100 0304 	add.w	r3, r0, #4
 8004ef6:	d50a      	bpl.n	8004f0e <_printf_i+0xce>
 8004ef8:	6805      	ldr	r5, [r0, #0]
 8004efa:	600b      	str	r3, [r1, #0]
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	da03      	bge.n	8004f08 <_printf_i+0xc8>
 8004f00:	232d      	movs	r3, #45	; 0x2d
 8004f02:	426d      	negs	r5, r5
 8004f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f08:	485e      	ldr	r0, [pc, #376]	; (8005084 <_printf_i+0x244>)
 8004f0a:	230a      	movs	r3, #10
 8004f0c:	e019      	b.n	8004f42 <_printf_i+0x102>
 8004f0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f12:	6805      	ldr	r5, [r0, #0]
 8004f14:	600b      	str	r3, [r1, #0]
 8004f16:	bf18      	it	ne
 8004f18:	b22d      	sxthne	r5, r5
 8004f1a:	e7ef      	b.n	8004efc <_printf_i+0xbc>
 8004f1c:	680b      	ldr	r3, [r1, #0]
 8004f1e:	6825      	ldr	r5, [r4, #0]
 8004f20:	1d18      	adds	r0, r3, #4
 8004f22:	6008      	str	r0, [r1, #0]
 8004f24:	0628      	lsls	r0, r5, #24
 8004f26:	d501      	bpl.n	8004f2c <_printf_i+0xec>
 8004f28:	681d      	ldr	r5, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <_printf_i+0xf2>
 8004f2c:	0669      	lsls	r1, r5, #25
 8004f2e:	d5fb      	bpl.n	8004f28 <_printf_i+0xe8>
 8004f30:	881d      	ldrh	r5, [r3, #0]
 8004f32:	4854      	ldr	r0, [pc, #336]	; (8005084 <_printf_i+0x244>)
 8004f34:	2f6f      	cmp	r7, #111	; 0x6f
 8004f36:	bf0c      	ite	eq
 8004f38:	2308      	moveq	r3, #8
 8004f3a:	230a      	movne	r3, #10
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f42:	6866      	ldr	r6, [r4, #4]
 8004f44:	60a6      	str	r6, [r4, #8]
 8004f46:	2e00      	cmp	r6, #0
 8004f48:	bfa2      	ittt	ge
 8004f4a:	6821      	ldrge	r1, [r4, #0]
 8004f4c:	f021 0104 	bicge.w	r1, r1, #4
 8004f50:	6021      	strge	r1, [r4, #0]
 8004f52:	b90d      	cbnz	r5, 8004f58 <_printf_i+0x118>
 8004f54:	2e00      	cmp	r6, #0
 8004f56:	d04d      	beq.n	8004ff4 <_printf_i+0x1b4>
 8004f58:	4616      	mov	r6, r2
 8004f5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f5e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f62:	5dc7      	ldrb	r7, [r0, r7]
 8004f64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f68:	462f      	mov	r7, r5
 8004f6a:	42bb      	cmp	r3, r7
 8004f6c:	460d      	mov	r5, r1
 8004f6e:	d9f4      	bls.n	8004f5a <_printf_i+0x11a>
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d10b      	bne.n	8004f8c <_printf_i+0x14c>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	07df      	lsls	r7, r3, #31
 8004f78:	d508      	bpl.n	8004f8c <_printf_i+0x14c>
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	6861      	ldr	r1, [r4, #4]
 8004f7e:	4299      	cmp	r1, r3
 8004f80:	bfde      	ittt	le
 8004f82:	2330      	movle	r3, #48	; 0x30
 8004f84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f8c:	1b92      	subs	r2, r2, r6
 8004f8e:	6122      	str	r2, [r4, #16]
 8004f90:	f8cd a000 	str.w	sl, [sp]
 8004f94:	464b      	mov	r3, r9
 8004f96:	aa03      	add	r2, sp, #12
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	f7ff fee2 	bl	8004d64 <_printf_common>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d14c      	bne.n	800503e <_printf_i+0x1fe>
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	b004      	add	sp, #16
 8004faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fae:	4835      	ldr	r0, [pc, #212]	; (8005084 <_printf_i+0x244>)
 8004fb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	680e      	ldr	r6, [r1, #0]
 8004fb8:	061f      	lsls	r7, r3, #24
 8004fba:	f856 5b04 	ldr.w	r5, [r6], #4
 8004fbe:	600e      	str	r6, [r1, #0]
 8004fc0:	d514      	bpl.n	8004fec <_printf_i+0x1ac>
 8004fc2:	07d9      	lsls	r1, r3, #31
 8004fc4:	bf44      	itt	mi
 8004fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8004fca:	6023      	strmi	r3, [r4, #0]
 8004fcc:	b91d      	cbnz	r5, 8004fd6 <_printf_i+0x196>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	f023 0320 	bic.w	r3, r3, #32
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	2310      	movs	r3, #16
 8004fd8:	e7b0      	b.n	8004f3c <_printf_i+0xfc>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	f043 0320 	orr.w	r3, r3, #32
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	2378      	movs	r3, #120	; 0x78
 8004fe4:	4828      	ldr	r0, [pc, #160]	; (8005088 <_printf_i+0x248>)
 8004fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fea:	e7e3      	b.n	8004fb4 <_printf_i+0x174>
 8004fec:	065e      	lsls	r6, r3, #25
 8004fee:	bf48      	it	mi
 8004ff0:	b2ad      	uxthmi	r5, r5
 8004ff2:	e7e6      	b.n	8004fc2 <_printf_i+0x182>
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	e7bb      	b.n	8004f70 <_printf_i+0x130>
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	6826      	ldr	r6, [r4, #0]
 8004ffc:	6960      	ldr	r0, [r4, #20]
 8004ffe:	1d1d      	adds	r5, r3, #4
 8005000:	600d      	str	r5, [r1, #0]
 8005002:	0635      	lsls	r5, r6, #24
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	d501      	bpl.n	800500c <_printf_i+0x1cc>
 8005008:	6018      	str	r0, [r3, #0]
 800500a:	e002      	b.n	8005012 <_printf_i+0x1d2>
 800500c:	0671      	lsls	r1, r6, #25
 800500e:	d5fb      	bpl.n	8005008 <_printf_i+0x1c8>
 8005010:	8018      	strh	r0, [r3, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	6123      	str	r3, [r4, #16]
 8005016:	4616      	mov	r6, r2
 8005018:	e7ba      	b.n	8004f90 <_printf_i+0x150>
 800501a:	680b      	ldr	r3, [r1, #0]
 800501c:	1d1a      	adds	r2, r3, #4
 800501e:	600a      	str	r2, [r1, #0]
 8005020:	681e      	ldr	r6, [r3, #0]
 8005022:	6862      	ldr	r2, [r4, #4]
 8005024:	2100      	movs	r1, #0
 8005026:	4630      	mov	r0, r6
 8005028:	f7fb f8d2 	bl	80001d0 <memchr>
 800502c:	b108      	cbz	r0, 8005032 <_printf_i+0x1f2>
 800502e:	1b80      	subs	r0, r0, r6
 8005030:	6060      	str	r0, [r4, #4]
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	2300      	movs	r3, #0
 8005038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800503c:	e7a8      	b.n	8004f90 <_printf_i+0x150>
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	4632      	mov	r2, r6
 8005042:	4649      	mov	r1, r9
 8005044:	4640      	mov	r0, r8
 8005046:	47d0      	blx	sl
 8005048:	3001      	adds	r0, #1
 800504a:	d0ab      	beq.n	8004fa4 <_printf_i+0x164>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	079b      	lsls	r3, r3, #30
 8005050:	d413      	bmi.n	800507a <_printf_i+0x23a>
 8005052:	68e0      	ldr	r0, [r4, #12]
 8005054:	9b03      	ldr	r3, [sp, #12]
 8005056:	4298      	cmp	r0, r3
 8005058:	bfb8      	it	lt
 800505a:	4618      	movlt	r0, r3
 800505c:	e7a4      	b.n	8004fa8 <_printf_i+0x168>
 800505e:	2301      	movs	r3, #1
 8005060:	4632      	mov	r2, r6
 8005062:	4649      	mov	r1, r9
 8005064:	4640      	mov	r0, r8
 8005066:	47d0      	blx	sl
 8005068:	3001      	adds	r0, #1
 800506a:	d09b      	beq.n	8004fa4 <_printf_i+0x164>
 800506c:	3501      	adds	r5, #1
 800506e:	68e3      	ldr	r3, [r4, #12]
 8005070:	9903      	ldr	r1, [sp, #12]
 8005072:	1a5b      	subs	r3, r3, r1
 8005074:	42ab      	cmp	r3, r5
 8005076:	dcf2      	bgt.n	800505e <_printf_i+0x21e>
 8005078:	e7eb      	b.n	8005052 <_printf_i+0x212>
 800507a:	2500      	movs	r5, #0
 800507c:	f104 0619 	add.w	r6, r4, #25
 8005080:	e7f5      	b.n	800506e <_printf_i+0x22e>
 8005082:	bf00      	nop
 8005084:	08005345 	.word	0x08005345
 8005088:	08005356 	.word	0x08005356

0800508c <_sbrk_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4d06      	ldr	r5, [pc, #24]	; (80050a8 <_sbrk_r+0x1c>)
 8005090:	2300      	movs	r3, #0
 8005092:	4604      	mov	r4, r0
 8005094:	4608      	mov	r0, r1
 8005096:	602b      	str	r3, [r5, #0]
 8005098:	f7fc f860 	bl	800115c <_sbrk>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d102      	bne.n	80050a6 <_sbrk_r+0x1a>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b103      	cbz	r3, 80050a6 <_sbrk_r+0x1a>
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	200002b8 	.word	0x200002b8

080050ac <__sread>:
 80050ac:	b510      	push	{r4, lr}
 80050ae:	460c      	mov	r4, r1
 80050b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b4:	f000 f8a0 	bl	80051f8 <_read_r>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	bfab      	itete	ge
 80050bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050be:	89a3      	ldrhlt	r3, [r4, #12]
 80050c0:	181b      	addge	r3, r3, r0
 80050c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050c6:	bfac      	ite	ge
 80050c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80050ca:	81a3      	strhlt	r3, [r4, #12]
 80050cc:	bd10      	pop	{r4, pc}

080050ce <__swrite>:
 80050ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d2:	461f      	mov	r7, r3
 80050d4:	898b      	ldrh	r3, [r1, #12]
 80050d6:	05db      	lsls	r3, r3, #23
 80050d8:	4605      	mov	r5, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	4616      	mov	r6, r2
 80050de:	d505      	bpl.n	80050ec <__swrite+0x1e>
 80050e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e4:	2302      	movs	r3, #2
 80050e6:	2200      	movs	r2, #0
 80050e8:	f000 f868 	bl	80051bc <_lseek_r>
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f6:	81a3      	strh	r3, [r4, #12]
 80050f8:	4632      	mov	r2, r6
 80050fa:	463b      	mov	r3, r7
 80050fc:	4628      	mov	r0, r5
 80050fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005102:	f000 b817 	b.w	8005134 <_write_r>

08005106 <__sseek>:
 8005106:	b510      	push	{r4, lr}
 8005108:	460c      	mov	r4, r1
 800510a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510e:	f000 f855 	bl	80051bc <_lseek_r>
 8005112:	1c43      	adds	r3, r0, #1
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	bf15      	itete	ne
 8005118:	6560      	strne	r0, [r4, #84]	; 0x54
 800511a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800511e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005122:	81a3      	strheq	r3, [r4, #12]
 8005124:	bf18      	it	ne
 8005126:	81a3      	strhne	r3, [r4, #12]
 8005128:	bd10      	pop	{r4, pc}

0800512a <__sclose>:
 800512a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512e:	f000 b813 	b.w	8005158 <_close_r>
	...

08005134 <_write_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d07      	ldr	r5, [pc, #28]	; (8005154 <_write_r+0x20>)
 8005138:	4604      	mov	r4, r0
 800513a:	4608      	mov	r0, r1
 800513c:	4611      	mov	r1, r2
 800513e:	2200      	movs	r2, #0
 8005140:	602a      	str	r2, [r5, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	f7fb ffb9 	bl	80010ba <_write>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_write_r+0x1e>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_write_r+0x1e>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	200002b8 	.word	0x200002b8

08005158 <_close_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d06      	ldr	r5, [pc, #24]	; (8005174 <_close_r+0x1c>)
 800515c:	2300      	movs	r3, #0
 800515e:	4604      	mov	r4, r0
 8005160:	4608      	mov	r0, r1
 8005162:	602b      	str	r3, [r5, #0]
 8005164:	f7fb ffc5 	bl	80010f2 <_close>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d102      	bne.n	8005172 <_close_r+0x1a>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	b103      	cbz	r3, 8005172 <_close_r+0x1a>
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	200002b8 	.word	0x200002b8

08005178 <_fstat_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4d07      	ldr	r5, [pc, #28]	; (8005198 <_fstat_r+0x20>)
 800517c:	2300      	movs	r3, #0
 800517e:	4604      	mov	r4, r0
 8005180:	4608      	mov	r0, r1
 8005182:	4611      	mov	r1, r2
 8005184:	602b      	str	r3, [r5, #0]
 8005186:	f7fb ffc0 	bl	800110a <_fstat>
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	d102      	bne.n	8005194 <_fstat_r+0x1c>
 800518e:	682b      	ldr	r3, [r5, #0]
 8005190:	b103      	cbz	r3, 8005194 <_fstat_r+0x1c>
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	bd38      	pop	{r3, r4, r5, pc}
 8005196:	bf00      	nop
 8005198:	200002b8 	.word	0x200002b8

0800519c <_isatty_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4d06      	ldr	r5, [pc, #24]	; (80051b8 <_isatty_r+0x1c>)
 80051a0:	2300      	movs	r3, #0
 80051a2:	4604      	mov	r4, r0
 80051a4:	4608      	mov	r0, r1
 80051a6:	602b      	str	r3, [r5, #0]
 80051a8:	f7fb ffbf 	bl	800112a <_isatty>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d102      	bne.n	80051b6 <_isatty_r+0x1a>
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	b103      	cbz	r3, 80051b6 <_isatty_r+0x1a>
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	200002b8 	.word	0x200002b8

080051bc <_lseek_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4d07      	ldr	r5, [pc, #28]	; (80051dc <_lseek_r+0x20>)
 80051c0:	4604      	mov	r4, r0
 80051c2:	4608      	mov	r0, r1
 80051c4:	4611      	mov	r1, r2
 80051c6:	2200      	movs	r2, #0
 80051c8:	602a      	str	r2, [r5, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f7fb ffb8 	bl	8001140 <_lseek>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_lseek_r+0x1e>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_lseek_r+0x1e>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	200002b8 	.word	0x200002b8

080051e0 <__malloc_lock>:
 80051e0:	4801      	ldr	r0, [pc, #4]	; (80051e8 <__malloc_lock+0x8>)
 80051e2:	f7ff bb55 	b.w	8004890 <__retarget_lock_acquire_recursive>
 80051e6:	bf00      	nop
 80051e8:	200002b0 	.word	0x200002b0

080051ec <__malloc_unlock>:
 80051ec:	4801      	ldr	r0, [pc, #4]	; (80051f4 <__malloc_unlock+0x8>)
 80051ee:	f7ff bb50 	b.w	8004892 <__retarget_lock_release_recursive>
 80051f2:	bf00      	nop
 80051f4:	200002b0 	.word	0x200002b0

080051f8 <_read_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4d07      	ldr	r5, [pc, #28]	; (8005218 <_read_r+0x20>)
 80051fc:	4604      	mov	r4, r0
 80051fe:	4608      	mov	r0, r1
 8005200:	4611      	mov	r1, r2
 8005202:	2200      	movs	r2, #0
 8005204:	602a      	str	r2, [r5, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	f7fb ff3a 	bl	8001080 <_read>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d102      	bne.n	8005216 <_read_r+0x1e>
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	b103      	cbz	r3, 8005216 <_read_r+0x1e>
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	bd38      	pop	{r3, r4, r5, pc}
 8005218:	200002b8 	.word	0x200002b8

0800521c <_init>:
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521e:	bf00      	nop
 8005220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005222:	bc08      	pop	{r3}
 8005224:	469e      	mov	lr, r3
 8005226:	4770      	bx	lr

08005228 <_fini>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	bf00      	nop
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr
