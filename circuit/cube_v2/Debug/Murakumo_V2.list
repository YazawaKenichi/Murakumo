
Murakumo_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000515c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005420  08005420  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005428  08005428  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000250  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c0  200002c0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011131  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220d  00000000  00000000  000311d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  000333e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d48  00000000  00000000  000341f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002172a  00000000  00000000  00034f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff10  00000000  00000000  00056662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6a1  00000000  00000000  00066572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00134c13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004348  00000000  00000000  00134c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052d4 	.word	0x080052d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080052d4 	.word	0x080052d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <__io_putchar>:
static void MX_TIM6_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8000570:	1d39      	adds	r1, r7, #4
 8000572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000576:	2201      	movs	r2, #1
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <__io_putchar+0x20>)
 800057a:	f003 fbe4 	bl	8003d46 <HAL_UART_Transmit>
	return ch;
 800057e:	687b      	ldr	r3, [r7, #4]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200001d8 	.word	0x200001d8

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 feb1 	bl	80012f8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f859 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 faaf 	bl	8000afc <MX_GPIO_Init>
  MX_TIM4_Init();
 800059e:	f000 f993 	bl	80008c8 <MX_TIM4_Init>
  MX_TIM2_Init();
 80005a2:	f000 f939 	bl	8000818 <MX_TIM2_Init>
  MX_ADC1_Init();
 80005a6:	f000 f8bb 	bl	8000720 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80005aa:	f000 fa5d 	bl	8000a68 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80005ae:	f000 f9ef 	bl	8000990 <MX_TIM6_Init>
  MX_DMA_Init();
 80005b2:	f000 fa83 	bl	8000abc <MX_DMA_Init>
  MX_TIM7_Init();
 80005b6:	f000 fa21 	bl	80009fc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 80005ba:	481c      	ldr	r0, [pc, #112]	; (800062c <main+0xa0>)
 80005bc:	f003 ff44 	bl	8004448 <puts>

	printf("Push Switch ...\r\n");
 80005c0:	481b      	ldr	r0, [pc, #108]	; (8000630 <main+0xa4>)
 80005c2:	f003 ff41 	bl	8004448 <puts>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 80005c6:	e002      	b.n	80005ce <main+0x42>
	{
	  HAL_Delay(100);
 80005c8:	2064      	movs	r0, #100	; 0x64
 80005ca:	f000 ff07 	bl	80013dc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	4818      	ldr	r0, [pc, #96]	; (8000634 <main+0xa8>)
 80005d4:	f002 f94c 	bl	8002870 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f4      	bne.n	80005c8 <main+0x3c>
	}

  printf("Starting Analog Read\r\n");
 80005de:	4816      	ldr	r0, [pc, #88]	; (8000638 <main+0xac>)
 80005e0:	f003 ff32 	bl	8004448 <puts>
//  if(HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
//  if(HAL_ADCE1_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) { Error_Handler(); }
//  if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

	printf("Starting Analog DMA\r\n");
 80005e4:	4815      	ldr	r0, [pc, #84]	; (800063c <main+0xb0>)
 80005e6:	f003 ff2f 	bl	8004448 <puts>
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) { Error_Handler(); }
 80005ea:	2204      	movs	r2, #4
 80005ec:	4914      	ldr	r1, [pc, #80]	; (8000640 <main+0xb4>)
 80005ee:	4815      	ldr	r0, [pc, #84]	; (8000644 <main+0xb8>)
 80005f0:	f000 ff5c 	bl	80014ac <HAL_ADC_Start_DMA>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0x72>
 80005fa:	f000 fb53 	bl	8000ca4 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int channel = 0; channel < ADC_CONVERTED_DATA_BUFFER_SIZE; channel++)
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	e00b      	b.n	800061c <main+0x90>
	  {
		  printf("ADC CH%2d Value is %d\r\n", channel, analog[channel]);
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <main+0xb4>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800060c:	461a      	mov	r2, r3
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <main+0xbc>)
 8000612:	f003 fe93 	bl	800433c <iprintf>
	  for(int channel = 0; channel < ADC_CONVERTED_DATA_BUFFER_SIZE; channel++)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b03      	cmp	r3, #3
 8000620:	ddf0      	ble.n	8000604 <main+0x78>
	  }

	  HAL_Delay(500);
 8000622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000626:	f000 fed9 	bl	80013dc <HAL_Delay>
	  for(int channel = 0; channel < ADC_CONVERTED_DATA_BUFFER_SIZE; channel++)
 800062a:	e7e8      	b.n	80005fe <main+0x72>
 800062c:	080052ec 	.word	0x080052ec
 8000630:	0800530c 	.word	0x0800530c
 8000634:	40020800 	.word	0x40020800
 8000638:	08005320 	.word	0x08005320
 800063c:	08005338 	.word	0x08005338
 8000640:	2000008c 	.word	0x2000008c
 8000644:	200000e8 	.word	0x200000e8
 8000648:	08005350 	.word	0x08005350

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fe66 	bl	800432c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a27      	ldr	r2, [pc, #156]	; (8000718 <SystemClock_Config+0xcc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xd0>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c0:	23a8      	movs	r3, #168	; 0xa8
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f8ff 	bl	80028d4 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006dc:	f000 fae2 	bl	8000ca4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2105      	movs	r1, #5
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fb60 	bl	8002dc4 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070a:	f000 facb 	bl	8000ca4 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <MX_ADC1_Init+0xec>)
 8000734:	4a36      	ldr	r2, [pc, #216]	; (8000810 <MX_ADC1_Init+0xf0>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000738:	4b34      	ldr	r3, [pc, #208]	; (800080c <MX_ADC1_Init+0xec>)
 800073a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800073e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000740:	4b32      	ldr	r3, [pc, #200]	; (800080c <MX_ADC1_Init+0xec>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_ADC1_Init+0xec>)
 8000748:	2201      	movs	r2, #1
 800074a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_ADC1_Init+0xec>)
 800074e:	2201      	movs	r2, #1
 8000750:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_ADC1_Init+0xec>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_ADC1_Init+0xec>)
 800075c:	2200      	movs	r2, #0
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_ADC1_Init+0xec>)
 8000762:	4a2c      	ldr	r2, [pc, #176]	; (8000814 <MX_ADC1_Init+0xf4>)
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <MX_ADC1_Init+0xec>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_ADC1_Init+0xec>)
 800076e:	2204      	movs	r2, #4
 8000770:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_ADC1_Init+0xec>)
 8000774:	2201      	movs	r2, #1
 8000776:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_ADC1_Init+0xec>)
 800077c:	2201      	movs	r2, #1
 800077e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000780:	4822      	ldr	r0, [pc, #136]	; (800080c <MX_ADC1_Init+0xec>)
 8000782:	f000 fe4f 	bl	8001424 <HAL_ADC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800078c:	f000 fa8a 	bl	8000ca4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000790:	2300      	movs	r3, #0
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000794:	2301      	movs	r3, #1
 8000796:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	481a      	ldr	r0, [pc, #104]	; (800080c <MX_ADC1_Init+0xec>)
 80007a2:	f000 ffa7 	bl	80016f4 <HAL_ADC_ConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007ac:	f000 fa7a 	bl	8000ca4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007b0:	2307      	movs	r3, #7
 80007b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_ADC1_Init+0xec>)
 80007be:	f000 ff99 	bl	80016f4 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007c8:	f000 fa6c 	bl	8000ca4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007d0:	2303      	movs	r3, #3
 80007d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	4619      	mov	r1, r3
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_ADC1_Init+0xec>)
 80007da:	f000 ff8b 	bl	80016f4 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007e4:	f000 fa5e 	bl	8000ca4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007e8:	230b      	movs	r3, #11
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_ADC1_Init+0xec>)
 80007f6:	f000 ff7d 	bl	80016f4 <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000800:	f000 fa50 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000e8 	.word	0x200000e8
 8000810:	40012000 	.word	0x40012000
 8000814:	0f000001 	.word	0x0f000001

08000818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_TIM2_Init+0xac>)
 800083c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000840:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_TIM2_Init+0xac>)
 8000844:	2201      	movs	r2, #1
 8000846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_TIM2_Init+0xac>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1679;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_TIM2_Init+0xac>)
 8000850:	f240 628f 	movw	r2, #1679	; 0x68f
 8000854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_TIM2_Init+0xac>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_TIM2_Init+0xac>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000862:	4818      	ldr	r0, [pc, #96]	; (80008c4 <MX_TIM2_Init+0xac>)
 8000864:	f002 fcf7 	bl	8003256 <HAL_TIM_PWM_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800086e:	f000 fa19 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	4619      	mov	r1, r3
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <MX_TIM2_Init+0xac>)
 8000882:	f003 f983 	bl	8003b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800088c:	f000 fa0a 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000890:	2360      	movs	r3, #96	; 0x60
 8000892:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <MX_TIM2_Init+0xac>)
 80008a8:	f002 fe2c 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80008b2:	f000 f9f7 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <MX_TIM2_Init+0xac>)
 80008b8:	f000 fb4e 	bl	8000f58 <HAL_TIM_MspPostInit>

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000021c 	.word	0x2000021c

080008c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <MX_TIM4_Init+0xc0>)
 80008ec:	4a27      	ldr	r2, [pc, #156]	; (800098c <MX_TIM4_Init+0xc4>)
 80008ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <MX_TIM4_Init+0xc0>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <MX_TIM4_Init+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 839;
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_TIM4_Init+0xc0>)
 80008fe:	f240 3247 	movw	r2, #839	; 0x347
 8000902:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_TIM4_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_TIM4_Init+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000910:	481d      	ldr	r0, [pc, #116]	; (8000988 <MX_TIM4_Init+0xc0>)
 8000912:	f002 fca0 	bl	8003256 <HAL_TIM_PWM_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800091c:	f000 f9c2 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000928:	f107 0320 	add.w	r3, r7, #32
 800092c:	4619      	mov	r1, r3
 800092e:	4816      	ldr	r0, [pc, #88]	; (8000988 <MX_TIM4_Init+0xc0>)
 8000930:	f003 f92c 	bl	8003b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800093a:	f000 f9b3 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093e:	2360      	movs	r3, #96	; 0x60
 8000940:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	4619      	mov	r1, r3
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <MX_TIM4_Init+0xc0>)
 8000956:	f002 fdd5 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000960:	f000 f9a0 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2204      	movs	r2, #4
 8000968:	4619      	mov	r1, r3
 800096a:	4807      	ldr	r0, [pc, #28]	; (8000988 <MX_TIM4_Init+0xc0>)
 800096c:	f002 fdca 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000976:	f000 f995 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <MX_TIM4_Init+0xc0>)
 800097c:	f000 faec 	bl	8000f58 <HAL_TIM_MspPostInit>

}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	; 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200000a0 	.word	0x200000a0
 800098c:	40000800 	.word	0x40000800

08000990 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009a0:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <MX_TIM6_Init+0x68>)
 80009a2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009b2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80009b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009c0:	f002 fbfa 	bl	80031b8 <HAL_TIM_Base_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009ca:	f000 f96b 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009dc:	f003 f8d6 	bl	8003b8c <HAL_TIMEx_MasterConfigSynchronization>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009e6:	f000 f95d 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000190 	.word	0x20000190
 80009f8:	40001000 	.word	0x40001000

080009fc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_TIM7_Init+0x64>)
 8000a0c:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <MX_TIM7_Init+0x68>)
 8000a0e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_TIM7_Init+0x64>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_TIM7_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_TIM7_Init+0x64>)
 8000a1e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000a22:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_TIM7_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_TIM7_Init+0x64>)
 8000a2c:	f002 fbc4 	bl	80031b8 <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000a36:	f000 f935 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_TIM7_Init+0x64>)
 8000a48:	f003 f8a0 	bl	8003b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a52:	f000 f927 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000264 	.word	0x20000264
 8000a64:	40001400 	.word	0x40001400

08000a68 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_USART6_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a78:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART6_UART_Init+0x4c>)
 8000aa0:	f003 f904 	bl	8003cac <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f8fb 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001d8 	.word	0x200001d8
 8000ab8:	40011400 	.word	0x40011400

08000abc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_DMA_Init+0x3c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <MX_DMA_Init+0x3c>)
 8000acc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_DMA_Init+0x3c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2038      	movs	r0, #56	; 0x38
 8000ae4:	f001 f981 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ae8:	2038      	movs	r0, #56	; 0x38
 8000aea:	f001 f99a 	bl	8001e22 <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a58      	ldr	r2, [pc, #352]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b56      	ldr	r3, [pc, #344]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b52      	ldr	r3, [pc, #328]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a51      	ldr	r2, [pc, #324]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b4f      	ldr	r3, [pc, #316]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	4b4b      	ldr	r3, [pc, #300]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a4a      	ldr	r2, [pc, #296]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a43      	ldr	r2, [pc, #268]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <MX_GPIO_Init+0x180>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8000b88:	483d      	ldr	r0, [pc, #244]	; (8000c80 <MX_GPIO_Init+0x184>)
 8000b8a:	f001 fe89 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b94:	483b      	ldr	r0, [pc, #236]	; (8000c84 <MX_GPIO_Init+0x188>)
 8000b96:	f001 fe83 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000ba0:	4839      	ldr	r0, [pc, #228]	; (8000c88 <MX_GPIO_Init+0x18c>)
 8000ba2:	f001 fe7d 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2104      	movs	r1, #4
 8000baa:	4838      	ldr	r0, [pc, #224]	; (8000c8c <MX_GPIO_Init+0x190>)
 8000bac:	f001 fe78 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8000bb0:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482d      	ldr	r0, [pc, #180]	; (8000c80 <MX_GPIO_Init+0x184>)
 8000bca:	f001 fcb5 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin Rotary2_Pin Rotary8_Pin Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|Rotary2_Pin|Rotary8_Pin|Rotary1_Pin;
 8000bce:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4827      	ldr	r0, [pc, #156]	; (8000c80 <MX_GPIO_Init+0x184>)
 8000be4:	f001 fca8 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8000be8:	f640 0304 	movw	r3, #2052	; 0x804
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4821      	ldr	r0, [pc, #132]	; (8000c84 <MX_GPIO_Init+0x188>)
 8000bfe:	f001 fc9b 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481a      	ldr	r0, [pc, #104]	; (8000c84 <MX_GPIO_Init+0x188>)
 8000c1c:	f001 fc8c 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000c20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4813      	ldr	r0, [pc, #76]	; (8000c88 <MX_GPIO_Init+0x18c>)
 8000c3a:	f001 fc7d 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_GPIO_Init+0x18c>)
 8000c54:	f001 fc70 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4807      	ldr	r0, [pc, #28]	; (8000c8c <MX_GPIO_Init+0x190>)
 8000c70:	f001 fc62 	bl	8002538 <HAL_GPIO_Init>

}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	; 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020400 	.word	0x40020400
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020c00 	.word	0x40020c00

08000c90 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	// ADC END Program
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a49      	ldr	r2, [pc, #292]	; (8000e44 <HAL_ADC_MspInit+0x144>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	f040 808c 	bne.w	8000e3c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2c:	4a46      	ldr	r2, [pc, #280]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d32:	6453      	str	r3, [r2, #68]	; 0x44
 8000d34:	4b44      	ldr	r3, [pc, #272]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	4b40      	ldr	r3, [pc, #256]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a3f      	ldr	r2, [pc, #252]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a38      	ldr	r2, [pc, #224]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <HAL_ADC_MspInit+0x148>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4829      	ldr	r0, [pc, #164]	; (8000e4c <HAL_ADC_MspInit+0x14c>)
 8000da8:	f001 fbc6 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000dac:	2381      	movs	r3, #129	; 0x81
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4824      	ldr	r0, [pc, #144]	; (8000e50 <HAL_ADC_MspInit+0x150>)
 8000dc0:	f001 fbba 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481f      	ldr	r0, [pc, #124]	; (8000e54 <HAL_ADC_MspInit+0x154>)
 8000dd8:	f001 fbae 	bl	8002538 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <HAL_ADC_MspInit+0x15c>)
 8000de0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000e22:	f001 f819 	bl	8001e58 <HAL_DMA_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000e2c:	f7ff ff3a 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <HAL_ADC_MspInit+0x158>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3730      	adds	r7, #48	; 0x30
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40012000 	.word	0x40012000
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40020400 	.word	0x40020400
 8000e58:	20000130 	.word	0x20000130
 8000e5c:	40026410 	.word	0x40026410

08000e60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e70:	d10e      	bne.n	8000e90 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x64>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x64>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x64>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e8e:	e012      	b.n	8000eb6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x68>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10d      	bne.n	8000eb6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x64>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x64>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x64>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40000800 	.word	0x40000800

08000ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <HAL_TIM_Base_MspInit+0x80>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d116      	bne.n	8000f0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_TIM_Base_MspInit+0x84>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a1a      	ldr	r2, [pc, #104]	; (8000f50 <HAL_TIM_Base_MspInit+0x84>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_TIM_Base_MspInit+0x84>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2036      	movs	r0, #54	; 0x36
 8000f00:	f000 ff73 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f04:	2036      	movs	r0, #54	; 0x36
 8000f06:	f000 ff8c 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f0a:	e01a      	b.n	8000f42 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_TIM_Base_MspInit+0x88>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d115      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_TIM_Base_MspInit+0x84>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <HAL_TIM_Base_MspInit+0x84>)
 8000f20:	f043 0320 	orr.w	r3, r3, #32
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_TIM_Base_MspInit+0x84>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f003 0320 	and.w	r3, r3, #32
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2037      	movs	r0, #55	; 0x37
 8000f38:	f000 ff57 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f3c:	2037      	movs	r0, #55	; 0x37
 8000f3e:	f000 ff70 	bl	8001e22 <HAL_NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40001000 	.word	0x40001000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40001400 	.word	0x40001400

08000f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d11f      	bne.n	8000fba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_TIM_MspPostInit+0xb0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a21      	ldr	r2, [pc, #132]	; (8001008 <HAL_TIM_MspPostInit+0xb0>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <HAL_TIM_MspPostInit+0xb0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4816      	ldr	r0, [pc, #88]	; (800100c <HAL_TIM_MspPostInit+0xb4>)
 8000fb4:	f001 fac0 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fb8:	e022      	b.n	8001000 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_TIM_MspPostInit+0xb8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d11d      	bne.n	8001000 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_TIM_MspPostInit+0xb0>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_TIM_MspPostInit+0xb0>)
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_TIM_MspPostInit+0xb0>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8000fe0:	23c0      	movs	r3, #192	; 0xc0
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <HAL_TIM_MspPostInit+0xbc>)
 8000ffc:	f001 fa9c 	bl	8002538 <HAL_GPIO_Init>
}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000
 8001010:	40000800 	.word	0x40000800
 8001014:	40020400 	.word	0x40020400

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_UART_MspInit+0x84>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d12b      	bne.n	8001092 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_UART_MspInit+0x88>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_UART_MspInit+0x88>)
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_UART_MspInit+0x88>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_UART_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_UART_MspInit+0x88>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_UART_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001072:	23c0      	movs	r3, #192	; 0xc0
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001082:	2308      	movs	r3, #8
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_UART_MspInit+0x8c>)
 800108e:	f001 fa53 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40011400 	.word	0x40011400
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020800 	.word	0x40020800

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <NMI_Handler+0x4>

080010ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <MemManage_Handler+0x4>

080010ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 f952 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <TIM6_DAC_IRQHandler+0x10>)
 8001102:	f002 f8f7 	bl	80032f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000190 	.word	0x20000190

08001110 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <TIM7_IRQHandler+0x10>)
 8001116:	f002 f8ed 	bl	80032f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000264 	.word	0x20000264

08001124 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA2_Stream0_IRQHandler+0x10>)
 800112a:	f000 ff9b 	bl	8002064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000130 	.word	0x20000130

08001138 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e00a      	b.n	8001160 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800114a:	f3af 8000 	nop.w
 800114e:	4601      	mov	r1, r0
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	b2ca      	uxtb	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf0      	blt.n	800114a <_read+0x12>
	}

return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e009      	b.n	8001198 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	60ba      	str	r2, [r7, #8]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9eb 	bl	8000568 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbf1      	blt.n	8001184 <_write+0x12>
	}
	return len;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_close>:

int _close(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	return -1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d2:	605a      	str	r2, [r3, #4]
	return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_isatty>:

int _isatty(int file)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
	return 1;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f003 f848 	bl	80042d8 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20020000 	.word	0x20020000
 8001274:	00000400 	.word	0x00000400
 8001278:	20000094 	.word	0x20000094
 800127c:	200002c0 	.word	0x200002c0

08001280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ce:	f7ff ffd7 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f003 f807 	bl	80042e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff f959 	bl	800058c <main>
  bx  lr    
 80012da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012e8:	08005430 	.word	0x08005430
  ldr r2, =_sbss
 80012ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012f0:	200002c0 	.word	0x200002c0

080012f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <HAL_Init+0x40>)
 8001302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_Init+0x40>)
 800130e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x40>)
 800131a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 fd57 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	200f      	movs	r0, #15
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fcc0 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c00 	.word	0x40023c00

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fd6f 	bl	8001e3e <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 fd37 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000000 	.word	0x20000000
 8001394:	20000008 	.word	0x20000008
 8001398:	20000004 	.word	0x20000004

0800139c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000008 	.word	0x20000008
 80013c0:	200002ac 	.word	0x200002ac

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	200002ac 	.word	0x200002ac

080013dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff ffee 	bl	80013c4 <HAL_GetTick>
 80013e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d005      	beq.n	8001402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_Delay+0x44>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4413      	add	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001402:	bf00      	nop
 8001404:	f7ff ffde 	bl	80013c4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d8f7      	bhi.n	8001404 <HAL_Delay+0x28>
  {
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008

08001424 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e033      	b.n	80014a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fc5c 	bl	8000d00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	2b00      	cmp	r3, #0
 8001460:	d118      	bne.n	8001494 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800146a:	f023 0302 	bic.w	r3, r3, #2
 800146e:	f043 0202 	orr.w	r2, r3, #2
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fa5e 	bl	8001938 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
 8001492:	e001      	b.n	8001498 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_Start_DMA+0x1e>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e0e9      	b.n	800169e <HAL_ADC_Start_DMA+0x1f2>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d018      	beq.n	8001512 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014f0:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <HAL_ADC_Start_DMA+0x1fc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a6d      	ldr	r2, [pc, #436]	; (80016ac <HAL_ADC_Start_DMA+0x200>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0c9a      	lsrs	r2, r3, #18
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001504:	e002      	b.n	800150c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	3b01      	subs	r3, #1
 800150a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f9      	bne.n	8001506 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001520:	d107      	bne.n	8001532 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001530:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	f040 80a1 	bne.w	8001684 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800156c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001580:	d106      	bne.n	8001590 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f023 0206 	bic.w	r2, r3, #6
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	645a      	str	r2, [r3, #68]	; 0x44
 800158e:	e002      	b.n	8001596 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159e:	4b44      	ldr	r3, [pc, #272]	; (80016b0 <HAL_ADC_Start_DMA+0x204>)
 80015a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a6:	4a43      	ldr	r2, [pc, #268]	; (80016b4 <HAL_ADC_Start_DMA+0x208>)
 80015a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ae:	4a42      	ldr	r2, [pc, #264]	; (80016b8 <HAL_ADC_Start_DMA+0x20c>)
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b6:	4a41      	ldr	r2, [pc, #260]	; (80016bc <HAL_ADC_Start_DMA+0x210>)
 80015b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	334c      	adds	r3, #76	; 0x4c
 80015ee:	4619      	mov	r1, r3
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f000 fcde 	bl	8001fb4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	2b00      	cmp	r3, #0
 8001602:	d12a      	bne.n	800165a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2d      	ldr	r2, [pc, #180]	; (80016c0 <HAL_ADC_Start_DMA+0x214>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d015      	beq.n	800163a <HAL_ADC_Start_DMA+0x18e>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a2c      	ldr	r2, [pc, #176]	; (80016c4 <HAL_ADC_Start_DMA+0x218>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d105      	bne.n	8001624 <HAL_ADC_Start_DMA+0x178>
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_ADC_Start_DMA+0x204>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00a      	beq.n	800163a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <HAL_ADC_Start_DMA+0x21c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d136      	bne.n	800169c <HAL_ADC_Start_DMA+0x1f0>
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_ADC_Start_DMA+0x204>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	d130      	bne.n	800169c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d129      	bne.n	800169c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e020      	b.n	800169c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <HAL_ADC_Start_DMA+0x214>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d11b      	bne.n	800169c <HAL_ADC_Start_DMA+0x1f0>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d114      	bne.n	800169c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	e00b      	b.n	800169c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f043 0210 	orr.w	r2, r3, #16
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f043 0201 	orr.w	r2, r3, #1
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000000 	.word	0x20000000
 80016ac:	431bde83 	.word	0x431bde83
 80016b0:	40012300 	.word	0x40012300
 80016b4:	08001b31 	.word	0x08001b31
 80016b8:	08001beb 	.word	0x08001beb
 80016bc:	08001c07 	.word	0x08001c07
 80016c0:	40012000 	.word	0x40012000
 80016c4:	40012100 	.word	0x40012100
 80016c8:	40012200 	.word	0x40012200

080016cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x1c>
 800170c:	2302      	movs	r3, #2
 800170e:	e105      	b.n	800191c <HAL_ADC_ConfigChannel+0x228>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b09      	cmp	r3, #9
 800171e:	d925      	bls.n	800176c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68d9      	ldr	r1, [r3, #12]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3b1e      	subs	r3, #30
 8001736:	2207      	movs	r2, #7
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43da      	mvns	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	400a      	ands	r2, r1
 8001744:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68d9      	ldr	r1, [r3, #12]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	4603      	mov	r3, r0
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4403      	add	r3, r0
 800175e:	3b1e      	subs	r3, #30
 8001760:	409a      	lsls	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	e022      	b.n	80017b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6919      	ldr	r1, [r3, #16]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	2207      	movs	r2, #7
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	400a      	ands	r2, r1
 800178e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6919      	ldr	r1, [r3, #16]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4403      	add	r3, r0
 80017a8:	409a      	lsls	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d824      	bhi.n	8001804 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b05      	subs	r3, #5
 80017cc:	221f      	movs	r2, #31
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	400a      	ands	r2, r1
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3b05      	subs	r3, #5
 80017f6:	fa00 f203 	lsl.w	r2, r0, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
 8001802:	e04c      	b.n	800189e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d824      	bhi.n	8001856 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	3b23      	subs	r3, #35	; 0x23
 800181e:	221f      	movs	r2, #31
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43da      	mvns	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	400a      	ands	r2, r1
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b23      	subs	r3, #35	; 0x23
 8001848:	fa00 f203 	lsl.w	r2, r0, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
 8001854:	e023      	b.n	800189e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	3b41      	subs	r3, #65	; 0x41
 8001868:	221f      	movs	r2, #31
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	400a      	ands	r2, r1
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	3b41      	subs	r3, #65	; 0x41
 8001892:	fa00 f203 	lsl.w	r2, r0, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_ADC_ConfigChannel+0x234>)
 80018a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a21      	ldr	r2, [pc, #132]	; (800192c <HAL_ADC_ConfigChannel+0x238>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d109      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x1cc>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b12      	cmp	r3, #18
 80018b2:	d105      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a19      	ldr	r2, [pc, #100]	; (800192c <HAL_ADC_ConfigChannel+0x238>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d123      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x21e>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b10      	cmp	r3, #16
 80018d0:	d003      	beq.n	80018da <HAL_ADC_ConfigChannel+0x1e6>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b11      	cmp	r3, #17
 80018d8:	d11b      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d111      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_ADC_ConfigChannel+0x23c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_ADC_ConfigChannel+0x240>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	0c9a      	lsrs	r2, r3, #18
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001904:	e002      	b.n	800190c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	3b01      	subs	r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f9      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40012300 	.word	0x40012300
 800192c:	40012000 	.word	0x40012000
 8001930:	20000000 	.word	0x20000000
 8001934:	431bde83 	.word	0x431bde83

08001938 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001940:	4b79      	ldr	r3, [pc, #484]	; (8001b28 <ADC_Init+0x1f0>)
 8001942:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	431a      	orrs	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800196c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	021a      	lsls	r2, r3, #8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <ADC_Init+0x1f4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d022      	beq.n	8001a16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6899      	ldr	r1, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6899      	ldr	r1, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	e00f      	b.n	8001a36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0202 	bic.w	r2, r2, #2
 8001a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6899      	ldr	r1, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7e1b      	ldrb	r3, [r3, #24]
 8001a50:	005a      	lsls	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01b      	beq.n	8001a9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6859      	ldr	r1, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	035a      	lsls	r2, r3, #13
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	e007      	b.n	8001aac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	051a      	lsls	r2, r3, #20
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6899      	ldr	r1, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aee:	025a      	lsls	r2, r3, #9
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6899      	ldr	r1, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	029a      	lsls	r2, r3, #10
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	609a      	str	r2, [r3, #8]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40012300 	.word	0x40012300
 8001b2c:	0f000001 	.word	0x0f000001

08001b30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d13c      	bne.n	8001bc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d12b      	bne.n	8001bbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d127      	bne.n	8001bbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d119      	bne.n	8001bbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0220 	bic.w	r2, r2, #32
 8001b96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f7ff f867 	bl	8000c90 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bc2:	e00e      	b.n	8001be2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff fd85 	bl	80016e0 <HAL_ADC_ErrorCallback>
}
 8001bd6:	e004      	b.n	8001be2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff fd67 	bl	80016cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f043 0204 	orr.w	r2, r3, #4
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7ff fd5a 	bl	80016e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff29 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff3e 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff31 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff faae 	bl	80013c4 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e099      	b.n	8001fa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e94:	e00f      	b.n	8001eb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e96:	f7ff fa95 	bl	80013c4 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d908      	bls.n	8001eb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2203      	movs	r2, #3
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e078      	b.n	8001fa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e8      	bne.n	8001e96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <HAL_DMA_Init+0x158>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d107      	bne.n	8001f20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f023 0307 	bic.w	r3, r3, #7
 8001f36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d117      	bne.n	8001f7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fa6f 	bl	8002440 <DMA_CheckFifoParam>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f76:	2301      	movs	r3, #1
 8001f78:	e016      	b.n	8001fa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fa26 	bl	80023d4 <DMA_CalcBaseAndBitshift>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	223f      	movs	r2, #63	; 0x3f
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	f010803f 	.word	0xf010803f

08001fb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_DMA_Start_IT+0x26>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e040      	b.n	800205c <HAL_DMA_Start_IT+0xa8>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d12f      	bne.n	800204e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f9b8 	bl	8002378 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	223f      	movs	r2, #63	; 0x3f
 800200e:	409a      	lsls	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0216 	orr.w	r2, r2, #22
 8002022:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0208 	orr.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e005      	b.n	800205a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002056:	2302      	movs	r3, #2
 8002058:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002070:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_DMA_IRQHandler+0x258>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a92      	ldr	r2, [pc, #584]	; (80022c0 <HAL_DMA_IRQHandler+0x25c>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0a9b      	lsrs	r3, r3, #10
 800207c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2208      	movs	r2, #8
 8002090:	409a      	lsls	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01a      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0204 	bic.w	r2, r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2208      	movs	r2, #8
 80020be:	409a      	lsls	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	2201      	movs	r2, #1
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d012      	beq.n	8002106 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2201      	movs	r2, #1
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	f043 0202 	orr.w	r2, r3, #2
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2204      	movs	r2, #4
 800210c:	409a      	lsls	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00b      	beq.n	800213c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	2204      	movs	r2, #4
 800212a:	409a      	lsls	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	f043 0204 	orr.w	r2, r3, #4
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2210      	movs	r2, #16
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d043      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d03c      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2210      	movs	r2, #16
 8002160:	409a      	lsls	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d018      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d024      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
 8002192:	e01f      	b.n	80021d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01b      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
 80021a4:	e016      	b.n	80021d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0208 	bic.w	r2, r2, #8
 80021c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2220      	movs	r2, #32
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 808e 	beq.w	8002302 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8086 	beq.w	8002302 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	2220      	movs	r2, #32
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b05      	cmp	r3, #5
 800220c:	d136      	bne.n	800227c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0216 	bic.w	r2, r2, #22
 800221c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800222c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <HAL_DMA_IRQHandler+0x1da>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0208 	bic.w	r2, r2, #8
 800224c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	223f      	movs	r2, #63	; 0x3f
 8002254:	409a      	lsls	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226e:	2b00      	cmp	r3, #0
 8002270:	d07d      	beq.n	800236e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
        }
        return;
 800227a:	e078      	b.n	800236e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d01c      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d108      	bne.n	80022aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	2b00      	cmp	r3, #0
 800229e:	d030      	beq.n	8002302 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
 80022a8:	e02b      	b.n	8002302 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d027      	beq.n	8002302 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
 80022ba:	e022      	b.n	8002302 <HAL_DMA_IRQHandler+0x29e>
 80022bc:	20000000 	.word	0x20000000
 80022c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10f      	bne.n	80022f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0210 	bic.w	r2, r2, #16
 80022e0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	2b00      	cmp	r3, #0
 8002308:	d032      	beq.n	8002370 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d022      	beq.n	800235c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2205      	movs	r2, #5
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3301      	adds	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	429a      	cmp	r2, r3
 8002338:	d307      	bcc.n	800234a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f2      	bne.n	800232e <HAL_DMA_IRQHandler+0x2ca>
 8002348:	e000      	b.n	800234c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800234a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
 800236c:	e000      	b.n	8002370 <HAL_DMA_IRQHandler+0x30c>
        return;
 800236e:	bf00      	nop
    }
  }
}
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop

08002378 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002394:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d108      	bne.n	80023b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023b6:	e007      	b.n	80023c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	60da      	str	r2, [r3, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3b10      	subs	r3, #16
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <DMA_CalcBaseAndBitshift+0x64>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <DMA_CalcBaseAndBitshift+0x68>)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d909      	bls.n	8002416 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800240a:	f023 0303 	bic.w	r3, r3, #3
 800240e:	1d1a      	adds	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	659a      	str	r2, [r3, #88]	; 0x58
 8002414:	e007      	b.n	8002426 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800241e:	f023 0303 	bic.w	r3, r3, #3
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	aaaaaaab 	.word	0xaaaaaaab
 800243c:	08005380 	.word	0x08005380

08002440 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d11f      	bne.n	800249a <DMA_CheckFifoParam+0x5a>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d856      	bhi.n	800250e <DMA_CheckFifoParam+0xce>
 8002460:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <DMA_CheckFifoParam+0x28>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	08002479 	.word	0x08002479
 800246c:	0800248b 	.word	0x0800248b
 8002470:	08002479 	.word	0x08002479
 8002474:	0800250f 	.word	0x0800250f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d046      	beq.n	8002512 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002488:	e043      	b.n	8002512 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002492:	d140      	bne.n	8002516 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002498:	e03d      	b.n	8002516 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a2:	d121      	bne.n	80024e8 <DMA_CheckFifoParam+0xa8>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d837      	bhi.n	800251a <DMA_CheckFifoParam+0xda>
 80024aa:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <DMA_CheckFifoParam+0x70>)
 80024ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b0:	080024c1 	.word	0x080024c1
 80024b4:	080024c7 	.word	0x080024c7
 80024b8:	080024c1 	.word	0x080024c1
 80024bc:	080024d9 	.word	0x080024d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e030      	b.n	8002528 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d025      	beq.n	800251e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d6:	e022      	b.n	800251e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024e0:	d11f      	bne.n	8002522 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024e6:	e01c      	b.n	8002522 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d903      	bls.n	80024f6 <DMA_CheckFifoParam+0xb6>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d003      	beq.n	80024fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024f4:	e018      	b.n	8002528 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
      break;
 80024fa:	e015      	b.n	8002528 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00e      	beq.n	8002526 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
      break;
 800250c:	e00b      	b.n	8002526 <DMA_CheckFifoParam+0xe6>
      break;
 800250e:	bf00      	nop
 8002510:	e00a      	b.n	8002528 <DMA_CheckFifoParam+0xe8>
      break;
 8002512:	bf00      	nop
 8002514:	e008      	b.n	8002528 <DMA_CheckFifoParam+0xe8>
      break;
 8002516:	bf00      	nop
 8002518:	e006      	b.n	8002528 <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
 800251c:	e004      	b.n	8002528 <DMA_CheckFifoParam+0xe8>
      break;
 800251e:	bf00      	nop
 8002520:	e002      	b.n	8002528 <DMA_CheckFifoParam+0xe8>
      break;   
 8002522:	bf00      	nop
 8002524:	e000      	b.n	8002528 <DMA_CheckFifoParam+0xe8>
      break;
 8002526:	bf00      	nop
    }
  } 
  
  return status; 
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e16b      	b.n	800282c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 815a 	bne.w	8002826 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d005      	beq.n	800258a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	2b02      	cmp	r3, #2
 8002588:	d130      	bne.n	80025ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d017      	beq.n	8002628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80b4 	beq.w	8002826 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b60      	ldr	r3, [pc, #384]	; (8002844 <HAL_GPIO_Init+0x30c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a5f      	ldr	r2, [pc, #380]	; (8002844 <HAL_GPIO_Init+0x30c>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b5d      	ldr	r3, [pc, #372]	; (8002844 <HAL_GPIO_Init+0x30c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026da:	4a5b      	ldr	r2, [pc, #364]	; (8002848 <HAL_GPIO_Init+0x310>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_GPIO_Init+0x314>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02b      	beq.n	800275e <HAL_GPIO_Init+0x226>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a51      	ldr	r2, [pc, #324]	; (8002850 <HAL_GPIO_Init+0x318>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d025      	beq.n	800275a <HAL_GPIO_Init+0x222>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_GPIO_Init+0x31c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01f      	beq.n	8002756 <HAL_GPIO_Init+0x21e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4f      	ldr	r2, [pc, #316]	; (8002858 <HAL_GPIO_Init+0x320>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d019      	beq.n	8002752 <HAL_GPIO_Init+0x21a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4e      	ldr	r2, [pc, #312]	; (800285c <HAL_GPIO_Init+0x324>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0x216>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4d      	ldr	r2, [pc, #308]	; (8002860 <HAL_GPIO_Init+0x328>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00d      	beq.n	800274a <HAL_GPIO_Init+0x212>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4c      	ldr	r2, [pc, #304]	; (8002864 <HAL_GPIO_Init+0x32c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x20e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4b      	ldr	r2, [pc, #300]	; (8002868 <HAL_GPIO_Init+0x330>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_GPIO_Init+0x20a>
 800273e:	2307      	movs	r3, #7
 8002740:	e00e      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002742:	2308      	movs	r3, #8
 8002744:	e00c      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002746:	2306      	movs	r3, #6
 8002748:	e00a      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800274a:	2305      	movs	r3, #5
 800274c:	e008      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800274e:	2304      	movs	r3, #4
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002752:	2303      	movs	r3, #3
 8002754:	e004      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002756:	2302      	movs	r3, #2
 8002758:	e002      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800275e:	2300      	movs	r3, #0
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f002 0203 	and.w	r2, r2, #3
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	4093      	lsls	r3, r2
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002770:	4935      	ldr	r1, [pc, #212]	; (8002848 <HAL_GPIO_Init+0x310>)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_GPIO_Init+0x334>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a2:	4a32      	ldr	r2, [pc, #200]	; (800286c <HAL_GPIO_Init+0x334>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027a8:	4b30      	ldr	r3, [pc, #192]	; (800286c <HAL_GPIO_Init+0x334>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <HAL_GPIO_Init+0x334>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <HAL_GPIO_Init+0x334>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <HAL_GPIO_Init+0x334>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_GPIO_Init+0x334>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002820:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_GPIO_Init+0x334>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3301      	adds	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b0f      	cmp	r3, #15
 8002830:	f67f ae90 	bls.w	8002554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40013800 	.word	0x40013800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40021000 	.word	0x40021000
 8002860:	40021400 	.word	0x40021400
 8002864:	40021800 	.word	0x40021800
 8002868:	40021c00 	.word	0x40021c00
 800286c:	40013c00 	.word	0x40013c00

08002870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e001      	b.n	8002892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028bc:	e003      	b.n	80028c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	041a      	lsls	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	619a      	str	r2, [r3, #24]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e264      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d075      	beq.n	80029de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028f2:	4ba3      	ldr	r3, [pc, #652]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d00c      	beq.n	8002918 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fe:	4ba0      	ldr	r3, [pc, #640]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002906:	2b08      	cmp	r3, #8
 8002908:	d112      	bne.n	8002930 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290a:	4b9d      	ldr	r3, [pc, #628]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002916:	d10b      	bne.n	8002930 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	4b99      	ldr	r3, [pc, #612]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d05b      	beq.n	80029dc <HAL_RCC_OscConfig+0x108>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d157      	bne.n	80029dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e23f      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002938:	d106      	bne.n	8002948 <HAL_RCC_OscConfig+0x74>
 800293a:	4b91      	ldr	r3, [pc, #580]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a90      	ldr	r2, [pc, #576]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e01d      	b.n	8002984 <HAL_RCC_OscConfig+0xb0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x98>
 8002952:	4b8b      	ldr	r3, [pc, #556]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a8a      	ldr	r2, [pc, #552]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b88      	ldr	r3, [pc, #544]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a87      	ldr	r2, [pc, #540]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0xb0>
 800296c:	4b84      	ldr	r3, [pc, #528]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a83      	ldr	r2, [pc, #524]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b81      	ldr	r3, [pc, #516]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a80      	ldr	r2, [pc, #512]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 800297e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fd1a 	bl	80013c4 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002994:	f7fe fd16 	bl	80013c4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e204      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0xc0>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fd06 	bl	80013c4 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe fd02 	bl	80013c4 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1f0      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0xe8>
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d063      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ea:	4b65      	ldr	r3, [pc, #404]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b62      	ldr	r3, [pc, #392]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a02:	4b5f      	ldr	r3, [pc, #380]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x152>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1c4      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b56      	ldr	r3, [pc, #344]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4952      	ldr	r1, [pc, #328]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	e03a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_RCC_OscConfig+0x2b0>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fcbb 	bl	80013c4 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a52:	f7fe fcb7 	bl	80013c4 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1a5      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4940      	ldr	r1, [pc, #256]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <HAL_RCC_OscConfig+0x2b0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fc9a 	bl	80013c4 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe fc96 	bl	80013c4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e184      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d030      	beq.n	8002b20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <HAL_RCC_OscConfig+0x2b4>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe fc7a 	bl	80013c4 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fc76 	bl	80013c4 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e164      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x200>
 8002af2:	e015      	b.n	8002b20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af4:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_OscConfig+0x2b4>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7fe fc63 	bl	80013c4 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b02:	f7fe fc5f 	bl	80013c4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e14d      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80a0 	beq.w	8002c6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_OscConfig+0x2b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d121      	bne.n	8002bae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_RCC_OscConfig+0x2b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <HAL_RCC_OscConfig+0x2b8>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7fe fc25 	bl	80013c4 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e011      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2ce>
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	42470000 	.word	0x42470000
 8002b88:	42470e80 	.word	0x42470e80
 8002b8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b90:	f7fe fc18 	bl	80013c4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e106      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	4b85      	ldr	r3, [pc, #532]	; (8002db8 <HAL_RCC_OscConfig+0x4e4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x2f0>
 8002bb6:	4b81      	ldr	r3, [pc, #516]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a80      	ldr	r2, [pc, #512]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	e01c      	b.n	8002bfe <HAL_RCC_OscConfig+0x32a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d10c      	bne.n	8002be6 <HAL_RCC_OscConfig+0x312>
 8002bcc:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	4a7a      	ldr	r2, [pc, #488]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd8:	4b78      	ldr	r3, [pc, #480]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	4a77      	ldr	r2, [pc, #476]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70
 8002be4:	e00b      	b.n	8002bfe <HAL_RCC_OscConfig+0x32a>
 8002be6:	4b75      	ldr	r3, [pc, #468]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	4a74      	ldr	r2, [pc, #464]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf2:	4b72      	ldr	r3, [pc, #456]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a71      	ldr	r2, [pc, #452]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d015      	beq.n	8002c32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c06:	f7fe fbdd 	bl	80013c4 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fbd9 	bl	80013c4 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e0c5      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ee      	beq.n	8002c0e <HAL_RCC_OscConfig+0x33a>
 8002c30:	e014      	b.n	8002c5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7fe fbc7 	bl	80013c4 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7fe fbc3 	bl	80013c4 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e0af      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c50:	4b5a      	ldr	r3, [pc, #360]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ee      	bne.n	8002c3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d105      	bne.n	8002c6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c62:	4b56      	ldr	r3, [pc, #344]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a55      	ldr	r2, [pc, #340]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 809b 	beq.w	8002dae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c78:	4b50      	ldr	r3, [pc, #320]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d05c      	beq.n	8002d3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d141      	bne.n	8002d10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8c:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <HAL_RCC_OscConfig+0x4ec>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fe fb97 	bl	80013c4 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7fe fb93 	bl	80013c4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e081      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cac:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	019b      	lsls	r3, r3, #6
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	061b      	lsls	r3, r3, #24
 8002cdc:	4937      	ldr	r1, [pc, #220]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_RCC_OscConfig+0x4ec>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fb6c 	bl	80013c4 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe fb68 	bl	80013c4 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e056      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x41c>
 8002d0e:	e04e      	b.n	8002dae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_OscConfig+0x4ec>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe fb55 	bl	80013c4 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe fb51 	bl	80013c4 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e03f      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f0      	bne.n	8002d1e <HAL_RCC_OscConfig+0x44a>
 8002d3c:	e037      	b.n	8002dae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e032      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_RCC_OscConfig+0x4e8>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d028      	beq.n	8002daa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d121      	bne.n	8002daa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d11a      	bne.n	8002daa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d111      	bne.n	8002daa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	3b01      	subs	r3, #1
 8002d94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	42470060 	.word	0x42470060

08002dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0cc      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b68      	ldr	r3, [pc, #416]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d90c      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b65      	ldr	r3, [pc, #404]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0b8      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a58      	ldr	r2, [pc, #352]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e30:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3c:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	494d      	ldr	r1, [pc, #308]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d044      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d119      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e07f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e06f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e067      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4934      	ldr	r1, [pc, #208]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fa86 	bl	80013c4 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7fe fa82 	bl	80013c4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e04f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d20c      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e032      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4916      	ldr	r1, [pc, #88]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	490e      	ldr	r1, [pc, #56]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f4a:	f000 f821 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	490a      	ldr	r1, [pc, #40]	; (8002f84 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	5ccb      	ldrb	r3, [r1, r3]
 8002f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe f9e6 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00
 8002f80:	40023800 	.word	0x40023800
 8002f84:	08005368 	.word	0x08005368
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	20000004 	.word	0x20000004

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa8:	4b67      	ldr	r3, [pc, #412]	; (8003148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	f200 80bd 	bhi.w	8003134 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x3a>
 8002fc2:	e0b7      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fc6:	60bb      	str	r3, [r7, #8]
       break;
 8002fc8:	e0b7      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fca:	4b60      	ldr	r3, [pc, #384]	; (800314c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fcc:	60bb      	str	r3, [r7, #8]
      break;
 8002fce:	e0b4      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd0:	4b5d      	ldr	r3, [pc, #372]	; (8003148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fda:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d04d      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe6:	4b58      	ldr	r3, [pc, #352]	; (8003148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	461a      	mov	r2, r3
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	ea02 0800 	and.w	r8, r2, r0
 8002ffe:	ea03 0901 	and.w	r9, r3, r1
 8003002:	4640      	mov	r0, r8
 8003004:	4649      	mov	r1, r9
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	014b      	lsls	r3, r1, #5
 8003010:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003014:	0142      	lsls	r2, r0, #5
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	ebb0 0008 	subs.w	r0, r0, r8
 800301e:	eb61 0109 	sbc.w	r1, r1, r9
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	018b      	lsls	r3, r1, #6
 800302c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003030:	0182      	lsls	r2, r0, #6
 8003032:	1a12      	subs	r2, r2, r0
 8003034:	eb63 0301 	sbc.w	r3, r3, r1
 8003038:	f04f 0000 	mov.w	r0, #0
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	00d9      	lsls	r1, r3, #3
 8003042:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003046:	00d0      	lsls	r0, r2, #3
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	eb12 0208 	adds.w	r2, r2, r8
 8003050:	eb43 0309 	adc.w	r3, r3, r9
 8003054:	f04f 0000 	mov.w	r0, #0
 8003058:	f04f 0100 	mov.w	r1, #0
 800305c:	0299      	lsls	r1, r3, #10
 800305e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003062:	0290      	lsls	r0, r2, #10
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	f7fd f8fc 	bl	8000270 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	e04a      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003082:	4b31      	ldr	r3, [pc, #196]	; (8003148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	461a      	mov	r2, r3
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003092:	f04f 0100 	mov.w	r1, #0
 8003096:	ea02 0400 	and.w	r4, r2, r0
 800309a:	ea03 0501 	and.w	r5, r3, r1
 800309e:	4620      	mov	r0, r4
 80030a0:	4629      	mov	r1, r5
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	014b      	lsls	r3, r1, #5
 80030ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030b0:	0142      	lsls	r2, r0, #5
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	1b00      	subs	r0, r0, r4
 80030b8:	eb61 0105 	sbc.w	r1, r1, r5
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	018b      	lsls	r3, r1, #6
 80030c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030ca:	0182      	lsls	r2, r0, #6
 80030cc:	1a12      	subs	r2, r2, r0
 80030ce:	eb63 0301 	sbc.w	r3, r3, r1
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f04f 0100 	mov.w	r1, #0
 80030da:	00d9      	lsls	r1, r3, #3
 80030dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e0:	00d0      	lsls	r0, r2, #3
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	1912      	adds	r2, r2, r4
 80030e8:	eb45 0303 	adc.w	r3, r5, r3
 80030ec:	f04f 0000 	mov.w	r0, #0
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	0299      	lsls	r1, r3, #10
 80030f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030fa:	0290      	lsls	r0, r2, #10
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	461a      	mov	r2, r3
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f7fd f8b0 	bl	8000270 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4613      	mov	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	3301      	adds	r3, #1
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	60bb      	str	r3, [r7, #8]
      break;
 8003132:	e002      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003136:	60bb      	str	r3, [r7, #8]
      break;
 8003138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313a:	68bb      	ldr	r3, [r7, #8]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	00f42400 	.word	0x00f42400

08003150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_RCC_GetHCLKFreq+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000000 	.word	0x20000000

08003168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800316c:	f7ff fff0 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	0a9b      	lsrs	r3, r3, #10
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4903      	ldr	r1, [pc, #12]	; (800318c <HAL_RCC_GetPCLK1Freq+0x24>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	08005378 	.word	0x08005378

08003190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003194:	f7ff ffdc 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0b5b      	lsrs	r3, r3, #13
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4903      	ldr	r1, [pc, #12]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08005378 	.word	0x08005378

080031b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e041      	b.n	800324e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fe74 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f000 fa78 	bl	80036ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e041      	b.n	80032ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fd fdef 	bl	8000e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f000 fa29 	bl	80036ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b02      	cmp	r3, #2
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0202 	mvn.w	r2, #2
 8003320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f9ba 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f9ac 	bl	800369c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f9bd 	bl	80036c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0204 	mvn.w	r2, #4
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f990 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f982 	bl	800369c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f993 	bl	80036c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0208 	mvn.w	r2, #8
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2204      	movs	r2, #4
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f966 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f958 	bl	800369c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f969 	bl	80036c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b10      	cmp	r3, #16
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b10      	cmp	r3, #16
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0210 	mvn.w	r2, #16
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2208      	movs	r2, #8
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f93c 	bl	80036b0 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f92e 	bl	800369c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f93f 	bl	80036c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10e      	bne.n	8003478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0201 	mvn.w	r2, #1
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f908 	bl	8003688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	2b80      	cmp	r3, #128	; 0x80
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fbfa 	bl	8003c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f904 	bl	80036d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0220 	mvn.w	r2, #32
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fbc4 	bl	8003c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800351e:	2302      	movs	r3, #2
 8003520:	e0ae      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	f200 809f 	bhi.w	8003670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800356d 	.word	0x0800356d
 800353c:	08003671 	.word	0x08003671
 8003540:	08003671 	.word	0x08003671
 8003544:	08003671 	.word	0x08003671
 8003548:	080035ad 	.word	0x080035ad
 800354c:	08003671 	.word	0x08003671
 8003550:	08003671 	.word	0x08003671
 8003554:	08003671 	.word	0x08003671
 8003558:	080035ef 	.word	0x080035ef
 800355c:	08003671 	.word	0x08003671
 8003560:	08003671 	.word	0x08003671
 8003564:	08003671 	.word	0x08003671
 8003568:	0800362f 	.word	0x0800362f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f95a 	bl	800382c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0204 	bic.w	r2, r2, #4
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	619a      	str	r2, [r3, #24]
      break;
 80035aa:	e064      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f9aa 	bl	800390c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	021a      	lsls	r2, r3, #8
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	619a      	str	r2, [r3, #24]
      break;
 80035ec:	e043      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f9ff 	bl	80039f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0208 	orr.w	r2, r2, #8
 8003608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0204 	bic.w	r2, r2, #4
 8003618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	61da      	str	r2, [r3, #28]
      break;
 800362c:	e023      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fa53 	bl	8003ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	61da      	str	r2, [r3, #28]
      break;
 800366e:	e002      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	75fb      	strb	r3, [r7, #23]
      break;
 8003674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a40      	ldr	r2, [pc, #256]	; (8003800 <TIM_Base_SetConfig+0x114>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d00f      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a3d      	ldr	r2, [pc, #244]	; (8003804 <TIM_Base_SetConfig+0x118>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a3c      	ldr	r2, [pc, #240]	; (8003808 <TIM_Base_SetConfig+0x11c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a3b      	ldr	r2, [pc, #236]	; (800380c <TIM_Base_SetConfig+0x120>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3a      	ldr	r2, [pc, #232]	; (8003810 <TIM_Base_SetConfig+0x124>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d108      	bne.n	800373e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2f      	ldr	r2, [pc, #188]	; (8003800 <TIM_Base_SetConfig+0x114>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d02b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d027      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a2c      	ldr	r2, [pc, #176]	; (8003804 <TIM_Base_SetConfig+0x118>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d023      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2b      	ldr	r2, [pc, #172]	; (8003808 <TIM_Base_SetConfig+0x11c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01f      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2a      	ldr	r2, [pc, #168]	; (800380c <TIM_Base_SetConfig+0x120>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a29      	ldr	r2, [pc, #164]	; (8003810 <TIM_Base_SetConfig+0x124>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d017      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a28      	ldr	r2, [pc, #160]	; (8003814 <TIM_Base_SetConfig+0x128>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a27      	ldr	r2, [pc, #156]	; (8003818 <TIM_Base_SetConfig+0x12c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00f      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a26      	ldr	r2, [pc, #152]	; (800381c <TIM_Base_SetConfig+0x130>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a25      	ldr	r2, [pc, #148]	; (8003820 <TIM_Base_SetConfig+0x134>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a24      	ldr	r2, [pc, #144]	; (8003824 <TIM_Base_SetConfig+0x138>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <TIM_Base_SetConfig+0x13c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d108      	bne.n	80037b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <TIM_Base_SetConfig+0x114>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_Base_SetConfig+0xf8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <TIM_Base_SetConfig+0x124>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40010400 	.word	0x40010400
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800
 8003820:	40001800 	.word	0x40001800
 8003824:	40001c00 	.word	0x40001c00
 8003828:	40002000 	.word	0x40002000

0800382c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f023 0201 	bic.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 0302 	bic.w	r3, r3, #2
 8003874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a20      	ldr	r2, [pc, #128]	; (8003904 <TIM_OC1_SetConfig+0xd8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_OC1_SetConfig+0x64>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <TIM_OC1_SetConfig+0xdc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d10c      	bne.n	80038aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0308 	bic.w	r3, r3, #8
 8003896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 0304 	bic.w	r3, r3, #4
 80038a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a15      	ldr	r2, [pc, #84]	; (8003904 <TIM_OC1_SetConfig+0xd8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_OC1_SetConfig+0x8e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <TIM_OC1_SetConfig+0xdc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d111      	bne.n	80038de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	621a      	str	r2, [r3, #32]
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40010000 	.word	0x40010000
 8003908:	40010400 	.word	0x40010400

0800390c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0210 	bic.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f023 0320 	bic.w	r3, r3, #32
 8003956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <TIM_OC2_SetConfig+0xe4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_OC2_SetConfig+0x68>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <TIM_OC2_SetConfig+0xe8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d10d      	bne.n	8003990 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800397a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <TIM_OC2_SetConfig+0xe4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_OC2_SetConfig+0x94>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <TIM_OC2_SetConfig+0xe8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d113      	bne.n	80039c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40010000 	.word	0x40010000
 80039f4:	40010400 	.word	0x40010400

080039f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <TIM_OC3_SetConfig+0xe0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d003      	beq.n	8003a5e <TIM_OC3_SetConfig+0x66>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a20      	ldr	r2, [pc, #128]	; (8003adc <TIM_OC3_SetConfig+0xe4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d10d      	bne.n	8003a7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <TIM_OC3_SetConfig+0xe0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <TIM_OC3_SetConfig+0x92>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a15      	ldr	r2, [pc, #84]	; (8003adc <TIM_OC3_SetConfig+0xe4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d113      	bne.n	8003ab2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40010400 	.word	0x40010400

08003ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	031b      	lsls	r3, r3, #12
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <TIM_OC4_SetConfig+0xa4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC4_SetConfig+0x68>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <TIM_OC4_SetConfig+0xa8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d109      	bne.n	8003b5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	019b      	lsls	r3, r3, #6
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40010400 	.word	0x40010400

08003b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e05a      	b.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d01d      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1a      	ldr	r2, [pc, #104]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10c      	bne.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40000800 	.word	0x40000800
 8003c74:	40000c00 	.word	0x40000c00
 8003c78:	40010400 	.word	0x40010400
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40001800 	.word	0x40001800

08003c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e03f      	b.n	8003d3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd f9a0 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	; 0x24
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f929 	bl	8003f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b08a      	sub	sp, #40	; 0x28
 8003d4a:	af02      	add	r7, sp, #8
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	4613      	mov	r3, r2
 8003d54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d17c      	bne.n	8003e60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_UART_Transmit+0x2c>
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e075      	b.n	8003e62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Transmit+0x3e>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e06e      	b.n	8003e62 <HAL_UART_Transmit+0x11c>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2221      	movs	r2, #33	; 0x21
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9a:	f7fd fb13 	bl	80013c4 <HAL_GetTick>
 8003d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	88fa      	ldrh	r2, [r7, #6]
 8003da4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	88fa      	ldrh	r2, [r7, #6]
 8003daa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db4:	d108      	bne.n	8003dc8 <HAL_UART_Transmit+0x82>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d104      	bne.n	8003dc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e003      	b.n	8003dd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003dd8:	e02a      	b.n	8003e30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	2180      	movs	r1, #128	; 0x80
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f840 	bl	8003e6a <UART_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e036      	b.n	8003e62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10b      	bne.n	8003e12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	e007      	b.n	8003e22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1cf      	bne.n	8003dda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2200      	movs	r2, #0
 8003e42:	2140      	movs	r1, #64	; 0x40
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f810 	bl	8003e6a <UART_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e006      	b.n	8003e62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b090      	sub	sp, #64	; 0x40
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7a:	e050      	b.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d04c      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e8a:	f7fd fa9b 	bl	80013c4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d241      	bcs.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eba:	637a      	str	r2, [r7, #52]	; 0x34
 8003ebc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e5      	bne.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3314      	adds	r3, #20
 8003ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eee:	623a      	str	r2, [r7, #32]
 8003ef0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	69f9      	ldr	r1, [r7, #28]
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e5      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e00f      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	bf0c      	ite	eq
 8003f2e:	2301      	moveq	r3, #1
 8003f30:	2300      	movne	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d09f      	beq.n	8003e7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3740      	adds	r7, #64	; 0x40
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	b09f      	sub	sp, #124	; 0x7c
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5e:	68d9      	ldr	r1, [r3, #12]
 8003f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	ea40 0301 	orr.w	r3, r0, r1
 8003f68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f8c:	f021 010c 	bic.w	r1, r1, #12
 8003f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f96:	430b      	orrs	r3, r1
 8003f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa6:	6999      	ldr	r1, [r3, #24]
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	ea40 0301 	orr.w	r3, r0, r1
 8003fb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4bc5      	ldr	r3, [pc, #788]	; (80042cc <UART_SetConfig+0x384>)
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d004      	beq.n	8003fc6 <UART_SetConfig+0x7e>
 8003fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4bc3      	ldr	r3, [pc, #780]	; (80042d0 <UART_SetConfig+0x388>)
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d103      	bne.n	8003fce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fc6:	f7ff f8e3 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 8003fca:	6778      	str	r0, [r7, #116]	; 0x74
 8003fcc:	e002      	b.n	8003fd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fce:	f7ff f8cb 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8003fd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fdc:	f040 80b6 	bne.w	800414c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe2:	461c      	mov	r4, r3
 8003fe4:	f04f 0500 	mov.w	r5, #0
 8003fe8:	4622      	mov	r2, r4
 8003fea:	462b      	mov	r3, r5
 8003fec:	1891      	adds	r1, r2, r2
 8003fee:	6439      	str	r1, [r7, #64]	; 0x40
 8003ff0:	415b      	adcs	r3, r3
 8003ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ff8:	1912      	adds	r2, r2, r4
 8003ffa:	eb45 0303 	adc.w	r3, r5, r3
 8003ffe:	f04f 0000 	mov.w	r0, #0
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	00d9      	lsls	r1, r3, #3
 8004008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800400c:	00d0      	lsls	r0, r2, #3
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	1911      	adds	r1, r2, r4
 8004014:	6639      	str	r1, [r7, #96]	; 0x60
 8004016:	416b      	adcs	r3, r5
 8004018:	667b      	str	r3, [r7, #100]	; 0x64
 800401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	461a      	mov	r2, r3
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	1891      	adds	r1, r2, r2
 8004026:	63b9      	str	r1, [r7, #56]	; 0x38
 8004028:	415b      	adcs	r3, r3
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004030:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004034:	f7fc f91c 	bl	8000270 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4ba5      	ldr	r3, [pc, #660]	; (80042d4 <UART_SetConfig+0x38c>)
 800403e:	fba3 2302 	umull	r2, r3, r3, r2
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	011e      	lsls	r6, r3, #4
 8004046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004048:	461c      	mov	r4, r3
 800404a:	f04f 0500 	mov.w	r5, #0
 800404e:	4622      	mov	r2, r4
 8004050:	462b      	mov	r3, r5
 8004052:	1891      	adds	r1, r2, r2
 8004054:	6339      	str	r1, [r7, #48]	; 0x30
 8004056:	415b      	adcs	r3, r3
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
 800405a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800405e:	1912      	adds	r2, r2, r4
 8004060:	eb45 0303 	adc.w	r3, r5, r3
 8004064:	f04f 0000 	mov.w	r0, #0
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	00d9      	lsls	r1, r3, #3
 800406e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004072:	00d0      	lsls	r0, r2, #3
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	1911      	adds	r1, r2, r4
 800407a:	65b9      	str	r1, [r7, #88]	; 0x58
 800407c:	416b      	adcs	r3, r5
 800407e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	461a      	mov	r2, r3
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	1891      	adds	r1, r2, r2
 800408c:	62b9      	str	r1, [r7, #40]	; 0x28
 800408e:	415b      	adcs	r3, r3
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004096:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800409a:	f7fc f8e9 	bl	8000270 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4b8c      	ldr	r3, [pc, #560]	; (80042d4 <UART_SetConfig+0x38c>)
 80040a4:	fba3 1302 	umull	r1, r3, r3, r2
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	2164      	movs	r1, #100	; 0x64
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	3332      	adds	r3, #50	; 0x32
 80040b6:	4a87      	ldr	r2, [pc, #540]	; (80042d4 <UART_SetConfig+0x38c>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040c4:	441e      	add	r6, r3
 80040c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c8:	4618      	mov	r0, r3
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	1894      	adds	r4, r2, r2
 80040d4:	623c      	str	r4, [r7, #32]
 80040d6:	415b      	adcs	r3, r3
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
 80040da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040de:	1812      	adds	r2, r2, r0
 80040e0:	eb41 0303 	adc.w	r3, r1, r3
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	f04f 0500 	mov.w	r5, #0
 80040ec:	00dd      	lsls	r5, r3, #3
 80040ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040f2:	00d4      	lsls	r4, r2, #3
 80040f4:	4622      	mov	r2, r4
 80040f6:	462b      	mov	r3, r5
 80040f8:	1814      	adds	r4, r2, r0
 80040fa:	653c      	str	r4, [r7, #80]	; 0x50
 80040fc:	414b      	adcs	r3, r1
 80040fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	461a      	mov	r2, r3
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	1891      	adds	r1, r2, r2
 800410c:	61b9      	str	r1, [r7, #24]
 800410e:	415b      	adcs	r3, r3
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004116:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800411a:	f7fc f8a9 	bl	8000270 <__aeabi_uldivmod>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4b6c      	ldr	r3, [pc, #432]	; (80042d4 <UART_SetConfig+0x38c>)
 8004124:	fba3 1302 	umull	r1, r3, r3, r2
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	2164      	movs	r1, #100	; 0x64
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	3332      	adds	r3, #50	; 0x32
 8004136:	4a67      	ldr	r2, [pc, #412]	; (80042d4 <UART_SetConfig+0x38c>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	f003 0207 	and.w	r2, r3, #7
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4432      	add	r2, r6
 8004148:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800414a:	e0b9      	b.n	80042c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800414c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414e:	461c      	mov	r4, r3
 8004150:	f04f 0500 	mov.w	r5, #0
 8004154:	4622      	mov	r2, r4
 8004156:	462b      	mov	r3, r5
 8004158:	1891      	adds	r1, r2, r2
 800415a:	6139      	str	r1, [r7, #16]
 800415c:	415b      	adcs	r3, r3
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004164:	1912      	adds	r2, r2, r4
 8004166:	eb45 0303 	adc.w	r3, r5, r3
 800416a:	f04f 0000 	mov.w	r0, #0
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	00d9      	lsls	r1, r3, #3
 8004174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004178:	00d0      	lsls	r0, r2, #3
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	eb12 0804 	adds.w	r8, r2, r4
 8004182:	eb43 0905 	adc.w	r9, r3, r5
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4618      	mov	r0, r3
 800418c:	f04f 0100 	mov.w	r1, #0
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	008b      	lsls	r3, r1, #2
 800419a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800419e:	0082      	lsls	r2, r0, #2
 80041a0:	4640      	mov	r0, r8
 80041a2:	4649      	mov	r1, r9
 80041a4:	f7fc f864 	bl	8000270 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4b49      	ldr	r3, [pc, #292]	; (80042d4 <UART_SetConfig+0x38c>)
 80041ae:	fba3 2302 	umull	r2, r3, r3, r2
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	011e      	lsls	r6, r3, #4
 80041b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b8:	4618      	mov	r0, r3
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	1894      	adds	r4, r2, r2
 80041c4:	60bc      	str	r4, [r7, #8]
 80041c6:	415b      	adcs	r3, r3
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ce:	1812      	adds	r2, r2, r0
 80041d0:	eb41 0303 	adc.w	r3, r1, r3
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	f04f 0500 	mov.w	r5, #0
 80041dc:	00dd      	lsls	r5, r3, #3
 80041de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041e2:	00d4      	lsls	r4, r2, #3
 80041e4:	4622      	mov	r2, r4
 80041e6:	462b      	mov	r3, r5
 80041e8:	1814      	adds	r4, r2, r0
 80041ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80041ec:	414b      	adcs	r3, r1
 80041ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	008b      	lsls	r3, r1, #2
 8004204:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004208:	0082      	lsls	r2, r0, #2
 800420a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800420e:	f7fc f82f 	bl	8000270 <__aeabi_uldivmod>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <UART_SetConfig+0x38c>)
 8004218:	fba3 1302 	umull	r1, r3, r3, r2
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	2164      	movs	r1, #100	; 0x64
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	3332      	adds	r3, #50	; 0x32
 800422a:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <UART_SetConfig+0x38c>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004236:	441e      	add	r6, r3
 8004238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800423a:	4618      	mov	r0, r3
 800423c:	f04f 0100 	mov.w	r1, #0
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	1894      	adds	r4, r2, r2
 8004246:	603c      	str	r4, [r7, #0]
 8004248:	415b      	adcs	r3, r3
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004250:	1812      	adds	r2, r2, r0
 8004252:	eb41 0303 	adc.w	r3, r1, r3
 8004256:	f04f 0400 	mov.w	r4, #0
 800425a:	f04f 0500 	mov.w	r5, #0
 800425e:	00dd      	lsls	r5, r3, #3
 8004260:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004264:	00d4      	lsls	r4, r2, #3
 8004266:	4622      	mov	r2, r4
 8004268:	462b      	mov	r3, r5
 800426a:	eb12 0a00 	adds.w	sl, r2, r0
 800426e:	eb43 0b01 	adc.w	fp, r3, r1
 8004272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4618      	mov	r0, r3
 8004278:	f04f 0100 	mov.w	r1, #0
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	008b      	lsls	r3, r1, #2
 8004286:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800428a:	0082      	lsls	r2, r0, #2
 800428c:	4650      	mov	r0, sl
 800428e:	4659      	mov	r1, fp
 8004290:	f7fb ffee 	bl	8000270 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <UART_SetConfig+0x38c>)
 800429a:	fba3 1302 	umull	r1, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2164      	movs	r1, #100	; 0x64
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	3332      	adds	r3, #50	; 0x32
 80042ac:	4a09      	ldr	r2, [pc, #36]	; (80042d4 <UART_SetConfig+0x38c>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	f003 020f 	and.w	r2, r3, #15
 80042b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4432      	add	r2, r6
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	377c      	adds	r7, #124	; 0x7c
 80042c4:	46bd      	mov	sp, r7
 80042c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ca:	bf00      	nop
 80042cc:	40011000 	.word	0x40011000
 80042d0:	40011400 	.word	0x40011400
 80042d4:	51eb851f 	.word	0x51eb851f

080042d8 <__errno>:
 80042d8:	4b01      	ldr	r3, [pc, #4]	; (80042e0 <__errno+0x8>)
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	2000000c 	.word	0x2000000c

080042e4 <__libc_init_array>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	4d0d      	ldr	r5, [pc, #52]	; (800431c <__libc_init_array+0x38>)
 80042e8:	4c0d      	ldr	r4, [pc, #52]	; (8004320 <__libc_init_array+0x3c>)
 80042ea:	1b64      	subs	r4, r4, r5
 80042ec:	10a4      	asrs	r4, r4, #2
 80042ee:	2600      	movs	r6, #0
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	d109      	bne.n	8004308 <__libc_init_array+0x24>
 80042f4:	4d0b      	ldr	r5, [pc, #44]	; (8004324 <__libc_init_array+0x40>)
 80042f6:	4c0c      	ldr	r4, [pc, #48]	; (8004328 <__libc_init_array+0x44>)
 80042f8:	f000 ffec 	bl	80052d4 <_init>
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	2600      	movs	r6, #0
 8004302:	42a6      	cmp	r6, r4
 8004304:	d105      	bne.n	8004312 <__libc_init_array+0x2e>
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	f855 3b04 	ldr.w	r3, [r5], #4
 800430c:	4798      	blx	r3
 800430e:	3601      	adds	r6, #1
 8004310:	e7ee      	b.n	80042f0 <__libc_init_array+0xc>
 8004312:	f855 3b04 	ldr.w	r3, [r5], #4
 8004316:	4798      	blx	r3
 8004318:	3601      	adds	r6, #1
 800431a:	e7f2      	b.n	8004302 <__libc_init_array+0x1e>
 800431c:	08005428 	.word	0x08005428
 8004320:	08005428 	.word	0x08005428
 8004324:	08005428 	.word	0x08005428
 8004328:	0800542c 	.word	0x0800542c

0800432c <memset>:
 800432c:	4402      	add	r2, r0
 800432e:	4603      	mov	r3, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d100      	bne.n	8004336 <memset+0xa>
 8004334:	4770      	bx	lr
 8004336:	f803 1b01 	strb.w	r1, [r3], #1
 800433a:	e7f9      	b.n	8004330 <memset+0x4>

0800433c <iprintf>:
 800433c:	b40f      	push	{r0, r1, r2, r3}
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <iprintf+0x2c>)
 8004340:	b513      	push	{r0, r1, r4, lr}
 8004342:	681c      	ldr	r4, [r3, #0]
 8004344:	b124      	cbz	r4, 8004350 <iprintf+0x14>
 8004346:	69a3      	ldr	r3, [r4, #24]
 8004348:	b913      	cbnz	r3, 8004350 <iprintf+0x14>
 800434a:	4620      	mov	r0, r4
 800434c:	f000 fa5e 	bl	800480c <__sinit>
 8004350:	ab05      	add	r3, sp, #20
 8004352:	9a04      	ldr	r2, [sp, #16]
 8004354:	68a1      	ldr	r1, [r4, #8]
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	4620      	mov	r0, r4
 800435a:	f000 fc2f 	bl	8004bbc <_vfiprintf_r>
 800435e:	b002      	add	sp, #8
 8004360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004364:	b004      	add	sp, #16
 8004366:	4770      	bx	lr
 8004368:	2000000c 	.word	0x2000000c

0800436c <_puts_r>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	460e      	mov	r6, r1
 8004370:	4605      	mov	r5, r0
 8004372:	b118      	cbz	r0, 800437c <_puts_r+0x10>
 8004374:	6983      	ldr	r3, [r0, #24]
 8004376:	b90b      	cbnz	r3, 800437c <_puts_r+0x10>
 8004378:	f000 fa48 	bl	800480c <__sinit>
 800437c:	69ab      	ldr	r3, [r5, #24]
 800437e:	68ac      	ldr	r4, [r5, #8]
 8004380:	b913      	cbnz	r3, 8004388 <_puts_r+0x1c>
 8004382:	4628      	mov	r0, r5
 8004384:	f000 fa42 	bl	800480c <__sinit>
 8004388:	4b2c      	ldr	r3, [pc, #176]	; (800443c <_puts_r+0xd0>)
 800438a:	429c      	cmp	r4, r3
 800438c:	d120      	bne.n	80043d0 <_puts_r+0x64>
 800438e:	686c      	ldr	r4, [r5, #4]
 8004390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004392:	07db      	lsls	r3, r3, #31
 8004394:	d405      	bmi.n	80043a2 <_puts_r+0x36>
 8004396:	89a3      	ldrh	r3, [r4, #12]
 8004398:	0598      	lsls	r0, r3, #22
 800439a:	d402      	bmi.n	80043a2 <_puts_r+0x36>
 800439c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800439e:	f000 fad3 	bl	8004948 <__retarget_lock_acquire_recursive>
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	0719      	lsls	r1, r3, #28
 80043a6:	d51d      	bpl.n	80043e4 <_puts_r+0x78>
 80043a8:	6923      	ldr	r3, [r4, #16]
 80043aa:	b1db      	cbz	r3, 80043e4 <_puts_r+0x78>
 80043ac:	3e01      	subs	r6, #1
 80043ae:	68a3      	ldr	r3, [r4, #8]
 80043b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043b4:	3b01      	subs	r3, #1
 80043b6:	60a3      	str	r3, [r4, #8]
 80043b8:	bb39      	cbnz	r1, 800440a <_puts_r+0x9e>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	da38      	bge.n	8004430 <_puts_r+0xc4>
 80043be:	4622      	mov	r2, r4
 80043c0:	210a      	movs	r1, #10
 80043c2:	4628      	mov	r0, r5
 80043c4:	f000 f848 	bl	8004458 <__swbuf_r>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d011      	beq.n	80043f0 <_puts_r+0x84>
 80043cc:	250a      	movs	r5, #10
 80043ce:	e011      	b.n	80043f4 <_puts_r+0x88>
 80043d0:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <_puts_r+0xd4>)
 80043d2:	429c      	cmp	r4, r3
 80043d4:	d101      	bne.n	80043da <_puts_r+0x6e>
 80043d6:	68ac      	ldr	r4, [r5, #8]
 80043d8:	e7da      	b.n	8004390 <_puts_r+0x24>
 80043da:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <_puts_r+0xd8>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	bf08      	it	eq
 80043e0:	68ec      	ldreq	r4, [r5, #12]
 80043e2:	e7d5      	b.n	8004390 <_puts_r+0x24>
 80043e4:	4621      	mov	r1, r4
 80043e6:	4628      	mov	r0, r5
 80043e8:	f000 f888 	bl	80044fc <__swsetup_r>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d0dd      	beq.n	80043ac <_puts_r+0x40>
 80043f0:	f04f 35ff 	mov.w	r5, #4294967295
 80043f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043f6:	07da      	lsls	r2, r3, #31
 80043f8:	d405      	bmi.n	8004406 <_puts_r+0x9a>
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	059b      	lsls	r3, r3, #22
 80043fe:	d402      	bmi.n	8004406 <_puts_r+0x9a>
 8004400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004402:	f000 faa2 	bl	800494a <__retarget_lock_release_recursive>
 8004406:	4628      	mov	r0, r5
 8004408:	bd70      	pop	{r4, r5, r6, pc}
 800440a:	2b00      	cmp	r3, #0
 800440c:	da04      	bge.n	8004418 <_puts_r+0xac>
 800440e:	69a2      	ldr	r2, [r4, #24]
 8004410:	429a      	cmp	r2, r3
 8004412:	dc06      	bgt.n	8004422 <_puts_r+0xb6>
 8004414:	290a      	cmp	r1, #10
 8004416:	d004      	beq.n	8004422 <_puts_r+0xb6>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	6022      	str	r2, [r4, #0]
 800441e:	7019      	strb	r1, [r3, #0]
 8004420:	e7c5      	b.n	80043ae <_puts_r+0x42>
 8004422:	4622      	mov	r2, r4
 8004424:	4628      	mov	r0, r5
 8004426:	f000 f817 	bl	8004458 <__swbuf_r>
 800442a:	3001      	adds	r0, #1
 800442c:	d1bf      	bne.n	80043ae <_puts_r+0x42>
 800442e:	e7df      	b.n	80043f0 <_puts_r+0x84>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	250a      	movs	r5, #10
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	6022      	str	r2, [r4, #0]
 8004438:	701d      	strb	r5, [r3, #0]
 800443a:	e7db      	b.n	80043f4 <_puts_r+0x88>
 800443c:	080053ac 	.word	0x080053ac
 8004440:	080053cc 	.word	0x080053cc
 8004444:	0800538c 	.word	0x0800538c

08004448 <puts>:
 8004448:	4b02      	ldr	r3, [pc, #8]	; (8004454 <puts+0xc>)
 800444a:	4601      	mov	r1, r0
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	f7ff bf8d 	b.w	800436c <_puts_r>
 8004452:	bf00      	nop
 8004454:	2000000c 	.word	0x2000000c

08004458 <__swbuf_r>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	460e      	mov	r6, r1
 800445c:	4614      	mov	r4, r2
 800445e:	4605      	mov	r5, r0
 8004460:	b118      	cbz	r0, 800446a <__swbuf_r+0x12>
 8004462:	6983      	ldr	r3, [r0, #24]
 8004464:	b90b      	cbnz	r3, 800446a <__swbuf_r+0x12>
 8004466:	f000 f9d1 	bl	800480c <__sinit>
 800446a:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <__swbuf_r+0x98>)
 800446c:	429c      	cmp	r4, r3
 800446e:	d12b      	bne.n	80044c8 <__swbuf_r+0x70>
 8004470:	686c      	ldr	r4, [r5, #4]
 8004472:	69a3      	ldr	r3, [r4, #24]
 8004474:	60a3      	str	r3, [r4, #8]
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	071a      	lsls	r2, r3, #28
 800447a:	d52f      	bpl.n	80044dc <__swbuf_r+0x84>
 800447c:	6923      	ldr	r3, [r4, #16]
 800447e:	b36b      	cbz	r3, 80044dc <__swbuf_r+0x84>
 8004480:	6923      	ldr	r3, [r4, #16]
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	1ac0      	subs	r0, r0, r3
 8004486:	6963      	ldr	r3, [r4, #20]
 8004488:	b2f6      	uxtb	r6, r6
 800448a:	4283      	cmp	r3, r0
 800448c:	4637      	mov	r7, r6
 800448e:	dc04      	bgt.n	800449a <__swbuf_r+0x42>
 8004490:	4621      	mov	r1, r4
 8004492:	4628      	mov	r0, r5
 8004494:	f000 f926 	bl	80046e4 <_fflush_r>
 8004498:	bb30      	cbnz	r0, 80044e8 <__swbuf_r+0x90>
 800449a:	68a3      	ldr	r3, [r4, #8]
 800449c:	3b01      	subs	r3, #1
 800449e:	60a3      	str	r3, [r4, #8]
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	6022      	str	r2, [r4, #0]
 80044a6:	701e      	strb	r6, [r3, #0]
 80044a8:	6963      	ldr	r3, [r4, #20]
 80044aa:	3001      	adds	r0, #1
 80044ac:	4283      	cmp	r3, r0
 80044ae:	d004      	beq.n	80044ba <__swbuf_r+0x62>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	07db      	lsls	r3, r3, #31
 80044b4:	d506      	bpl.n	80044c4 <__swbuf_r+0x6c>
 80044b6:	2e0a      	cmp	r6, #10
 80044b8:	d104      	bne.n	80044c4 <__swbuf_r+0x6c>
 80044ba:	4621      	mov	r1, r4
 80044bc:	4628      	mov	r0, r5
 80044be:	f000 f911 	bl	80046e4 <_fflush_r>
 80044c2:	b988      	cbnz	r0, 80044e8 <__swbuf_r+0x90>
 80044c4:	4638      	mov	r0, r7
 80044c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <__swbuf_r+0x9c>)
 80044ca:	429c      	cmp	r4, r3
 80044cc:	d101      	bne.n	80044d2 <__swbuf_r+0x7a>
 80044ce:	68ac      	ldr	r4, [r5, #8]
 80044d0:	e7cf      	b.n	8004472 <__swbuf_r+0x1a>
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <__swbuf_r+0xa0>)
 80044d4:	429c      	cmp	r4, r3
 80044d6:	bf08      	it	eq
 80044d8:	68ec      	ldreq	r4, [r5, #12]
 80044da:	e7ca      	b.n	8004472 <__swbuf_r+0x1a>
 80044dc:	4621      	mov	r1, r4
 80044de:	4628      	mov	r0, r5
 80044e0:	f000 f80c 	bl	80044fc <__swsetup_r>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	d0cb      	beq.n	8004480 <__swbuf_r+0x28>
 80044e8:	f04f 37ff 	mov.w	r7, #4294967295
 80044ec:	e7ea      	b.n	80044c4 <__swbuf_r+0x6c>
 80044ee:	bf00      	nop
 80044f0:	080053ac 	.word	0x080053ac
 80044f4:	080053cc 	.word	0x080053cc
 80044f8:	0800538c 	.word	0x0800538c

080044fc <__swsetup_r>:
 80044fc:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <__swsetup_r+0xcc>)
 80044fe:	b570      	push	{r4, r5, r6, lr}
 8004500:	681d      	ldr	r5, [r3, #0]
 8004502:	4606      	mov	r6, r0
 8004504:	460c      	mov	r4, r1
 8004506:	b125      	cbz	r5, 8004512 <__swsetup_r+0x16>
 8004508:	69ab      	ldr	r3, [r5, #24]
 800450a:	b913      	cbnz	r3, 8004512 <__swsetup_r+0x16>
 800450c:	4628      	mov	r0, r5
 800450e:	f000 f97d 	bl	800480c <__sinit>
 8004512:	4b2e      	ldr	r3, [pc, #184]	; (80045cc <__swsetup_r+0xd0>)
 8004514:	429c      	cmp	r4, r3
 8004516:	d10f      	bne.n	8004538 <__swsetup_r+0x3c>
 8004518:	686c      	ldr	r4, [r5, #4]
 800451a:	89a3      	ldrh	r3, [r4, #12]
 800451c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004520:	0719      	lsls	r1, r3, #28
 8004522:	d42c      	bmi.n	800457e <__swsetup_r+0x82>
 8004524:	06dd      	lsls	r5, r3, #27
 8004526:	d411      	bmi.n	800454c <__swsetup_r+0x50>
 8004528:	2309      	movs	r3, #9
 800452a:	6033      	str	r3, [r6, #0]
 800452c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004530:	81a3      	strh	r3, [r4, #12]
 8004532:	f04f 30ff 	mov.w	r0, #4294967295
 8004536:	e03e      	b.n	80045b6 <__swsetup_r+0xba>
 8004538:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <__swsetup_r+0xd4>)
 800453a:	429c      	cmp	r4, r3
 800453c:	d101      	bne.n	8004542 <__swsetup_r+0x46>
 800453e:	68ac      	ldr	r4, [r5, #8]
 8004540:	e7eb      	b.n	800451a <__swsetup_r+0x1e>
 8004542:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <__swsetup_r+0xd8>)
 8004544:	429c      	cmp	r4, r3
 8004546:	bf08      	it	eq
 8004548:	68ec      	ldreq	r4, [r5, #12]
 800454a:	e7e6      	b.n	800451a <__swsetup_r+0x1e>
 800454c:	0758      	lsls	r0, r3, #29
 800454e:	d512      	bpl.n	8004576 <__swsetup_r+0x7a>
 8004550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004552:	b141      	cbz	r1, 8004566 <__swsetup_r+0x6a>
 8004554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004558:	4299      	cmp	r1, r3
 800455a:	d002      	beq.n	8004562 <__swsetup_r+0x66>
 800455c:	4630      	mov	r0, r6
 800455e:	f000 fa59 	bl	8004a14 <_free_r>
 8004562:	2300      	movs	r3, #0
 8004564:	6363      	str	r3, [r4, #52]	; 0x34
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	2300      	movs	r3, #0
 8004570:	6063      	str	r3, [r4, #4]
 8004572:	6923      	ldr	r3, [r4, #16]
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	f043 0308 	orr.w	r3, r3, #8
 800457c:	81a3      	strh	r3, [r4, #12]
 800457e:	6923      	ldr	r3, [r4, #16]
 8004580:	b94b      	cbnz	r3, 8004596 <__swsetup_r+0x9a>
 8004582:	89a3      	ldrh	r3, [r4, #12]
 8004584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458c:	d003      	beq.n	8004596 <__swsetup_r+0x9a>
 800458e:	4621      	mov	r1, r4
 8004590:	4630      	mov	r0, r6
 8004592:	f000 f9ff 	bl	8004994 <__smakebuf_r>
 8004596:	89a0      	ldrh	r0, [r4, #12]
 8004598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800459c:	f010 0301 	ands.w	r3, r0, #1
 80045a0:	d00a      	beq.n	80045b8 <__swsetup_r+0xbc>
 80045a2:	2300      	movs	r3, #0
 80045a4:	60a3      	str	r3, [r4, #8]
 80045a6:	6963      	ldr	r3, [r4, #20]
 80045a8:	425b      	negs	r3, r3
 80045aa:	61a3      	str	r3, [r4, #24]
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	b943      	cbnz	r3, 80045c2 <__swsetup_r+0xc6>
 80045b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045b4:	d1ba      	bne.n	800452c <__swsetup_r+0x30>
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	0781      	lsls	r1, r0, #30
 80045ba:	bf58      	it	pl
 80045bc:	6963      	ldrpl	r3, [r4, #20]
 80045be:	60a3      	str	r3, [r4, #8]
 80045c0:	e7f4      	b.n	80045ac <__swsetup_r+0xb0>
 80045c2:	2000      	movs	r0, #0
 80045c4:	e7f7      	b.n	80045b6 <__swsetup_r+0xba>
 80045c6:	bf00      	nop
 80045c8:	2000000c 	.word	0x2000000c
 80045cc:	080053ac 	.word	0x080053ac
 80045d0:	080053cc 	.word	0x080053cc
 80045d4:	0800538c 	.word	0x0800538c

080045d8 <__sflush_r>:
 80045d8:	898a      	ldrh	r2, [r1, #12]
 80045da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045de:	4605      	mov	r5, r0
 80045e0:	0710      	lsls	r0, r2, #28
 80045e2:	460c      	mov	r4, r1
 80045e4:	d458      	bmi.n	8004698 <__sflush_r+0xc0>
 80045e6:	684b      	ldr	r3, [r1, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dc05      	bgt.n	80045f8 <__sflush_r+0x20>
 80045ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	dc02      	bgt.n	80045f8 <__sflush_r+0x20>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	d0f9      	beq.n	80045f2 <__sflush_r+0x1a>
 80045fe:	2300      	movs	r3, #0
 8004600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004604:	682f      	ldr	r7, [r5, #0]
 8004606:	602b      	str	r3, [r5, #0]
 8004608:	d032      	beq.n	8004670 <__sflush_r+0x98>
 800460a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	075a      	lsls	r2, r3, #29
 8004610:	d505      	bpl.n	800461e <__sflush_r+0x46>
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	1ac0      	subs	r0, r0, r3
 8004616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004618:	b10b      	cbz	r3, 800461e <__sflush_r+0x46>
 800461a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800461c:	1ac0      	subs	r0, r0, r3
 800461e:	2300      	movs	r3, #0
 8004620:	4602      	mov	r2, r0
 8004622:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004624:	6a21      	ldr	r1, [r4, #32]
 8004626:	4628      	mov	r0, r5
 8004628:	47b0      	blx	r6
 800462a:	1c43      	adds	r3, r0, #1
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	d106      	bne.n	800463e <__sflush_r+0x66>
 8004630:	6829      	ldr	r1, [r5, #0]
 8004632:	291d      	cmp	r1, #29
 8004634:	d82c      	bhi.n	8004690 <__sflush_r+0xb8>
 8004636:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <__sflush_r+0x108>)
 8004638:	40ca      	lsrs	r2, r1
 800463a:	07d6      	lsls	r6, r2, #31
 800463c:	d528      	bpl.n	8004690 <__sflush_r+0xb8>
 800463e:	2200      	movs	r2, #0
 8004640:	6062      	str	r2, [r4, #4]
 8004642:	04d9      	lsls	r1, r3, #19
 8004644:	6922      	ldr	r2, [r4, #16]
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	d504      	bpl.n	8004654 <__sflush_r+0x7c>
 800464a:	1c42      	adds	r2, r0, #1
 800464c:	d101      	bne.n	8004652 <__sflush_r+0x7a>
 800464e:	682b      	ldr	r3, [r5, #0]
 8004650:	b903      	cbnz	r3, 8004654 <__sflush_r+0x7c>
 8004652:	6560      	str	r0, [r4, #84]	; 0x54
 8004654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004656:	602f      	str	r7, [r5, #0]
 8004658:	2900      	cmp	r1, #0
 800465a:	d0ca      	beq.n	80045f2 <__sflush_r+0x1a>
 800465c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004660:	4299      	cmp	r1, r3
 8004662:	d002      	beq.n	800466a <__sflush_r+0x92>
 8004664:	4628      	mov	r0, r5
 8004666:	f000 f9d5 	bl	8004a14 <_free_r>
 800466a:	2000      	movs	r0, #0
 800466c:	6360      	str	r0, [r4, #52]	; 0x34
 800466e:	e7c1      	b.n	80045f4 <__sflush_r+0x1c>
 8004670:	6a21      	ldr	r1, [r4, #32]
 8004672:	2301      	movs	r3, #1
 8004674:	4628      	mov	r0, r5
 8004676:	47b0      	blx	r6
 8004678:	1c41      	adds	r1, r0, #1
 800467a:	d1c7      	bne.n	800460c <__sflush_r+0x34>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0c4      	beq.n	800460c <__sflush_r+0x34>
 8004682:	2b1d      	cmp	r3, #29
 8004684:	d001      	beq.n	800468a <__sflush_r+0xb2>
 8004686:	2b16      	cmp	r3, #22
 8004688:	d101      	bne.n	800468e <__sflush_r+0xb6>
 800468a:	602f      	str	r7, [r5, #0]
 800468c:	e7b1      	b.n	80045f2 <__sflush_r+0x1a>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	e7ad      	b.n	80045f4 <__sflush_r+0x1c>
 8004698:	690f      	ldr	r7, [r1, #16]
 800469a:	2f00      	cmp	r7, #0
 800469c:	d0a9      	beq.n	80045f2 <__sflush_r+0x1a>
 800469e:	0793      	lsls	r3, r2, #30
 80046a0:	680e      	ldr	r6, [r1, #0]
 80046a2:	bf08      	it	eq
 80046a4:	694b      	ldreq	r3, [r1, #20]
 80046a6:	600f      	str	r7, [r1, #0]
 80046a8:	bf18      	it	ne
 80046aa:	2300      	movne	r3, #0
 80046ac:	eba6 0807 	sub.w	r8, r6, r7
 80046b0:	608b      	str	r3, [r1, #8]
 80046b2:	f1b8 0f00 	cmp.w	r8, #0
 80046b6:	dd9c      	ble.n	80045f2 <__sflush_r+0x1a>
 80046b8:	6a21      	ldr	r1, [r4, #32]
 80046ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046bc:	4643      	mov	r3, r8
 80046be:	463a      	mov	r2, r7
 80046c0:	4628      	mov	r0, r5
 80046c2:	47b0      	blx	r6
 80046c4:	2800      	cmp	r0, #0
 80046c6:	dc06      	bgt.n	80046d6 <__sflush_r+0xfe>
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ce:	81a3      	strh	r3, [r4, #12]
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	e78e      	b.n	80045f4 <__sflush_r+0x1c>
 80046d6:	4407      	add	r7, r0
 80046d8:	eba8 0800 	sub.w	r8, r8, r0
 80046dc:	e7e9      	b.n	80046b2 <__sflush_r+0xda>
 80046de:	bf00      	nop
 80046e0:	20400001 	.word	0x20400001

080046e4 <_fflush_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	690b      	ldr	r3, [r1, #16]
 80046e8:	4605      	mov	r5, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	b913      	cbnz	r3, 80046f4 <_fflush_r+0x10>
 80046ee:	2500      	movs	r5, #0
 80046f0:	4628      	mov	r0, r5
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	b118      	cbz	r0, 80046fe <_fflush_r+0x1a>
 80046f6:	6983      	ldr	r3, [r0, #24]
 80046f8:	b90b      	cbnz	r3, 80046fe <_fflush_r+0x1a>
 80046fa:	f000 f887 	bl	800480c <__sinit>
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <_fflush_r+0x6c>)
 8004700:	429c      	cmp	r4, r3
 8004702:	d11b      	bne.n	800473c <_fflush_r+0x58>
 8004704:	686c      	ldr	r4, [r5, #4]
 8004706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0ef      	beq.n	80046ee <_fflush_r+0xa>
 800470e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004710:	07d0      	lsls	r0, r2, #31
 8004712:	d404      	bmi.n	800471e <_fflush_r+0x3a>
 8004714:	0599      	lsls	r1, r3, #22
 8004716:	d402      	bmi.n	800471e <_fflush_r+0x3a>
 8004718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800471a:	f000 f915 	bl	8004948 <__retarget_lock_acquire_recursive>
 800471e:	4628      	mov	r0, r5
 8004720:	4621      	mov	r1, r4
 8004722:	f7ff ff59 	bl	80045d8 <__sflush_r>
 8004726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004728:	07da      	lsls	r2, r3, #31
 800472a:	4605      	mov	r5, r0
 800472c:	d4e0      	bmi.n	80046f0 <_fflush_r+0xc>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	059b      	lsls	r3, r3, #22
 8004732:	d4dd      	bmi.n	80046f0 <_fflush_r+0xc>
 8004734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004736:	f000 f908 	bl	800494a <__retarget_lock_release_recursive>
 800473a:	e7d9      	b.n	80046f0 <_fflush_r+0xc>
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <_fflush_r+0x70>)
 800473e:	429c      	cmp	r4, r3
 8004740:	d101      	bne.n	8004746 <_fflush_r+0x62>
 8004742:	68ac      	ldr	r4, [r5, #8]
 8004744:	e7df      	b.n	8004706 <_fflush_r+0x22>
 8004746:	4b04      	ldr	r3, [pc, #16]	; (8004758 <_fflush_r+0x74>)
 8004748:	429c      	cmp	r4, r3
 800474a:	bf08      	it	eq
 800474c:	68ec      	ldreq	r4, [r5, #12]
 800474e:	e7da      	b.n	8004706 <_fflush_r+0x22>
 8004750:	080053ac 	.word	0x080053ac
 8004754:	080053cc 	.word	0x080053cc
 8004758:	0800538c 	.word	0x0800538c

0800475c <std>:
 800475c:	2300      	movs	r3, #0
 800475e:	b510      	push	{r4, lr}
 8004760:	4604      	mov	r4, r0
 8004762:	e9c0 3300 	strd	r3, r3, [r0]
 8004766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800476a:	6083      	str	r3, [r0, #8]
 800476c:	8181      	strh	r1, [r0, #12]
 800476e:	6643      	str	r3, [r0, #100]	; 0x64
 8004770:	81c2      	strh	r2, [r0, #14]
 8004772:	6183      	str	r3, [r0, #24]
 8004774:	4619      	mov	r1, r3
 8004776:	2208      	movs	r2, #8
 8004778:	305c      	adds	r0, #92	; 0x5c
 800477a:	f7ff fdd7 	bl	800432c <memset>
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <std+0x38>)
 8004780:	6263      	str	r3, [r4, #36]	; 0x24
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <std+0x3c>)
 8004784:	62a3      	str	r3, [r4, #40]	; 0x28
 8004786:	4b05      	ldr	r3, [pc, #20]	; (800479c <std+0x40>)
 8004788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <std+0x44>)
 800478c:	6224      	str	r4, [r4, #32]
 800478e:	6323      	str	r3, [r4, #48]	; 0x30
 8004790:	bd10      	pop	{r4, pc}
 8004792:	bf00      	nop
 8004794:	08005165 	.word	0x08005165
 8004798:	08005187 	.word	0x08005187
 800479c:	080051bf 	.word	0x080051bf
 80047a0:	080051e3 	.word	0x080051e3

080047a4 <_cleanup_r>:
 80047a4:	4901      	ldr	r1, [pc, #4]	; (80047ac <_cleanup_r+0x8>)
 80047a6:	f000 b8af 	b.w	8004908 <_fwalk_reent>
 80047aa:	bf00      	nop
 80047ac:	080046e5 	.word	0x080046e5

080047b0 <__sfmoreglue>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	1e4a      	subs	r2, r1, #1
 80047b4:	2568      	movs	r5, #104	; 0x68
 80047b6:	4355      	muls	r5, r2
 80047b8:	460e      	mov	r6, r1
 80047ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047be:	f000 f979 	bl	8004ab4 <_malloc_r>
 80047c2:	4604      	mov	r4, r0
 80047c4:	b140      	cbz	r0, 80047d8 <__sfmoreglue+0x28>
 80047c6:	2100      	movs	r1, #0
 80047c8:	e9c0 1600 	strd	r1, r6, [r0]
 80047cc:	300c      	adds	r0, #12
 80047ce:	60a0      	str	r0, [r4, #8]
 80047d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047d4:	f7ff fdaa 	bl	800432c <memset>
 80047d8:	4620      	mov	r0, r4
 80047da:	bd70      	pop	{r4, r5, r6, pc}

080047dc <__sfp_lock_acquire>:
 80047dc:	4801      	ldr	r0, [pc, #4]	; (80047e4 <__sfp_lock_acquire+0x8>)
 80047de:	f000 b8b3 	b.w	8004948 <__retarget_lock_acquire_recursive>
 80047e2:	bf00      	nop
 80047e4:	200002b8 	.word	0x200002b8

080047e8 <__sfp_lock_release>:
 80047e8:	4801      	ldr	r0, [pc, #4]	; (80047f0 <__sfp_lock_release+0x8>)
 80047ea:	f000 b8ae 	b.w	800494a <__retarget_lock_release_recursive>
 80047ee:	bf00      	nop
 80047f0:	200002b8 	.word	0x200002b8

080047f4 <__sinit_lock_acquire>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__sinit_lock_acquire+0x8>)
 80047f6:	f000 b8a7 	b.w	8004948 <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	200002b3 	.word	0x200002b3

08004800 <__sinit_lock_release>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__sinit_lock_release+0x8>)
 8004802:	f000 b8a2 	b.w	800494a <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	200002b3 	.word	0x200002b3

0800480c <__sinit>:
 800480c:	b510      	push	{r4, lr}
 800480e:	4604      	mov	r4, r0
 8004810:	f7ff fff0 	bl	80047f4 <__sinit_lock_acquire>
 8004814:	69a3      	ldr	r3, [r4, #24]
 8004816:	b11b      	cbz	r3, 8004820 <__sinit+0x14>
 8004818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481c:	f7ff bff0 	b.w	8004800 <__sinit_lock_release>
 8004820:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004824:	6523      	str	r3, [r4, #80]	; 0x50
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <__sinit+0x68>)
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <__sinit+0x6c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	62a2      	str	r2, [r4, #40]	; 0x28
 800482e:	42a3      	cmp	r3, r4
 8004830:	bf04      	itt	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	61a3      	streq	r3, [r4, #24]
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f820 	bl	800487c <__sfp>
 800483c:	6060      	str	r0, [r4, #4]
 800483e:	4620      	mov	r0, r4
 8004840:	f000 f81c 	bl	800487c <__sfp>
 8004844:	60a0      	str	r0, [r4, #8]
 8004846:	4620      	mov	r0, r4
 8004848:	f000 f818 	bl	800487c <__sfp>
 800484c:	2200      	movs	r2, #0
 800484e:	60e0      	str	r0, [r4, #12]
 8004850:	2104      	movs	r1, #4
 8004852:	6860      	ldr	r0, [r4, #4]
 8004854:	f7ff ff82 	bl	800475c <std>
 8004858:	68a0      	ldr	r0, [r4, #8]
 800485a:	2201      	movs	r2, #1
 800485c:	2109      	movs	r1, #9
 800485e:	f7ff ff7d 	bl	800475c <std>
 8004862:	68e0      	ldr	r0, [r4, #12]
 8004864:	2202      	movs	r2, #2
 8004866:	2112      	movs	r1, #18
 8004868:	f7ff ff78 	bl	800475c <std>
 800486c:	2301      	movs	r3, #1
 800486e:	61a3      	str	r3, [r4, #24]
 8004870:	e7d2      	b.n	8004818 <__sinit+0xc>
 8004872:	bf00      	nop
 8004874:	08005388 	.word	0x08005388
 8004878:	080047a5 	.word	0x080047a5

0800487c <__sfp>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	4607      	mov	r7, r0
 8004880:	f7ff ffac 	bl	80047dc <__sfp_lock_acquire>
 8004884:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <__sfp+0x84>)
 8004886:	681e      	ldr	r6, [r3, #0]
 8004888:	69b3      	ldr	r3, [r6, #24]
 800488a:	b913      	cbnz	r3, 8004892 <__sfp+0x16>
 800488c:	4630      	mov	r0, r6
 800488e:	f7ff ffbd 	bl	800480c <__sinit>
 8004892:	3648      	adds	r6, #72	; 0x48
 8004894:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004898:	3b01      	subs	r3, #1
 800489a:	d503      	bpl.n	80048a4 <__sfp+0x28>
 800489c:	6833      	ldr	r3, [r6, #0]
 800489e:	b30b      	cbz	r3, 80048e4 <__sfp+0x68>
 80048a0:	6836      	ldr	r6, [r6, #0]
 80048a2:	e7f7      	b.n	8004894 <__sfp+0x18>
 80048a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048a8:	b9d5      	cbnz	r5, 80048e0 <__sfp+0x64>
 80048aa:	4b16      	ldr	r3, [pc, #88]	; (8004904 <__sfp+0x88>)
 80048ac:	60e3      	str	r3, [r4, #12]
 80048ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048b2:	6665      	str	r5, [r4, #100]	; 0x64
 80048b4:	f000 f847 	bl	8004946 <__retarget_lock_init_recursive>
 80048b8:	f7ff ff96 	bl	80047e8 <__sfp_lock_release>
 80048bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048c4:	6025      	str	r5, [r4, #0]
 80048c6:	61a5      	str	r5, [r4, #24]
 80048c8:	2208      	movs	r2, #8
 80048ca:	4629      	mov	r1, r5
 80048cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048d0:	f7ff fd2c 	bl	800432c <memset>
 80048d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048dc:	4620      	mov	r0, r4
 80048de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e0:	3468      	adds	r4, #104	; 0x68
 80048e2:	e7d9      	b.n	8004898 <__sfp+0x1c>
 80048e4:	2104      	movs	r1, #4
 80048e6:	4638      	mov	r0, r7
 80048e8:	f7ff ff62 	bl	80047b0 <__sfmoreglue>
 80048ec:	4604      	mov	r4, r0
 80048ee:	6030      	str	r0, [r6, #0]
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d1d5      	bne.n	80048a0 <__sfp+0x24>
 80048f4:	f7ff ff78 	bl	80047e8 <__sfp_lock_release>
 80048f8:	230c      	movs	r3, #12
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	e7ee      	b.n	80048dc <__sfp+0x60>
 80048fe:	bf00      	nop
 8004900:	08005388 	.word	0x08005388
 8004904:	ffff0001 	.word	0xffff0001

08004908 <_fwalk_reent>:
 8004908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800490c:	4606      	mov	r6, r0
 800490e:	4688      	mov	r8, r1
 8004910:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004914:	2700      	movs	r7, #0
 8004916:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800491a:	f1b9 0901 	subs.w	r9, r9, #1
 800491e:	d505      	bpl.n	800492c <_fwalk_reent+0x24>
 8004920:	6824      	ldr	r4, [r4, #0]
 8004922:	2c00      	cmp	r4, #0
 8004924:	d1f7      	bne.n	8004916 <_fwalk_reent+0xe>
 8004926:	4638      	mov	r0, r7
 8004928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800492c:	89ab      	ldrh	r3, [r5, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d907      	bls.n	8004942 <_fwalk_reent+0x3a>
 8004932:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004936:	3301      	adds	r3, #1
 8004938:	d003      	beq.n	8004942 <_fwalk_reent+0x3a>
 800493a:	4629      	mov	r1, r5
 800493c:	4630      	mov	r0, r6
 800493e:	47c0      	blx	r8
 8004940:	4307      	orrs	r7, r0
 8004942:	3568      	adds	r5, #104	; 0x68
 8004944:	e7e9      	b.n	800491a <_fwalk_reent+0x12>

08004946 <__retarget_lock_init_recursive>:
 8004946:	4770      	bx	lr

08004948 <__retarget_lock_acquire_recursive>:
 8004948:	4770      	bx	lr

0800494a <__retarget_lock_release_recursive>:
 800494a:	4770      	bx	lr

0800494c <__swhatbuf_r>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	460e      	mov	r6, r1
 8004950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004954:	2900      	cmp	r1, #0
 8004956:	b096      	sub	sp, #88	; 0x58
 8004958:	4614      	mov	r4, r2
 800495a:	461d      	mov	r5, r3
 800495c:	da07      	bge.n	800496e <__swhatbuf_r+0x22>
 800495e:	2300      	movs	r3, #0
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	89b3      	ldrh	r3, [r6, #12]
 8004964:	061a      	lsls	r2, r3, #24
 8004966:	d410      	bmi.n	800498a <__swhatbuf_r+0x3e>
 8004968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800496c:	e00e      	b.n	800498c <__swhatbuf_r+0x40>
 800496e:	466a      	mov	r2, sp
 8004970:	f000 fc5e 	bl	8005230 <_fstat_r>
 8004974:	2800      	cmp	r0, #0
 8004976:	dbf2      	blt.n	800495e <__swhatbuf_r+0x12>
 8004978:	9a01      	ldr	r2, [sp, #4]
 800497a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800497e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004982:	425a      	negs	r2, r3
 8004984:	415a      	adcs	r2, r3
 8004986:	602a      	str	r2, [r5, #0]
 8004988:	e7ee      	b.n	8004968 <__swhatbuf_r+0x1c>
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	2000      	movs	r0, #0
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	b016      	add	sp, #88	; 0x58
 8004992:	bd70      	pop	{r4, r5, r6, pc}

08004994 <__smakebuf_r>:
 8004994:	898b      	ldrh	r3, [r1, #12]
 8004996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004998:	079d      	lsls	r5, r3, #30
 800499a:	4606      	mov	r6, r0
 800499c:	460c      	mov	r4, r1
 800499e:	d507      	bpl.n	80049b0 <__smakebuf_r+0x1c>
 80049a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	6123      	str	r3, [r4, #16]
 80049a8:	2301      	movs	r3, #1
 80049aa:	6163      	str	r3, [r4, #20]
 80049ac:	b002      	add	sp, #8
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	ab01      	add	r3, sp, #4
 80049b2:	466a      	mov	r2, sp
 80049b4:	f7ff ffca 	bl	800494c <__swhatbuf_r>
 80049b8:	9900      	ldr	r1, [sp, #0]
 80049ba:	4605      	mov	r5, r0
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 f879 	bl	8004ab4 <_malloc_r>
 80049c2:	b948      	cbnz	r0, 80049d8 <__smakebuf_r+0x44>
 80049c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c8:	059a      	lsls	r2, r3, #22
 80049ca:	d4ef      	bmi.n	80049ac <__smakebuf_r+0x18>
 80049cc:	f023 0303 	bic.w	r3, r3, #3
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	e7e3      	b.n	80049a0 <__smakebuf_r+0xc>
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <__smakebuf_r+0x7c>)
 80049da:	62b3      	str	r3, [r6, #40]	; 0x28
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	6020      	str	r0, [r4, #0]
 80049e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e4:	81a3      	strh	r3, [r4, #12]
 80049e6:	9b00      	ldr	r3, [sp, #0]
 80049e8:	6163      	str	r3, [r4, #20]
 80049ea:	9b01      	ldr	r3, [sp, #4]
 80049ec:	6120      	str	r0, [r4, #16]
 80049ee:	b15b      	cbz	r3, 8004a08 <__smakebuf_r+0x74>
 80049f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f4:	4630      	mov	r0, r6
 80049f6:	f000 fc2d 	bl	8005254 <_isatty_r>
 80049fa:	b128      	cbz	r0, 8004a08 <__smakebuf_r+0x74>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	89a0      	ldrh	r0, [r4, #12]
 8004a0a:	4305      	orrs	r5, r0
 8004a0c:	81a5      	strh	r5, [r4, #12]
 8004a0e:	e7cd      	b.n	80049ac <__smakebuf_r+0x18>
 8004a10:	080047a5 	.word	0x080047a5

08004a14 <_free_r>:
 8004a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a16:	2900      	cmp	r1, #0
 8004a18:	d048      	beq.n	8004aac <_free_r+0x98>
 8004a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1e:	9001      	str	r0, [sp, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f1a1 0404 	sub.w	r4, r1, #4
 8004a26:	bfb8      	it	lt
 8004a28:	18e4      	addlt	r4, r4, r3
 8004a2a:	f000 fc35 	bl	8005298 <__malloc_lock>
 8004a2e:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <_free_r+0x9c>)
 8004a30:	9801      	ldr	r0, [sp, #4]
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	4615      	mov	r5, r2
 8004a36:	b933      	cbnz	r3, 8004a46 <_free_r+0x32>
 8004a38:	6063      	str	r3, [r4, #4]
 8004a3a:	6014      	str	r4, [r2, #0]
 8004a3c:	b003      	add	sp, #12
 8004a3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a42:	f000 bc2f 	b.w	80052a4 <__malloc_unlock>
 8004a46:	42a3      	cmp	r3, r4
 8004a48:	d90b      	bls.n	8004a62 <_free_r+0x4e>
 8004a4a:	6821      	ldr	r1, [r4, #0]
 8004a4c:	1862      	adds	r2, r4, r1
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	bf04      	itt	eq
 8004a52:	681a      	ldreq	r2, [r3, #0]
 8004a54:	685b      	ldreq	r3, [r3, #4]
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	bf04      	itt	eq
 8004a5a:	1852      	addeq	r2, r2, r1
 8004a5c:	6022      	streq	r2, [r4, #0]
 8004a5e:	602c      	str	r4, [r5, #0]
 8004a60:	e7ec      	b.n	8004a3c <_free_r+0x28>
 8004a62:	461a      	mov	r2, r3
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	b10b      	cbz	r3, 8004a6c <_free_r+0x58>
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	d9fa      	bls.n	8004a62 <_free_r+0x4e>
 8004a6c:	6811      	ldr	r1, [r2, #0]
 8004a6e:	1855      	adds	r5, r2, r1
 8004a70:	42a5      	cmp	r5, r4
 8004a72:	d10b      	bne.n	8004a8c <_free_r+0x78>
 8004a74:	6824      	ldr	r4, [r4, #0]
 8004a76:	4421      	add	r1, r4
 8004a78:	1854      	adds	r4, r2, r1
 8004a7a:	42a3      	cmp	r3, r4
 8004a7c:	6011      	str	r1, [r2, #0]
 8004a7e:	d1dd      	bne.n	8004a3c <_free_r+0x28>
 8004a80:	681c      	ldr	r4, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	6053      	str	r3, [r2, #4]
 8004a86:	4421      	add	r1, r4
 8004a88:	6011      	str	r1, [r2, #0]
 8004a8a:	e7d7      	b.n	8004a3c <_free_r+0x28>
 8004a8c:	d902      	bls.n	8004a94 <_free_r+0x80>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	6003      	str	r3, [r0, #0]
 8004a92:	e7d3      	b.n	8004a3c <_free_r+0x28>
 8004a94:	6825      	ldr	r5, [r4, #0]
 8004a96:	1961      	adds	r1, r4, r5
 8004a98:	428b      	cmp	r3, r1
 8004a9a:	bf04      	itt	eq
 8004a9c:	6819      	ldreq	r1, [r3, #0]
 8004a9e:	685b      	ldreq	r3, [r3, #4]
 8004aa0:	6063      	str	r3, [r4, #4]
 8004aa2:	bf04      	itt	eq
 8004aa4:	1949      	addeq	r1, r1, r5
 8004aa6:	6021      	streq	r1, [r4, #0]
 8004aa8:	6054      	str	r4, [r2, #4]
 8004aaa:	e7c7      	b.n	8004a3c <_free_r+0x28>
 8004aac:	b003      	add	sp, #12
 8004aae:	bd30      	pop	{r4, r5, pc}
 8004ab0:	20000098 	.word	0x20000098

08004ab4 <_malloc_r>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	1ccd      	adds	r5, r1, #3
 8004ab8:	f025 0503 	bic.w	r5, r5, #3
 8004abc:	3508      	adds	r5, #8
 8004abe:	2d0c      	cmp	r5, #12
 8004ac0:	bf38      	it	cc
 8004ac2:	250c      	movcc	r5, #12
 8004ac4:	2d00      	cmp	r5, #0
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	db01      	blt.n	8004ace <_malloc_r+0x1a>
 8004aca:	42a9      	cmp	r1, r5
 8004acc:	d903      	bls.n	8004ad6 <_malloc_r+0x22>
 8004ace:	230c      	movs	r3, #12
 8004ad0:	6033      	str	r3, [r6, #0]
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad6:	f000 fbdf 	bl	8005298 <__malloc_lock>
 8004ada:	4921      	ldr	r1, [pc, #132]	; (8004b60 <_malloc_r+0xac>)
 8004adc:	680a      	ldr	r2, [r1, #0]
 8004ade:	4614      	mov	r4, r2
 8004ae0:	b99c      	cbnz	r4, 8004b0a <_malloc_r+0x56>
 8004ae2:	4f20      	ldr	r7, [pc, #128]	; (8004b64 <_malloc_r+0xb0>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	b923      	cbnz	r3, 8004af2 <_malloc_r+0x3e>
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4630      	mov	r0, r6
 8004aec:	f000 fb2a 	bl	8005144 <_sbrk_r>
 8004af0:	6038      	str	r0, [r7, #0]
 8004af2:	4629      	mov	r1, r5
 8004af4:	4630      	mov	r0, r6
 8004af6:	f000 fb25 	bl	8005144 <_sbrk_r>
 8004afa:	1c43      	adds	r3, r0, #1
 8004afc:	d123      	bne.n	8004b46 <_malloc_r+0x92>
 8004afe:	230c      	movs	r3, #12
 8004b00:	6033      	str	r3, [r6, #0]
 8004b02:	4630      	mov	r0, r6
 8004b04:	f000 fbce 	bl	80052a4 <__malloc_unlock>
 8004b08:	e7e3      	b.n	8004ad2 <_malloc_r+0x1e>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	1b5b      	subs	r3, r3, r5
 8004b0e:	d417      	bmi.n	8004b40 <_malloc_r+0x8c>
 8004b10:	2b0b      	cmp	r3, #11
 8004b12:	d903      	bls.n	8004b1c <_malloc_r+0x68>
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	441c      	add	r4, r3
 8004b18:	6025      	str	r5, [r4, #0]
 8004b1a:	e004      	b.n	8004b26 <_malloc_r+0x72>
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	42a2      	cmp	r2, r4
 8004b20:	bf0c      	ite	eq
 8004b22:	600b      	streq	r3, [r1, #0]
 8004b24:	6053      	strne	r3, [r2, #4]
 8004b26:	4630      	mov	r0, r6
 8004b28:	f000 fbbc 	bl	80052a4 <__malloc_unlock>
 8004b2c:	f104 000b 	add.w	r0, r4, #11
 8004b30:	1d23      	adds	r3, r4, #4
 8004b32:	f020 0007 	bic.w	r0, r0, #7
 8004b36:	1ac2      	subs	r2, r0, r3
 8004b38:	d0cc      	beq.n	8004ad4 <_malloc_r+0x20>
 8004b3a:	1a1b      	subs	r3, r3, r0
 8004b3c:	50a3      	str	r3, [r4, r2]
 8004b3e:	e7c9      	b.n	8004ad4 <_malloc_r+0x20>
 8004b40:	4622      	mov	r2, r4
 8004b42:	6864      	ldr	r4, [r4, #4]
 8004b44:	e7cc      	b.n	8004ae0 <_malloc_r+0x2c>
 8004b46:	1cc4      	adds	r4, r0, #3
 8004b48:	f024 0403 	bic.w	r4, r4, #3
 8004b4c:	42a0      	cmp	r0, r4
 8004b4e:	d0e3      	beq.n	8004b18 <_malloc_r+0x64>
 8004b50:	1a21      	subs	r1, r4, r0
 8004b52:	4630      	mov	r0, r6
 8004b54:	f000 faf6 	bl	8005144 <_sbrk_r>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d1dd      	bne.n	8004b18 <_malloc_r+0x64>
 8004b5c:	e7cf      	b.n	8004afe <_malloc_r+0x4a>
 8004b5e:	bf00      	nop
 8004b60:	20000098 	.word	0x20000098
 8004b64:	2000009c 	.word	0x2000009c

08004b68 <__sfputc_r>:
 8004b68:	6893      	ldr	r3, [r2, #8]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	b410      	push	{r4}
 8004b70:	6093      	str	r3, [r2, #8]
 8004b72:	da08      	bge.n	8004b86 <__sfputc_r+0x1e>
 8004b74:	6994      	ldr	r4, [r2, #24]
 8004b76:	42a3      	cmp	r3, r4
 8004b78:	db01      	blt.n	8004b7e <__sfputc_r+0x16>
 8004b7a:	290a      	cmp	r1, #10
 8004b7c:	d103      	bne.n	8004b86 <__sfputc_r+0x1e>
 8004b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b82:	f7ff bc69 	b.w	8004458 <__swbuf_r>
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	1c58      	adds	r0, r3, #1
 8004b8a:	6010      	str	r0, [r2, #0]
 8004b8c:	7019      	strb	r1, [r3, #0]
 8004b8e:	4608      	mov	r0, r1
 8004b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <__sfputs_r>:
 8004b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b98:	4606      	mov	r6, r0
 8004b9a:	460f      	mov	r7, r1
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	18d5      	adds	r5, r2, r3
 8004ba0:	42ac      	cmp	r4, r5
 8004ba2:	d101      	bne.n	8004ba8 <__sfputs_r+0x12>
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e007      	b.n	8004bb8 <__sfputs_r+0x22>
 8004ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bac:	463a      	mov	r2, r7
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7ff ffda 	bl	8004b68 <__sfputc_r>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d1f3      	bne.n	8004ba0 <__sfputs_r+0xa>
 8004bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bbc <_vfiprintf_r>:
 8004bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc0:	460d      	mov	r5, r1
 8004bc2:	b09d      	sub	sp, #116	; 0x74
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	4698      	mov	r8, r3
 8004bc8:	4606      	mov	r6, r0
 8004bca:	b118      	cbz	r0, 8004bd4 <_vfiprintf_r+0x18>
 8004bcc:	6983      	ldr	r3, [r0, #24]
 8004bce:	b90b      	cbnz	r3, 8004bd4 <_vfiprintf_r+0x18>
 8004bd0:	f7ff fe1c 	bl	800480c <__sinit>
 8004bd4:	4b89      	ldr	r3, [pc, #548]	; (8004dfc <_vfiprintf_r+0x240>)
 8004bd6:	429d      	cmp	r5, r3
 8004bd8:	d11b      	bne.n	8004c12 <_vfiprintf_r+0x56>
 8004bda:	6875      	ldr	r5, [r6, #4]
 8004bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bde:	07d9      	lsls	r1, r3, #31
 8004be0:	d405      	bmi.n	8004bee <_vfiprintf_r+0x32>
 8004be2:	89ab      	ldrh	r3, [r5, #12]
 8004be4:	059a      	lsls	r2, r3, #22
 8004be6:	d402      	bmi.n	8004bee <_vfiprintf_r+0x32>
 8004be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bea:	f7ff fead 	bl	8004948 <__retarget_lock_acquire_recursive>
 8004bee:	89ab      	ldrh	r3, [r5, #12]
 8004bf0:	071b      	lsls	r3, r3, #28
 8004bf2:	d501      	bpl.n	8004bf8 <_vfiprintf_r+0x3c>
 8004bf4:	692b      	ldr	r3, [r5, #16]
 8004bf6:	b9eb      	cbnz	r3, 8004c34 <_vfiprintf_r+0x78>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f7ff fc7e 	bl	80044fc <__swsetup_r>
 8004c00:	b1c0      	cbz	r0, 8004c34 <_vfiprintf_r+0x78>
 8004c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c04:	07dc      	lsls	r4, r3, #31
 8004c06:	d50e      	bpl.n	8004c26 <_vfiprintf_r+0x6a>
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	b01d      	add	sp, #116	; 0x74
 8004c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c12:	4b7b      	ldr	r3, [pc, #492]	; (8004e00 <_vfiprintf_r+0x244>)
 8004c14:	429d      	cmp	r5, r3
 8004c16:	d101      	bne.n	8004c1c <_vfiprintf_r+0x60>
 8004c18:	68b5      	ldr	r5, [r6, #8]
 8004c1a:	e7df      	b.n	8004bdc <_vfiprintf_r+0x20>
 8004c1c:	4b79      	ldr	r3, [pc, #484]	; (8004e04 <_vfiprintf_r+0x248>)
 8004c1e:	429d      	cmp	r5, r3
 8004c20:	bf08      	it	eq
 8004c22:	68f5      	ldreq	r5, [r6, #12]
 8004c24:	e7da      	b.n	8004bdc <_vfiprintf_r+0x20>
 8004c26:	89ab      	ldrh	r3, [r5, #12]
 8004c28:	0598      	lsls	r0, r3, #22
 8004c2a:	d4ed      	bmi.n	8004c08 <_vfiprintf_r+0x4c>
 8004c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c2e:	f7ff fe8c 	bl	800494a <__retarget_lock_release_recursive>
 8004c32:	e7e9      	b.n	8004c08 <_vfiprintf_r+0x4c>
 8004c34:	2300      	movs	r3, #0
 8004c36:	9309      	str	r3, [sp, #36]	; 0x24
 8004c38:	2320      	movs	r3, #32
 8004c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c42:	2330      	movs	r3, #48	; 0x30
 8004c44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004e08 <_vfiprintf_r+0x24c>
 8004c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c4c:	f04f 0901 	mov.w	r9, #1
 8004c50:	4623      	mov	r3, r4
 8004c52:	469a      	mov	sl, r3
 8004c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c58:	b10a      	cbz	r2, 8004c5e <_vfiprintf_r+0xa2>
 8004c5a:	2a25      	cmp	r2, #37	; 0x25
 8004c5c:	d1f9      	bne.n	8004c52 <_vfiprintf_r+0x96>
 8004c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c62:	d00b      	beq.n	8004c7c <_vfiprintf_r+0xc0>
 8004c64:	465b      	mov	r3, fp
 8004c66:	4622      	mov	r2, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f7ff ff93 	bl	8004b96 <__sfputs_r>
 8004c70:	3001      	adds	r0, #1
 8004c72:	f000 80aa 	beq.w	8004dca <_vfiprintf_r+0x20e>
 8004c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c78:	445a      	add	r2, fp
 8004c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8004c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80a2 	beq.w	8004dca <_vfiprintf_r+0x20e>
 8004c86:	2300      	movs	r3, #0
 8004c88:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c90:	f10a 0a01 	add.w	sl, sl, #1
 8004c94:	9304      	str	r3, [sp, #16]
 8004c96:	9307      	str	r3, [sp, #28]
 8004c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8004c9e:	4654      	mov	r4, sl
 8004ca0:	2205      	movs	r2, #5
 8004ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca6:	4858      	ldr	r0, [pc, #352]	; (8004e08 <_vfiprintf_r+0x24c>)
 8004ca8:	f7fb fa92 	bl	80001d0 <memchr>
 8004cac:	9a04      	ldr	r2, [sp, #16]
 8004cae:	b9d8      	cbnz	r0, 8004ce8 <_vfiprintf_r+0x12c>
 8004cb0:	06d1      	lsls	r1, r2, #27
 8004cb2:	bf44      	itt	mi
 8004cb4:	2320      	movmi	r3, #32
 8004cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cba:	0713      	lsls	r3, r2, #28
 8004cbc:	bf44      	itt	mi
 8004cbe:	232b      	movmi	r3, #43	; 0x2b
 8004cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cca:	d015      	beq.n	8004cf8 <_vfiprintf_r+0x13c>
 8004ccc:	9a07      	ldr	r2, [sp, #28]
 8004cce:	4654      	mov	r4, sl
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f04f 0c0a 	mov.w	ip, #10
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cdc:	3b30      	subs	r3, #48	; 0x30
 8004cde:	2b09      	cmp	r3, #9
 8004ce0:	d94e      	bls.n	8004d80 <_vfiprintf_r+0x1c4>
 8004ce2:	b1b0      	cbz	r0, 8004d12 <_vfiprintf_r+0x156>
 8004ce4:	9207      	str	r2, [sp, #28]
 8004ce6:	e014      	b.n	8004d12 <_vfiprintf_r+0x156>
 8004ce8:	eba0 0308 	sub.w	r3, r0, r8
 8004cec:	fa09 f303 	lsl.w	r3, r9, r3
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	9304      	str	r3, [sp, #16]
 8004cf4:	46a2      	mov	sl, r4
 8004cf6:	e7d2      	b.n	8004c9e <_vfiprintf_r+0xe2>
 8004cf8:	9b03      	ldr	r3, [sp, #12]
 8004cfa:	1d19      	adds	r1, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	9103      	str	r1, [sp, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bfbb      	ittet	lt
 8004d04:	425b      	neglt	r3, r3
 8004d06:	f042 0202 	orrlt.w	r2, r2, #2
 8004d0a:	9307      	strge	r3, [sp, #28]
 8004d0c:	9307      	strlt	r3, [sp, #28]
 8004d0e:	bfb8      	it	lt
 8004d10:	9204      	strlt	r2, [sp, #16]
 8004d12:	7823      	ldrb	r3, [r4, #0]
 8004d14:	2b2e      	cmp	r3, #46	; 0x2e
 8004d16:	d10c      	bne.n	8004d32 <_vfiprintf_r+0x176>
 8004d18:	7863      	ldrb	r3, [r4, #1]
 8004d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d1c:	d135      	bne.n	8004d8a <_vfiprintf_r+0x1ce>
 8004d1e:	9b03      	ldr	r3, [sp, #12]
 8004d20:	1d1a      	adds	r2, r3, #4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	9203      	str	r2, [sp, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bfb8      	it	lt
 8004d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d2e:	3402      	adds	r4, #2
 8004d30:	9305      	str	r3, [sp, #20]
 8004d32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e18 <_vfiprintf_r+0x25c>
 8004d36:	7821      	ldrb	r1, [r4, #0]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	f7fb fa48 	bl	80001d0 <memchr>
 8004d40:	b140      	cbz	r0, 8004d54 <_vfiprintf_r+0x198>
 8004d42:	2340      	movs	r3, #64	; 0x40
 8004d44:	eba0 000a 	sub.w	r0, r0, sl
 8004d48:	fa03 f000 	lsl.w	r0, r3, r0
 8004d4c:	9b04      	ldr	r3, [sp, #16]
 8004d4e:	4303      	orrs	r3, r0
 8004d50:	3401      	adds	r4, #1
 8004d52:	9304      	str	r3, [sp, #16]
 8004d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d58:	482c      	ldr	r0, [pc, #176]	; (8004e0c <_vfiprintf_r+0x250>)
 8004d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d5e:	2206      	movs	r2, #6
 8004d60:	f7fb fa36 	bl	80001d0 <memchr>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d03f      	beq.n	8004de8 <_vfiprintf_r+0x22c>
 8004d68:	4b29      	ldr	r3, [pc, #164]	; (8004e10 <_vfiprintf_r+0x254>)
 8004d6a:	bb1b      	cbnz	r3, 8004db4 <_vfiprintf_r+0x1f8>
 8004d6c:	9b03      	ldr	r3, [sp, #12]
 8004d6e:	3307      	adds	r3, #7
 8004d70:	f023 0307 	bic.w	r3, r3, #7
 8004d74:	3308      	adds	r3, #8
 8004d76:	9303      	str	r3, [sp, #12]
 8004d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d7a:	443b      	add	r3, r7
 8004d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d7e:	e767      	b.n	8004c50 <_vfiprintf_r+0x94>
 8004d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d84:	460c      	mov	r4, r1
 8004d86:	2001      	movs	r0, #1
 8004d88:	e7a5      	b.n	8004cd6 <_vfiprintf_r+0x11a>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	3401      	adds	r4, #1
 8004d8e:	9305      	str	r3, [sp, #20]
 8004d90:	4619      	mov	r1, r3
 8004d92:	f04f 0c0a 	mov.w	ip, #10
 8004d96:	4620      	mov	r0, r4
 8004d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d9c:	3a30      	subs	r2, #48	; 0x30
 8004d9e:	2a09      	cmp	r2, #9
 8004da0:	d903      	bls.n	8004daa <_vfiprintf_r+0x1ee>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0c5      	beq.n	8004d32 <_vfiprintf_r+0x176>
 8004da6:	9105      	str	r1, [sp, #20]
 8004da8:	e7c3      	b.n	8004d32 <_vfiprintf_r+0x176>
 8004daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dae:	4604      	mov	r4, r0
 8004db0:	2301      	movs	r3, #1
 8004db2:	e7f0      	b.n	8004d96 <_vfiprintf_r+0x1da>
 8004db4:	ab03      	add	r3, sp, #12
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	462a      	mov	r2, r5
 8004dba:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <_vfiprintf_r+0x258>)
 8004dbc:	a904      	add	r1, sp, #16
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	f3af 8000 	nop.w
 8004dc4:	4607      	mov	r7, r0
 8004dc6:	1c78      	adds	r0, r7, #1
 8004dc8:	d1d6      	bne.n	8004d78 <_vfiprintf_r+0x1bc>
 8004dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dcc:	07d9      	lsls	r1, r3, #31
 8004dce:	d405      	bmi.n	8004ddc <_vfiprintf_r+0x220>
 8004dd0:	89ab      	ldrh	r3, [r5, #12]
 8004dd2:	059a      	lsls	r2, r3, #22
 8004dd4:	d402      	bmi.n	8004ddc <_vfiprintf_r+0x220>
 8004dd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dd8:	f7ff fdb7 	bl	800494a <__retarget_lock_release_recursive>
 8004ddc:	89ab      	ldrh	r3, [r5, #12]
 8004dde:	065b      	lsls	r3, r3, #25
 8004de0:	f53f af12 	bmi.w	8004c08 <_vfiprintf_r+0x4c>
 8004de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de6:	e711      	b.n	8004c0c <_vfiprintf_r+0x50>
 8004de8:	ab03      	add	r3, sp, #12
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	462a      	mov	r2, r5
 8004dee:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <_vfiprintf_r+0x258>)
 8004df0:	a904      	add	r1, sp, #16
 8004df2:	4630      	mov	r0, r6
 8004df4:	f000 f880 	bl	8004ef8 <_printf_i>
 8004df8:	e7e4      	b.n	8004dc4 <_vfiprintf_r+0x208>
 8004dfa:	bf00      	nop
 8004dfc:	080053ac 	.word	0x080053ac
 8004e00:	080053cc 	.word	0x080053cc
 8004e04:	0800538c 	.word	0x0800538c
 8004e08:	080053ec 	.word	0x080053ec
 8004e0c:	080053f6 	.word	0x080053f6
 8004e10:	00000000 	.word	0x00000000
 8004e14:	08004b97 	.word	0x08004b97
 8004e18:	080053f2 	.word	0x080053f2

08004e1c <_printf_common>:
 8004e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e20:	4616      	mov	r6, r2
 8004e22:	4699      	mov	r9, r3
 8004e24:	688a      	ldr	r2, [r1, #8]
 8004e26:	690b      	ldr	r3, [r1, #16]
 8004e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	bfb8      	it	lt
 8004e30:	4613      	movlt	r3, r2
 8004e32:	6033      	str	r3, [r6, #0]
 8004e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e38:	4607      	mov	r7, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	b10a      	cbz	r2, 8004e42 <_printf_common+0x26>
 8004e3e:	3301      	adds	r3, #1
 8004e40:	6033      	str	r3, [r6, #0]
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	0699      	lsls	r1, r3, #26
 8004e46:	bf42      	ittt	mi
 8004e48:	6833      	ldrmi	r3, [r6, #0]
 8004e4a:	3302      	addmi	r3, #2
 8004e4c:	6033      	strmi	r3, [r6, #0]
 8004e4e:	6825      	ldr	r5, [r4, #0]
 8004e50:	f015 0506 	ands.w	r5, r5, #6
 8004e54:	d106      	bne.n	8004e64 <_printf_common+0x48>
 8004e56:	f104 0a19 	add.w	sl, r4, #25
 8004e5a:	68e3      	ldr	r3, [r4, #12]
 8004e5c:	6832      	ldr	r2, [r6, #0]
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	42ab      	cmp	r3, r5
 8004e62:	dc26      	bgt.n	8004eb2 <_printf_common+0x96>
 8004e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e68:	1e13      	subs	r3, r2, #0
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	bf18      	it	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	0692      	lsls	r2, r2, #26
 8004e72:	d42b      	bmi.n	8004ecc <_printf_common+0xb0>
 8004e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e78:	4649      	mov	r1, r9
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	47c0      	blx	r8
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d01e      	beq.n	8004ec0 <_printf_common+0xa4>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	68e5      	ldr	r5, [r4, #12]
 8004e86:	6832      	ldr	r2, [r6, #0]
 8004e88:	f003 0306 	and.w	r3, r3, #6
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	bf08      	it	eq
 8004e90:	1aad      	subeq	r5, r5, r2
 8004e92:	68a3      	ldr	r3, [r4, #8]
 8004e94:	6922      	ldr	r2, [r4, #16]
 8004e96:	bf0c      	ite	eq
 8004e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e9c:	2500      	movne	r5, #0
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	bfc4      	itt	gt
 8004ea2:	1a9b      	subgt	r3, r3, r2
 8004ea4:	18ed      	addgt	r5, r5, r3
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	341a      	adds	r4, #26
 8004eaa:	42b5      	cmp	r5, r6
 8004eac:	d11a      	bne.n	8004ee4 <_printf_common+0xc8>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	e008      	b.n	8004ec4 <_printf_common+0xa8>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4652      	mov	r2, sl
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	4638      	mov	r0, r7
 8004eba:	47c0      	blx	r8
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d103      	bne.n	8004ec8 <_printf_common+0xac>
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec8:	3501      	adds	r5, #1
 8004eca:	e7c6      	b.n	8004e5a <_printf_common+0x3e>
 8004ecc:	18e1      	adds	r1, r4, r3
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	2030      	movs	r0, #48	; 0x30
 8004ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ed6:	4422      	add	r2, r4
 8004ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	e7c7      	b.n	8004e74 <_printf_common+0x58>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	4622      	mov	r2, r4
 8004ee8:	4649      	mov	r1, r9
 8004eea:	4638      	mov	r0, r7
 8004eec:	47c0      	blx	r8
 8004eee:	3001      	adds	r0, #1
 8004ef0:	d0e6      	beq.n	8004ec0 <_printf_common+0xa4>
 8004ef2:	3601      	adds	r6, #1
 8004ef4:	e7d9      	b.n	8004eaa <_printf_common+0x8e>
	...

08004ef8 <_printf_i>:
 8004ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004efc:	460c      	mov	r4, r1
 8004efe:	4691      	mov	r9, r2
 8004f00:	7e27      	ldrb	r7, [r4, #24]
 8004f02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f04:	2f78      	cmp	r7, #120	; 0x78
 8004f06:	4680      	mov	r8, r0
 8004f08:	469a      	mov	sl, r3
 8004f0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f0e:	d807      	bhi.n	8004f20 <_printf_i+0x28>
 8004f10:	2f62      	cmp	r7, #98	; 0x62
 8004f12:	d80a      	bhi.n	8004f2a <_printf_i+0x32>
 8004f14:	2f00      	cmp	r7, #0
 8004f16:	f000 80d8 	beq.w	80050ca <_printf_i+0x1d2>
 8004f1a:	2f58      	cmp	r7, #88	; 0x58
 8004f1c:	f000 80a3 	beq.w	8005066 <_printf_i+0x16e>
 8004f20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f28:	e03a      	b.n	8004fa0 <_printf_i+0xa8>
 8004f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f2e:	2b15      	cmp	r3, #21
 8004f30:	d8f6      	bhi.n	8004f20 <_printf_i+0x28>
 8004f32:	a001      	add	r0, pc, #4	; (adr r0, 8004f38 <_printf_i+0x40>)
 8004f34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f38:	08004f91 	.word	0x08004f91
 8004f3c:	08004fa5 	.word	0x08004fa5
 8004f40:	08004f21 	.word	0x08004f21
 8004f44:	08004f21 	.word	0x08004f21
 8004f48:	08004f21 	.word	0x08004f21
 8004f4c:	08004f21 	.word	0x08004f21
 8004f50:	08004fa5 	.word	0x08004fa5
 8004f54:	08004f21 	.word	0x08004f21
 8004f58:	08004f21 	.word	0x08004f21
 8004f5c:	08004f21 	.word	0x08004f21
 8004f60:	08004f21 	.word	0x08004f21
 8004f64:	080050b1 	.word	0x080050b1
 8004f68:	08004fd5 	.word	0x08004fd5
 8004f6c:	08005093 	.word	0x08005093
 8004f70:	08004f21 	.word	0x08004f21
 8004f74:	08004f21 	.word	0x08004f21
 8004f78:	080050d3 	.word	0x080050d3
 8004f7c:	08004f21 	.word	0x08004f21
 8004f80:	08004fd5 	.word	0x08004fd5
 8004f84:	08004f21 	.word	0x08004f21
 8004f88:	08004f21 	.word	0x08004f21
 8004f8c:	0800509b 	.word	0x0800509b
 8004f90:	680b      	ldr	r3, [r1, #0]
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	600a      	str	r2, [r1, #0]
 8004f98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0a3      	b.n	80050ec <_printf_i+0x1f4>
 8004fa4:	6825      	ldr	r5, [r4, #0]
 8004fa6:	6808      	ldr	r0, [r1, #0]
 8004fa8:	062e      	lsls	r6, r5, #24
 8004faa:	f100 0304 	add.w	r3, r0, #4
 8004fae:	d50a      	bpl.n	8004fc6 <_printf_i+0xce>
 8004fb0:	6805      	ldr	r5, [r0, #0]
 8004fb2:	600b      	str	r3, [r1, #0]
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	da03      	bge.n	8004fc0 <_printf_i+0xc8>
 8004fb8:	232d      	movs	r3, #45	; 0x2d
 8004fba:	426d      	negs	r5, r5
 8004fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc0:	485e      	ldr	r0, [pc, #376]	; (800513c <_printf_i+0x244>)
 8004fc2:	230a      	movs	r3, #10
 8004fc4:	e019      	b.n	8004ffa <_printf_i+0x102>
 8004fc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fca:	6805      	ldr	r5, [r0, #0]
 8004fcc:	600b      	str	r3, [r1, #0]
 8004fce:	bf18      	it	ne
 8004fd0:	b22d      	sxthne	r5, r5
 8004fd2:	e7ef      	b.n	8004fb4 <_printf_i+0xbc>
 8004fd4:	680b      	ldr	r3, [r1, #0]
 8004fd6:	6825      	ldr	r5, [r4, #0]
 8004fd8:	1d18      	adds	r0, r3, #4
 8004fda:	6008      	str	r0, [r1, #0]
 8004fdc:	0628      	lsls	r0, r5, #24
 8004fde:	d501      	bpl.n	8004fe4 <_printf_i+0xec>
 8004fe0:	681d      	ldr	r5, [r3, #0]
 8004fe2:	e002      	b.n	8004fea <_printf_i+0xf2>
 8004fe4:	0669      	lsls	r1, r5, #25
 8004fe6:	d5fb      	bpl.n	8004fe0 <_printf_i+0xe8>
 8004fe8:	881d      	ldrh	r5, [r3, #0]
 8004fea:	4854      	ldr	r0, [pc, #336]	; (800513c <_printf_i+0x244>)
 8004fec:	2f6f      	cmp	r7, #111	; 0x6f
 8004fee:	bf0c      	ite	eq
 8004ff0:	2308      	moveq	r3, #8
 8004ff2:	230a      	movne	r3, #10
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ffa:	6866      	ldr	r6, [r4, #4]
 8004ffc:	60a6      	str	r6, [r4, #8]
 8004ffe:	2e00      	cmp	r6, #0
 8005000:	bfa2      	ittt	ge
 8005002:	6821      	ldrge	r1, [r4, #0]
 8005004:	f021 0104 	bicge.w	r1, r1, #4
 8005008:	6021      	strge	r1, [r4, #0]
 800500a:	b90d      	cbnz	r5, 8005010 <_printf_i+0x118>
 800500c:	2e00      	cmp	r6, #0
 800500e:	d04d      	beq.n	80050ac <_printf_i+0x1b4>
 8005010:	4616      	mov	r6, r2
 8005012:	fbb5 f1f3 	udiv	r1, r5, r3
 8005016:	fb03 5711 	mls	r7, r3, r1, r5
 800501a:	5dc7      	ldrb	r7, [r0, r7]
 800501c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005020:	462f      	mov	r7, r5
 8005022:	42bb      	cmp	r3, r7
 8005024:	460d      	mov	r5, r1
 8005026:	d9f4      	bls.n	8005012 <_printf_i+0x11a>
 8005028:	2b08      	cmp	r3, #8
 800502a:	d10b      	bne.n	8005044 <_printf_i+0x14c>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	07df      	lsls	r7, r3, #31
 8005030:	d508      	bpl.n	8005044 <_printf_i+0x14c>
 8005032:	6923      	ldr	r3, [r4, #16]
 8005034:	6861      	ldr	r1, [r4, #4]
 8005036:	4299      	cmp	r1, r3
 8005038:	bfde      	ittt	le
 800503a:	2330      	movle	r3, #48	; 0x30
 800503c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005040:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005044:	1b92      	subs	r2, r2, r6
 8005046:	6122      	str	r2, [r4, #16]
 8005048:	f8cd a000 	str.w	sl, [sp]
 800504c:	464b      	mov	r3, r9
 800504e:	aa03      	add	r2, sp, #12
 8005050:	4621      	mov	r1, r4
 8005052:	4640      	mov	r0, r8
 8005054:	f7ff fee2 	bl	8004e1c <_printf_common>
 8005058:	3001      	adds	r0, #1
 800505a:	d14c      	bne.n	80050f6 <_printf_i+0x1fe>
 800505c:	f04f 30ff 	mov.w	r0, #4294967295
 8005060:	b004      	add	sp, #16
 8005062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005066:	4835      	ldr	r0, [pc, #212]	; (800513c <_printf_i+0x244>)
 8005068:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	680e      	ldr	r6, [r1, #0]
 8005070:	061f      	lsls	r7, r3, #24
 8005072:	f856 5b04 	ldr.w	r5, [r6], #4
 8005076:	600e      	str	r6, [r1, #0]
 8005078:	d514      	bpl.n	80050a4 <_printf_i+0x1ac>
 800507a:	07d9      	lsls	r1, r3, #31
 800507c:	bf44      	itt	mi
 800507e:	f043 0320 	orrmi.w	r3, r3, #32
 8005082:	6023      	strmi	r3, [r4, #0]
 8005084:	b91d      	cbnz	r5, 800508e <_printf_i+0x196>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	f023 0320 	bic.w	r3, r3, #32
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	2310      	movs	r3, #16
 8005090:	e7b0      	b.n	8004ff4 <_printf_i+0xfc>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	f043 0320 	orr.w	r3, r3, #32
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	2378      	movs	r3, #120	; 0x78
 800509c:	4828      	ldr	r0, [pc, #160]	; (8005140 <_printf_i+0x248>)
 800509e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050a2:	e7e3      	b.n	800506c <_printf_i+0x174>
 80050a4:	065e      	lsls	r6, r3, #25
 80050a6:	bf48      	it	mi
 80050a8:	b2ad      	uxthmi	r5, r5
 80050aa:	e7e6      	b.n	800507a <_printf_i+0x182>
 80050ac:	4616      	mov	r6, r2
 80050ae:	e7bb      	b.n	8005028 <_printf_i+0x130>
 80050b0:	680b      	ldr	r3, [r1, #0]
 80050b2:	6826      	ldr	r6, [r4, #0]
 80050b4:	6960      	ldr	r0, [r4, #20]
 80050b6:	1d1d      	adds	r5, r3, #4
 80050b8:	600d      	str	r5, [r1, #0]
 80050ba:	0635      	lsls	r5, r6, #24
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	d501      	bpl.n	80050c4 <_printf_i+0x1cc>
 80050c0:	6018      	str	r0, [r3, #0]
 80050c2:	e002      	b.n	80050ca <_printf_i+0x1d2>
 80050c4:	0671      	lsls	r1, r6, #25
 80050c6:	d5fb      	bpl.n	80050c0 <_printf_i+0x1c8>
 80050c8:	8018      	strh	r0, [r3, #0]
 80050ca:	2300      	movs	r3, #0
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	4616      	mov	r6, r2
 80050d0:	e7ba      	b.n	8005048 <_printf_i+0x150>
 80050d2:	680b      	ldr	r3, [r1, #0]
 80050d4:	1d1a      	adds	r2, r3, #4
 80050d6:	600a      	str	r2, [r1, #0]
 80050d8:	681e      	ldr	r6, [r3, #0]
 80050da:	6862      	ldr	r2, [r4, #4]
 80050dc:	2100      	movs	r1, #0
 80050de:	4630      	mov	r0, r6
 80050e0:	f7fb f876 	bl	80001d0 <memchr>
 80050e4:	b108      	cbz	r0, 80050ea <_printf_i+0x1f2>
 80050e6:	1b80      	subs	r0, r0, r6
 80050e8:	6060      	str	r0, [r4, #4]
 80050ea:	6863      	ldr	r3, [r4, #4]
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	2300      	movs	r3, #0
 80050f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f4:	e7a8      	b.n	8005048 <_printf_i+0x150>
 80050f6:	6923      	ldr	r3, [r4, #16]
 80050f8:	4632      	mov	r2, r6
 80050fa:	4649      	mov	r1, r9
 80050fc:	4640      	mov	r0, r8
 80050fe:	47d0      	blx	sl
 8005100:	3001      	adds	r0, #1
 8005102:	d0ab      	beq.n	800505c <_printf_i+0x164>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	079b      	lsls	r3, r3, #30
 8005108:	d413      	bmi.n	8005132 <_printf_i+0x23a>
 800510a:	68e0      	ldr	r0, [r4, #12]
 800510c:	9b03      	ldr	r3, [sp, #12]
 800510e:	4298      	cmp	r0, r3
 8005110:	bfb8      	it	lt
 8005112:	4618      	movlt	r0, r3
 8005114:	e7a4      	b.n	8005060 <_printf_i+0x168>
 8005116:	2301      	movs	r3, #1
 8005118:	4632      	mov	r2, r6
 800511a:	4649      	mov	r1, r9
 800511c:	4640      	mov	r0, r8
 800511e:	47d0      	blx	sl
 8005120:	3001      	adds	r0, #1
 8005122:	d09b      	beq.n	800505c <_printf_i+0x164>
 8005124:	3501      	adds	r5, #1
 8005126:	68e3      	ldr	r3, [r4, #12]
 8005128:	9903      	ldr	r1, [sp, #12]
 800512a:	1a5b      	subs	r3, r3, r1
 800512c:	42ab      	cmp	r3, r5
 800512e:	dcf2      	bgt.n	8005116 <_printf_i+0x21e>
 8005130:	e7eb      	b.n	800510a <_printf_i+0x212>
 8005132:	2500      	movs	r5, #0
 8005134:	f104 0619 	add.w	r6, r4, #25
 8005138:	e7f5      	b.n	8005126 <_printf_i+0x22e>
 800513a:	bf00      	nop
 800513c:	080053fd 	.word	0x080053fd
 8005140:	0800540e 	.word	0x0800540e

08005144 <_sbrk_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4d06      	ldr	r5, [pc, #24]	; (8005160 <_sbrk_r+0x1c>)
 8005148:	2300      	movs	r3, #0
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	602b      	str	r3, [r5, #0]
 8005150:	f7fc f860 	bl	8001214 <_sbrk>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d102      	bne.n	800515e <_sbrk_r+0x1a>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	b103      	cbz	r3, 800515e <_sbrk_r+0x1a>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	200002bc 	.word	0x200002bc

08005164 <__sread>:
 8005164:	b510      	push	{r4, lr}
 8005166:	460c      	mov	r4, r1
 8005168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516c:	f000 f8a0 	bl	80052b0 <_read_r>
 8005170:	2800      	cmp	r0, #0
 8005172:	bfab      	itete	ge
 8005174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005176:	89a3      	ldrhlt	r3, [r4, #12]
 8005178:	181b      	addge	r3, r3, r0
 800517a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800517e:	bfac      	ite	ge
 8005180:	6563      	strge	r3, [r4, #84]	; 0x54
 8005182:	81a3      	strhlt	r3, [r4, #12]
 8005184:	bd10      	pop	{r4, pc}

08005186 <__swrite>:
 8005186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518a:	461f      	mov	r7, r3
 800518c:	898b      	ldrh	r3, [r1, #12]
 800518e:	05db      	lsls	r3, r3, #23
 8005190:	4605      	mov	r5, r0
 8005192:	460c      	mov	r4, r1
 8005194:	4616      	mov	r6, r2
 8005196:	d505      	bpl.n	80051a4 <__swrite+0x1e>
 8005198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519c:	2302      	movs	r3, #2
 800519e:	2200      	movs	r2, #0
 80051a0:	f000 f868 	bl	8005274 <_lseek_r>
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ae:	81a3      	strh	r3, [r4, #12]
 80051b0:	4632      	mov	r2, r6
 80051b2:	463b      	mov	r3, r7
 80051b4:	4628      	mov	r0, r5
 80051b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ba:	f000 b817 	b.w	80051ec <_write_r>

080051be <__sseek>:
 80051be:	b510      	push	{r4, lr}
 80051c0:	460c      	mov	r4, r1
 80051c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c6:	f000 f855 	bl	8005274 <_lseek_r>
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	bf15      	itete	ne
 80051d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80051d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051da:	81a3      	strheq	r3, [r4, #12]
 80051dc:	bf18      	it	ne
 80051de:	81a3      	strhne	r3, [r4, #12]
 80051e0:	bd10      	pop	{r4, pc}

080051e2 <__sclose>:
 80051e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e6:	f000 b813 	b.w	8005210 <_close_r>
	...

080051ec <_write_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4d07      	ldr	r5, [pc, #28]	; (800520c <_write_r+0x20>)
 80051f0:	4604      	mov	r4, r0
 80051f2:	4608      	mov	r0, r1
 80051f4:	4611      	mov	r1, r2
 80051f6:	2200      	movs	r2, #0
 80051f8:	602a      	str	r2, [r5, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f7fb ffb9 	bl	8001172 <_write>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d102      	bne.n	800520a <_write_r+0x1e>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	b103      	cbz	r3, 800520a <_write_r+0x1e>
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	200002bc 	.word	0x200002bc

08005210 <_close_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4d06      	ldr	r5, [pc, #24]	; (800522c <_close_r+0x1c>)
 8005214:	2300      	movs	r3, #0
 8005216:	4604      	mov	r4, r0
 8005218:	4608      	mov	r0, r1
 800521a:	602b      	str	r3, [r5, #0]
 800521c:	f7fb ffc5 	bl	80011aa <_close>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_close_r+0x1a>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_close_r+0x1a>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	200002bc 	.word	0x200002bc

08005230 <_fstat_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d07      	ldr	r5, [pc, #28]	; (8005250 <_fstat_r+0x20>)
 8005234:	2300      	movs	r3, #0
 8005236:	4604      	mov	r4, r0
 8005238:	4608      	mov	r0, r1
 800523a:	4611      	mov	r1, r2
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	f7fb ffc0 	bl	80011c2 <_fstat>
 8005242:	1c43      	adds	r3, r0, #1
 8005244:	d102      	bne.n	800524c <_fstat_r+0x1c>
 8005246:	682b      	ldr	r3, [r5, #0]
 8005248:	b103      	cbz	r3, 800524c <_fstat_r+0x1c>
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	bd38      	pop	{r3, r4, r5, pc}
 800524e:	bf00      	nop
 8005250:	200002bc 	.word	0x200002bc

08005254 <_isatty_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	; (8005270 <_isatty_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fb ffbf 	bl	80011e2 <_isatty>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_isatty_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_isatty_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	200002bc 	.word	0x200002bc

08005274 <_lseek_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d07      	ldr	r5, [pc, #28]	; (8005294 <_lseek_r+0x20>)
 8005278:	4604      	mov	r4, r0
 800527a:	4608      	mov	r0, r1
 800527c:	4611      	mov	r1, r2
 800527e:	2200      	movs	r2, #0
 8005280:	602a      	str	r2, [r5, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	f7fb ffb8 	bl	80011f8 <_lseek>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_lseek_r+0x1e>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	b103      	cbz	r3, 8005292 <_lseek_r+0x1e>
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	200002bc 	.word	0x200002bc

08005298 <__malloc_lock>:
 8005298:	4801      	ldr	r0, [pc, #4]	; (80052a0 <__malloc_lock+0x8>)
 800529a:	f7ff bb55 	b.w	8004948 <__retarget_lock_acquire_recursive>
 800529e:	bf00      	nop
 80052a0:	200002b4 	.word	0x200002b4

080052a4 <__malloc_unlock>:
 80052a4:	4801      	ldr	r0, [pc, #4]	; (80052ac <__malloc_unlock+0x8>)
 80052a6:	f7ff bb50 	b.w	800494a <__retarget_lock_release_recursive>
 80052aa:	bf00      	nop
 80052ac:	200002b4 	.word	0x200002b4

080052b0 <_read_r>:
 80052b0:	b538      	push	{r3, r4, r5, lr}
 80052b2:	4d07      	ldr	r5, [pc, #28]	; (80052d0 <_read_r+0x20>)
 80052b4:	4604      	mov	r4, r0
 80052b6:	4608      	mov	r0, r1
 80052b8:	4611      	mov	r1, r2
 80052ba:	2200      	movs	r2, #0
 80052bc:	602a      	str	r2, [r5, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	f7fb ff3a 	bl	8001138 <_read>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_read_r+0x1e>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_read_r+0x1e>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	200002bc 	.word	0x200002bc

080052d4 <_init>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	bf00      	nop
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr

080052e0 <_fini>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr
