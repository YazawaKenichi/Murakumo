
cube_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800526c  0800526c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800526c  0800526c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005274  08005274  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800527c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000240  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b0  200002b0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010753  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001f65  00000000  00000000  000307f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000e10  00000000  00000000  00032758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d48  00000000  00000000  00033568  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00021616  00000000  00000000  000342b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000bcbe  00000000  00000000  000558c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ce071  00000000  00000000  00061584  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012f5f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004270  00000000  00000000  0012f670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005120 	.word	0x08005120

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005120 	.word	0x08005120

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
static void MX_TIM6_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f003 fb76 	bl	8003c72 <HAL_UART_Transmit>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200001d4 	.word	0x200001d4

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fe53 	bl	8001244 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f85f 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fa8b 	bl	8000abc <MX_GPIO_Init>
  MX_TIM4_Init();
 80005a6:	f000 f96f 	bl	8000888 <MX_TIM4_Init>
  MX_TIM2_Init();
 80005aa:	f000 f915 	bl	80007d8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80005ae:	f000 f8c1 	bl	8000734 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80005b2:	f000 fa39 	bl	8000a28 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80005b6:	f000 f9cb 	bl	8000950 <MX_TIM6_Init>
  MX_DMA_Init();
 80005ba:	f000 fa5f 	bl	8000a7c <MX_DMA_Init>
  MX_TIM7_Init();
 80005be:	f000 f9fd 	bl	80009bc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 80005c2:	481f      	ldr	r0, [pc, #124]	; (8000640 <main+0xac>)
 80005c4:	f003 fed8 	bl	8004378 <puts>

	printf("Push Switch ...\r\n");
 80005c8:	481e      	ldr	r0, [pc, #120]	; (8000644 <main+0xb0>)
 80005ca:	f003 fed5 	bl	8004378 <puts>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 80005ce:	e002      	b.n	80005d6 <main+0x42>
	{
	  HAL_Delay(100);
 80005d0:	2064      	movs	r0, #100	; 0x64
 80005d2:	f000 fea9 	bl	8001328 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 80005d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005da:	481b      	ldr	r0, [pc, #108]	; (8000648 <main+0xb4>)
 80005dc:	f002 f8e8 	bl	80027b0 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1f4      	bne.n	80005d0 <main+0x3c>
	}

  printf("Starting Analog Read\r\n");
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <main+0xb8>)
 80005e8:	f003 fec6 	bl	8004378 <puts>
//  if(HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
//  if(HAL_ADCE1_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) { Error_Handler(); }
//  if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

	printf("Starting Analog DMA\r\n");
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <main+0xbc>)
 80005ee:	f003 fec3 	bl	8004378 <puts>
	HAL_Delay(100);
 80005f2:	2064      	movs	r0, #100	; 0x64
 80005f4:	f000 fe98 	bl	8001328 <HAL_Delay>
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, 1) != HAL_OK) { Error_Handler(); }
 80005f8:	2201      	movs	r2, #1
 80005fa:	4916      	ldr	r1, [pc, #88]	; (8000654 <main+0xc0>)
 80005fc:	4816      	ldr	r0, [pc, #88]	; (8000658 <main+0xc4>)
 80005fe:	f000 fef9 	bl	80013f4 <HAL_ADC_Start_DMA>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <main+0x78>
 8000608:	f000 fb2c 	bl	8000c64 <Error_Handler>
	HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f000 fe8b 	bl	8001328 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int channel = 0; channel < ADC_CONVERTED_DATA_BUFFER_SIZE; channel++)
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	e00b      	b.n	8000630 <main+0x9c>
	  {
		  printf("ADC CH%2d Value is %d\r\n", channel, analog[channel]);
 8000618:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <main+0xc0>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000620:	461a      	mov	r2, r3
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <main+0xc8>)
 8000626:	f003 fe33 	bl	8004290 <iprintf>
	  for(int channel = 0; channel < ADC_CONVERTED_DATA_BUFFER_SIZE; channel++)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3301      	adds	r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	ddf0      	ble.n	8000618 <main+0x84>
	  }

	  HAL_Delay(500);
 8000636:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063a:	f000 fe75 	bl	8001328 <HAL_Delay>
	  for(int channel = 0; channel < ADC_CONVERTED_DATA_BUFFER_SIZE; channel++)
 800063e:	e7e8      	b.n	8000612 <main+0x7e>
 8000640:	08005138 	.word	0x08005138
 8000644:	08005158 	.word	0x08005158
 8000648:	40020800 	.word	0x40020800
 800064c:	0800516c 	.word	0x0800516c
 8000650:	08005184 	.word	0x08005184
 8000654:	2000008c 	.word	0x2000008c
 8000658:	200000e4 	.word	0x200000e4
 800065c:	0800519c 	.word	0x0800519c

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fe06 	bl	8004280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d4:	23a8      	movs	r3, #168	; 0xa8
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f895 	bl	8002814 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 fab8 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f002 faf6 	bl	8002d04 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071e:	f000 faa1 	bl	8000c64 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_ADC1_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_ADC1_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0x98>)
 800074e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000752:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0x98>)
 800075c:	2201      	movs	r2, #1
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ADC1_Init+0x98>)
 8000762:	2201      	movs	r2, #1
 8000764:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_ADC1_Init+0x98>)
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xa0>)
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ADC1_Init+0x98>)
 8000788:	2201      	movs	r2, #1
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_ADC1_Init+0x98>)
 8000796:	f000 fde9 	bl	800136c <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 fa60 	bl	8000c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007ac:	2307      	movs	r3, #7
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_ADC1_Init+0x98>)
 80007b6:	f000 ff41 	bl	800163c <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c0:	f000 fa50 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000e4 	.word	0x200000e4
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_TIM2_Init+0xac>)
 80007fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000800:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_TIM2_Init+0xac>)
 8000804:	2201      	movs	r2, #1
 8000806:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_TIM2_Init+0xac>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1679;
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_TIM2_Init+0xac>)
 8000810:	f240 628f 	movw	r2, #1679	; 0x68f
 8000814:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_TIM2_Init+0xac>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM2_Init+0xac>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_TIM2_Init+0xac>)
 8000824:	f002 fcad 	bl	8003182 <HAL_TIM_PWM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800082e:	f000 fa19 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4619      	mov	r1, r3
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <MX_TIM2_Init+0xac>)
 8000842:	f003 f939 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800084c:	f000 fa0a 	bl	8000c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	2360      	movs	r3, #96	; 0x60
 8000852:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <MX_TIM2_Init+0xac>)
 8000868:	f002 fde2 	bl	8003430 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000872:	f000 f9f7 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_TIM2_Init+0xac>)
 8000878:	f000 fb14 	bl	8000ea4 <HAL_TIM_MspPostInit>

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000218 	.word	0x20000218

08000888 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
 80008a6:	615a      	str	r2, [r3, #20]
 80008a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008aa:	4b27      	ldr	r3, [pc, #156]	; (8000948 <MX_TIM4_Init+0xc0>)
 80008ac:	4a27      	ldr	r2, [pc, #156]	; (800094c <MX_TIM4_Init+0xc4>)
 80008ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80008b0:	4b25      	ldr	r3, [pc, #148]	; (8000948 <MX_TIM4_Init+0xc0>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b24      	ldr	r3, [pc, #144]	; (8000948 <MX_TIM4_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 839;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_TIM4_Init+0xc0>)
 80008be:	f240 3247 	movw	r2, #839	; 0x347
 80008c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_TIM4_Init+0xc0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_TIM4_Init+0xc0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008d0:	481d      	ldr	r0, [pc, #116]	; (8000948 <MX_TIM4_Init+0xc0>)
 80008d2:	f002 fc56 	bl	8003182 <HAL_TIM_PWM_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f9c2 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4619      	mov	r1, r3
 80008ee:	4816      	ldr	r0, [pc, #88]	; (8000948 <MX_TIM4_Init+0xc0>)
 80008f0:	f003 f8e2 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80008fa:	f000 f9b3 	bl	8000c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fe:	2360      	movs	r3, #96	; 0x60
 8000900:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_TIM4_Init+0xc0>)
 8000916:	f002 fd8b 	bl	8003430 <HAL_TIM_PWM_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000920:	f000 f9a0 	bl	8000c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2204      	movs	r2, #4
 8000928:	4619      	mov	r1, r3
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <MX_TIM4_Init+0xc0>)
 800092c:	f002 fd80 	bl	8003430 <HAL_TIM_PWM_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000936:	f000 f995 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <MX_TIM4_Init+0xc0>)
 800093c:	f000 fab2 	bl	8000ea4 <HAL_TIM_MspPostInit>

}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000009c 	.word	0x2000009c
 800094c:	40000800 	.word	0x40000800

08000950 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_TIM6_Init+0x64>)
 8000960:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_TIM6_Init+0x68>)
 8000962:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_TIM6_Init+0x64>)
 8000966:	2201      	movs	r2, #1
 8000968:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_TIM6_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8399;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_TIM6_Init+0x64>)
 8000972:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000976:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_TIM6_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_TIM6_Init+0x64>)
 8000980:	f002 fbb0 	bl	80030e4 <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800098a:	f000 f96b 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_TIM6_Init+0x64>)
 800099c:	f003 f88c 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009a6:	f000 f95d 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000018c 	.word	0x2000018c
 80009b8:	40001000 	.word	0x40001000

080009bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009cc:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_TIM7_Init+0x68>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009de:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80009e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_TIM7_Init+0x64>)
 80009ec:	f002 fb7a 	bl	80030e4 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80009f6:	f000 f935 	bl	8000c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <MX_TIM7_Init+0x64>)
 8000a08:	f003 f856 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a12:	f000 f927 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000260 	.word	0x20000260
 8000a24:	40001400 	.word	0x40001400

08000a28 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USART6_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_USART6_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_USART6_UART_Init+0x4c>)
 8000a34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USART6_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USART6_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USART6_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USART6_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USART6_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USART6_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USART6_UART_Init+0x4c>)
 8000a60:	f003 f8ba 	bl	8003bd8 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f000 f8fb 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200001d4 	.word	0x200001d4
 8000a78:	40011400 	.word	0x40011400

08000a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_DMA_Init+0x3c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <MX_DMA_Init+0x3c>)
 8000a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_DMA_Init+0x3c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2038      	movs	r0, #56	; 0x38
 8000aa4:	f001 f945 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aa8:	2038      	movs	r0, #56	; 0x38
 8000aaa:	f001 f95e 	bl	8001d6a <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b59      	ldr	r3, [pc, #356]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a58      	ldr	r2, [pc, #352]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b56      	ldr	r3, [pc, #344]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b52      	ldr	r3, [pc, #328]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a51      	ldr	r2, [pc, #324]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b4f      	ldr	r3, [pc, #316]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b4b      	ldr	r3, [pc, #300]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a4a      	ldr	r2, [pc, #296]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b48      	ldr	r3, [pc, #288]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b44      	ldr	r3, [pc, #272]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a43      	ldr	r2, [pc, #268]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <MX_GPIO_Init+0x180>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8000b48:	483d      	ldr	r0, [pc, #244]	; (8000c40 <MX_GPIO_Init+0x184>)
 8000b4a:	f001 fe49 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b54:	483b      	ldr	r0, [pc, #236]	; (8000c44 <MX_GPIO_Init+0x188>)
 8000b56:	f001 fe43 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000b60:	4839      	ldr	r0, [pc, #228]	; (8000c48 <MX_GPIO_Init+0x18c>)
 8000b62:	f001 fe3d 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2104      	movs	r1, #4
 8000b6a:	4838      	ldr	r0, [pc, #224]	; (8000c4c <MX_GPIO_Init+0x190>)
 8000b6c:	f001 fe38 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8000b70:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	482d      	ldr	r0, [pc, #180]	; (8000c40 <MX_GPIO_Init+0x184>)
 8000b8a:	f001 fc77 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin Rotary2_Pin Rotary8_Pin Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|Rotary2_Pin|Rotary8_Pin|Rotary1_Pin;
 8000b8e:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4827      	ldr	r0, [pc, #156]	; (8000c40 <MX_GPIO_Init+0x184>)
 8000ba4:	f001 fc6a 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8000ba8:	f640 0304 	movw	r3, #2052	; 0x804
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4821      	ldr	r0, [pc, #132]	; (8000c44 <MX_GPIO_Init+0x188>)
 8000bbe:	f001 fc5d 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481a      	ldr	r0, [pc, #104]	; (8000c44 <MX_GPIO_Init+0x188>)
 8000bdc:	f001 fc4e 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000be0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4813      	ldr	r0, [pc, #76]	; (8000c48 <MX_GPIO_Init+0x18c>)
 8000bfa:	f001 fc3f 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_GPIO_Init+0x18c>)
 8000c14:	f001 fc32 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <MX_GPIO_Init+0x190>)
 8000c30:	f001 fc24 	bl	800247c <HAL_GPIO_Init>

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020c00 	.word	0x40020c00

08000c50 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	// ADC END Program
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <Error_Handler+0x6>

08000c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a2f      	ldr	r2, [pc, #188]	; (8000d98 <HAL_ADC_MspInit+0xdc>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d157      	bne.n	8000d8e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <HAL_ADC_MspInit+0xe0>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a2d      	ldr	r2, [pc, #180]	; (8000d9c <HAL_ADC_MspInit+0xe0>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <HAL_ADC_MspInit+0xe0>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <HAL_ADC_MspInit+0xe0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a26      	ldr	r2, [pc, #152]	; (8000d9c <HAL_ADC_MspInit+0xe0>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_ADC_MspInit+0xe0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d16:	2301      	movs	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	481d      	ldr	r0, [pc, #116]	; (8000da0 <HAL_ADC_MspInit+0xe4>)
 8000d2a:	f001 fba7 	bl	800247c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d30:	4a1d      	ldr	r2, [pc, #116]	; (8000da8 <HAL_ADC_MspInit+0xec>)
 8000d32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d74:	f001 f814 	bl	8001da0 <HAL_DMA_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d7e:	f7ff ff71 	bl	8000c64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d86:	639a      	str	r2, [r3, #56]	; 0x38
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_ADC_MspInit+0xe8>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40012000 	.word	0x40012000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	2000012c 	.word	0x2000012c
 8000da8:	40026410 	.word	0x40026410

08000dac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dbc:	d10e      	bne.n	8000ddc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_TIM_PWM_MspInit+0x64>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <HAL_TIM_PWM_MspInit+0x64>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_TIM_PWM_MspInit+0x64>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dda:	e012      	b.n	8000e02 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <HAL_TIM_PWM_MspInit+0x68>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d10d      	bne.n	8000e02 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_TIM_PWM_MspInit+0x64>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_TIM_PWM_MspInit+0x64>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_TIM_PWM_MspInit+0x64>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40000800 	.word	0x40000800

08000e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <HAL_TIM_Base_MspInit+0x80>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d116      	bne.n	8000e58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2036      	movs	r0, #54	; 0x36
 8000e4c:	f000 ff71 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e50:	2036      	movs	r0, #54	; 0x36
 8000e52:	f000 ff8a 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000e56:	e01a      	b.n	8000e8e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_TIM_Base_MspInit+0x88>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d115      	bne.n	8000e8e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e6c:	f043 0320 	orr.w	r3, r3, #32
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_TIM_Base_MspInit+0x84>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2037      	movs	r0, #55	; 0x37
 8000e84:	f000 ff55 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e88:	2037      	movs	r0, #55	; 0x37
 8000e8a:	f000 ff6e 	bl	8001d6a <HAL_NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40001000 	.word	0x40001000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40001400 	.word	0x40001400

08000ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d11f      	bne.n	8000f06 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <HAL_TIM_MspPostInit+0xb0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <HAL_TIM_MspPostInit+0xb0>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_TIM_MspPostInit+0xb0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4816      	ldr	r0, [pc, #88]	; (8000f58 <HAL_TIM_MspPostInit+0xb4>)
 8000f00:	f001 fabc 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f04:	e022      	b.n	8000f4c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <HAL_TIM_MspPostInit+0xb8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d11d      	bne.n	8000f4c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_TIM_MspPostInit+0xb0>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_TIM_MspPostInit+0xb0>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_TIM_MspPostInit+0xb0>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8000f2c:	23c0      	movs	r3, #192	; 0xc0
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <HAL_TIM_MspPostInit+0xbc>)
 8000f48:	f001 fa98 	bl	800247c <HAL_GPIO_Init>
}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40000800 	.word	0x40000800
 8000f60:	40020400 	.word	0x40020400

08000f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_UART_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12b      	bne.n	8000fde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f90:	f043 0320 	orr.w	r3, r3, #32
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f003 0320 	and.w	r3, r3, #32
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fbe:	23c0      	movs	r3, #192	; 0xc0
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000fda:	f001 fa4f 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40011400 	.word	0x40011400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020800 	.word	0x40020800

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001040:	f000 f952 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <TIM6_DAC_IRQHandler+0x10>)
 800104e:	f002 f8e7 	bl	8003220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000018c 	.word	0x2000018c

0800105c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM7_IRQHandler+0x10>)
 8001062:	f002 f8dd 	bl	8003220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000260 	.word	0x20000260

08001070 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <DMA2_Stream0_IRQHandler+0x10>)
 8001076:	f000 ff99 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000012c 	.word	0x2000012c

08001084 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e00a      	b.n	80010ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001096:	f3af 8000 	nop.w
 800109a:	4601      	mov	r1, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf0      	blt.n	8001096 <_read+0x12>
	}

return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e009      	b.n	80010e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa49 	bl	8000570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf1      	blt.n	80010d0 <_write+0x12>
	}
	return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_close>:

int _close(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
	return -1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111e:	605a      	str	r2, [r3, #4]
	return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_isatty>:

int _isatty(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
	return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f003 f84c 	bl	800422c <__errno>
 8001194:	4602      	mov	r2, r0
 8001196:	230c      	movs	r3, #12
 8001198:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20020000 	.word	0x20020000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	20000090 	.word	0x20000090
 80011c8:	200002b0 	.word	0x200002b0

080011cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001228 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011f6:	490e      	ldr	r1, [pc, #56]	; (8001230 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800120c:	4c0b      	ldr	r4, [pc, #44]	; (800123c <LoopFillZerobss+0x26>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800121a:	f7ff ffd7 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121e:	f003 f80b 	bl	8004238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001222:	f7ff f9b7 	bl	8000594 <main>
  bx  lr    
 8001226:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001234:	0800527c 	.word	0x0800527c
  ldr r2, =_sbss
 8001238:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800123c:	200002b0 	.word	0x200002b0

08001240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC_IRQHandler>
	...

08001244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <HAL_Init+0x40>)
 800124e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_Init+0x40>)
 800125a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_Init+0x40>)
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 fd55 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001272:	200f      	movs	r0, #15
 8001274:	f000 f808 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f7ff fcf8 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023c00 	.word	0x40023c00

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x54>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x58>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fd6d 	bl	8001d86 <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 fd35 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_InitTick+0x5c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000004 	.word	0x20000004

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008
 800130c:	200002a8 	.word	0x200002a8

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	200002a8 	.word	0x200002a8

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff ffee 	bl	8001310 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_Delay+0x40>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffde 	bl	8001310 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000008 	.word	0x20000008

0800136c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e033      	b.n	80013ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fc96 	bl	8000cbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d118      	bne.n	80013dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013b2:	f023 0302 	bic.w	r3, r3, #2
 80013b6:	f043 0202 	orr.w	r2, r3, #2
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 fa5e 	bl	8001880 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f023 0303 	bic.w	r3, r3, #3
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
 80013da:	e001      	b.n	80013e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_ADC_Start_DMA+0x1e>
 800140e:	2302      	movs	r3, #2
 8001410:	e0e9      	b.n	80015e6 <HAL_ADC_Start_DMA+0x1f2>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b01      	cmp	r3, #1
 8001426:	d018      	beq.n	800145a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001438:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <HAL_ADC_Start_DMA+0x1fc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a6d      	ldr	r2, [pc, #436]	; (80015f4 <HAL_ADC_Start_DMA+0x200>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0c9a      	lsrs	r2, r3, #18
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800144c:	e002      	b.n	8001454 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	3b01      	subs	r3, #1
 8001452:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f9      	bne.n	800144e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001468:	d107      	bne.n	800147a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001478:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	f040 80a1 	bne.w	80015cc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014c8:	d106      	bne.n	80014d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f023 0206 	bic.w	r2, r3, #6
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
 80014d6:	e002      	b.n	80014de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <HAL_ADC_Start_DMA+0x204>)
 80014e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	4a43      	ldr	r2, [pc, #268]	; (80015fc <HAL_ADC_Start_DMA+0x208>)
 80014f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	4a42      	ldr	r2, [pc, #264]	; (8001600 <HAL_ADC_Start_DMA+0x20c>)
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fe:	4a41      	ldr	r2, [pc, #260]	; (8001604 <HAL_ADC_Start_DMA+0x210>)
 8001500:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800150a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800151a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800152a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	334c      	adds	r3, #76	; 0x4c
 8001536:	4619      	mov	r1, r3
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f000 fcde 	bl	8001efc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2b00      	cmp	r3, #0
 800154a:	d12a      	bne.n	80015a2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2d      	ldr	r2, [pc, #180]	; (8001608 <HAL_ADC_Start_DMA+0x214>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d015      	beq.n	8001582 <HAL_ADC_Start_DMA+0x18e>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a2c      	ldr	r2, [pc, #176]	; (800160c <HAL_ADC_Start_DMA+0x218>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d105      	bne.n	800156c <HAL_ADC_Start_DMA+0x178>
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_ADC_Start_DMA+0x204>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00a      	beq.n	8001582 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <HAL_ADC_Start_DMA+0x21c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d136      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HAL_ADC_Start_DMA+0x204>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	2b0f      	cmp	r3, #15
 8001580:	d830      	bhi.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d129      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	e020      	b.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a18      	ldr	r2, [pc, #96]	; (8001608 <HAL_ADC_Start_DMA+0x214>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d11b      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d114      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	e00b      	b.n	80015e4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f043 0210 	orr.w	r2, r3, #16
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000000 	.word	0x20000000
 80015f4:	431bde83 	.word	0x431bde83
 80015f8:	40012300 	.word	0x40012300
 80015fc:	08001a79 	.word	0x08001a79
 8001600:	08001b33 	.word	0x08001b33
 8001604:	08001b4f 	.word	0x08001b4f
 8001608:	40012000 	.word	0x40012000
 800160c:	40012100 	.word	0x40012100
 8001610:	40012200 	.word	0x40012200

08001614 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x1c>
 8001654:	2302      	movs	r3, #2
 8001656:	e105      	b.n	8001864 <HAL_ADC_ConfigChannel+0x228>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b09      	cmp	r3, #9
 8001666:	d925      	bls.n	80016b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68d9      	ldr	r1, [r3, #12]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	3b1e      	subs	r3, #30
 800167e:	2207      	movs	r2, #7
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43da      	mvns	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	400a      	ands	r2, r1
 800168c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68d9      	ldr	r1, [r3, #12]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	4603      	mov	r3, r0
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4403      	add	r3, r0
 80016a6:	3b1e      	subs	r3, #30
 80016a8:	409a      	lsls	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	e022      	b.n	80016fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6919      	ldr	r1, [r3, #16]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	2207      	movs	r2, #7
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	400a      	ands	r2, r1
 80016d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6919      	ldr	r1, [r3, #16]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4403      	add	r3, r0
 80016f0:	409a      	lsls	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d824      	bhi.n	800174c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	3b05      	subs	r3, #5
 8001714:	221f      	movs	r2, #31
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	400a      	ands	r2, r1
 8001722:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b05      	subs	r3, #5
 800173e:	fa00 f203 	lsl.w	r2, r0, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
 800174a:	e04c      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d824      	bhi.n	800179e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b23      	subs	r3, #35	; 0x23
 8001766:	221f      	movs	r2, #31
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43da      	mvns	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	400a      	ands	r2, r1
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	3b23      	subs	r3, #35	; 0x23
 8001790:	fa00 f203 	lsl.w	r2, r0, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
 800179c:	e023      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3b41      	subs	r3, #65	; 0x41
 80017b0:	221f      	movs	r2, #31
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	400a      	ands	r2, r1
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	3b41      	subs	r3, #65	; 0x41
 80017da:	fa00 f203 	lsl.w	r2, r0, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e6:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_ADC_ConfigChannel+0x234>)
 80017e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_ADC_ConfigChannel+0x238>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d109      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1cc>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b12      	cmp	r3, #18
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_ADC_ConfigChannel+0x238>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d123      	bne.n	800185a <HAL_ADC_ConfigChannel+0x21e>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b10      	cmp	r3, #16
 8001818:	d003      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x1e6>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b11      	cmp	r3, #17
 8001820:	d11b      	bne.n	800185a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b10      	cmp	r3, #16
 8001834:	d111      	bne.n	800185a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_ADC_ConfigChannel+0x23c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_ADC_ConfigChannel+0x240>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	0c9a      	lsrs	r2, r3, #18
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800184c:	e002      	b.n	8001854 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3b01      	subs	r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f9      	bne.n	800184e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40012300 	.word	0x40012300
 8001874:	40012000 	.word	0x40012000
 8001878:	20000000 	.word	0x20000000
 800187c:	431bde83 	.word	0x431bde83

08001880 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001888:	4b79      	ldr	r3, [pc, #484]	; (8001a70 <ADC_Init+0x1f0>)
 800188a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	021a      	lsls	r2, r3, #8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6899      	ldr	r1, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	4a58      	ldr	r2, [pc, #352]	; (8001a74 <ADC_Init+0x1f4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d022      	beq.n	800195e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001926:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6899      	ldr	r1, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6899      	ldr	r1, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e00f      	b.n	800197e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800196c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800197c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0202 	bic.w	r2, r2, #2
 800198c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6899      	ldr	r1, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e1b      	ldrb	r3, [r3, #24]
 8001998:	005a      	lsls	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01b      	beq.n	80019e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6859      	ldr	r1, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	3b01      	subs	r3, #1
 80019d8:	035a      	lsls	r2, r3, #13
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	e007      	b.n	80019f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	051a      	lsls	r2, r3, #20
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6899      	ldr	r1, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a36:	025a      	lsls	r2, r3, #9
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6899      	ldr	r1, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	029a      	lsls	r2, r3, #10
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	609a      	str	r2, [r3, #8]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40012300 	.word	0x40012300
 8001a74:	0f000001 	.word	0x0f000001

08001a78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d13c      	bne.n	8001b0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d12b      	bne.n	8001b04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d127      	bne.n	8001b04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d119      	bne.n	8001b04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0220 	bic.w	r2, r2, #32
 8001ade:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d105      	bne.n	8001b04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f7ff f8a3 	bl	8000c50 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b0a:	e00e      	b.n	8001b2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7ff fd85 	bl	8001628 <HAL_ADC_ErrorCallback>
}
 8001b1e:	e004      	b.n	8001b2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff fd67 	bl	8001614 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f043 0204 	orr.w	r2, r3, #4
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7ff fd5a 	bl	8001628 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff3e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff8e 	bl	8001c70 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff31 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff fab0 	bl	8001310 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e099      	b.n	8001ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ddc:	e00f      	b.n	8001dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dde:	f7ff fa97 	bl	8001310 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d908      	bls.n	8001dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e078      	b.n	8001ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e8      	bne.n	8001dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_DMA_Init+0x158>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d107      	bne.n	8001e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4313      	orrs	r3, r2
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f023 0307 	bic.w	r3, r3, #7
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d117      	bne.n	8001ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fa6f 	bl	8002388 <DMA_CheckFifoParam>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e016      	b.n	8001ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fa26 	bl	800231c <DMA_CalcBaseAndBitshift>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	223f      	movs	r2, #63	; 0x3f
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	f010803f 	.word	0xf010803f

08001efc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_DMA_Start_IT+0x26>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e040      	b.n	8001fa4 <HAL_DMA_Start_IT+0xa8>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d12f      	bne.n	8001f96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f9b8 	bl	80022c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	223f      	movs	r2, #63	; 0x3f
 8001f56:	409a      	lsls	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0216 	orr.w	r2, r2, #22
 8001f6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e005      	b.n	8001fa2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fb8:	4b92      	ldr	r3, [pc, #584]	; (8002204 <HAL_DMA_IRQHandler+0x258>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a92      	ldr	r2, [pc, #584]	; (8002208 <HAL_DMA_IRQHandler+0x25c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2208      	movs	r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2201      	movs	r2, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2201      	movs	r2, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2204      	movs	r2, #4
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2204      	movs	r2, #4
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2210      	movs	r2, #16
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03c      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2210      	movs	r2, #16
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
 80020da:	e01f      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e016      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2220      	movs	r2, #32
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 808e 	beq.w	800224a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8086 	beq.w	800224a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2220      	movs	r2, #32
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d136      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0216 	bic.w	r2, r2, #22
 8002164:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002174:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_DMA_IRQHandler+0x1da>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	223f      	movs	r2, #63	; 0x3f
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07d      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
        }
        return;
 80021c2:	e078      	b.n	80022b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01c      	beq.n	800220c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d030      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e02b      	b.n	800224a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d027      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
 8002202:	e022      	b.n	800224a <HAL_DMA_IRQHandler+0x29e>
 8002204:	20000000 	.word	0x20000000
 8002208:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0210 	bic.w	r2, r2, #16
 8002228:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	2b00      	cmp	r3, #0
 8002250:	d032      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d022      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2205      	movs	r2, #5
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3301      	adds	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	429a      	cmp	r2, r3
 8002280:	d307      	bcc.n	8002292 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f2      	bne.n	8002276 <HAL_DMA_IRQHandler+0x2ca>
 8002290:	e000      	b.n	8002294 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002292:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
 80022b4:	e000      	b.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022b6:	bf00      	nop
    }
  }
}
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop

080022c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d108      	bne.n	8002300 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022fe:	e007      	b.n	8002310 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3b10      	subs	r3, #16
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <DMA_CalcBaseAndBitshift+0x64>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002336:	4a13      	ldr	r2, [pc, #76]	; (8002384 <DMA_CalcBaseAndBitshift+0x68>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d909      	bls.n	800235e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	1d1a      	adds	r2, r3, #4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58
 800235c:	e007      	b.n	800236e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	aaaaaaab 	.word	0xaaaaaaab
 8002384:	080051cc 	.word	0x080051cc

08002388 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11f      	bne.n	80023e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d855      	bhi.n	8002454 <DMA_CheckFifoParam+0xcc>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <DMA_CheckFifoParam+0x28>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023d3 	.word	0x080023d3
 80023b8:	080023c1 	.word	0x080023c1
 80023bc:	08002455 	.word	0x08002455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d045      	beq.n	8002458 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e042      	b.n	8002458 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023da:	d13f      	bne.n	800245c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e03c      	b.n	800245c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ea:	d121      	bne.n	8002430 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d836      	bhi.n	8002460 <DMA_CheckFifoParam+0xd8>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <DMA_CheckFifoParam+0x70>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002409 	.word	0x08002409
 80023fc:	0800240f 	.word	0x0800240f
 8002400:	08002409 	.word	0x08002409
 8002404:	08002421 	.word	0x08002421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e02f      	b.n	800246e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d024      	beq.n	8002464 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241e:	e021      	b.n	8002464 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002428:	d11e      	bne.n	8002468 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800242e:	e01b      	b.n	8002468 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d902      	bls.n	800243c <DMA_CheckFifoParam+0xb4>
 8002436:	2b03      	cmp	r3, #3
 8002438:	d003      	beq.n	8002442 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800243a:	e018      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      break;
 8002440:	e015      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00e      	beq.n	800246c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      break;
 8002452:	e00b      	b.n	800246c <DMA_CheckFifoParam+0xe4>
      break;
 8002454:	bf00      	nop
 8002456:	e00a      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 8002458:	bf00      	nop
 800245a:	e008      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 800245c:	bf00      	nop
 800245e:	e006      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 8002460:	bf00      	nop
 8002462:	e004      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 8002464:	bf00      	nop
 8002466:	e002      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;   
 8002468:	bf00      	nop
 800246a:	e000      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 800246c:	bf00      	nop
    }
  } 
  
  return status; 
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e16b      	b.n	8002770 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 815a 	bne.w	800276a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d017      	beq.n	800256c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d123      	bne.n	80025c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80b4 	beq.w	800276a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b5f      	ldr	r3, [pc, #380]	; (8002784 <HAL_GPIO_Init+0x308>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a5e      	ldr	r2, [pc, #376]	; (8002784 <HAL_GPIO_Init+0x308>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <HAL_GPIO_Init+0x308>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <HAL_GPIO_Init+0x30c>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a51      	ldr	r2, [pc, #324]	; (800278c <HAL_GPIO_Init+0x310>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <HAL_GPIO_Init+0x226>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a50      	ldr	r2, [pc, #320]	; (8002790 <HAL_GPIO_Init+0x314>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d025      	beq.n	800269e <HAL_GPIO_Init+0x222>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4f      	ldr	r2, [pc, #316]	; (8002794 <HAL_GPIO_Init+0x318>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <HAL_GPIO_Init+0x21e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_GPIO_Init+0x31c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x21a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4d      	ldr	r2, [pc, #308]	; (800279c <HAL_GPIO_Init+0x320>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x216>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4c      	ldr	r2, [pc, #304]	; (80027a0 <HAL_GPIO_Init+0x324>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x212>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4b      	ldr	r2, [pc, #300]	; (80027a4 <HAL_GPIO_Init+0x328>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x20e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4a      	ldr	r2, [pc, #296]	; (80027a8 <HAL_GPIO_Init+0x32c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x20a>
 8002682:	2307      	movs	r3, #7
 8002684:	e00e      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002686:	2308      	movs	r3, #8
 8002688:	e00c      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800268a:	2306      	movs	r3, #6
 800268c:	e00a      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800268e:	2305      	movs	r3, #5
 8002690:	e008      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002692:	2304      	movs	r3, #4
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 8002696:	2303      	movs	r3, #3
 8002698:	e004      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800269a:	2302      	movs	r3, #2
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_GPIO_Init+0x228>
 80026a2:	2300      	movs	r3, #0
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	f002 0203 	and.w	r2, r2, #3
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	4093      	lsls	r3, r2
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b4:	4934      	ldr	r1, [pc, #208]	; (8002788 <HAL_GPIO_Init+0x30c>)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	3302      	adds	r3, #2
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c2:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <HAL_GPIO_Init+0x330>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e6:	4a31      	ldr	r2, [pc, #196]	; (80027ac <HAL_GPIO_Init+0x330>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026ec:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <HAL_GPIO_Init+0x330>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <HAL_GPIO_Init+0x330>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002716:	4b25      	ldr	r3, [pc, #148]	; (80027ac <HAL_GPIO_Init+0x330>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <HAL_GPIO_Init+0x330>)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_GPIO_Init+0x330>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002764:	4a11      	ldr	r2, [pc, #68]	; (80027ac <HAL_GPIO_Init+0x330>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	f67f ae90 	bls.w	8002498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002778:	bf00      	nop
 800277a:	3724      	adds	r7, #36	; 0x24
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40023800 	.word	0x40023800
 8002788:	40013800 	.word	0x40013800
 800278c:	40020000 	.word	0x40020000
 8002790:	40020400 	.word	0x40020400
 8002794:	40020800 	.word	0x40020800
 8002798:	40020c00 	.word	0x40020c00
 800279c:	40021000 	.word	0x40021000
 80027a0:	40021400 	.word	0x40021400
 80027a4:	40021800 	.word	0x40021800
 80027a8:	40021c00 	.word	0x40021c00
 80027ac:	40013c00 	.word	0x40013c00

080027b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	e001      	b.n	80027d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027fc:	e003      	b.n	8002806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	041a      	lsls	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	619a      	str	r2, [r3, #24]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e264      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d075      	beq.n	800291e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002832:	4ba3      	ldr	r3, [pc, #652]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00c      	beq.n	8002858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4ba0      	ldr	r3, [pc, #640]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002846:	2b08      	cmp	r3, #8
 8002848:	d112      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b9d      	ldr	r3, [pc, #628]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002856:	d10b      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	4b99      	ldr	r3, [pc, #612]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05b      	beq.n	800291c <HAL_RCC_OscConfig+0x108>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d157      	bne.n	800291c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e23f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d106      	bne.n	8002888 <HAL_RCC_OscConfig+0x74>
 800287a:	4b91      	ldr	r3, [pc, #580]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a90      	ldr	r2, [pc, #576]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b8b      	ldr	r3, [pc, #556]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a8a      	ldr	r2, [pc, #552]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b88      	ldr	r3, [pc, #544]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a87      	ldr	r2, [pc, #540]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 80028ac:	4b84      	ldr	r3, [pc, #528]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a83      	ldr	r2, [pc, #524]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a80      	ldr	r2, [pc, #512]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe fd20 	bl	8001310 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fd1c 	bl	8001310 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e204      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xc0>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fd0c 	bl	8001310 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fd08 	bl	8001310 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1f0      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0xe8>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292a:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800293e:	2b08      	cmp	r3, #8
 8002940:	d11c      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b5f      	ldr	r3, [pc, #380]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d116      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	4b5c      	ldr	r3, [pc, #368]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e1c4      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	4b56      	ldr	r3, [pc, #344]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4952      	ldr	r1, [pc, #328]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	e03a      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002984:	4b4f      	ldr	r3, [pc, #316]	; (8002ac4 <HAL_RCC_OscConfig+0x2b0>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe fcc1 	bl	8001310 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002992:	f7fe fcbd 	bl	8001310 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1a5      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4940      	ldr	r1, [pc, #256]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c6:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_RCC_OscConfig+0x2b0>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe fca0 	bl	8001310 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d4:	f7fe fc9c 	bl	8001310 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e184      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d030      	beq.n	8002a60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <HAL_RCC_OscConfig+0x2b4>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe fc80 	bl	8001310 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a14:	f7fe fc7c 	bl	8001310 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e164      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x200>
 8002a32:	e015      	b.n	8002a60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a34:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <HAL_RCC_OscConfig+0x2b4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fc69 	bl	8001310 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a42:	f7fe fc65 	bl	8001310 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e14d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80a0 	beq.w	8002bae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10f      	bne.n	8002a9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x2b8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d121      	bne.n	8002aee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_RCC_OscConfig+0x2b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a07      	ldr	r2, [pc, #28]	; (8002acc <HAL_RCC_OscConfig+0x2b8>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fc2b 	bl	8001310 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e011      	b.n	8002ae2 <HAL_RCC_OscConfig+0x2ce>
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	42470000 	.word	0x42470000
 8002ac8:	42470e80 	.word	0x42470e80
 8002acc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad0:	f7fe fc1e 	bl	8001310 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e106      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae2:	4b85      	ldr	r3, [pc, #532]	; (8002cf8 <HAL_RCC_OscConfig+0x4e4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d106      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
 8002af6:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a80      	ldr	r2, [pc, #512]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	e01c      	b.n	8002b3e <HAL_RCC_OscConfig+0x32a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d10c      	bne.n	8002b26 <HAL_RCC_OscConfig+0x312>
 8002b0c:	4b7b      	ldr	r3, [pc, #492]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a7a      	ldr	r2, [pc, #488]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	4b78      	ldr	r3, [pc, #480]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a77      	ldr	r2, [pc, #476]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	e00b      	b.n	8002b3e <HAL_RCC_OscConfig+0x32a>
 8002b26:	4b75      	ldr	r3, [pc, #468]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a74      	ldr	r2, [pc, #464]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
 8002b32:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a71      	ldr	r2, [pc, #452]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002b38:	f023 0304 	bic.w	r3, r3, #4
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fe fbe3 	bl	8001310 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4e:	f7fe fbdf 	bl	8001310 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0c5      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b64:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ee      	beq.n	8002b4e <HAL_RCC_OscConfig+0x33a>
 8002b70:	e014      	b.n	8002b9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b72:	f7fe fbcd 	bl	8001310 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7fe fbc9 	bl	8001310 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e0af      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b90:	4b5a      	ldr	r3, [pc, #360]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ee      	bne.n	8002b7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d105      	bne.n	8002bae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba2:	4b56      	ldr	r3, [pc, #344]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a55      	ldr	r2, [pc, #340]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 809b 	beq.w	8002cee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d05c      	beq.n	8002c7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d141      	bne.n	8002c50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bcc:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <HAL_RCC_OscConfig+0x4ec>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fb9d 	bl	8001310 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bda:	f7fe fb99 	bl	8001310 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e081      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bec:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f0      	bne.n	8002bda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	019b      	lsls	r3, r3, #6
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	3b01      	subs	r3, #1
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	061b      	lsls	r3, r3, #24
 8002c1c:	4937      	ldr	r1, [pc, #220]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_RCC_OscConfig+0x4ec>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fe fb72 	bl	8001310 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe fb6e 	bl	8001310 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e056      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x41c>
 8002c4e:	e04e      	b.n	8002cee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_OscConfig+0x4ec>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe fb5b 	bl	8001310 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe fb57 	bl	8001310 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e03f      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c70:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x44a>
 8002c7c:	e037      	b.n	8002cee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e032      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HAL_RCC_OscConfig+0x4e8>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d028      	beq.n	8002cea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d121      	bne.n	8002cea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d11a      	bne.n	8002cea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cba:	4013      	ands	r3, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cc0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d111      	bne.n	8002cea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	42470060 	.word	0x42470060

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0cc      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b68      	ldr	r3, [pc, #416]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d90c      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b65      	ldr	r3, [pc, #404]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a52      	ldr	r2, [pc, #328]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d044      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d119      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e06f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e067      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4934      	ldr	r1, [pc, #208]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fe fa8c 	bl	8001310 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe fa88 	bl	8001310 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e04f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d20c      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4601      	mov	r1, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe f9ec 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	080051b4 	.word	0x080051b4
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee6:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d007      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0x32>
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d008      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x38>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f040 80b4 	bne.w	8003064 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b5e      	ldr	r3, [pc, #376]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002efe:	60bb      	str	r3, [r7, #8]
       break;
 8002f00:	e0b3      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f02:	4b5d      	ldr	r3, [pc, #372]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f04:	60bb      	str	r3, [r7, #8]
      break;
 8002f06:	e0b0      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f08:	4b5a      	ldr	r3, [pc, #360]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f12:	4b58      	ldr	r3, [pc, #352]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d04a      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1e:	4b55      	ldr	r3, [pc, #340]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	f04f 0400 	mov.w	r4, #0
 8002f28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	ea03 0501 	and.w	r5, r3, r1
 8002f34:	ea04 0602 	and.w	r6, r4, r2
 8002f38:	4629      	mov	r1, r5
 8002f3a:	4632      	mov	r2, r6
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	f04f 0400 	mov.w	r4, #0
 8002f44:	0154      	lsls	r4, r2, #5
 8002f46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f4a:	014b      	lsls	r3, r1, #5
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4622      	mov	r2, r4
 8002f50:	1b49      	subs	r1, r1, r5
 8002f52:	eb62 0206 	sbc.w	r2, r2, r6
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	f04f 0400 	mov.w	r4, #0
 8002f5e:	0194      	lsls	r4, r2, #6
 8002f60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f64:	018b      	lsls	r3, r1, #6
 8002f66:	1a5b      	subs	r3, r3, r1
 8002f68:	eb64 0402 	sbc.w	r4, r4, r2
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	00e2      	lsls	r2, r4, #3
 8002f76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f7a:	00d9      	lsls	r1, r3, #3
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4614      	mov	r4, r2
 8002f80:	195b      	adds	r3, r3, r5
 8002f82:	eb44 0406 	adc.w	r4, r4, r6
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	02a2      	lsls	r2, r4, #10
 8002f90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f94:	0299      	lsls	r1, r3, #10
 8002f96:	460b      	mov	r3, r1
 8002f98:	4614      	mov	r4, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f04f 0400 	mov.w	r4, #0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	f7fd f962 	bl	8000270 <__aeabi_uldivmod>
 8002fac:	4603      	mov	r3, r0
 8002fae:	460c      	mov	r4, r1
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e049      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb4:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	f04f 0400 	mov.w	r4, #0
 8002fbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	ea03 0501 	and.w	r5, r3, r1
 8002fca:	ea04 0602 	and.w	r6, r4, r2
 8002fce:	4629      	mov	r1, r5
 8002fd0:	4632      	mov	r2, r6
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	f04f 0400 	mov.w	r4, #0
 8002fda:	0154      	lsls	r4, r2, #5
 8002fdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fe0:	014b      	lsls	r3, r1, #5
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4622      	mov	r2, r4
 8002fe6:	1b49      	subs	r1, r1, r5
 8002fe8:	eb62 0206 	sbc.w	r2, r2, r6
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	f04f 0400 	mov.w	r4, #0
 8002ff4:	0194      	lsls	r4, r2, #6
 8002ff6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ffa:	018b      	lsls	r3, r1, #6
 8002ffc:	1a5b      	subs	r3, r3, r1
 8002ffe:	eb64 0402 	sbc.w	r4, r4, r2
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	00e2      	lsls	r2, r4, #3
 800300c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003010:	00d9      	lsls	r1, r3, #3
 8003012:	460b      	mov	r3, r1
 8003014:	4614      	mov	r4, r2
 8003016:	195b      	adds	r3, r3, r5
 8003018:	eb44 0406 	adc.w	r4, r4, r6
 800301c:	f04f 0100 	mov.w	r1, #0
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	02a2      	lsls	r2, r4, #10
 8003026:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800302a:	0299      	lsls	r1, r3, #10
 800302c:	460b      	mov	r3, r1
 800302e:	4614      	mov	r4, r2
 8003030:	4618      	mov	r0, r3
 8003032:	4621      	mov	r1, r4
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f04f 0400 	mov.w	r4, #0
 800303a:	461a      	mov	r2, r3
 800303c:	4623      	mov	r3, r4
 800303e:	f7fd f917 	bl	8000270 <__aeabi_uldivmod>
 8003042:	4603      	mov	r3, r0
 8003044:	460c      	mov	r4, r1
 8003046:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	3301      	adds	r3, #1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	60bb      	str	r3, [r7, #8]
      break;
 8003062:	e002      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003066:	60bb      	str	r3, [r7, #8]
      break;
 8003068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306a:	68bb      	ldr	r3, [r7, #8]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	00f42400 	.word	0x00f42400

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <HAL_RCC_GetHCLKFreq+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000000 	.word	0x20000000

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003098:	f7ff fff0 	bl	800307c <HAL_RCC_GetHCLKFreq>
 800309c:	4601      	mov	r1, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030aa:	5cd3      	ldrb	r3, [r2, r3]
 80030ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	080051c4 	.word	0x080051c4

080030bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c0:	f7ff ffdc 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80030c4:	4601      	mov	r1, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0b5b      	lsrs	r3, r3, #13
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4a03      	ldr	r2, [pc, #12]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	080051c4 	.word	0x080051c4

080030e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e041      	b.n	800317a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fd fe84 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f000 fa78 	bl	8003618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e041      	b.n	8003218 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd fdff 	bl	8000dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f000 fa29 	bl	8003618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b02      	cmp	r3, #2
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0202 	mvn.w	r2, #2
 800324c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f9ba 	bl	80035dc <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f9ac 	bl	80035c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f9bd 	bl	80035f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b04      	cmp	r3, #4
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b04      	cmp	r3, #4
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0204 	mvn.w	r2, #4
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f990 	bl	80035dc <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f982 	bl	80035c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f993 	bl	80035f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d122      	bne.n	8003324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d11b      	bne.n	8003324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0208 	mvn.w	r2, #8
 80032f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2204      	movs	r2, #4
 80032fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f966 	bl	80035dc <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f958 	bl	80035c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f969 	bl	80035f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b10      	cmp	r3, #16
 8003330:	d122      	bne.n	8003378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b10      	cmp	r3, #16
 800333e:	d11b      	bne.n	8003378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0210 	mvn.w	r2, #16
 8003348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2208      	movs	r2, #8
 800334e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f93c 	bl	80035dc <HAL_TIM_IC_CaptureCallback>
 8003364:	e005      	b.n	8003372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f92e 	bl	80035c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f93f 	bl	80035f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0201 	mvn.w	r2, #1
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f908 	bl	80035b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	2b80      	cmp	r3, #128	; 0x80
 80033b0:	d10e      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d107      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fbfa 	bl	8003bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d10e      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d107      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f904 	bl	8003604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b20      	cmp	r3, #32
 8003408:	d10e      	bne.n	8003428 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b20      	cmp	r3, #32
 8003416:	d107      	bne.n	8003428 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0220 	mvn.w	r2, #32
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fbc4 	bl	8003bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800344a:	2302      	movs	r3, #2
 800344c:	e0ae      	b.n	80035ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b0c      	cmp	r3, #12
 800345a:	f200 809f 	bhi.w	800359c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800345e:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003499 	.word	0x08003499
 8003468:	0800359d 	.word	0x0800359d
 800346c:	0800359d 	.word	0x0800359d
 8003470:	0800359d 	.word	0x0800359d
 8003474:	080034d9 	.word	0x080034d9
 8003478:	0800359d 	.word	0x0800359d
 800347c:	0800359d 	.word	0x0800359d
 8003480:	0800359d 	.word	0x0800359d
 8003484:	0800351b 	.word	0x0800351b
 8003488:	0800359d 	.word	0x0800359d
 800348c:	0800359d 	.word	0x0800359d
 8003490:	0800359d 	.word	0x0800359d
 8003494:	0800355b 	.word	0x0800355b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f95a 	bl	8003758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699a      	ldr	r2, [r3, #24]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0208 	orr.w	r2, r2, #8
 80034b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0204 	bic.w	r2, r2, #4
 80034c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6999      	ldr	r1, [r3, #24]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	619a      	str	r2, [r3, #24]
      break;
 80034d6:	e064      	b.n	80035a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f9aa 	bl	8003838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6999      	ldr	r1, [r3, #24]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	021a      	lsls	r2, r3, #8
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	619a      	str	r2, [r3, #24]
      break;
 8003518:	e043      	b.n	80035a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f9ff 	bl	8003924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0208 	orr.w	r2, r2, #8
 8003534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0204 	bic.w	r2, r2, #4
 8003544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69d9      	ldr	r1, [r3, #28]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	61da      	str	r2, [r3, #28]
      break;
 8003558:	e023      	b.n	80035a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fa53 	bl	8003a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69d9      	ldr	r1, [r3, #28]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	021a      	lsls	r2, r3, #8
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	61da      	str	r2, [r3, #28]
      break;
 800359a:	e002      	b.n	80035a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	75fb      	strb	r3, [r7, #23]
      break;
 80035a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a40      	ldr	r2, [pc, #256]	; (800372c <TIM_Base_SetConfig+0x114>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d013      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003636:	d00f      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a3d      	ldr	r2, [pc, #244]	; (8003730 <TIM_Base_SetConfig+0x118>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00b      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3c      	ldr	r2, [pc, #240]	; (8003734 <TIM_Base_SetConfig+0x11c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3b      	ldr	r2, [pc, #236]	; (8003738 <TIM_Base_SetConfig+0x120>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3a      	ldr	r2, [pc, #232]	; (800373c <TIM_Base_SetConfig+0x124>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d108      	bne.n	800366a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a2f      	ldr	r2, [pc, #188]	; (800372c <TIM_Base_SetConfig+0x114>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02b      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d027      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a2c      	ldr	r2, [pc, #176]	; (8003730 <TIM_Base_SetConfig+0x118>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d023      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <TIM_Base_SetConfig+0x11c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01f      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a2a      	ldr	r2, [pc, #168]	; (8003738 <TIM_Base_SetConfig+0x120>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01b      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a29      	ldr	r2, [pc, #164]	; (800373c <TIM_Base_SetConfig+0x124>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d017      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a28      	ldr	r2, [pc, #160]	; (8003740 <TIM_Base_SetConfig+0x128>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a27      	ldr	r2, [pc, #156]	; (8003744 <TIM_Base_SetConfig+0x12c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00f      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a26      	ldr	r2, [pc, #152]	; (8003748 <TIM_Base_SetConfig+0x130>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00b      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a25      	ldr	r2, [pc, #148]	; (800374c <TIM_Base_SetConfig+0x134>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a24      	ldr	r2, [pc, #144]	; (8003750 <TIM_Base_SetConfig+0x138>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a23      	ldr	r2, [pc, #140]	; (8003754 <TIM_Base_SetConfig+0x13c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d108      	bne.n	80036dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <TIM_Base_SetConfig+0x114>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_Base_SetConfig+0xf8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <TIM_Base_SetConfig+0x124>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d103      	bne.n	8003718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	615a      	str	r2, [r3, #20]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40010000 	.word	0x40010000
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40000c00 	.word	0x40000c00
 800373c:	40010400 	.word	0x40010400
 8003740:	40014000 	.word	0x40014000
 8003744:	40014400 	.word	0x40014400
 8003748:	40014800 	.word	0x40014800
 800374c:	40001800 	.word	0x40001800
 8003750:	40001c00 	.word	0x40001c00
 8003754:	40002000 	.word	0x40002000

08003758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f023 0302 	bic.w	r3, r3, #2
 80037a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a20      	ldr	r2, [pc, #128]	; (8003830 <TIM_OC1_SetConfig+0xd8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <TIM_OC1_SetConfig+0x64>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <TIM_OC1_SetConfig+0xdc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d10c      	bne.n	80037d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f023 0308 	bic.w	r3, r3, #8
 80037c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f023 0304 	bic.w	r3, r3, #4
 80037d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a15      	ldr	r2, [pc, #84]	; (8003830 <TIM_OC1_SetConfig+0xd8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d003      	beq.n	80037e6 <TIM_OC1_SetConfig+0x8e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a14      	ldr	r2, [pc, #80]	; (8003834 <TIM_OC1_SetConfig+0xdc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d111      	bne.n	800380a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	621a      	str	r2, [r3, #32]
}
 8003824:	bf00      	nop
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40010000 	.word	0x40010000
 8003834:	40010400 	.word	0x40010400

08003838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f023 0210 	bic.w	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 0320 	bic.w	r3, r3, #32
 8003882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a22      	ldr	r2, [pc, #136]	; (800391c <TIM_OC2_SetConfig+0xe4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_OC2_SetConfig+0x68>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a21      	ldr	r2, [pc, #132]	; (8003920 <TIM_OC2_SetConfig+0xe8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10d      	bne.n	80038bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a17      	ldr	r2, [pc, #92]	; (800391c <TIM_OC2_SetConfig+0xe4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_OC2_SetConfig+0x94>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a16      	ldr	r2, [pc, #88]	; (8003920 <TIM_OC2_SetConfig+0xe8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d113      	bne.n	80038f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40010000 	.word	0x40010000
 8003920:	40010400 	.word	0x40010400

08003924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0303 	bic.w	r3, r3, #3
 800395a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800396c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <TIM_OC3_SetConfig+0xe0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d003      	beq.n	800398a <TIM_OC3_SetConfig+0x66>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <TIM_OC3_SetConfig+0xe4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10d      	bne.n	80039a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <TIM_OC3_SetConfig+0xe0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d003      	beq.n	80039b6 <TIM_OC3_SetConfig+0x92>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <TIM_OC3_SetConfig+0xe4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d113      	bne.n	80039de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	621a      	str	r2, [r3, #32]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40010000 	.word	0x40010000
 8003a08:	40010400 	.word	0x40010400

08003a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	031b      	lsls	r3, r3, #12
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <TIM_OC4_SetConfig+0xa4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_OC4_SetConfig+0x68>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a11      	ldr	r2, [pc, #68]	; (8003ab4 <TIM_OC4_SetConfig+0xa8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d109      	bne.n	8003a88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	40010400 	.word	0x40010400

08003ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e05a      	b.n	8003b86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1c:	d01d      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d018      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a17      	ldr	r2, [pc, #92]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a15      	ldr	r2, [pc, #84]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d10c      	bne.n	8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40010400 	.word	0x40010400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40001800 	.word	0x40001800

08003bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e03f      	b.n	8003c6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd f9b0 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f929 	bl	8003e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b08a      	sub	sp, #40	; 0x28
 8003c76:	af02      	add	r7, sp, #8
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d17c      	bne.n	8003d8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_UART_Transmit+0x2c>
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e075      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Transmit+0x3e>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e06e      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2221      	movs	r2, #33	; 0x21
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc6:	f7fd fb23 	bl	8001310 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce0:	d108      	bne.n	8003cf4 <HAL_UART_Transmit+0x82>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e003      	b.n	8003cfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d04:	e02a      	b.n	8003d5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f840 	bl	8003d96 <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e036      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e007      	b.n	8003d4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1cf      	bne.n	8003d06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2140      	movs	r1, #64	; 0x40
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f810 	bl	8003d96 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e006      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b090      	sub	sp, #64	; 0x40
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	4613      	mov	r3, r2
 8003da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da6:	e050      	b.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d04c      	beq.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003db6:	f7fd faab 	bl	8001310 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d241      	bcs.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003de6:	637a      	str	r2, [r7, #52]	; 0x34
 8003de8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e5      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3314      	adds	r3, #20
 8003e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e1a:	623a      	str	r2, [r7, #32]
 8003e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	69f9      	ldr	r1, [r7, #28]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e00f      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4013      	ands	r3, r2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d09f      	beq.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3740      	adds	r7, #64	; 0x40
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003eb6:	f023 030c 	bic.w	r3, r3, #12
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4ad0      	ldr	r2, [pc, #832]	; (8004220 <UART_SetConfig+0x3ac>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <UART_SetConfig+0x7a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4ace      	ldr	r2, [pc, #824]	; (8004224 <UART_SetConfig+0x3b0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d103      	bne.n	8003ef6 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eee:	f7ff f8e5 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	e002      	b.n	8003efc <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ef6:	f7ff f8cd 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8003efa:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f04:	f040 80ba 	bne.w	800407c <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	f04f 0600 	mov.w	r6, #0
 8003f10:	46a8      	mov	r8, r5
 8003f12:	46b1      	mov	r9, r6
 8003f14:	eb18 0308 	adds.w	r3, r8, r8
 8003f18:	eb49 0409 	adc.w	r4, r9, r9
 8003f1c:	4698      	mov	r8, r3
 8003f1e:	46a1      	mov	r9, r4
 8003f20:	eb18 0805 	adds.w	r8, r8, r5
 8003f24:	eb49 0906 	adc.w	r9, r9, r6
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f3c:	4688      	mov	r8, r1
 8003f3e:	4691      	mov	r9, r2
 8003f40:	eb18 0005 	adds.w	r0, r8, r5
 8003f44:	eb49 0106 	adc.w	r1, r9, r6
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	461d      	mov	r5, r3
 8003f4e:	f04f 0600 	mov.w	r6, #0
 8003f52:	196b      	adds	r3, r5, r5
 8003f54:	eb46 0406 	adc.w	r4, r6, r6
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	f7fc f988 	bl	8000270 <__aeabi_uldivmod>
 8003f60:	4603      	mov	r3, r0
 8003f62:	460c      	mov	r4, r1
 8003f64:	461a      	mov	r2, r3
 8003f66:	4bb0      	ldr	r3, [pc, #704]	; (8004228 <UART_SetConfig+0x3b4>)
 8003f68:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	461d      	mov	r5, r3
 8003f76:	f04f 0600 	mov.w	r6, #0
 8003f7a:	46a9      	mov	r9, r5
 8003f7c:	46b2      	mov	sl, r6
 8003f7e:	eb19 0309 	adds.w	r3, r9, r9
 8003f82:	eb4a 040a 	adc.w	r4, sl, sl
 8003f86:	4699      	mov	r9, r3
 8003f88:	46a2      	mov	sl, r4
 8003f8a:	eb19 0905 	adds.w	r9, r9, r5
 8003f8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa6:	4689      	mov	r9, r1
 8003fa8:	4692      	mov	sl, r2
 8003faa:	eb19 0005 	adds.w	r0, r9, r5
 8003fae:	eb4a 0106 	adc.w	r1, sl, r6
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	461d      	mov	r5, r3
 8003fb8:	f04f 0600 	mov.w	r6, #0
 8003fbc:	196b      	adds	r3, r5, r5
 8003fbe:	eb46 0406 	adc.w	r4, r6, r6
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	f7fc f953 	bl	8000270 <__aeabi_uldivmod>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b95      	ldr	r3, [pc, #596]	; (8004228 <UART_SetConfig+0x3b4>)
 8003fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2164      	movs	r1, #100	; 0x64
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	3332      	adds	r3, #50	; 0x32
 8003fe4:	4a90      	ldr	r2, [pc, #576]	; (8004228 <UART_SetConfig+0x3b4>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ff2:	4498      	add	r8, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	f04f 0600 	mov.w	r6, #0
 8003ffc:	46a9      	mov	r9, r5
 8003ffe:	46b2      	mov	sl, r6
 8004000:	eb19 0309 	adds.w	r3, r9, r9
 8004004:	eb4a 040a 	adc.w	r4, sl, sl
 8004008:	4699      	mov	r9, r3
 800400a:	46a2      	mov	sl, r4
 800400c:	eb19 0905 	adds.w	r9, r9, r5
 8004010:	eb4a 0a06 	adc.w	sl, sl, r6
 8004014:	f04f 0100 	mov.w	r1, #0
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004020:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004024:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004028:	4689      	mov	r9, r1
 800402a:	4692      	mov	sl, r2
 800402c:	eb19 0005 	adds.w	r0, r9, r5
 8004030:	eb4a 0106 	adc.w	r1, sl, r6
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	461d      	mov	r5, r3
 800403a:	f04f 0600 	mov.w	r6, #0
 800403e:	196b      	adds	r3, r5, r5
 8004040:	eb46 0406 	adc.w	r4, r6, r6
 8004044:	461a      	mov	r2, r3
 8004046:	4623      	mov	r3, r4
 8004048:	f7fc f912 	bl	8000270 <__aeabi_uldivmod>
 800404c:	4603      	mov	r3, r0
 800404e:	460c      	mov	r4, r1
 8004050:	461a      	mov	r2, r3
 8004052:	4b75      	ldr	r3, [pc, #468]	; (8004228 <UART_SetConfig+0x3b4>)
 8004054:	fba3 1302 	umull	r1, r3, r3, r2
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	2164      	movs	r1, #100	; 0x64
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	3332      	adds	r3, #50	; 0x32
 8004066:	4a70      	ldr	r2, [pc, #448]	; (8004228 <UART_SetConfig+0x3b4>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	f003 0207 	and.w	r2, r3, #7
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4442      	add	r2, r8
 8004078:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800407a:	e0cc      	b.n	8004216 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	469a      	mov	sl, r3
 8004080:	f04f 0b00 	mov.w	fp, #0
 8004084:	46d0      	mov	r8, sl
 8004086:	46d9      	mov	r9, fp
 8004088:	eb18 0308 	adds.w	r3, r8, r8
 800408c:	eb49 0409 	adc.w	r4, r9, r9
 8004090:	4698      	mov	r8, r3
 8004092:	46a1      	mov	r9, r4
 8004094:	eb18 080a 	adds.w	r8, r8, sl
 8004098:	eb49 090b 	adc.w	r9, r9, fp
 800409c:	f04f 0100 	mov.w	r1, #0
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040b0:	4688      	mov	r8, r1
 80040b2:	4691      	mov	r9, r2
 80040b4:	eb1a 0508 	adds.w	r5, sl, r8
 80040b8:	eb4b 0609 	adc.w	r6, fp, r9
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	f04f 0400 	mov.w	r4, #0
 80040ce:	0094      	lsls	r4, r2, #2
 80040d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040d4:	008b      	lsls	r3, r1, #2
 80040d6:	461a      	mov	r2, r3
 80040d8:	4623      	mov	r3, r4
 80040da:	4628      	mov	r0, r5
 80040dc:	4631      	mov	r1, r6
 80040de:	f7fc f8c7 	bl	8000270 <__aeabi_uldivmod>
 80040e2:	4603      	mov	r3, r0
 80040e4:	460c      	mov	r4, r1
 80040e6:	461a      	mov	r2, r3
 80040e8:	4b4f      	ldr	r3, [pc, #316]	; (8004228 <UART_SetConfig+0x3b4>)
 80040ea:	fba3 2302 	umull	r2, r3, r3, r2
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	469b      	mov	fp, r3
 80040f8:	f04f 0c00 	mov.w	ip, #0
 80040fc:	46d9      	mov	r9, fp
 80040fe:	46e2      	mov	sl, ip
 8004100:	eb19 0309 	adds.w	r3, r9, r9
 8004104:	eb4a 040a 	adc.w	r4, sl, sl
 8004108:	4699      	mov	r9, r3
 800410a:	46a2      	mov	sl, r4
 800410c:	eb19 090b 	adds.w	r9, r9, fp
 8004110:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004114:	f04f 0100 	mov.w	r1, #0
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004120:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004124:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004128:	4689      	mov	r9, r1
 800412a:	4692      	mov	sl, r2
 800412c:	eb1b 0509 	adds.w	r5, fp, r9
 8004130:	eb4c 060a 	adc.w	r6, ip, sl
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4619      	mov	r1, r3
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	f04f 0400 	mov.w	r4, #0
 8004146:	0094      	lsls	r4, r2, #2
 8004148:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800414c:	008b      	lsls	r3, r1, #2
 800414e:	461a      	mov	r2, r3
 8004150:	4623      	mov	r3, r4
 8004152:	4628      	mov	r0, r5
 8004154:	4631      	mov	r1, r6
 8004156:	f7fc f88b 	bl	8000270 <__aeabi_uldivmod>
 800415a:	4603      	mov	r3, r0
 800415c:	460c      	mov	r4, r1
 800415e:	461a      	mov	r2, r3
 8004160:	4b31      	ldr	r3, [pc, #196]	; (8004228 <UART_SetConfig+0x3b4>)
 8004162:	fba3 1302 	umull	r1, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2164      	movs	r1, #100	; 0x64
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	3332      	adds	r3, #50	; 0x32
 8004174:	4a2c      	ldr	r2, [pc, #176]	; (8004228 <UART_SetConfig+0x3b4>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004180:	4498      	add	r8, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	469b      	mov	fp, r3
 8004186:	f04f 0c00 	mov.w	ip, #0
 800418a:	46d9      	mov	r9, fp
 800418c:	46e2      	mov	sl, ip
 800418e:	eb19 0309 	adds.w	r3, r9, r9
 8004192:	eb4a 040a 	adc.w	r4, sl, sl
 8004196:	4699      	mov	r9, r3
 8004198:	46a2      	mov	sl, r4
 800419a:	eb19 090b 	adds.w	r9, r9, fp
 800419e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041b6:	4689      	mov	r9, r1
 80041b8:	4692      	mov	sl, r2
 80041ba:	eb1b 0509 	adds.w	r5, fp, r9
 80041be:	eb4c 060a 	adc.w	r6, ip, sl
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4619      	mov	r1, r3
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	f04f 0400 	mov.w	r4, #0
 80041d4:	0094      	lsls	r4, r2, #2
 80041d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041da:	008b      	lsls	r3, r1, #2
 80041dc:	461a      	mov	r2, r3
 80041de:	4623      	mov	r3, r4
 80041e0:	4628      	mov	r0, r5
 80041e2:	4631      	mov	r1, r6
 80041e4:	f7fc f844 	bl	8000270 <__aeabi_uldivmod>
 80041e8:	4603      	mov	r3, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <UART_SetConfig+0x3b4>)
 80041f0:	fba3 1302 	umull	r1, r3, r3, r2
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	2164      	movs	r1, #100	; 0x64
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	3332      	adds	r3, #50	; 0x32
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <UART_SetConfig+0x3b4>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	f003 020f 	and.w	r2, r3, #15
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4442      	add	r2, r8
 8004214:	609a      	str	r2, [r3, #8]
}
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004220:	40011000 	.word	0x40011000
 8004224:	40011400 	.word	0x40011400
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <__errno>:
 800422c:	4b01      	ldr	r3, [pc, #4]	; (8004234 <__errno+0x8>)
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	2000000c 	.word	0x2000000c

08004238 <__libc_init_array>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4e0d      	ldr	r6, [pc, #52]	; (8004270 <__libc_init_array+0x38>)
 800423c:	4c0d      	ldr	r4, [pc, #52]	; (8004274 <__libc_init_array+0x3c>)
 800423e:	1ba4      	subs	r4, r4, r6
 8004240:	10a4      	asrs	r4, r4, #2
 8004242:	2500      	movs	r5, #0
 8004244:	42a5      	cmp	r5, r4
 8004246:	d109      	bne.n	800425c <__libc_init_array+0x24>
 8004248:	4e0b      	ldr	r6, [pc, #44]	; (8004278 <__libc_init_array+0x40>)
 800424a:	4c0c      	ldr	r4, [pc, #48]	; (800427c <__libc_init_array+0x44>)
 800424c:	f000 ff68 	bl	8005120 <_init>
 8004250:	1ba4      	subs	r4, r4, r6
 8004252:	10a4      	asrs	r4, r4, #2
 8004254:	2500      	movs	r5, #0
 8004256:	42a5      	cmp	r5, r4
 8004258:	d105      	bne.n	8004266 <__libc_init_array+0x2e>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004260:	4798      	blx	r3
 8004262:	3501      	adds	r5, #1
 8004264:	e7ee      	b.n	8004244 <__libc_init_array+0xc>
 8004266:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800426a:	4798      	blx	r3
 800426c:	3501      	adds	r5, #1
 800426e:	e7f2      	b.n	8004256 <__libc_init_array+0x1e>
 8004270:	08005274 	.word	0x08005274
 8004274:	08005274 	.word	0x08005274
 8004278:	08005274 	.word	0x08005274
 800427c:	08005278 	.word	0x08005278

08004280 <memset>:
 8004280:	4402      	add	r2, r0
 8004282:	4603      	mov	r3, r0
 8004284:	4293      	cmp	r3, r2
 8004286:	d100      	bne.n	800428a <memset+0xa>
 8004288:	4770      	bx	lr
 800428a:	f803 1b01 	strb.w	r1, [r3], #1
 800428e:	e7f9      	b.n	8004284 <memset+0x4>

08004290 <iprintf>:
 8004290:	b40f      	push	{r0, r1, r2, r3}
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <iprintf+0x2c>)
 8004294:	b513      	push	{r0, r1, r4, lr}
 8004296:	681c      	ldr	r4, [r3, #0]
 8004298:	b124      	cbz	r4, 80042a4 <iprintf+0x14>
 800429a:	69a3      	ldr	r3, [r4, #24]
 800429c:	b913      	cbnz	r3, 80042a4 <iprintf+0x14>
 800429e:	4620      	mov	r0, r4
 80042a0:	f000 fa22 	bl	80046e8 <__sinit>
 80042a4:	ab05      	add	r3, sp, #20
 80042a6:	9a04      	ldr	r2, [sp, #16]
 80042a8:	68a1      	ldr	r1, [r4, #8]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 fbdb 	bl	8004a68 <_vfiprintf_r>
 80042b2:	b002      	add	sp, #8
 80042b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042b8:	b004      	add	sp, #16
 80042ba:	4770      	bx	lr
 80042bc:	2000000c 	.word	0x2000000c

080042c0 <_puts_r>:
 80042c0:	b570      	push	{r4, r5, r6, lr}
 80042c2:	460e      	mov	r6, r1
 80042c4:	4605      	mov	r5, r0
 80042c6:	b118      	cbz	r0, 80042d0 <_puts_r+0x10>
 80042c8:	6983      	ldr	r3, [r0, #24]
 80042ca:	b90b      	cbnz	r3, 80042d0 <_puts_r+0x10>
 80042cc:	f000 fa0c 	bl	80046e8 <__sinit>
 80042d0:	69ab      	ldr	r3, [r5, #24]
 80042d2:	68ac      	ldr	r4, [r5, #8]
 80042d4:	b913      	cbnz	r3, 80042dc <_puts_r+0x1c>
 80042d6:	4628      	mov	r0, r5
 80042d8:	f000 fa06 	bl	80046e8 <__sinit>
 80042dc:	4b23      	ldr	r3, [pc, #140]	; (800436c <_puts_r+0xac>)
 80042de:	429c      	cmp	r4, r3
 80042e0:	d117      	bne.n	8004312 <_puts_r+0x52>
 80042e2:	686c      	ldr	r4, [r5, #4]
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	071b      	lsls	r3, r3, #28
 80042e8:	d51d      	bpl.n	8004326 <_puts_r+0x66>
 80042ea:	6923      	ldr	r3, [r4, #16]
 80042ec:	b1db      	cbz	r3, 8004326 <_puts_r+0x66>
 80042ee:	3e01      	subs	r6, #1
 80042f0:	68a3      	ldr	r3, [r4, #8]
 80042f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042f6:	3b01      	subs	r3, #1
 80042f8:	60a3      	str	r3, [r4, #8]
 80042fa:	b9e9      	cbnz	r1, 8004338 <_puts_r+0x78>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	da2e      	bge.n	800435e <_puts_r+0x9e>
 8004300:	4622      	mov	r2, r4
 8004302:	210a      	movs	r1, #10
 8004304:	4628      	mov	r0, r5
 8004306:	f000 f83f 	bl	8004388 <__swbuf_r>
 800430a:	3001      	adds	r0, #1
 800430c:	d011      	beq.n	8004332 <_puts_r+0x72>
 800430e:	200a      	movs	r0, #10
 8004310:	e011      	b.n	8004336 <_puts_r+0x76>
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <_puts_r+0xb0>)
 8004314:	429c      	cmp	r4, r3
 8004316:	d101      	bne.n	800431c <_puts_r+0x5c>
 8004318:	68ac      	ldr	r4, [r5, #8]
 800431a:	e7e3      	b.n	80042e4 <_puts_r+0x24>
 800431c:	4b15      	ldr	r3, [pc, #84]	; (8004374 <_puts_r+0xb4>)
 800431e:	429c      	cmp	r4, r3
 8004320:	bf08      	it	eq
 8004322:	68ec      	ldreq	r4, [r5, #12]
 8004324:	e7de      	b.n	80042e4 <_puts_r+0x24>
 8004326:	4621      	mov	r1, r4
 8004328:	4628      	mov	r0, r5
 800432a:	f000 f87f 	bl	800442c <__swsetup_r>
 800432e:	2800      	cmp	r0, #0
 8004330:	d0dd      	beq.n	80042ee <_puts_r+0x2e>
 8004332:	f04f 30ff 	mov.w	r0, #4294967295
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	2b00      	cmp	r3, #0
 800433a:	da04      	bge.n	8004346 <_puts_r+0x86>
 800433c:	69a2      	ldr	r2, [r4, #24]
 800433e:	429a      	cmp	r2, r3
 8004340:	dc06      	bgt.n	8004350 <_puts_r+0x90>
 8004342:	290a      	cmp	r1, #10
 8004344:	d004      	beq.n	8004350 <_puts_r+0x90>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	6022      	str	r2, [r4, #0]
 800434c:	7019      	strb	r1, [r3, #0]
 800434e:	e7cf      	b.n	80042f0 <_puts_r+0x30>
 8004350:	4622      	mov	r2, r4
 8004352:	4628      	mov	r0, r5
 8004354:	f000 f818 	bl	8004388 <__swbuf_r>
 8004358:	3001      	adds	r0, #1
 800435a:	d1c9      	bne.n	80042f0 <_puts_r+0x30>
 800435c:	e7e9      	b.n	8004332 <_puts_r+0x72>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	200a      	movs	r0, #10
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	6022      	str	r2, [r4, #0]
 8004366:	7018      	strb	r0, [r3, #0]
 8004368:	e7e5      	b.n	8004336 <_puts_r+0x76>
 800436a:	bf00      	nop
 800436c:	080051f8 	.word	0x080051f8
 8004370:	08005218 	.word	0x08005218
 8004374:	080051d8 	.word	0x080051d8

08004378 <puts>:
 8004378:	4b02      	ldr	r3, [pc, #8]	; (8004384 <puts+0xc>)
 800437a:	4601      	mov	r1, r0
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	f7ff bf9f 	b.w	80042c0 <_puts_r>
 8004382:	bf00      	nop
 8004384:	2000000c 	.word	0x2000000c

08004388 <__swbuf_r>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	460e      	mov	r6, r1
 800438c:	4614      	mov	r4, r2
 800438e:	4605      	mov	r5, r0
 8004390:	b118      	cbz	r0, 800439a <__swbuf_r+0x12>
 8004392:	6983      	ldr	r3, [r0, #24]
 8004394:	b90b      	cbnz	r3, 800439a <__swbuf_r+0x12>
 8004396:	f000 f9a7 	bl	80046e8 <__sinit>
 800439a:	4b21      	ldr	r3, [pc, #132]	; (8004420 <__swbuf_r+0x98>)
 800439c:	429c      	cmp	r4, r3
 800439e:	d12a      	bne.n	80043f6 <__swbuf_r+0x6e>
 80043a0:	686c      	ldr	r4, [r5, #4]
 80043a2:	69a3      	ldr	r3, [r4, #24]
 80043a4:	60a3      	str	r3, [r4, #8]
 80043a6:	89a3      	ldrh	r3, [r4, #12]
 80043a8:	071a      	lsls	r2, r3, #28
 80043aa:	d52e      	bpl.n	800440a <__swbuf_r+0x82>
 80043ac:	6923      	ldr	r3, [r4, #16]
 80043ae:	b363      	cbz	r3, 800440a <__swbuf_r+0x82>
 80043b0:	6923      	ldr	r3, [r4, #16]
 80043b2:	6820      	ldr	r0, [r4, #0]
 80043b4:	1ac0      	subs	r0, r0, r3
 80043b6:	6963      	ldr	r3, [r4, #20]
 80043b8:	b2f6      	uxtb	r6, r6
 80043ba:	4283      	cmp	r3, r0
 80043bc:	4637      	mov	r7, r6
 80043be:	dc04      	bgt.n	80043ca <__swbuf_r+0x42>
 80043c0:	4621      	mov	r1, r4
 80043c2:	4628      	mov	r0, r5
 80043c4:	f000 f926 	bl	8004614 <_fflush_r>
 80043c8:	bb28      	cbnz	r0, 8004416 <__swbuf_r+0x8e>
 80043ca:	68a3      	ldr	r3, [r4, #8]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	60a3      	str	r3, [r4, #8]
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	6022      	str	r2, [r4, #0]
 80043d6:	701e      	strb	r6, [r3, #0]
 80043d8:	6963      	ldr	r3, [r4, #20]
 80043da:	3001      	adds	r0, #1
 80043dc:	4283      	cmp	r3, r0
 80043de:	d004      	beq.n	80043ea <__swbuf_r+0x62>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	07db      	lsls	r3, r3, #31
 80043e4:	d519      	bpl.n	800441a <__swbuf_r+0x92>
 80043e6:	2e0a      	cmp	r6, #10
 80043e8:	d117      	bne.n	800441a <__swbuf_r+0x92>
 80043ea:	4621      	mov	r1, r4
 80043ec:	4628      	mov	r0, r5
 80043ee:	f000 f911 	bl	8004614 <_fflush_r>
 80043f2:	b190      	cbz	r0, 800441a <__swbuf_r+0x92>
 80043f4:	e00f      	b.n	8004416 <__swbuf_r+0x8e>
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <__swbuf_r+0x9c>)
 80043f8:	429c      	cmp	r4, r3
 80043fa:	d101      	bne.n	8004400 <__swbuf_r+0x78>
 80043fc:	68ac      	ldr	r4, [r5, #8]
 80043fe:	e7d0      	b.n	80043a2 <__swbuf_r+0x1a>
 8004400:	4b09      	ldr	r3, [pc, #36]	; (8004428 <__swbuf_r+0xa0>)
 8004402:	429c      	cmp	r4, r3
 8004404:	bf08      	it	eq
 8004406:	68ec      	ldreq	r4, [r5, #12]
 8004408:	e7cb      	b.n	80043a2 <__swbuf_r+0x1a>
 800440a:	4621      	mov	r1, r4
 800440c:	4628      	mov	r0, r5
 800440e:	f000 f80d 	bl	800442c <__swsetup_r>
 8004412:	2800      	cmp	r0, #0
 8004414:	d0cc      	beq.n	80043b0 <__swbuf_r+0x28>
 8004416:	f04f 37ff 	mov.w	r7, #4294967295
 800441a:	4638      	mov	r0, r7
 800441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800441e:	bf00      	nop
 8004420:	080051f8 	.word	0x080051f8
 8004424:	08005218 	.word	0x08005218
 8004428:	080051d8 	.word	0x080051d8

0800442c <__swsetup_r>:
 800442c:	4b32      	ldr	r3, [pc, #200]	; (80044f8 <__swsetup_r+0xcc>)
 800442e:	b570      	push	{r4, r5, r6, lr}
 8004430:	681d      	ldr	r5, [r3, #0]
 8004432:	4606      	mov	r6, r0
 8004434:	460c      	mov	r4, r1
 8004436:	b125      	cbz	r5, 8004442 <__swsetup_r+0x16>
 8004438:	69ab      	ldr	r3, [r5, #24]
 800443a:	b913      	cbnz	r3, 8004442 <__swsetup_r+0x16>
 800443c:	4628      	mov	r0, r5
 800443e:	f000 f953 	bl	80046e8 <__sinit>
 8004442:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <__swsetup_r+0xd0>)
 8004444:	429c      	cmp	r4, r3
 8004446:	d10f      	bne.n	8004468 <__swsetup_r+0x3c>
 8004448:	686c      	ldr	r4, [r5, #4]
 800444a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800444e:	b29a      	uxth	r2, r3
 8004450:	0715      	lsls	r5, r2, #28
 8004452:	d42c      	bmi.n	80044ae <__swsetup_r+0x82>
 8004454:	06d0      	lsls	r0, r2, #27
 8004456:	d411      	bmi.n	800447c <__swsetup_r+0x50>
 8004458:	2209      	movs	r2, #9
 800445a:	6032      	str	r2, [r6, #0]
 800445c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004460:	81a3      	strh	r3, [r4, #12]
 8004462:	f04f 30ff 	mov.w	r0, #4294967295
 8004466:	e03e      	b.n	80044e6 <__swsetup_r+0xba>
 8004468:	4b25      	ldr	r3, [pc, #148]	; (8004500 <__swsetup_r+0xd4>)
 800446a:	429c      	cmp	r4, r3
 800446c:	d101      	bne.n	8004472 <__swsetup_r+0x46>
 800446e:	68ac      	ldr	r4, [r5, #8]
 8004470:	e7eb      	b.n	800444a <__swsetup_r+0x1e>
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <__swsetup_r+0xd8>)
 8004474:	429c      	cmp	r4, r3
 8004476:	bf08      	it	eq
 8004478:	68ec      	ldreq	r4, [r5, #12]
 800447a:	e7e6      	b.n	800444a <__swsetup_r+0x1e>
 800447c:	0751      	lsls	r1, r2, #29
 800447e:	d512      	bpl.n	80044a6 <__swsetup_r+0x7a>
 8004480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004482:	b141      	cbz	r1, 8004496 <__swsetup_r+0x6a>
 8004484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004488:	4299      	cmp	r1, r3
 800448a:	d002      	beq.n	8004492 <__swsetup_r+0x66>
 800448c:	4630      	mov	r0, r6
 800448e:	f000 fa19 	bl	80048c4 <_free_r>
 8004492:	2300      	movs	r3, #0
 8004494:	6363      	str	r3, [r4, #52]	; 0x34
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	2300      	movs	r3, #0
 80044a0:	6063      	str	r3, [r4, #4]
 80044a2:	6923      	ldr	r3, [r4, #16]
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	f043 0308 	orr.w	r3, r3, #8
 80044ac:	81a3      	strh	r3, [r4, #12]
 80044ae:	6923      	ldr	r3, [r4, #16]
 80044b0:	b94b      	cbnz	r3, 80044c6 <__swsetup_r+0x9a>
 80044b2:	89a3      	ldrh	r3, [r4, #12]
 80044b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044bc:	d003      	beq.n	80044c6 <__swsetup_r+0x9a>
 80044be:	4621      	mov	r1, r4
 80044c0:	4630      	mov	r0, r6
 80044c2:	f000 f9bf 	bl	8004844 <__smakebuf_r>
 80044c6:	89a2      	ldrh	r2, [r4, #12]
 80044c8:	f012 0301 	ands.w	r3, r2, #1
 80044cc:	d00c      	beq.n	80044e8 <__swsetup_r+0xbc>
 80044ce:	2300      	movs	r3, #0
 80044d0:	60a3      	str	r3, [r4, #8]
 80044d2:	6963      	ldr	r3, [r4, #20]
 80044d4:	425b      	negs	r3, r3
 80044d6:	61a3      	str	r3, [r4, #24]
 80044d8:	6923      	ldr	r3, [r4, #16]
 80044da:	b953      	cbnz	r3, 80044f2 <__swsetup_r+0xc6>
 80044dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80044e4:	d1ba      	bne.n	800445c <__swsetup_r+0x30>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	0792      	lsls	r2, r2, #30
 80044ea:	bf58      	it	pl
 80044ec:	6963      	ldrpl	r3, [r4, #20]
 80044ee:	60a3      	str	r3, [r4, #8]
 80044f0:	e7f2      	b.n	80044d8 <__swsetup_r+0xac>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e7f7      	b.n	80044e6 <__swsetup_r+0xba>
 80044f6:	bf00      	nop
 80044f8:	2000000c 	.word	0x2000000c
 80044fc:	080051f8 	.word	0x080051f8
 8004500:	08005218 	.word	0x08005218
 8004504:	080051d8 	.word	0x080051d8

08004508 <__sflush_r>:
 8004508:	898a      	ldrh	r2, [r1, #12]
 800450a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800450e:	4605      	mov	r5, r0
 8004510:	0710      	lsls	r0, r2, #28
 8004512:	460c      	mov	r4, r1
 8004514:	d458      	bmi.n	80045c8 <__sflush_r+0xc0>
 8004516:	684b      	ldr	r3, [r1, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	dc05      	bgt.n	8004528 <__sflush_r+0x20>
 800451c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	dc02      	bgt.n	8004528 <__sflush_r+0x20>
 8004522:	2000      	movs	r0, #0
 8004524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800452a:	2e00      	cmp	r6, #0
 800452c:	d0f9      	beq.n	8004522 <__sflush_r+0x1a>
 800452e:	2300      	movs	r3, #0
 8004530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004534:	682f      	ldr	r7, [r5, #0]
 8004536:	6a21      	ldr	r1, [r4, #32]
 8004538:	602b      	str	r3, [r5, #0]
 800453a:	d032      	beq.n	80045a2 <__sflush_r+0x9a>
 800453c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	075a      	lsls	r2, r3, #29
 8004542:	d505      	bpl.n	8004550 <__sflush_r+0x48>
 8004544:	6863      	ldr	r3, [r4, #4]
 8004546:	1ac0      	subs	r0, r0, r3
 8004548:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800454a:	b10b      	cbz	r3, 8004550 <__sflush_r+0x48>
 800454c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800454e:	1ac0      	subs	r0, r0, r3
 8004550:	2300      	movs	r3, #0
 8004552:	4602      	mov	r2, r0
 8004554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004556:	6a21      	ldr	r1, [r4, #32]
 8004558:	4628      	mov	r0, r5
 800455a:	47b0      	blx	r6
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	89a3      	ldrh	r3, [r4, #12]
 8004560:	d106      	bne.n	8004570 <__sflush_r+0x68>
 8004562:	6829      	ldr	r1, [r5, #0]
 8004564:	291d      	cmp	r1, #29
 8004566:	d848      	bhi.n	80045fa <__sflush_r+0xf2>
 8004568:	4a29      	ldr	r2, [pc, #164]	; (8004610 <__sflush_r+0x108>)
 800456a:	40ca      	lsrs	r2, r1
 800456c:	07d6      	lsls	r6, r2, #31
 800456e:	d544      	bpl.n	80045fa <__sflush_r+0xf2>
 8004570:	2200      	movs	r2, #0
 8004572:	6062      	str	r2, [r4, #4]
 8004574:	04d9      	lsls	r1, r3, #19
 8004576:	6922      	ldr	r2, [r4, #16]
 8004578:	6022      	str	r2, [r4, #0]
 800457a:	d504      	bpl.n	8004586 <__sflush_r+0x7e>
 800457c:	1c42      	adds	r2, r0, #1
 800457e:	d101      	bne.n	8004584 <__sflush_r+0x7c>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b903      	cbnz	r3, 8004586 <__sflush_r+0x7e>
 8004584:	6560      	str	r0, [r4, #84]	; 0x54
 8004586:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004588:	602f      	str	r7, [r5, #0]
 800458a:	2900      	cmp	r1, #0
 800458c:	d0c9      	beq.n	8004522 <__sflush_r+0x1a>
 800458e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004592:	4299      	cmp	r1, r3
 8004594:	d002      	beq.n	800459c <__sflush_r+0x94>
 8004596:	4628      	mov	r0, r5
 8004598:	f000 f994 	bl	80048c4 <_free_r>
 800459c:	2000      	movs	r0, #0
 800459e:	6360      	str	r0, [r4, #52]	; 0x34
 80045a0:	e7c0      	b.n	8004524 <__sflush_r+0x1c>
 80045a2:	2301      	movs	r3, #1
 80045a4:	4628      	mov	r0, r5
 80045a6:	47b0      	blx	r6
 80045a8:	1c41      	adds	r1, r0, #1
 80045aa:	d1c8      	bne.n	800453e <__sflush_r+0x36>
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0c5      	beq.n	800453e <__sflush_r+0x36>
 80045b2:	2b1d      	cmp	r3, #29
 80045b4:	d001      	beq.n	80045ba <__sflush_r+0xb2>
 80045b6:	2b16      	cmp	r3, #22
 80045b8:	d101      	bne.n	80045be <__sflush_r+0xb6>
 80045ba:	602f      	str	r7, [r5, #0]
 80045bc:	e7b1      	b.n	8004522 <__sflush_r+0x1a>
 80045be:	89a3      	ldrh	r3, [r4, #12]
 80045c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c4:	81a3      	strh	r3, [r4, #12]
 80045c6:	e7ad      	b.n	8004524 <__sflush_r+0x1c>
 80045c8:	690f      	ldr	r7, [r1, #16]
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	d0a9      	beq.n	8004522 <__sflush_r+0x1a>
 80045ce:	0793      	lsls	r3, r2, #30
 80045d0:	680e      	ldr	r6, [r1, #0]
 80045d2:	bf08      	it	eq
 80045d4:	694b      	ldreq	r3, [r1, #20]
 80045d6:	600f      	str	r7, [r1, #0]
 80045d8:	bf18      	it	ne
 80045da:	2300      	movne	r3, #0
 80045dc:	eba6 0807 	sub.w	r8, r6, r7
 80045e0:	608b      	str	r3, [r1, #8]
 80045e2:	f1b8 0f00 	cmp.w	r8, #0
 80045e6:	dd9c      	ble.n	8004522 <__sflush_r+0x1a>
 80045e8:	4643      	mov	r3, r8
 80045ea:	463a      	mov	r2, r7
 80045ec:	6a21      	ldr	r1, [r4, #32]
 80045ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045f0:	4628      	mov	r0, r5
 80045f2:	47b0      	blx	r6
 80045f4:	2800      	cmp	r0, #0
 80045f6:	dc06      	bgt.n	8004606 <__sflush_r+0xfe>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045fe:	81a3      	strh	r3, [r4, #12]
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	e78e      	b.n	8004524 <__sflush_r+0x1c>
 8004606:	4407      	add	r7, r0
 8004608:	eba8 0800 	sub.w	r8, r8, r0
 800460c:	e7e9      	b.n	80045e2 <__sflush_r+0xda>
 800460e:	bf00      	nop
 8004610:	20400001 	.word	0x20400001

08004614 <_fflush_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	690b      	ldr	r3, [r1, #16]
 8004618:	4605      	mov	r5, r0
 800461a:	460c      	mov	r4, r1
 800461c:	b1db      	cbz	r3, 8004656 <_fflush_r+0x42>
 800461e:	b118      	cbz	r0, 8004628 <_fflush_r+0x14>
 8004620:	6983      	ldr	r3, [r0, #24]
 8004622:	b90b      	cbnz	r3, 8004628 <_fflush_r+0x14>
 8004624:	f000 f860 	bl	80046e8 <__sinit>
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <_fflush_r+0x48>)
 800462a:	429c      	cmp	r4, r3
 800462c:	d109      	bne.n	8004642 <_fflush_r+0x2e>
 800462e:	686c      	ldr	r4, [r5, #4]
 8004630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004634:	b17b      	cbz	r3, 8004656 <_fflush_r+0x42>
 8004636:	4621      	mov	r1, r4
 8004638:	4628      	mov	r0, r5
 800463a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800463e:	f7ff bf63 	b.w	8004508 <__sflush_r>
 8004642:	4b07      	ldr	r3, [pc, #28]	; (8004660 <_fflush_r+0x4c>)
 8004644:	429c      	cmp	r4, r3
 8004646:	d101      	bne.n	800464c <_fflush_r+0x38>
 8004648:	68ac      	ldr	r4, [r5, #8]
 800464a:	e7f1      	b.n	8004630 <_fflush_r+0x1c>
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <_fflush_r+0x50>)
 800464e:	429c      	cmp	r4, r3
 8004650:	bf08      	it	eq
 8004652:	68ec      	ldreq	r4, [r5, #12]
 8004654:	e7ec      	b.n	8004630 <_fflush_r+0x1c>
 8004656:	2000      	movs	r0, #0
 8004658:	bd38      	pop	{r3, r4, r5, pc}
 800465a:	bf00      	nop
 800465c:	080051f8 	.word	0x080051f8
 8004660:	08005218 	.word	0x08005218
 8004664:	080051d8 	.word	0x080051d8

08004668 <std>:
 8004668:	2300      	movs	r3, #0
 800466a:	b510      	push	{r4, lr}
 800466c:	4604      	mov	r4, r0
 800466e:	e9c0 3300 	strd	r3, r3, [r0]
 8004672:	6083      	str	r3, [r0, #8]
 8004674:	8181      	strh	r1, [r0, #12]
 8004676:	6643      	str	r3, [r0, #100]	; 0x64
 8004678:	81c2      	strh	r2, [r0, #14]
 800467a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800467e:	6183      	str	r3, [r0, #24]
 8004680:	4619      	mov	r1, r3
 8004682:	2208      	movs	r2, #8
 8004684:	305c      	adds	r0, #92	; 0x5c
 8004686:	f7ff fdfb 	bl	8004280 <memset>
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <std+0x38>)
 800468c:	6263      	str	r3, [r4, #36]	; 0x24
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <std+0x3c>)
 8004690:	62a3      	str	r3, [r4, #40]	; 0x28
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <std+0x40>)
 8004694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <std+0x44>)
 8004698:	6224      	str	r4, [r4, #32]
 800469a:	6323      	str	r3, [r4, #48]	; 0x30
 800469c:	bd10      	pop	{r4, pc}
 800469e:	bf00      	nop
 80046a0:	08004fc5 	.word	0x08004fc5
 80046a4:	08004fe7 	.word	0x08004fe7
 80046a8:	0800501f 	.word	0x0800501f
 80046ac:	08005043 	.word	0x08005043

080046b0 <_cleanup_r>:
 80046b0:	4901      	ldr	r1, [pc, #4]	; (80046b8 <_cleanup_r+0x8>)
 80046b2:	f000 b885 	b.w	80047c0 <_fwalk_reent>
 80046b6:	bf00      	nop
 80046b8:	08004615 	.word	0x08004615

080046bc <__sfmoreglue>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	1e4a      	subs	r2, r1, #1
 80046c0:	2568      	movs	r5, #104	; 0x68
 80046c2:	4355      	muls	r5, r2
 80046c4:	460e      	mov	r6, r1
 80046c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046ca:	f000 f949 	bl	8004960 <_malloc_r>
 80046ce:	4604      	mov	r4, r0
 80046d0:	b140      	cbz	r0, 80046e4 <__sfmoreglue+0x28>
 80046d2:	2100      	movs	r1, #0
 80046d4:	e9c0 1600 	strd	r1, r6, [r0]
 80046d8:	300c      	adds	r0, #12
 80046da:	60a0      	str	r0, [r4, #8]
 80046dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046e0:	f7ff fdce 	bl	8004280 <memset>
 80046e4:	4620      	mov	r0, r4
 80046e6:	bd70      	pop	{r4, r5, r6, pc}

080046e8 <__sinit>:
 80046e8:	6983      	ldr	r3, [r0, #24]
 80046ea:	b510      	push	{r4, lr}
 80046ec:	4604      	mov	r4, r0
 80046ee:	bb33      	cbnz	r3, 800473e <__sinit+0x56>
 80046f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80046f4:	6503      	str	r3, [r0, #80]	; 0x50
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <__sinit+0x58>)
 80046f8:	4a12      	ldr	r2, [pc, #72]	; (8004744 <__sinit+0x5c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6282      	str	r2, [r0, #40]	; 0x28
 80046fe:	4298      	cmp	r0, r3
 8004700:	bf04      	itt	eq
 8004702:	2301      	moveq	r3, #1
 8004704:	6183      	streq	r3, [r0, #24]
 8004706:	f000 f81f 	bl	8004748 <__sfp>
 800470a:	6060      	str	r0, [r4, #4]
 800470c:	4620      	mov	r0, r4
 800470e:	f000 f81b 	bl	8004748 <__sfp>
 8004712:	60a0      	str	r0, [r4, #8]
 8004714:	4620      	mov	r0, r4
 8004716:	f000 f817 	bl	8004748 <__sfp>
 800471a:	2200      	movs	r2, #0
 800471c:	60e0      	str	r0, [r4, #12]
 800471e:	2104      	movs	r1, #4
 8004720:	6860      	ldr	r0, [r4, #4]
 8004722:	f7ff ffa1 	bl	8004668 <std>
 8004726:	2201      	movs	r2, #1
 8004728:	2109      	movs	r1, #9
 800472a:	68a0      	ldr	r0, [r4, #8]
 800472c:	f7ff ff9c 	bl	8004668 <std>
 8004730:	2202      	movs	r2, #2
 8004732:	2112      	movs	r1, #18
 8004734:	68e0      	ldr	r0, [r4, #12]
 8004736:	f7ff ff97 	bl	8004668 <std>
 800473a:	2301      	movs	r3, #1
 800473c:	61a3      	str	r3, [r4, #24]
 800473e:	bd10      	pop	{r4, pc}
 8004740:	080051d4 	.word	0x080051d4
 8004744:	080046b1 	.word	0x080046b1

08004748 <__sfp>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <__sfp+0x70>)
 800474c:	681e      	ldr	r6, [r3, #0]
 800474e:	69b3      	ldr	r3, [r6, #24]
 8004750:	4607      	mov	r7, r0
 8004752:	b913      	cbnz	r3, 800475a <__sfp+0x12>
 8004754:	4630      	mov	r0, r6
 8004756:	f7ff ffc7 	bl	80046e8 <__sinit>
 800475a:	3648      	adds	r6, #72	; 0x48
 800475c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004760:	3b01      	subs	r3, #1
 8004762:	d503      	bpl.n	800476c <__sfp+0x24>
 8004764:	6833      	ldr	r3, [r6, #0]
 8004766:	b133      	cbz	r3, 8004776 <__sfp+0x2e>
 8004768:	6836      	ldr	r6, [r6, #0]
 800476a:	e7f7      	b.n	800475c <__sfp+0x14>
 800476c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004770:	b16d      	cbz	r5, 800478e <__sfp+0x46>
 8004772:	3468      	adds	r4, #104	; 0x68
 8004774:	e7f4      	b.n	8004760 <__sfp+0x18>
 8004776:	2104      	movs	r1, #4
 8004778:	4638      	mov	r0, r7
 800477a:	f7ff ff9f 	bl	80046bc <__sfmoreglue>
 800477e:	6030      	str	r0, [r6, #0]
 8004780:	2800      	cmp	r0, #0
 8004782:	d1f1      	bne.n	8004768 <__sfp+0x20>
 8004784:	230c      	movs	r3, #12
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4604      	mov	r4, r0
 800478a:	4620      	mov	r0, r4
 800478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <__sfp+0x74>)
 8004790:	6665      	str	r5, [r4, #100]	; 0x64
 8004792:	e9c4 5500 	strd	r5, r5, [r4]
 8004796:	60a5      	str	r5, [r4, #8]
 8004798:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800479c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80047a0:	2208      	movs	r2, #8
 80047a2:	4629      	mov	r1, r5
 80047a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047a8:	f7ff fd6a 	bl	8004280 <memset>
 80047ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047b4:	e7e9      	b.n	800478a <__sfp+0x42>
 80047b6:	bf00      	nop
 80047b8:	080051d4 	.word	0x080051d4
 80047bc:	ffff0001 	.word	0xffff0001

080047c0 <_fwalk_reent>:
 80047c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c4:	4680      	mov	r8, r0
 80047c6:	4689      	mov	r9, r1
 80047c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047cc:	2600      	movs	r6, #0
 80047ce:	b914      	cbnz	r4, 80047d6 <_fwalk_reent+0x16>
 80047d0:	4630      	mov	r0, r6
 80047d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80047da:	3f01      	subs	r7, #1
 80047dc:	d501      	bpl.n	80047e2 <_fwalk_reent+0x22>
 80047de:	6824      	ldr	r4, [r4, #0]
 80047e0:	e7f5      	b.n	80047ce <_fwalk_reent+0xe>
 80047e2:	89ab      	ldrh	r3, [r5, #12]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d907      	bls.n	80047f8 <_fwalk_reent+0x38>
 80047e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047ec:	3301      	adds	r3, #1
 80047ee:	d003      	beq.n	80047f8 <_fwalk_reent+0x38>
 80047f0:	4629      	mov	r1, r5
 80047f2:	4640      	mov	r0, r8
 80047f4:	47c8      	blx	r9
 80047f6:	4306      	orrs	r6, r0
 80047f8:	3568      	adds	r5, #104	; 0x68
 80047fa:	e7ee      	b.n	80047da <_fwalk_reent+0x1a>

080047fc <__swhatbuf_r>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	460e      	mov	r6, r1
 8004800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004804:	2900      	cmp	r1, #0
 8004806:	b096      	sub	sp, #88	; 0x58
 8004808:	4614      	mov	r4, r2
 800480a:	461d      	mov	r5, r3
 800480c:	da07      	bge.n	800481e <__swhatbuf_r+0x22>
 800480e:	2300      	movs	r3, #0
 8004810:	602b      	str	r3, [r5, #0]
 8004812:	89b3      	ldrh	r3, [r6, #12]
 8004814:	061a      	lsls	r2, r3, #24
 8004816:	d410      	bmi.n	800483a <__swhatbuf_r+0x3e>
 8004818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800481c:	e00e      	b.n	800483c <__swhatbuf_r+0x40>
 800481e:	466a      	mov	r2, sp
 8004820:	f000 fc36 	bl	8005090 <_fstat_r>
 8004824:	2800      	cmp	r0, #0
 8004826:	dbf2      	blt.n	800480e <__swhatbuf_r+0x12>
 8004828:	9a01      	ldr	r2, [sp, #4]
 800482a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800482e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004832:	425a      	negs	r2, r3
 8004834:	415a      	adcs	r2, r3
 8004836:	602a      	str	r2, [r5, #0]
 8004838:	e7ee      	b.n	8004818 <__swhatbuf_r+0x1c>
 800483a:	2340      	movs	r3, #64	; 0x40
 800483c:	2000      	movs	r0, #0
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	b016      	add	sp, #88	; 0x58
 8004842:	bd70      	pop	{r4, r5, r6, pc}

08004844 <__smakebuf_r>:
 8004844:	898b      	ldrh	r3, [r1, #12]
 8004846:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004848:	079d      	lsls	r5, r3, #30
 800484a:	4606      	mov	r6, r0
 800484c:	460c      	mov	r4, r1
 800484e:	d507      	bpl.n	8004860 <__smakebuf_r+0x1c>
 8004850:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	2301      	movs	r3, #1
 800485a:	6163      	str	r3, [r4, #20]
 800485c:	b002      	add	sp, #8
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	ab01      	add	r3, sp, #4
 8004862:	466a      	mov	r2, sp
 8004864:	f7ff ffca 	bl	80047fc <__swhatbuf_r>
 8004868:	9900      	ldr	r1, [sp, #0]
 800486a:	4605      	mov	r5, r0
 800486c:	4630      	mov	r0, r6
 800486e:	f000 f877 	bl	8004960 <_malloc_r>
 8004872:	b948      	cbnz	r0, 8004888 <__smakebuf_r+0x44>
 8004874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004878:	059a      	lsls	r2, r3, #22
 800487a:	d4ef      	bmi.n	800485c <__smakebuf_r+0x18>
 800487c:	f023 0303 	bic.w	r3, r3, #3
 8004880:	f043 0302 	orr.w	r3, r3, #2
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	e7e3      	b.n	8004850 <__smakebuf_r+0xc>
 8004888:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <__smakebuf_r+0x7c>)
 800488a:	62b3      	str	r3, [r6, #40]	; 0x28
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	6020      	str	r0, [r4, #0]
 8004890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	9b00      	ldr	r3, [sp, #0]
 8004898:	6163      	str	r3, [r4, #20]
 800489a:	9b01      	ldr	r3, [sp, #4]
 800489c:	6120      	str	r0, [r4, #16]
 800489e:	b15b      	cbz	r3, 80048b8 <__smakebuf_r+0x74>
 80048a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048a4:	4630      	mov	r0, r6
 80048a6:	f000 fc05 	bl	80050b4 <_isatty_r>
 80048aa:	b128      	cbz	r0, 80048b8 <__smakebuf_r+0x74>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f023 0303 	bic.w	r3, r3, #3
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	431d      	orrs	r5, r3
 80048bc:	81a5      	strh	r5, [r4, #12]
 80048be:	e7cd      	b.n	800485c <__smakebuf_r+0x18>
 80048c0:	080046b1 	.word	0x080046b1

080048c4 <_free_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4605      	mov	r5, r0
 80048c8:	2900      	cmp	r1, #0
 80048ca:	d045      	beq.n	8004958 <_free_r+0x94>
 80048cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d0:	1f0c      	subs	r4, r1, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bfb8      	it	lt
 80048d6:	18e4      	addlt	r4, r4, r3
 80048d8:	f000 fc0e 	bl	80050f8 <__malloc_lock>
 80048dc:	4a1f      	ldr	r2, [pc, #124]	; (800495c <_free_r+0x98>)
 80048de:	6813      	ldr	r3, [r2, #0]
 80048e0:	4610      	mov	r0, r2
 80048e2:	b933      	cbnz	r3, 80048f2 <_free_r+0x2e>
 80048e4:	6063      	str	r3, [r4, #4]
 80048e6:	6014      	str	r4, [r2, #0]
 80048e8:	4628      	mov	r0, r5
 80048ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ee:	f000 bc04 	b.w	80050fa <__malloc_unlock>
 80048f2:	42a3      	cmp	r3, r4
 80048f4:	d90c      	bls.n	8004910 <_free_r+0x4c>
 80048f6:	6821      	ldr	r1, [r4, #0]
 80048f8:	1862      	adds	r2, r4, r1
 80048fa:	4293      	cmp	r3, r2
 80048fc:	bf04      	itt	eq
 80048fe:	681a      	ldreq	r2, [r3, #0]
 8004900:	685b      	ldreq	r3, [r3, #4]
 8004902:	6063      	str	r3, [r4, #4]
 8004904:	bf04      	itt	eq
 8004906:	1852      	addeq	r2, r2, r1
 8004908:	6022      	streq	r2, [r4, #0]
 800490a:	6004      	str	r4, [r0, #0]
 800490c:	e7ec      	b.n	80048e8 <_free_r+0x24>
 800490e:	4613      	mov	r3, r2
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	b10a      	cbz	r2, 8004918 <_free_r+0x54>
 8004914:	42a2      	cmp	r2, r4
 8004916:	d9fa      	bls.n	800490e <_free_r+0x4a>
 8004918:	6819      	ldr	r1, [r3, #0]
 800491a:	1858      	adds	r0, r3, r1
 800491c:	42a0      	cmp	r0, r4
 800491e:	d10b      	bne.n	8004938 <_free_r+0x74>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	4401      	add	r1, r0
 8004924:	1858      	adds	r0, r3, r1
 8004926:	4282      	cmp	r2, r0
 8004928:	6019      	str	r1, [r3, #0]
 800492a:	d1dd      	bne.n	80048e8 <_free_r+0x24>
 800492c:	6810      	ldr	r0, [r2, #0]
 800492e:	6852      	ldr	r2, [r2, #4]
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	4401      	add	r1, r0
 8004934:	6019      	str	r1, [r3, #0]
 8004936:	e7d7      	b.n	80048e8 <_free_r+0x24>
 8004938:	d902      	bls.n	8004940 <_free_r+0x7c>
 800493a:	230c      	movs	r3, #12
 800493c:	602b      	str	r3, [r5, #0]
 800493e:	e7d3      	b.n	80048e8 <_free_r+0x24>
 8004940:	6820      	ldr	r0, [r4, #0]
 8004942:	1821      	adds	r1, r4, r0
 8004944:	428a      	cmp	r2, r1
 8004946:	bf04      	itt	eq
 8004948:	6811      	ldreq	r1, [r2, #0]
 800494a:	6852      	ldreq	r2, [r2, #4]
 800494c:	6062      	str	r2, [r4, #4]
 800494e:	bf04      	itt	eq
 8004950:	1809      	addeq	r1, r1, r0
 8004952:	6021      	streq	r1, [r4, #0]
 8004954:	605c      	str	r4, [r3, #4]
 8004956:	e7c7      	b.n	80048e8 <_free_r+0x24>
 8004958:	bd38      	pop	{r3, r4, r5, pc}
 800495a:	bf00      	nop
 800495c:	20000094 	.word	0x20000094

08004960 <_malloc_r>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	1ccd      	adds	r5, r1, #3
 8004964:	f025 0503 	bic.w	r5, r5, #3
 8004968:	3508      	adds	r5, #8
 800496a:	2d0c      	cmp	r5, #12
 800496c:	bf38      	it	cc
 800496e:	250c      	movcc	r5, #12
 8004970:	2d00      	cmp	r5, #0
 8004972:	4606      	mov	r6, r0
 8004974:	db01      	blt.n	800497a <_malloc_r+0x1a>
 8004976:	42a9      	cmp	r1, r5
 8004978:	d903      	bls.n	8004982 <_malloc_r+0x22>
 800497a:	230c      	movs	r3, #12
 800497c:	6033      	str	r3, [r6, #0]
 800497e:	2000      	movs	r0, #0
 8004980:	bd70      	pop	{r4, r5, r6, pc}
 8004982:	f000 fbb9 	bl	80050f8 <__malloc_lock>
 8004986:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <_malloc_r+0xac>)
 8004988:	6814      	ldr	r4, [r2, #0]
 800498a:	4621      	mov	r1, r4
 800498c:	b991      	cbnz	r1, 80049b4 <_malloc_r+0x54>
 800498e:	4c20      	ldr	r4, [pc, #128]	; (8004a10 <_malloc_r+0xb0>)
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	b91b      	cbnz	r3, 800499c <_malloc_r+0x3c>
 8004994:	4630      	mov	r0, r6
 8004996:	f000 fb05 	bl	8004fa4 <_sbrk_r>
 800499a:	6020      	str	r0, [r4, #0]
 800499c:	4629      	mov	r1, r5
 800499e:	4630      	mov	r0, r6
 80049a0:	f000 fb00 	bl	8004fa4 <_sbrk_r>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d124      	bne.n	80049f2 <_malloc_r+0x92>
 80049a8:	230c      	movs	r3, #12
 80049aa:	6033      	str	r3, [r6, #0]
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 fba4 	bl	80050fa <__malloc_unlock>
 80049b2:	e7e4      	b.n	800497e <_malloc_r+0x1e>
 80049b4:	680b      	ldr	r3, [r1, #0]
 80049b6:	1b5b      	subs	r3, r3, r5
 80049b8:	d418      	bmi.n	80049ec <_malloc_r+0x8c>
 80049ba:	2b0b      	cmp	r3, #11
 80049bc:	d90f      	bls.n	80049de <_malloc_r+0x7e>
 80049be:	600b      	str	r3, [r1, #0]
 80049c0:	50cd      	str	r5, [r1, r3]
 80049c2:	18cc      	adds	r4, r1, r3
 80049c4:	4630      	mov	r0, r6
 80049c6:	f000 fb98 	bl	80050fa <__malloc_unlock>
 80049ca:	f104 000b 	add.w	r0, r4, #11
 80049ce:	1d23      	adds	r3, r4, #4
 80049d0:	f020 0007 	bic.w	r0, r0, #7
 80049d4:	1ac3      	subs	r3, r0, r3
 80049d6:	d0d3      	beq.n	8004980 <_malloc_r+0x20>
 80049d8:	425a      	negs	r2, r3
 80049da:	50e2      	str	r2, [r4, r3]
 80049dc:	e7d0      	b.n	8004980 <_malloc_r+0x20>
 80049de:	428c      	cmp	r4, r1
 80049e0:	684b      	ldr	r3, [r1, #4]
 80049e2:	bf16      	itet	ne
 80049e4:	6063      	strne	r3, [r4, #4]
 80049e6:	6013      	streq	r3, [r2, #0]
 80049e8:	460c      	movne	r4, r1
 80049ea:	e7eb      	b.n	80049c4 <_malloc_r+0x64>
 80049ec:	460c      	mov	r4, r1
 80049ee:	6849      	ldr	r1, [r1, #4]
 80049f0:	e7cc      	b.n	800498c <_malloc_r+0x2c>
 80049f2:	1cc4      	adds	r4, r0, #3
 80049f4:	f024 0403 	bic.w	r4, r4, #3
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	d005      	beq.n	8004a08 <_malloc_r+0xa8>
 80049fc:	1a21      	subs	r1, r4, r0
 80049fe:	4630      	mov	r0, r6
 8004a00:	f000 fad0 	bl	8004fa4 <_sbrk_r>
 8004a04:	3001      	adds	r0, #1
 8004a06:	d0cf      	beq.n	80049a8 <_malloc_r+0x48>
 8004a08:	6025      	str	r5, [r4, #0]
 8004a0a:	e7db      	b.n	80049c4 <_malloc_r+0x64>
 8004a0c:	20000094 	.word	0x20000094
 8004a10:	20000098 	.word	0x20000098

08004a14 <__sfputc_r>:
 8004a14:	6893      	ldr	r3, [r2, #8]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	b410      	push	{r4}
 8004a1c:	6093      	str	r3, [r2, #8]
 8004a1e:	da08      	bge.n	8004a32 <__sfputc_r+0x1e>
 8004a20:	6994      	ldr	r4, [r2, #24]
 8004a22:	42a3      	cmp	r3, r4
 8004a24:	db01      	blt.n	8004a2a <__sfputc_r+0x16>
 8004a26:	290a      	cmp	r1, #10
 8004a28:	d103      	bne.n	8004a32 <__sfputc_r+0x1e>
 8004a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a2e:	f7ff bcab 	b.w	8004388 <__swbuf_r>
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	1c58      	adds	r0, r3, #1
 8004a36:	6010      	str	r0, [r2, #0]
 8004a38:	7019      	strb	r1, [r3, #0]
 8004a3a:	4608      	mov	r0, r1
 8004a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <__sfputs_r>:
 8004a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a44:	4606      	mov	r6, r0
 8004a46:	460f      	mov	r7, r1
 8004a48:	4614      	mov	r4, r2
 8004a4a:	18d5      	adds	r5, r2, r3
 8004a4c:	42ac      	cmp	r4, r5
 8004a4e:	d101      	bne.n	8004a54 <__sfputs_r+0x12>
 8004a50:	2000      	movs	r0, #0
 8004a52:	e007      	b.n	8004a64 <__sfputs_r+0x22>
 8004a54:	463a      	mov	r2, r7
 8004a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7ff ffda 	bl	8004a14 <__sfputc_r>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d1f3      	bne.n	8004a4c <__sfputs_r+0xa>
 8004a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a68 <_vfiprintf_r>:
 8004a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	b09d      	sub	sp, #116	; 0x74
 8004a70:	4617      	mov	r7, r2
 8004a72:	461d      	mov	r5, r3
 8004a74:	4606      	mov	r6, r0
 8004a76:	b118      	cbz	r0, 8004a80 <_vfiprintf_r+0x18>
 8004a78:	6983      	ldr	r3, [r0, #24]
 8004a7a:	b90b      	cbnz	r3, 8004a80 <_vfiprintf_r+0x18>
 8004a7c:	f7ff fe34 	bl	80046e8 <__sinit>
 8004a80:	4b7c      	ldr	r3, [pc, #496]	; (8004c74 <_vfiprintf_r+0x20c>)
 8004a82:	429c      	cmp	r4, r3
 8004a84:	d158      	bne.n	8004b38 <_vfiprintf_r+0xd0>
 8004a86:	6874      	ldr	r4, [r6, #4]
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	0718      	lsls	r0, r3, #28
 8004a8c:	d55e      	bpl.n	8004b4c <_vfiprintf_r+0xe4>
 8004a8e:	6923      	ldr	r3, [r4, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d05b      	beq.n	8004b4c <_vfiprintf_r+0xe4>
 8004a94:	2300      	movs	r3, #0
 8004a96:	9309      	str	r3, [sp, #36]	; 0x24
 8004a98:	2320      	movs	r3, #32
 8004a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a9e:	2330      	movs	r3, #48	; 0x30
 8004aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aa4:	9503      	str	r5, [sp, #12]
 8004aa6:	f04f 0b01 	mov.w	fp, #1
 8004aaa:	46b8      	mov	r8, r7
 8004aac:	4645      	mov	r5, r8
 8004aae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ab2:	b10b      	cbz	r3, 8004ab8 <_vfiprintf_r+0x50>
 8004ab4:	2b25      	cmp	r3, #37	; 0x25
 8004ab6:	d154      	bne.n	8004b62 <_vfiprintf_r+0xfa>
 8004ab8:	ebb8 0a07 	subs.w	sl, r8, r7
 8004abc:	d00b      	beq.n	8004ad6 <_vfiprintf_r+0x6e>
 8004abe:	4653      	mov	r3, sl
 8004ac0:	463a      	mov	r2, r7
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f7ff ffbc 	bl	8004a42 <__sfputs_r>
 8004aca:	3001      	adds	r0, #1
 8004acc:	f000 80c2 	beq.w	8004c54 <_vfiprintf_r+0x1ec>
 8004ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad2:	4453      	add	r3, sl
 8004ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ad6:	f898 3000 	ldrb.w	r3, [r8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80ba 	beq.w	8004c54 <_vfiprintf_r+0x1ec>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aea:	9304      	str	r3, [sp, #16]
 8004aec:	9307      	str	r3, [sp, #28]
 8004aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004af2:	931a      	str	r3, [sp, #104]	; 0x68
 8004af4:	46a8      	mov	r8, r5
 8004af6:	2205      	movs	r2, #5
 8004af8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004afc:	485e      	ldr	r0, [pc, #376]	; (8004c78 <_vfiprintf_r+0x210>)
 8004afe:	f7fb fb67 	bl	80001d0 <memchr>
 8004b02:	9b04      	ldr	r3, [sp, #16]
 8004b04:	bb78      	cbnz	r0, 8004b66 <_vfiprintf_r+0xfe>
 8004b06:	06d9      	lsls	r1, r3, #27
 8004b08:	bf44      	itt	mi
 8004b0a:	2220      	movmi	r2, #32
 8004b0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b10:	071a      	lsls	r2, r3, #28
 8004b12:	bf44      	itt	mi
 8004b14:	222b      	movmi	r2, #43	; 0x2b
 8004b16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b1a:	782a      	ldrb	r2, [r5, #0]
 8004b1c:	2a2a      	cmp	r2, #42	; 0x2a
 8004b1e:	d02a      	beq.n	8004b76 <_vfiprintf_r+0x10e>
 8004b20:	9a07      	ldr	r2, [sp, #28]
 8004b22:	46a8      	mov	r8, r5
 8004b24:	2000      	movs	r0, #0
 8004b26:	250a      	movs	r5, #10
 8004b28:	4641      	mov	r1, r8
 8004b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b2e:	3b30      	subs	r3, #48	; 0x30
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d969      	bls.n	8004c08 <_vfiprintf_r+0x1a0>
 8004b34:	b360      	cbz	r0, 8004b90 <_vfiprintf_r+0x128>
 8004b36:	e024      	b.n	8004b82 <_vfiprintf_r+0x11a>
 8004b38:	4b50      	ldr	r3, [pc, #320]	; (8004c7c <_vfiprintf_r+0x214>)
 8004b3a:	429c      	cmp	r4, r3
 8004b3c:	d101      	bne.n	8004b42 <_vfiprintf_r+0xda>
 8004b3e:	68b4      	ldr	r4, [r6, #8]
 8004b40:	e7a2      	b.n	8004a88 <_vfiprintf_r+0x20>
 8004b42:	4b4f      	ldr	r3, [pc, #316]	; (8004c80 <_vfiprintf_r+0x218>)
 8004b44:	429c      	cmp	r4, r3
 8004b46:	bf08      	it	eq
 8004b48:	68f4      	ldreq	r4, [r6, #12]
 8004b4a:	e79d      	b.n	8004a88 <_vfiprintf_r+0x20>
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f7ff fc6c 	bl	800442c <__swsetup_r>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d09d      	beq.n	8004a94 <_vfiprintf_r+0x2c>
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5c:	b01d      	add	sp, #116	; 0x74
 8004b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b62:	46a8      	mov	r8, r5
 8004b64:	e7a2      	b.n	8004aac <_vfiprintf_r+0x44>
 8004b66:	4a44      	ldr	r2, [pc, #272]	; (8004c78 <_vfiprintf_r+0x210>)
 8004b68:	1a80      	subs	r0, r0, r2
 8004b6a:	fa0b f000 	lsl.w	r0, fp, r0
 8004b6e:	4318      	orrs	r0, r3
 8004b70:	9004      	str	r0, [sp, #16]
 8004b72:	4645      	mov	r5, r8
 8004b74:	e7be      	b.n	8004af4 <_vfiprintf_r+0x8c>
 8004b76:	9a03      	ldr	r2, [sp, #12]
 8004b78:	1d11      	adds	r1, r2, #4
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	9103      	str	r1, [sp, #12]
 8004b7e:	2a00      	cmp	r2, #0
 8004b80:	db01      	blt.n	8004b86 <_vfiprintf_r+0x11e>
 8004b82:	9207      	str	r2, [sp, #28]
 8004b84:	e004      	b.n	8004b90 <_vfiprintf_r+0x128>
 8004b86:	4252      	negs	r2, r2
 8004b88:	f043 0302 	orr.w	r3, r3, #2
 8004b8c:	9207      	str	r2, [sp, #28]
 8004b8e:	9304      	str	r3, [sp, #16]
 8004b90:	f898 3000 	ldrb.w	r3, [r8]
 8004b94:	2b2e      	cmp	r3, #46	; 0x2e
 8004b96:	d10e      	bne.n	8004bb6 <_vfiprintf_r+0x14e>
 8004b98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b9e:	d138      	bne.n	8004c12 <_vfiprintf_r+0x1aa>
 8004ba0:	9b03      	ldr	r3, [sp, #12]
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	9203      	str	r2, [sp, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bfb8      	it	lt
 8004bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bb0:	f108 0802 	add.w	r8, r8, #2
 8004bb4:	9305      	str	r3, [sp, #20]
 8004bb6:	4d33      	ldr	r5, [pc, #204]	; (8004c84 <_vfiprintf_r+0x21c>)
 8004bb8:	f898 1000 	ldrb.w	r1, [r8]
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f7fb fb06 	bl	80001d0 <memchr>
 8004bc4:	b140      	cbz	r0, 8004bd8 <_vfiprintf_r+0x170>
 8004bc6:	2340      	movs	r3, #64	; 0x40
 8004bc8:	1b40      	subs	r0, r0, r5
 8004bca:	fa03 f000 	lsl.w	r0, r3, r0
 8004bce:	9b04      	ldr	r3, [sp, #16]
 8004bd0:	4303      	orrs	r3, r0
 8004bd2:	f108 0801 	add.w	r8, r8, #1
 8004bd6:	9304      	str	r3, [sp, #16]
 8004bd8:	f898 1000 	ldrb.w	r1, [r8]
 8004bdc:	482a      	ldr	r0, [pc, #168]	; (8004c88 <_vfiprintf_r+0x220>)
 8004bde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004be2:	2206      	movs	r2, #6
 8004be4:	f108 0701 	add.w	r7, r8, #1
 8004be8:	f7fb faf2 	bl	80001d0 <memchr>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d037      	beq.n	8004c60 <_vfiprintf_r+0x1f8>
 8004bf0:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <_vfiprintf_r+0x224>)
 8004bf2:	bb1b      	cbnz	r3, 8004c3c <_vfiprintf_r+0x1d4>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	3307      	adds	r3, #7
 8004bf8:	f023 0307 	bic.w	r3, r3, #7
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	9303      	str	r3, [sp, #12]
 8004c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c02:	444b      	add	r3, r9
 8004c04:	9309      	str	r3, [sp, #36]	; 0x24
 8004c06:	e750      	b.n	8004aaa <_vfiprintf_r+0x42>
 8004c08:	fb05 3202 	mla	r2, r5, r2, r3
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	4688      	mov	r8, r1
 8004c10:	e78a      	b.n	8004b28 <_vfiprintf_r+0xc0>
 8004c12:	2300      	movs	r3, #0
 8004c14:	f108 0801 	add.w	r8, r8, #1
 8004c18:	9305      	str	r3, [sp, #20]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	250a      	movs	r5, #10
 8004c1e:	4640      	mov	r0, r8
 8004c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c24:	3a30      	subs	r2, #48	; 0x30
 8004c26:	2a09      	cmp	r2, #9
 8004c28:	d903      	bls.n	8004c32 <_vfiprintf_r+0x1ca>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0c3      	beq.n	8004bb6 <_vfiprintf_r+0x14e>
 8004c2e:	9105      	str	r1, [sp, #20]
 8004c30:	e7c1      	b.n	8004bb6 <_vfiprintf_r+0x14e>
 8004c32:	fb05 2101 	mla	r1, r5, r1, r2
 8004c36:	2301      	movs	r3, #1
 8004c38:	4680      	mov	r8, r0
 8004c3a:	e7f0      	b.n	8004c1e <_vfiprintf_r+0x1b6>
 8004c3c:	ab03      	add	r3, sp, #12
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	4622      	mov	r2, r4
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <_vfiprintf_r+0x228>)
 8004c44:	a904      	add	r1, sp, #16
 8004c46:	4630      	mov	r0, r6
 8004c48:	f3af 8000 	nop.w
 8004c4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c50:	4681      	mov	r9, r0
 8004c52:	d1d5      	bne.n	8004c00 <_vfiprintf_r+0x198>
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	065b      	lsls	r3, r3, #25
 8004c58:	f53f af7e 	bmi.w	8004b58 <_vfiprintf_r+0xf0>
 8004c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c5e:	e77d      	b.n	8004b5c <_vfiprintf_r+0xf4>
 8004c60:	ab03      	add	r3, sp, #12
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	4622      	mov	r2, r4
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <_vfiprintf_r+0x228>)
 8004c68:	a904      	add	r1, sp, #16
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f000 f888 	bl	8004d80 <_printf_i>
 8004c70:	e7ec      	b.n	8004c4c <_vfiprintf_r+0x1e4>
 8004c72:	bf00      	nop
 8004c74:	080051f8 	.word	0x080051f8
 8004c78:	08005238 	.word	0x08005238
 8004c7c:	08005218 	.word	0x08005218
 8004c80:	080051d8 	.word	0x080051d8
 8004c84:	0800523e 	.word	0x0800523e
 8004c88:	08005242 	.word	0x08005242
 8004c8c:	00000000 	.word	0x00000000
 8004c90:	08004a43 	.word	0x08004a43

08004c94 <_printf_common>:
 8004c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c98:	4691      	mov	r9, r2
 8004c9a:	461f      	mov	r7, r3
 8004c9c:	688a      	ldr	r2, [r1, #8]
 8004c9e:	690b      	ldr	r3, [r1, #16]
 8004ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	bfb8      	it	lt
 8004ca8:	4613      	movlt	r3, r2
 8004caa:	f8c9 3000 	str.w	r3, [r9]
 8004cae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	b112      	cbz	r2, 8004cbe <_printf_common+0x2a>
 8004cb8:	3301      	adds	r3, #1
 8004cba:	f8c9 3000 	str.w	r3, [r9]
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	0699      	lsls	r1, r3, #26
 8004cc2:	bf42      	ittt	mi
 8004cc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004cc8:	3302      	addmi	r3, #2
 8004cca:	f8c9 3000 	strmi.w	r3, [r9]
 8004cce:	6825      	ldr	r5, [r4, #0]
 8004cd0:	f015 0506 	ands.w	r5, r5, #6
 8004cd4:	d107      	bne.n	8004ce6 <_printf_common+0x52>
 8004cd6:	f104 0a19 	add.w	sl, r4, #25
 8004cda:	68e3      	ldr	r3, [r4, #12]
 8004cdc:	f8d9 2000 	ldr.w	r2, [r9]
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	42ab      	cmp	r3, r5
 8004ce4:	dc28      	bgt.n	8004d38 <_printf_common+0xa4>
 8004ce6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004cea:	6822      	ldr	r2, [r4, #0]
 8004cec:	3300      	adds	r3, #0
 8004cee:	bf18      	it	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	0692      	lsls	r2, r2, #26
 8004cf4:	d42d      	bmi.n	8004d52 <_printf_common+0xbe>
 8004cf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	47c0      	blx	r8
 8004d00:	3001      	adds	r0, #1
 8004d02:	d020      	beq.n	8004d46 <_printf_common+0xb2>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	68e5      	ldr	r5, [r4, #12]
 8004d08:	f8d9 2000 	ldr.w	r2, [r9]
 8004d0c:	f003 0306 	and.w	r3, r3, #6
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	bf08      	it	eq
 8004d14:	1aad      	subeq	r5, r5, r2
 8004d16:	68a3      	ldr	r3, [r4, #8]
 8004d18:	6922      	ldr	r2, [r4, #16]
 8004d1a:	bf0c      	ite	eq
 8004d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d20:	2500      	movne	r5, #0
 8004d22:	4293      	cmp	r3, r2
 8004d24:	bfc4      	itt	gt
 8004d26:	1a9b      	subgt	r3, r3, r2
 8004d28:	18ed      	addgt	r5, r5, r3
 8004d2a:	f04f 0900 	mov.w	r9, #0
 8004d2e:	341a      	adds	r4, #26
 8004d30:	454d      	cmp	r5, r9
 8004d32:	d11a      	bne.n	8004d6a <_printf_common+0xd6>
 8004d34:	2000      	movs	r0, #0
 8004d36:	e008      	b.n	8004d4a <_printf_common+0xb6>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4652      	mov	r2, sl
 8004d3c:	4639      	mov	r1, r7
 8004d3e:	4630      	mov	r0, r6
 8004d40:	47c0      	blx	r8
 8004d42:	3001      	adds	r0, #1
 8004d44:	d103      	bne.n	8004d4e <_printf_common+0xba>
 8004d46:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4e:	3501      	adds	r5, #1
 8004d50:	e7c3      	b.n	8004cda <_printf_common+0x46>
 8004d52:	18e1      	adds	r1, r4, r3
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	2030      	movs	r0, #48	; 0x30
 8004d58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d5c:	4422      	add	r2, r4
 8004d5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d66:	3302      	adds	r3, #2
 8004d68:	e7c5      	b.n	8004cf6 <_printf_common+0x62>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	4639      	mov	r1, r7
 8004d70:	4630      	mov	r0, r6
 8004d72:	47c0      	blx	r8
 8004d74:	3001      	adds	r0, #1
 8004d76:	d0e6      	beq.n	8004d46 <_printf_common+0xb2>
 8004d78:	f109 0901 	add.w	r9, r9, #1
 8004d7c:	e7d8      	b.n	8004d30 <_printf_common+0x9c>
	...

08004d80 <_printf_i>:
 8004d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d88:	460c      	mov	r4, r1
 8004d8a:	7e09      	ldrb	r1, [r1, #24]
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	296e      	cmp	r1, #110	; 0x6e
 8004d90:	4617      	mov	r7, r2
 8004d92:	4606      	mov	r6, r0
 8004d94:	4698      	mov	r8, r3
 8004d96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d98:	f000 80b3 	beq.w	8004f02 <_printf_i+0x182>
 8004d9c:	d822      	bhi.n	8004de4 <_printf_i+0x64>
 8004d9e:	2963      	cmp	r1, #99	; 0x63
 8004da0:	d036      	beq.n	8004e10 <_printf_i+0x90>
 8004da2:	d80a      	bhi.n	8004dba <_printf_i+0x3a>
 8004da4:	2900      	cmp	r1, #0
 8004da6:	f000 80b9 	beq.w	8004f1c <_printf_i+0x19c>
 8004daa:	2958      	cmp	r1, #88	; 0x58
 8004dac:	f000 8083 	beq.w	8004eb6 <_printf_i+0x136>
 8004db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004db8:	e032      	b.n	8004e20 <_printf_i+0xa0>
 8004dba:	2964      	cmp	r1, #100	; 0x64
 8004dbc:	d001      	beq.n	8004dc2 <_printf_i+0x42>
 8004dbe:	2969      	cmp	r1, #105	; 0x69
 8004dc0:	d1f6      	bne.n	8004db0 <_printf_i+0x30>
 8004dc2:	6820      	ldr	r0, [r4, #0]
 8004dc4:	6813      	ldr	r3, [r2, #0]
 8004dc6:	0605      	lsls	r5, r0, #24
 8004dc8:	f103 0104 	add.w	r1, r3, #4
 8004dcc:	d52a      	bpl.n	8004e24 <_printf_i+0xa4>
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6011      	str	r1, [r2, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	da03      	bge.n	8004dde <_printf_i+0x5e>
 8004dd6:	222d      	movs	r2, #45	; 0x2d
 8004dd8:	425b      	negs	r3, r3
 8004dda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004dde:	486f      	ldr	r0, [pc, #444]	; (8004f9c <_printf_i+0x21c>)
 8004de0:	220a      	movs	r2, #10
 8004de2:	e039      	b.n	8004e58 <_printf_i+0xd8>
 8004de4:	2973      	cmp	r1, #115	; 0x73
 8004de6:	f000 809d 	beq.w	8004f24 <_printf_i+0x1a4>
 8004dea:	d808      	bhi.n	8004dfe <_printf_i+0x7e>
 8004dec:	296f      	cmp	r1, #111	; 0x6f
 8004dee:	d020      	beq.n	8004e32 <_printf_i+0xb2>
 8004df0:	2970      	cmp	r1, #112	; 0x70
 8004df2:	d1dd      	bne.n	8004db0 <_printf_i+0x30>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	f043 0320 	orr.w	r3, r3, #32
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	e003      	b.n	8004e06 <_printf_i+0x86>
 8004dfe:	2975      	cmp	r1, #117	; 0x75
 8004e00:	d017      	beq.n	8004e32 <_printf_i+0xb2>
 8004e02:	2978      	cmp	r1, #120	; 0x78
 8004e04:	d1d4      	bne.n	8004db0 <_printf_i+0x30>
 8004e06:	2378      	movs	r3, #120	; 0x78
 8004e08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e0c:	4864      	ldr	r0, [pc, #400]	; (8004fa0 <_printf_i+0x220>)
 8004e0e:	e055      	b.n	8004ebc <_printf_i+0x13c>
 8004e10:	6813      	ldr	r3, [r2, #0]
 8004e12:	1d19      	adds	r1, r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6011      	str	r1, [r2, #0]
 8004e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e20:	2301      	movs	r3, #1
 8004e22:	e08c      	b.n	8004f3e <_printf_i+0x1be>
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6011      	str	r1, [r2, #0]
 8004e28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e2c:	bf18      	it	ne
 8004e2e:	b21b      	sxthne	r3, r3
 8004e30:	e7cf      	b.n	8004dd2 <_printf_i+0x52>
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	6825      	ldr	r5, [r4, #0]
 8004e36:	1d18      	adds	r0, r3, #4
 8004e38:	6010      	str	r0, [r2, #0]
 8004e3a:	0628      	lsls	r0, r5, #24
 8004e3c:	d501      	bpl.n	8004e42 <_printf_i+0xc2>
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	e002      	b.n	8004e48 <_printf_i+0xc8>
 8004e42:	0668      	lsls	r0, r5, #25
 8004e44:	d5fb      	bpl.n	8004e3e <_printf_i+0xbe>
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	4854      	ldr	r0, [pc, #336]	; (8004f9c <_printf_i+0x21c>)
 8004e4a:	296f      	cmp	r1, #111	; 0x6f
 8004e4c:	bf14      	ite	ne
 8004e4e:	220a      	movne	r2, #10
 8004e50:	2208      	moveq	r2, #8
 8004e52:	2100      	movs	r1, #0
 8004e54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e58:	6865      	ldr	r5, [r4, #4]
 8004e5a:	60a5      	str	r5, [r4, #8]
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	f2c0 8095 	blt.w	8004f8c <_printf_i+0x20c>
 8004e62:	6821      	ldr	r1, [r4, #0]
 8004e64:	f021 0104 	bic.w	r1, r1, #4
 8004e68:	6021      	str	r1, [r4, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d13d      	bne.n	8004eea <_printf_i+0x16a>
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	f040 808e 	bne.w	8004f90 <_printf_i+0x210>
 8004e74:	4665      	mov	r5, ip
 8004e76:	2a08      	cmp	r2, #8
 8004e78:	d10b      	bne.n	8004e92 <_printf_i+0x112>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	07db      	lsls	r3, r3, #31
 8004e7e:	d508      	bpl.n	8004e92 <_printf_i+0x112>
 8004e80:	6923      	ldr	r3, [r4, #16]
 8004e82:	6862      	ldr	r2, [r4, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	bfde      	ittt	le
 8004e88:	2330      	movle	r3, #48	; 0x30
 8004e8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e92:	ebac 0305 	sub.w	r3, ip, r5
 8004e96:	6123      	str	r3, [r4, #16]
 8004e98:	f8cd 8000 	str.w	r8, [sp]
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	aa03      	add	r2, sp, #12
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff fef6 	bl	8004c94 <_printf_common>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d14d      	bne.n	8004f48 <_printf_i+0x1c8>
 8004eac:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb0:	b005      	add	sp, #20
 8004eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004eb6:	4839      	ldr	r0, [pc, #228]	; (8004f9c <_printf_i+0x21c>)
 8004eb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ebc:	6813      	ldr	r3, [r2, #0]
 8004ebe:	6821      	ldr	r1, [r4, #0]
 8004ec0:	1d1d      	adds	r5, r3, #4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6015      	str	r5, [r2, #0]
 8004ec6:	060a      	lsls	r2, r1, #24
 8004ec8:	d50b      	bpl.n	8004ee2 <_printf_i+0x162>
 8004eca:	07ca      	lsls	r2, r1, #31
 8004ecc:	bf44      	itt	mi
 8004ece:	f041 0120 	orrmi.w	r1, r1, #32
 8004ed2:	6021      	strmi	r1, [r4, #0]
 8004ed4:	b91b      	cbnz	r3, 8004ede <_printf_i+0x15e>
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	f022 0220 	bic.w	r2, r2, #32
 8004edc:	6022      	str	r2, [r4, #0]
 8004ede:	2210      	movs	r2, #16
 8004ee0:	e7b7      	b.n	8004e52 <_printf_i+0xd2>
 8004ee2:	064d      	lsls	r5, r1, #25
 8004ee4:	bf48      	it	mi
 8004ee6:	b29b      	uxthmi	r3, r3
 8004ee8:	e7ef      	b.n	8004eca <_printf_i+0x14a>
 8004eea:	4665      	mov	r5, ip
 8004eec:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ef0:	fb02 3311 	mls	r3, r2, r1, r3
 8004ef4:	5cc3      	ldrb	r3, [r0, r3]
 8004ef6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004efa:	460b      	mov	r3, r1
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d1f5      	bne.n	8004eec <_printf_i+0x16c>
 8004f00:	e7b9      	b.n	8004e76 <_printf_i+0xf6>
 8004f02:	6813      	ldr	r3, [r2, #0]
 8004f04:	6825      	ldr	r5, [r4, #0]
 8004f06:	6961      	ldr	r1, [r4, #20]
 8004f08:	1d18      	adds	r0, r3, #4
 8004f0a:	6010      	str	r0, [r2, #0]
 8004f0c:	0628      	lsls	r0, r5, #24
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	d501      	bpl.n	8004f16 <_printf_i+0x196>
 8004f12:	6019      	str	r1, [r3, #0]
 8004f14:	e002      	b.n	8004f1c <_printf_i+0x19c>
 8004f16:	066a      	lsls	r2, r5, #25
 8004f18:	d5fb      	bpl.n	8004f12 <_printf_i+0x192>
 8004f1a:	8019      	strh	r1, [r3, #0]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	6123      	str	r3, [r4, #16]
 8004f20:	4665      	mov	r5, ip
 8004f22:	e7b9      	b.n	8004e98 <_printf_i+0x118>
 8004f24:	6813      	ldr	r3, [r2, #0]
 8004f26:	1d19      	adds	r1, r3, #4
 8004f28:	6011      	str	r1, [r2, #0]
 8004f2a:	681d      	ldr	r5, [r3, #0]
 8004f2c:	6862      	ldr	r2, [r4, #4]
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4628      	mov	r0, r5
 8004f32:	f7fb f94d 	bl	80001d0 <memchr>
 8004f36:	b108      	cbz	r0, 8004f3c <_printf_i+0x1bc>
 8004f38:	1b40      	subs	r0, r0, r5
 8004f3a:	6060      	str	r0, [r4, #4]
 8004f3c:	6863      	ldr	r3, [r4, #4]
 8004f3e:	6123      	str	r3, [r4, #16]
 8004f40:	2300      	movs	r3, #0
 8004f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f46:	e7a7      	b.n	8004e98 <_printf_i+0x118>
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	462a      	mov	r2, r5
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	4630      	mov	r0, r6
 8004f50:	47c0      	blx	r8
 8004f52:	3001      	adds	r0, #1
 8004f54:	d0aa      	beq.n	8004eac <_printf_i+0x12c>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	079b      	lsls	r3, r3, #30
 8004f5a:	d413      	bmi.n	8004f84 <_printf_i+0x204>
 8004f5c:	68e0      	ldr	r0, [r4, #12]
 8004f5e:	9b03      	ldr	r3, [sp, #12]
 8004f60:	4298      	cmp	r0, r3
 8004f62:	bfb8      	it	lt
 8004f64:	4618      	movlt	r0, r3
 8004f66:	e7a3      	b.n	8004eb0 <_printf_i+0x130>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	464a      	mov	r2, r9
 8004f6c:	4639      	mov	r1, r7
 8004f6e:	4630      	mov	r0, r6
 8004f70:	47c0      	blx	r8
 8004f72:	3001      	adds	r0, #1
 8004f74:	d09a      	beq.n	8004eac <_printf_i+0x12c>
 8004f76:	3501      	adds	r5, #1
 8004f78:	68e3      	ldr	r3, [r4, #12]
 8004f7a:	9a03      	ldr	r2, [sp, #12]
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	42ab      	cmp	r3, r5
 8004f80:	dcf2      	bgt.n	8004f68 <_printf_i+0x1e8>
 8004f82:	e7eb      	b.n	8004f5c <_printf_i+0x1dc>
 8004f84:	2500      	movs	r5, #0
 8004f86:	f104 0919 	add.w	r9, r4, #25
 8004f8a:	e7f5      	b.n	8004f78 <_printf_i+0x1f8>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ac      	bne.n	8004eea <_printf_i+0x16a>
 8004f90:	7803      	ldrb	r3, [r0, #0]
 8004f92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f9a:	e76c      	b.n	8004e76 <_printf_i+0xf6>
 8004f9c:	08005249 	.word	0x08005249
 8004fa0:	0800525a 	.word	0x0800525a

08004fa4 <_sbrk_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4c06      	ldr	r4, [pc, #24]	; (8004fc0 <_sbrk_r+0x1c>)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4605      	mov	r5, r0
 8004fac:	4608      	mov	r0, r1
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	f7fc f8d6 	bl	8001160 <_sbrk>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_sbrk_r+0x1a>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_sbrk_r+0x1a>
 8004fbc:	602b      	str	r3, [r5, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	200002ac 	.word	0x200002ac

08004fc4 <__sread>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fcc:	f000 f896 	bl	80050fc <_read_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	bfab      	itete	ge
 8004fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fd8:	181b      	addge	r3, r3, r0
 8004fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fde:	bfac      	ite	ge
 8004fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fe2:	81a3      	strhlt	r3, [r4, #12]
 8004fe4:	bd10      	pop	{r4, pc}

08004fe6 <__swrite>:
 8004fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fea:	461f      	mov	r7, r3
 8004fec:	898b      	ldrh	r3, [r1, #12]
 8004fee:	05db      	lsls	r3, r3, #23
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	d505      	bpl.n	8005004 <__swrite+0x1e>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005000:	f000 f868 	bl	80050d4 <_lseek_r>
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800500a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	4632      	mov	r2, r6
 8005012:	463b      	mov	r3, r7
 8005014:	4628      	mov	r0, r5
 8005016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800501a:	f000 b817 	b.w	800504c <_write_r>

0800501e <__sseek>:
 800501e:	b510      	push	{r4, lr}
 8005020:	460c      	mov	r4, r1
 8005022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005026:	f000 f855 	bl	80050d4 <_lseek_r>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	bf15      	itete	ne
 8005030:	6560      	strne	r0, [r4, #84]	; 0x54
 8005032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800503a:	81a3      	strheq	r3, [r4, #12]
 800503c:	bf18      	it	ne
 800503e:	81a3      	strhne	r3, [r4, #12]
 8005040:	bd10      	pop	{r4, pc}

08005042 <__sclose>:
 8005042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005046:	f000 b813 	b.w	8005070 <_close_r>
	...

0800504c <_write_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4c07      	ldr	r4, [pc, #28]	; (800506c <_write_r+0x20>)
 8005050:	4605      	mov	r5, r0
 8005052:	4608      	mov	r0, r1
 8005054:	4611      	mov	r1, r2
 8005056:	2200      	movs	r2, #0
 8005058:	6022      	str	r2, [r4, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	f7fc f82f 	bl	80010be <_write>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_write_r+0x1e>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	b103      	cbz	r3, 800506a <_write_r+0x1e>
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	200002ac 	.word	0x200002ac

08005070 <_close_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4c06      	ldr	r4, [pc, #24]	; (800508c <_close_r+0x1c>)
 8005074:	2300      	movs	r3, #0
 8005076:	4605      	mov	r5, r0
 8005078:	4608      	mov	r0, r1
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	f7fc f83b 	bl	80010f6 <_close>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d102      	bne.n	800508a <_close_r+0x1a>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	b103      	cbz	r3, 800508a <_close_r+0x1a>
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	bd38      	pop	{r3, r4, r5, pc}
 800508c:	200002ac 	.word	0x200002ac

08005090 <_fstat_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4c07      	ldr	r4, [pc, #28]	; (80050b0 <_fstat_r+0x20>)
 8005094:	2300      	movs	r3, #0
 8005096:	4605      	mov	r5, r0
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	f7fc f836 	bl	800110e <_fstat>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	d102      	bne.n	80050ac <_fstat_r+0x1c>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	b103      	cbz	r3, 80050ac <_fstat_r+0x1c>
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	bd38      	pop	{r3, r4, r5, pc}
 80050ae:	bf00      	nop
 80050b0:	200002ac 	.word	0x200002ac

080050b4 <_isatty_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4c06      	ldr	r4, [pc, #24]	; (80050d0 <_isatty_r+0x1c>)
 80050b8:	2300      	movs	r3, #0
 80050ba:	4605      	mov	r5, r0
 80050bc:	4608      	mov	r0, r1
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	f7fc f835 	bl	800112e <_isatty>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_isatty_r+0x1a>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_isatty_r+0x1a>
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	200002ac 	.word	0x200002ac

080050d4 <_lseek_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4c07      	ldr	r4, [pc, #28]	; (80050f4 <_lseek_r+0x20>)
 80050d8:	4605      	mov	r5, r0
 80050da:	4608      	mov	r0, r1
 80050dc:	4611      	mov	r1, r2
 80050de:	2200      	movs	r2, #0
 80050e0:	6022      	str	r2, [r4, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f7fc f82e 	bl	8001144 <_lseek>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_lseek_r+0x1e>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_lseek_r+0x1e>
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	200002ac 	.word	0x200002ac

080050f8 <__malloc_lock>:
 80050f8:	4770      	bx	lr

080050fa <__malloc_unlock>:
 80050fa:	4770      	bx	lr

080050fc <_read_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4c07      	ldr	r4, [pc, #28]	; (800511c <_read_r+0x20>)
 8005100:	4605      	mov	r5, r0
 8005102:	4608      	mov	r0, r1
 8005104:	4611      	mov	r1, r2
 8005106:	2200      	movs	r2, #0
 8005108:	6022      	str	r2, [r4, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	f7fb ffba 	bl	8001084 <_read>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_read_r+0x1e>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	b103      	cbz	r3, 800511a <_read_r+0x1e>
 8005118:	602b      	str	r3, [r5, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	200002ac 	.word	0x200002ac

08005120 <_init>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr

0800512c <_fini>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	bf00      	nop
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr
