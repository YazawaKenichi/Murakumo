
murakumo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006568  08006568  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006570  08006570  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006570  08006570  00016570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000074  080065ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  080065ec  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f82  00000000  00000000  0002e0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  00030058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  00030e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002098e  00000000  00000000  00031b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a284  00000000  00000000  0005248e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4fe3  00000000  00000000  0005c712  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001216f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a4  00000000  00000000  00121770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006250 	.word	0x08006250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006250 	.word	0x08006250

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
static void MX_TIM10_Init(void);
static void MX_TIM7_Init(void);
static void MX_TIM11_Init(void);
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f004 fa42 	bl	8004a0a <HAL_UART_Transmit>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200002d0 	.word	0x200002d0

08000594 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	// ADC END Program
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <HAL_TIM_PeriodElapsedCallback>:

uint8_t rotary_read();
void led_rgb(char r, char g, char b);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
#if !DISABLEANOTHERTIMERS
	if(htim->Instance == TIM6)	// TIM6	// 2ms
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a9a      	ldr	r2, [pc, #616]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	f040 80f8 	bne.w	80007ac <HAL_TIM_PeriodElapsedCallback+0x204>
	{
#if PLAY
	  // Analog Process
	  // https://github.com/YazawaKenichi/Murakumo/blob/main/circuit/cube_v2/README.md
		if(motorenable)
 80005bc:	4b99      	ldr	r3, [pc, #612]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f000 80eb 	beq.w	800079c <HAL_TIM_PeriodElapsedCallback+0x1f4>
		{
#if !D_SUBSENSTIM6
		  analogl = 0;
 80005c6:	4b98      	ldr	r3, [pc, #608]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	801a      	strh	r2, [r3, #0]
		  analogr = 0;
 80005cc:	4b97      	ldr	r3, [pc, #604]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
		  for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	75fb      	strb	r3, [r7, #23]
 80005d6:	e059      	b.n	800068c <HAL_TIM_PeriodElapsedCallback+0xe4>
		  {
			uint16_t analogbuf = analog[i];
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	4a95      	ldr	r2, [pc, #596]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80005dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e0:	823b      	strh	r3, [r7, #16]
	//	    analogmax[i] = (analogmax[i] < analogbuf) ? analogbuf : analogmax[i];
	//	    analogmin[i] = (analogmin[i] > analogbuf) ? analogbuf : analogmin[i];
			if(analogmax[i] < analogbuf)
 80005e2:	7dfb      	ldrb	r3, [r7, #23]
 80005e4:	4a93      	ldr	r2, [pc, #588]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80005e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ea:	8a3a      	ldrh	r2, [r7, #16]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d904      	bls.n	80005fa <HAL_TIM_PeriodElapsedCallback+0x52>
			{
				analogmax[i] = analogbuf;
 80005f0:	7dfb      	ldrb	r3, [r7, #23]
 80005f2:	4990      	ldr	r1, [pc, #576]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80005f4:	8a3a      	ldrh	r2, [r7, #16]
 80005f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}
			if(analogmin[i] > analogbuf)
 80005fa:	7dfb      	ldrb	r3, [r7, #23]
 80005fc:	4a8e      	ldr	r2, [pc, #568]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80005fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000602:	8a3a      	ldrh	r2, [r7, #16]
 8000604:	429a      	cmp	r2, r3
 8000606:	d204      	bcs.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x6a>
			{
				analogmin[i] = analogbuf;
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	498b      	ldr	r1, [pc, #556]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800060c:	8a3a      	ldrh	r2, [r7, #16]
 800060e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}

			analograte[i] = ((analog[i] - analogmin[i]) * 1000) / (analogmax[i] - analogmin[i]);
 8000612:	7dfb      	ldrb	r3, [r7, #23]
 8000614:	4a86      	ldr	r2, [pc, #536]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061a:	4619      	mov	r1, r3
 800061c:	7dfb      	ldrb	r3, [r7, #23]
 800061e:	4a86      	ldr	r2, [pc, #536]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000624:	1acb      	subs	r3, r1, r3
 8000626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800062a:	fb02 f203 	mul.w	r2, r2, r3
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	4980      	ldr	r1, [pc, #512]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000632:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000636:	4618      	mov	r0, r3
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	497f      	ldr	r1, [pc, #508]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800063c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000640:	1ac3      	subs	r3, r0, r3
 8000642:	fb92 f2f3 	sdiv	r2, r2, r3
 8000646:	7dfb      	ldrb	r3, [r7, #23]
 8000648:	b291      	uxth	r1, r2
 800064a:	4a7c      	ldr	r2, [pc, #496]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800064c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(i % 2 == 0)
 8000650:	7dfb      	ldrb	r3, [r7, #23]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10a      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0xca>
			{
			  analogl += analograte[i];
 800065c:	7dfb      	ldrb	r3, [r7, #23]
 800065e:	4a77      	ldr	r2, [pc, #476]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000660:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000664:	4b70      	ldr	r3, [pc, #448]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4413      	add	r3, r2
 800066a:	b29a      	uxth	r2, r3
 800066c:	4b6e      	ldr	r3, [pc, #440]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800066e:	801a      	strh	r2, [r3, #0]
 8000670:	e009      	b.n	8000686 <HAL_TIM_PeriodElapsedCallback+0xde>
			}
			else
			{
			  analogr += analograte[i];
 8000672:	7dfb      	ldrb	r3, [r7, #23]
 8000674:	4a71      	ldr	r2, [pc, #452]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000676:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800067a:	4b6c      	ldr	r3, [pc, #432]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	4413      	add	r3, r2
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b6a      	ldr	r3, [pc, #424]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000684:	801a      	strh	r2, [r3, #0]
		  for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	3301      	adds	r3, #1
 800068a:	75fb      	strb	r3, [r7, #23]
 800068c:	7dfb      	ldrb	r3, [r7, #23]
 800068e:	2b0b      	cmp	r3, #11
 8000690:	d9a2      	bls.n	80005d8 <HAL_TIM_PeriodElapsedCallback+0x30>
			}
		  }
		  direction = (analogl - analogr);	// difference
 8000692:	4b65      	ldr	r3, [pc, #404]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	4b64      	ldr	r3, [pc, #400]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	4a68      	ldr	r2, [pc, #416]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80006a0:	6013      	str	r3, [r2, #0]
		  leftmotor = commonspeed - direction / CALIBRATIONSIZE / 2 * KPL - (direction - beforedirection) * KDL;
 80006a2:	4b68      	ldr	r3, [pc, #416]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4b65      	ldr	r3, [pc, #404]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a66      	ldr	r2, [pc, #408]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80006ae:	fb82 0203 	smull	r0, r2, r2, r3
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	17db      	asrs	r3, r3, #31
 80006b6:	1a9a      	subs	r2, r3, r2
 80006b8:	4613      	mov	r3, r2
 80006ba:	011b      	lsls	r3, r3, #4
 80006bc:	1a9b      	subs	r3, r3, r2
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	18ca      	adds	r2, r1, r3
 80006c2:	4b5f      	ldr	r3, [pc, #380]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80006c4:	6819      	ldr	r1, [r3, #0]
 80006c6:	4b61      	ldr	r3, [pc, #388]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	1acb      	subs	r3, r1, r3
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	4a5f      	ldr	r2, [pc, #380]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80006d2:	6013      	str	r3, [r2, #0]
		  rightmotor = commonspeed + direction / CALIBRATIONSIZE / 2 * KPR + (direction - beforedirection) * KDR;
 80006d4:	4b5b      	ldr	r3, [pc, #364]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	4b59      	ldr	r3, [pc, #356]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a5a      	ldr	r2, [pc, #360]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80006e0:	fb82 0203 	smull	r0, r2, r2, r3
 80006e4:	1092      	asrs	r2, r2, #2
 80006e6:	17db      	asrs	r3, r3, #31
 80006e8:	1ad2      	subs	r2, r2, r3
 80006ea:	4613      	mov	r3, r2
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	18ca      	adds	r2, r1, r3
 80006f4:	4b52      	ldr	r3, [pc, #328]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	4b54      	ldr	r3, [pc, #336]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	1acb      	subs	r3, r1, r3
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	4413      	add	r3, r2
 8000702:	4a54      	ldr	r2, [pc, #336]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000704:	6013      	str	r3, [r2, #0]
		  beforedirection = direction;
 8000706:	4b4e      	ldr	r3, [pc, #312]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a50      	ldr	r2, [pc, #320]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800070c:	6013      	str	r3, [r2, #0]

		  if(leftmotor < 0)
 800070e:	4b50      	ldr	r3, [pc, #320]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	da0a      	bge.n	800072c <HAL_TIM_PeriodElapsedCallback+0x184>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2104      	movs	r1, #4
 800071a:	484f      	ldr	r0, [pc, #316]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800071c:	f002 ff1e 	bl	800355c <HAL_GPIO_WritePin>
			  leftmotor *= -1;
 8000720:	4b4b      	ldr	r3, [pc, #300]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	425b      	negs	r3, r3
 8000726:	4a4a      	ldr	r2, [pc, #296]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000728:	6013      	str	r3, [r2, #0]
 800072a:	e004      	b.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x18e>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	4849      	ldr	r0, [pc, #292]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000732:	f002 ff13 	bl	800355c <HAL_GPIO_WritePin>
		  }
		  if(rightmotor < 0)
 8000736:	4b47      	ldr	r3, [pc, #284]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	da0b      	bge.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x1ae>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000744:	4845      	ldr	r0, [pc, #276]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000746:	f002 ff09 	bl	800355c <HAL_GPIO_WritePin>
			  rightmotor *= -1;
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	425b      	negs	r3, r3
 8000750:	4a40      	ldr	r2, [pc, #256]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	e005      	b.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x1ba>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075c:	483f      	ldr	r0, [pc, #252]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800075e:	f002 fefd 	bl	800355c <HAL_GPIO_WritePin>
		  }
		  leftmotor = leftmotor > 1000 ? 1000 : leftmotor;
 8000762:	4b3b      	ldr	r3, [pc, #236]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800076a:	bfa8      	it	ge
 800076c:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8000770:	4a37      	ldr	r2, [pc, #220]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000772:	6013      	str	r3, [r2, #0]
		  rightmotor = rightmotor > 1000 ? 1000 : rightmotor;
 8000774:	4b37      	ldr	r3, [pc, #220]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800077c:	bfa8      	it	ge
 800077e:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8000782:	4a34      	ldr	r2, [pc, #208]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000784:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 8000786:	4b32      	ldr	r3, [pc, #200]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b35      	ldr	r3, [pc, #212]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 8000790:	4b30      	ldr	r3, [pc, #192]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b32      	ldr	r3, [pc, #200]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	639a      	str	r2, [r3, #56]	; 0x38
 800079a:	e007      	b.n	80007ac <HAL_TIM_PeriodElapsedCallback+0x204>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, COMMONSPEED);
#endif
		}
		else
		{
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800079c:	4b30      	ldr	r3, [pc, #192]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2200      	movs	r2, #0
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2200      	movs	r2, #0
 80007aa:	639a      	str	r2, [r3, #56]	; 0x38
		}

#endif
#endif
	}
	if(htim->Instance == TIM7)	// TIM7 // 0.1ms
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a2c      	ldr	r2, [pc, #176]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d119      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x242>
	{
	  if(sensgettime >= SENSGETCOUNT)
	  {
	  }
	  for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	75bb      	strb	r3, [r7, #22]
 80007ba:	e013      	b.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0x23c>
	  {
	    analogbuffers[sensgettime][index] = analograw[index];
 80007bc:	7dbb      	ldrb	r3, [r7, #22]
 80007be:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	4610      	mov	r0, r2
 80007c4:	7dba      	ldrb	r2, [r7, #22]
 80007c6:	4929      	ldr	r1, [pc, #164]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80007c8:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 80007cc:	4928      	ldr	r1, [pc, #160]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80007ce:	4603      	mov	r3, r0
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4403      	add	r3, r0
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	4622      	mov	r2, r4
 80007da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 80007de:	7dbb      	ldrb	r3, [r7, #22]
 80007e0:	3301      	adds	r3, #1
 80007e2:	75bb      	strb	r3, [r7, #22]
 80007e4:	7dbb      	ldrb	r3, [r7, #22]
 80007e6:	2b0b      	cmp	r3, #11
 80007e8:	d9e8      	bls.n	80007bc <HAL_TIM_PeriodElapsedCallback+0x214>
	  }
	}
#endif	// DISABLEANOTHERTIMERS
	if(htim->Instance == TIM10)	// TIM10 // 1ms
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a21      	ldr	r2, [pc, #132]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	f040 80a6 	bne.w	8000942 <HAL_TIM_PeriodElapsedCallback+0x39a>
	{
#if SUBSENSTIM10
		unsigned char subsens, first, second;

		subsens = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0; // right
 80007f6:	2104      	movs	r1, #4
 80007f8:	481f      	ldr	r0, [pc, #124]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80007fa:	f002 fe97 	bl	800352c <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf0c      	ite	eq
 8000804:	2301      	moveq	r3, #1
 8000806:	2300      	movne	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]
		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 800080c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000810:	4819      	ldr	r0, [pc, #100]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000812:	f002 fe8b 	bl	800352c <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d12f      	bne.n	800087c <HAL_TIM_PeriodElapsedCallback+0x2d4>
 800081c:	2302      	movs	r3, #2
 800081e:	e02e      	b.n	800087e <HAL_TIM_PeriodElapsedCallback+0x2d6>
 8000820:	40001000 	.word	0x40001000
 8000824:	200000ec 	.word	0x200000ec
 8000828:	20000198 	.word	0x20000198
 800082c:	20000310 	.word	0x20000310
 8000830:	200000b0 	.word	0x200000b0
 8000834:	200003ec 	.word	0x200003ec
 8000838:	20000180 	.word	0x20000180
 800083c:	200000c8 	.word	0x200000c8
 8000840:	2000019c 	.word	0x2000019c
 8000844:	20000000 	.word	0x20000000
 8000848:	2aaaaaab 	.word	0x2aaaaaab
 800084c:	200000e0 	.word	0x200000e0
 8000850:	200000e4 	.word	0x200000e4
 8000854:	200000e8 	.word	0x200000e8
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40020800 	.word	0x40020800
 8000860:	20000100 	.word	0x20000100
 8000864:	40001400 	.word	0x40001400
 8000868:	200000fc 	.word	0x200000fc
 800086c:	20000090 	.word	0x20000090
 8000870:	20000314 	.word	0x20000314
 8000874:	40014400 	.word	0x40014400
 8000878:	40020400 	.word	0x40020400
 800087c:	2300      	movs	r3, #0
 800087e:	b2da      	uxtb	r2, r3
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	4413      	add	r3, r2
 8000884:	73fb      	strb	r3, [r7, #15]

		if(subsens != subsensbuf)
 8000886:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x464>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	7bfa      	ldrb	r2, [r7, #15]
 800088c:	429a      	cmp	r2, r3
 800088e:	d058      	beq.n	8000942 <HAL_TIM_PeriodElapsedCallback+0x39a>
		{
			subsensbuf = subsens;
 8000890:	4a5e      	ldr	r2, [pc, #376]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x464>)
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	7013      	strb	r3, [r2, #0]
			marker += subsens << (2 * sidedeltacount);
 8000896:	7bfa      	ldrb	r2, [r7, #15]
 8000898:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b5b      	ldr	r3, [pc, #364]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4413      	add	r3, r2
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b59      	ldr	r3, [pc, #356]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80008ae:	701a      	strb	r2, [r3, #0]
			if(subsens == 0b00 && sidedeltacount != 0)
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d13f      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x38e>
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d03b      	beq.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x38e>
			{
				first = (marker & 0b0011);
 80008be:	4b55      	ldr	r3, [pc, #340]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	f003 0303 	and.w	r3, r3, #3
 80008c6:	73bb      	strb	r3, [r7, #14]
				second = (marker & 0b1100) >> 2;
 80008c8:	4b52      	ldr	r3, [pc, #328]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	109b      	asrs	r3, r3, #2
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	737b      	strb	r3, [r7, #13]
				if(second == 0b00)
 80008d6:	7b7b      	ldrb	r3, [r7, #13]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d11f      	bne.n	800091c <HAL_TIM_PeriodElapsedCallback+0x374>
				{
					if(first == 0b01)
 80008dc:	7bbb      	ldrb	r3, [r7, #14]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d111      	bne.n	8000906 <HAL_TIM_PeriodElapsedCallback+0x35e>
					{
						// right -> stop
						markerstate = 0b01;
 80008e2:	4b4d      	ldr	r3, [pc, #308]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x470>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
						if(rightmarkercount == 0)
 80008e8:	4b4c      	ldr	r3, [pc, #304]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x474>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d106      	bne.n	80008fe <HAL_TIM_PeriodElapsedCallback+0x356>
						{
							rightmarkercount++;
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x474>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b48      	ldr	r3, [pc, #288]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x474>)
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	e011      	b.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x37a>
						}
						else
						{
							motorenable = 0;
 80008fe:	4b48      	ldr	r3, [pc, #288]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e00d      	b.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x37a>
						}
					}
					else if(first == 0b10)
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d103      	bne.n	8000914 <HAL_TIM_PeriodElapsedCallback+0x36c>
					{
						// left -> curve
						markerstate = 0b10;
 800090c:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	e006      	b.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x37a>
					}
					else
					{
						// cross
						markerstate = 0b11;
 8000914:	4b40      	ldr	r3, [pc, #256]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e002      	b.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x37a>
					}
				}
				else
				{
					// cross
					markerstate = 0b11;
 800091c:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800091e:	2203      	movs	r2, #3
 8000920:	701a      	strb	r2, [r3, #0]
				}
				sidedeltacount = 0;
 8000922:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
				marker = 0;
 8000928:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
				markerstate = 0;
 800092e:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e005      	b.n	8000942 <HAL_TIM_PeriodElapsedCallback+0x39a>
			}
			else
			{
				sidedeltacount++;
 8000936:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8000940:	701a      	strb	r2, [r3, #0]
		}

#endif
	}
#if !DISABLEANOTHERTIMERS
	if(htim->Instance == TIM11)	// TIM11 // 1ms
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a37      	ldr	r2, [pc, #220]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d15a      	bne.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0x45a>
	{
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 800094c:	2300      	movs	r3, #0
 800094e:	757b      	strb	r3, [r7, #21]
 8000950:	e042      	b.n	80009d8 <HAL_TIM_PeriodElapsedCallback+0x430>
		{
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8000952:	2300      	movs	r3, #0
 8000954:	753b      	strb	r3, [r7, #20]
 8000956:	e039      	b.n	80009cc <HAL_TIM_PeriodElapsedCallback+0x424>
			{
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8000958:	2300      	movs	r3, #0
 800095a:	74fb      	strb	r3, [r7, #19]
 800095c:	e02f      	b.n	80009be <HAL_TIM_PeriodElapsedCallback+0x416>
				{
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 800095e:	7cfb      	ldrb	r3, [r7, #19]
 8000960:	1e5a      	subs	r2, r3, #1
 8000962:	7d79      	ldrb	r1, [r7, #21]
 8000964:	4830      	ldr	r0, [pc, #192]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8000966:	4613      	mov	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	4413      	add	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000974:	817b      	strh	r3, [r7, #10]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8000976:	7cf9      	ldrb	r1, [r7, #19]
 8000978:	7d7c      	ldrb	r4, [r7, #21]
 800097a:	7cfb      	ldrb	r3, [r7, #19]
 800097c:	1e5a      	subs	r2, r3, #1
 800097e:	7d78      	ldrb	r0, [r7, #21]
 8000980:	4d29      	ldr	r5, [pc, #164]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8000982:	460b      	mov	r3, r1
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	440b      	add	r3, r1
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4423      	add	r3, r4
 800098c:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8000990:	4925      	ldr	r1, [pc, #148]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4403      	add	r3, r0
 800099c:	4622      	mov	r2, r4
 800099e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 80009a2:	7cfa      	ldrb	r2, [r7, #19]
 80009a4:	7d79      	ldrb	r1, [r7, #21]
 80009a6:	4820      	ldr	r0, [pc, #128]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x480>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	440b      	add	r3, r1
 80009b2:	897a      	ldrh	r2, [r7, #10]
 80009b4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 80009b8:	7cfb      	ldrb	r3, [r7, #19]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	74fb      	strb	r3, [r7, #19]
 80009be:	7cfa      	ldrb	r2, [r7, #19]
 80009c0:	7d3b      	ldrb	r3, [r7, #20]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d8cb      	bhi.n	800095e <HAL_TIM_PeriodElapsedCallback+0x3b6>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 80009c6:	7d3b      	ldrb	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	753b      	strb	r3, [r7, #20]
 80009cc:	7d3b      	ldrb	r3, [r7, #20]
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d9c2      	bls.n	8000958 <HAL_TIM_PeriodElapsedCallback+0x3b0>
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 80009d2:	7d7b      	ldrb	r3, [r7, #21]
 80009d4:	3301      	adds	r3, #1
 80009d6:	757b      	strb	r3, [r7, #21]
 80009d8:	7d7b      	ldrb	r3, [r7, #21]
 80009da:	2b0b      	cmp	r3, #11
 80009dc:	d9b9      	bls.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x3aa>
				}
			}
		}
		for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	74bb      	strb	r3, [r7, #18]
 80009e2:	e00b      	b.n	80009fc <HAL_TIM_PeriodElapsedCallback+0x454>
		{
			analog[i] = analogbuffers[SENSGETCOUNT / 2][i];
 80009e4:	7cba      	ldrb	r2, [r7, #18]
 80009e6:	7cbb      	ldrb	r3, [r7, #18]
 80009e8:	490f      	ldr	r1, [pc, #60]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x480>)
 80009ea:	3230      	adds	r2, #48	; 0x30
 80009ec:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x484>)
 80009f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 80009f6:	7cbb      	ldrb	r3, [r7, #18]
 80009f8:	3301      	adds	r3, #1
 80009fa:	74bb      	strb	r3, [r7, #18]
 80009fc:	7cbb      	ldrb	r3, [r7, #18]
 80009fe:	2b0b      	cmp	r3, #11
 8000a00:	d9f0      	bls.n	80009e4 <HAL_TIM_PeriodElapsedCallback+0x43c>
	}
	if(htim->Instance == TIM13)	// TIM13 // 1ms
	{
	}
#endif
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000019a 	.word	0x2000019a
 8000a10:	2000019b 	.word	0x2000019b
 8000a14:	2000028c 	.word	0x2000028c
 8000a18:	200001e8 	.word	0x200001e8
 8000a1c:	20000444 	.word	0x20000444
 8000a20:	200000ec 	.word	0x200000ec
 8000a24:	40014800 	.word	0x40014800
 8000a28:	20000314 	.word	0x20000314
 8000a2c:	200000b0 	.word	0x200000b0

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a32:	b08d      	sub	sp, #52	; 0x34
 8000a34:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a36:	f001 fae1 	bl	8001ffc <HAL_Init>

  /* USER CODE BEGIN Init */
  motorenable = 0;
 8000a3a:	4bbd      	ldr	r3, [pc, #756]	; (8000d30 <main+0x300>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
  subsensbuf = 0;
 8000a40:	4bbc      	ldr	r3, [pc, #752]	; (8000d34 <main+0x304>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
  marker = 0;
 8000a46:	4bbc      	ldr	r3, [pc, #752]	; (8000d38 <main+0x308>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
  sidedeltacount = 0;
 8000a4c:	4bbb      	ldr	r3, [pc, #748]	; (8000d3c <main+0x30c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
  markerstate = 0;
 8000a52:	4bbb      	ldr	r3, [pc, #748]	; (8000d40 <main+0x310>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
  rightmarkercount = 0;
 8000a58:	4bba      	ldr	r3, [pc, #744]	; (8000d44 <main+0x314>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]

  for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	75fb      	strb	r3, [r7, #23]
 8000a62:	e00d      	b.n	8000a80 <main+0x50>
  {
	  analogmax[i] = 0;
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	4ab8      	ldr	r2, [pc, #736]	; (8000d48 <main+0x318>)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  analogmin[i] = 4096;
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
 8000a70:	4ab6      	ldr	r2, [pc, #728]	; (8000d4c <main+0x31c>)
 8000a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	75fb      	strb	r3, [r7, #23]
 8000a80:	7dfb      	ldrb	r3, [r7, #23]
 8000a82:	2b0b      	cmp	r3, #11
 8000a84:	d9ee      	bls.n	8000a64 <main+0x34>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 fb77 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fe65 	bl	8001758 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a8e:	f000 fe43 	bl	8001718 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a92:	f000 fbdb 	bl	800124c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000a96:	f000 fe15 	bl	80016c4 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8000a9a:	f000 fd5f 	bl	800155c <MX_TIM6_Init>
  MX_TIM4_Init();
 8000a9e:	f000 fcf9 	bl	8001494 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000aa2:	f000 fdc7 	bl	8001634 <MX_TIM10_Init>
  MX_TIM7_Init();
 8000aa6:	f000 fd8f 	bl	80015c8 <MX_TIM7_Init>
  MX_TIM11_Init();
 8000aaa:	f000 fde7 	bl	800167c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  printf(ESC_DEF);
 8000aae:	48a8      	ldr	r0, [pc, #672]	; (8000d50 <main+0x320>)
 8000ab0:	f004 fc3c 	bl	800532c <iprintf>
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8000ab4:	48a7      	ldr	r0, [pc, #668]	; (8000d54 <main+0x324>)
 8000ab6:	f004 fcc1 	bl	800543c <puts>


	printf("Push Switch ...\r\n");
 8000aba:	48a7      	ldr	r0, [pc, #668]	; (8000d58 <main+0x328>)
 8000abc:	f004 fcbe 	bl	800543c <puts>
	led_rgb(1, 0, 0);	// Red
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f000 ff21 	bl	800190c <led_rgb>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 8000aca:	e002      	b.n	8000ad2 <main+0xa2>
	{
	  HAL_Delay(100);
 8000acc:	2064      	movs	r0, #100	; 0x64
 8000ace:	f001 fb07 	bl	80020e0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 8000ad2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad6:	48a1      	ldr	r0, [pc, #644]	; (8000d5c <main+0x32c>)
 8000ad8:	f002 fd28 	bl	800352c <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1f4      	bne.n	8000acc <main+0x9c>
	}

	printf("Starting TIM4 as PWM Generation\r\n");
 8000ae2:	489f      	ldr	r0, [pc, #636]	; (8000d60 <main+0x330>)
 8000ae4:	f004 fcaa 	bl	800543c <puts>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	489e      	ldr	r0, [pc, #632]	; (8000d64 <main+0x334>)
 8000aec:	f003 fa06 	bl	8003efc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000af0:	2104      	movs	r1, #4
 8000af2:	489c      	ldr	r0, [pc, #624]	; (8000d64 <main+0x334>)
 8000af4:	f003 fa02 	bl	8003efc <HAL_TIM_PWM_Start>
	printf("Starting TIM6\r\n");
	HAL_TIM_Base_Start_IT(&htim6);	// 1ms // PID
	printf("Starting TIM7\r\n");
	HAL_TIM_Base_Start_IT(&htim7);	// 0.1ms	// SensorGet
	*/
	printf("Starting TIM10\r\n");
 8000af8:	489b      	ldr	r0, [pc, #620]	; (8000d68 <main+0x338>)
 8000afa:	f004 fc9f 	bl	800543c <puts>
	HAL_TIM_Base_Start_IT(&htim10);	// 1ms	// D_Sidesensor
 8000afe:	489b      	ldr	r0, [pc, #620]	; (8000d6c <main+0x33c>)
 8000b00:	f003 f9ad 	bl	8003e5e <HAL_TIM_Base_Start_IT>
	printf("Starting TIM11\r\n");
 8000b04:	489a      	ldr	r0, [pc, #616]	; (8000d70 <main+0x340>)
 8000b06:	f004 fc99 	bl	800543c <puts>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// sensor sort
 8000b0a:	489a      	ldr	r0, [pc, #616]	; (8000d74 <main+0x344>)
 8000b0c:	f003 f9a7 	bl	8003e5e <HAL_TIM_Base_Start_IT>

	printf("Starting Analog Read\r\n");
 8000b10:	4899      	ldr	r0, [pc, #612]	; (8000d78 <main+0x348>)
 8000b12:	f004 fc93 	bl	800543c <puts>
	if(HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
 8000b16:	4899      	ldr	r0, [pc, #612]	; (8000d7c <main+0x34c>)
 8000b18:	f001 fb04 	bl	8002124 <HAL_ADC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <main+0xf6>
 8000b22:	f000 ff29 	bl	8001978 <Error_Handler>
//  if(HAL_ADCE1_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) { Error_Handler(); }	// never
//	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }

	printf("Starting Analog DMA\r\n");
 8000b26:	4896      	ldr	r0, [pc, #600]	; (8000d80 <main+0x350>)
 8000b28:	f004 fc88 	bl	800543c <puts>
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) { Error_Handler(); }
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	4995      	ldr	r1, [pc, #596]	; (8000d84 <main+0x354>)
 8000b30:	4892      	ldr	r0, [pc, #584]	; (8000d7c <main+0x34c>)
 8000b32:	f001 fb3b 	bl	80021ac <HAL_ADC_Start_DMA>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <main+0x110>
 8000b3c:	f000 ff1c 	bl	8001978 <Error_Handler>

	printf("Push SW2 to Calibration...\r\n");
 8000b40:	4891      	ldr	r0, [pc, #580]	; (8000d88 <main+0x358>)
 8000b42:	f004 fc7b 	bl	800543c <puts>
	led_rgb(1, 1, 0);	// Yellow
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 fede 	bl	800190c <led_rgb>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000b50:	e002      	b.n	8000b58 <main+0x128>
	{
		HAL_Delay(100);
 8000b52:	2064      	movs	r0, #100	; 0x64
 8000b54:	f001 fac4 	bl	80020e0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5c:	487f      	ldr	r0, [pc, #508]	; (8000d5c <main+0x32c>)
 8000b5e:	f002 fce5 	bl	800352c <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f4      	bne.n	8000b52 <main+0x122>
	}
	printf("Push SW1 to End Calibrating...\r\n");
 8000b68:	4888      	ldr	r0, [pc, #544]	; (8000d8c <main+0x35c>)
 8000b6a:	f004 fc67 	bl	800543c <puts>
	// https://github.com/YazawaKenichi/Murakumo/blob/main/circuit/cube_v2/README.md
	printf(ESC_MAG);
 8000b6e:	4888      	ldr	r0, [pc, #544]	; (8000d90 <main+0x360>)
 8000b70:	f004 fbdc 	bl	800532c <iprintf>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 8000b74:	e034      	b.n	8000be0 <main+0x1b0>
	{
		for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	75bb      	strb	r3, [r7, #22]
 8000b7a:	e02b      	b.n	8000bd4 <main+0x1a4>
		{
			uint16_t analogbuf = analog[j];
 8000b7c:	7dbb      	ldrb	r3, [r7, #22]
 8000b7e:	4a81      	ldr	r2, [pc, #516]	; (8000d84 <main+0x354>)
 8000b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b84:	80bb      	strh	r3, [r7, #4]
			analogmax[j] = (analogmax[j] < analogbuf) ? analogbuf : analogmax[j];
 8000b86:	7dbb      	ldrb	r3, [r7, #22]
 8000b88:	4a6f      	ldr	r2, [pc, #444]	; (8000d48 <main+0x318>)
 8000b8a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b8e:	7dbb      	ldrb	r3, [r7, #22]
 8000b90:	88b9      	ldrh	r1, [r7, #4]
 8000b92:	428a      	cmp	r2, r1
 8000b94:	bf38      	it	cc
 8000b96:	460a      	movcc	r2, r1
 8000b98:	b291      	uxth	r1, r2
 8000b9a:	4a6b      	ldr	r2, [pc, #428]	; (8000d48 <main+0x318>)
 8000b9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[j] = (analogmin[j] > analogbuf) ? analogbuf : analogmin[j];
 8000ba0:	7dbb      	ldrb	r3, [r7, #22]
 8000ba2:	4a6a      	ldr	r2, [pc, #424]	; (8000d4c <main+0x31c>)
 8000ba4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ba8:	7dbb      	ldrb	r3, [r7, #22]
 8000baa:	88b9      	ldrh	r1, [r7, #4]
 8000bac:	428a      	cmp	r2, r1
 8000bae:	bf28      	it	cs
 8000bb0:	460a      	movcs	r2, r1
 8000bb2:	b291      	uxth	r1, r2
 8000bb4:	4a65      	ldr	r2, [pc, #404]	; (8000d4c <main+0x31c>)
 8000bb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if D_MOTOR
			printf("[%2d] = ", j);
 8000bba:	7dbb      	ldrb	r3, [r7, #22]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4875      	ldr	r0, [pc, #468]	; (8000d94 <main+0x364>)
 8000bc0:	f004 fbb4 	bl	800532c <iprintf>
			printf("%4d,", analogbuf);
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4873      	ldr	r0, [pc, #460]	; (8000d98 <main+0x368>)
 8000bca:	f004 fbaf 	bl	800532c <iprintf>
		for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000bce:	7dbb      	ldrb	r3, [r7, #22]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	75bb      	strb	r3, [r7, #22]
 8000bd4:	7dbb      	ldrb	r3, [r7, #22]
 8000bd6:	2b0b      	cmp	r3, #11
 8000bd8:	d9d0      	bls.n	8000b7c <main+0x14c>
#endif
		}
		printf("\r\n");
 8000bda:	4870      	ldr	r0, [pc, #448]	; (8000d9c <main+0x36c>)
 8000bdc:	f004 fc2e 	bl	800543c <puts>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14))
 8000be0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be4:	485d      	ldr	r0, [pc, #372]	; (8000d5c <main+0x32c>)
 8000be6:	f002 fca1 	bl	800352c <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1c2      	bne.n	8000b76 <main+0x146>
	}

#if D_MOTOR
	printf(ESC_YEL);
 8000bf0:	486b      	ldr	r0, [pc, #428]	; (8000da0 <main+0x370>)
 8000bf2:	f004 fb9b 	bl	800532c <iprintf>
	for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	757b      	strb	r3, [r7, #21]
 8000bfa:	e00f      	b.n	8000c1c <main+0x1ec>
	{
			printf("[%2d] = ", j);
 8000bfc:	7d7b      	ldrb	r3, [r7, #21]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4864      	ldr	r0, [pc, #400]	; (8000d94 <main+0x364>)
 8000c02:	f004 fb93 	bl	800532c <iprintf>
			printf("%4d,", analogmax[j]);
 8000c06:	7d7b      	ldrb	r3, [r7, #21]
 8000c08:	4a4f      	ldr	r2, [pc, #316]	; (8000d48 <main+0x318>)
 8000c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4861      	ldr	r0, [pc, #388]	; (8000d98 <main+0x368>)
 8000c12:	f004 fb8b 	bl	800532c <iprintf>
	for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000c16:	7d7b      	ldrb	r3, [r7, #21]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	757b      	strb	r3, [r7, #21]
 8000c1c:	7d7b      	ldrb	r3, [r7, #21]
 8000c1e:	2b0b      	cmp	r3, #11
 8000c20:	d9ec      	bls.n	8000bfc <main+0x1cc>
	}
	printf("\r\n");
 8000c22:	485e      	ldr	r0, [pc, #376]	; (8000d9c <main+0x36c>)
 8000c24:	f004 fc0a 	bl	800543c <puts>
	printf(ESC_CYA);
 8000c28:	485e      	ldr	r0, [pc, #376]	; (8000da4 <main+0x374>)
 8000c2a:	f004 fb7f 	bl	800532c <iprintf>
	for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	753b      	strb	r3, [r7, #20]
 8000c32:	e00f      	b.n	8000c54 <main+0x224>
	{
			printf("[%2d] = ", j);
 8000c34:	7d3b      	ldrb	r3, [r7, #20]
 8000c36:	4619      	mov	r1, r3
 8000c38:	4856      	ldr	r0, [pc, #344]	; (8000d94 <main+0x364>)
 8000c3a:	f004 fb77 	bl	800532c <iprintf>
			printf("%4d,", analogmin[j]);
 8000c3e:	7d3b      	ldrb	r3, [r7, #20]
 8000c40:	4a42      	ldr	r2, [pc, #264]	; (8000d4c <main+0x31c>)
 8000c42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c46:	4619      	mov	r1, r3
 8000c48:	4853      	ldr	r0, [pc, #332]	; (8000d98 <main+0x368>)
 8000c4a:	f004 fb6f 	bl	800532c <iprintf>
	for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000c4e:	7d3b      	ldrb	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	753b      	strb	r3, [r7, #20]
 8000c54:	7d3b      	ldrb	r3, [r7, #20]
 8000c56:	2b0b      	cmp	r3, #11
 8000c58:	d9ec      	bls.n	8000c34 <main+0x204>
	}
	printf("\r\n");
 8000c5a:	4850      	ldr	r0, [pc, #320]	; (8000d9c <main+0x36c>)
 8000c5c:	f004 fbee 	bl	800543c <puts>
	printf(ESC_DEF);
 8000c60:	483b      	ldr	r0, [pc, #236]	; (8000d50 <main+0x320>)
 8000c62:	f004 fb63 	bl	800532c <iprintf>
	for(unsigned char i = 0; 5 * CALIBRATIONSIZE > i; i++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	74fb      	strb	r3, [r7, #19]
 8000c6a:	e005      	b.n	8000c78 <main+0x248>
	{
		printf("v");
 8000c6c:	2076      	movs	r0, #118	; 0x76
 8000c6e:	f004 fb75 	bl	800535c <putchar>
	for(unsigned char i = 0; 5 * CALIBRATIONSIZE > i; i++)
 8000c72:	7cfb      	ldrb	r3, [r7, #19]
 8000c74:	3301      	adds	r3, #1
 8000c76:	74fb      	strb	r3, [r7, #19]
 8000c78:	7cfb      	ldrb	r3, [r7, #19]
 8000c7a:	2b3b      	cmp	r3, #59	; 0x3b
 8000c7c:	d9f6      	bls.n	8000c6c <main+0x23c>
	}
	printf("\r\n");
 8000c7e:	4847      	ldr	r0, [pc, #284]	; (8000d9c <main+0x36c>)
 8000c80:	f004 fbdc 	bl	800543c <puts>
	printf(ESC_YEL);
 8000c84:	4846      	ldr	r0, [pc, #280]	; (8000da0 <main+0x370>)
 8000c86:	f004 fb51 	bl	800532c <iprintf>
	for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	74bb      	strb	r3, [r7, #18]
 8000c8e:	e011      	b.n	8000cb4 <main+0x284>
	{
	  printf("[%2d] = ", i * 2);
 8000c90:	7cbb      	ldrb	r3, [r7, #18]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4619      	mov	r1, r3
 8000c96:	483f      	ldr	r0, [pc, #252]	; (8000d94 <main+0x364>)
 8000c98:	f004 fb48 	bl	800532c <iprintf>
	  printf("%4d, ", analogmax[i * 2]);
 8000c9c:	7cbb      	ldrb	r3, [r7, #18]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4a29      	ldr	r2, [pc, #164]	; (8000d48 <main+0x318>)
 8000ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	483f      	ldr	r0, [pc, #252]	; (8000da8 <main+0x378>)
 8000caa:	f004 fb3f 	bl	800532c <iprintf>
	for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000cae:	7cbb      	ldrb	r3, [r7, #18]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	74bb      	strb	r3, [r7, #18]
 8000cb4:	7cbb      	ldrb	r3, [r7, #18]
 8000cb6:	2b05      	cmp	r3, #5
 8000cb8:	d9ea      	bls.n	8000c90 <main+0x260>
	}
	for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000cba:	2306      	movs	r3, #6
 8000cbc:	747b      	strb	r3, [r7, #17]
 8000cbe:	e013      	b.n	8000ce8 <main+0x2b8>
	{
	  printf("[%2d] = ", i * 2 - 1);
 8000cc0:	7c7b      	ldrb	r3, [r7, #17]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4832      	ldr	r0, [pc, #200]	; (8000d94 <main+0x364>)
 8000cca:	f004 fb2f 	bl	800532c <iprintf>
	  printf("%4d,", analogmax[i * 2 - 1]);
 8000cce:	7c7b      	ldrb	r3, [r7, #17]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <main+0x318>)
 8000cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	482e      	ldr	r0, [pc, #184]	; (8000d98 <main+0x368>)
 8000cde:	f004 fb25 	bl	800532c <iprintf>
	for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000ce2:	7c7b      	ldrb	r3, [r7, #17]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	747b      	strb	r3, [r7, #17]
 8000ce8:	7c7b      	ldrb	r3, [r7, #17]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1e8      	bne.n	8000cc0 <main+0x290>
	}
	printf("\r\n");
 8000cee:	482b      	ldr	r0, [pc, #172]	; (8000d9c <main+0x36c>)
 8000cf0:	f004 fba4 	bl	800543c <puts>
	printf(ESC_CYA);
 8000cf4:	482b      	ldr	r0, [pc, #172]	; (8000da4 <main+0x374>)
 8000cf6:	f004 fb19 	bl	800532c <iprintf>
	for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	743b      	strb	r3, [r7, #16]
 8000cfe:	e011      	b.n	8000d24 <main+0x2f4>
	{
	  printf("[%2d] = ", i * 2);
 8000d00:	7c3b      	ldrb	r3, [r7, #16]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4619      	mov	r1, r3
 8000d06:	4823      	ldr	r0, [pc, #140]	; (8000d94 <main+0x364>)
 8000d08:	f004 fb10 	bl	800532c <iprintf>
	  printf("%4d, ", analogmin[i * 2]);
 8000d0c:	7c3b      	ldrb	r3, [r7, #16]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <main+0x31c>)
 8000d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d16:	4619      	mov	r1, r3
 8000d18:	4823      	ldr	r0, [pc, #140]	; (8000da8 <main+0x378>)
 8000d1a:	f004 fb07 	bl	800532c <iprintf>
	for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000d1e:	7c3b      	ldrb	r3, [r7, #16]
 8000d20:	3301      	adds	r3, #1
 8000d22:	743b      	strb	r3, [r7, #16]
 8000d24:	7c3b      	ldrb	r3, [r7, #16]
 8000d26:	2b05      	cmp	r3, #5
 8000d28:	d9ea      	bls.n	8000d00 <main+0x2d0>
	}
	for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000d2a:	2306      	movs	r3, #6
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e051      	b.n	8000dd4 <main+0x3a4>
 8000d30:	200000ec 	.word	0x200000ec
 8000d34:	2000019a 	.word	0x2000019a
 8000d38:	2000028c 	.word	0x2000028c
 8000d3c:	2000019b 	.word	0x2000019b
 8000d40:	200001e8 	.word	0x200001e8
 8000d44:	20000444 	.word	0x20000444
 8000d48:	200003ec 	.word	0x200003ec
 8000d4c:	20000180 	.word	0x20000180
 8000d50:	08006268 	.word	0x08006268
 8000d54:	08006270 	.word	0x08006270
 8000d58:	08006290 	.word	0x08006290
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	080062a4 	.word	0x080062a4
 8000d64:	20000100 	.word	0x20000100
 8000d68:	080062c8 	.word	0x080062c8
 8000d6c:	20000140 	.word	0x20000140
 8000d70:	080062d8 	.word	0x080062d8
 8000d74:	200001ec 	.word	0x200001ec
 8000d78:	080062e8 	.word	0x080062e8
 8000d7c:	200001a0 	.word	0x200001a0
 8000d80:	08006300 	.word	0x08006300
 8000d84:	200000b0 	.word	0x200000b0
 8000d88:	08006318 	.word	0x08006318
 8000d8c:	08006334 	.word	0x08006334
 8000d90:	08006354 	.word	0x08006354
 8000d94:	0800635c 	.word	0x0800635c
 8000d98:	08006368 	.word	0x08006368
 8000d9c:	08006370 	.word	0x08006370
 8000da0:	08006374 	.word	0x08006374
 8000da4:	0800637c 	.word	0x0800637c
 8000da8:	08006384 	.word	0x08006384
	{
	  printf("[%2d] = ", i * 2 - 1);
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	3b01      	subs	r3, #1
 8000db2:	4619      	mov	r1, r3
 8000db4:	48b9      	ldr	r0, [pc, #740]	; (800109c <main+0x66c>)
 8000db6:	f004 fab9 	bl	800532c <iprintf>
	  printf("%4d,", analogmin[i * 2 - 1]);
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	4ab7      	ldr	r2, [pc, #732]	; (80010a0 <main+0x670>)
 8000dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	48b6      	ldr	r0, [pc, #728]	; (80010a4 <main+0x674>)
 8000dca:	f004 faaf 	bl	800532c <iprintf>
	for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1e8      	bne.n	8000dac <main+0x37c>
	}
	printf("\r\n");
 8000dda:	48b3      	ldr	r0, [pc, #716]	; (80010a8 <main+0x678>)
 8000ddc:	f004 fb2e 	bl	800543c <puts>
#endif
	printf(ESC_DEF);
 8000de0:	48b2      	ldr	r0, [pc, #712]	; (80010ac <main+0x67c>)
 8000de2:	f004 faa3 	bl	800532c <iprintf>

	printf("Push SW2 to Start...\r\n");
 8000de6:	48b2      	ldr	r0, [pc, #712]	; (80010b0 <main+0x680>)
 8000de8:	f004 fb28 	bl	800543c <puts>
	led_rgb(1, 1, 0);	// Yellow
 8000dec:	2200      	movs	r2, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	2001      	movs	r0, #1
 8000df2:	f000 fd8b 	bl	800190c <led_rgb>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000df6:	e002      	b.n	8000dfe <main+0x3ce>
	{
		HAL_Delay(100);
 8000df8:	2064      	movs	r0, #100	; 0x64
 8000dfa:	f001 f971 	bl	80020e0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e02:	48ac      	ldr	r0, [pc, #688]	; (80010b4 <main+0x684>)
 8000e04:	f002 fb92 	bl	800352c <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f4      	bne.n	8000df8 <main+0x3c8>
	}
	led_rgb(1, 1, 1);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2101      	movs	r1, #1
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 fd7a 	bl	800190c <led_rgb>
	HAL_Delay(3000);
 8000e18:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e1c:	f001 f960 	bl	80020e0 <HAL_Delay>
	motorenable = 1;
 8000e20:	4ba5      	ldr	r3, [pc, #660]	; (80010b8 <main+0x688>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("\r\n==================== while ====================\r\n");
 8000e26:	48a5      	ldr	r0, [pc, #660]	; (80010bc <main+0x68c>)
 8000e28:	f004 fb08 	bl	800543c <puts>
  led_rgb(1, 1, 1);	// White
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2101      	movs	r1, #1
 8000e30:	2001      	movs	r0, #1
 8000e32:	f000 fd6b 	bl	800190c <led_rgb>
	  }
	  printf("%5d\r\n", rightmotor);
#endif
	  printf("\r\n");
#else
	  for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	73bb      	strb	r3, [r7, #14]
 8000e3a:	e011      	b.n	8000e60 <main+0x430>
	  {
		  printf("[%2d] = ", i * 2);
 8000e3c:	7bbb      	ldrb	r3, [r7, #14]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4619      	mov	r1, r3
 8000e42:	4896      	ldr	r0, [pc, #600]	; (800109c <main+0x66c>)
 8000e44:	f004 fa72 	bl	800532c <iprintf>
		  printf("%4d,", analograte[i * 2]);
 8000e48:	7bbb      	ldrb	r3, [r7, #14]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4a9c      	ldr	r2, [pc, #624]	; (80010c0 <main+0x690>)
 8000e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e52:	4619      	mov	r1, r3
 8000e54:	4893      	ldr	r0, [pc, #588]	; (80010a4 <main+0x674>)
 8000e56:	f004 fa69 	bl	800532c <iprintf>
	  for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000e5a:	7bbb      	ldrb	r3, [r7, #14]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	73bb      	strb	r3, [r7, #14]
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d9ea      	bls.n	8000e3c <main+0x40c>
	  }
	  for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000e66:	2306      	movs	r3, #6
 8000e68:	737b      	strb	r3, [r7, #13]
 8000e6a:	e013      	b.n	8000e94 <main+0x464>
	  {
		  printf("[%2d] = ", i * 2 - 1);
 8000e6c:	7b7b      	ldrb	r3, [r7, #13]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	3b01      	subs	r3, #1
 8000e72:	4619      	mov	r1, r3
 8000e74:	4889      	ldr	r0, [pc, #548]	; (800109c <main+0x66c>)
 8000e76:	f004 fa59 	bl	800532c <iprintf>
		  printf("%4d,", analograte[i * 2 - 1]);
 8000e7a:	7b7b      	ldrb	r3, [r7, #13]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	4a8f      	ldr	r2, [pc, #572]	; (80010c0 <main+0x690>)
 8000e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e86:	4619      	mov	r1, r3
 8000e88:	4886      	ldr	r0, [pc, #536]	; (80010a4 <main+0x674>)
 8000e8a:	f004 fa4f 	bl	800532c <iprintf>
	  for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	737b      	strb	r3, [r7, #13]
 8000e94:	7b7b      	ldrb	r3, [r7, #13]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1e8      	bne.n	8000e6c <main+0x43c>
	  }
	  printf("analograte\r\n");
 8000e9a:	488a      	ldr	r0, [pc, #552]	; (80010c4 <main+0x694>)
 8000e9c:	f004 face 	bl	800543c <puts>
	  printf(ESC_CYA);
 8000ea0:	4889      	ldr	r0, [pc, #548]	; (80010c8 <main+0x698>)
 8000ea2:	f004 fa43 	bl	800532c <iprintf>
	  for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	733b      	strb	r3, [r7, #12]
 8000eaa:	e011      	b.n	8000ed0 <main+0x4a0>
	  {
		  printf("[%2d] = ", i * 2);
 8000eac:	7b3b      	ldrb	r3, [r7, #12]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	487a      	ldr	r0, [pc, #488]	; (800109c <main+0x66c>)
 8000eb4:	f004 fa3a 	bl	800532c <iprintf>
		  printf("%4d,", analog[i * 2]);
 8000eb8:	7b3b      	ldrb	r3, [r7, #12]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4a83      	ldr	r2, [pc, #524]	; (80010cc <main+0x69c>)
 8000ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4877      	ldr	r0, [pc, #476]	; (80010a4 <main+0x674>)
 8000ec6:	f004 fa31 	bl	800532c <iprintf>
	  for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000eca:	7b3b      	ldrb	r3, [r7, #12]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	733b      	strb	r3, [r7, #12]
 8000ed0:	7b3b      	ldrb	r3, [r7, #12]
 8000ed2:	2b05      	cmp	r3, #5
 8000ed4:	d9ea      	bls.n	8000eac <main+0x47c>
	  }
	  for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	72fb      	strb	r3, [r7, #11]
 8000eda:	e013      	b.n	8000f04 <main+0x4d4>
	  {
		  printf("[%2d] = ", i * 2 - 1);
 8000edc:	7afb      	ldrb	r3, [r7, #11]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	486d      	ldr	r0, [pc, #436]	; (800109c <main+0x66c>)
 8000ee6:	f004 fa21 	bl	800532c <iprintf>
		  printf("%4d,", analog[i * 2 - 1]);
 8000eea:	7afb      	ldrb	r3, [r7, #11]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	4a76      	ldr	r2, [pc, #472]	; (80010cc <main+0x69c>)
 8000ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	486a      	ldr	r0, [pc, #424]	; (80010a4 <main+0x674>)
 8000efa:	f004 fa17 	bl	800532c <iprintf>
	  for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	72fb      	strb	r3, [r7, #11]
 8000f04:	7afb      	ldrb	r3, [r7, #11]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1e8      	bne.n	8000edc <main+0x4ac>
	  }
	  printf("analog\r\n");
 8000f0a:	4871      	ldr	r0, [pc, #452]	; (80010d0 <main+0x6a0>)
 8000f0c:	f004 fa96 	bl	800543c <puts>
	  printf(ESC_RED);
 8000f10:	4870      	ldr	r0, [pc, #448]	; (80010d4 <main+0x6a4>)
 8000f12:	f004 fa0b 	bl	800532c <iprintf>
	  for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	72bb      	strb	r3, [r7, #10]
 8000f1a:	e011      	b.n	8000f40 <main+0x510>
	  {
		  printf("[%2d] = ", i * 2);
 8000f1c:	7abb      	ldrb	r3, [r7, #10]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	485e      	ldr	r0, [pc, #376]	; (800109c <main+0x66c>)
 8000f24:	f004 fa02 	bl	800532c <iprintf>
		  printf("%4d,", analogmax[i * 2]);
 8000f28:	7abb      	ldrb	r3, [r7, #10]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4a6a      	ldr	r2, [pc, #424]	; (80010d8 <main+0x6a8>)
 8000f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f32:	4619      	mov	r1, r3
 8000f34:	485b      	ldr	r0, [pc, #364]	; (80010a4 <main+0x674>)
 8000f36:	f004 f9f9 	bl	800532c <iprintf>
	  for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000f3a:	7abb      	ldrb	r3, [r7, #10]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	72bb      	strb	r3, [r7, #10]
 8000f40:	7abb      	ldrb	r3, [r7, #10]
 8000f42:	2b05      	cmp	r3, #5
 8000f44:	d9ea      	bls.n	8000f1c <main+0x4ec>
	  }
	  for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000f46:	2306      	movs	r3, #6
 8000f48:	727b      	strb	r3, [r7, #9]
 8000f4a:	e013      	b.n	8000f74 <main+0x544>
	  {
		  printf("[%2d] = ", i * 2 - 1);
 8000f4c:	7a7b      	ldrb	r3, [r7, #9]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	3b01      	subs	r3, #1
 8000f52:	4619      	mov	r1, r3
 8000f54:	4851      	ldr	r0, [pc, #324]	; (800109c <main+0x66c>)
 8000f56:	f004 f9e9 	bl	800532c <iprintf>
		  printf("%4d,", analogmax[i * 2 - 1]);
 8000f5a:	7a7b      	ldrb	r3, [r7, #9]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	4a5d      	ldr	r2, [pc, #372]	; (80010d8 <main+0x6a8>)
 8000f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f66:	4619      	mov	r1, r3
 8000f68:	484e      	ldr	r0, [pc, #312]	; (80010a4 <main+0x674>)
 8000f6a:	f004 f9df 	bl	800532c <iprintf>
	  for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000f6e:	7a7b      	ldrb	r3, [r7, #9]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	727b      	strb	r3, [r7, #9]
 8000f74:	7a7b      	ldrb	r3, [r7, #9]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1e8      	bne.n	8000f4c <main+0x51c>
	  }
	  printf("analogmax\r\n");
 8000f7a:	4858      	ldr	r0, [pc, #352]	; (80010dc <main+0x6ac>)
 8000f7c:	f004 fa5e 	bl	800543c <puts>
	  printf(ESC_BLU);
 8000f80:	4857      	ldr	r0, [pc, #348]	; (80010e0 <main+0x6b0>)
 8000f82:	f004 f9d3 	bl	800532c <iprintf>
	  for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	723b      	strb	r3, [r7, #8]
 8000f8a:	e011      	b.n	8000fb0 <main+0x580>
	  {
		  printf("[%2d] = ", i * 2);
 8000f8c:	7a3b      	ldrb	r3, [r7, #8]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4619      	mov	r1, r3
 8000f92:	4842      	ldr	r0, [pc, #264]	; (800109c <main+0x66c>)
 8000f94:	f004 f9ca 	bl	800532c <iprintf>
		  printf("%4d,", analogmin[i * 2]);
 8000f98:	7a3b      	ldrb	r3, [r7, #8]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4a40      	ldr	r2, [pc, #256]	; (80010a0 <main+0x670>)
 8000f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	483f      	ldr	r0, [pc, #252]	; (80010a4 <main+0x674>)
 8000fa6:	f004 f9c1 	bl	800532c <iprintf>
	  for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000faa:	7a3b      	ldrb	r3, [r7, #8]
 8000fac:	3301      	adds	r3, #1
 8000fae:	723b      	strb	r3, [r7, #8]
 8000fb0:	7a3b      	ldrb	r3, [r7, #8]
 8000fb2:	2b05      	cmp	r3, #5
 8000fb4:	d9ea      	bls.n	8000f8c <main+0x55c>
	  }
	  for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	e013      	b.n	8000fe4 <main+0x5b4>
	  {
		  printf("[%2d] = ", i * 2 - 1);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4835      	ldr	r0, [pc, #212]	; (800109c <main+0x66c>)
 8000fc6:	f004 f9b1 	bl	800532c <iprintf>
		  printf("%4d,", analogmin[i * 2 - 1]);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	4a33      	ldr	r2, [pc, #204]	; (80010a0 <main+0x670>)
 8000fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4832      	ldr	r0, [pc, #200]	; (80010a4 <main+0x674>)
 8000fda:	f004 f9a7 	bl	800532c <iprintf>
	  for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1e8      	bne.n	8000fbc <main+0x58c>
	  }
	  printf("analogmin\r\n");
 8000fea:	483e      	ldr	r0, [pc, #248]	; (80010e4 <main+0x6b4>)
 8000fec:	f004 fa26 	bl	800543c <puts>
	  printf(ESC_GRE);
 8000ff0:	483d      	ldr	r0, [pc, #244]	; (80010e8 <main+0x6b8>)
 8000ff2:	f004 f99b 	bl	800532c <iprintf>
	  printf("leftmotor = %5d, rightmotor = %5d,", leftmotor, rightmotor);
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <main+0x6bc>)
 8000ff8:	6819      	ldr	r1, [r3, #0]
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <main+0x6c0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	483c      	ldr	r0, [pc, #240]	; (80010f4 <main+0x6c4>)
 8001002:	f004 f993 	bl	800532c <iprintf>
	  printf("analogl = %5d, analogr = %5d, direction = %5d", analogl, analogr, direction);
 8001006:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <main+0x6c8>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <main+0x6cc>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <main+0x6d0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	483b      	ldr	r0, [pc, #236]	; (8001104 <main+0x6d4>)
 8001018:	f004 f988 	bl	800532c <iprintf>
	  printf("\r\n");
 800101c:	4822      	ldr	r0, [pc, #136]	; (80010a8 <main+0x678>)
 800101e:	f004 fa0d 	bl	800543c <puts>
	  printf(ESC_DEF);
 8001022:	4822      	ldr	r0, [pc, #136]	; (80010ac <main+0x67c>)
 8001024:	f004 f982 	bl	800532c <iprintf>
	  printf("\r\n");
 8001028:	481f      	ldr	r0, [pc, #124]	; (80010a8 <main+0x678>)
 800102a:	f004 fa07 	bl	800543c <puts>
#endif

#endif
#if D_SIDESENS
	  printf("0b%c%c%c%c%c%c%c%c\r\n", markerstate & 128 ? '1' : '0' , markerstate &  64 ? '1' : '0' , markerstate &  32 ? '1' : '0' , markerstate &  16 ? '1' : '0' , markerstate &   8 ? '1' : '0' , markerstate &   4 ? '1' : '0' , markerstate &   2 ? '1' : '0' , markerstate &   1 ? '1' : '0');
 800102e:	4b36      	ldr	r3, [pc, #216]	; (8001108 <main+0x6d8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	da01      	bge.n	800103c <main+0x60c>
 8001038:	2531      	movs	r5, #49	; 0x31
 800103a:	e000      	b.n	800103e <main+0x60e>
 800103c:	2530      	movs	r5, #48	; 0x30
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <main+0x6d8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <main+0x61e>
 800104a:	2631      	movs	r6, #49	; 0x31
 800104c:	e000      	b.n	8001050 <main+0x620>
 800104e:	2630      	movs	r6, #48	; 0x30
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <main+0x6d8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <main+0x632>
 800105c:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8001060:	e001      	b.n	8001066 <main+0x636>
 8001062:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <main+0x6d8>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <main+0x646>
 8001072:	2331      	movs	r3, #49	; 0x31
 8001074:	e000      	b.n	8001078 <main+0x648>
 8001076:	2330      	movs	r3, #48	; 0x30
 8001078:	4a23      	ldr	r2, [pc, #140]	; (8001108 <main+0x6d8>)
 800107a:	7812      	ldrb	r2, [r2, #0]
 800107c:	f002 0208 	and.w	r2, r2, #8
 8001080:	2a00      	cmp	r2, #0
 8001082:	d001      	beq.n	8001088 <main+0x658>
 8001084:	2231      	movs	r2, #49	; 0x31
 8001086:	e000      	b.n	800108a <main+0x65a>
 8001088:	2230      	movs	r2, #48	; 0x30
 800108a:	491f      	ldr	r1, [pc, #124]	; (8001108 <main+0x6d8>)
 800108c:	7809      	ldrb	r1, [r1, #0]
 800108e:	f001 0104 	and.w	r1, r1, #4
 8001092:	2900      	cmp	r1, #0
 8001094:	d03a      	beq.n	800110c <main+0x6dc>
 8001096:	2131      	movs	r1, #49	; 0x31
 8001098:	e039      	b.n	800110e <main+0x6de>
 800109a:	bf00      	nop
 800109c:	0800635c 	.word	0x0800635c
 80010a0:	20000180 	.word	0x20000180
 80010a4:	08006368 	.word	0x08006368
 80010a8:	08006370 	.word	0x08006370
 80010ac:	08006268 	.word	0x08006268
 80010b0:	0800638c 	.word	0x0800638c
 80010b4:	40020800 	.word	0x40020800
 80010b8:	200000ec 	.word	0x200000ec
 80010bc:	080063a4 	.word	0x080063a4
 80010c0:	200000c8 	.word	0x200000c8
 80010c4:	080063d8 	.word	0x080063d8
 80010c8:	0800637c 	.word	0x0800637c
 80010cc:	200000b0 	.word	0x200000b0
 80010d0:	080063e4 	.word	0x080063e4
 80010d4:	080063ec 	.word	0x080063ec
 80010d8:	200003ec 	.word	0x200003ec
 80010dc:	080063f4 	.word	0x080063f4
 80010e0:	08006400 	.word	0x08006400
 80010e4:	08006408 	.word	0x08006408
 80010e8:	08006414 	.word	0x08006414
 80010ec:	200000e4 	.word	0x200000e4
 80010f0:	200000e8 	.word	0x200000e8
 80010f4:	0800641c 	.word	0x0800641c
 80010f8:	20000198 	.word	0x20000198
 80010fc:	20000310 	.word	0x20000310
 8001100:	2000019c 	.word	0x2000019c
 8001104:	08006440 	.word	0x08006440
 8001108:	200001e8 	.word	0x200001e8
 800110c:	2130      	movs	r1, #48	; 0x30
 800110e:	4815      	ldr	r0, [pc, #84]	; (8001164 <main+0x734>)
 8001110:	7800      	ldrb	r0, [r0, #0]
 8001112:	f000 0002 	and.w	r0, r0, #2
 8001116:	2800      	cmp	r0, #0
 8001118:	d001      	beq.n	800111e <main+0x6ee>
 800111a:	2031      	movs	r0, #49	; 0x31
 800111c:	e000      	b.n	8001120 <main+0x6f0>
 800111e:	2030      	movs	r0, #48	; 0x30
 8001120:	4c10      	ldr	r4, [pc, #64]	; (8001164 <main+0x734>)
 8001122:	7824      	ldrb	r4, [r4, #0]
 8001124:	f004 0401 	and.w	r4, r4, #1
 8001128:	2c00      	cmp	r4, #0
 800112a:	d001      	beq.n	8001130 <main+0x700>
 800112c:	2431      	movs	r4, #49	; 0x31
 800112e:	e000      	b.n	8001132 <main+0x702>
 8001130:	2430      	movs	r4, #48	; 0x30
 8001132:	9404      	str	r4, [sp, #16]
 8001134:	9003      	str	r0, [sp, #12]
 8001136:	9102      	str	r1, [sp, #8]
 8001138:	9201      	str	r2, [sp, #4]
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	4663      	mov	r3, ip
 800113e:	4632      	mov	r2, r6
 8001140:	4629      	mov	r1, r5
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <main+0x738>)
 8001144:	f004 f8f2 	bl	800532c <iprintf>
	  printf("marker = %5d, sidedeltacount = %5d\r\n", marker, sidedeltacount);
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <main+0x73c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <main+0x740>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <main+0x744>)
 8001156:	f004 f8e9 	bl	800532c <iprintf>
#endif
#if PLAY
#endif

	  HAL_Delay(250);
 800115a:	20fa      	movs	r0, #250	; 0xfa
 800115c:	f000 ffc0 	bl	80020e0 <HAL_Delay>
	  for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8001160:	e669      	b.n	8000e36 <main+0x406>
 8001162:	bf00      	nop
 8001164:	200001e8 	.word	0x200001e8
 8001168:	08006470 	.word	0x08006470
 800116c:	2000028c 	.word	0x2000028c
 8001170:	2000019b 	.word	0x2000019b
 8001174:	08006488 	.word	0x08006488

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	; 0x50
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2230      	movs	r2, #48	; 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f004 f8c8 	bl	800531c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <SystemClock_Config+0xcc>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <SystemClock_Config+0xcc>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <SystemClock_Config+0xcc>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <SystemClock_Config+0xd0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a21      	ldr	r2, [pc, #132]	; (8001248 <SystemClock_Config+0xd0>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <SystemClock_Config+0xd0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011e8:	2308      	movs	r3, #8
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011ec:	23a8      	movs	r3, #168	; 0xa8
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 f9c7 	bl	8003590 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001208:	f000 fbb6 	bl	8001978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001218:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800121c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2105      	movs	r1, #5
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fc20 	bl	8003a70 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001236:	f000 fb9f 	bl	8001978 <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	; 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800125e:	4b8a      	ldr	r3, [pc, #552]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001260:	4a8a      	ldr	r2, [pc, #552]	; (800148c <MX_ADC1_Init+0x240>)
 8001262:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001264:	4b88      	ldr	r3, [pc, #544]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800126a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800126c:	4b86      	ldr	r3, [pc, #536]	; (8001488 <MX_ADC1_Init+0x23c>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001272:	4b85      	ldr	r3, [pc, #532]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001274:	2201      	movs	r2, #1
 8001276:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001278:	4b83      	ldr	r3, [pc, #524]	; (8001488 <MX_ADC1_Init+0x23c>)
 800127a:	2201      	movs	r2, #1
 800127c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800127e:	4b82      	ldr	r3, [pc, #520]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001286:	4b80      	ldr	r3, [pc, #512]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b7e      	ldr	r3, [pc, #504]	; (8001488 <MX_ADC1_Init+0x23c>)
 800128e:	4a80      	ldr	r2, [pc, #512]	; (8001490 <MX_ADC1_Init+0x244>)
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001292:	4b7d      	ldr	r3, [pc, #500]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8001298:	4b7b      	ldr	r3, [pc, #492]	; (8001488 <MX_ADC1_Init+0x23c>)
 800129a:	2210      	movs	r2, #16
 800129c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800129e:	4b7a      	ldr	r3, [pc, #488]	; (8001488 <MX_ADC1_Init+0x23c>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a6:	4b78      	ldr	r3, [pc, #480]	; (8001488 <MX_ADC1_Init+0x23c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ac:	4876      	ldr	r0, [pc, #472]	; (8001488 <MX_ADC1_Init+0x23c>)
 80012ae:	f000 ff39 	bl	8002124 <HAL_ADC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012b8:	f000 fb5e 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012bc:	2309      	movs	r3, #9
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80012c4:	2303      	movs	r3, #3
 80012c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	486e      	ldr	r0, [pc, #440]	; (8001488 <MX_ADC1_Init+0x23c>)
 80012ce:	f001 f873 	bl	80023b8 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012d8:	f000 fb4e 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012dc:	230a      	movs	r3, #10
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4867      	ldr	r0, [pc, #412]	; (8001488 <MX_ADC1_Init+0x23c>)
 80012ea:	f001 f865 	bl	80023b8 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012f4:	f000 fb40 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012f8:	2308      	movs	r3, #8
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80012fc:	2303      	movs	r3, #3
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4860      	ldr	r0, [pc, #384]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001306:	f001 f857 	bl	80023b8 <HAL_ADC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001310:	f000 fb32 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001314:	230b      	movs	r3, #11
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001318:	2304      	movs	r3, #4
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	4859      	ldr	r0, [pc, #356]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001322:	f001 f849 	bl	80023b8 <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800132c:	f000 fb24 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001330:	230e      	movs	r3, #14
 8001332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001334:	2305      	movs	r3, #5
 8001336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	4852      	ldr	r0, [pc, #328]	; (8001488 <MX_ADC1_Init+0x23c>)
 800133e:	f001 f83b 	bl	80023b8 <HAL_ADC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001348:	f000 fb16 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800134c:	230f      	movs	r3, #15
 800134e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001350:	2306      	movs	r3, #6
 8001352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	484b      	ldr	r0, [pc, #300]	; (8001488 <MX_ADC1_Init+0x23c>)
 800135a:	f001 f82d 	bl	80023b8 <HAL_ADC_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001364:	f000 fb08 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001368:	230c      	movs	r3, #12
 800136a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800136c:	2307      	movs	r3, #7
 800136e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4844      	ldr	r0, [pc, #272]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001376:	f001 f81f 	bl	80023b8 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001380:	f000 fafa 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001384:	230d      	movs	r3, #13
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001388:	2308      	movs	r3, #8
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	483d      	ldr	r0, [pc, #244]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001392:	f001 f811 	bl	80023b8 <HAL_ADC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800139c:	f000 faec 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013a0:	2307      	movs	r3, #7
 80013a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80013a4:	2309      	movs	r3, #9
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4836      	ldr	r0, [pc, #216]	; (8001488 <MX_ADC1_Init+0x23c>)
 80013ae:	f001 f803 	bl	80023b8 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013b8:	f000 fade 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80013c0:	230a      	movs	r3, #10
 80013c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4619      	mov	r1, r3
 80013c8:	482f      	ldr	r0, [pc, #188]	; (8001488 <MX_ADC1_Init+0x23c>)
 80013ca:	f000 fff5 	bl	80023b8 <HAL_ADC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80013d4:	f000 fad0 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013d8:	2306      	movs	r3, #6
 80013da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80013dc:	230b      	movs	r3, #11
 80013de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4828      	ldr	r0, [pc, #160]	; (8001488 <MX_ADC1_Init+0x23c>)
 80013e6:	f000 ffe7 	bl	80023b8 <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80013f0:	f000 fac2 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80013f8:	230c      	movs	r3, #12
 80013fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	4619      	mov	r1, r3
 8001400:	4821      	ldr	r0, [pc, #132]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001402:	f000 ffd9 	bl	80023b8 <HAL_ADC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800140c:	f000 fab4 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001410:	2305      	movs	r3, #5
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001414:	230d      	movs	r3, #13
 8001416:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	481a      	ldr	r0, [pc, #104]	; (8001488 <MX_ADC1_Init+0x23c>)
 800141e:	f000 ffcb 	bl	80023b8 <HAL_ADC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001428:	f000 faa6 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800142c:	2302      	movs	r3, #2
 800142e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001430:	230e      	movs	r3, #14
 8001432:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <MX_ADC1_Init+0x23c>)
 800143a:	f000 ffbd 	bl	80023b8 <HAL_ADC_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8001444:	f000 fa98 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001448:	2304      	movs	r3, #4
 800144a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 800144c:	230f      	movs	r3, #15
 800144e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001456:	f000 ffaf 	bl	80023b8 <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001460:	f000 fa8a 	bl	8001978 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001464:	2303      	movs	r3, #3
 8001466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001468:	2310      	movs	r3, #16
 800146a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_ADC1_Init+0x23c>)
 8001472:	f000 ffa1 	bl	80023b8 <HAL_ADC_ConfigChannel>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 800147c:	f000 fa7c 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200001a0 	.word	0x200001a0
 800148c:	40012000 	.word	0x40012000
 8001490:	0f000001 	.word	0x0f000001

08001494 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149a:	f107 0320 	add.w	r3, r7, #32
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014b6:	4b27      	ldr	r3, [pc, #156]	; (8001554 <MX_TIM4_Init+0xc0>)
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <MX_TIM4_Init+0xc4>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014bc:	4b25      	ldr	r3, [pc, #148]	; (8001554 <MX_TIM4_Init+0xc0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <MX_TIM4_Init+0xc0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3359;
 80014c8:	4b22      	ldr	r3, [pc, #136]	; (8001554 <MX_TIM4_Init+0xc0>)
 80014ca:	f640 521f 	movw	r2, #3359	; 0xd1f
 80014ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <MX_TIM4_Init+0xc0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <MX_TIM4_Init+0xc0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014dc:	481d      	ldr	r0, [pc, #116]	; (8001554 <MX_TIM4_Init+0xc0>)
 80014de:	f002 fce2 	bl	8003ea6 <HAL_TIM_PWM_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80014e8:	f000 fa46 	bl	8001978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	4619      	mov	r1, r3
 80014fa:	4816      	ldr	r0, [pc, #88]	; (8001554 <MX_TIM4_Init+0xc0>)
 80014fc:	f003 f9a8 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001506:	f000 fa37 	bl	8001978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150a:	2360      	movs	r3, #96	; 0x60
 800150c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <MX_TIM4_Init+0xc0>)
 8001522:	f002 fe31 	bl	8004188 <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800152c:	f000 fa24 	bl	8001978 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2204      	movs	r2, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <MX_TIM4_Init+0xc0>)
 8001538:	f002 fe26 	bl	8004188 <HAL_TIM_PWM_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001542:	f000 fa19 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001546:	4803      	ldr	r0, [pc, #12]	; (8001554 <MX_TIM4_Init+0xc0>)
 8001548:	f000 fb96 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000100 	.word	0x20000100
 8001558:	40000800 	.word	0x40000800

0800155c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <MX_TIM6_Init+0x64>)
 800156c:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <MX_TIM6_Init+0x68>)
 800156e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_TIM6_Init+0x64>)
 8001572:	2202      	movs	r2, #2
 8001574:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_TIM6_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 55999;
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_TIM6_Init+0x64>)
 800157e:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001582:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_TIM6_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800158a:	480d      	ldr	r0, [pc, #52]	; (80015c0 <MX_TIM6_Init+0x64>)
 800158c:	f002 fc3c 	bl	8003e08 <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001596:	f000 f9ef 	bl	8001978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <MX_TIM6_Init+0x64>)
 80015a8:	f003 f952 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80015b2:	f000 f9e1 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000290 	.word	0x20000290
 80015c4:	40001000 	.word	0x40001000

080015c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_TIM7_Init+0x64>)
 80015d8:	4a15      	ldr	r2, [pc, #84]	; (8001630 <MX_TIM7_Init+0x68>)
 80015da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_TIM7_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_TIM7_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 16799;
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_TIM7_Init+0x64>)
 80015ea:	f244 129f 	movw	r2, #16799	; 0x419f
 80015ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_TIM7_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_TIM7_Init+0x64>)
 80015f8:	f002 fc06 	bl	8003e08 <HAL_TIM_Base_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001602:	f000 f9b9 	bl	8001978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800160e:	463b      	mov	r3, r7
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <MX_TIM7_Init+0x64>)
 8001614:	f003 f91c 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800161e:	f000 f9ab 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000404 	.word	0x20000404
 8001630:	40001400 	.word	0x40001400

08001634 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_TIM10_Init+0x40>)
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <MX_TIM10_Init+0x44>)
 800163c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2;
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <MX_TIM10_Init+0x40>)
 8001640:	2202      	movs	r2, #2
 8001642:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <MX_TIM10_Init+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 55999;
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <MX_TIM10_Init+0x40>)
 800164c:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001650:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <MX_TIM10_Init+0x40>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_TIM10_Init+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_TIM10_Init+0x40>)
 8001660:	f002 fbd2 	bl	8003e08 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800166a:	f000 f985 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000140 	.word	0x20000140
 8001678:	40014400 	.word	0x40014400

0800167c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_TIM11_Init+0x40>)
 8001682:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <MX_TIM11_Init+0x44>)
 8001684:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2;
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <MX_TIM11_Init+0x40>)
 8001688:	2202      	movs	r2, #2
 800168a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_TIM11_Init+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 55999;
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_TIM11_Init+0x40>)
 8001694:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001698:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_TIM11_Init+0x40>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_TIM11_Init+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_TIM11_Init+0x40>)
 80016a8:	f002 fbae 	bl	8003e08 <HAL_TIM_Base_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80016b2:	f000 f961 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200001ec 	.word	0x200001ec
 80016c0:	40014800 	.word	0x40014800

080016c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART6_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_USART6_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_USART6_UART_Init+0x4c>)
 80016d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART6_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USART6_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART6_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART6_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART6_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART6_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART6_UART_Init+0x4c>)
 80016fc:	f003 f938 	bl	8004970 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f000 f937 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200002d0 	.word	0x200002d0
 8001714:	40011400 	.word	0x40011400

08001718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_DMA_Init+0x3c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <MX_DMA_Init+0x3c>)
 8001728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_DMA_Init+0x3c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2038      	movs	r0, #56	; 0x38
 8001740:	f001 f9b5 	bl	8002aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001744:	2038      	movs	r0, #56	; 0x38
 8001746:	f001 f9ce 	bl	8002ae6 <HAL_NVIC_EnableIRQ>

}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b60      	ldr	r3, [pc, #384]	; (80018f4 <MX_GPIO_Init+0x19c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <MX_GPIO_Init+0x19c>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <MX_GPIO_Init+0x19c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <MX_GPIO_Init+0x19c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <MX_GPIO_Init+0x19c>)
 8001794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b56      	ldr	r3, [pc, #344]	; (80018f4 <MX_GPIO_Init+0x19c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b52      	ldr	r3, [pc, #328]	; (80018f4 <MX_GPIO_Init+0x19c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a51      	ldr	r2, [pc, #324]	; (80018f4 <MX_GPIO_Init+0x19c>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <MX_GPIO_Init+0x19c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <MX_GPIO_Init+0x19c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a4a      	ldr	r2, [pc, #296]	; (80018f4 <MX_GPIO_Init+0x19c>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <MX_GPIO_Init+0x19c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <MX_GPIO_Init+0x19c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <MX_GPIO_Init+0x19c>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <MX_GPIO_Init+0x19c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8001800:	483d      	ldr	r0, [pc, #244]	; (80018f8 <MX_GPIO_Init+0x1a0>)
 8001802:	f001 feab 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180c:	483b      	ldr	r0, [pc, #236]	; (80018fc <MX_GPIO_Init+0x1a4>)
 800180e:	f001 fea5 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001818:	4839      	ldr	r0, [pc, #228]	; (8001900 <MX_GPIO_Init+0x1a8>)
 800181a:	f001 fe9f 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2104      	movs	r1, #4
 8001822:	4838      	ldr	r0, [pc, #224]	; (8001904 <MX_GPIO_Init+0x1ac>)
 8001824:	f001 fe9a 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8001828:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	482d      	ldr	r0, [pc, #180]	; (80018f8 <MX_GPIO_Init+0x1a0>)
 8001842:	f001 fcd9 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8001846:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4827      	ldr	r0, [pc, #156]	; (80018f8 <MX_GPIO_Init+0x1a0>)
 800185c:	f001 fccc 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8001860:	2302      	movs	r3, #2
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4825      	ldr	r0, [pc, #148]	; (8001908 <MX_GPIO_Init+0x1b0>)
 8001874:	f001 fcc0 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8001878:	f640 0304 	movw	r3, #2052	; 0x804
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	481b      	ldr	r0, [pc, #108]	; (80018fc <MX_GPIO_Init+0x1a4>)
 800188e:	f001 fcb3 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4814      	ldr	r0, [pc, #80]	; (80018fc <MX_GPIO_Init+0x1a4>)
 80018ac:	f001 fca4 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 80018b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <MX_GPIO_Init+0x1a8>)
 80018ca:	f001 fc95 	bl	80031f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 80018ce:	2304      	movs	r3, #4
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_GPIO_Init+0x1ac>)
 80018e6:	f001 fc87 	bl	80031f8 <HAL_GPIO_Init>

}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020000 	.word	0x40020000
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021c00 	.word	0x40021c00

0800190c <led_rgb>:
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 0 : 1;	// Rotary8
	return _rotaryvalue;
}

void led_rgb(char r, char g, char b)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
 8001916:	460b      	mov	r3, r1
 8001918:	71bb      	strb	r3, [r7, #6]
 800191a:	4613      	mov	r3, r2
 800191c:	717b      	strb	r3, [r7, #5]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (r) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001930:	480f      	ldr	r0, [pc, #60]	; (8001970 <led_rgb+0x64>)
 8001932:	f001 fe13 	bl	800355c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <led_rgb+0x64>)
 800194a:	f001 fe07 	bl	800355c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_B ON
 800194e:	797b      	ldrb	r3, [r7, #5]
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	461a      	mov	r2, r3
 800195c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <led_rgb+0x68>)
 8001962:	f001 fdfb 	bl	800355c <HAL_GPIO_WritePin>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40020000 	.word	0x40020000
 8001974:	40020800 	.word	0x40020800

08001978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800197c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800197e:	e7fe      	b.n	800197e <Error_Handler+0x6>

08001980 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_MspInit+0x4c>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <HAL_MspInit+0x4c>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_MspInit+0x4c>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_MspInit+0x4c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <HAL_MspInit+0x4c>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_MspInit+0x4c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800

080019d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	; 0x30
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a49      	ldr	r2, [pc, #292]	; (8001b14 <HAL_ADC_MspInit+0x144>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	f040 808c 	bne.w	8001b0c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	4a46      	ldr	r2, [pc, #280]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6453      	str	r3, [r2, #68]	; 0x44
 8001a04:	4b44      	ldr	r3, [pc, #272]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	4a3f      	ldr	r2, [pc, #252]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a20:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4a38      	ldr	r2, [pc, #224]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3c:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4a31      	ldr	r2, [pc, #196]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	6313      	str	r3, [r2, #48]	; 0x30
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <HAL_ADC_MspInit+0x148>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a64:	233f      	movs	r3, #63	; 0x3f
 8001a66:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4829      	ldr	r0, [pc, #164]	; (8001b1c <HAL_ADC_MspInit+0x14c>)
 8001a78:	f001 fbbe 	bl	80031f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a7c:	23ff      	movs	r3, #255	; 0xff
 8001a7e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a80:	2303      	movs	r3, #3
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4824      	ldr	r0, [pc, #144]	; (8001b20 <HAL_ADC_MspInit+0x150>)
 8001a90:	f001 fbb2 	bl	80031f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a94:	2303      	movs	r3, #3
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	481f      	ldr	r0, [pc, #124]	; (8001b24 <HAL_ADC_MspInit+0x154>)
 8001aa8:	f001 fba6 	bl	80031f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001aae:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_ADC_MspInit+0x15c>)
 8001ab0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ad2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ada:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001af2:	f001 f813 	bl	8002b1c <HAL_DMA_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001afc:	f7ff ff3c 	bl	8001978 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <HAL_ADC_MspInit+0x158>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3730      	adds	r7, #48	; 0x30
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40012000 	.word	0x40012000
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40020400 	.word	0x40020400
 8001b28:	2000022c 	.word	0x2000022c
 8001b2c:	40026410 	.word	0x40026410

08001b30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_TIM_PWM_MspInit+0x3c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10d      	bne.n	8001b5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_TIM_PWM_MspInit+0x40>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_TIM_PWM_MspInit+0x40>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_TIM_PWM_MspInit+0x40>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40000800 	.word	0x40000800
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <HAL_TIM_Base_MspInit+0xf0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d116      	bne.n	8001bb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a36      	ldr	r2, [pc, #216]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001b90:	f043 0310 	orr.w	r3, r3, #16
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2036      	movs	r0, #54	; 0x36
 8001ba8:	f000 ff81 	bl	8002aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bac:	2036      	movs	r0, #54	; 0x36
 8001bae:	f000 ff9a 	bl	8002ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001bb2:	e052      	b.n	8001c5a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM7)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2c      	ldr	r2, [pc, #176]	; (8001c6c <HAL_TIM_Base_MspInit+0xf8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d116      	bne.n	8001bec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001bc8:	f043 0320 	orr.w	r3, r3, #32
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2037      	movs	r0, #55	; 0x37
 8001be0:	f000 ff65 	bl	8002aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001be4:	2037      	movs	r0, #55	; 0x37
 8001be6:	f000 ff7e 	bl	8002ae6 <HAL_NVIC_EnableIRQ>
}
 8001bea:	e036      	b.n	8001c5a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <HAL_TIM_Base_MspInit+0xfc>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d116      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2019      	movs	r0, #25
 8001c18:	f000 ff49 	bl	8002aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c1c:	2019      	movs	r0, #25
 8001c1e:	f000 ff62 	bl	8002ae6 <HAL_NVIC_EnableIRQ>
}
 8001c22:	e01a      	b.n	8001c5a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <HAL_TIM_Base_MspInit+0x100>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d115      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_TIM_Base_MspInit+0xf4>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	201a      	movs	r0, #26
 8001c50:	f000 ff2d 	bl	8002aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c54:	201a      	movs	r0, #26
 8001c56:	f000 ff46 	bl	8002ae6 <HAL_NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40001000 	.word	0x40001000
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40001400 	.word	0x40001400
 8001c70:	40014400 	.word	0x40014400
 8001c74:	40014800 	.word	0x40014800

08001c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <HAL_TIM_MspPostInit+0x68>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d11d      	bne.n	8001cd6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_TIM_MspPostInit+0x6c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_TIM_MspPostInit+0x6c>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_TIM_MspPostInit+0x6c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8001cb6:	23c0      	movs	r3, #192	; 0xc0
 8001cb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <HAL_TIM_MspPostInit+0x70>)
 8001cd2:	f001 fa91 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3720      	adds	r7, #32
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40000800 	.word	0x40000800
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020400 	.word	0x40020400

08001cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <HAL_UART_MspInit+0x84>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d12b      	bne.n	8001d66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_UART_MspInit+0x88>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <HAL_UART_MspInit+0x88>)
 8001d18:	f043 0320 	orr.w	r3, r3, #32
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_UART_MspInit+0x88>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_UART_MspInit+0x88>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_UART_MspInit+0x88>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_UART_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d46:	23c0      	movs	r3, #192	; 0xc0
 8001d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d56:	2308      	movs	r3, #8
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_UART_MspInit+0x8c>)
 8001d62:	f001 fa49 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40011400 	.word	0x40011400
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020800 	.word	0x40020800

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <NMI_Handler+0x4>

08001d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <HardFault_Handler+0x4>

08001d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <MemManage_Handler+0x4>

08001d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc8:	f000 f96a 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dd6:	f002 f8cf 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000140 	.word	0x20000140

08001de4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001dea:	f002 f8c5 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200001ec 	.word	0x200001ec

08001df8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <TIM6_DAC_IRQHandler+0x10>)
 8001dfe:	f002 f8bb 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000290 	.word	0x20000290

08001e0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM7_IRQHandler+0x10>)
 8001e12:	f002 f8b1 	bl	8003f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000404 	.word	0x20000404

08001e20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <DMA2_Stream0_IRQHandler+0x10>)
 8001e26:	f000 ff7f 	bl	8002d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000022c 	.word	0x2000022c

08001e34 <_read>:
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	e00a      	b.n	8001e5c <_read+0x28>
 8001e46:	f3af 8000 	nop.w
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	b2ca      	uxtb	r2, r1
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf0      	blt.n	8001e46 <_read+0x12>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_write>:
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e009      	b.n	8001e94 <_write+0x26>
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	60ba      	str	r2, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb71 	bl	8000570 <__io_putchar>
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbf1      	blt.n	8001e80 <_write+0x12>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_close>:
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <_fstat>:
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <_isatty>:
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_lseek>:
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	2300      	movs	r3, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <_sbrk>:
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
 8001f40:	f003 f9c2 	bl	80052c8 <__errno>
 8001f44:	4602      	mov	r2, r0
 8001f46:	230c      	movs	r3, #12
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <_sbrk+0x64>)
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20020000 	.word	0x20020000
 8001f70:	00000400 	.word	0x00000400
 8001f74:	200000f0 	.word	0x200000f0
 8001f78:	20000450 	.word	0x20000450

08001f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <SystemInit+0x28>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <SystemInit+0x28>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <SystemInit+0x28>)
 8001f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f96:	609a      	str	r2, [r3, #8]
#endif
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <Reset_Handler>:
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe0 <LoopFillZerobss+0x14>
 8001fac:	2100      	movs	r1, #0
 8001fae:	e003      	b.n	8001fb8 <LoopCopyDataInit>

08001fb0 <CopyDataInit>:
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <LoopFillZerobss+0x18>)
 8001fb2:	585b      	ldr	r3, [r3, r1]
 8001fb4:	5043      	str	r3, [r0, r1]
 8001fb6:	3104      	adds	r1, #4

08001fb8 <LoopCopyDataInit>:
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <LoopFillZerobss+0x1c>)
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <LoopFillZerobss+0x20>)
 8001fbc:	1842      	adds	r2, r0, r1
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3f6      	bcc.n	8001fb0 <CopyDataInit>
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <LoopFillZerobss+0x24>)
 8001fc4:	e002      	b.n	8001fcc <LoopFillZerobss>

08001fc6 <FillZerobss>:
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f842 3b04 	str.w	r3, [r2], #4

08001fcc <LoopFillZerobss>:
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <LoopFillZerobss+0x28>)
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d3f9      	bcc.n	8001fc6 <FillZerobss>
 8001fd2:	f7ff ffd3 	bl	8001f7c <SystemInit>
 8001fd6:	f003 f97d 	bl	80052d4 <__libc_init_array>
 8001fda:	f7fe fd29 	bl	8000a30 <main>
 8001fde:	4770      	bx	lr
 8001fe0:	20020000 	.word	0x20020000
 8001fe4:	08006578 	.word	0x08006578
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000074 	.word	0x20000074
 8001ff0:	20000074 	.word	0x20000074
 8001ff4:	20000450 	.word	0x20000450

08001ff8 <ADC_IRQHandler>:
 8001ff8:	e7fe      	b.n	8001ff8 <ADC_IRQHandler>
	...

08001ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_Init+0x40>)
 8002006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_Init+0x40>)
 8002012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_Init+0x40>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 fd37 	bl	8002a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	2000      	movs	r0, #0
 800202c:	f000 f808 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002030:	f7ff fca6 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fd4f 	bl	8002b02 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f000 fd17 	bl	8002aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000004 	.word	0x20000004
 8002098:	2000000c 	.word	0x2000000c
 800209c:	20000008 	.word	0x20000008

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	20000448 	.word	0x20000448

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000448 	.word	0x20000448

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_Delay+0x40>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2000000c 	.word	0x2000000c

08002124 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e033      	b.n	80021a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fc44 	bl	80019d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800216a:	f023 0302 	bic.w	r3, r3, #2
 800216e:	f043 0202 	orr.w	r2, r3, #2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa40 	bl	80025fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
 8002192:	e001      	b.n	8002198 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_Start_DMA+0x1e>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0cc      	b.n	8002364 <HAL_ADC_Start_DMA+0x1b8>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d018      	beq.n	8002212 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021f0:	4b5e      	ldr	r3, [pc, #376]	; (800236c <HAL_ADC_Start_DMA+0x1c0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a5e      	ldr	r2, [pc, #376]	; (8002370 <HAL_ADC_Start_DMA+0x1c4>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0c9a      	lsrs	r2, r3, #18
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002204:	e002      	b.n	800220c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	3b01      	subs	r3, #1
 800220a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	f040 80a0 	bne.w	8002362 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800224c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002260:	d106      	bne.n	8002270 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f023 0206 	bic.w	r2, r3, #6
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
 800226e:	e002      	b.n	8002276 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_ADC_Start_DMA+0x1c8>)
 8002280:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <HAL_ADC_Start_DMA+0x1cc>)
 8002288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	4a3b      	ldr	r2, [pc, #236]	; (800237c <HAL_ADC_Start_DMA+0x1d0>)
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	4a3a      	ldr	r2, [pc, #232]	; (8002380 <HAL_ADC_Start_DMA+0x1d4>)
 8002298:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	334c      	adds	r3, #76	; 0x4c
 80022ce:	4619      	mov	r1, r3
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f000 fcd0 	bl	8002c78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d12a      	bne.n	800233a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a26      	ldr	r2, [pc, #152]	; (8002384 <HAL_ADC_Start_DMA+0x1d8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d015      	beq.n	800231a <HAL_ADC_Start_DMA+0x16e>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a25      	ldr	r2, [pc, #148]	; (8002388 <HAL_ADC_Start_DMA+0x1dc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_Start_DMA+0x158>
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_ADC_Start_DMA+0x1c8>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_ADC_Start_DMA+0x1e0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d129      	bne.n	8002362 <HAL_ADC_Start_DMA+0x1b6>
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_ADC_Start_DMA+0x1c8>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2b0f      	cmp	r3, #15
 8002318:	d823      	bhi.n	8002362 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d11c      	bne.n	8002362 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e013      	b.n	8002362 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_ADC_Start_DMA+0x1d8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d10e      	bne.n	8002362 <HAL_ADC_Start_DMA+0x1b6>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d107      	bne.n	8002362 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002360:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000004 	.word	0x20000004
 8002370:	431bde83 	.word	0x431bde83
 8002374:	40012300 	.word	0x40012300
 8002378:	080027f5 	.word	0x080027f5
 800237c:	080028af 	.word	0x080028af
 8002380:	080028cb 	.word	0x080028cb
 8002384:	40012000 	.word	0x40012000
 8002388:	40012100 	.word	0x40012100
 800238c:	40012200 	.word	0x40012200

08002390 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x1c>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e105      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x228>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	d925      	bls.n	8002430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68d9      	ldr	r1, [r3, #12]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	3b1e      	subs	r3, #30
 80023fa:	2207      	movs	r2, #7
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43da      	mvns	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	400a      	ands	r2, r1
 8002408:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68d9      	ldr	r1, [r3, #12]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	4603      	mov	r3, r0
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4403      	add	r3, r0
 8002422:	3b1e      	subs	r3, #30
 8002424:	409a      	lsls	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	e022      	b.n	8002476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6919      	ldr	r1, [r3, #16]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	2207      	movs	r2, #7
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	400a      	ands	r2, r1
 8002452:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6919      	ldr	r1, [r3, #16]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	4603      	mov	r3, r0
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4403      	add	r3, r0
 800246c:	409a      	lsls	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b06      	cmp	r3, #6
 800247c:	d824      	bhi.n	80024c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b05      	subs	r3, #5
 8002490:	221f      	movs	r2, #31
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	400a      	ands	r2, r1
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b05      	subs	r3, #5
 80024ba:	fa00 f203 	lsl.w	r2, r0, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34
 80024c6:	e04c      	b.n	8002562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	d824      	bhi.n	800251a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	3b23      	subs	r3, #35	; 0x23
 80024e2:	221f      	movs	r2, #31
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43da      	mvns	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	400a      	ands	r2, r1
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b23      	subs	r3, #35	; 0x23
 800250c:	fa00 f203 	lsl.w	r2, r0, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
 8002518:	e023      	b.n	8002562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b41      	subs	r3, #65	; 0x41
 800252c:	221f      	movs	r2, #31
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	400a      	ands	r2, r1
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	4618      	mov	r0, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	3b41      	subs	r3, #65	; 0x41
 8002556:	fa00 f203 	lsl.w	r2, r0, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_ADC_ConfigChannel+0x234>)
 8002564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <HAL_ADC_ConfigChannel+0x238>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d109      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1cc>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b12      	cmp	r3, #18
 8002576:	d105      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <HAL_ADC_ConfigChannel+0x238>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d123      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x21e>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b10      	cmp	r3, #16
 8002594:	d003      	beq.n	800259e <HAL_ADC_ConfigChannel+0x1e6>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b11      	cmp	r3, #17
 800259c:	d11b      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d111      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_ADC_ConfigChannel+0x23c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_ADC_ConfigChannel+0x240>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	0c9a      	lsrs	r2, r3, #18
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025c8:	e002      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f9      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40012300 	.word	0x40012300
 80025f0:	40012000 	.word	0x40012000
 80025f4:	20000004 	.word	0x20000004
 80025f8:	431bde83 	.word	0x431bde83

080025fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002604:	4b79      	ldr	r3, [pc, #484]	; (80027ec <ADC_Init+0x1f0>)
 8002606:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	431a      	orrs	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	021a      	lsls	r2, r3, #8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6899      	ldr	r1, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <ADC_Init+0x1f4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d022      	beq.n	80026da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6899      	ldr	r1, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	e00f      	b.n	80026fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0202 	bic.w	r2, r2, #2
 8002708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6899      	ldr	r1, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7e1b      	ldrb	r3, [r3, #24]
 8002714:	005a      	lsls	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01b      	beq.n	8002760 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002736:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	3b01      	subs	r3, #1
 8002754:	035a      	lsls	r2, r3, #13
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	e007      	b.n	8002770 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800276e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	3b01      	subs	r3, #1
 800278c:	051a      	lsls	r2, r3, #20
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027b2:	025a      	lsls	r2, r3, #9
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	029a      	lsls	r2, r3, #10
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40012300 	.word	0x40012300
 80027f0:	0f000001 	.word	0x0f000001

080027f4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800280a:	2b00      	cmp	r3, #0
 800280c:	d13c      	bne.n	8002888 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d12b      	bne.n	8002880 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800282c:	2b00      	cmp	r3, #0
 800282e:	d127      	bne.n	8002880 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800283a:	2b00      	cmp	r3, #0
 800283c:	d006      	beq.n	800284c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002848:	2b00      	cmp	r3, #0
 800284a:	d119      	bne.n	8002880 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0220 	bic.w	r2, r2, #32
 800285a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7fd fe87 	bl	8000594 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002886:	e00e      	b.n	80028a6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff fd85 	bl	80023a4 <HAL_ADC_ErrorCallback>
}
 800289a:	e004      	b.n	80028a6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f7ff fd67 	bl	8002390 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2240      	movs	r2, #64	; 0x40
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f043 0204 	orr.w	r2, r3, #4
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff fd5a 	bl	80023a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292a:	4a04      	ldr	r2, [pc, #16]	; (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	60d3      	str	r3, [r2, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <__NVIC_GetPriorityGrouping+0x18>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f003 0307 	and.w	r3, r3, #7
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	db0b      	blt.n	8002986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4907      	ldr	r1, [pc, #28]	; (8002994 <__NVIC_EnableIRQ+0x38>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2001      	movs	r0, #1
 800297e:	fa00 f202 	lsl.w	r2, r0, r2
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000e100 	.word	0xe000e100

08002998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	db0a      	blt.n	80029c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	490c      	ldr	r1, [pc, #48]	; (80029e4 <__NVIC_SetPriority+0x4c>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	440b      	add	r3, r1
 80029bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c0:	e00a      	b.n	80029d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4908      	ldr	r1, [pc, #32]	; (80029e8 <__NVIC_SetPriority+0x50>)
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	3b04      	subs	r3, #4
 80029d0:	0112      	lsls	r2, r2, #4
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	440b      	add	r3, r1
 80029d6:	761a      	strb	r2, [r3, #24]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000e100 	.word	0xe000e100
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f1c3 0307 	rsb	r3, r3, #7
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	bf28      	it	cs
 8002a0a:	2304      	movcs	r3, #4
 8002a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d902      	bls.n	8002a1c <NVIC_EncodePriority+0x30>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3b03      	subs	r3, #3
 8002a1a:	e000      	b.n	8002a1e <NVIC_EncodePriority+0x32>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	f04f 32ff 	mov.w	r2, #4294967295
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	401a      	ands	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a34:	f04f 31ff 	mov.w	r1, #4294967295
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	43d9      	mvns	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	4313      	orrs	r3, r2
         );
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3724      	adds	r7, #36	; 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a64:	d301      	bcc.n	8002a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00f      	b.n	8002a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <SysTick_Config+0x40>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a72:	210f      	movs	r1, #15
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	f7ff ff8e 	bl	8002998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <SysTick_Config+0x40>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a82:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <SysTick_Config+0x40>)
 8002a84:	2207      	movs	r2, #7
 8002a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	e000e010 	.word	0xe000e010

08002a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ff29 	bl	80028f8 <__NVIC_SetPriorityGrouping>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac0:	f7ff ff3e 	bl	8002940 <__NVIC_GetPriorityGrouping>
 8002ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	6978      	ldr	r0, [r7, #20]
 8002acc:	f7ff ff8e 	bl	80029ec <NVIC_EncodePriority>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff5d 	bl	8002998 <__NVIC_SetPriority>
}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff31 	bl	800295c <__NVIC_EnableIRQ>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ffa2 	bl	8002a54 <SysTick_Config>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff face 	bl	80020c8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e099      	b.n	8002c6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b58:	e00f      	b.n	8002b7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b5a:	f7ff fab5 	bl	80020c8 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d908      	bls.n	8002b7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2203      	movs	r2, #3
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e078      	b.n	8002c6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1e8      	bne.n	8002b5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <HAL_DMA_Init+0x158>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d107      	bne.n	8002be4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 0307 	bic.w	r3, r3, #7
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d117      	bne.n	8002c3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00e      	beq.n	8002c3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fa6f 	bl	8003104 <DMA_CheckFifoParam>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2240      	movs	r2, #64	; 0x40
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e016      	b.n	8002c6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa26 	bl	8003098 <DMA_CalcBaseAndBitshift>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	223f      	movs	r2, #63	; 0x3f
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	f010803f 	.word	0xf010803f

08002c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_DMA_Start_IT+0x26>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e040      	b.n	8002d20 <HAL_DMA_Start_IT+0xa8>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d12f      	bne.n	8002d12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f9b8 	bl	800303c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	223f      	movs	r2, #63	; 0x3f
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0216 	orr.w	r2, r2, #22
 8002ce6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0208 	orr.w	r2, r2, #8
 8002cfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e005      	b.n	8002d1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d34:	4b92      	ldr	r3, [pc, #584]	; (8002f80 <HAL_DMA_IRQHandler+0x258>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a92      	ldr	r2, [pc, #584]	; (8002f84 <HAL_DMA_IRQHandler+0x25c>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0a9b      	lsrs	r3, r3, #10
 8002d40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	2208      	movs	r2, #8
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01a      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	2208      	movs	r2, #8
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2201      	movs	r2, #1
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	2201      	movs	r2, #1
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	2204      	movs	r2, #4
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2204      	movs	r2, #4
 8002dee:	409a      	lsls	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	2210      	movs	r2, #16
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d043      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d03c      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	2210      	movs	r2, #16
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d018      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d024      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
 8002e56:	e01f      	b.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4798      	blx	r3
 8002e68:	e016      	b.n	8002e98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0208 	bic.w	r2, r2, #8
 8002e86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 808e 	beq.w	8002fc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8086 	beq.w	8002fc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d136      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0216 	bic.w	r2, r2, #22
 8002ee0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <HAL_DMA_IRQHandler+0x1da>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0208 	bic.w	r2, r2, #8
 8002f10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	223f      	movs	r2, #63	; 0x3f
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d07d      	beq.n	8003032 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
        }
        return;
 8002f3e:	e078      	b.n	8003032 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01c      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d108      	bne.n	8002f6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d030      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
 8002f6c:	e02b      	b.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d027      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
 8002f7e:	e022      	b.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
 8002f80:	20000004 	.word	0x20000004
 8002f84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10f      	bne.n	8002fb6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0210 	bic.w	r2, r2, #16
 8002fa4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d032      	beq.n	8003034 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d022      	beq.n	8003020 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2205      	movs	r2, #5
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d307      	bcc.n	800300e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f2      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0x2ca>
 800300c:	e000      	b.n	8003010 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800300e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	e000      	b.n	8003034 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003032:	bf00      	nop
    }
  }
}
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop

0800303c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003058:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b40      	cmp	r3, #64	; 0x40
 8003068:	d108      	bne.n	800307c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800307a:	e007      	b.n	800308c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3b10      	subs	r3, #16
 80030a8:	4a14      	ldr	r2, [pc, #80]	; (80030fc <DMA_CalcBaseAndBitshift+0x64>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <DMA_CalcBaseAndBitshift+0x68>)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d909      	bls.n	80030da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	1d1a      	adds	r2, r3, #4
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	659a      	str	r2, [r3, #88]	; 0x58
 80030d8:	e007      	b.n	80030ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	aaaaaaab 	.word	0xaaaaaaab
 8003100:	080064c8 	.word	0x080064c8

08003104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11f      	bne.n	800315e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d855      	bhi.n	80031d0 <DMA_CheckFifoParam+0xcc>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <DMA_CheckFifoParam+0x28>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	0800313d 	.word	0x0800313d
 8003130:	0800314f 	.word	0x0800314f
 8003134:	0800313d 	.word	0x0800313d
 8003138:	080031d1 	.word	0x080031d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d045      	beq.n	80031d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314c:	e042      	b.n	80031d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003156:	d13f      	bne.n	80031d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315c:	e03c      	b.n	80031d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003166:	d121      	bne.n	80031ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d836      	bhi.n	80031dc <DMA_CheckFifoParam+0xd8>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <DMA_CheckFifoParam+0x70>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	08003185 	.word	0x08003185
 8003178:	0800318b 	.word	0x0800318b
 800317c:	08003185 	.word	0x08003185
 8003180:	0800319d 	.word	0x0800319d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
      break;
 8003188:	e02f      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d024      	beq.n	80031e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319a:	e021      	b.n	80031e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031a4:	d11e      	bne.n	80031e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031aa:	e01b      	b.n	80031e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d902      	bls.n	80031b8 <DMA_CheckFifoParam+0xb4>
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d003      	beq.n	80031be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031b6:	e018      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      break;
 80031bc:	e015      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00e      	beq.n	80031e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
      break;
 80031ce:	e00b      	b.n	80031e8 <DMA_CheckFifoParam+0xe4>
      break;
 80031d0:	bf00      	nop
 80031d2:	e00a      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031d4:	bf00      	nop
 80031d6:	e008      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031d8:	bf00      	nop
 80031da:	e006      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031dc:	bf00      	nop
 80031de:	e004      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031e0:	bf00      	nop
 80031e2:	e002      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;   
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031e8:	bf00      	nop
    }
  } 
  
  return status; 
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e16b      	b.n	80034ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	f040 815a 	bne.w	80034e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d00b      	beq.n	8003252 <HAL_GPIO_Init+0x5a>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d007      	beq.n	8003252 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003246:	2b11      	cmp	r3, #17
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b12      	cmp	r3, #18
 8003250:	d130      	bne.n	80032b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003288:	2201      	movs	r2, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 0201 	and.w	r2, r3, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0xfc>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b12      	cmp	r3, #18
 80032f2:	d123      	bne.n	800333c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	08da      	lsrs	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3208      	adds	r2, #8
 8003336:	69b9      	ldr	r1, [r7, #24]
 8003338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0203 	and.w	r2, r3, #3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80b4 	beq.w	80034e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <HAL_GPIO_Init+0x308>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	4a5e      	ldr	r2, [pc, #376]	; (8003500 <HAL_GPIO_Init+0x308>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338c:	6453      	str	r3, [r2, #68]	; 0x44
 800338e:	4b5c      	ldr	r3, [pc, #368]	; (8003500 <HAL_GPIO_Init+0x308>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339a:	4a5a      	ldr	r2, [pc, #360]	; (8003504 <HAL_GPIO_Init+0x30c>)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a51      	ldr	r2, [pc, #324]	; (8003508 <HAL_GPIO_Init+0x310>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d02b      	beq.n	800341e <HAL_GPIO_Init+0x226>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_GPIO_Init+0x314>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d025      	beq.n	800341a <HAL_GPIO_Init+0x222>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4f      	ldr	r2, [pc, #316]	; (8003510 <HAL_GPIO_Init+0x318>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01f      	beq.n	8003416 <HAL_GPIO_Init+0x21e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <HAL_GPIO_Init+0x31c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d019      	beq.n	8003412 <HAL_GPIO_Init+0x21a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4d      	ldr	r2, [pc, #308]	; (8003518 <HAL_GPIO_Init+0x320>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_GPIO_Init+0x216>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4c      	ldr	r2, [pc, #304]	; (800351c <HAL_GPIO_Init+0x324>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00d      	beq.n	800340a <HAL_GPIO_Init+0x212>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	; (8003520 <HAL_GPIO_Init+0x328>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <HAL_GPIO_Init+0x20e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4a      	ldr	r2, [pc, #296]	; (8003524 <HAL_GPIO_Init+0x32c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_GPIO_Init+0x20a>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00e      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003402:	2308      	movs	r3, #8
 8003404:	e00c      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003406:	2306      	movs	r3, #6
 8003408:	e00a      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800340a:	2305      	movs	r3, #5
 800340c:	e008      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800340e:	2304      	movs	r3, #4
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800341e:	2300      	movs	r3, #0
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003430:	4934      	ldr	r1, [pc, #208]	; (8003504 <HAL_GPIO_Init+0x30c>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <HAL_GPIO_Init+0x330>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003462:	4a31      	ldr	r2, [pc, #196]	; (8003528 <HAL_GPIO_Init+0x330>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003468:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <HAL_GPIO_Init+0x330>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800348c:	4a26      	ldr	r2, [pc, #152]	; (8003528 <HAL_GPIO_Init+0x330>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003492:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_GPIO_Init+0x330>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b6:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <HAL_GPIO_Init+0x330>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034bc:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <HAL_GPIO_Init+0x330>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e0:	4a11      	ldr	r2, [pc, #68]	; (8003528 <HAL_GPIO_Init+0x330>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	f67f ae90 	bls.w	8003214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	3724      	adds	r7, #36	; 0x24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40023800 	.word	0x40023800
 8003504:	40013800 	.word	0x40013800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40021400 	.word	0x40021400
 8003520:	40021800 	.word	0x40021800
 8003524:	40021c00 	.word	0x40021c00
 8003528:	40013c00 	.word	0x40013c00

0800352c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e001      	b.n	800354e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003578:	e003      	b.n	8003582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	041a      	lsls	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	619a      	str	r2, [r3, #24]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e25b      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d075      	beq.n	800369a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ae:	4ba3      	ldr	r3, [pc, #652]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d00c      	beq.n	80035d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ba:	4ba0      	ldr	r3, [pc, #640]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d112      	bne.n	80035ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c6:	4b9d      	ldr	r3, [pc, #628]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d2:	d10b      	bne.n	80035ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	4b99      	ldr	r3, [pc, #612]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05b      	beq.n	8003698 <HAL_RCC_OscConfig+0x108>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d157      	bne.n	8003698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e236      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d106      	bne.n	8003604 <HAL_RCC_OscConfig+0x74>
 80035f6:	4b91      	ldr	r3, [pc, #580]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a90      	ldr	r2, [pc, #576]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e01d      	b.n	8003640 <HAL_RCC_OscConfig+0xb0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x98>
 800360e:	4b8b      	ldr	r3, [pc, #556]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a8a      	ldr	r2, [pc, #552]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 8003614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b88      	ldr	r3, [pc, #544]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a87      	ldr	r2, [pc, #540]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0xb0>
 8003628:	4b84      	ldr	r3, [pc, #528]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a83      	ldr	r2, [pc, #524]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 800362e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b81      	ldr	r3, [pc, #516]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a80      	ldr	r2, [pc, #512]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 800363a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe fd3e 	bl	80020c8 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003650:	f7fe fd3a 	bl	80020c8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1fb      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0xc0>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe fd2a 	bl	80020c8 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003678:	f7fe fd26 	bl	80020c8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e1e7      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	4b6c      	ldr	r3, [pc, #432]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0xe8>
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d063      	beq.n	800376e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a6:	4b65      	ldr	r3, [pc, #404]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b2:	4b62      	ldr	r3, [pc, #392]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d11c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036be:	4b5f      	ldr	r3, [pc, #380]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d116      	bne.n	80036f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ca:	4b5c      	ldr	r3, [pc, #368]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_RCC_OscConfig+0x152>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e1bb      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4952      	ldr	r1, [pc, #328]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f6:	e03a      	b.n	800376e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003700:	4b4f      	ldr	r3, [pc, #316]	; (8003840 <HAL_RCC_OscConfig+0x2b0>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fe fcdf 	bl	80020c8 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800370e:	f7fe fcdb 	bl	80020c8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e19c      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003720:	4b46      	ldr	r3, [pc, #280]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4b43      	ldr	r3, [pc, #268]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4940      	ldr	r1, [pc, #256]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 800373c:	4313      	orrs	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
 8003740:	e015      	b.n	800376e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003742:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <HAL_RCC_OscConfig+0x2b0>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fe fcbe 	bl	80020c8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003750:	f7fe fcba 	bl	80020c8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e17b      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003762:	4b36      	ldr	r3, [pc, #216]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d030      	beq.n	80037dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003782:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003788:	f7fe fc9e 	bl	80020c8 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003790:	f7fe fc9a 	bl	80020c8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e15b      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a2:	4b26      	ldr	r3, [pc, #152]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x200>
 80037ae:	e015      	b.n	80037dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b6:	f7fe fc87 	bl	80020c8 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037be:	f7fe fc83 	bl	80020c8 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e144      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d0:	4b1a      	ldr	r3, [pc, #104]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a0 	beq.w	800392a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ee:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10f      	bne.n	800381a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	4a0e      	ldr	r2, [pc, #56]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003808:	6413      	str	r3, [r2, #64]	; 0x40
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <HAL_RCC_OscConfig+0x2ac>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003816:	2301      	movs	r3, #1
 8003818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_OscConfig+0x2b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d121      	bne.n	800386a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <HAL_RCC_OscConfig+0x2b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a07      	ldr	r2, [pc, #28]	; (8003848 <HAL_RCC_OscConfig+0x2b8>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003832:	f7fe fc49 	bl	80020c8 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	e011      	b.n	800385e <HAL_RCC_OscConfig+0x2ce>
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
 8003840:	42470000 	.word	0x42470000
 8003844:	42470e80 	.word	0x42470e80
 8003848:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384c:	f7fe fc3c 	bl	80020c8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e0fd      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385e:	4b81      	ldr	r3, [pc, #516]	; (8003a64 <HAL_RCC_OscConfig+0x4d4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d106      	bne.n	8003880 <HAL_RCC_OscConfig+0x2f0>
 8003872:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a7c      	ldr	r2, [pc, #496]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
 800387e:	e01c      	b.n	80038ba <HAL_RCC_OscConfig+0x32a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b05      	cmp	r3, #5
 8003886:	d10c      	bne.n	80038a2 <HAL_RCC_OscConfig+0x312>
 8003888:	4b77      	ldr	r3, [pc, #476]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	4a76      	ldr	r2, [pc, #472]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	6713      	str	r3, [r2, #112]	; 0x70
 8003894:	4b74      	ldr	r3, [pc, #464]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a73      	ldr	r2, [pc, #460]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	e00b      	b.n	80038ba <HAL_RCC_OscConfig+0x32a>
 80038a2:	4b71      	ldr	r3, [pc, #452]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	4a70      	ldr	r2, [pc, #448]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	6713      	str	r3, [r2, #112]	; 0x70
 80038ae:	4b6e      	ldr	r3, [pc, #440]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	4a6d      	ldr	r2, [pc, #436]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d015      	beq.n	80038ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fe fc01 	bl	80020c8 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7fe fbfd 	bl	80020c8 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e0bc      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e0:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0ee      	beq.n	80038ca <HAL_RCC_OscConfig+0x33a>
 80038ec:	e014      	b.n	8003918 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ee:	f7fe fbeb 	bl	80020c8 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fe fbe7 	bl	80020c8 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e0a6      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390c:	4b56      	ldr	r3, [pc, #344]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ee      	bne.n	80038f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d105      	bne.n	800392a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4b52      	ldr	r3, [pc, #328]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a51      	ldr	r2, [pc, #324]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8092 	beq.w	8003a58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003934:	4b4c      	ldr	r3, [pc, #304]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b08      	cmp	r3, #8
 800393e:	d05c      	beq.n	80039fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d141      	bne.n	80039cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003948:	4b48      	ldr	r3, [pc, #288]	; (8003a6c <HAL_RCC_OscConfig+0x4dc>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fe fbbb 	bl	80020c8 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003956:	f7fe fbb7 	bl	80020c8 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e078      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003968:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	019b      	lsls	r3, r3, #6
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	3b01      	subs	r3, #1
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	061b      	lsls	r3, r3, #24
 8003998:	4933      	ldr	r1, [pc, #204]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800399e:	4b33      	ldr	r3, [pc, #204]	; (8003a6c <HAL_RCC_OscConfig+0x4dc>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe fb90 	bl	80020c8 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fe fb8c 	bl	80020c8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e04d      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039be:	4b2a      	ldr	r3, [pc, #168]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x41c>
 80039ca:	e045      	b.n	8003a58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <HAL_RCC_OscConfig+0x4dc>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fe fb79 	bl	80020c8 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039da:	f7fe fb75 	bl	80020c8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e036      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x44a>
 80039f8:	e02e      	b.n	8003a58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e029      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a06:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <HAL_RCC_OscConfig+0x4d8>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d11c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d115      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a2e:	4013      	ands	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d106      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40007000 	.word	0x40007000
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	42470060 	.word	0x42470060

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0cc      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d90c      	bls.n	8003aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b8      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	494d      	ldr	r1, [pc, #308]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e067      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4934      	ldr	r1, [pc, #208]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fe fab2 	bl	80020c8 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fe faae 	bl	80020c8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e04f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d20c      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e032      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4916      	ldr	r1, [pc, #88]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be2:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf6:	f000 f821 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	5cd3      	ldrb	r3, [r2, r3]
 8003c0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fa12 	bl	8002040 <HAL_InitTick>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	080064b0 	.word	0x080064b0
 8003c34:	20000004 	.word	0x20000004
 8003c38:	20000008 	.word	0x20000008

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c52:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d007      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x32>
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d008      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0x38>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 808d 	bne.w	8003d82 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b4b      	ldr	r3, [pc, #300]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003c6a:	60bb      	str	r3, [r7, #8]
       break;
 8003c6c:	e08c      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c6e:	4b4b      	ldr	r3, [pc, #300]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003c70:	60bb      	str	r3, [r7, #8]
      break;
 8003c72:	e089      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c74:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c7e:	4b45      	ldr	r3, [pc, #276]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d023      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8a:	4b42      	ldr	r3, [pc, #264]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	099b      	lsrs	r3, r3, #6
 8003c90:	f04f 0400 	mov.w	r4, #0
 8003c94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	ea03 0501 	and.w	r5, r3, r1
 8003ca0:	ea04 0602 	and.w	r6, r4, r2
 8003ca4:	4a3d      	ldr	r2, [pc, #244]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003ca6:	fb02 f106 	mul.w	r1, r2, r6
 8003caa:	2200      	movs	r2, #0
 8003cac:	fb02 f205 	mul.w	r2, r2, r5
 8003cb0:	440a      	add	r2, r1
 8003cb2:	493a      	ldr	r1, [pc, #232]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003cb4:	fba5 0101 	umull	r0, r1, r5, r1
 8003cb8:	1853      	adds	r3, r2, r1
 8003cba:	4619      	mov	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f04f 0400 	mov.w	r4, #0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4623      	mov	r3, r4
 8003cc6:	f7fc fad3 	bl	8000270 <__aeabi_uldivmod>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	460c      	mov	r4, r1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e049      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd2:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	099b      	lsrs	r3, r3, #6
 8003cd8:	f04f 0400 	mov.w	r4, #0
 8003cdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	ea03 0501 	and.w	r5, r3, r1
 8003ce8:	ea04 0602 	and.w	r6, r4, r2
 8003cec:	4629      	mov	r1, r5
 8003cee:	4632      	mov	r2, r6
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	f04f 0400 	mov.w	r4, #0
 8003cf8:	0154      	lsls	r4, r2, #5
 8003cfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cfe:	014b      	lsls	r3, r1, #5
 8003d00:	4619      	mov	r1, r3
 8003d02:	4622      	mov	r2, r4
 8003d04:	1b49      	subs	r1, r1, r5
 8003d06:	eb62 0206 	sbc.w	r2, r2, r6
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	f04f 0400 	mov.w	r4, #0
 8003d12:	0194      	lsls	r4, r2, #6
 8003d14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d18:	018b      	lsls	r3, r1, #6
 8003d1a:	1a5b      	subs	r3, r3, r1
 8003d1c:	eb64 0402 	sbc.w	r4, r4, r2
 8003d20:	f04f 0100 	mov.w	r1, #0
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	00e2      	lsls	r2, r4, #3
 8003d2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d2e:	00d9      	lsls	r1, r3, #3
 8003d30:	460b      	mov	r3, r1
 8003d32:	4614      	mov	r4, r2
 8003d34:	195b      	adds	r3, r3, r5
 8003d36:	eb44 0406 	adc.w	r4, r4, r6
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	02a2      	lsls	r2, r4, #10
 8003d44:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d48:	0299      	lsls	r1, r3, #10
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	4621      	mov	r1, r4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f04f 0400 	mov.w	r4, #0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	f7fc fa88 	bl	8000270 <__aeabi_uldivmod>
 8003d60:	4603      	mov	r3, r0
 8003d62:	460c      	mov	r4, r1
 8003d64:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	3301      	adds	r3, #1
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	60bb      	str	r3, [r7, #8]
      break;
 8003d80:	e002      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d84:	60bb      	str	r3, [r7, #8]
      break;
 8003d86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d88:	68bb      	ldr	r3, [r7, #8]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800
 8003d98:	00f42400 	.word	0x00f42400
 8003d9c:	017d7840 	.word	0x017d7840

08003da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000004 	.word	0x20000004

08003db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dbc:	f7ff fff0 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4601      	mov	r1, r0
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0a9b      	lsrs	r3, r3, #10
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	080064c0 	.word	0x080064c0

08003de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003de4:	f7ff ffdc 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003de8:	4601      	mov	r1, r0
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0b5b      	lsrs	r3, r3, #13
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4a03      	ldr	r2, [pc, #12]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df6:	5cd3      	ldrb	r3, [r2, r3]
 8003df8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40023800 	.word	0x40023800
 8003e04:	080064c0 	.word	0x080064c0

08003e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e01d      	b.n	8003e56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd fea0 	bl	8001b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 fa8c 	bl	8004364 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0201 	orr.w	r2, r2, #1
 8003e74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d007      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e01d      	b.n	8003ef4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fd fe2f 	bl	8001b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f000 fa3d 	bl	8004364 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fc78 	bl	8004804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <HAL_TIM_PWM_Start+0x74>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_TIM_PWM_Start+0x2c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <HAL_TIM_PWM_Start+0x78>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_TIM_PWM_Start+0x30>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_TIM_PWM_Start+0x32>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b06      	cmp	r3, #6
 8003f52:	d007      	beq.n	8003f64 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40010400 	.word	0x40010400

08003f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0202 	mvn.w	r2, #2
 8003fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f9b4 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f9a6 	bl	8004314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f9b7 	bl	800433c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d122      	bne.n	8004028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d11b      	bne.n	8004028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0204 	mvn.w	r2, #4
 8003ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f98a 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f97c 	bl	8004314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f98d 	bl	800433c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b08      	cmp	r3, #8
 8004034:	d122      	bne.n	800407c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d11b      	bne.n	800407c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0208 	mvn.w	r2, #8
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2204      	movs	r2, #4
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f960 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f952 	bl	8004314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f963 	bl	800433c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b10      	cmp	r3, #16
 8004088:	d122      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d11b      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0210 	mvn.w	r2, #16
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2208      	movs	r2, #8
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f936 	bl	8004328 <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f928 	bl	8004314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f939 	bl	800433c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10e      	bne.n	80040fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0201 	mvn.w	r2, #1
 80040f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc fa56 	bl	80005a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b80      	cmp	r3, #128	; 0x80
 8004108:	d10e      	bne.n	8004128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d107      	bne.n	8004128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fc1a 	bl	800495c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b40      	cmp	r3, #64	; 0x40
 8004134:	d10e      	bne.n	8004154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d107      	bne.n	8004154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8fe 	bl	8004350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b20      	cmp	r3, #32
 8004160:	d10e      	bne.n	8004180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b20      	cmp	r3, #32
 800416e:	d107      	bne.n	8004180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0220 	mvn.w	r2, #32
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fbe4 	bl	8004948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800419e:	2302      	movs	r3, #2
 80041a0:	e0b4      	b.n	800430c <HAL_TIM_PWM_ConfigChannel+0x184>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b0c      	cmp	r3, #12
 80041b6:	f200 809f 	bhi.w	80042f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080041f5 	.word	0x080041f5
 80041c4:	080042f9 	.word	0x080042f9
 80041c8:	080042f9 	.word	0x080042f9
 80041cc:	080042f9 	.word	0x080042f9
 80041d0:	08004235 	.word	0x08004235
 80041d4:	080042f9 	.word	0x080042f9
 80041d8:	080042f9 	.word	0x080042f9
 80041dc:	080042f9 	.word	0x080042f9
 80041e0:	08004277 	.word	0x08004277
 80041e4:	080042f9 	.word	0x080042f9
 80041e8:	080042f9 	.word	0x080042f9
 80041ec:	080042f9 	.word	0x080042f9
 80041f0:	080042b7 	.word	0x080042b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f952 	bl	80044a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0208 	orr.w	r2, r2, #8
 800420e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0204 	bic.w	r2, r2, #4
 800421e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6999      	ldr	r1, [r3, #24]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	619a      	str	r2, [r3, #24]
      break;
 8004232:	e062      	b.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f9a2 	bl	8004584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800424e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6999      	ldr	r1, [r3, #24]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	021a      	lsls	r2, r3, #8
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	619a      	str	r2, [r3, #24]
      break;
 8004274:	e041      	b.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 f9f7 	bl	8004670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0208 	orr.w	r2, r2, #8
 8004290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0204 	bic.w	r2, r2, #4
 80042a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69d9      	ldr	r1, [r3, #28]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	61da      	str	r2, [r3, #28]
      break;
 80042b4:	e021      	b.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fa4b 	bl	8004758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69d9      	ldr	r1, [r3, #28]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	021a      	lsls	r2, r3, #8
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	61da      	str	r2, [r3, #28]
      break;
 80042f6:	e000      	b.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80042f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a40      	ldr	r2, [pc, #256]	; (8004478 <TIM_Base_SetConfig+0x114>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d013      	beq.n	80043a4 <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004382:	d00f      	beq.n	80043a4 <TIM_Base_SetConfig+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a3d      	ldr	r2, [pc, #244]	; (800447c <TIM_Base_SetConfig+0x118>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00b      	beq.n	80043a4 <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a3c      	ldr	r2, [pc, #240]	; (8004480 <TIM_Base_SetConfig+0x11c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d007      	beq.n	80043a4 <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3b      	ldr	r2, [pc, #236]	; (8004484 <TIM_Base_SetConfig+0x120>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d003      	beq.n	80043a4 <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3a      	ldr	r2, [pc, #232]	; (8004488 <TIM_Base_SetConfig+0x124>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d108      	bne.n	80043b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2f      	ldr	r2, [pc, #188]	; (8004478 <TIM_Base_SetConfig+0x114>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d02b      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c4:	d027      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2c      	ldr	r2, [pc, #176]	; (800447c <TIM_Base_SetConfig+0x118>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d023      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a2b      	ldr	r2, [pc, #172]	; (8004480 <TIM_Base_SetConfig+0x11c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01f      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <TIM_Base_SetConfig+0x120>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01b      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a29      	ldr	r2, [pc, #164]	; (8004488 <TIM_Base_SetConfig+0x124>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d017      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a28      	ldr	r2, [pc, #160]	; (800448c <TIM_Base_SetConfig+0x128>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a27      	ldr	r2, [pc, #156]	; (8004490 <TIM_Base_SetConfig+0x12c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00f      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a26      	ldr	r2, [pc, #152]	; (8004494 <TIM_Base_SetConfig+0x130>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00b      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a25      	ldr	r2, [pc, #148]	; (8004498 <TIM_Base_SetConfig+0x134>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a24      	ldr	r2, [pc, #144]	; (800449c <TIM_Base_SetConfig+0x138>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a23      	ldr	r2, [pc, #140]	; (80044a0 <TIM_Base_SetConfig+0x13c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d108      	bne.n	8004428 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <TIM_Base_SetConfig+0x114>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_Base_SetConfig+0xf8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a0c      	ldr	r2, [pc, #48]	; (8004488 <TIM_Base_SetConfig+0x124>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d103      	bne.n	8004464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	615a      	str	r2, [r3, #20]
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40010400 	.word	0x40010400
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400
 8004494:	40014800 	.word	0x40014800
 8004498:	40001800 	.word	0x40001800
 800449c:	40001c00 	.word	0x40001c00
 80044a0:	40002000 	.word	0x40002000

080044a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f023 0302 	bic.w	r3, r3, #2
 80044ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a20      	ldr	r2, [pc, #128]	; (800457c <TIM_OC1_SetConfig+0xd8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_OC1_SetConfig+0x64>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <TIM_OC1_SetConfig+0xdc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d10c      	bne.n	8004522 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f023 0308 	bic.w	r3, r3, #8
 800450e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f023 0304 	bic.w	r3, r3, #4
 8004520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a15      	ldr	r2, [pc, #84]	; (800457c <TIM_OC1_SetConfig+0xd8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_OC1_SetConfig+0x8e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a14      	ldr	r2, [pc, #80]	; (8004580 <TIM_OC1_SetConfig+0xdc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d111      	bne.n	8004556 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40010000 	.word	0x40010000
 8004580:	40010400 	.word	0x40010400

08004584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f023 0210 	bic.w	r2, r3, #16
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f023 0320 	bic.w	r3, r3, #32
 80045ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a22      	ldr	r2, [pc, #136]	; (8004668 <TIM_OC2_SetConfig+0xe4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d003      	beq.n	80045ec <TIM_OC2_SetConfig+0x68>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a21      	ldr	r2, [pc, #132]	; (800466c <TIM_OC2_SetConfig+0xe8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d10d      	bne.n	8004608 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004606:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a17      	ldr	r2, [pc, #92]	; (8004668 <TIM_OC2_SetConfig+0xe4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_OC2_SetConfig+0x94>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a16      	ldr	r2, [pc, #88]	; (800466c <TIM_OC2_SetConfig+0xe8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d113      	bne.n	8004640 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800461e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000
 800466c:	40010400 	.word	0x40010400

08004670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a21      	ldr	r2, [pc, #132]	; (8004750 <TIM_OC3_SetConfig+0xe0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d003      	beq.n	80046d6 <TIM_OC3_SetConfig+0x66>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a20      	ldr	r2, [pc, #128]	; (8004754 <TIM_OC3_SetConfig+0xe4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d10d      	bne.n	80046f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a16      	ldr	r2, [pc, #88]	; (8004750 <TIM_OC3_SetConfig+0xe0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_OC3_SetConfig+0x92>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <TIM_OC3_SetConfig+0xe4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d113      	bne.n	800472a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	40010000 	.word	0x40010000
 8004754:	40010400 	.word	0x40010400

08004758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	031b      	lsls	r3, r3, #12
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a12      	ldr	r2, [pc, #72]	; (80047fc <TIM_OC4_SetConfig+0xa4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_OC4_SetConfig+0x68>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a11      	ldr	r2, [pc, #68]	; (8004800 <TIM_OC4_SetConfig+0xa8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d109      	bne.n	80047d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40010000 	.word	0x40010000
 8004800:	40010400 	.word	0x40010400

08004804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2201      	movs	r2, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	43db      	mvns	r3, r3
 8004826:	401a      	ands	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	fa01 f303 	lsl.w	r3, r1, r3
 800483c:	431a      	orrs	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004864:	2302      	movs	r3, #2
 8004866:	e05a      	b.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d022      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d01d      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d018      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a18      	ldr	r2, [pc, #96]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d009      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d10c      	bne.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4313      	orrs	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40010400 	.word	0x40010400
 8004940:	40014000 	.word	0x40014000
 8004944:	40001800 	.word	0x40001800

08004948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e03f      	b.n	8004a02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fd f9a8 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	; 0x24
 80049a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f90b 	bl	8004bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	af02      	add	r7, sp, #8
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	f040 8083 	bne.w	8004b32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_UART_Transmit+0x2e>
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e07b      	b.n	8004b34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Transmit+0x40>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e074      	b.n	8004b34 <HAL_UART_Transmit+0x12a>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2221      	movs	r2, #33	; 0x21
 8004a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a60:	f7fd fb32 	bl	80020c8 <HAL_GetTick>
 8004a64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	88fa      	ldrh	r2, [r7, #6]
 8004a70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004a7a:	e042      	b.n	8004b02 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a92:	d122      	bne.n	8004ada <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2180      	movs	r1, #128	; 0x80
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f84c 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e042      	b.n	8004b34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	3302      	adds	r3, #2
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	e017      	b.n	8004b02 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	e013      	b.n	8004b02 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2180      	movs	r1, #128	; 0x80
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f829 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e01f      	b.n	8004b34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	60ba      	str	r2, [r7, #8]
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1b7      	bne.n	8004a7c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2200      	movs	r2, #0
 8004b14:	2140      	movs	r1, #64	; 0x40
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f810 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e006      	b.n	8004b34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004b32:	2302      	movs	r3, #2
  }
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b4c:	e02c      	b.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d028      	beq.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b5c:	f7fd fab4 	bl	80020c8 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d21d      	bcs.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e00f      	b.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d0c3      	beq.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c12:	f023 030c 	bic.w	r3, r3, #12
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c3e:	f040 818b 	bne.w	8004f58 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4ac1      	ldr	r2, [pc, #772]	; (8004f4c <UART_SetConfig+0x37c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d005      	beq.n	8004c58 <UART_SetConfig+0x88>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4abf      	ldr	r2, [pc, #764]	; (8004f50 <UART_SetConfig+0x380>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	f040 80bd 	bne.w	8004dd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c58:	f7ff f8c2 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8004c5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	461d      	mov	r5, r3
 8004c62:	f04f 0600 	mov.w	r6, #0
 8004c66:	46a8      	mov	r8, r5
 8004c68:	46b1      	mov	r9, r6
 8004c6a:	eb18 0308 	adds.w	r3, r8, r8
 8004c6e:	eb49 0409 	adc.w	r4, r9, r9
 8004c72:	4698      	mov	r8, r3
 8004c74:	46a1      	mov	r9, r4
 8004c76:	eb18 0805 	adds.w	r8, r8, r5
 8004c7a:	eb49 0906 	adc.w	r9, r9, r6
 8004c7e:	f04f 0100 	mov.w	r1, #0
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c92:	4688      	mov	r8, r1
 8004c94:	4691      	mov	r9, r2
 8004c96:	eb18 0005 	adds.w	r0, r8, r5
 8004c9a:	eb49 0106 	adc.w	r1, r9, r6
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	f04f 0600 	mov.w	r6, #0
 8004ca8:	196b      	adds	r3, r5, r5
 8004caa:	eb46 0406 	adc.w	r4, r6, r6
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4623      	mov	r3, r4
 8004cb2:	f7fb fadd 	bl	8000270 <__aeabi_uldivmod>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	460c      	mov	r4, r1
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4ba5      	ldr	r3, [pc, #660]	; (8004f54 <UART_SetConfig+0x384>)
 8004cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	461d      	mov	r5, r3
 8004ccc:	f04f 0600 	mov.w	r6, #0
 8004cd0:	46a9      	mov	r9, r5
 8004cd2:	46b2      	mov	sl, r6
 8004cd4:	eb19 0309 	adds.w	r3, r9, r9
 8004cd8:	eb4a 040a 	adc.w	r4, sl, sl
 8004cdc:	4699      	mov	r9, r3
 8004cde:	46a2      	mov	sl, r4
 8004ce0:	eb19 0905 	adds.w	r9, r9, r5
 8004ce4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ce8:	f04f 0100 	mov.w	r1, #0
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cfc:	4689      	mov	r9, r1
 8004cfe:	4692      	mov	sl, r2
 8004d00:	eb19 0005 	adds.w	r0, r9, r5
 8004d04:	eb4a 0106 	adc.w	r1, sl, r6
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	461d      	mov	r5, r3
 8004d0e:	f04f 0600 	mov.w	r6, #0
 8004d12:	196b      	adds	r3, r5, r5
 8004d14:	eb46 0406 	adc.w	r4, r6, r6
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	f7fb faa8 	bl	8000270 <__aeabi_uldivmod>
 8004d20:	4603      	mov	r3, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	461a      	mov	r2, r3
 8004d26:	4b8b      	ldr	r3, [pc, #556]	; (8004f54 <UART_SetConfig+0x384>)
 8004d28:	fba3 1302 	umull	r1, r3, r3, r2
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	2164      	movs	r1, #100	; 0x64
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	3332      	adds	r3, #50	; 0x32
 8004d3a:	4a86      	ldr	r2, [pc, #536]	; (8004f54 <UART_SetConfig+0x384>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d48:	4498      	add	r8, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	461d      	mov	r5, r3
 8004d4e:	f04f 0600 	mov.w	r6, #0
 8004d52:	46a9      	mov	r9, r5
 8004d54:	46b2      	mov	sl, r6
 8004d56:	eb19 0309 	adds.w	r3, r9, r9
 8004d5a:	eb4a 040a 	adc.w	r4, sl, sl
 8004d5e:	4699      	mov	r9, r3
 8004d60:	46a2      	mov	sl, r4
 8004d62:	eb19 0905 	adds.w	r9, r9, r5
 8004d66:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d6a:	f04f 0100 	mov.w	r1, #0
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d7e:	4689      	mov	r9, r1
 8004d80:	4692      	mov	sl, r2
 8004d82:	eb19 0005 	adds.w	r0, r9, r5
 8004d86:	eb4a 0106 	adc.w	r1, sl, r6
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	461d      	mov	r5, r3
 8004d90:	f04f 0600 	mov.w	r6, #0
 8004d94:	196b      	adds	r3, r5, r5
 8004d96:	eb46 0406 	adc.w	r4, r6, r6
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4623      	mov	r3, r4
 8004d9e:	f7fb fa67 	bl	8000270 <__aeabi_uldivmod>
 8004da2:	4603      	mov	r3, r0
 8004da4:	460c      	mov	r4, r1
 8004da6:	461a      	mov	r2, r3
 8004da8:	4b6a      	ldr	r3, [pc, #424]	; (8004f54 <UART_SetConfig+0x384>)
 8004daa:	fba3 1302 	umull	r1, r3, r3, r2
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2164      	movs	r1, #100	; 0x64
 8004db2:	fb01 f303 	mul.w	r3, r1, r3
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	3332      	adds	r3, #50	; 0x32
 8004dbc:	4a65      	ldr	r2, [pc, #404]	; (8004f54 <UART_SetConfig+0x384>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	f003 0207 	and.w	r2, r3, #7
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4442      	add	r2, r8
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	e26f      	b.n	80052b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dd2:	f7fe fff1 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8004dd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	461d      	mov	r5, r3
 8004ddc:	f04f 0600 	mov.w	r6, #0
 8004de0:	46a8      	mov	r8, r5
 8004de2:	46b1      	mov	r9, r6
 8004de4:	eb18 0308 	adds.w	r3, r8, r8
 8004de8:	eb49 0409 	adc.w	r4, r9, r9
 8004dec:	4698      	mov	r8, r3
 8004dee:	46a1      	mov	r9, r4
 8004df0:	eb18 0805 	adds.w	r8, r8, r5
 8004df4:	eb49 0906 	adc.w	r9, r9, r6
 8004df8:	f04f 0100 	mov.w	r1, #0
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e0c:	4688      	mov	r8, r1
 8004e0e:	4691      	mov	r9, r2
 8004e10:	eb18 0005 	adds.w	r0, r8, r5
 8004e14:	eb49 0106 	adc.w	r1, r9, r6
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	461d      	mov	r5, r3
 8004e1e:	f04f 0600 	mov.w	r6, #0
 8004e22:	196b      	adds	r3, r5, r5
 8004e24:	eb46 0406 	adc.w	r4, r6, r6
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	f7fb fa20 	bl	8000270 <__aeabi_uldivmod>
 8004e30:	4603      	mov	r3, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	461a      	mov	r2, r3
 8004e36:	4b47      	ldr	r3, [pc, #284]	; (8004f54 <UART_SetConfig+0x384>)
 8004e38:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	461d      	mov	r5, r3
 8004e46:	f04f 0600 	mov.w	r6, #0
 8004e4a:	46a9      	mov	r9, r5
 8004e4c:	46b2      	mov	sl, r6
 8004e4e:	eb19 0309 	adds.w	r3, r9, r9
 8004e52:	eb4a 040a 	adc.w	r4, sl, sl
 8004e56:	4699      	mov	r9, r3
 8004e58:	46a2      	mov	sl, r4
 8004e5a:	eb19 0905 	adds.w	r9, r9, r5
 8004e5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e62:	f04f 0100 	mov.w	r1, #0
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e76:	4689      	mov	r9, r1
 8004e78:	4692      	mov	sl, r2
 8004e7a:	eb19 0005 	adds.w	r0, r9, r5
 8004e7e:	eb4a 0106 	adc.w	r1, sl, r6
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	461d      	mov	r5, r3
 8004e88:	f04f 0600 	mov.w	r6, #0
 8004e8c:	196b      	adds	r3, r5, r5
 8004e8e:	eb46 0406 	adc.w	r4, r6, r6
 8004e92:	461a      	mov	r2, r3
 8004e94:	4623      	mov	r3, r4
 8004e96:	f7fb f9eb 	bl	8000270 <__aeabi_uldivmod>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	4b2c      	ldr	r3, [pc, #176]	; (8004f54 <UART_SetConfig+0x384>)
 8004ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2164      	movs	r1, #100	; 0x64
 8004eaa:	fb01 f303 	mul.w	r3, r1, r3
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	3332      	adds	r3, #50	; 0x32
 8004eb4:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <UART_SetConfig+0x384>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ec2:	4498      	add	r8, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	461d      	mov	r5, r3
 8004ec8:	f04f 0600 	mov.w	r6, #0
 8004ecc:	46a9      	mov	r9, r5
 8004ece:	46b2      	mov	sl, r6
 8004ed0:	eb19 0309 	adds.w	r3, r9, r9
 8004ed4:	eb4a 040a 	adc.w	r4, sl, sl
 8004ed8:	4699      	mov	r9, r3
 8004eda:	46a2      	mov	sl, r4
 8004edc:	eb19 0905 	adds.w	r9, r9, r5
 8004ee0:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ee4:	f04f 0100 	mov.w	r1, #0
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ef4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ef8:	4689      	mov	r9, r1
 8004efa:	4692      	mov	sl, r2
 8004efc:	eb19 0005 	adds.w	r0, r9, r5
 8004f00:	eb4a 0106 	adc.w	r1, sl, r6
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	461d      	mov	r5, r3
 8004f0a:	f04f 0600 	mov.w	r6, #0
 8004f0e:	196b      	adds	r3, r5, r5
 8004f10:	eb46 0406 	adc.w	r4, r6, r6
 8004f14:	461a      	mov	r2, r3
 8004f16:	4623      	mov	r3, r4
 8004f18:	f7fb f9aa 	bl	8000270 <__aeabi_uldivmod>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	460c      	mov	r4, r1
 8004f20:	461a      	mov	r2, r3
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <UART_SetConfig+0x384>)
 8004f24:	fba3 1302 	umull	r1, r3, r3, r2
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	2164      	movs	r1, #100	; 0x64
 8004f2c:	fb01 f303 	mul.w	r3, r1, r3
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	3332      	adds	r3, #50	; 0x32
 8004f36:	4a07      	ldr	r2, [pc, #28]	; (8004f54 <UART_SetConfig+0x384>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	f003 0207 	and.w	r2, r3, #7
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4442      	add	r2, r8
 8004f48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004f4a:	e1b2      	b.n	80052b2 <UART_SetConfig+0x6e2>
 8004f4c:	40011000 	.word	0x40011000
 8004f50:	40011400 	.word	0x40011400
 8004f54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4ad7      	ldr	r2, [pc, #860]	; (80052bc <UART_SetConfig+0x6ec>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d005      	beq.n	8004f6e <UART_SetConfig+0x39e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4ad6      	ldr	r2, [pc, #856]	; (80052c0 <UART_SetConfig+0x6f0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	f040 80d1 	bne.w	8005110 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f6e:	f7fe ff37 	bl	8003de0 <HAL_RCC_GetPCLK2Freq>
 8004f72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	469a      	mov	sl, r3
 8004f78:	f04f 0b00 	mov.w	fp, #0
 8004f7c:	46d0      	mov	r8, sl
 8004f7e:	46d9      	mov	r9, fp
 8004f80:	eb18 0308 	adds.w	r3, r8, r8
 8004f84:	eb49 0409 	adc.w	r4, r9, r9
 8004f88:	4698      	mov	r8, r3
 8004f8a:	46a1      	mov	r9, r4
 8004f8c:	eb18 080a 	adds.w	r8, r8, sl
 8004f90:	eb49 090b 	adc.w	r9, r9, fp
 8004f94:	f04f 0100 	mov.w	r1, #0
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004fa0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fa4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fa8:	4688      	mov	r8, r1
 8004faa:	4691      	mov	r9, r2
 8004fac:	eb1a 0508 	adds.w	r5, sl, r8
 8004fb0:	eb4b 0609 	adc.w	r6, fp, r9
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	f04f 0400 	mov.w	r4, #0
 8004fc6:	0094      	lsls	r4, r2, #2
 8004fc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fcc:	008b      	lsls	r3, r1, #2
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4623      	mov	r3, r4
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	4631      	mov	r1, r6
 8004fd6:	f7fb f94b 	bl	8000270 <__aeabi_uldivmod>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	460c      	mov	r4, r1
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4bb8      	ldr	r3, [pc, #736]	; (80052c4 <UART_SetConfig+0x6f4>)
 8004fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	469b      	mov	fp, r3
 8004ff0:	f04f 0c00 	mov.w	ip, #0
 8004ff4:	46d9      	mov	r9, fp
 8004ff6:	46e2      	mov	sl, ip
 8004ff8:	eb19 0309 	adds.w	r3, r9, r9
 8004ffc:	eb4a 040a 	adc.w	r4, sl, sl
 8005000:	4699      	mov	r9, r3
 8005002:	46a2      	mov	sl, r4
 8005004:	eb19 090b 	adds.w	r9, r9, fp
 8005008:	eb4a 0a0c 	adc.w	sl, sl, ip
 800500c:	f04f 0100 	mov.w	r1, #0
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005018:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800501c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005020:	4689      	mov	r9, r1
 8005022:	4692      	mov	sl, r2
 8005024:	eb1b 0509 	adds.w	r5, fp, r9
 8005028:	eb4c 060a 	adc.w	r6, ip, sl
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	4619      	mov	r1, r3
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	f04f 0400 	mov.w	r4, #0
 800503e:	0094      	lsls	r4, r2, #2
 8005040:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005044:	008b      	lsls	r3, r1, #2
 8005046:	461a      	mov	r2, r3
 8005048:	4623      	mov	r3, r4
 800504a:	4628      	mov	r0, r5
 800504c:	4631      	mov	r1, r6
 800504e:	f7fb f90f 	bl	8000270 <__aeabi_uldivmod>
 8005052:	4603      	mov	r3, r0
 8005054:	460c      	mov	r4, r1
 8005056:	461a      	mov	r2, r3
 8005058:	4b9a      	ldr	r3, [pc, #616]	; (80052c4 <UART_SetConfig+0x6f4>)
 800505a:	fba3 1302 	umull	r1, r3, r3, r2
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	2164      	movs	r1, #100	; 0x64
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	3332      	adds	r3, #50	; 0x32
 800506c:	4a95      	ldr	r2, [pc, #596]	; (80052c4 <UART_SetConfig+0x6f4>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005078:	4498      	add	r8, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	469b      	mov	fp, r3
 800507e:	f04f 0c00 	mov.w	ip, #0
 8005082:	46d9      	mov	r9, fp
 8005084:	46e2      	mov	sl, ip
 8005086:	eb19 0309 	adds.w	r3, r9, r9
 800508a:	eb4a 040a 	adc.w	r4, sl, sl
 800508e:	4699      	mov	r9, r3
 8005090:	46a2      	mov	sl, r4
 8005092:	eb19 090b 	adds.w	r9, r9, fp
 8005096:	eb4a 0a0c 	adc.w	sl, sl, ip
 800509a:	f04f 0100 	mov.w	r1, #0
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050ae:	4689      	mov	r9, r1
 80050b0:	4692      	mov	sl, r2
 80050b2:	eb1b 0509 	adds.w	r5, fp, r9
 80050b6:	eb4c 060a 	adc.w	r6, ip, sl
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4619      	mov	r1, r3
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	f04f 0400 	mov.w	r4, #0
 80050cc:	0094      	lsls	r4, r2, #2
 80050ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050d2:	008b      	lsls	r3, r1, #2
 80050d4:	461a      	mov	r2, r3
 80050d6:	4623      	mov	r3, r4
 80050d8:	4628      	mov	r0, r5
 80050da:	4631      	mov	r1, r6
 80050dc:	f7fb f8c8 	bl	8000270 <__aeabi_uldivmod>
 80050e0:	4603      	mov	r3, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	461a      	mov	r2, r3
 80050e6:	4b77      	ldr	r3, [pc, #476]	; (80052c4 <UART_SetConfig+0x6f4>)
 80050e8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	2164      	movs	r1, #100	; 0x64
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	3332      	adds	r3, #50	; 0x32
 80050fa:	4a72      	ldr	r2, [pc, #456]	; (80052c4 <UART_SetConfig+0x6f4>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	f003 020f 	and.w	r2, r3, #15
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4442      	add	r2, r8
 800510c:	609a      	str	r2, [r3, #8]
 800510e:	e0d0      	b.n	80052b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005110:	f7fe fe52 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8005114:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	469a      	mov	sl, r3
 800511a:	f04f 0b00 	mov.w	fp, #0
 800511e:	46d0      	mov	r8, sl
 8005120:	46d9      	mov	r9, fp
 8005122:	eb18 0308 	adds.w	r3, r8, r8
 8005126:	eb49 0409 	adc.w	r4, r9, r9
 800512a:	4698      	mov	r8, r3
 800512c:	46a1      	mov	r9, r4
 800512e:	eb18 080a 	adds.w	r8, r8, sl
 8005132:	eb49 090b 	adc.w	r9, r9, fp
 8005136:	f04f 0100 	mov.w	r1, #0
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005142:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005146:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800514a:	4688      	mov	r8, r1
 800514c:	4691      	mov	r9, r2
 800514e:	eb1a 0508 	adds.w	r5, sl, r8
 8005152:	eb4b 0609 	adc.w	r6, fp, r9
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	4619      	mov	r1, r3
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	f04f 0400 	mov.w	r4, #0
 8005168:	0094      	lsls	r4, r2, #2
 800516a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800516e:	008b      	lsls	r3, r1, #2
 8005170:	461a      	mov	r2, r3
 8005172:	4623      	mov	r3, r4
 8005174:	4628      	mov	r0, r5
 8005176:	4631      	mov	r1, r6
 8005178:	f7fb f87a 	bl	8000270 <__aeabi_uldivmod>
 800517c:	4603      	mov	r3, r0
 800517e:	460c      	mov	r4, r1
 8005180:	461a      	mov	r2, r3
 8005182:	4b50      	ldr	r3, [pc, #320]	; (80052c4 <UART_SetConfig+0x6f4>)
 8005184:	fba3 2302 	umull	r2, r3, r3, r2
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	469b      	mov	fp, r3
 8005192:	f04f 0c00 	mov.w	ip, #0
 8005196:	46d9      	mov	r9, fp
 8005198:	46e2      	mov	sl, ip
 800519a:	eb19 0309 	adds.w	r3, r9, r9
 800519e:	eb4a 040a 	adc.w	r4, sl, sl
 80051a2:	4699      	mov	r9, r3
 80051a4:	46a2      	mov	sl, r4
 80051a6:	eb19 090b 	adds.w	r9, r9, fp
 80051aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051ae:	f04f 0100 	mov.w	r1, #0
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051c2:	4689      	mov	r9, r1
 80051c4:	4692      	mov	sl, r2
 80051c6:	eb1b 0509 	adds.w	r5, fp, r9
 80051ca:	eb4c 060a 	adc.w	r6, ip, sl
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4619      	mov	r1, r3
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	f04f 0400 	mov.w	r4, #0
 80051e0:	0094      	lsls	r4, r2, #2
 80051e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051e6:	008b      	lsls	r3, r1, #2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4623      	mov	r3, r4
 80051ec:	4628      	mov	r0, r5
 80051ee:	4631      	mov	r1, r6
 80051f0:	f7fb f83e 	bl	8000270 <__aeabi_uldivmod>
 80051f4:	4603      	mov	r3, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	461a      	mov	r2, r3
 80051fa:	4b32      	ldr	r3, [pc, #200]	; (80052c4 <UART_SetConfig+0x6f4>)
 80051fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	2164      	movs	r1, #100	; 0x64
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	3332      	adds	r3, #50	; 0x32
 800520e:	4a2d      	ldr	r2, [pc, #180]	; (80052c4 <UART_SetConfig+0x6f4>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521a:	4498      	add	r8, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	469b      	mov	fp, r3
 8005220:	f04f 0c00 	mov.w	ip, #0
 8005224:	46d9      	mov	r9, fp
 8005226:	46e2      	mov	sl, ip
 8005228:	eb19 0309 	adds.w	r3, r9, r9
 800522c:	eb4a 040a 	adc.w	r4, sl, sl
 8005230:	4699      	mov	r9, r3
 8005232:	46a2      	mov	sl, r4
 8005234:	eb19 090b 	adds.w	r9, r9, fp
 8005238:	eb4a 0a0c 	adc.w	sl, sl, ip
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005248:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800524c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005250:	4689      	mov	r9, r1
 8005252:	4692      	mov	sl, r2
 8005254:	eb1b 0509 	adds.w	r5, fp, r9
 8005258:	eb4c 060a 	adc.w	r6, ip, sl
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	4619      	mov	r1, r3
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	f04f 0400 	mov.w	r4, #0
 800526e:	0094      	lsls	r4, r2, #2
 8005270:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005274:	008b      	lsls	r3, r1, #2
 8005276:	461a      	mov	r2, r3
 8005278:	4623      	mov	r3, r4
 800527a:	4628      	mov	r0, r5
 800527c:	4631      	mov	r1, r6
 800527e:	f7fa fff7 	bl	8000270 <__aeabi_uldivmod>
 8005282:	4603      	mov	r3, r0
 8005284:	460c      	mov	r4, r1
 8005286:	461a      	mov	r2, r3
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <UART_SetConfig+0x6f4>)
 800528a:	fba3 1302 	umull	r1, r3, r3, r2
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	2164      	movs	r1, #100	; 0x64
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	3332      	adds	r3, #50	; 0x32
 800529c:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <UART_SetConfig+0x6f4>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	f003 020f 	and.w	r2, r3, #15
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4442      	add	r2, r8
 80052ae:	609a      	str	r2, [r3, #8]
}
 80052b0:	e7ff      	b.n	80052b2 <UART_SetConfig+0x6e2>
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052bc:	40011000 	.word	0x40011000
 80052c0:	40011400 	.word	0x40011400
 80052c4:	51eb851f 	.word	0x51eb851f

080052c8 <__errno>:
 80052c8:	4b01      	ldr	r3, [pc, #4]	; (80052d0 <__errno+0x8>)
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000010 	.word	0x20000010

080052d4 <__libc_init_array>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4e0d      	ldr	r6, [pc, #52]	; (800530c <__libc_init_array+0x38>)
 80052d8:	4c0d      	ldr	r4, [pc, #52]	; (8005310 <__libc_init_array+0x3c>)
 80052da:	1ba4      	subs	r4, r4, r6
 80052dc:	10a4      	asrs	r4, r4, #2
 80052de:	2500      	movs	r5, #0
 80052e0:	42a5      	cmp	r5, r4
 80052e2:	d109      	bne.n	80052f8 <__libc_init_array+0x24>
 80052e4:	4e0b      	ldr	r6, [pc, #44]	; (8005314 <__libc_init_array+0x40>)
 80052e6:	4c0c      	ldr	r4, [pc, #48]	; (8005318 <__libc_init_array+0x44>)
 80052e8:	f000 ffb2 	bl	8006250 <_init>
 80052ec:	1ba4      	subs	r4, r4, r6
 80052ee:	10a4      	asrs	r4, r4, #2
 80052f0:	2500      	movs	r5, #0
 80052f2:	42a5      	cmp	r5, r4
 80052f4:	d105      	bne.n	8005302 <__libc_init_array+0x2e>
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052fc:	4798      	blx	r3
 80052fe:	3501      	adds	r5, #1
 8005300:	e7ee      	b.n	80052e0 <__libc_init_array+0xc>
 8005302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005306:	4798      	blx	r3
 8005308:	3501      	adds	r5, #1
 800530a:	e7f2      	b.n	80052f2 <__libc_init_array+0x1e>
 800530c:	08006570 	.word	0x08006570
 8005310:	08006570 	.word	0x08006570
 8005314:	08006570 	.word	0x08006570
 8005318:	08006574 	.word	0x08006574

0800531c <memset>:
 800531c:	4402      	add	r2, r0
 800531e:	4603      	mov	r3, r0
 8005320:	4293      	cmp	r3, r2
 8005322:	d100      	bne.n	8005326 <memset+0xa>
 8005324:	4770      	bx	lr
 8005326:	f803 1b01 	strb.w	r1, [r3], #1
 800532a:	e7f9      	b.n	8005320 <memset+0x4>

0800532c <iprintf>:
 800532c:	b40f      	push	{r0, r1, r2, r3}
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <iprintf+0x2c>)
 8005330:	b513      	push	{r0, r1, r4, lr}
 8005332:	681c      	ldr	r4, [r3, #0]
 8005334:	b124      	cbz	r4, 8005340 <iprintf+0x14>
 8005336:	69a3      	ldr	r3, [r4, #24]
 8005338:	b913      	cbnz	r3, 8005340 <iprintf+0x14>
 800533a:	4620      	mov	r0, r4
 800533c:	f000 fa36 	bl	80057ac <__sinit>
 8005340:	ab05      	add	r3, sp, #20
 8005342:	9a04      	ldr	r2, [sp, #16]
 8005344:	68a1      	ldr	r1, [r4, #8]
 8005346:	9301      	str	r3, [sp, #4]
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fbef 	bl	8005b2c <_vfiprintf_r>
 800534e:	b002      	add	sp, #8
 8005350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005354:	b004      	add	sp, #16
 8005356:	4770      	bx	lr
 8005358:	20000010 	.word	0x20000010

0800535c <putchar>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4b08      	ldr	r3, [pc, #32]	; (8005380 <putchar+0x24>)
 8005360:	681c      	ldr	r4, [r3, #0]
 8005362:	4605      	mov	r5, r0
 8005364:	b124      	cbz	r4, 8005370 <putchar+0x14>
 8005366:	69a3      	ldr	r3, [r4, #24]
 8005368:	b913      	cbnz	r3, 8005370 <putchar+0x14>
 800536a:	4620      	mov	r0, r4
 800536c:	f000 fa1e 	bl	80057ac <__sinit>
 8005370:	68a2      	ldr	r2, [r4, #8]
 8005372:	4629      	mov	r1, r5
 8005374:	4620      	mov	r0, r4
 8005376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800537a:	f000 be75 	b.w	8006068 <_putc_r>
 800537e:	bf00      	nop
 8005380:	20000010 	.word	0x20000010

08005384 <_puts_r>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	460e      	mov	r6, r1
 8005388:	4605      	mov	r5, r0
 800538a:	b118      	cbz	r0, 8005394 <_puts_r+0x10>
 800538c:	6983      	ldr	r3, [r0, #24]
 800538e:	b90b      	cbnz	r3, 8005394 <_puts_r+0x10>
 8005390:	f000 fa0c 	bl	80057ac <__sinit>
 8005394:	69ab      	ldr	r3, [r5, #24]
 8005396:	68ac      	ldr	r4, [r5, #8]
 8005398:	b913      	cbnz	r3, 80053a0 <_puts_r+0x1c>
 800539a:	4628      	mov	r0, r5
 800539c:	f000 fa06 	bl	80057ac <__sinit>
 80053a0:	4b23      	ldr	r3, [pc, #140]	; (8005430 <_puts_r+0xac>)
 80053a2:	429c      	cmp	r4, r3
 80053a4:	d117      	bne.n	80053d6 <_puts_r+0x52>
 80053a6:	686c      	ldr	r4, [r5, #4]
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	071b      	lsls	r3, r3, #28
 80053ac:	d51d      	bpl.n	80053ea <_puts_r+0x66>
 80053ae:	6923      	ldr	r3, [r4, #16]
 80053b0:	b1db      	cbz	r3, 80053ea <_puts_r+0x66>
 80053b2:	3e01      	subs	r6, #1
 80053b4:	68a3      	ldr	r3, [r4, #8]
 80053b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053ba:	3b01      	subs	r3, #1
 80053bc:	60a3      	str	r3, [r4, #8]
 80053be:	b9e9      	cbnz	r1, 80053fc <_puts_r+0x78>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	da2e      	bge.n	8005422 <_puts_r+0x9e>
 80053c4:	4622      	mov	r2, r4
 80053c6:	210a      	movs	r1, #10
 80053c8:	4628      	mov	r0, r5
 80053ca:	f000 f83f 	bl	800544c <__swbuf_r>
 80053ce:	3001      	adds	r0, #1
 80053d0:	d011      	beq.n	80053f6 <_puts_r+0x72>
 80053d2:	200a      	movs	r0, #10
 80053d4:	e011      	b.n	80053fa <_puts_r+0x76>
 80053d6:	4b17      	ldr	r3, [pc, #92]	; (8005434 <_puts_r+0xb0>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	d101      	bne.n	80053e0 <_puts_r+0x5c>
 80053dc:	68ac      	ldr	r4, [r5, #8]
 80053de:	e7e3      	b.n	80053a8 <_puts_r+0x24>
 80053e0:	4b15      	ldr	r3, [pc, #84]	; (8005438 <_puts_r+0xb4>)
 80053e2:	429c      	cmp	r4, r3
 80053e4:	bf08      	it	eq
 80053e6:	68ec      	ldreq	r4, [r5, #12]
 80053e8:	e7de      	b.n	80053a8 <_puts_r+0x24>
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f87f 	bl	80054f0 <__swsetup_r>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d0dd      	beq.n	80053b2 <_puts_r+0x2e>
 80053f6:	f04f 30ff 	mov.w	r0, #4294967295
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	da04      	bge.n	800540a <_puts_r+0x86>
 8005400:	69a2      	ldr	r2, [r4, #24]
 8005402:	429a      	cmp	r2, r3
 8005404:	dc06      	bgt.n	8005414 <_puts_r+0x90>
 8005406:	290a      	cmp	r1, #10
 8005408:	d004      	beq.n	8005414 <_puts_r+0x90>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	6022      	str	r2, [r4, #0]
 8005410:	7019      	strb	r1, [r3, #0]
 8005412:	e7cf      	b.n	80053b4 <_puts_r+0x30>
 8005414:	4622      	mov	r2, r4
 8005416:	4628      	mov	r0, r5
 8005418:	f000 f818 	bl	800544c <__swbuf_r>
 800541c:	3001      	adds	r0, #1
 800541e:	d1c9      	bne.n	80053b4 <_puts_r+0x30>
 8005420:	e7e9      	b.n	80053f6 <_puts_r+0x72>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	200a      	movs	r0, #10
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	6022      	str	r2, [r4, #0]
 800542a:	7018      	strb	r0, [r3, #0]
 800542c:	e7e5      	b.n	80053fa <_puts_r+0x76>
 800542e:	bf00      	nop
 8005430:	080064f4 	.word	0x080064f4
 8005434:	08006514 	.word	0x08006514
 8005438:	080064d4 	.word	0x080064d4

0800543c <puts>:
 800543c:	4b02      	ldr	r3, [pc, #8]	; (8005448 <puts+0xc>)
 800543e:	4601      	mov	r1, r0
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	f7ff bf9f 	b.w	8005384 <_puts_r>
 8005446:	bf00      	nop
 8005448:	20000010 	.word	0x20000010

0800544c <__swbuf_r>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	460e      	mov	r6, r1
 8005450:	4614      	mov	r4, r2
 8005452:	4605      	mov	r5, r0
 8005454:	b118      	cbz	r0, 800545e <__swbuf_r+0x12>
 8005456:	6983      	ldr	r3, [r0, #24]
 8005458:	b90b      	cbnz	r3, 800545e <__swbuf_r+0x12>
 800545a:	f000 f9a7 	bl	80057ac <__sinit>
 800545e:	4b21      	ldr	r3, [pc, #132]	; (80054e4 <__swbuf_r+0x98>)
 8005460:	429c      	cmp	r4, r3
 8005462:	d12a      	bne.n	80054ba <__swbuf_r+0x6e>
 8005464:	686c      	ldr	r4, [r5, #4]
 8005466:	69a3      	ldr	r3, [r4, #24]
 8005468:	60a3      	str	r3, [r4, #8]
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	071a      	lsls	r2, r3, #28
 800546e:	d52e      	bpl.n	80054ce <__swbuf_r+0x82>
 8005470:	6923      	ldr	r3, [r4, #16]
 8005472:	b363      	cbz	r3, 80054ce <__swbuf_r+0x82>
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	6820      	ldr	r0, [r4, #0]
 8005478:	1ac0      	subs	r0, r0, r3
 800547a:	6963      	ldr	r3, [r4, #20]
 800547c:	b2f6      	uxtb	r6, r6
 800547e:	4283      	cmp	r3, r0
 8005480:	4637      	mov	r7, r6
 8005482:	dc04      	bgt.n	800548e <__swbuf_r+0x42>
 8005484:	4621      	mov	r1, r4
 8005486:	4628      	mov	r0, r5
 8005488:	f000 f926 	bl	80056d8 <_fflush_r>
 800548c:	bb28      	cbnz	r0, 80054da <__swbuf_r+0x8e>
 800548e:	68a3      	ldr	r3, [r4, #8]
 8005490:	3b01      	subs	r3, #1
 8005492:	60a3      	str	r3, [r4, #8]
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	6022      	str	r2, [r4, #0]
 800549a:	701e      	strb	r6, [r3, #0]
 800549c:	6963      	ldr	r3, [r4, #20]
 800549e:	3001      	adds	r0, #1
 80054a0:	4283      	cmp	r3, r0
 80054a2:	d004      	beq.n	80054ae <__swbuf_r+0x62>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	07db      	lsls	r3, r3, #31
 80054a8:	d519      	bpl.n	80054de <__swbuf_r+0x92>
 80054aa:	2e0a      	cmp	r6, #10
 80054ac:	d117      	bne.n	80054de <__swbuf_r+0x92>
 80054ae:	4621      	mov	r1, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 f911 	bl	80056d8 <_fflush_r>
 80054b6:	b190      	cbz	r0, 80054de <__swbuf_r+0x92>
 80054b8:	e00f      	b.n	80054da <__swbuf_r+0x8e>
 80054ba:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <__swbuf_r+0x9c>)
 80054bc:	429c      	cmp	r4, r3
 80054be:	d101      	bne.n	80054c4 <__swbuf_r+0x78>
 80054c0:	68ac      	ldr	r4, [r5, #8]
 80054c2:	e7d0      	b.n	8005466 <__swbuf_r+0x1a>
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <__swbuf_r+0xa0>)
 80054c6:	429c      	cmp	r4, r3
 80054c8:	bf08      	it	eq
 80054ca:	68ec      	ldreq	r4, [r5, #12]
 80054cc:	e7cb      	b.n	8005466 <__swbuf_r+0x1a>
 80054ce:	4621      	mov	r1, r4
 80054d0:	4628      	mov	r0, r5
 80054d2:	f000 f80d 	bl	80054f0 <__swsetup_r>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d0cc      	beq.n	8005474 <__swbuf_r+0x28>
 80054da:	f04f 37ff 	mov.w	r7, #4294967295
 80054de:	4638      	mov	r0, r7
 80054e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e2:	bf00      	nop
 80054e4:	080064f4 	.word	0x080064f4
 80054e8:	08006514 	.word	0x08006514
 80054ec:	080064d4 	.word	0x080064d4

080054f0 <__swsetup_r>:
 80054f0:	4b32      	ldr	r3, [pc, #200]	; (80055bc <__swsetup_r+0xcc>)
 80054f2:	b570      	push	{r4, r5, r6, lr}
 80054f4:	681d      	ldr	r5, [r3, #0]
 80054f6:	4606      	mov	r6, r0
 80054f8:	460c      	mov	r4, r1
 80054fa:	b125      	cbz	r5, 8005506 <__swsetup_r+0x16>
 80054fc:	69ab      	ldr	r3, [r5, #24]
 80054fe:	b913      	cbnz	r3, 8005506 <__swsetup_r+0x16>
 8005500:	4628      	mov	r0, r5
 8005502:	f000 f953 	bl	80057ac <__sinit>
 8005506:	4b2e      	ldr	r3, [pc, #184]	; (80055c0 <__swsetup_r+0xd0>)
 8005508:	429c      	cmp	r4, r3
 800550a:	d10f      	bne.n	800552c <__swsetup_r+0x3c>
 800550c:	686c      	ldr	r4, [r5, #4]
 800550e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005512:	b29a      	uxth	r2, r3
 8005514:	0715      	lsls	r5, r2, #28
 8005516:	d42c      	bmi.n	8005572 <__swsetup_r+0x82>
 8005518:	06d0      	lsls	r0, r2, #27
 800551a:	d411      	bmi.n	8005540 <__swsetup_r+0x50>
 800551c:	2209      	movs	r2, #9
 800551e:	6032      	str	r2, [r6, #0]
 8005520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005524:	81a3      	strh	r3, [r4, #12]
 8005526:	f04f 30ff 	mov.w	r0, #4294967295
 800552a:	e03e      	b.n	80055aa <__swsetup_r+0xba>
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <__swsetup_r+0xd4>)
 800552e:	429c      	cmp	r4, r3
 8005530:	d101      	bne.n	8005536 <__swsetup_r+0x46>
 8005532:	68ac      	ldr	r4, [r5, #8]
 8005534:	e7eb      	b.n	800550e <__swsetup_r+0x1e>
 8005536:	4b24      	ldr	r3, [pc, #144]	; (80055c8 <__swsetup_r+0xd8>)
 8005538:	429c      	cmp	r4, r3
 800553a:	bf08      	it	eq
 800553c:	68ec      	ldreq	r4, [r5, #12]
 800553e:	e7e6      	b.n	800550e <__swsetup_r+0x1e>
 8005540:	0751      	lsls	r1, r2, #29
 8005542:	d512      	bpl.n	800556a <__swsetup_r+0x7a>
 8005544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005546:	b141      	cbz	r1, 800555a <__swsetup_r+0x6a>
 8005548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800554c:	4299      	cmp	r1, r3
 800554e:	d002      	beq.n	8005556 <__swsetup_r+0x66>
 8005550:	4630      	mov	r0, r6
 8005552:	f000 fa19 	bl	8005988 <_free_r>
 8005556:	2300      	movs	r3, #0
 8005558:	6363      	str	r3, [r4, #52]	; 0x34
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	2300      	movs	r3, #0
 8005564:	6063      	str	r3, [r4, #4]
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	f043 0308 	orr.w	r3, r3, #8
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	b94b      	cbnz	r3, 800558a <__swsetup_r+0x9a>
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800557c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005580:	d003      	beq.n	800558a <__swsetup_r+0x9a>
 8005582:	4621      	mov	r1, r4
 8005584:	4630      	mov	r0, r6
 8005586:	f000 f9bf 	bl	8005908 <__smakebuf_r>
 800558a:	89a2      	ldrh	r2, [r4, #12]
 800558c:	f012 0301 	ands.w	r3, r2, #1
 8005590:	d00c      	beq.n	80055ac <__swsetup_r+0xbc>
 8005592:	2300      	movs	r3, #0
 8005594:	60a3      	str	r3, [r4, #8]
 8005596:	6963      	ldr	r3, [r4, #20]
 8005598:	425b      	negs	r3, r3
 800559a:	61a3      	str	r3, [r4, #24]
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	b953      	cbnz	r3, 80055b6 <__swsetup_r+0xc6>
 80055a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80055a8:	d1ba      	bne.n	8005520 <__swsetup_r+0x30>
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	0792      	lsls	r2, r2, #30
 80055ae:	bf58      	it	pl
 80055b0:	6963      	ldrpl	r3, [r4, #20]
 80055b2:	60a3      	str	r3, [r4, #8]
 80055b4:	e7f2      	b.n	800559c <__swsetup_r+0xac>
 80055b6:	2000      	movs	r0, #0
 80055b8:	e7f7      	b.n	80055aa <__swsetup_r+0xba>
 80055ba:	bf00      	nop
 80055bc:	20000010 	.word	0x20000010
 80055c0:	080064f4 	.word	0x080064f4
 80055c4:	08006514 	.word	0x08006514
 80055c8:	080064d4 	.word	0x080064d4

080055cc <__sflush_r>:
 80055cc:	898a      	ldrh	r2, [r1, #12]
 80055ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d2:	4605      	mov	r5, r0
 80055d4:	0710      	lsls	r0, r2, #28
 80055d6:	460c      	mov	r4, r1
 80055d8:	d458      	bmi.n	800568c <__sflush_r+0xc0>
 80055da:	684b      	ldr	r3, [r1, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dc05      	bgt.n	80055ec <__sflush_r+0x20>
 80055e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	dc02      	bgt.n	80055ec <__sflush_r+0x20>
 80055e6:	2000      	movs	r0, #0
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	d0f9      	beq.n	80055e6 <__sflush_r+0x1a>
 80055f2:	2300      	movs	r3, #0
 80055f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055f8:	682f      	ldr	r7, [r5, #0]
 80055fa:	6a21      	ldr	r1, [r4, #32]
 80055fc:	602b      	str	r3, [r5, #0]
 80055fe:	d032      	beq.n	8005666 <__sflush_r+0x9a>
 8005600:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	075a      	lsls	r2, r3, #29
 8005606:	d505      	bpl.n	8005614 <__sflush_r+0x48>
 8005608:	6863      	ldr	r3, [r4, #4]
 800560a:	1ac0      	subs	r0, r0, r3
 800560c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800560e:	b10b      	cbz	r3, 8005614 <__sflush_r+0x48>
 8005610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005612:	1ac0      	subs	r0, r0, r3
 8005614:	2300      	movs	r3, #0
 8005616:	4602      	mov	r2, r0
 8005618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800561a:	6a21      	ldr	r1, [r4, #32]
 800561c:	4628      	mov	r0, r5
 800561e:	47b0      	blx	r6
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	d106      	bne.n	8005634 <__sflush_r+0x68>
 8005626:	6829      	ldr	r1, [r5, #0]
 8005628:	291d      	cmp	r1, #29
 800562a:	d848      	bhi.n	80056be <__sflush_r+0xf2>
 800562c:	4a29      	ldr	r2, [pc, #164]	; (80056d4 <__sflush_r+0x108>)
 800562e:	40ca      	lsrs	r2, r1
 8005630:	07d6      	lsls	r6, r2, #31
 8005632:	d544      	bpl.n	80056be <__sflush_r+0xf2>
 8005634:	2200      	movs	r2, #0
 8005636:	6062      	str	r2, [r4, #4]
 8005638:	04d9      	lsls	r1, r3, #19
 800563a:	6922      	ldr	r2, [r4, #16]
 800563c:	6022      	str	r2, [r4, #0]
 800563e:	d504      	bpl.n	800564a <__sflush_r+0x7e>
 8005640:	1c42      	adds	r2, r0, #1
 8005642:	d101      	bne.n	8005648 <__sflush_r+0x7c>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	b903      	cbnz	r3, 800564a <__sflush_r+0x7e>
 8005648:	6560      	str	r0, [r4, #84]	; 0x54
 800564a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800564c:	602f      	str	r7, [r5, #0]
 800564e:	2900      	cmp	r1, #0
 8005650:	d0c9      	beq.n	80055e6 <__sflush_r+0x1a>
 8005652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005656:	4299      	cmp	r1, r3
 8005658:	d002      	beq.n	8005660 <__sflush_r+0x94>
 800565a:	4628      	mov	r0, r5
 800565c:	f000 f994 	bl	8005988 <_free_r>
 8005660:	2000      	movs	r0, #0
 8005662:	6360      	str	r0, [r4, #52]	; 0x34
 8005664:	e7c0      	b.n	80055e8 <__sflush_r+0x1c>
 8005666:	2301      	movs	r3, #1
 8005668:	4628      	mov	r0, r5
 800566a:	47b0      	blx	r6
 800566c:	1c41      	adds	r1, r0, #1
 800566e:	d1c8      	bne.n	8005602 <__sflush_r+0x36>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0c5      	beq.n	8005602 <__sflush_r+0x36>
 8005676:	2b1d      	cmp	r3, #29
 8005678:	d001      	beq.n	800567e <__sflush_r+0xb2>
 800567a:	2b16      	cmp	r3, #22
 800567c:	d101      	bne.n	8005682 <__sflush_r+0xb6>
 800567e:	602f      	str	r7, [r5, #0]
 8005680:	e7b1      	b.n	80055e6 <__sflush_r+0x1a>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	e7ad      	b.n	80055e8 <__sflush_r+0x1c>
 800568c:	690f      	ldr	r7, [r1, #16]
 800568e:	2f00      	cmp	r7, #0
 8005690:	d0a9      	beq.n	80055e6 <__sflush_r+0x1a>
 8005692:	0793      	lsls	r3, r2, #30
 8005694:	680e      	ldr	r6, [r1, #0]
 8005696:	bf08      	it	eq
 8005698:	694b      	ldreq	r3, [r1, #20]
 800569a:	600f      	str	r7, [r1, #0]
 800569c:	bf18      	it	ne
 800569e:	2300      	movne	r3, #0
 80056a0:	eba6 0807 	sub.w	r8, r6, r7
 80056a4:	608b      	str	r3, [r1, #8]
 80056a6:	f1b8 0f00 	cmp.w	r8, #0
 80056aa:	dd9c      	ble.n	80055e6 <__sflush_r+0x1a>
 80056ac:	4643      	mov	r3, r8
 80056ae:	463a      	mov	r2, r7
 80056b0:	6a21      	ldr	r1, [r4, #32]
 80056b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b0      	blx	r6
 80056b8:	2800      	cmp	r0, #0
 80056ba:	dc06      	bgt.n	80056ca <__sflush_r+0xfe>
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056c2:	81a3      	strh	r3, [r4, #12]
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	e78e      	b.n	80055e8 <__sflush_r+0x1c>
 80056ca:	4407      	add	r7, r0
 80056cc:	eba8 0800 	sub.w	r8, r8, r0
 80056d0:	e7e9      	b.n	80056a6 <__sflush_r+0xda>
 80056d2:	bf00      	nop
 80056d4:	20400001 	.word	0x20400001

080056d8 <_fflush_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	690b      	ldr	r3, [r1, #16]
 80056dc:	4605      	mov	r5, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	b1db      	cbz	r3, 800571a <_fflush_r+0x42>
 80056e2:	b118      	cbz	r0, 80056ec <_fflush_r+0x14>
 80056e4:	6983      	ldr	r3, [r0, #24]
 80056e6:	b90b      	cbnz	r3, 80056ec <_fflush_r+0x14>
 80056e8:	f000 f860 	bl	80057ac <__sinit>
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <_fflush_r+0x48>)
 80056ee:	429c      	cmp	r4, r3
 80056f0:	d109      	bne.n	8005706 <_fflush_r+0x2e>
 80056f2:	686c      	ldr	r4, [r5, #4]
 80056f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f8:	b17b      	cbz	r3, 800571a <_fflush_r+0x42>
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005702:	f7ff bf63 	b.w	80055cc <__sflush_r>
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <_fflush_r+0x4c>)
 8005708:	429c      	cmp	r4, r3
 800570a:	d101      	bne.n	8005710 <_fflush_r+0x38>
 800570c:	68ac      	ldr	r4, [r5, #8]
 800570e:	e7f1      	b.n	80056f4 <_fflush_r+0x1c>
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <_fflush_r+0x50>)
 8005712:	429c      	cmp	r4, r3
 8005714:	bf08      	it	eq
 8005716:	68ec      	ldreq	r4, [r5, #12]
 8005718:	e7ec      	b.n	80056f4 <_fflush_r+0x1c>
 800571a:	2000      	movs	r0, #0
 800571c:	bd38      	pop	{r3, r4, r5, pc}
 800571e:	bf00      	nop
 8005720:	080064f4 	.word	0x080064f4
 8005724:	08006514 	.word	0x08006514
 8005728:	080064d4 	.word	0x080064d4

0800572c <std>:
 800572c:	2300      	movs	r3, #0
 800572e:	b510      	push	{r4, lr}
 8005730:	4604      	mov	r4, r0
 8005732:	e9c0 3300 	strd	r3, r3, [r0]
 8005736:	6083      	str	r3, [r0, #8]
 8005738:	8181      	strh	r1, [r0, #12]
 800573a:	6643      	str	r3, [r0, #100]	; 0x64
 800573c:	81c2      	strh	r2, [r0, #14]
 800573e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005742:	6183      	str	r3, [r0, #24]
 8005744:	4619      	mov	r1, r3
 8005746:	2208      	movs	r2, #8
 8005748:	305c      	adds	r0, #92	; 0x5c
 800574a:	f7ff fde7 	bl	800531c <memset>
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <std+0x38>)
 8005750:	6263      	str	r3, [r4, #36]	; 0x24
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <std+0x3c>)
 8005754:	62a3      	str	r3, [r4, #40]	; 0x28
 8005756:	4b05      	ldr	r3, [pc, #20]	; (800576c <std+0x40>)
 8005758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <std+0x44>)
 800575c:	6224      	str	r4, [r4, #32]
 800575e:	6323      	str	r3, [r4, #48]	; 0x30
 8005760:	bd10      	pop	{r4, pc}
 8005762:	bf00      	nop
 8005764:	080060f5 	.word	0x080060f5
 8005768:	08006117 	.word	0x08006117
 800576c:	0800614f 	.word	0x0800614f
 8005770:	08006173 	.word	0x08006173

08005774 <_cleanup_r>:
 8005774:	4901      	ldr	r1, [pc, #4]	; (800577c <_cleanup_r+0x8>)
 8005776:	f000 b885 	b.w	8005884 <_fwalk_reent>
 800577a:	bf00      	nop
 800577c:	080056d9 	.word	0x080056d9

08005780 <__sfmoreglue>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	1e4a      	subs	r2, r1, #1
 8005784:	2568      	movs	r5, #104	; 0x68
 8005786:	4355      	muls	r5, r2
 8005788:	460e      	mov	r6, r1
 800578a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800578e:	f000 f949 	bl	8005a24 <_malloc_r>
 8005792:	4604      	mov	r4, r0
 8005794:	b140      	cbz	r0, 80057a8 <__sfmoreglue+0x28>
 8005796:	2100      	movs	r1, #0
 8005798:	e9c0 1600 	strd	r1, r6, [r0]
 800579c:	300c      	adds	r0, #12
 800579e:	60a0      	str	r0, [r4, #8]
 80057a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057a4:	f7ff fdba 	bl	800531c <memset>
 80057a8:	4620      	mov	r0, r4
 80057aa:	bd70      	pop	{r4, r5, r6, pc}

080057ac <__sinit>:
 80057ac:	6983      	ldr	r3, [r0, #24]
 80057ae:	b510      	push	{r4, lr}
 80057b0:	4604      	mov	r4, r0
 80057b2:	bb33      	cbnz	r3, 8005802 <__sinit+0x56>
 80057b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80057b8:	6503      	str	r3, [r0, #80]	; 0x50
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <__sinit+0x58>)
 80057bc:	4a12      	ldr	r2, [pc, #72]	; (8005808 <__sinit+0x5c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6282      	str	r2, [r0, #40]	; 0x28
 80057c2:	4298      	cmp	r0, r3
 80057c4:	bf04      	itt	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	6183      	streq	r3, [r0, #24]
 80057ca:	f000 f81f 	bl	800580c <__sfp>
 80057ce:	6060      	str	r0, [r4, #4]
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 f81b 	bl	800580c <__sfp>
 80057d6:	60a0      	str	r0, [r4, #8]
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 f817 	bl	800580c <__sfp>
 80057de:	2200      	movs	r2, #0
 80057e0:	60e0      	str	r0, [r4, #12]
 80057e2:	2104      	movs	r1, #4
 80057e4:	6860      	ldr	r0, [r4, #4]
 80057e6:	f7ff ffa1 	bl	800572c <std>
 80057ea:	2201      	movs	r2, #1
 80057ec:	2109      	movs	r1, #9
 80057ee:	68a0      	ldr	r0, [r4, #8]
 80057f0:	f7ff ff9c 	bl	800572c <std>
 80057f4:	2202      	movs	r2, #2
 80057f6:	2112      	movs	r1, #18
 80057f8:	68e0      	ldr	r0, [r4, #12]
 80057fa:	f7ff ff97 	bl	800572c <std>
 80057fe:	2301      	movs	r3, #1
 8005800:	61a3      	str	r3, [r4, #24]
 8005802:	bd10      	pop	{r4, pc}
 8005804:	080064d0 	.word	0x080064d0
 8005808:	08005775 	.word	0x08005775

0800580c <__sfp>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	4b1b      	ldr	r3, [pc, #108]	; (800587c <__sfp+0x70>)
 8005810:	681e      	ldr	r6, [r3, #0]
 8005812:	69b3      	ldr	r3, [r6, #24]
 8005814:	4607      	mov	r7, r0
 8005816:	b913      	cbnz	r3, 800581e <__sfp+0x12>
 8005818:	4630      	mov	r0, r6
 800581a:	f7ff ffc7 	bl	80057ac <__sinit>
 800581e:	3648      	adds	r6, #72	; 0x48
 8005820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005824:	3b01      	subs	r3, #1
 8005826:	d503      	bpl.n	8005830 <__sfp+0x24>
 8005828:	6833      	ldr	r3, [r6, #0]
 800582a:	b133      	cbz	r3, 800583a <__sfp+0x2e>
 800582c:	6836      	ldr	r6, [r6, #0]
 800582e:	e7f7      	b.n	8005820 <__sfp+0x14>
 8005830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005834:	b16d      	cbz	r5, 8005852 <__sfp+0x46>
 8005836:	3468      	adds	r4, #104	; 0x68
 8005838:	e7f4      	b.n	8005824 <__sfp+0x18>
 800583a:	2104      	movs	r1, #4
 800583c:	4638      	mov	r0, r7
 800583e:	f7ff ff9f 	bl	8005780 <__sfmoreglue>
 8005842:	6030      	str	r0, [r6, #0]
 8005844:	2800      	cmp	r0, #0
 8005846:	d1f1      	bne.n	800582c <__sfp+0x20>
 8005848:	230c      	movs	r3, #12
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4604      	mov	r4, r0
 800584e:	4620      	mov	r0, r4
 8005850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005852:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <__sfp+0x74>)
 8005854:	6665      	str	r5, [r4, #100]	; 0x64
 8005856:	e9c4 5500 	strd	r5, r5, [r4]
 800585a:	60a5      	str	r5, [r4, #8]
 800585c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005860:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005864:	2208      	movs	r2, #8
 8005866:	4629      	mov	r1, r5
 8005868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800586c:	f7ff fd56 	bl	800531c <memset>
 8005870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005878:	e7e9      	b.n	800584e <__sfp+0x42>
 800587a:	bf00      	nop
 800587c:	080064d0 	.word	0x080064d0
 8005880:	ffff0001 	.word	0xffff0001

08005884 <_fwalk_reent>:
 8005884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005888:	4680      	mov	r8, r0
 800588a:	4689      	mov	r9, r1
 800588c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005890:	2600      	movs	r6, #0
 8005892:	b914      	cbnz	r4, 800589a <_fwalk_reent+0x16>
 8005894:	4630      	mov	r0, r6
 8005896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800589a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800589e:	3f01      	subs	r7, #1
 80058a0:	d501      	bpl.n	80058a6 <_fwalk_reent+0x22>
 80058a2:	6824      	ldr	r4, [r4, #0]
 80058a4:	e7f5      	b.n	8005892 <_fwalk_reent+0xe>
 80058a6:	89ab      	ldrh	r3, [r5, #12]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d907      	bls.n	80058bc <_fwalk_reent+0x38>
 80058ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058b0:	3301      	adds	r3, #1
 80058b2:	d003      	beq.n	80058bc <_fwalk_reent+0x38>
 80058b4:	4629      	mov	r1, r5
 80058b6:	4640      	mov	r0, r8
 80058b8:	47c8      	blx	r9
 80058ba:	4306      	orrs	r6, r0
 80058bc:	3568      	adds	r5, #104	; 0x68
 80058be:	e7ee      	b.n	800589e <_fwalk_reent+0x1a>

080058c0 <__swhatbuf_r>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	460e      	mov	r6, r1
 80058c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c8:	2900      	cmp	r1, #0
 80058ca:	b096      	sub	sp, #88	; 0x58
 80058cc:	4614      	mov	r4, r2
 80058ce:	461d      	mov	r5, r3
 80058d0:	da07      	bge.n	80058e2 <__swhatbuf_r+0x22>
 80058d2:	2300      	movs	r3, #0
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	89b3      	ldrh	r3, [r6, #12]
 80058d8:	061a      	lsls	r2, r3, #24
 80058da:	d410      	bmi.n	80058fe <__swhatbuf_r+0x3e>
 80058dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058e0:	e00e      	b.n	8005900 <__swhatbuf_r+0x40>
 80058e2:	466a      	mov	r2, sp
 80058e4:	f000 fc6c 	bl	80061c0 <_fstat_r>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	dbf2      	blt.n	80058d2 <__swhatbuf_r+0x12>
 80058ec:	9a01      	ldr	r2, [sp, #4]
 80058ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058f6:	425a      	negs	r2, r3
 80058f8:	415a      	adcs	r2, r3
 80058fa:	602a      	str	r2, [r5, #0]
 80058fc:	e7ee      	b.n	80058dc <__swhatbuf_r+0x1c>
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	2000      	movs	r0, #0
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	b016      	add	sp, #88	; 0x58
 8005906:	bd70      	pop	{r4, r5, r6, pc}

08005908 <__smakebuf_r>:
 8005908:	898b      	ldrh	r3, [r1, #12]
 800590a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800590c:	079d      	lsls	r5, r3, #30
 800590e:	4606      	mov	r6, r0
 8005910:	460c      	mov	r4, r1
 8005912:	d507      	bpl.n	8005924 <__smakebuf_r+0x1c>
 8005914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	2301      	movs	r3, #1
 800591e:	6163      	str	r3, [r4, #20]
 8005920:	b002      	add	sp, #8
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	ab01      	add	r3, sp, #4
 8005926:	466a      	mov	r2, sp
 8005928:	f7ff ffca 	bl	80058c0 <__swhatbuf_r>
 800592c:	9900      	ldr	r1, [sp, #0]
 800592e:	4605      	mov	r5, r0
 8005930:	4630      	mov	r0, r6
 8005932:	f000 f877 	bl	8005a24 <_malloc_r>
 8005936:	b948      	cbnz	r0, 800594c <__smakebuf_r+0x44>
 8005938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800593c:	059a      	lsls	r2, r3, #22
 800593e:	d4ef      	bmi.n	8005920 <__smakebuf_r+0x18>
 8005940:	f023 0303 	bic.w	r3, r3, #3
 8005944:	f043 0302 	orr.w	r3, r3, #2
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	e7e3      	b.n	8005914 <__smakebuf_r+0xc>
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <__smakebuf_r+0x7c>)
 800594e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	6020      	str	r0, [r4, #0]
 8005954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	9b00      	ldr	r3, [sp, #0]
 800595c:	6163      	str	r3, [r4, #20]
 800595e:	9b01      	ldr	r3, [sp, #4]
 8005960:	6120      	str	r0, [r4, #16]
 8005962:	b15b      	cbz	r3, 800597c <__smakebuf_r+0x74>
 8005964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005968:	4630      	mov	r0, r6
 800596a:	f000 fc3b 	bl	80061e4 <_isatty_r>
 800596e:	b128      	cbz	r0, 800597c <__smakebuf_r+0x74>
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	81a3      	strh	r3, [r4, #12]
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	431d      	orrs	r5, r3
 8005980:	81a5      	strh	r5, [r4, #12]
 8005982:	e7cd      	b.n	8005920 <__smakebuf_r+0x18>
 8005984:	08005775 	.word	0x08005775

08005988 <_free_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	4605      	mov	r5, r0
 800598c:	2900      	cmp	r1, #0
 800598e:	d045      	beq.n	8005a1c <_free_r+0x94>
 8005990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005994:	1f0c      	subs	r4, r1, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	bfb8      	it	lt
 800599a:	18e4      	addlt	r4, r4, r3
 800599c:	f000 fc44 	bl	8006228 <__malloc_lock>
 80059a0:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <_free_r+0x98>)
 80059a2:	6813      	ldr	r3, [r2, #0]
 80059a4:	4610      	mov	r0, r2
 80059a6:	b933      	cbnz	r3, 80059b6 <_free_r+0x2e>
 80059a8:	6063      	str	r3, [r4, #4]
 80059aa:	6014      	str	r4, [r2, #0]
 80059ac:	4628      	mov	r0, r5
 80059ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059b2:	f000 bc3a 	b.w	800622a <__malloc_unlock>
 80059b6:	42a3      	cmp	r3, r4
 80059b8:	d90c      	bls.n	80059d4 <_free_r+0x4c>
 80059ba:	6821      	ldr	r1, [r4, #0]
 80059bc:	1862      	adds	r2, r4, r1
 80059be:	4293      	cmp	r3, r2
 80059c0:	bf04      	itt	eq
 80059c2:	681a      	ldreq	r2, [r3, #0]
 80059c4:	685b      	ldreq	r3, [r3, #4]
 80059c6:	6063      	str	r3, [r4, #4]
 80059c8:	bf04      	itt	eq
 80059ca:	1852      	addeq	r2, r2, r1
 80059cc:	6022      	streq	r2, [r4, #0]
 80059ce:	6004      	str	r4, [r0, #0]
 80059d0:	e7ec      	b.n	80059ac <_free_r+0x24>
 80059d2:	4613      	mov	r3, r2
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	b10a      	cbz	r2, 80059dc <_free_r+0x54>
 80059d8:	42a2      	cmp	r2, r4
 80059da:	d9fa      	bls.n	80059d2 <_free_r+0x4a>
 80059dc:	6819      	ldr	r1, [r3, #0]
 80059de:	1858      	adds	r0, r3, r1
 80059e0:	42a0      	cmp	r0, r4
 80059e2:	d10b      	bne.n	80059fc <_free_r+0x74>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	4401      	add	r1, r0
 80059e8:	1858      	adds	r0, r3, r1
 80059ea:	4282      	cmp	r2, r0
 80059ec:	6019      	str	r1, [r3, #0]
 80059ee:	d1dd      	bne.n	80059ac <_free_r+0x24>
 80059f0:	6810      	ldr	r0, [r2, #0]
 80059f2:	6852      	ldr	r2, [r2, #4]
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	4401      	add	r1, r0
 80059f8:	6019      	str	r1, [r3, #0]
 80059fa:	e7d7      	b.n	80059ac <_free_r+0x24>
 80059fc:	d902      	bls.n	8005a04 <_free_r+0x7c>
 80059fe:	230c      	movs	r3, #12
 8005a00:	602b      	str	r3, [r5, #0]
 8005a02:	e7d3      	b.n	80059ac <_free_r+0x24>
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	1821      	adds	r1, r4, r0
 8005a08:	428a      	cmp	r2, r1
 8005a0a:	bf04      	itt	eq
 8005a0c:	6811      	ldreq	r1, [r2, #0]
 8005a0e:	6852      	ldreq	r2, [r2, #4]
 8005a10:	6062      	str	r2, [r4, #4]
 8005a12:	bf04      	itt	eq
 8005a14:	1809      	addeq	r1, r1, r0
 8005a16:	6021      	streq	r1, [r4, #0]
 8005a18:	605c      	str	r4, [r3, #4]
 8005a1a:	e7c7      	b.n	80059ac <_free_r+0x24>
 8005a1c:	bd38      	pop	{r3, r4, r5, pc}
 8005a1e:	bf00      	nop
 8005a20:	200000f4 	.word	0x200000f4

08005a24 <_malloc_r>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	1ccd      	adds	r5, r1, #3
 8005a28:	f025 0503 	bic.w	r5, r5, #3
 8005a2c:	3508      	adds	r5, #8
 8005a2e:	2d0c      	cmp	r5, #12
 8005a30:	bf38      	it	cc
 8005a32:	250c      	movcc	r5, #12
 8005a34:	2d00      	cmp	r5, #0
 8005a36:	4606      	mov	r6, r0
 8005a38:	db01      	blt.n	8005a3e <_malloc_r+0x1a>
 8005a3a:	42a9      	cmp	r1, r5
 8005a3c:	d903      	bls.n	8005a46 <_malloc_r+0x22>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	6033      	str	r3, [r6, #0]
 8005a42:	2000      	movs	r0, #0
 8005a44:	bd70      	pop	{r4, r5, r6, pc}
 8005a46:	f000 fbef 	bl	8006228 <__malloc_lock>
 8005a4a:	4a21      	ldr	r2, [pc, #132]	; (8005ad0 <_malloc_r+0xac>)
 8005a4c:	6814      	ldr	r4, [r2, #0]
 8005a4e:	4621      	mov	r1, r4
 8005a50:	b991      	cbnz	r1, 8005a78 <_malloc_r+0x54>
 8005a52:	4c20      	ldr	r4, [pc, #128]	; (8005ad4 <_malloc_r+0xb0>)
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	b91b      	cbnz	r3, 8005a60 <_malloc_r+0x3c>
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f000 fb3b 	bl	80060d4 <_sbrk_r>
 8005a5e:	6020      	str	r0, [r4, #0]
 8005a60:	4629      	mov	r1, r5
 8005a62:	4630      	mov	r0, r6
 8005a64:	f000 fb36 	bl	80060d4 <_sbrk_r>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d124      	bne.n	8005ab6 <_malloc_r+0x92>
 8005a6c:	230c      	movs	r3, #12
 8005a6e:	6033      	str	r3, [r6, #0]
 8005a70:	4630      	mov	r0, r6
 8005a72:	f000 fbda 	bl	800622a <__malloc_unlock>
 8005a76:	e7e4      	b.n	8005a42 <_malloc_r+0x1e>
 8005a78:	680b      	ldr	r3, [r1, #0]
 8005a7a:	1b5b      	subs	r3, r3, r5
 8005a7c:	d418      	bmi.n	8005ab0 <_malloc_r+0x8c>
 8005a7e:	2b0b      	cmp	r3, #11
 8005a80:	d90f      	bls.n	8005aa2 <_malloc_r+0x7e>
 8005a82:	600b      	str	r3, [r1, #0]
 8005a84:	50cd      	str	r5, [r1, r3]
 8005a86:	18cc      	adds	r4, r1, r3
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f000 fbce 	bl	800622a <__malloc_unlock>
 8005a8e:	f104 000b 	add.w	r0, r4, #11
 8005a92:	1d23      	adds	r3, r4, #4
 8005a94:	f020 0007 	bic.w	r0, r0, #7
 8005a98:	1ac3      	subs	r3, r0, r3
 8005a9a:	d0d3      	beq.n	8005a44 <_malloc_r+0x20>
 8005a9c:	425a      	negs	r2, r3
 8005a9e:	50e2      	str	r2, [r4, r3]
 8005aa0:	e7d0      	b.n	8005a44 <_malloc_r+0x20>
 8005aa2:	428c      	cmp	r4, r1
 8005aa4:	684b      	ldr	r3, [r1, #4]
 8005aa6:	bf16      	itet	ne
 8005aa8:	6063      	strne	r3, [r4, #4]
 8005aaa:	6013      	streq	r3, [r2, #0]
 8005aac:	460c      	movne	r4, r1
 8005aae:	e7eb      	b.n	8005a88 <_malloc_r+0x64>
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	6849      	ldr	r1, [r1, #4]
 8005ab4:	e7cc      	b.n	8005a50 <_malloc_r+0x2c>
 8005ab6:	1cc4      	adds	r4, r0, #3
 8005ab8:	f024 0403 	bic.w	r4, r4, #3
 8005abc:	42a0      	cmp	r0, r4
 8005abe:	d005      	beq.n	8005acc <_malloc_r+0xa8>
 8005ac0:	1a21      	subs	r1, r4, r0
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f000 fb06 	bl	80060d4 <_sbrk_r>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d0cf      	beq.n	8005a6c <_malloc_r+0x48>
 8005acc:	6025      	str	r5, [r4, #0]
 8005ace:	e7db      	b.n	8005a88 <_malloc_r+0x64>
 8005ad0:	200000f4 	.word	0x200000f4
 8005ad4:	200000f8 	.word	0x200000f8

08005ad8 <__sfputc_r>:
 8005ad8:	6893      	ldr	r3, [r2, #8]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	b410      	push	{r4}
 8005ae0:	6093      	str	r3, [r2, #8]
 8005ae2:	da08      	bge.n	8005af6 <__sfputc_r+0x1e>
 8005ae4:	6994      	ldr	r4, [r2, #24]
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	db01      	blt.n	8005aee <__sfputc_r+0x16>
 8005aea:	290a      	cmp	r1, #10
 8005aec:	d103      	bne.n	8005af6 <__sfputc_r+0x1e>
 8005aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005af2:	f7ff bcab 	b.w	800544c <__swbuf_r>
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	1c58      	adds	r0, r3, #1
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	7019      	strb	r1, [r3, #0]
 8005afe:	4608      	mov	r0, r1
 8005b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <__sfputs_r>:
 8005b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b08:	4606      	mov	r6, r0
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	4614      	mov	r4, r2
 8005b0e:	18d5      	adds	r5, r2, r3
 8005b10:	42ac      	cmp	r4, r5
 8005b12:	d101      	bne.n	8005b18 <__sfputs_r+0x12>
 8005b14:	2000      	movs	r0, #0
 8005b16:	e007      	b.n	8005b28 <__sfputs_r+0x22>
 8005b18:	463a      	mov	r2, r7
 8005b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7ff ffda 	bl	8005ad8 <__sfputc_r>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d1f3      	bne.n	8005b10 <__sfputs_r+0xa>
 8005b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b2c <_vfiprintf_r>:
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	460c      	mov	r4, r1
 8005b32:	b09d      	sub	sp, #116	; 0x74
 8005b34:	4617      	mov	r7, r2
 8005b36:	461d      	mov	r5, r3
 8005b38:	4606      	mov	r6, r0
 8005b3a:	b118      	cbz	r0, 8005b44 <_vfiprintf_r+0x18>
 8005b3c:	6983      	ldr	r3, [r0, #24]
 8005b3e:	b90b      	cbnz	r3, 8005b44 <_vfiprintf_r+0x18>
 8005b40:	f7ff fe34 	bl	80057ac <__sinit>
 8005b44:	4b7c      	ldr	r3, [pc, #496]	; (8005d38 <_vfiprintf_r+0x20c>)
 8005b46:	429c      	cmp	r4, r3
 8005b48:	d158      	bne.n	8005bfc <_vfiprintf_r+0xd0>
 8005b4a:	6874      	ldr	r4, [r6, #4]
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	0718      	lsls	r0, r3, #28
 8005b50:	d55e      	bpl.n	8005c10 <_vfiprintf_r+0xe4>
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d05b      	beq.n	8005c10 <_vfiprintf_r+0xe4>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5c:	2320      	movs	r3, #32
 8005b5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b62:	2330      	movs	r3, #48	; 0x30
 8005b64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b68:	9503      	str	r5, [sp, #12]
 8005b6a:	f04f 0b01 	mov.w	fp, #1
 8005b6e:	46b8      	mov	r8, r7
 8005b70:	4645      	mov	r5, r8
 8005b72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b76:	b10b      	cbz	r3, 8005b7c <_vfiprintf_r+0x50>
 8005b78:	2b25      	cmp	r3, #37	; 0x25
 8005b7a:	d154      	bne.n	8005c26 <_vfiprintf_r+0xfa>
 8005b7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005b80:	d00b      	beq.n	8005b9a <_vfiprintf_r+0x6e>
 8005b82:	4653      	mov	r3, sl
 8005b84:	463a      	mov	r2, r7
 8005b86:	4621      	mov	r1, r4
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f7ff ffbc 	bl	8005b06 <__sfputs_r>
 8005b8e:	3001      	adds	r0, #1
 8005b90:	f000 80c2 	beq.w	8005d18 <_vfiprintf_r+0x1ec>
 8005b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b96:	4453      	add	r3, sl
 8005b98:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9a:	f898 3000 	ldrb.w	r3, [r8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 80ba 	beq.w	8005d18 <_vfiprintf_r+0x1ec>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8005baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bae:	9304      	str	r3, [sp, #16]
 8005bb0:	9307      	str	r3, [sp, #28]
 8005bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8005bb8:	46a8      	mov	r8, r5
 8005bba:	2205      	movs	r2, #5
 8005bbc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005bc0:	485e      	ldr	r0, [pc, #376]	; (8005d3c <_vfiprintf_r+0x210>)
 8005bc2:	f7fa fb05 	bl	80001d0 <memchr>
 8005bc6:	9b04      	ldr	r3, [sp, #16]
 8005bc8:	bb78      	cbnz	r0, 8005c2a <_vfiprintf_r+0xfe>
 8005bca:	06d9      	lsls	r1, r3, #27
 8005bcc:	bf44      	itt	mi
 8005bce:	2220      	movmi	r2, #32
 8005bd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bd4:	071a      	lsls	r2, r3, #28
 8005bd6:	bf44      	itt	mi
 8005bd8:	222b      	movmi	r2, #43	; 0x2b
 8005bda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bde:	782a      	ldrb	r2, [r5, #0]
 8005be0:	2a2a      	cmp	r2, #42	; 0x2a
 8005be2:	d02a      	beq.n	8005c3a <_vfiprintf_r+0x10e>
 8005be4:	9a07      	ldr	r2, [sp, #28]
 8005be6:	46a8      	mov	r8, r5
 8005be8:	2000      	movs	r0, #0
 8005bea:	250a      	movs	r5, #10
 8005bec:	4641      	mov	r1, r8
 8005bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bf2:	3b30      	subs	r3, #48	; 0x30
 8005bf4:	2b09      	cmp	r3, #9
 8005bf6:	d969      	bls.n	8005ccc <_vfiprintf_r+0x1a0>
 8005bf8:	b360      	cbz	r0, 8005c54 <_vfiprintf_r+0x128>
 8005bfa:	e024      	b.n	8005c46 <_vfiprintf_r+0x11a>
 8005bfc:	4b50      	ldr	r3, [pc, #320]	; (8005d40 <_vfiprintf_r+0x214>)
 8005bfe:	429c      	cmp	r4, r3
 8005c00:	d101      	bne.n	8005c06 <_vfiprintf_r+0xda>
 8005c02:	68b4      	ldr	r4, [r6, #8]
 8005c04:	e7a2      	b.n	8005b4c <_vfiprintf_r+0x20>
 8005c06:	4b4f      	ldr	r3, [pc, #316]	; (8005d44 <_vfiprintf_r+0x218>)
 8005c08:	429c      	cmp	r4, r3
 8005c0a:	bf08      	it	eq
 8005c0c:	68f4      	ldreq	r4, [r6, #12]
 8005c0e:	e79d      	b.n	8005b4c <_vfiprintf_r+0x20>
 8005c10:	4621      	mov	r1, r4
 8005c12:	4630      	mov	r0, r6
 8005c14:	f7ff fc6c 	bl	80054f0 <__swsetup_r>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d09d      	beq.n	8005b58 <_vfiprintf_r+0x2c>
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	b01d      	add	sp, #116	; 0x74
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	46a8      	mov	r8, r5
 8005c28:	e7a2      	b.n	8005b70 <_vfiprintf_r+0x44>
 8005c2a:	4a44      	ldr	r2, [pc, #272]	; (8005d3c <_vfiprintf_r+0x210>)
 8005c2c:	1a80      	subs	r0, r0, r2
 8005c2e:	fa0b f000 	lsl.w	r0, fp, r0
 8005c32:	4318      	orrs	r0, r3
 8005c34:	9004      	str	r0, [sp, #16]
 8005c36:	4645      	mov	r5, r8
 8005c38:	e7be      	b.n	8005bb8 <_vfiprintf_r+0x8c>
 8005c3a:	9a03      	ldr	r2, [sp, #12]
 8005c3c:	1d11      	adds	r1, r2, #4
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	9103      	str	r1, [sp, #12]
 8005c42:	2a00      	cmp	r2, #0
 8005c44:	db01      	blt.n	8005c4a <_vfiprintf_r+0x11e>
 8005c46:	9207      	str	r2, [sp, #28]
 8005c48:	e004      	b.n	8005c54 <_vfiprintf_r+0x128>
 8005c4a:	4252      	negs	r2, r2
 8005c4c:	f043 0302 	orr.w	r3, r3, #2
 8005c50:	9207      	str	r2, [sp, #28]
 8005c52:	9304      	str	r3, [sp, #16]
 8005c54:	f898 3000 	ldrb.w	r3, [r8]
 8005c58:	2b2e      	cmp	r3, #46	; 0x2e
 8005c5a:	d10e      	bne.n	8005c7a <_vfiprintf_r+0x14e>
 8005c5c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005c60:	2b2a      	cmp	r3, #42	; 0x2a
 8005c62:	d138      	bne.n	8005cd6 <_vfiprintf_r+0x1aa>
 8005c64:	9b03      	ldr	r3, [sp, #12]
 8005c66:	1d1a      	adds	r2, r3, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	9203      	str	r2, [sp, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bfb8      	it	lt
 8005c70:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c74:	f108 0802 	add.w	r8, r8, #2
 8005c78:	9305      	str	r3, [sp, #20]
 8005c7a:	4d33      	ldr	r5, [pc, #204]	; (8005d48 <_vfiprintf_r+0x21c>)
 8005c7c:	f898 1000 	ldrb.w	r1, [r8]
 8005c80:	2203      	movs	r2, #3
 8005c82:	4628      	mov	r0, r5
 8005c84:	f7fa faa4 	bl	80001d0 <memchr>
 8005c88:	b140      	cbz	r0, 8005c9c <_vfiprintf_r+0x170>
 8005c8a:	2340      	movs	r3, #64	; 0x40
 8005c8c:	1b40      	subs	r0, r0, r5
 8005c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8005c92:	9b04      	ldr	r3, [sp, #16]
 8005c94:	4303      	orrs	r3, r0
 8005c96:	f108 0801 	add.w	r8, r8, #1
 8005c9a:	9304      	str	r3, [sp, #16]
 8005c9c:	f898 1000 	ldrb.w	r1, [r8]
 8005ca0:	482a      	ldr	r0, [pc, #168]	; (8005d4c <_vfiprintf_r+0x220>)
 8005ca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ca6:	2206      	movs	r2, #6
 8005ca8:	f108 0701 	add.w	r7, r8, #1
 8005cac:	f7fa fa90 	bl	80001d0 <memchr>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d037      	beq.n	8005d24 <_vfiprintf_r+0x1f8>
 8005cb4:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <_vfiprintf_r+0x224>)
 8005cb6:	bb1b      	cbnz	r3, 8005d00 <_vfiprintf_r+0x1d4>
 8005cb8:	9b03      	ldr	r3, [sp, #12]
 8005cba:	3307      	adds	r3, #7
 8005cbc:	f023 0307 	bic.w	r3, r3, #7
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	9303      	str	r3, [sp, #12]
 8005cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc6:	444b      	add	r3, r9
 8005cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cca:	e750      	b.n	8005b6e <_vfiprintf_r+0x42>
 8005ccc:	fb05 3202 	mla	r2, r5, r2, r3
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	4688      	mov	r8, r1
 8005cd4:	e78a      	b.n	8005bec <_vfiprintf_r+0xc0>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f108 0801 	add.w	r8, r8, #1
 8005cdc:	9305      	str	r3, [sp, #20]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	250a      	movs	r5, #10
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ce8:	3a30      	subs	r2, #48	; 0x30
 8005cea:	2a09      	cmp	r2, #9
 8005cec:	d903      	bls.n	8005cf6 <_vfiprintf_r+0x1ca>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0c3      	beq.n	8005c7a <_vfiprintf_r+0x14e>
 8005cf2:	9105      	str	r1, [sp, #20]
 8005cf4:	e7c1      	b.n	8005c7a <_vfiprintf_r+0x14e>
 8005cf6:	fb05 2101 	mla	r1, r5, r1, r2
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	e7f0      	b.n	8005ce2 <_vfiprintf_r+0x1b6>
 8005d00:	ab03      	add	r3, sp, #12
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	4622      	mov	r2, r4
 8005d06:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <_vfiprintf_r+0x228>)
 8005d08:	a904      	add	r1, sp, #16
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f3af 8000 	nop.w
 8005d10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d14:	4681      	mov	r9, r0
 8005d16:	d1d5      	bne.n	8005cc4 <_vfiprintf_r+0x198>
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	065b      	lsls	r3, r3, #25
 8005d1c:	f53f af7e 	bmi.w	8005c1c <_vfiprintf_r+0xf0>
 8005d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d22:	e77d      	b.n	8005c20 <_vfiprintf_r+0xf4>
 8005d24:	ab03      	add	r3, sp, #12
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	4622      	mov	r2, r4
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <_vfiprintf_r+0x228>)
 8005d2c:	a904      	add	r1, sp, #16
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f000 f888 	bl	8005e44 <_printf_i>
 8005d34:	e7ec      	b.n	8005d10 <_vfiprintf_r+0x1e4>
 8005d36:	bf00      	nop
 8005d38:	080064f4 	.word	0x080064f4
 8005d3c:	08006534 	.word	0x08006534
 8005d40:	08006514 	.word	0x08006514
 8005d44:	080064d4 	.word	0x080064d4
 8005d48:	0800653a 	.word	0x0800653a
 8005d4c:	0800653e 	.word	0x0800653e
 8005d50:	00000000 	.word	0x00000000
 8005d54:	08005b07 	.word	0x08005b07

08005d58 <_printf_common>:
 8005d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	4691      	mov	r9, r2
 8005d5e:	461f      	mov	r7, r3
 8005d60:	688a      	ldr	r2, [r1, #8]
 8005d62:	690b      	ldr	r3, [r1, #16]
 8005d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	bfb8      	it	lt
 8005d6c:	4613      	movlt	r3, r2
 8005d6e:	f8c9 3000 	str.w	r3, [r9]
 8005d72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d76:	4606      	mov	r6, r0
 8005d78:	460c      	mov	r4, r1
 8005d7a:	b112      	cbz	r2, 8005d82 <_printf_common+0x2a>
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	f8c9 3000 	str.w	r3, [r9]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	0699      	lsls	r1, r3, #26
 8005d86:	bf42      	ittt	mi
 8005d88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d8c:	3302      	addmi	r3, #2
 8005d8e:	f8c9 3000 	strmi.w	r3, [r9]
 8005d92:	6825      	ldr	r5, [r4, #0]
 8005d94:	f015 0506 	ands.w	r5, r5, #6
 8005d98:	d107      	bne.n	8005daa <_printf_common+0x52>
 8005d9a:	f104 0a19 	add.w	sl, r4, #25
 8005d9e:	68e3      	ldr	r3, [r4, #12]
 8005da0:	f8d9 2000 	ldr.w	r2, [r9]
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	42ab      	cmp	r3, r5
 8005da8:	dc28      	bgt.n	8005dfc <_printf_common+0xa4>
 8005daa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005dae:	6822      	ldr	r2, [r4, #0]
 8005db0:	3300      	adds	r3, #0
 8005db2:	bf18      	it	ne
 8005db4:	2301      	movne	r3, #1
 8005db6:	0692      	lsls	r2, r2, #26
 8005db8:	d42d      	bmi.n	8005e16 <_printf_common+0xbe>
 8005dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	47c0      	blx	r8
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d020      	beq.n	8005e0a <_printf_common+0xb2>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	68e5      	ldr	r5, [r4, #12]
 8005dcc:	f8d9 2000 	ldr.w	r2, [r9]
 8005dd0:	f003 0306 	and.w	r3, r3, #6
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	bf08      	it	eq
 8005dd8:	1aad      	subeq	r5, r5, r2
 8005dda:	68a3      	ldr	r3, [r4, #8]
 8005ddc:	6922      	ldr	r2, [r4, #16]
 8005dde:	bf0c      	ite	eq
 8005de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de4:	2500      	movne	r5, #0
 8005de6:	4293      	cmp	r3, r2
 8005de8:	bfc4      	itt	gt
 8005dea:	1a9b      	subgt	r3, r3, r2
 8005dec:	18ed      	addgt	r5, r5, r3
 8005dee:	f04f 0900 	mov.w	r9, #0
 8005df2:	341a      	adds	r4, #26
 8005df4:	454d      	cmp	r5, r9
 8005df6:	d11a      	bne.n	8005e2e <_printf_common+0xd6>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e008      	b.n	8005e0e <_printf_common+0xb6>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4652      	mov	r2, sl
 8005e00:	4639      	mov	r1, r7
 8005e02:	4630      	mov	r0, r6
 8005e04:	47c0      	blx	r8
 8005e06:	3001      	adds	r0, #1
 8005e08:	d103      	bne.n	8005e12 <_printf_common+0xba>
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e12:	3501      	adds	r5, #1
 8005e14:	e7c3      	b.n	8005d9e <_printf_common+0x46>
 8005e16:	18e1      	adds	r1, r4, r3
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	2030      	movs	r0, #48	; 0x30
 8005e1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e20:	4422      	add	r2, r4
 8005e22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e2a:	3302      	adds	r3, #2
 8005e2c:	e7c5      	b.n	8005dba <_printf_common+0x62>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4622      	mov	r2, r4
 8005e32:	4639      	mov	r1, r7
 8005e34:	4630      	mov	r0, r6
 8005e36:	47c0      	blx	r8
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d0e6      	beq.n	8005e0a <_printf_common+0xb2>
 8005e3c:	f109 0901 	add.w	r9, r9, #1
 8005e40:	e7d8      	b.n	8005df4 <_printf_common+0x9c>
	...

08005e44 <_printf_i>:
 8005e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	7e09      	ldrb	r1, [r1, #24]
 8005e50:	b085      	sub	sp, #20
 8005e52:	296e      	cmp	r1, #110	; 0x6e
 8005e54:	4617      	mov	r7, r2
 8005e56:	4606      	mov	r6, r0
 8005e58:	4698      	mov	r8, r3
 8005e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e5c:	f000 80b3 	beq.w	8005fc6 <_printf_i+0x182>
 8005e60:	d822      	bhi.n	8005ea8 <_printf_i+0x64>
 8005e62:	2963      	cmp	r1, #99	; 0x63
 8005e64:	d036      	beq.n	8005ed4 <_printf_i+0x90>
 8005e66:	d80a      	bhi.n	8005e7e <_printf_i+0x3a>
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	f000 80b9 	beq.w	8005fe0 <_printf_i+0x19c>
 8005e6e:	2958      	cmp	r1, #88	; 0x58
 8005e70:	f000 8083 	beq.w	8005f7a <_printf_i+0x136>
 8005e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e7c:	e032      	b.n	8005ee4 <_printf_i+0xa0>
 8005e7e:	2964      	cmp	r1, #100	; 0x64
 8005e80:	d001      	beq.n	8005e86 <_printf_i+0x42>
 8005e82:	2969      	cmp	r1, #105	; 0x69
 8005e84:	d1f6      	bne.n	8005e74 <_printf_i+0x30>
 8005e86:	6820      	ldr	r0, [r4, #0]
 8005e88:	6813      	ldr	r3, [r2, #0]
 8005e8a:	0605      	lsls	r5, r0, #24
 8005e8c:	f103 0104 	add.w	r1, r3, #4
 8005e90:	d52a      	bpl.n	8005ee8 <_printf_i+0xa4>
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6011      	str	r1, [r2, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	da03      	bge.n	8005ea2 <_printf_i+0x5e>
 8005e9a:	222d      	movs	r2, #45	; 0x2d
 8005e9c:	425b      	negs	r3, r3
 8005e9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ea2:	486f      	ldr	r0, [pc, #444]	; (8006060 <_printf_i+0x21c>)
 8005ea4:	220a      	movs	r2, #10
 8005ea6:	e039      	b.n	8005f1c <_printf_i+0xd8>
 8005ea8:	2973      	cmp	r1, #115	; 0x73
 8005eaa:	f000 809d 	beq.w	8005fe8 <_printf_i+0x1a4>
 8005eae:	d808      	bhi.n	8005ec2 <_printf_i+0x7e>
 8005eb0:	296f      	cmp	r1, #111	; 0x6f
 8005eb2:	d020      	beq.n	8005ef6 <_printf_i+0xb2>
 8005eb4:	2970      	cmp	r1, #112	; 0x70
 8005eb6:	d1dd      	bne.n	8005e74 <_printf_i+0x30>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	f043 0320 	orr.w	r3, r3, #32
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	e003      	b.n	8005eca <_printf_i+0x86>
 8005ec2:	2975      	cmp	r1, #117	; 0x75
 8005ec4:	d017      	beq.n	8005ef6 <_printf_i+0xb2>
 8005ec6:	2978      	cmp	r1, #120	; 0x78
 8005ec8:	d1d4      	bne.n	8005e74 <_printf_i+0x30>
 8005eca:	2378      	movs	r3, #120	; 0x78
 8005ecc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ed0:	4864      	ldr	r0, [pc, #400]	; (8006064 <_printf_i+0x220>)
 8005ed2:	e055      	b.n	8005f80 <_printf_i+0x13c>
 8005ed4:	6813      	ldr	r3, [r2, #0]
 8005ed6:	1d19      	adds	r1, r3, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6011      	str	r1, [r2, #0]
 8005edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e08c      	b.n	8006002 <_printf_i+0x1be>
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6011      	str	r1, [r2, #0]
 8005eec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ef0:	bf18      	it	ne
 8005ef2:	b21b      	sxthne	r3, r3
 8005ef4:	e7cf      	b.n	8005e96 <_printf_i+0x52>
 8005ef6:	6813      	ldr	r3, [r2, #0]
 8005ef8:	6825      	ldr	r5, [r4, #0]
 8005efa:	1d18      	adds	r0, r3, #4
 8005efc:	6010      	str	r0, [r2, #0]
 8005efe:	0628      	lsls	r0, r5, #24
 8005f00:	d501      	bpl.n	8005f06 <_printf_i+0xc2>
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	e002      	b.n	8005f0c <_printf_i+0xc8>
 8005f06:	0668      	lsls	r0, r5, #25
 8005f08:	d5fb      	bpl.n	8005f02 <_printf_i+0xbe>
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	4854      	ldr	r0, [pc, #336]	; (8006060 <_printf_i+0x21c>)
 8005f0e:	296f      	cmp	r1, #111	; 0x6f
 8005f10:	bf14      	ite	ne
 8005f12:	220a      	movne	r2, #10
 8005f14:	2208      	moveq	r2, #8
 8005f16:	2100      	movs	r1, #0
 8005f18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f1c:	6865      	ldr	r5, [r4, #4]
 8005f1e:	60a5      	str	r5, [r4, #8]
 8005f20:	2d00      	cmp	r5, #0
 8005f22:	f2c0 8095 	blt.w	8006050 <_printf_i+0x20c>
 8005f26:	6821      	ldr	r1, [r4, #0]
 8005f28:	f021 0104 	bic.w	r1, r1, #4
 8005f2c:	6021      	str	r1, [r4, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d13d      	bne.n	8005fae <_printf_i+0x16a>
 8005f32:	2d00      	cmp	r5, #0
 8005f34:	f040 808e 	bne.w	8006054 <_printf_i+0x210>
 8005f38:	4665      	mov	r5, ip
 8005f3a:	2a08      	cmp	r2, #8
 8005f3c:	d10b      	bne.n	8005f56 <_printf_i+0x112>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	07db      	lsls	r3, r3, #31
 8005f42:	d508      	bpl.n	8005f56 <_printf_i+0x112>
 8005f44:	6923      	ldr	r3, [r4, #16]
 8005f46:	6862      	ldr	r2, [r4, #4]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	bfde      	ittt	le
 8005f4c:	2330      	movle	r3, #48	; 0x30
 8005f4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f56:	ebac 0305 	sub.w	r3, ip, r5
 8005f5a:	6123      	str	r3, [r4, #16]
 8005f5c:	f8cd 8000 	str.w	r8, [sp]
 8005f60:	463b      	mov	r3, r7
 8005f62:	aa03      	add	r2, sp, #12
 8005f64:	4621      	mov	r1, r4
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7ff fef6 	bl	8005d58 <_printf_common>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d14d      	bne.n	800600c <_printf_i+0x1c8>
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	b005      	add	sp, #20
 8005f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f7a:	4839      	ldr	r0, [pc, #228]	; (8006060 <_printf_i+0x21c>)
 8005f7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f80:	6813      	ldr	r3, [r2, #0]
 8005f82:	6821      	ldr	r1, [r4, #0]
 8005f84:	1d1d      	adds	r5, r3, #4
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6015      	str	r5, [r2, #0]
 8005f8a:	060a      	lsls	r2, r1, #24
 8005f8c:	d50b      	bpl.n	8005fa6 <_printf_i+0x162>
 8005f8e:	07ca      	lsls	r2, r1, #31
 8005f90:	bf44      	itt	mi
 8005f92:	f041 0120 	orrmi.w	r1, r1, #32
 8005f96:	6021      	strmi	r1, [r4, #0]
 8005f98:	b91b      	cbnz	r3, 8005fa2 <_printf_i+0x15e>
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	f022 0220 	bic.w	r2, r2, #32
 8005fa0:	6022      	str	r2, [r4, #0]
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	e7b7      	b.n	8005f16 <_printf_i+0xd2>
 8005fa6:	064d      	lsls	r5, r1, #25
 8005fa8:	bf48      	it	mi
 8005faa:	b29b      	uxthmi	r3, r3
 8005fac:	e7ef      	b.n	8005f8e <_printf_i+0x14a>
 8005fae:	4665      	mov	r5, ip
 8005fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fb4:	fb02 3311 	mls	r3, r2, r1, r3
 8005fb8:	5cc3      	ldrb	r3, [r0, r3]
 8005fba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	d1f5      	bne.n	8005fb0 <_printf_i+0x16c>
 8005fc4:	e7b9      	b.n	8005f3a <_printf_i+0xf6>
 8005fc6:	6813      	ldr	r3, [r2, #0]
 8005fc8:	6825      	ldr	r5, [r4, #0]
 8005fca:	6961      	ldr	r1, [r4, #20]
 8005fcc:	1d18      	adds	r0, r3, #4
 8005fce:	6010      	str	r0, [r2, #0]
 8005fd0:	0628      	lsls	r0, r5, #24
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	d501      	bpl.n	8005fda <_printf_i+0x196>
 8005fd6:	6019      	str	r1, [r3, #0]
 8005fd8:	e002      	b.n	8005fe0 <_printf_i+0x19c>
 8005fda:	066a      	lsls	r2, r5, #25
 8005fdc:	d5fb      	bpl.n	8005fd6 <_printf_i+0x192>
 8005fde:	8019      	strh	r1, [r3, #0]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	4665      	mov	r5, ip
 8005fe6:	e7b9      	b.n	8005f5c <_printf_i+0x118>
 8005fe8:	6813      	ldr	r3, [r2, #0]
 8005fea:	1d19      	adds	r1, r3, #4
 8005fec:	6011      	str	r1, [r2, #0]
 8005fee:	681d      	ldr	r5, [r3, #0]
 8005ff0:	6862      	ldr	r2, [r4, #4]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f7fa f8eb 	bl	80001d0 <memchr>
 8005ffa:	b108      	cbz	r0, 8006000 <_printf_i+0x1bc>
 8005ffc:	1b40      	subs	r0, r0, r5
 8005ffe:	6060      	str	r0, [r4, #4]
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	2300      	movs	r3, #0
 8006006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800600a:	e7a7      	b.n	8005f5c <_printf_i+0x118>
 800600c:	6923      	ldr	r3, [r4, #16]
 800600e:	462a      	mov	r2, r5
 8006010:	4639      	mov	r1, r7
 8006012:	4630      	mov	r0, r6
 8006014:	47c0      	blx	r8
 8006016:	3001      	adds	r0, #1
 8006018:	d0aa      	beq.n	8005f70 <_printf_i+0x12c>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	079b      	lsls	r3, r3, #30
 800601e:	d413      	bmi.n	8006048 <_printf_i+0x204>
 8006020:	68e0      	ldr	r0, [r4, #12]
 8006022:	9b03      	ldr	r3, [sp, #12]
 8006024:	4298      	cmp	r0, r3
 8006026:	bfb8      	it	lt
 8006028:	4618      	movlt	r0, r3
 800602a:	e7a3      	b.n	8005f74 <_printf_i+0x130>
 800602c:	2301      	movs	r3, #1
 800602e:	464a      	mov	r2, r9
 8006030:	4639      	mov	r1, r7
 8006032:	4630      	mov	r0, r6
 8006034:	47c0      	blx	r8
 8006036:	3001      	adds	r0, #1
 8006038:	d09a      	beq.n	8005f70 <_printf_i+0x12c>
 800603a:	3501      	adds	r5, #1
 800603c:	68e3      	ldr	r3, [r4, #12]
 800603e:	9a03      	ldr	r2, [sp, #12]
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	42ab      	cmp	r3, r5
 8006044:	dcf2      	bgt.n	800602c <_printf_i+0x1e8>
 8006046:	e7eb      	b.n	8006020 <_printf_i+0x1dc>
 8006048:	2500      	movs	r5, #0
 800604a:	f104 0919 	add.w	r9, r4, #25
 800604e:	e7f5      	b.n	800603c <_printf_i+0x1f8>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1ac      	bne.n	8005fae <_printf_i+0x16a>
 8006054:	7803      	ldrb	r3, [r0, #0]
 8006056:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800605a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800605e:	e76c      	b.n	8005f3a <_printf_i+0xf6>
 8006060:	08006545 	.word	0x08006545
 8006064:	08006556 	.word	0x08006556

08006068 <_putc_r>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	460d      	mov	r5, r1
 800606c:	4614      	mov	r4, r2
 800606e:	4606      	mov	r6, r0
 8006070:	b118      	cbz	r0, 800607a <_putc_r+0x12>
 8006072:	6983      	ldr	r3, [r0, #24]
 8006074:	b90b      	cbnz	r3, 800607a <_putc_r+0x12>
 8006076:	f7ff fb99 	bl	80057ac <__sinit>
 800607a:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <_putc_r+0x60>)
 800607c:	429c      	cmp	r4, r3
 800607e:	d112      	bne.n	80060a6 <_putc_r+0x3e>
 8006080:	6874      	ldr	r4, [r6, #4]
 8006082:	68a3      	ldr	r3, [r4, #8]
 8006084:	3b01      	subs	r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	60a3      	str	r3, [r4, #8]
 800608a:	da16      	bge.n	80060ba <_putc_r+0x52>
 800608c:	69a2      	ldr	r2, [r4, #24]
 800608e:	4293      	cmp	r3, r2
 8006090:	db02      	blt.n	8006098 <_putc_r+0x30>
 8006092:	b2eb      	uxtb	r3, r5
 8006094:	2b0a      	cmp	r3, #10
 8006096:	d110      	bne.n	80060ba <_putc_r+0x52>
 8006098:	4622      	mov	r2, r4
 800609a:	4629      	mov	r1, r5
 800609c:	4630      	mov	r0, r6
 800609e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060a2:	f7ff b9d3 	b.w	800544c <__swbuf_r>
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <_putc_r+0x64>)
 80060a8:	429c      	cmp	r4, r3
 80060aa:	d101      	bne.n	80060b0 <_putc_r+0x48>
 80060ac:	68b4      	ldr	r4, [r6, #8]
 80060ae:	e7e8      	b.n	8006082 <_putc_r+0x1a>
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <_putc_r+0x68>)
 80060b2:	429c      	cmp	r4, r3
 80060b4:	bf08      	it	eq
 80060b6:	68f4      	ldreq	r4, [r6, #12]
 80060b8:	e7e3      	b.n	8006082 <_putc_r+0x1a>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	6022      	str	r2, [r4, #0]
 80060c0:	701d      	strb	r5, [r3, #0]
 80060c2:	b2e8      	uxtb	r0, r5
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	bf00      	nop
 80060c8:	080064f4 	.word	0x080064f4
 80060cc:	08006514 	.word	0x08006514
 80060d0:	080064d4 	.word	0x080064d4

080060d4 <_sbrk_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4c06      	ldr	r4, [pc, #24]	; (80060f0 <_sbrk_r+0x1c>)
 80060d8:	2300      	movs	r3, #0
 80060da:	4605      	mov	r5, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	f7fb ff16 	bl	8001f10 <_sbrk>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_sbrk_r+0x1a>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_sbrk_r+0x1a>
 80060ec:	602b      	str	r3, [r5, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	2000044c 	.word	0x2000044c

080060f4 <__sread>:
 80060f4:	b510      	push	{r4, lr}
 80060f6:	460c      	mov	r4, r1
 80060f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fc:	f000 f896 	bl	800622c <_read_r>
 8006100:	2800      	cmp	r0, #0
 8006102:	bfab      	itete	ge
 8006104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006106:	89a3      	ldrhlt	r3, [r4, #12]
 8006108:	181b      	addge	r3, r3, r0
 800610a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800610e:	bfac      	ite	ge
 8006110:	6563      	strge	r3, [r4, #84]	; 0x54
 8006112:	81a3      	strhlt	r3, [r4, #12]
 8006114:	bd10      	pop	{r4, pc}

08006116 <__swrite>:
 8006116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611a:	461f      	mov	r7, r3
 800611c:	898b      	ldrh	r3, [r1, #12]
 800611e:	05db      	lsls	r3, r3, #23
 8006120:	4605      	mov	r5, r0
 8006122:	460c      	mov	r4, r1
 8006124:	4616      	mov	r6, r2
 8006126:	d505      	bpl.n	8006134 <__swrite+0x1e>
 8006128:	2302      	movs	r3, #2
 800612a:	2200      	movs	r2, #0
 800612c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006130:	f000 f868 	bl	8006204 <_lseek_r>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800613a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	4632      	mov	r2, r6
 8006142:	463b      	mov	r3, r7
 8006144:	4628      	mov	r0, r5
 8006146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800614a:	f000 b817 	b.w	800617c <_write_r>

0800614e <__sseek>:
 800614e:	b510      	push	{r4, lr}
 8006150:	460c      	mov	r4, r1
 8006152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006156:	f000 f855 	bl	8006204 <_lseek_r>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	bf15      	itete	ne
 8006160:	6560      	strne	r0, [r4, #84]	; 0x54
 8006162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800616a:	81a3      	strheq	r3, [r4, #12]
 800616c:	bf18      	it	ne
 800616e:	81a3      	strhne	r3, [r4, #12]
 8006170:	bd10      	pop	{r4, pc}

08006172 <__sclose>:
 8006172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006176:	f000 b813 	b.w	80061a0 <_close_r>
	...

0800617c <_write_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4c07      	ldr	r4, [pc, #28]	; (800619c <_write_r+0x20>)
 8006180:	4605      	mov	r5, r0
 8006182:	4608      	mov	r0, r1
 8006184:	4611      	mov	r1, r2
 8006186:	2200      	movs	r2, #0
 8006188:	6022      	str	r2, [r4, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	f7fb fe6f 	bl	8001e6e <_write>
 8006190:	1c43      	adds	r3, r0, #1
 8006192:	d102      	bne.n	800619a <_write_r+0x1e>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	b103      	cbz	r3, 800619a <_write_r+0x1e>
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	2000044c 	.word	0x2000044c

080061a0 <_close_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4c06      	ldr	r4, [pc, #24]	; (80061bc <_close_r+0x1c>)
 80061a4:	2300      	movs	r3, #0
 80061a6:	4605      	mov	r5, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	6023      	str	r3, [r4, #0]
 80061ac:	f7fb fe7b 	bl	8001ea6 <_close>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d102      	bne.n	80061ba <_close_r+0x1a>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	b103      	cbz	r3, 80061ba <_close_r+0x1a>
 80061b8:	602b      	str	r3, [r5, #0]
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	2000044c 	.word	0x2000044c

080061c0 <_fstat_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4c07      	ldr	r4, [pc, #28]	; (80061e0 <_fstat_r+0x20>)
 80061c4:	2300      	movs	r3, #0
 80061c6:	4605      	mov	r5, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	f7fb fe76 	bl	8001ebe <_fstat>
 80061d2:	1c43      	adds	r3, r0, #1
 80061d4:	d102      	bne.n	80061dc <_fstat_r+0x1c>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	b103      	cbz	r3, 80061dc <_fstat_r+0x1c>
 80061da:	602b      	str	r3, [r5, #0]
 80061dc:	bd38      	pop	{r3, r4, r5, pc}
 80061de:	bf00      	nop
 80061e0:	2000044c 	.word	0x2000044c

080061e4 <_isatty_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4c06      	ldr	r4, [pc, #24]	; (8006200 <_isatty_r+0x1c>)
 80061e8:	2300      	movs	r3, #0
 80061ea:	4605      	mov	r5, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	f7fb fe75 	bl	8001ede <_isatty>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_isatty_r+0x1a>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_isatty_r+0x1a>
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	2000044c 	.word	0x2000044c

08006204 <_lseek_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4c07      	ldr	r4, [pc, #28]	; (8006224 <_lseek_r+0x20>)
 8006208:	4605      	mov	r5, r0
 800620a:	4608      	mov	r0, r1
 800620c:	4611      	mov	r1, r2
 800620e:	2200      	movs	r2, #0
 8006210:	6022      	str	r2, [r4, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	f7fb fe6e 	bl	8001ef4 <_lseek>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_lseek_r+0x1e>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	b103      	cbz	r3, 8006222 <_lseek_r+0x1e>
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	2000044c 	.word	0x2000044c

08006228 <__malloc_lock>:
 8006228:	4770      	bx	lr

0800622a <__malloc_unlock>:
 800622a:	4770      	bx	lr

0800622c <_read_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4c07      	ldr	r4, [pc, #28]	; (800624c <_read_r+0x20>)
 8006230:	4605      	mov	r5, r0
 8006232:	4608      	mov	r0, r1
 8006234:	4611      	mov	r1, r2
 8006236:	2200      	movs	r2, #0
 8006238:	6022      	str	r2, [r4, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	f7fb fdfa 	bl	8001e34 <_read>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_read_r+0x1e>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	b103      	cbz	r3, 800624a <_read_r+0x1e>
 8006248:	602b      	str	r3, [r5, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	2000044c 	.word	0x2000044c

08006250 <_init>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	bf00      	nop
 8006254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006256:	bc08      	pop	{r3}
 8006258:	469e      	mov	lr, r3
 800625a:	4770      	bx	lr

0800625c <_fini>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	bf00      	nop
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr
