
murakumo_special.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800b128  0800b128  0001b128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b630  0800b630  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b630  0800b630  0001b630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b638  0800b638  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b638  0800b638  0001b638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b63c  0800b63c  0001b63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001e0  0800b81c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800b81c  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013024  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025bc  00000000  00000000  00033230  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  000357f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  00036b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021862  00000000  00000000  00037d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dacf  00000000  00000000  000595b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9855  00000000  00000000  00067081  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001308d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006504  00000000  00000000  00130954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b110 	.word	0x0800b110

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b110 	.word	0x0800b110

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <read_byte>:
volatile Inertial inertial_offset;

Coordinate COORDINATE_ZERO;

uint8_t read_byte( uint8_t reg )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <read_byte+0x54>)
 8000fa4:	f002 ff4c 	bl	8003e40 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8000fa8:	f107 010f 	add.w	r1, r7, #15
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	2201      	movs	r2, #1
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <read_byte+0x58>)
 8000fb2:	f003 fd5b 	bl	8004a6c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8000fb6:	f107 010e 	add.w	r1, r7, #14
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <read_byte+0x58>)
 8000fc0:	f003 fe88 	bl	8004cd4 <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <read_byte+0x54>)
 8000fcc:	f002 ff38 	bl	8003e40 <HAL_GPIO_WritePin>
#endif

	return val;
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20000240 	.word	0x20000240

08000fe4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <write_byte+0x54>)
 8001006:	f002 ff1b 	bl	8003e40 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800100a:	f107 010f 	add.w	r1, r7, #15
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	2201      	movs	r2, #1
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <write_byte+0x58>)
 8001014:	f003 fd2a 	bl	8004a6c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001018:	1db9      	adds	r1, r7, #6
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	2201      	movs	r2, #1
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <write_byte+0x58>)
 8001020:	f003 fd24 	bl	8004a6c <HAL_SPI_Transmit>
#if USE_NCS
	CS_SET;
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <write_byte+0x54>)
 800102c:	f002 ff08 	bl	8003e40 <HAL_GPIO_WritePin>
#endif
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40020400 	.word	0x40020400
 800103c:	20000240 	.word	0x20000240

08001040 <IMU_init>:

uint8_t IMU_init(uint8_t* wai)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104e:	482e      	ldr	r0, [pc, #184]	; (8001108 <IMU_init+0xc8>)
 8001050:	f002 fef6 	bl	8003e40 <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]

	COORDINATE_ZERO.x = 0;
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <IMU_init+0xcc>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
	COORDINATE_ZERO.y = 0;
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <IMU_init+0xcc>)
 8001060:	2200      	movs	r2, #0
 8001062:	805a      	strh	r2, [r3, #2]
	COORDINATE_ZERO.z = 0;
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <IMU_init+0xcc>)
 8001066:	2200      	movs	r2, #0
 8001068:	809a      	strh	r2, [r3, #4]

#if	INIT_ZERO
	inertial.accel = COORDINATE_ZERO;
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <IMU_init+0xd0>)
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <IMU_init+0xcc>)
 800106e:	6811      	ldr	r1, [r2, #0]
 8001070:	6019      	str	r1, [r3, #0]
 8001072:	8892      	ldrh	r2, [r2, #4]
 8001074:	809a      	strh	r2, [r3, #4]
	inertial.gyro = COORDINATE_ZERO;
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <IMU_init+0xd0>)
 8001078:	4a24      	ldr	r2, [pc, #144]	; (800110c <IMU_init+0xcc>)
 800107a:	3306      	adds	r3, #6
 800107c:	6811      	ldr	r1, [r2, #0]
 800107e:	6019      	str	r1, [r3, #0]
 8001080:	8892      	ldrh	r2, [r2, #4]
 8001082:	809a      	strh	r2, [r3, #4]
	displacement.position = COORDINATE_ZERO;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <IMU_init+0xd4>)
 8001086:	4a21      	ldr	r2, [pc, #132]	; (800110c <IMU_init+0xcc>)
 8001088:	6811      	ldr	r1, [r2, #0]
 800108a:	6019      	str	r1, [r3, #0]
 800108c:	8892      	ldrh	r2, [r2, #4]
 800108e:	809a      	strh	r2, [r3, #4]
	displacement.theta = COORDINATE_ZERO;
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <IMU_init+0xd4>)
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <IMU_init+0xcc>)
 8001094:	3306      	adds	r3, #6
 8001096:	6811      	ldr	r1, [r2, #0]
 8001098:	6019      	str	r1, [r3, #0]
 800109a:	8892      	ldrh	r2, [r2, #4]
 800109c:	809a      	strh	r2, [r3, #4]
	xa = 0;
	ya = 0;
	za = 0;
	*/

	who_am_i = read_byte(0x00);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff72 	bl	8000f88 <read_byte>
 80010a4:	4603      	mov	r3, r0
 80010a6:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7bba      	ldrb	r2, [r7, #14]
 80010ac:	701a      	strb	r2, [r3, #0]
	if ( who_am_i == 0xE0 )
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	2be0      	cmp	r3, #224	; 0xe0
 80010b2:	d11e      	bne.n	80010f2 <IMU_init+0xb2>
	{	// ICM-20648 is 0xE0
		ret = 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
		write_byte(PWR_MGMT_1,0x01);	//PWR_MGMT_1
 80010b8:	2101      	movs	r1, #1
 80010ba:	2006      	movs	r0, #6
 80010bc:	f7ff ff92 	bl	8000fe4 <write_byte>
		HAL_Delay(100);
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f001 fe8d 	bl	8002de0 <HAL_Delay>
		write_byte(USER_CTRL,0x10);	//USER_CTRL
 80010c6:	2110      	movs	r1, #16
 80010c8:	2003      	movs	r0, #3
 80010ca:	f7ff ff8b 	bl	8000fe4 <write_byte>
		write_byte(REG_BANK_SEL,0x20);	//USER_BANK2
 80010ce:	2120      	movs	r1, #32
 80010d0:	207f      	movs	r0, #127	; 0x7f
 80010d2:	f7ff ff87 	bl	8000fe4 <write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 80010d6:	2107      	movs	r1, #7
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff ff83 	bl	8000fe4 <write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		write_byte(0x14,0x00);	//range±2g
 80010de:	2100      	movs	r1, #0
 80010e0:	2014      	movs	r0, #20
 80010e2:	f7ff ff7f 	bl	8000fe4 <write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(REG_BANK_SEL,0x00);	//USER_BANK0
 80010e6:	2100      	movs	r1, #0
 80010e8:	207f      	movs	r0, #127	; 0x7f
 80010ea:	f7ff ff7b 	bl	8000fe4 <write_byte>
		IMU_set_offset();
 80010ee:	f000 f813 	bl	8001118 <IMU_set_offset>
	}
#if USE_NCS
	CS_SET;
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <IMU_init+0xc8>)
 80010fa:	f002 fea1 	bl	8003e40 <HAL_GPIO_WritePin>
#endif
	return ret;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020400 	.word	0x40020400
 800110c:	20000208 	.word	0x20000208
 8001110:	20000228 	.word	0x20000228
 8001114:	2000021c 	.word	0x2000021c

08001118 <IMU_set_offset>:
	CS_SET;
#endif
}

void IMU_set_offset()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	IMU_read();
 800111c:	f000 f80e 	bl	800113c <IMU_read>
	inertial_offset = inertial;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <IMU_set_offset+0x1c>)
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <IMU_set_offset+0x20>)
 8001124:	6810      	ldr	r0, [r2, #0]
 8001126:	6851      	ldr	r1, [r2, #4]
 8001128:	6892      	ldr	r2, [r2, #8]
 800112a:	6018      	str	r0, [r3, #0]
 800112c:	6059      	str	r1, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000210 	.word	0x20000210
 8001138:	20000228 	.word	0x20000228

0800113c <IMU_read>:

void IMU_read()
{
 800113c:	b598      	push	{r3, r4, r7, lr}
 800113e:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)read_byte(ACCEL_XOUT_L));
 8001140:	202d      	movs	r0, #45	; 0x2d
 8001142:	f7ff ff21 	bl	8000f88 <read_byte>
 8001146:	4603      	mov	r3, r0
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21c      	sxth	r4, r3
 800114c:	202e      	movs	r0, #46	; 0x2e
 800114e:	f7ff ff1b 	bl	8000f88 <read_byte>
 8001152:	4603      	mov	r3, r0
 8001154:	b21b      	sxth	r3, r3
 8001156:	4323      	orrs	r3, r4
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <IMU_read+0xbc>)
 800115c:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)read_byte(ACCEL_YOUT_L));
 800115e:	202f      	movs	r0, #47	; 0x2f
 8001160:	f7ff ff12 	bl	8000f88 <read_byte>
 8001164:	4603      	mov	r3, r0
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21c      	sxth	r4, r3
 800116a:	2030      	movs	r0, #48	; 0x30
 800116c:	f7ff ff0c 	bl	8000f88 <read_byte>
 8001170:	4603      	mov	r3, r0
 8001172:	b21b      	sxth	r3, r3
 8001174:	4323      	orrs	r3, r4
 8001176:	b21a      	sxth	r2, r3
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <IMU_read+0xbc>)
 800117a:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)read_byte(ACCEL_ZOUT_L));
 800117c:	2031      	movs	r0, #49	; 0x31
 800117e:	f7ff ff03 	bl	8000f88 <read_byte>
 8001182:	4603      	mov	r3, r0
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21c      	sxth	r4, r3
 8001188:	2032      	movs	r0, #50	; 0x32
 800118a:	f7ff fefd 	bl	8000f88 <read_byte>
 800118e:	4603      	mov	r3, r0
 8001190:	b21b      	sxth	r3, r3
 8001192:	4323      	orrs	r3, r4
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <IMU_read+0xbc>)
 8001198:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)read_byte(GYRO_XOUT_H) << 8) | ((int16_t)read_byte(GYRO_XOUT_L));
 800119a:	2033      	movs	r0, #51	; 0x33
 800119c:	f7ff fef4 	bl	8000f88 <read_byte>
 80011a0:	4603      	mov	r3, r0
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21c      	sxth	r4, r3
 80011a6:	2034      	movs	r0, #52	; 0x34
 80011a8:	f7ff feee 	bl	8000f88 <read_byte>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4323      	orrs	r3, r4
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <IMU_read+0xbc>)
 80011b6:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)read_byte(GYRO_YOUT_H) << 8) | ((int16_t)read_byte(GYRO_YOUT_L));
 80011b8:	2035      	movs	r0, #53	; 0x35
 80011ba:	f7ff fee5 	bl	8000f88 <read_byte>
 80011be:	4603      	mov	r3, r0
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b21c      	sxth	r4, r3
 80011c4:	2036      	movs	r0, #54	; 0x36
 80011c6:	f7ff fedf 	bl	8000f88 <read_byte>
 80011ca:	4603      	mov	r3, r0
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4323      	orrs	r3, r4
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <IMU_read+0xbc>)
 80011d4:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)read_byte(GYRO_ZOUT_L));
 80011d6:	2037      	movs	r0, #55	; 0x37
 80011d8:	f7ff fed6 	bl	8000f88 <read_byte>
 80011dc:	4603      	mov	r3, r0
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21c      	sxth	r4, r3
 80011e2:	2038      	movs	r0, #56	; 0x38
 80011e4:	f7ff fed0 	bl	8000f88 <read_byte>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4323      	orrs	r3, r4
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	4b01      	ldr	r3, [pc, #4]	; (80011f8 <IMU_read+0xbc>)
 80011f2:	815a      	strh	r2, [r3, #10]
}
 80011f4:	bf00      	nop
 80011f6:	bd98      	pop	{r3, r4, r7, pc}
 80011f8:	20000228 	.word	0x20000228

080011fc <Inertial_Integral>:

void Inertial_Integral(Displacement *a)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	IMU_read();
 8001204:	f7ff ff9a 	bl	800113c <IMU_read>
	a->position.x += inertial.accel.x;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <Inertial_Integral+0xb0>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b219      	sxth	r1, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001214:	b29a      	uxth	r2, r3
 8001216:	b28b      	uxth	r3, r1
 8001218:	4413      	add	r3, r2
 800121a:	b29b      	uxth	r3, r3
 800121c:	b21a      	sxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	801a      	strh	r2, [r3, #0]
	a->position.y += inertial.accel.y;
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <Inertial_Integral+0xb0>)
 8001224:	885b      	ldrh	r3, [r3, #2]
 8001226:	b219      	sxth	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800122e:	b29a      	uxth	r2, r3
 8001230:	b28b      	uxth	r3, r1
 8001232:	4413      	add	r3, r2
 8001234:	b29b      	uxth	r3, r3
 8001236:	b21a      	sxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	805a      	strh	r2, [r3, #2]
	a->position.z += inertial.accel.z;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <Inertial_Integral+0xb0>)
 800123e:	889b      	ldrh	r3, [r3, #4]
 8001240:	b219      	sxth	r1, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001248:	b29a      	uxth	r2, r3
 800124a:	b28b      	uxth	r3, r1
 800124c:	4413      	add	r3, r2
 800124e:	b29b      	uxth	r3, r3
 8001250:	b21a      	sxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	809a      	strh	r2, [r3, #4]
	a->theta.x += inertial.gyro.x;
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <Inertial_Integral+0xb0>)
 8001258:	88db      	ldrh	r3, [r3, #6]
 800125a:	b219      	sxth	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001262:	b29a      	uxth	r2, r3
 8001264:	b28b      	uxth	r3, r1
 8001266:	4413      	add	r3, r2
 8001268:	b29b      	uxth	r3, r3
 800126a:	b21a      	sxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	80da      	strh	r2, [r3, #6]
	a->theta.y += inertial.gyro.y;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <Inertial_Integral+0xb0>)
 8001272:	891b      	ldrh	r3, [r3, #8]
 8001274:	b219      	sxth	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800127c:	b29a      	uxth	r2, r3
 800127e:	b28b      	uxth	r3, r1
 8001280:	4413      	add	r3, r2
 8001282:	b29b      	uxth	r3, r3
 8001284:	b21a      	sxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	811a      	strh	r2, [r3, #8]
	a->theta.z += inertial.gyro.z;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <Inertial_Integral+0xb0>)
 800128c:	895b      	ldrh	r3, [r3, #10]
 800128e:	b219      	sxth	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001296:	b29a      	uxth	r2, r3
 8001298:	b28b      	uxth	r3, r1
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	b21a      	sxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	815a      	strh	r2, [r3, #10]
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000228 	.word	0x20000228

080012b0 <Coordinate_Init>:

void Coordinate_Init(Coordinate *a)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	a->x = 0;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	801a      	strh	r2, [r3, #0]
	a->y = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	805a      	strh	r2, [r3, #2]
	a->z = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	809a      	strh	r2, [r3, #4]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_TIM_PeriodElapsedCallback>:
void IMU_Displacement_printf(Displacement*);
void IMU_print();
#endif
double low_pass_filter(double val, double pre_val, double gamma);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4aac      	ldr	r2, [pc, #688]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	f040 80df 	bne.w	80014ac <HAL_TIM_PeriodElapsedCallback+0x1d4>
		if (motorenable)
 80012ee:	4bab      	ldr	r3, [pc, #684]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d04a      	beq.n	800138c <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
#if USE_IMU
			degree = displacement.theta.z;
 80012f6:	4baa      	ldr	r3, [pc, #680]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80012f8:	895b      	ldrh	r3, [r3, #10]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	4ba9      	ldr	r3, [pc, #676]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001300:	601a      	str	r2, [r3, #0]
			degree_error = TARGET_DEGREE - degree;
 8001302:	4ba9      	ldr	r3, [pc, #676]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4ba7      	ldr	r3, [pc, #668]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	4aa7      	ldr	r2, [pc, #668]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800130e:	6013      	str	r3, [r2, #0]
			s_degree = s_degree + degree;
 8001310:	4ba7      	ldr	r3, [pc, #668]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4ba3      	ldr	r3, [pc, #652]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4413      	add	r3, r2
 800131a:	4aa5      	ldr	r2, [pc, #660]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800131c:	6013      	str	r3, [r2, #0]
			leftmotor = 0 - (KP1 * degree_error - KD1 * (degree - before_degree) + KI1 * s_degree);
 800131e:	4ba3      	ldr	r3, [pc, #652]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80015b4 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80015b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001336:	ee77 7a87 	vadd.f32	s15, s15, s14
 800133a:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80015b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800133e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001342:	ee17 0a90 	vmov	r0, s15
 8001346:	f7ff f8ff 	bl	8000548 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	499b      	ldr	r1, [pc, #620]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001350:	e9c1 2300 	strd	r2, r3, [r1]
			rightmotor = 0 + (KP1 * degree_error - KD1 * (degree - before_degree) + KI1 * s_degree);
 8001354:	4b95      	ldr	r3, [pc, #596]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001360:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80015b4 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8001364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001368:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80015b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800136c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001370:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80015b8 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001378:	ee17 0a90 	vmov	r0, s15
 800137c:	f7ff f8e4 	bl	8000548 <__aeabi_f2d>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	498e      	ldr	r1, [pc, #568]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001386:	e9c1 2300 	strd	r2, r3, [r1]
 800138a:	e00d      	b.n	80013a8 <HAL_TIM_PeriodElapsedCallback+0xd0>
#endif
		}
		else	// if(motorenable)
		{
			leftmotor = 0;
 800138c:	498b      	ldr	r1, [pc, #556]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	e9c1 2300 	strd	r2, r3, [r1]
			rightmotor = 0;
 800139a:	4989      	ldr	r1, [pc, #548]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	e9c1 2300 	strd	r2, r3, [r1]
		}
#if USE_MOTOR

		if (leftmotor < 0) {
 80013a8:	4b84      	ldr	r3, [pc, #528]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80013aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	f7ff fb91 	bl	8000adc <__aeabi_dcmplt>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00e      	beq.n	80013de <HAL_TIM_PeriodElapsedCallback+0x106>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2104      	movs	r1, #4
 80013c4:	487f      	ldr	r0, [pc, #508]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80013c6:	f002 fd3b 	bl	8003e40 <HAL_GPIO_WritePin>
			leftmotor = leftmotor * -1;
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	4690      	mov	r8, r2
 80013d2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80013d6:	4b79      	ldr	r3, [pc, #484]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80013d8:	e9c3 8900 	strd	r8, r9, [r3]
 80013dc:	e004      	b.n	80013e8 <HAL_TIM_PeriodElapsedCallback+0x110>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	2104      	movs	r1, #4
 80013e2:	4878      	ldr	r0, [pc, #480]	; (80015c4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80013e4:	f002 fd2c 	bl	8003e40 <HAL_GPIO_WritePin>
		}

		if (rightmotor < 0) {
 80013e8:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80013ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	f7ff fb71 	bl	8000adc <__aeabi_dcmplt>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00f      	beq.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x148>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001406:	4870      	ldr	r0, [pc, #448]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001408:	f002 fd1a 	bl	8003e40 <HAL_GPIO_WritePin>
			rightmotor = rightmotor * -1;
 800140c:	4b6c      	ldr	r3, [pc, #432]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	4614      	mov	r4, r2
 8001414:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001418:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800141a:	e9c3 4500 	strd	r4, r5, [r3]
 800141e:	e005      	b.n	800142c <HAL_TIM_PeriodElapsedCallback+0x154>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001426:	4868      	ldr	r0, [pc, #416]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001428:	f002 fd0a 	bl	8003e40 <HAL_GPIO_WritePin>
		}

		leftmotor = leftmotor > PWMMAX ? PWMMAX : leftmotor;
 800142c:	4b63      	ldr	r3, [pc, #396]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800142e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b65      	ldr	r3, [pc, #404]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001438:	f7ff fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_TIM_PeriodElapsedCallback+0x172>
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	4c61      	ldr	r4, [pc, #388]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001448:	e002      	b.n	8001450 <HAL_TIM_PeriodElapsedCallback+0x178>
 800144a:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800144c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001450:	4a5a      	ldr	r2, [pc, #360]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001452:	e9c2 3400 	strd	r3, r4, [r2]
		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 8001456:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001458:	e9d3 0100 	ldrd	r0, r1, [r3]
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b5a      	ldr	r3, [pc, #360]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001462:	f7ff fb59 	bl	8000b18 <__aeabi_dcmpgt>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_TIM_PeriodElapsedCallback+0x19c>
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	4c56      	ldr	r4, [pc, #344]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001472:	e002      	b.n	800147a <HAL_TIM_PeriodElapsedCallback+0x1a2>
 8001474:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001476:	e9d3 3400 	ldrd	r3, r4, [r3]
 800147a:	4a51      	ldr	r2, [pc, #324]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800147c:	e9c2 3400 	strd	r3, r4, [r2]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 8001480:	4b4e      	ldr	r3, [pc, #312]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001482:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001486:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001488:	6815      	ldr	r5, [r2, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	4621      	mov	r1, r4
 800148e:	f7ff fb8b 	bl	8000ba8 <__aeabi_d2uiz>
 8001492:	4603      	mov	r3, r0
 8001494:	636b      	str	r3, [r5, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 8001496:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001498:	e9d3 3400 	ldrd	r3, r4, [r3]
 800149c:	4a4c      	ldr	r2, [pc, #304]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800149e:	6815      	ldr	r5, [r2, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	4621      	mov	r1, r4
 80014a4:	f7ff fb80 	bl	8000ba8 <__aeabi_d2uiz>
 80014a8:	4603      	mov	r3, r0
 80014aa:	63ab      	str	r3, [r5, #56]	; 0x38
#endif
	}	// TIM6
	if (htim->Instance == TIM10)	// TIM10 // 0.1ms
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d135      	bne.n	8001522 <HAL_TIM_PeriodElapsedCallback+0x24a>
	{
#if USE_IMU
		Inertial_Integral(&displacement);
 80014b6:	483a      	ldr	r0, [pc, #232]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80014b8:	f7ff fea0 	bl	80011fc <Inertial_Integral>

		TIM1->CNT = ENCODER_MIDDLE;
		TIM3->CNT = ENCODER_MIDDLE;
#endif	// USE_ENCODER
#if USE_LED
		if(timtim % 10000 == 0)
 80014bc:	4b46      	ldr	r3, [pc, #280]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	4a46      	ldr	r2, [pc, #280]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x304>)
 80014c2:	fba2 1203 	umull	r1, r2, r2, r3
 80014c6:	0b52      	lsrs	r2, r2, #13
 80014c8:	f242 7110 	movw	r1, #10000	; 0x2710
 80014cc:	fb01 f202 	mul.w	r2, r1, r2
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <HAL_TIM_PeriodElapsedCallback+0x206>
		{
			set_led(0b10);
 80014d8:	2002      	movs	r0, #2
 80014da:	f000 fe4b 	bl	8002174 <set_led>
		}
		if(timtim % 10000 == 5000)
 80014de:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	4a3e      	ldr	r2, [pc, #248]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x304>)
 80014e4:	fba2 1203 	umull	r1, r2, r2, r3
 80014e8:	0b52      	lsrs	r2, r2, #13
 80014ea:	f242 7110 	movw	r1, #10000	; 0x2710
 80014ee:	fb01 f202 	mul.w	r2, r1, r2
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d102      	bne.n	8001504 <HAL_TIM_PeriodElapsedCallback+0x22c>
		{
			set_led(0b00);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 fe38 	bl	8002174 <set_led>
		}
		timtim = timtim + 1;
 8001504:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800150e:	801a      	strh	r2, [r3, #0]
		if(timtim >= 60000)
 8001510:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001518:	4293      	cmp	r3, r2
 800151a:	d902      	bls.n	8001522 <HAL_TIM_PeriodElapsedCallback+0x24a>
		{
			timtim = 0;
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800151e:	2200      	movs	r2, #0
 8001520:	801a      	strh	r2, [r3, #0]
		}
#endif
	}	// TIM10

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a2e      	ldr	r2, [pc, #184]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001528:	4293      	cmp	r3, r2
 800152a:	f040 808b 	bne.w	8001644 <HAL_TIM_PeriodElapsedCallback+0x36c>
	{
		uint8_t rotary_value_row;
		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 800152e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001532:	4825      	ldr	r0, [pc, #148]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001534:	f002 fc6c 	bl	8003e10 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf0c      	ite	eq
 800153e:	2301      	moveq	r3, #1
 8001540:	2300      	movne	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	73fb      	strb	r3, [r7, #15]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 8001546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154a:	481f      	ldr	r0, [pc, #124]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800154c:	f002 fc60 	bl	8003e10 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0x282>
 8001556:	2302      	movs	r3, #2
 8001558:	e000      	b.n	800155c <HAL_TIM_PeriodElapsedCallback+0x284>
 800155a:	2300      	movs	r3, #0
 800155c:	b2da      	uxtb	r2, r3
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	4413      	add	r3, r2
 8001562:	73fb      	strb	r3, [r7, #15]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 8001564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001568:	481e      	ldr	r0, [pc, #120]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800156a:	f002 fc51 	bl	8003e10 <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8001574:	2304      	movs	r3, #4
 8001576:	e000      	b.n	800157a <HAL_TIM_PeriodElapsedCallback+0x2a2>
 8001578:	2300      	movs	r3, #0
 800157a:	b2da      	uxtb	r2, r3
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	4413      	add	r3, r2
 8001580:	73fb      	strb	r3, [r7, #15]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 8001582:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001586:	4810      	ldr	r0, [pc, #64]	; (80015c8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001588:	f002 fc42 	bl	8003e10 <HAL_GPIO_ReadPin>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d12a      	bne.n	80015e8 <HAL_TIM_PeriodElapsedCallback+0x310>
 8001592:	2308      	movs	r3, #8
 8001594:	e029      	b.n	80015ea <HAL_TIM_PeriodElapsedCallback+0x312>
 8001596:	bf00      	nop
 8001598:	40001000 	.word	0x40001000
 800159c:	200005cc 	.word	0x200005cc
 80015a0:	2000021c 	.word	0x2000021c
 80015a4:	200005d0 	.word	0x200005d0
 80015a8:	200004e8 	.word	0x200004e8
 80015ac:	20000578 	.word	0x20000578
 80015b0:	200005c8 	.word	0x200005c8
 80015b4:	3c23d70a 	.word	0x3c23d70a
 80015b8:	00000000 	.word	0x00000000
 80015bc:	20000388 	.word	0x20000388
 80015c0:	20000380 	.word	0x20000380
 80015c4:	40020c00 	.word	0x40020c00
 80015c8:	40020800 	.word	0x40020800
 80015cc:	408f4000 	.word	0x408f4000
 80015d0:	2000029c 	.word	0x2000029c
 80015d4:	40014400 	.word	0x40014400
 80015d8:	20000298 	.word	0x20000298
 80015dc:	d1b71759 	.word	0xd1b71759
 80015e0:	40014800 	.word	0x40014800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	2300      	movs	r3, #0
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	4413      	add	r3, r2
 80015f0:	73fb      	strb	r3, [r7, #15]
		rotary_value = rotary_value_row;
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	7013      	strb	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 80015f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fc:	4815      	ldr	r0, [pc, #84]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80015fe:	f002 fc07 	bl	8003e10 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10a      	bne.n	800161e <HAL_TIM_PeriodElapsedCallback+0x346>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 8001608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800160c:	4811      	ldr	r0, [pc, #68]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800160e:	f002 fbff 	bl	8003e10 <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_TIM_PeriodElapsedCallback+0x346>
			enter = 1;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 800161e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001624:	f002 fbf4 	bl	8003e10 <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00a      	beq.n	8001644 <HAL_TIM_PeriodElapsedCallback+0x36c>
				&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 800162e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001632:	4808      	ldr	r0, [pc, #32]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001634:	f002 fbec 	bl	8003e10 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_TIM_PeriodElapsedCallback+0x36c>
			enter = 0;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]

	 if (htim->Instance == TIM7)	// F // 0.1ms
	 {
	 }
	 */
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800164e:	bf00      	nop
 8001650:	20000390 	.word	0x20000390
 8001654:	40020800 	.word	0x40020800
 8001658:	200005d5 	.word	0x200005d5
 800165c:	00000000 	.word	0x00000000

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001666:	f001 fb49 	bl	8002cfc <HAL_Init>

  /* USER CODE BEGIN Init */
	enter = 0;
 800166a:	4b57      	ldr	r3, [pc, #348]	; (80017c8 <main+0x168>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
	motorenable = 0;
 8001670:	4b56      	ldr	r3, [pc, #344]	; (80017cc <main+0x16c>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
	rotary_value = 0;
 8001676:	4b56      	ldr	r3, [pc, #344]	; (80017d0 <main+0x170>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
	LENGTHPERPULSE = PI * TIREDIAMETER / PULSEPERROTATE;
 800167c:	4a55      	ldr	r2, [pc, #340]	; (80017d4 <main+0x174>)
 800167e:	a450      	add	r4, pc, #320	; (adr r4, 80017c0 <main+0x160>)
 8001680:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001684:	e9c2 3400 	strd	r3, r4, [r2]
	commonspeed = 0;
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <main+0x178>)
 800168a:	2200      	movs	r2, #0
 800168c:	801a      	strh	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168e:	f000 f8bd 	bl	800180c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001692:	f000 fc85 	bl	8001fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001696:	f000 fc63 	bl	8001f60 <MX_DMA_Init>
  MX_ADC1_Init();
 800169a:	f000 f921 	bl	80018e0 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 800169e:	f000 fc35 	bl	8001f0c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80016a2:	f000 fbb5 	bl	8001e10 <MX_TIM6_Init>
  MX_TIM4_Init();
 80016a6:	f000 fb4f 	bl	8001d48 <MX_TIM4_Init>
  MX_TIM1_Init();
 80016aa:	f000 faa1 	bl	8001bf0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80016ae:	f000 faf7 	bl	8001ca0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80016b2:	f000 fbe3 	bl	8001e7c <MX_TIM10_Init>
  MX_TIM11_Init();
 80016b6:	f000 fc05 	bl	8001ec4 <MX_TIM11_Init>
  MX_SPI2_Init();
 80016ba:	f000 fa63 	bl	8001b84 <MX_SPI2_Init>
  MX_I2C1_Init();
 80016be:	f000 fa33 	bl	8001b28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 80016c2:	4846      	ldr	r0, [pc, #280]	; (80017dc <main+0x17c>)
 80016c4:	f006 f926 	bl	8007914 <iprintf>
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 80016c8:	4845      	ldr	r0, [pc, #276]	; (80017e0 <main+0x180>)
 80016ca:	f006 f997 	bl	80079fc <puts>

	printf("Starting TIM11\r\n");
 80016ce:	4845      	ldr	r0, [pc, #276]	; (80017e4 <main+0x184>)
 80016d0:	f006 f994 	bl	80079fc <puts>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 80016d4:	4844      	ldr	r0, [pc, #272]	; (80017e8 <main+0x188>)
 80016d6:	f003 fee4 	bl	80054a2 <HAL_TIM_Base_Start_IT>

#if USE_IMU
	printf("Starting SPI2 (IMU)\r\n");
 80016da:	4844      	ldr	r0, [pc, #272]	; (80017ec <main+0x18c>)
 80016dc:	f006 f98e 	bl	80079fc <puts>
	uint8_t wai, ret;
	ret = IMU_init(&wai);
 80016e0:	1dbb      	adds	r3, r7, #6
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fcac 	bl	8001040 <IMU_init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
	printf("who_am_i = %d\r\n", wai);
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	4619      	mov	r1, r3
 80016f0:	483f      	ldr	r0, [pc, #252]	; (80017f0 <main+0x190>)
 80016f2:	f006 f90f 	bl	8007914 <iprintf>
	if (ret == 1) {
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d103      	bne.n	8001704 <main+0xa4>
		printf("SPI INIT COLLECT!\r\n");
 80016fc:	483d      	ldr	r0, [pc, #244]	; (80017f4 <main+0x194>)
 80016fe:	f006 f97d 	bl	80079fc <puts>
 8001702:	e002      	b.n	800170a <main+0xaa>
	} else {
		printf("SPI INIT FAILURE x_x \r\n");
 8001704:	483c      	ldr	r0, [pc, #240]	; (80017f8 <main+0x198>)
 8001706:	f006 f979 	bl	80079fc <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		printf("///// WHILE /////\n\r");
 800170a:	483c      	ldr	r0, [pc, #240]	; (80017fc <main+0x19c>)
 800170c:	f006 f902 	bl	8007914 <iprintf>
		printf("enter = %d\r\n", enter);
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <main+0x168>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	483a      	ldr	r0, [pc, #232]	; (8001800 <main+0x1a0>)
 8001718:	f006 f8fc 	bl	8007914 <iprintf>
		printf("rotary_value = %x\r\n", rotary_value);
 800171c:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <main+0x170>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	4838      	ldr	r0, [pc, #224]	; (8001804 <main+0x1a4>)
 8001724:	f006 f8f6 	bl	8007914 <iprintf>
		if (enter) {
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <main+0x168>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0ec      	beq.n	800170a <main+0xaa>
			switch (rotary_value) {
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <main+0x170>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d8e8      	bhi.n	800170a <main+0xaa>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <main+0xe0>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	0800170b 	.word	0x0800170b
 8001744:	08001781 	.word	0x08001781
 8001748:	0800170b 	.word	0x0800170b
 800174c:	0800170b 	.word	0x0800170b
 8001750:	0800170b 	.word	0x0800170b
 8001754:	0800170b 	.word	0x0800170b
 8001758:	0800170b 	.word	0x0800170b
 800175c:	0800170b 	.word	0x0800170b
 8001760:	0800170b 	.word	0x0800170b
 8001764:	0800170b 	.word	0x0800170b
 8001768:	0800170b 	.word	0x0800170b
 800176c:	0800170b 	.word	0x0800170b
 8001770:	0800170b 	.word	0x0800170b
 8001774:	080017b3 	.word	0x080017b3
 8001778:	0800170b 	.word	0x0800170b
 800177c:	0800170b 	.word	0x0800170b
			case 0x0:
				break;	// case 0x00:
			case 0x1:
				running_initialize();
 8001780:	f000 fd22 	bl	80021c8 <running_initialize>

				while (enter) {
 8001784:	e004      	b.n	8001790 <main+0x130>
					d_print();
 8001786:	f000 fdad 	bl	80022e4 <d_print>
					HAL_Delay(250);
 800178a:	20fa      	movs	r0, #250	; 0xfa
 800178c:	f001 fb28 	bl	8002de0 <HAL_Delay>
				while (enter) {
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <main+0x168>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f6      	bne.n	8001786 <main+0x126>
				}

				running_finalize();
 8001798:	f000 fd84 	bl	80022a4 <running_finalize>
				break;
 800179c:	e00e      	b.n	80017bc <main+0x15c>
			case 0xF:
				break;
			case 0xD:
#if USE_IMU && D_IMU
				while (enter) {
					printf("////////// IMU ///////////\r\n");
 800179e:	481a      	ldr	r0, [pc, #104]	; (8001808 <main+0x1a8>)
 80017a0:	f006 f92c 	bl	80079fc <puts>
					IMU_read();
 80017a4:	f7ff fcca 	bl	800113c <IMU_read>
					IMU_print();
 80017a8:	f000 fe2a 	bl	8002400 <IMU_print>
					HAL_Delay(250);
 80017ac:	20fa      	movs	r0, #250	; 0xfa
 80017ae:	f001 fb17 	bl	8002de0 <HAL_Delay>
				while (enter) {
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <main+0x168>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f1      	bne.n	800179e <main+0x13e>
				}
#endif // D_IMU
				break;
 80017ba:	bf00      	nop
		printf("///// WHILE /////\n\r");
 80017bc:	e7a5      	b.n	800170a <main+0xaa>
 80017be:	bf00      	nop
 80017c0:	60000000 	.word	0x60000000
 80017c4:	401921fb 	.word	0x401921fb
 80017c8:	200005d5 	.word	0x200005d5
 80017cc:	200005cc 	.word	0x200005cc
 80017d0:	20000390 	.word	0x20000390
 80017d4:	20000580 	.word	0x20000580
 80017d8:	20000392 	.word	0x20000392
 80017dc:	0800b128 	.word	0x0800b128
 80017e0:	0800b130 	.word	0x0800b130
 80017e4:	0800b150 	.word	0x0800b150
 80017e8:	20000430 	.word	0x20000430
 80017ec:	0800b160 	.word	0x0800b160
 80017f0:	0800b178 	.word	0x0800b178
 80017f4:	0800b188 	.word	0x0800b188
 80017f8:	0800b19c 	.word	0x0800b19c
 80017fc:	0800b1b4 	.word	0x0800b1b4
 8001800:	0800b1c8 	.word	0x0800b1c8
 8001804:	0800b1d8 	.word	0x0800b1d8
 8001808:	0800b1ec 	.word	0x0800b1ec

0800180c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b094      	sub	sp, #80	; 0x50
 8001810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001812:	f107 0320 	add.w	r3, r7, #32
 8001816:	2230      	movs	r2, #48	; 0x30
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f005 fa34 	bl	8006c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <SystemClock_Config+0xcc>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <SystemClock_Config+0xcc>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <SystemClock_Config+0xcc>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <SystemClock_Config+0xd0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a21      	ldr	r2, [pc, #132]	; (80018dc <SystemClock_Config+0xd0>)
 8001856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <SystemClock_Config+0xd0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800186c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001872:	2302      	movs	r3, #2
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800187c:	2308      	movs	r3, #8
 800187e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001880:	23a8      	movs	r3, #168	; 0xa8
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001884:	2302      	movs	r3, #2
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001888:	2304      	movs	r3, #4
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fc27 	bl	80040e4 <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800189c:	f000 fdea 	bl	8002474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a0:	230f      	movs	r3, #15
 80018a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a4:	2302      	movs	r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2105      	movs	r1, #5
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fe80 	bl	80045c4 <HAL_RCC_ClockConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018ca:	f000 fdd3 	bl	8002474 <Error_Handler>
  }
}
 80018ce:	bf00      	nop
 80018d0:	3750      	adds	r7, #80	; 0x50
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40007000 	.word	0x40007000

080018e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018e6:	463b      	mov	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018f2:	4b8a      	ldr	r3, [pc, #552]	; (8001b1c <MX_ADC1_Init+0x23c>)
 80018f4:	4a8a      	ldr	r2, [pc, #552]	; (8001b20 <MX_ADC1_Init+0x240>)
 80018f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018f8:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <MX_ADC1_Init+0x23c>)
 80018fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001900:	4b86      	ldr	r3, [pc, #536]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001906:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001908:	2201      	movs	r2, #1
 800190a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800190c:	4b83      	ldr	r3, [pc, #524]	; (8001b1c <MX_ADC1_Init+0x23c>)
 800190e:	2201      	movs	r2, #1
 8001910:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001912:	4b82      	ldr	r3, [pc, #520]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800191a:	4b80      	ldr	r3, [pc, #512]	; (8001b1c <MX_ADC1_Init+0x23c>)
 800191c:	2200      	movs	r2, #0
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001920:	4b7e      	ldr	r3, [pc, #504]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001922:	4a80      	ldr	r2, [pc, #512]	; (8001b24 <MX_ADC1_Init+0x244>)
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001926:	4b7d      	ldr	r3, [pc, #500]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 800192c:	4b7b      	ldr	r3, [pc, #492]	; (8001b1c <MX_ADC1_Init+0x23c>)
 800192e:	2210      	movs	r2, #16
 8001930:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001932:	4b7a      	ldr	r3, [pc, #488]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800193a:	4b78      	ldr	r3, [pc, #480]	; (8001b1c <MX_ADC1_Init+0x23c>)
 800193c:	2201      	movs	r2, #1
 800193e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001940:	4876      	ldr	r0, [pc, #472]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001942:	f001 fa6f 	bl	8002e24 <HAL_ADC_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800194c:	f000 fd92 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001950:	2309      	movs	r3, #9
 8001952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001954:	2301      	movs	r3, #1
 8001956:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001958:	2303      	movs	r3, #3
 800195a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195c:	463b      	mov	r3, r7
 800195e:	4619      	mov	r1, r3
 8001960:	486e      	ldr	r0, [pc, #440]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001962:	f001 faa3 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800196c:	f000 fd82 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001970:	230a      	movs	r3, #10
 8001972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001974:	2302      	movs	r3, #2
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4867      	ldr	r0, [pc, #412]	; (8001b1c <MX_ADC1_Init+0x23c>)
 800197e:	f001 fa95 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001988:	f000 fd74 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800198c:	2308      	movs	r3, #8
 800198e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001990:	2303      	movs	r3, #3
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4860      	ldr	r0, [pc, #384]	; (8001b1c <MX_ADC1_Init+0x23c>)
 800199a:	f001 fa87 	bl	8002eac <HAL_ADC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80019a4:	f000 fd66 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80019a8:	230b      	movs	r3, #11
 80019aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80019ac:	2304      	movs	r3, #4
 80019ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	4859      	ldr	r0, [pc, #356]	; (8001b1c <MX_ADC1_Init+0x23c>)
 80019b6:	f001 fa79 	bl	8002eac <HAL_ADC_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80019c0:	f000 fd58 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80019c4:	230f      	movs	r3, #15
 80019c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80019c8:	2305      	movs	r3, #5
 80019ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	4619      	mov	r1, r3
 80019d0:	4852      	ldr	r0, [pc, #328]	; (8001b1c <MX_ADC1_Init+0x23c>)
 80019d2:	f001 fa6b 	bl	8002eac <HAL_ADC_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80019dc:	f000 fd4a 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80019e0:	230c      	movs	r3, #12
 80019e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80019e4:	2306      	movs	r3, #6
 80019e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	484b      	ldr	r0, [pc, #300]	; (8001b1c <MX_ADC1_Init+0x23c>)
 80019ee:	f001 fa5d 	bl	8002eac <HAL_ADC_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80019f8:	f000 fd3c 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80019fc:	230e      	movs	r3, #14
 80019fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001a00:	2307      	movs	r3, #7
 8001a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	4619      	mov	r1, r3
 8001a08:	4844      	ldr	r0, [pc, #272]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001a0a:	f001 fa4f 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001a14:	f000 fd2e 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001a18:	230d      	movs	r3, #13
 8001a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a20:	463b      	mov	r3, r7
 8001a22:	4619      	mov	r1, r3
 8001a24:	483d      	ldr	r0, [pc, #244]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001a26:	f001 fa41 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001a30:	f000 fd20 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a34:	2307      	movs	r3, #7
 8001a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001a38:	2309      	movs	r3, #9
 8001a3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4836      	ldr	r0, [pc, #216]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001a42:	f001 fa33 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001a4c:	f000 fd12 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001a54:	230a      	movs	r3, #10
 8001a56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	482f      	ldr	r0, [pc, #188]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001a5e:	f001 fa25 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001a68:	f000 fd04 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001a70:	230b      	movs	r3, #11
 8001a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a74:	463b      	mov	r3, r7
 8001a76:	4619      	mov	r1, r3
 8001a78:	4828      	ldr	r0, [pc, #160]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001a7a:	f001 fa17 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001a84:	f000 fcf6 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a90:	463b      	mov	r3, r7
 8001a92:	4619      	mov	r1, r3
 8001a94:	4821      	ldr	r0, [pc, #132]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001a96:	f001 fa09 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001aa0:	f000 fce8 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001aa8:	230d      	movs	r3, #13
 8001aaa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aac:	463b      	mov	r3, r7
 8001aae:	4619      	mov	r1, r3
 8001ab0:	481a      	ldr	r0, [pc, #104]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001ab2:	f001 f9fb 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001abc:	f000 fcda 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001ac4:	230e      	movs	r3, #14
 8001ac6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	4619      	mov	r1, r3
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001ace:	f001 f9ed 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8001ad8:	f000 fccc 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001adc:	2304      	movs	r3, #4
 8001ade:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001aea:	f001 f9df 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001af4:	f000 fcbe 	bl	8002474 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001af8:	2303      	movs	r3, #3
 8001afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001afc:	2310      	movs	r3, #16
 8001afe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_ADC1_Init+0x23c>)
 8001b06:	f001 f9d1 	bl	8002eac <HAL_ADC_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8001b10:	f000 fcb0 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200003d8 	.word	0x200003d8
 8001b20:	40012000 	.word	0x40012000
 8001b24:	0f000001 	.word	0x0f000001

08001b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b2e:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <MX_I2C1_Init+0x54>)
 8001b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <MX_I2C1_Init+0x58>)
 8001b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b66:	f002 f985 	bl	8003e74 <HAL_I2C_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b70:	f000 fc80 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200002e8 	.word	0x200002e8
 8001b7c:	40005400 	.word	0x40005400
 8001b80:	000186a0 	.word	0x000186a0

08001b84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <MX_SPI2_Init+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bb8:	2220      	movs	r2, #32
 8001bba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bd0:	220a      	movs	r2, #10
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <MX_SPI2_Init+0x64>)
 8001bd6:	f002 fee5 	bl	80049a4 <HAL_SPI_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001be0:	f000 fc48 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000240 	.word	0x20000240
 8001bec:	40003800 	.word	0x40003800

08001bf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f005 f842 	bl	8006c88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <MX_TIM1_Init+0xa8>)
 8001c0e:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <MX_TIM1_Init+0xac>)
 8001c10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_TIM1_Init+0xa8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <MX_TIM1_Init+0xa8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_TIM1_Init+0xa8>)
 8001c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_TIM1_Init+0xa8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_TIM1_Init+0xa8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_TIM1_Init+0xa8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c40:	2301      	movs	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c50:	2301      	movs	r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	4619      	mov	r1, r3
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <MX_TIM1_Init+0xa8>)
 8001c64:	f003 fd2e 	bl	80056c4 <HAL_TIM_Encoder_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c6e:	f000 fc01 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <MX_TIM1_Init+0xa8>)
 8001c80:	f004 fa9c 	bl	80061bc <HAL_TIMEx_MasterConfigSynchronization>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c8a:	f000 fbf3 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	3730      	adds	r7, #48	; 0x30
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000530 	.word	0x20000530
 8001c9c:	40010000 	.word	0x40010000

08001ca0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	; 0x30
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	2224      	movs	r2, #36	; 0x24
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 ffea 	bl	8006c88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <MX_TIM3_Init+0xa0>)
 8001cbe:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <MX_TIM3_Init+0xa4>)
 8001cc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <MX_TIM3_Init+0xa0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_TIM3_Init+0xa0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <MX_TIM3_Init+0xa0>)
 8001cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_TIM3_Init+0xa0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <MX_TIM3_Init+0xa0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cea:	2301      	movs	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480c      	ldr	r0, [pc, #48]	; (8001d40 <MX_TIM3_Init+0xa0>)
 8001d0e:	f003 fcd9 	bl	80056c4 <HAL_TIM_Encoder_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d18:	f000 fbac 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_TIM3_Init+0xa0>)
 8001d2a:	f004 fa47 	bl	80061bc <HAL_TIMEx_MasterConfigSynchronization>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d34:	f000 fb9e 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	3730      	adds	r7, #48	; 0x30
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000394 	.word	0x20000394
 8001d44:	40000400 	.word	0x40000400

08001d48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]
 8001d66:	615a      	str	r2, [r3, #20]
 8001d68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001d6c:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <MX_TIM4_Init+0xc4>)
 8001d6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001d72:	2202      	movs	r2, #2
 8001d74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001d7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d90:	481d      	ldr	r0, [pc, #116]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001d92:	f003 fbd5 	bl	8005540 <HAL_TIM_PWM_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d9c:	f000 fb6a 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001da8:	f107 0320 	add.w	r3, r7, #32
 8001dac:	4619      	mov	r1, r3
 8001dae:	4816      	ldr	r0, [pc, #88]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001db0:	f004 fa04 	bl	80061bc <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001dba:	f000 fb5b 	bl	8002474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dbe:	2360      	movs	r3, #96	; 0x60
 8001dc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001dd6:	f003 fe8d 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001de0:	f000 fb48 	bl	8002474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2204      	movs	r2, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	4807      	ldr	r0, [pc, #28]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001dec:	f003 fe82 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001df6:	f000 fb3d 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dfa:	4803      	ldr	r0, [pc, #12]	; (8001e08 <MX_TIM4_Init+0xc0>)
 8001dfc:	f000 fdbe 	bl	800297c <HAL_TIM_MspPostInit>

}
 8001e00:	bf00      	nop
 8001e02:	3728      	adds	r7, #40	; 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000029c 	.word	0x2000029c
 8001e0c:	40000800 	.word	0x40000800

08001e10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e16:	463b      	mov	r3, r7
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e20:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <MX_TIM6_Init+0x68>)
 8001e22:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e26:	2204      	movs	r2, #4
 8001e28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16799;
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e32:	f244 129f 	movw	r2, #16799	; 0x419f
 8001e36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e40:	f003 fb04 	bl	800544c <HAL_TIM_Base_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e4a:	f000 fb13 	bl	8002474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e56:	463b      	mov	r3, r7
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	; (8001e74 <MX_TIM6_Init+0x64>)
 8001e5c:	f004 f9ae 	bl	80061bc <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e66:	f000 fb05 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200004f0 	.word	0x200004f0
 8001e78:	40001000 	.word	0x40001000

08001e7c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_TIM10_Init+0x40>)
 8001e82:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <MX_TIM10_Init+0x44>)
 8001e84:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <MX_TIM10_Init+0x40>)
 8001e88:	2204      	movs	r2, #4
 8001e8a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <MX_TIM10_Init+0x40>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <MX_TIM10_Init+0x40>)
 8001e94:	f248 323f 	movw	r2, #33599	; 0x833f
 8001e98:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <MX_TIM10_Init+0x40>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_TIM10_Init+0x40>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_TIM10_Init+0x40>)
 8001ea8:	f003 fad0 	bl	800544c <HAL_TIM_Base_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001eb2:	f000 fadf 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000033c 	.word	0x2000033c
 8001ec0:	40014400 	.word	0x40014400

08001ec4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MX_TIM11_Init+0x40>)
 8001eca:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <MX_TIM11_Init+0x44>)
 8001ecc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <MX_TIM11_Init+0x40>)
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <MX_TIM11_Init+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <MX_TIM11_Init+0x40>)
 8001edc:	f248 323f 	movw	r2, #33599	; 0x833f
 8001ee0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <MX_TIM11_Init+0x40>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <MX_TIM11_Init+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_TIM11_Init+0x40>)
 8001ef0:	f003 faac 	bl	800544c <HAL_TIM_Base_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001efa:	f000 fabb 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000430 	.word	0x20000430
 8001f08:	40014800 	.word	0x40014800

08001f0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <MX_USART6_UART_Init+0x50>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_USART6_UART_Init+0x4c>)
 8001f44:	f004 f9ca 	bl	80062dc <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f4e:	f000 fa91 	bl	8002474 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000588 	.word	0x20000588
 8001f5c:	40011400 	.word	0x40011400

08001f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_DMA_Init+0x3c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <MX_DMA_Init+0x3c>)
 8001f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_DMA_Init+0x3c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2038      	movs	r0, #56	; 0x38
 8001f88:	f001 fa89 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f8c:	2038      	movs	r0, #56	; 0x38
 8001f8e:	f001 faa2 	bl	80034d6 <HAL_NVIC_EnableIRQ>

}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b69      	ldr	r3, [pc, #420]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a68      	ldr	r2, [pc, #416]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b66      	ldr	r3, [pc, #408]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b62      	ldr	r3, [pc, #392]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a61      	ldr	r2, [pc, #388]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a5a      	ldr	r2, [pc, #360]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b58      	ldr	r3, [pc, #352]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b54      	ldr	r3, [pc, #336]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a53      	ldr	r2, [pc, #332]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b51      	ldr	r3, [pc, #324]	; (8002160 <MX_GPIO_Init+0x1c0>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <MX_GPIO_Init+0x1c0>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <MX_GPIO_Init+0x1c0>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8002048:	4846      	ldr	r0, [pc, #280]	; (8002164 <MX_GPIO_Init+0x1c4>)
 800204a:	f001 fef9 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002054:	4844      	ldr	r0, [pc, #272]	; (8002168 <MX_GPIO_Init+0x1c8>)
 8002056:	f001 fef3 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002060:	4842      	ldr	r0, [pc, #264]	; (800216c <MX_GPIO_Init+0x1cc>)
 8002062:	f001 feed 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	2104      	movs	r1, #4
 800206a:	4841      	ldr	r0, [pc, #260]	; (8002170 <MX_GPIO_Init+0x1d0>)
 800206c:	f001 fee8 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8002070:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4836      	ldr	r0, [pc, #216]	; (8002164 <MX_GPIO_Init+0x1c4>)
 800208a:	f001 fd27 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 800208e:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8002092:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4830      	ldr	r0, [pc, #192]	; (8002164 <MX_GPIO_Init+0x1c4>)
 80020a4:	f001 fd1a 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 80020a8:	f640 0304 	movw	r3, #2052	; 0x804
 80020ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	482a      	ldr	r0, [pc, #168]	; (8002168 <MX_GPIO_Init+0x1c8>)
 80020be:	f001 fd0d 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 80020c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80020c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	4823      	ldr	r0, [pc, #140]	; (8002168 <MX_GPIO_Init+0x1c8>)
 80020dc:	f001 fcfe 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 80020e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	481c      	ldr	r0, [pc, #112]	; (800216c <MX_GPIO_Init+0x1cc>)
 80020fa:	f001 fcef 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 80020fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	4816      	ldr	r0, [pc, #88]	; (800216c <MX_GPIO_Init+0x1cc>)
 8002114:	f001 fce2 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800212a:	2301      	movs	r3, #1
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	480d      	ldr	r0, [pc, #52]	; (800216c <MX_GPIO_Init+0x1cc>)
 8002136:	f001 fcd1 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 800213a:	2304      	movs	r3, #4
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <MX_GPIO_Init+0x1d0>)
 8002152:	f001 fcc3 	bl	8003adc <HAL_GPIO_Init>

}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40020800 	.word	0x40020800
 8002168:	40020400 	.word	0x40020400
 800216c:	40020000 	.word	0x40020000
 8002170:	40020c00 	.word	0x40020c00

08002174 <set_led>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
}

void set_led(char value)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, (value & 0b01) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// RIGHT
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002194:	480a      	ldr	r0, [pc, #40]	; (80021c0 <set_led+0x4c>)
 8002196:	f001 fe53 	bl	8003e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (value & 0b10) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LEFT
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021b0:	4804      	ldr	r0, [pc, #16]	; (80021c4 <set_led+0x50>)
 80021b2:	f001 fe45 	bl	8003e40 <HAL_GPIO_WritePin>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40020400 	.word	0x40020400

080021c8 <running_initialize>:
#endif

void running_initialize() {
 80021c8:	b598      	push	{r3, r4, r7, lr}
 80021ca:	af00      	add	r7, sp, #0
#if D_VELOCITY_CONTROL_TIMER
	stoptime = 0;
#endif
	encoder_initialize();
#endif
	timtim = 0;
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <running_initialize+0x94>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	801a      	strh	r2, [r3, #0]
	Coordinate_Init(&displacement.theta);
 80021d2:	4823      	ldr	r0, [pc, #140]	; (8002260 <running_initialize+0x98>)
 80021d4:	f7ff f86c 	bl	80012b0 <Coordinate_Init>
	TARGET_DEGREE = displacement.theta.z;
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <running_initialize+0x9c>)
 80021da:	895b      	ldrh	r3, [r3, #10]
 80021dc:	b21b      	sxth	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <running_initialize+0xa0>)
 80021e2:	601a      	str	r2, [r3, #0]
	before_degree = 0;
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <running_initialize+0xa4>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
	s_degree = 0;
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <running_initialize+0xa8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
	printf("Encoder_Start\r\n");
 80021f0:	4820      	ldr	r0, [pc, #128]	; (8002274 <running_initialize+0xac>)
 80021f2:	f005 fc03 	bl	80079fc <puts>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80021f6:	213c      	movs	r1, #60	; 0x3c
 80021f8:	481f      	ldr	r0, [pc, #124]	; (8002278 <running_initialize+0xb0>)
 80021fa:	f003 faf5 	bl	80057e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80021fe:	213c      	movs	r1, #60	; 0x3c
 8002200:	481e      	ldr	r0, [pc, #120]	; (800227c <running_initialize+0xb4>)
 8002202:	f003 faf1 	bl	80057e8 <HAL_TIM_Encoder_Start>
	printf("ENCODER\r\n");
 8002206:	481e      	ldr	r0, [pc, #120]	; (8002280 <running_initialize+0xb8>)
 8002208:	f005 fbf8 	bl	80079fc <puts>
	HAL_TIM_Base_Start_IT(&htim10);
 800220c:	481d      	ldr	r0, [pc, #116]	; (8002284 <running_initialize+0xbc>)
 800220e:	f003 f948 	bl	80054a2 <HAL_TIM_Base_Start_IT>
	leftmotor = 0;
 8002212:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <running_initialize+0xc0>)
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	f04f 0400 	mov.w	r4, #0
 800221c:	e9c2 3400 	strd	r3, r4, [r2]
	rightmotor = 0;
 8002220:	4a1a      	ldr	r2, [pc, #104]	; (800228c <running_initialize+0xc4>)
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	f04f 0400 	mov.w	r4, #0
 800222a:	e9c2 3400 	strd	r3, r4, [r2]
	printf("PWM_Start\r\n");
 800222e:	4818      	ldr	r0, [pc, #96]	; (8002290 <running_initialize+0xc8>)
 8002230:	f005 fbe4 	bl	80079fc <puts>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8002234:	2100      	movs	r1, #0
 8002236:	4817      	ldr	r0, [pc, #92]	; (8002294 <running_initialize+0xcc>)
 8002238:	f003 f9ae 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800223c:	2104      	movs	r1, #4
 800223e:	4815      	ldr	r0, [pc, #84]	; (8002294 <running_initialize+0xcc>)
 8002240:	f003 f9aa 	bl	8005598 <HAL_TIM_PWM_Start>
	printf("PID\r\n");
 8002244:	4814      	ldr	r0, [pc, #80]	; (8002298 <running_initialize+0xd0>)
 8002246:	f005 fbd9 	bl	80079fc <puts>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 800224a:	4814      	ldr	r0, [pc, #80]	; (800229c <running_initialize+0xd4>)
 800224c:	f003 f929 	bl	80054a2 <HAL_TIM_Base_Start_IT>
#if PLAY
	motorenable = 1;
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <running_initialize+0xd8>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
#endif
}
 8002256:	bf00      	nop
 8002258:	bd98      	pop	{r3, r4, r7, pc}
 800225a:	bf00      	nop
 800225c:	20000298 	.word	0x20000298
 8002260:	20000222 	.word	0x20000222
 8002264:	2000021c 	.word	0x2000021c
 8002268:	200004e8 	.word	0x200004e8
 800226c:	20000420 	.word	0x20000420
 8002270:	200005c8 	.word	0x200005c8
 8002274:	0800b208 	.word	0x0800b208
 8002278:	20000530 	.word	0x20000530
 800227c:	20000394 	.word	0x20000394
 8002280:	0800b218 	.word	0x0800b218
 8002284:	2000033c 	.word	0x2000033c
 8002288:	20000388 	.word	0x20000388
 800228c:	20000380 	.word	0x20000380
 8002290:	0800b224 	.word	0x0800b224
 8002294:	2000029c 	.word	0x2000029c
 8002298:	0800b230 	.word	0x0800b230
 800229c:	200004f0 	.word	0x200004f0
 80022a0:	200005cc 	.word	0x200005cc

080022a4 <running_finalize>:

void running_finalize() {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	motorenable = 0;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <running_finalize+0x30>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim6);
 80022ae:	480a      	ldr	r0, [pc, #40]	; (80022d8 <running_finalize+0x34>)
 80022b0:	f003 f91b 	bl	80054ea <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80022b4:	2104      	movs	r1, #4
 80022b6:	4809      	ldr	r0, [pc, #36]	; (80022dc <running_finalize+0x38>)
 80022b8:	f003 f9ac 	bl	8005614 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80022bc:	2100      	movs	r1, #0
 80022be:	4807      	ldr	r0, [pc, #28]	; (80022dc <running_finalize+0x38>)
 80022c0:	f003 f9a8 	bl	8005614 <HAL_TIM_PWM_Stop>
	encoder_finalize();
 80022c4:	f000 f8b4 	bl	8002430 <encoder_finalize>
	HAL_TIM_Base_Stop_IT(&htim10);
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <running_finalize+0x3c>)
 80022ca:	f003 f90e 	bl	80054ea <HAL_TIM_Base_Stop_IT>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200005cc 	.word	0x200005cc
 80022d8:	200004f0 	.word	0x200004f0
 80022dc:	2000029c 	.word	0x2000029c
 80022e0:	2000033c 	.word	0x2000033c

080022e4 <d_print>:

void d_print() {
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af02      	add	r7, sp, #8
	printf("////////// d_print //////////\r\n");
 80022ea:	480b      	ldr	r0, [pc, #44]	; (8002318 <d_print+0x34>)
 80022ec:	f005 fb86 	bl	80079fc <puts>
#if D_SWITCH
	printf("enter = %d\r\n", enter);
#endif

#if D_IMU
	IMU_print();
 80022f0:	f000 f886 	bl	8002400 <IMU_print>
			(encoder_l + encoder_r) / (double)2.0f, LENGTHPERPULSE, (velocity_l + velocity_r) / (double)2.0f, velocity_error, s_velocity_error, velocity_next, nextspeed);
#endif	// VELOCITY_CONTROL_RELARIVE
#endif	// D_VELOCITY_CONTROL

#if D_MOTOR
	printf("leftmotor = %5.3f, rightmotor = %5.3f\r\n", leftmotor, rightmotor);
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <d_print+0x38>)
 80022f6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <d_print+0x3c>)
 80022fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002300:	e9cd 3400 	strd	r3, r4, [sp]
 8002304:	4613      	mov	r3, r2
 8002306:	460a      	mov	r2, r1
 8002308:	4806      	ldr	r0, [pc, #24]	; (8002324 <d_print+0x40>)
 800230a:	f005 fb03 	bl	8007914 <iprintf>
#endif
}	// d_print
 800230e:	bf00      	nop
 8002310:	3704      	adds	r7, #4
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}
 8002316:	bf00      	nop
 8002318:	0800b238 	.word	0x0800b238
 800231c:	20000388 	.word	0x20000388
 8002320:	20000380 	.word	0x20000380
 8002324:	0800b258 	.word	0x0800b258

08002328 <IMU_Coordinate_printf>:

#if USE_IMU
void IMU_Coordinate_printf(Coordinate *a) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	printf("%6d, %6d, %6d\r\n", a->x, a->y, a->z);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002336:	4619      	mov	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002346:	4803      	ldr	r0, [pc, #12]	; (8002354 <IMU_Coordinate_printf+0x2c>)
 8002348:	f005 fae4 	bl	8007914 <iprintf>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	0800b280 	.word	0x0800b280

08002358 <IMU_Inertial_printf>:

void IMU_Inertial_printf(Inertial *a)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	printf(ESC_RED);
 8002360:	480d      	ldr	r0, [pc, #52]	; (8002398 <IMU_Inertial_printf+0x40>)
 8002362:	f005 fad7 	bl	8007914 <iprintf>
	printf("a : ");
 8002366:	480d      	ldr	r0, [pc, #52]	; (800239c <IMU_Inertial_printf+0x44>)
 8002368:	f005 fad4 	bl	8007914 <iprintf>
	IMU_Coordinate_printf(&a->accel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ffda 	bl	8002328 <IMU_Coordinate_printf>
	printf(ESC_YEL);
 8002374:	480a      	ldr	r0, [pc, #40]	; (80023a0 <IMU_Inertial_printf+0x48>)
 8002376:	f005 facd 	bl	8007914 <iprintf>
	printf("g : ");
 800237a:	480a      	ldr	r0, [pc, #40]	; (80023a4 <IMU_Inertial_printf+0x4c>)
 800237c:	f005 faca 	bl	8007914 <iprintf>
	IMU_Coordinate_printf(&a->gyro);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3306      	adds	r3, #6
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ffcf 	bl	8002328 <IMU_Coordinate_printf>
	printf(ESC_DEF);
 800238a:	4807      	ldr	r0, [pc, #28]	; (80023a8 <IMU_Inertial_printf+0x50>)
 800238c:	f005 fac2 	bl	8007914 <iprintf>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	0800b290 	.word	0x0800b290
 800239c:	0800b298 	.word	0x0800b298
 80023a0:	0800b2a0 	.word	0x0800b2a0
 80023a4:	0800b2a8 	.word	0x0800b2a8
 80023a8:	0800b128 	.word	0x0800b128

080023ac <IMU_Displacement_printf>:

void IMU_Displacement_printf(Displacement *a)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	printf(ESC_GRE);
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <IMU_Displacement_printf+0x40>)
 80023b6:	f005 faad 	bl	8007914 <iprintf>
	printf("p : ");
 80023ba:	480d      	ldr	r0, [pc, #52]	; (80023f0 <IMU_Displacement_printf+0x44>)
 80023bc:	f005 faaa 	bl	8007914 <iprintf>
	IMU_Coordinate_printf(&a->position);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ffb0 	bl	8002328 <IMU_Coordinate_printf>
	printf(ESC_BLU);
 80023c8:	480a      	ldr	r0, [pc, #40]	; (80023f4 <IMU_Displacement_printf+0x48>)
 80023ca:	f005 faa3 	bl	8007914 <iprintf>
	printf("t : ");
 80023ce:	480a      	ldr	r0, [pc, #40]	; (80023f8 <IMU_Displacement_printf+0x4c>)
 80023d0:	f005 faa0 	bl	8007914 <iprintf>
	IMU_Coordinate_printf(&a->theta);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3306      	adds	r3, #6
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ffa5 	bl	8002328 <IMU_Coordinate_printf>
	printf(ESC_DEF);
 80023de:	4807      	ldr	r0, [pc, #28]	; (80023fc <IMU_Displacement_printf+0x50>)
 80023e0:	f005 fa98 	bl	8007914 <iprintf>
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	0800b2b0 	.word	0x0800b2b0
 80023f0:	0800b2b8 	.word	0x0800b2b8
 80023f4:	0800b2c0 	.word	0x0800b2c0
 80023f8:	0800b2c8 	.word	0x0800b2c8
 80023fc:	0800b128 	.word	0x0800b128

08002400 <IMU_print>:

void IMU_print()
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	printf("\tInertial\r\n");
 8002404:	4806      	ldr	r0, [pc, #24]	; (8002420 <IMU_print+0x20>)
 8002406:	f005 faf9 	bl	80079fc <puts>
	IMU_Inertial_printf(&inertial);
 800240a:	4806      	ldr	r0, [pc, #24]	; (8002424 <IMU_print+0x24>)
 800240c:	f7ff ffa4 	bl	8002358 <IMU_Inertial_printf>
	printf("\tDisplacement\r\n");
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <IMU_print+0x28>)
 8002412:	f005 faf3 	bl	80079fc <puts>
	IMU_Displacement_printf(&displacement);
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <IMU_print+0x2c>)
 8002418:	f7ff ffc8 	bl	80023ac <IMU_Displacement_printf>
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}
 8002420:	0800b2d0 	.word	0x0800b2d0
 8002424:	20000228 	.word	0x20000228
 8002428:	0800b2dc 	.word	0x0800b2dc
 800242c:	2000021c 	.word	0x2000021c

08002430 <encoder_finalize>:

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
}

void encoder_finalize() {
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8002434:	213c      	movs	r1, #60	; 0x3c
 8002436:	4804      	ldr	r0, [pc, #16]	; (8002448 <encoder_finalize+0x18>)
 8002438:	f003 fa0d 	bl	8005856 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 800243c:	213c      	movs	r1, #60	; 0x3c
 800243e:	4803      	ldr	r0, [pc, #12]	; (800244c <encoder_finalize+0x1c>)
 8002440:	f003 fa09 	bl	8005856 <HAL_TIM_Encoder_Stop>
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000530 	.word	0x20000530
 800244c:	20000394 	.word	0x20000394

08002450 <__io_putchar>:

PUTCHAR_PROTOTYPE {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8002458:	1d39      	adds	r1, r7, #4
 800245a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800245e:	2201      	movs	r2, #1
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <__io_putchar+0x20>)
 8002462:	f003 ff88 	bl	8006376 <HAL_UART_Transmit>
	return ch;
 8002466:	687b      	ldr	r3, [r7, #4]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000588 	.word	0x20000588

08002474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002478:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800247a:	e7fe      	b.n	800247a <Error_Handler+0x6>

0800247c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_MspInit+0x54>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_MspInit+0x54>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_MspInit+0x54>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_MspInit+0x54>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_MspInit+0x54>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_MspInit+0x54>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	210f      	movs	r1, #15
 80024be:	f06f 0003 	mvn.w	r0, #3
 80024c2:	f000 ffec 	bl	800349e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800

080024d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a49      	ldr	r2, [pc, #292]	; (8002618 <HAL_ADC_MspInit+0x144>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	f040 808c 	bne.w	8002610 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_ADC_MspInit+0x148>)
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	4a46      	ldr	r2, [pc, #280]	; (800261c <HAL_ADC_MspInit+0x148>)
 8002502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002506:	6453      	str	r3, [r2, #68]	; 0x44
 8002508:	4b44      	ldr	r3, [pc, #272]	; (800261c <HAL_ADC_MspInit+0x148>)
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_ADC_MspInit+0x148>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a3f      	ldr	r2, [pc, #252]	; (800261c <HAL_ADC_MspInit+0x148>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_ADC_MspInit+0x148>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	4b39      	ldr	r3, [pc, #228]	; (800261c <HAL_ADC_MspInit+0x148>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4a38      	ldr	r2, [pc, #224]	; (800261c <HAL_ADC_MspInit+0x148>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6313      	str	r3, [r2, #48]	; 0x30
 8002540:	4b36      	ldr	r3, [pc, #216]	; (800261c <HAL_ADC_MspInit+0x148>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_ADC_MspInit+0x148>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	4a31      	ldr	r2, [pc, #196]	; (800261c <HAL_ADC_MspInit+0x148>)
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	6313      	str	r3, [r2, #48]	; 0x30
 800255c:	4b2f      	ldr	r3, [pc, #188]	; (800261c <HAL_ADC_MspInit+0x148>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002568:	233f      	movs	r3, #63	; 0x3f
 800256a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256c:	2303      	movs	r3, #3
 800256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	4619      	mov	r1, r3
 800257a:	4829      	ldr	r0, [pc, #164]	; (8002620 <HAL_ADC_MspInit+0x14c>)
 800257c:	f001 faae 	bl	8003adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002580:	23ff      	movs	r3, #255	; 0xff
 8002582:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002584:	2303      	movs	r3, #3
 8002586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	4619      	mov	r1, r3
 8002592:	4824      	ldr	r0, [pc, #144]	; (8002624 <HAL_ADC_MspInit+0x150>)
 8002594:	f001 faa2 	bl	8003adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002598:	2303      	movs	r3, #3
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800259c:	2303      	movs	r3, #3
 800259e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	4619      	mov	r1, r3
 80025aa:	481f      	ldr	r0, [pc, #124]	; (8002628 <HAL_ADC_MspInit+0x154>)
 80025ac:	f001 fa96 	bl	8003adc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80025b0:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025b2:	4a1f      	ldr	r2, [pc, #124]	; (8002630 <HAL_ADC_MspInit+0x15c>)
 80025b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025f4:	480d      	ldr	r0, [pc, #52]	; (800262c <HAL_ADC_MspInit+0x158>)
 80025f6:	f000 ff89 	bl	800350c <HAL_DMA_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002600:	f7ff ff38 	bl	8002474 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a09      	ldr	r2, [pc, #36]	; (800262c <HAL_ADC_MspInit+0x158>)
 8002608:	639a      	str	r2, [r3, #56]	; 0x38
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <HAL_ADC_MspInit+0x158>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002610:	bf00      	nop
 8002612:	3730      	adds	r7, #48	; 0x30
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40012000 	.word	0x40012000
 800261c:	40023800 	.word	0x40023800
 8002620:	40020800 	.word	0x40020800
 8002624:	40020000 	.word	0x40020000
 8002628:	40020400 	.word	0x40020400
 800262c:	20000480 	.word	0x20000480
 8002630:	40026410 	.word	0x40026410

08002634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_I2C_MspInit+0x84>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d12c      	bne.n	80026b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_I2C_MspInit+0x88>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <HAL_I2C_MspInit+0x88>)
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_I2C_MspInit+0x88>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002672:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002678:	2312      	movs	r3, #18
 800267a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800267c:	2301      	movs	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002684:	2304      	movs	r3, #4
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4619      	mov	r1, r3
 800268e:	480c      	ldr	r0, [pc, #48]	; (80026c0 <HAL_I2C_MspInit+0x8c>)
 8002690:	f001 fa24 	bl	8003adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_I2C_MspInit+0x88>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4a07      	ldr	r2, [pc, #28]	; (80026bc <HAL_I2C_MspInit+0x88>)
 800269e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026a2:	6413      	str	r3, [r2, #64]	; 0x40
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_I2C_MspInit+0x88>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026b0:	bf00      	nop
 80026b2:	3728      	adds	r7, #40	; 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40005400 	.word	0x40005400
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020400 	.word	0x40020400

080026c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_SPI_MspInit+0x84>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d12c      	bne.n	8002740 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_SPI_MspInit+0x88>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a17      	ldr	r2, [pc, #92]	; (800274c <HAL_SPI_MspInit+0x88>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_SPI_MspInit+0x88>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_SPI_MspInit+0x88>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <HAL_SPI_MspInit+0x88>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_SPI_MspInit+0x88>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800271e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002730:	2305      	movs	r3, #5
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <HAL_SPI_MspInit+0x8c>)
 800273c:	f001 f9ce 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40003800 	.word	0x40003800
 800274c:	40023800 	.word	0x40023800
 8002750:	40020400 	.word	0x40020400

08002754 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	; 0x30
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3a      	ldr	r2, [pc, #232]	; (800285c <HAL_TIM_Encoder_MspInit+0x108>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d13d      	bne.n	80027f2 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	4a38      	ldr	r2, [pc, #224]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6453      	str	r3, [r2, #68]	; 0x44
 8002786:	4b36      	ldr	r3, [pc, #216]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	4b32      	ldr	r3, [pc, #200]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a31      	ldr	r2, [pc, #196]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b2f      	ldr	r3, [pc, #188]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 80027ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c4:	f107 031c 	add.w	r3, r7, #28
 80027c8:	4619      	mov	r1, r3
 80027ca:	4826      	ldr	r0, [pc, #152]	; (8002864 <HAL_TIM_Encoder_MspInit+0x110>)
 80027cc:	f001 f986 	bl	8003adc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2100      	movs	r1, #0
 80027d4:	2019      	movs	r0, #25
 80027d6:	f000 fe62 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027da:	2019      	movs	r0, #25
 80027dc:	f000 fe7b 	bl	80034d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	201a      	movs	r0, #26
 80027e6:	f000 fe5a 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027ea:	201a      	movs	r0, #26
 80027ec:	f000 fe73 	bl	80034d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027f0:	e030      	b.n	8002854 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_TIM_Encoder_MspInit+0x114>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d12b      	bne.n	8002854 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	4b17      	ldr	r3, [pc, #92]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	4a16      	ldr	r2, [pc, #88]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	6413      	str	r3, [r2, #64]	; 0x40
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002822:	f043 0302 	orr.w	r3, r3, #2
 8002826:	6313      	str	r3, [r2, #48]	; 0x30
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_TIM_Encoder_MspInit+0x10c>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8002834:	2330      	movs	r3, #48	; 0x30
 8002836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002844:	2302      	movs	r3, #2
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f107 031c 	add.w	r3, r7, #28
 800284c:	4619      	mov	r1, r3
 800284e:	4807      	ldr	r0, [pc, #28]	; (800286c <HAL_TIM_Encoder_MspInit+0x118>)
 8002850:	f001 f944 	bl	8003adc <HAL_GPIO_Init>
}
 8002854:	bf00      	nop
 8002856:	3730      	adds	r7, #48	; 0x30
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40010000 	.word	0x40010000
 8002860:	40023800 	.word	0x40023800
 8002864:	40020000 	.word	0x40020000
 8002868:	40000400 	.word	0x40000400
 800286c:	40020400 	.word	0x40020400

08002870 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <HAL_TIM_PWM_MspInit+0x3c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10d      	bne.n	800289e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_TIM_PWM_MspInit+0x40>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <HAL_TIM_PWM_MspInit+0x40>)
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_TIM_PWM_MspInit+0x40>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40000800 	.word	0x40000800
 80028b0:	40023800 	.word	0x40023800

080028b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2a      	ldr	r2, [pc, #168]	; (800296c <HAL_TIM_Base_MspInit+0xb8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d116      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	4b29      	ldr	r3, [pc, #164]	; (8002970 <HAL_TIM_Base_MspInit+0xbc>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a28      	ldr	r2, [pc, #160]	; (8002970 <HAL_TIM_Base_MspInit+0xbc>)
 80028d0:	f043 0310 	orr.w	r3, r3, #16
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b26      	ldr	r3, [pc, #152]	; (8002970 <HAL_TIM_Base_MspInit+0xbc>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	2036      	movs	r0, #54	; 0x36
 80028e8:	f000 fdd9 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028ec:	2036      	movs	r0, #54	; 0x36
 80028ee:	f000 fdf2 	bl	80034d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80028f2:	e036      	b.n	8002962 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_TIM_Base_MspInit+0xc0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d116      	bne.n	800292c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_TIM_Base_MspInit+0xbc>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <HAL_TIM_Base_MspInit+0xbc>)
 8002908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_TIM_Base_MspInit+0xbc>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	2019      	movs	r0, #25
 8002920:	f000 fdbd 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002924:	2019      	movs	r0, #25
 8002926:	f000 fdd6 	bl	80034d6 <HAL_NVIC_EnableIRQ>
}
 800292a:	e01a      	b.n	8002962 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a11      	ldr	r2, [pc, #68]	; (8002978 <HAL_TIM_Base_MspInit+0xc4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d115      	bne.n	8002962 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_TIM_Base_MspInit+0xbc>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <HAL_TIM_Base_MspInit+0xbc>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6453      	str	r3, [r2, #68]	; 0x44
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_TIM_Base_MspInit+0xbc>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	201a      	movs	r0, #26
 8002958:	f000 fda1 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800295c:	201a      	movs	r0, #26
 800295e:	f000 fdba 	bl	80034d6 <HAL_NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40001000 	.word	0x40001000
 8002970:	40023800 	.word	0x40023800
 8002974:	40014400 	.word	0x40014400
 8002978:	40014800 	.word	0x40014800

0800297c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <HAL_TIM_MspPostInit+0x68>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d11d      	bne.n	80029da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_TIM_MspPostInit+0x6c>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <HAL_TIM_MspPostInit+0x6c>)
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_TIM_MspPostInit+0x6c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 80029ba:	23c0      	movs	r3, #192	; 0xc0
 80029bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029ca:	2302      	movs	r3, #2
 80029cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	4619      	mov	r1, r3
 80029d4:	4805      	ldr	r0, [pc, #20]	; (80029ec <HAL_TIM_MspPostInit+0x70>)
 80029d6:	f001 f881 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029da:	bf00      	nop
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020400 	.word	0x40020400

080029f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <HAL_UART_MspInit+0x84>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d12b      	bne.n	8002a6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a1c:	f043 0320 	orr.w	r3, r3, #32
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a4a:	23c0      	movs	r3, #192	; 0xc0
 8002a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <HAL_UART_MspInit+0x8c>)
 8002a66:	f001 f839 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3728      	adds	r7, #40	; 0x28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40011400 	.word	0x40011400
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020800 	.word	0x40020800

08002a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a84:	e7fe      	b.n	8002a84 <NMI_Handler+0x4>

08002a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8a:	e7fe      	b.n	8002a8a <HardFault_Handler+0x4>

08002a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <MemManage_Handler+0x4>

08002a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a96:	e7fe      	b.n	8002a96 <BusFault_Handler+0x4>

08002a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <UsageFault_Handler+0x4>

08002a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002acc:	f000 f968 	bl	8002da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ad8:	4803      	ldr	r0, [pc, #12]	; (8002ae8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002ada:	f002 ff03 	bl	80058e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002ade:	4803      	ldr	r0, [pc, #12]	; (8002aec <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002ae0:	f002 ff00 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000530 	.word	0x20000530
 8002aec:	2000033c 	.word	0x2000033c

08002af0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002af4:	4803      	ldr	r0, [pc, #12]	; (8002b04 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002af6:	f002 fef5 	bl	80058e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002afa:	4803      	ldr	r0, [pc, #12]	; (8002b08 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002afc:	f002 fef2 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000530 	.word	0x20000530
 8002b08:	20000430 	.word	0x20000430

08002b0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <TIM6_DAC_IRQHandler+0x10>)
 8002b12:	f002 fee7 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200004f0 	.word	0x200004f0

08002b20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <DMA2_Stream0_IRQHandler+0x10>)
 8002b26:	f000 fd9f 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000480 	.word	0x20000480

08002b34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e00a      	b.n	8002b5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b46:	f3af 8000 	nop.w
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	60ba      	str	r2, [r7, #8]
 8002b52:	b2ca      	uxtb	r2, r1
 8002b54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	dbf0      	blt.n	8002b46 <_read+0x12>
	}

return len;
 8002b64:	687b      	ldr	r3, [r7, #4]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e009      	b.n	8002b94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	60ba      	str	r2, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fc61 	bl	8002450 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3301      	adds	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	dbf1      	blt.n	8002b80 <_write+0x12>
	}
	return len;
 8002b9c:	687b      	ldr	r3, [r7, #4]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <_close>:

int _close(int file)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
	return -1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bce:	605a      	str	r2, [r3, #4]
	return 0;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <_isatty>:

int _isatty(int file)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
	return 1;
 8002be6:	2301      	movs	r3, #1
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
	return 0;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c18:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <_sbrk+0x5c>)
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <_sbrk+0x60>)
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <_sbrk+0x64>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <_sbrk+0x64>)
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <_sbrk+0x68>)
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <_sbrk+0x64>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d207      	bcs.n	8002c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c40:	f003 fff8 	bl	8006c34 <__errno>
 8002c44:	4602      	mov	r2, r0
 8002c46:	230c      	movs	r3, #12
 8002c48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	e009      	b.n	8002c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <_sbrk+0x64>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <_sbrk+0x64>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	4a05      	ldr	r2, [pc, #20]	; (8002c74 <_sbrk+0x64>)
 8002c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20020000 	.word	0x20020000
 8002c70:	00000400 	.word	0x00000400
 8002c74:	200001fc 	.word	0x200001fc
 8002c78:	200005e0 	.word	0x200005e0

08002c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <SystemInit+0x28>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <SystemInit+0x28>)
 8002c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <SystemInit+0x28>)
 8002c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c96:	609a      	str	r2, [r3, #8]
#endif
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cae:	e003      	b.n	8002cb8 <LoopCopyDataInit>

08002cb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cb6:	3104      	adds	r1, #4

08002cb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cb8:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cc0:	d3f6      	bcc.n	8002cb0 <CopyDataInit>
  ldr  r2, =_sbss
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cc4:	e002      	b.n	8002ccc <LoopFillZerobss>

08002cc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cc8:	f842 3b04 	str.w	r3, [r2], #4

08002ccc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cd0:	d3f9      	bcc.n	8002cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cd2:	f7ff ffd3 	bl	8002c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f003 ffb3 	bl	8006c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cda:	f7fe fcc1 	bl	8001660 <main>
  bx  lr    
 8002cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ce0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ce4:	0800b640 	.word	0x0800b640
  ldr  r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cec:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002cf0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002cf4:	200005e0 	.word	0x200005e0

08002cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC_IRQHandler>
	...

08002cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_Init+0x40>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <HAL_Init+0x40>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <HAL_Init+0x40>)
 8002d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <HAL_Init+0x40>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d24:	2003      	movs	r0, #3
 8002d26:	f000 fbaf 	bl	8003488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f000 f808 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d30:	f7ff fba4 	bl	800247c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023c00 	.word	0x40023c00

08002d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x54>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_InitTick+0x58>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fbc7 	bl	80034f2 <HAL_SYSTICK_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00e      	b.n	8002d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d80a      	bhi.n	8002d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d74:	2200      	movs	r2, #0
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f000 fb8f 	bl	800349e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <HAL_InitTick+0x5c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000008 	.word	0x20000008
 8002d9c:	20000004 	.word	0x20000004

08002da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x20>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_IncTick+0x24>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_IncTick+0x24>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000008 	.word	0x20000008
 8002dc4:	200005d8 	.word	0x200005d8

08002dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return uwTick;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_GetTick+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	200005d8 	.word	0x200005d8

08002de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff ffee 	bl	8002dc8 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d005      	beq.n	8002e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_Delay+0x40>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e06:	bf00      	nop
 8002e08:	f7ff ffde 	bl	8002dc8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d8f7      	bhi.n	8002e08 <HAL_Delay+0x28>
  {
  }
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000008 	.word	0x20000008

08002e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e033      	b.n	8002ea2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fb46 	bl	80024d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e6a:	f023 0302 	bic.w	r3, r3, #2
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f93a 	bl	80030f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
 8002e92:	e001      	b.n	8002e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x1c>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e105      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x228>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b09      	cmp	r3, #9
 8002ed6:	d925      	bls.n	8002f24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68d9      	ldr	r1, [r3, #12]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	3b1e      	subs	r3, #30
 8002eee:	2207      	movs	r2, #7
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	400a      	ands	r2, r1
 8002efc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68d9      	ldr	r1, [r3, #12]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	4603      	mov	r3, r0
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4403      	add	r3, r0
 8002f16:	3b1e      	subs	r3, #30
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	e022      	b.n	8002f6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6919      	ldr	r1, [r3, #16]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	2207      	movs	r2, #7
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	400a      	ands	r2, r1
 8002f46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6919      	ldr	r1, [r3, #16]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	4618      	mov	r0, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4403      	add	r3, r0
 8002f60:	409a      	lsls	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d824      	bhi.n	8002fbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	3b05      	subs	r3, #5
 8002f84:	221f      	movs	r2, #31
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	400a      	ands	r2, r1
 8002f92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	3b05      	subs	r3, #5
 8002fae:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002fba:	e04c      	b.n	8003056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d824      	bhi.n	800300e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3b23      	subs	r3, #35	; 0x23
 8002fd6:	221f      	movs	r2, #31
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43da      	mvns	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b23      	subs	r3, #35	; 0x23
 8003000:	fa00 f203 	lsl.w	r2, r0, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
 800300c:	e023      	b.n	8003056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3b41      	subs	r3, #65	; 0x41
 8003020:	221f      	movs	r2, #31
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	400a      	ands	r2, r1
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	4618      	mov	r0, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	3b41      	subs	r3, #65	; 0x41
 800304a:	fa00 f203 	lsl.w	r2, r0, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <HAL_ADC_ConfigChannel+0x234>)
 8003058:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_ADC_ConfigChannel+0x238>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d109      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x1cc>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b12      	cmp	r3, #18
 800306a:	d105      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <HAL_ADC_ConfigChannel+0x238>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d123      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x21e>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b10      	cmp	r3, #16
 8003088:	d003      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x1e6>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b11      	cmp	r3, #17
 8003090:	d11b      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d111      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_ADC_ConfigChannel+0x23c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a10      	ldr	r2, [pc, #64]	; (80030ec <HAL_ADC_ConfigChannel+0x240>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	0c9a      	lsrs	r2, r3, #18
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030bc:	e002      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f9      	bne.n	80030be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	40012300 	.word	0x40012300
 80030e4:	40012000 	.word	0x40012000
 80030e8:	20000000 	.word	0x20000000
 80030ec:	431bde83 	.word	0x431bde83

080030f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f8:	4b79      	ldr	r3, [pc, #484]	; (80032e0 <ADC_Init+0x1f0>)
 80030fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	431a      	orrs	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	021a      	lsls	r2, r3, #8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6899      	ldr	r1, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <ADC_Init+0x1f4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d022      	beq.n	80031ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6899      	ldr	r1, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6899      	ldr	r1, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	e00f      	b.n	80031ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0202 	bic.w	r2, r2, #2
 80031fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6899      	ldr	r1, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7e1b      	ldrb	r3, [r3, #24]
 8003208:	005a      	lsls	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01b      	beq.n	8003254 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800323a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	3b01      	subs	r3, #1
 8003248:	035a      	lsls	r2, r3, #13
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	e007      	b.n	8003264 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003262:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	3b01      	subs	r3, #1
 8003280:	051a      	lsls	r2, r3, #20
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032a6:	025a      	lsls	r2, r3, #9
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6899      	ldr	r1, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	029a      	lsls	r2, r3, #10
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40012300 	.word	0x40012300
 80032e4:	0f000001 	.word	0x0f000001

080032e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <__NVIC_SetPriorityGrouping+0x44>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003304:	4013      	ands	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	; (800332c <__NVIC_SetPriorityGrouping+0x44>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <__NVIC_GetPriorityGrouping+0x18>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 0307 	and.w	r3, r3, #7
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db0b      	blt.n	8003376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	4907      	ldr	r1, [pc, #28]	; (8003384 <__NVIC_EnableIRQ+0x38>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2001      	movs	r0, #1
 800336e:	fa00 f202 	lsl.w	r2, r0, r2
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000e100 	.word	0xe000e100

08003388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	2b00      	cmp	r3, #0
 800339a:	db0a      	blt.n	80033b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	490c      	ldr	r1, [pc, #48]	; (80033d4 <__NVIC_SetPriority+0x4c>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	440b      	add	r3, r1
 80033ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b0:	e00a      	b.n	80033c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4908      	ldr	r1, [pc, #32]	; (80033d8 <__NVIC_SetPriority+0x50>)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	3b04      	subs	r3, #4
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	440b      	add	r3, r1
 80033c6:	761a      	strb	r2, [r3, #24]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000e100 	.word	0xe000e100
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	; 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f1c3 0307 	rsb	r3, r3, #7
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	bf28      	it	cs
 80033fa:	2304      	movcs	r3, #4
 80033fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3304      	adds	r3, #4
 8003402:	2b06      	cmp	r3, #6
 8003404:	d902      	bls.n	800340c <NVIC_EncodePriority+0x30>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3b03      	subs	r3, #3
 800340a:	e000      	b.n	800340e <NVIC_EncodePriority+0x32>
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	401a      	ands	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	43d9      	mvns	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	4313      	orrs	r3, r2
         );
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	; 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003454:	d301      	bcc.n	800345a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003456:	2301      	movs	r3, #1
 8003458:	e00f      	b.n	800347a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <SysTick_Config+0x40>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003462:	210f      	movs	r1, #15
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	f7ff ff8e 	bl	8003388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <SysTick_Config+0x40>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003472:	4b04      	ldr	r3, [pc, #16]	; (8003484 <SysTick_Config+0x40>)
 8003474:	2207      	movs	r2, #7
 8003476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	e000e010 	.word	0xe000e010

08003488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff29 	bl	80032e8 <__NVIC_SetPriorityGrouping>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b0:	f7ff ff3e 	bl	8003330 <__NVIC_GetPriorityGrouping>
 80034b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	6978      	ldr	r0, [r7, #20]
 80034bc:	f7ff ff8e 	bl	80033dc <NVIC_EncodePriority>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff5d 	bl	8003388 <__NVIC_SetPriority>
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff31 	bl	800334c <__NVIC_EnableIRQ>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ffa2 	bl	8003444 <SysTick_Config>
 8003500:	4603      	mov	r3, r0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff fc56 	bl	8002dc8 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e099      	b.n	800365c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003548:	e00f      	b.n	800356a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800354a:	f7ff fc3d 	bl	8002dc8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b05      	cmp	r3, #5
 8003556:	d908      	bls.n	800356a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2203      	movs	r2, #3
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e078      	b.n	800365c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e8      	bne.n	800354a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4b38      	ldr	r3, [pc, #224]	; (8003664 <HAL_DMA_Init+0x158>)
 8003584:	4013      	ands	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003596:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d107      	bne.n	80035d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	4313      	orrs	r3, r2
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0307 	bic.w	r3, r3, #7
 80035ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d117      	bne.n	800362e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f9e9 	bl	80039e8 <DMA_CheckFifoParam>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2240      	movs	r2, #64	; 0x40
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800362a:	2301      	movs	r3, #1
 800362c:	e016      	b.n	800365c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f9a0 	bl	800397c <DMA_CalcBaseAndBitshift>
 800363c:	4603      	mov	r3, r0
 800363e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	223f      	movs	r2, #63	; 0x3f
 8003646:	409a      	lsls	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	f010803f 	.word	0xf010803f

08003668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003674:	4b92      	ldr	r3, [pc, #584]	; (80038c0 <HAL_DMA_IRQHandler+0x258>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a92      	ldr	r2, [pc, #584]	; (80038c4 <HAL_DMA_IRQHandler+0x25c>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0a9b      	lsrs	r3, r3, #10
 8003680:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	2208      	movs	r2, #8
 8003694:	409a      	lsls	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01a      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d013      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	2208      	movs	r2, #8
 80036c2:	409a      	lsls	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d012      	beq.n	800370a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	2201      	movs	r2, #1
 80036f8:	409a      	lsls	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f043 0202 	orr.w	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	2204      	movs	r2, #4
 8003710:	409a      	lsls	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d012      	beq.n	8003740 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	2204      	movs	r2, #4
 800372e:	409a      	lsls	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	2210      	movs	r2, #16
 8003746:	409a      	lsls	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d043      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d03c      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	2210      	movs	r2, #16
 8003764:	409a      	lsls	r2, r3
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d018      	beq.n	80037aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d024      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
 8003796:	e01f      	b.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
 80037a8:	e016      	b.n	80037d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0208 	bic.w	r2, r2, #8
 80037c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	2220      	movs	r2, #32
 80037de:	409a      	lsls	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 808e 	beq.w	8003906 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8086 	beq.w	8003906 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	2220      	movs	r2, #32
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b05      	cmp	r3, #5
 8003810:	d136      	bne.n	8003880 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0216 	bic.w	r2, r2, #22
 8003820:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003830:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <HAL_DMA_IRQHandler+0x1da>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0208 	bic.w	r2, r2, #8
 8003850:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	223f      	movs	r2, #63	; 0x3f
 8003858:	409a      	lsls	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	2b00      	cmp	r3, #0
 8003874:	d07d      	beq.n	8003972 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
        }
        return;
 800387e:	e078      	b.n	8003972 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01c      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d030      	beq.n	8003906 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
 80038ac:	e02b      	b.n	8003906 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d027      	beq.n	8003906 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	e022      	b.n	8003906 <HAL_DMA_IRQHandler+0x29e>
 80038c0:	20000000 	.word	0x20000000
 80038c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10f      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0210 	bic.w	r2, r2, #16
 80038e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	2b00      	cmp	r3, #0
 800390c:	d032      	beq.n	8003974 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d022      	beq.n	8003960 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2205      	movs	r2, #5
 800391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3301      	adds	r3, #1
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	429a      	cmp	r2, r3
 800393c:	d307      	bcc.n	800394e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f2      	bne.n	8003932 <HAL_DMA_IRQHandler+0x2ca>
 800394c:	e000      	b.n	8003950 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800394e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
 8003970:	e000      	b.n	8003974 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003972:	bf00      	nop
    }
  }
}
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop

0800397c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	3b10      	subs	r3, #16
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <DMA_CalcBaseAndBitshift+0x64>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d909      	bls.n	80039be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039b2:	f023 0303 	bic.w	r3, r3, #3
 80039b6:	1d1a      	adds	r2, r3, #4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	659a      	str	r2, [r3, #88]	; 0x58
 80039bc:	e007      	b.n	80039ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	aaaaaaab 	.word	0xaaaaaaab
 80039e4:	0800b304 	.word	0x0800b304

080039e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d11f      	bne.n	8003a42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d855      	bhi.n	8003ab4 <DMA_CheckFifoParam+0xcc>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <DMA_CheckFifoParam+0x28>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a33 	.word	0x08003a33
 8003a18:	08003a21 	.word	0x08003a21
 8003a1c:	08003ab5 	.word	0x08003ab5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d045      	beq.n	8003ab8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a30:	e042      	b.n	8003ab8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a3a:	d13f      	bne.n	8003abc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a40:	e03c      	b.n	8003abc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4a:	d121      	bne.n	8003a90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d836      	bhi.n	8003ac0 <DMA_CheckFifoParam+0xd8>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <DMA_CheckFifoParam+0x70>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a6f 	.word	0x08003a6f
 8003a60:	08003a69 	.word	0x08003a69
 8003a64:	08003a81 	.word	0x08003a81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	e02f      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d024      	beq.n	8003ac4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7e:	e021      	b.n	8003ac4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a88:	d11e      	bne.n	8003ac8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a8e:	e01b      	b.n	8003ac8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d902      	bls.n	8003a9c <DMA_CheckFifoParam+0xb4>
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d003      	beq.n	8003aa2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a9a:	e018      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa0:	e015      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab2:	e00b      	b.n	8003acc <DMA_CheckFifoParam+0xe4>
      break;
 8003ab4:	bf00      	nop
 8003ab6:	e00a      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003ab8:	bf00      	nop
 8003aba:	e008      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003abc:	bf00      	nop
 8003abe:	e006      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003ac0:	bf00      	nop
 8003ac2:	e004      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003ac4:	bf00      	nop
 8003ac6:	e002      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;   
 8003ac8:	bf00      	nop
 8003aca:	e000      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003acc:	bf00      	nop
    }
  } 
  
  return status; 
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	; 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e16b      	b.n	8003dd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003af8:	2201      	movs	r2, #1
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	f040 815a 	bne.w	8003dca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d00b      	beq.n	8003b36 <HAL_GPIO_Init+0x5a>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d007      	beq.n	8003b36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b2a:	2b11      	cmp	r3, #17
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b12      	cmp	r3, #18
 8003b34:	d130      	bne.n	8003b98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	2203      	movs	r2, #3
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 0201 	and.w	r2, r3, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0xfc>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b12      	cmp	r3, #18
 8003bd6:	d123      	bne.n	8003c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	08da      	lsrs	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3208      	adds	r2, #8
 8003be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	220f      	movs	r2, #15
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3208      	adds	r2, #8
 8003c1a:	69b9      	ldr	r1, [r7, #24]
 8003c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0203 	and.w	r2, r3, #3
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80b4 	beq.w	8003dca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	4b5f      	ldr	r3, [pc, #380]	; (8003de4 <HAL_GPIO_Init+0x308>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	4a5e      	ldr	r2, [pc, #376]	; (8003de4 <HAL_GPIO_Init+0x308>)
 8003c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c70:	6453      	str	r3, [r2, #68]	; 0x44
 8003c72:	4b5c      	ldr	r3, [pc, #368]	; (8003de4 <HAL_GPIO_Init+0x308>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c7e:	4a5a      	ldr	r2, [pc, #360]	; (8003de8 <HAL_GPIO_Init+0x30c>)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	3302      	adds	r3, #2
 8003c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	220f      	movs	r2, #15
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a51      	ldr	r2, [pc, #324]	; (8003dec <HAL_GPIO_Init+0x310>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d02b      	beq.n	8003d02 <HAL_GPIO_Init+0x226>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a50      	ldr	r2, [pc, #320]	; (8003df0 <HAL_GPIO_Init+0x314>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d025      	beq.n	8003cfe <HAL_GPIO_Init+0x222>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4f      	ldr	r2, [pc, #316]	; (8003df4 <HAL_GPIO_Init+0x318>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01f      	beq.n	8003cfa <HAL_GPIO_Init+0x21e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4e      	ldr	r2, [pc, #312]	; (8003df8 <HAL_GPIO_Init+0x31c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d019      	beq.n	8003cf6 <HAL_GPIO_Init+0x21a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4d      	ldr	r2, [pc, #308]	; (8003dfc <HAL_GPIO_Init+0x320>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_GPIO_Init+0x216>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a4c      	ldr	r2, [pc, #304]	; (8003e00 <HAL_GPIO_Init+0x324>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00d      	beq.n	8003cee <HAL_GPIO_Init+0x212>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4b      	ldr	r2, [pc, #300]	; (8003e04 <HAL_GPIO_Init+0x328>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <HAL_GPIO_Init+0x20e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4a      	ldr	r2, [pc, #296]	; (8003e08 <HAL_GPIO_Init+0x32c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <HAL_GPIO_Init+0x20a>
 8003ce2:	2307      	movs	r3, #7
 8003ce4:	e00e      	b.n	8003d04 <HAL_GPIO_Init+0x228>
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	e00c      	b.n	8003d04 <HAL_GPIO_Init+0x228>
 8003cea:	2306      	movs	r3, #6
 8003cec:	e00a      	b.n	8003d04 <HAL_GPIO_Init+0x228>
 8003cee:	2305      	movs	r3, #5
 8003cf0:	e008      	b.n	8003d04 <HAL_GPIO_Init+0x228>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	e006      	b.n	8003d04 <HAL_GPIO_Init+0x228>
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e004      	b.n	8003d04 <HAL_GPIO_Init+0x228>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_Init+0x228>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_GPIO_Init+0x228>
 8003d02:	2300      	movs	r3, #0
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f002 0203 	and.w	r2, r2, #3
 8003d0a:	0092      	lsls	r2, r2, #2
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d14:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_GPIO_Init+0x30c>)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d22:	4b3a      	ldr	r3, [pc, #232]	; (8003e0c <HAL_GPIO_Init+0x330>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d46:	4a31      	ldr	r2, [pc, #196]	; (8003e0c <HAL_GPIO_Init+0x330>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d4c:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <HAL_GPIO_Init+0x330>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d70:	4a26      	ldr	r2, [pc, #152]	; (8003e0c <HAL_GPIO_Init+0x330>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d76:	4b25      	ldr	r3, [pc, #148]	; (8003e0c <HAL_GPIO_Init+0x330>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d9a:	4a1c      	ldr	r2, [pc, #112]	; (8003e0c <HAL_GPIO_Init+0x330>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003da0:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <HAL_GPIO_Init+0x330>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dc4:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <HAL_GPIO_Init+0x330>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	f67f ae90 	bls.w	8003af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3724      	adds	r7, #36	; 0x24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40013800 	.word	0x40013800
 8003dec:	40020000 	.word	0x40020000
 8003df0:	40020400 	.word	0x40020400
 8003df4:	40020800 	.word	0x40020800
 8003df8:	40020c00 	.word	0x40020c00
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40021400 	.word	0x40021400
 8003e04:	40021800 	.word	0x40021800
 8003e08:	40021c00 	.word	0x40021c00
 8003e0c:	40013c00 	.word	0x40013c00

08003e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
 8003e2c:	e001      	b.n	8003e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e50:	787b      	ldrb	r3, [r7, #1]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e5c:	e003      	b.n	8003e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e5e:	887b      	ldrh	r3, [r7, #2]
 8003e60:	041a      	lsls	r2, r3, #16
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	619a      	str	r2, [r3, #24]
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e11f      	b.n	80040c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fe fbca 	bl	8002634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	; 0x24
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f000 fd3c 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8003edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4a7b      	ldr	r2, [pc, #492]	; (80040d0 <HAL_I2C_Init+0x25c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d807      	bhi.n	8003ef8 <HAL_I2C_Init+0x84>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4a7a      	ldr	r2, [pc, #488]	; (80040d4 <HAL_I2C_Init+0x260>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bf94      	ite	ls
 8003ef0:	2301      	movls	r3, #1
 8003ef2:	2300      	movhi	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e006      	b.n	8003f06 <HAL_I2C_Init+0x92>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a77      	ldr	r2, [pc, #476]	; (80040d8 <HAL_I2C_Init+0x264>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bf94      	ite	ls
 8003f00:	2301      	movls	r3, #1
 8003f02:	2300      	movhi	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0db      	b.n	80040c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a72      	ldr	r2, [pc, #456]	; (80040dc <HAL_I2C_Init+0x268>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	0c9b      	lsrs	r3, r3, #18
 8003f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4a64      	ldr	r2, [pc, #400]	; (80040d0 <HAL_I2C_Init+0x25c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d802      	bhi.n	8003f48 <HAL_I2C_Init+0xd4>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3301      	adds	r3, #1
 8003f46:	e009      	b.n	8003f5c <HAL_I2C_Init+0xe8>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	4a63      	ldr	r2, [pc, #396]	; (80040e0 <HAL_I2C_Init+0x26c>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4956      	ldr	r1, [pc, #344]	; (80040d0 <HAL_I2C_Init+0x25c>)
 8003f78:	428b      	cmp	r3, r1
 8003f7a:	d80d      	bhi.n	8003f98 <HAL_I2C_Init+0x124>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1e59      	subs	r1, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	bf38      	it	cc
 8003f94:	2304      	movcc	r3, #4
 8003f96:	e04f      	b.n	8004038 <HAL_I2C_Init+0x1c4>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d111      	bne.n	8003fc4 <HAL_I2C_Init+0x150>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1e58      	subs	r0, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6859      	ldr	r1, [r3, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	440b      	add	r3, r1
 8003fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	e012      	b.n	8003fea <HAL_I2C_Init+0x176>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1e58      	subs	r0, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6859      	ldr	r1, [r3, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	0099      	lsls	r1, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Init+0x17e>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e022      	b.n	8004038 <HAL_I2C_Init+0x1c4>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10e      	bne.n	8004018 <HAL_I2C_Init+0x1a4>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1e58      	subs	r0, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	440b      	add	r3, r1
 8004008:	fbb0 f3f3 	udiv	r3, r0, r3
 800400c:	3301      	adds	r3, #1
 800400e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004016:	e00f      	b.n	8004038 <HAL_I2C_Init+0x1c4>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1e58      	subs	r0, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	0099      	lsls	r1, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	fbb0 f3f3 	udiv	r3, r0, r3
 800402e:	3301      	adds	r3, #1
 8004030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	6809      	ldr	r1, [r1, #0]
 800403c:	4313      	orrs	r3, r2
 800403e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69da      	ldr	r2, [r3, #28]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6911      	ldr	r1, [r2, #16]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68d2      	ldr	r2, [r2, #12]
 8004072:	4311      	orrs	r1, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	430b      	orrs	r3, r1
 800407a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	000186a0 	.word	0x000186a0
 80040d4:	001e847f 	.word	0x001e847f
 80040d8:	003d08ff 	.word	0x003d08ff
 80040dc:	431bde83 	.word	0x431bde83
 80040e0:	10624dd3 	.word	0x10624dd3

080040e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e25b      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d075      	beq.n	80041ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004102:	4ba3      	ldr	r3, [pc, #652]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b04      	cmp	r3, #4
 800410c:	d00c      	beq.n	8004128 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800410e:	4ba0      	ldr	r3, [pc, #640]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004116:	2b08      	cmp	r3, #8
 8004118:	d112      	bne.n	8004140 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411a:	4b9d      	ldr	r3, [pc, #628]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004122:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004126:	d10b      	bne.n	8004140 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	4b99      	ldr	r3, [pc, #612]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d05b      	beq.n	80041ec <HAL_RCC_OscConfig+0x108>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d157      	bne.n	80041ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e236      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004148:	d106      	bne.n	8004158 <HAL_RCC_OscConfig+0x74>
 800414a:	4b91      	ldr	r3, [pc, #580]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a90      	ldr	r2, [pc, #576]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e01d      	b.n	8004194 <HAL_RCC_OscConfig+0xb0>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004160:	d10c      	bne.n	800417c <HAL_RCC_OscConfig+0x98>
 8004162:	4b8b      	ldr	r3, [pc, #556]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a8a      	ldr	r2, [pc, #552]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	4b88      	ldr	r3, [pc, #544]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a87      	ldr	r2, [pc, #540]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e00b      	b.n	8004194 <HAL_RCC_OscConfig+0xb0>
 800417c:	4b84      	ldr	r3, [pc, #528]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a83      	ldr	r2, [pc, #524]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	4b81      	ldr	r3, [pc, #516]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a80      	ldr	r2, [pc, #512]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 800418e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d013      	beq.n	80041c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fe fe14 	bl	8002dc8 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041a4:	f7fe fe10 	bl	8002dc8 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	; 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e1fb      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	4b76      	ldr	r3, [pc, #472]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0xc0>
 80041c2:	e014      	b.n	80041ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fe fe00 	bl	8002dc8 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041cc:	f7fe fdfc 	bl	8002dc8 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b64      	cmp	r3, #100	; 0x64
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e1e7      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041de:	4b6c      	ldr	r3, [pc, #432]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0xe8>
 80041ea:	e000      	b.n	80041ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d063      	beq.n	80042c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041fa:	4b65      	ldr	r3, [pc, #404]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004206:	4b62      	ldr	r3, [pc, #392]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800420e:	2b08      	cmp	r3, #8
 8004210:	d11c      	bne.n	800424c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004212:	4b5f      	ldr	r3, [pc, #380]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d116      	bne.n	800424c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800421e:	4b5c      	ldr	r3, [pc, #368]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_RCC_OscConfig+0x152>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d001      	beq.n	8004236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e1bb      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004236:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4952      	ldr	r1, [pc, #328]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004246:	4313      	orrs	r3, r2
 8004248:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424a:	e03a      	b.n	80042c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d020      	beq.n	8004296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004254:	4b4f      	ldr	r3, [pc, #316]	; (8004394 <HAL_RCC_OscConfig+0x2b0>)
 8004256:	2201      	movs	r2, #1
 8004258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425a:	f7fe fdb5 	bl	8002dc8 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004262:	f7fe fdb1 	bl	8002dc8 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e19c      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004280:	4b43      	ldr	r3, [pc, #268]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4940      	ldr	r1, [pc, #256]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	4313      	orrs	r3, r2
 8004292:	600b      	str	r3, [r1, #0]
 8004294:	e015      	b.n	80042c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004296:	4b3f      	ldr	r3, [pc, #252]	; (8004394 <HAL_RCC_OscConfig+0x2b0>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fe fd94 	bl	8002dc8 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042a4:	f7fe fd90 	bl	8002dc8 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e17b      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b6:	4b36      	ldr	r3, [pc, #216]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d030      	beq.n	8004330 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d016      	beq.n	8004304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d6:	4b30      	ldr	r3, [pc, #192]	; (8004398 <HAL_RCC_OscConfig+0x2b4>)
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7fe fd74 	bl	8002dc8 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e4:	f7fe fd70 	bl	8002dc8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e15b      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f6:	4b26      	ldr	r3, [pc, #152]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x200>
 8004302:	e015      	b.n	8004330 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004304:	4b24      	ldr	r3, [pc, #144]	; (8004398 <HAL_RCC_OscConfig+0x2b4>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430a:	f7fe fd5d 	bl	8002dc8 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004312:	f7fe fd59 	bl	8002dc8 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e144      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004324:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80a0 	beq.w	800447e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004342:	4b13      	ldr	r3, [pc, #76]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10f      	bne.n	800436e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	4a0e      	ldr	r2, [pc, #56]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435c:	6413      	str	r3, [r2, #64]	; 0x40
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <HAL_RCC_OscConfig+0x2ac>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_OscConfig+0x2b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d121      	bne.n	80043be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800437a:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_RCC_OscConfig+0x2b8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a07      	ldr	r2, [pc, #28]	; (800439c <HAL_RCC_OscConfig+0x2b8>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004386:	f7fe fd1f 	bl	8002dc8 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438c:	e011      	b.n	80043b2 <HAL_RCC_OscConfig+0x2ce>
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
 8004394:	42470000 	.word	0x42470000
 8004398:	42470e80 	.word	0x42470e80
 800439c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a0:	f7fe fd12 	bl	8002dc8 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e0fd      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b2:	4b81      	ldr	r3, [pc, #516]	; (80045b8 <HAL_RCC_OscConfig+0x4d4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d106      	bne.n	80043d4 <HAL_RCC_OscConfig+0x2f0>
 80043c6:	4b7d      	ldr	r3, [pc, #500]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a7c      	ldr	r2, [pc, #496]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
 80043d2:	e01c      	b.n	800440e <HAL_RCC_OscConfig+0x32a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b05      	cmp	r3, #5
 80043da:	d10c      	bne.n	80043f6 <HAL_RCC_OscConfig+0x312>
 80043dc:	4b77      	ldr	r3, [pc, #476]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	4a76      	ldr	r2, [pc, #472]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 80043e2:	f043 0304 	orr.w	r3, r3, #4
 80043e6:	6713      	str	r3, [r2, #112]	; 0x70
 80043e8:	4b74      	ldr	r3, [pc, #464]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	4a73      	ldr	r2, [pc, #460]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	6713      	str	r3, [r2, #112]	; 0x70
 80043f4:	e00b      	b.n	800440e <HAL_RCC_OscConfig+0x32a>
 80043f6:	4b71      	ldr	r3, [pc, #452]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	4a70      	ldr	r2, [pc, #448]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	6713      	str	r3, [r2, #112]	; 0x70
 8004402:	4b6e      	ldr	r3, [pc, #440]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	4a6d      	ldr	r2, [pc, #436]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d015      	beq.n	8004442 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004416:	f7fe fcd7 	bl	8002dc8 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441c:	e00a      	b.n	8004434 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441e:	f7fe fcd3 	bl	8002dc8 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f241 3288 	movw	r2, #5000	; 0x1388
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e0bc      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0ee      	beq.n	800441e <HAL_RCC_OscConfig+0x33a>
 8004440:	e014      	b.n	800446c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004442:	f7fe fcc1 	bl	8002dc8 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004448:	e00a      	b.n	8004460 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444a:	f7fe fcbd 	bl	8002dc8 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f241 3288 	movw	r2, #5000	; 0x1388
 8004458:	4293      	cmp	r3, r2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e0a6      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004460:	4b56      	ldr	r3, [pc, #344]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1ee      	bne.n	800444a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800446c:	7dfb      	ldrb	r3, [r7, #23]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d105      	bne.n	800447e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004472:	4b52      	ldr	r3, [pc, #328]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	4a51      	ldr	r2, [pc, #324]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 8004478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8092 	beq.w	80045ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004488:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b08      	cmp	r3, #8
 8004492:	d05c      	beq.n	800454e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d141      	bne.n	8004520 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449c:	4b48      	ldr	r3, [pc, #288]	; (80045c0 <HAL_RCC_OscConfig+0x4dc>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fe fc91 	bl	8002dc8 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044aa:	f7fe fc8d 	bl	8002dc8 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e078      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044bc:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f0      	bne.n	80044aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	019b      	lsls	r3, r3, #6
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	3b01      	subs	r3, #1
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	061b      	lsls	r3, r3, #24
 80044ec:	4933      	ldr	r1, [pc, #204]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f2:	4b33      	ldr	r3, [pc, #204]	; (80045c0 <HAL_RCC_OscConfig+0x4dc>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fe fc66 	bl	8002dc8 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004500:	f7fe fc62 	bl	8002dc8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e04d      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x41c>
 800451e:	e045      	b.n	80045ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <HAL_RCC_OscConfig+0x4dc>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fe fc4f 	bl	8002dc8 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452e:	f7fe fc4b 	bl	8002dc8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e036      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <HAL_RCC_OscConfig+0x44a>
 800454c:	e02e      	b.n	80045ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e029      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <HAL_RCC_OscConfig+0x4d8>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	429a      	cmp	r2, r3
 800456c:	d11c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d115      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004582:	4013      	ands	r3, r2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004588:	4293      	cmp	r3, r2
 800458a:	d10d      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d106      	bne.n	80045a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40007000 	.word	0x40007000
 80045bc:	40023800 	.word	0x40023800
 80045c0:	42470060 	.word	0x42470060

080045c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0cc      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d8:	4b68      	ldr	r3, [pc, #416]	; (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d90c      	bls.n	8004600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4b65      	ldr	r3, [pc, #404]	; (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b63      	ldr	r3, [pc, #396]	; (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0b8      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d020      	beq.n	800464e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004618:	4b59      	ldr	r3, [pc, #356]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4a58      	ldr	r2, [pc, #352]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004630:	4b53      	ldr	r3, [pc, #332]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4a52      	ldr	r2, [pc, #328]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800463a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800463c:	4b50      	ldr	r3, [pc, #320]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	494d      	ldr	r1, [pc, #308]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d044      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d107      	bne.n	8004672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	4b47      	ldr	r3, [pc, #284]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d119      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e07f      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d003      	beq.n	8004682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467e:	2b03      	cmp	r3, #3
 8004680:	d107      	bne.n	8004692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004682:	4b3f      	ldr	r3, [pc, #252]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e06f      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004692:	4b3b      	ldr	r3, [pc, #236]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e067      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a2:	4b37      	ldr	r3, [pc, #220]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f023 0203 	bic.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4934      	ldr	r1, [pc, #208]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b4:	f7fe fb88 	bl	8002dc8 <HAL_GetTick>
 80046b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046bc:	f7fe fb84 	bl	8002dc8 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e04f      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 020c 	and.w	r2, r3, #12
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d1eb      	bne.n	80046bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e4:	4b25      	ldr	r3, [pc, #148]	; (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d20c      	bcs.n	800470c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e032      	b.n	8004772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004718:	4b19      	ldr	r3, [pc, #100]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4916      	ldr	r1, [pc, #88]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	4313      	orrs	r3, r2
 8004728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	490e      	ldr	r1, [pc, #56]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800474a:	f000 f821 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800474e:	4601      	mov	r1, r0
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <HAL_RCC_ClockConfig+0x1c0>)
 800475c:	5cd3      	ldrb	r3, [r2, r3]
 800475e:	fa21 f303 	lsr.w	r3, r1, r3
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004766:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fae8 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40023c00 	.word	0x40023c00
 8004780:	40023800 	.word	0x40023800
 8004784:	0800b2ec 	.word	0x0800b2ec
 8004788:	20000000 	.word	0x20000000
 800478c:	20000004 	.word	0x20000004

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	2300      	movs	r3, #0
 80047a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a6:	4b63      	ldr	r3, [pc, #396]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d007      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0x32>
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d008      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0x38>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 80b4 	bne.w	8004924 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b5e      	ldr	r3, [pc, #376]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047be:	60bb      	str	r3, [r7, #8]
       break;
 80047c0:	e0b3      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c2:	4b5d      	ldr	r3, [pc, #372]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047c4:	60bb      	str	r3, [r7, #8]
      break;
 80047c6:	e0b0      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c8:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d2:	4b58      	ldr	r3, [pc, #352]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d04a      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047de:	4b55      	ldr	r3, [pc, #340]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	f04f 0400 	mov.w	r4, #0
 80047e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	ea03 0501 	and.w	r5, r3, r1
 80047f4:	ea04 0602 	and.w	r6, r4, r2
 80047f8:	4629      	mov	r1, r5
 80047fa:	4632      	mov	r2, r6
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	f04f 0400 	mov.w	r4, #0
 8004804:	0154      	lsls	r4, r2, #5
 8004806:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800480a:	014b      	lsls	r3, r1, #5
 800480c:	4619      	mov	r1, r3
 800480e:	4622      	mov	r2, r4
 8004810:	1b49      	subs	r1, r1, r5
 8004812:	eb62 0206 	sbc.w	r2, r2, r6
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	f04f 0400 	mov.w	r4, #0
 800481e:	0194      	lsls	r4, r2, #6
 8004820:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004824:	018b      	lsls	r3, r1, #6
 8004826:	1a5b      	subs	r3, r3, r1
 8004828:	eb64 0402 	sbc.w	r4, r4, r2
 800482c:	f04f 0100 	mov.w	r1, #0
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	00e2      	lsls	r2, r4, #3
 8004836:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800483a:	00d9      	lsls	r1, r3, #3
 800483c:	460b      	mov	r3, r1
 800483e:	4614      	mov	r4, r2
 8004840:	195b      	adds	r3, r3, r5
 8004842:	eb44 0406 	adc.w	r4, r4, r6
 8004846:	f04f 0100 	mov.w	r1, #0
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	02a2      	lsls	r2, r4, #10
 8004850:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004854:	0299      	lsls	r1, r3, #10
 8004856:	460b      	mov	r3, r1
 8004858:	4614      	mov	r4, r2
 800485a:	4618      	mov	r0, r3
 800485c:	4621      	mov	r1, r4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f04f 0400 	mov.w	r4, #0
 8004864:	461a      	mov	r2, r3
 8004866:	4623      	mov	r3, r4
 8004868:	f7fc fa0e 	bl	8000c88 <__aeabi_uldivmod>
 800486c:	4603      	mov	r3, r0
 800486e:	460c      	mov	r4, r1
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e049      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004874:	4b2f      	ldr	r3, [pc, #188]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	099b      	lsrs	r3, r3, #6
 800487a:	f04f 0400 	mov.w	r4, #0
 800487e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	ea03 0501 	and.w	r5, r3, r1
 800488a:	ea04 0602 	and.w	r6, r4, r2
 800488e:	4629      	mov	r1, r5
 8004890:	4632      	mov	r2, r6
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	f04f 0400 	mov.w	r4, #0
 800489a:	0154      	lsls	r4, r2, #5
 800489c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048a0:	014b      	lsls	r3, r1, #5
 80048a2:	4619      	mov	r1, r3
 80048a4:	4622      	mov	r2, r4
 80048a6:	1b49      	subs	r1, r1, r5
 80048a8:	eb62 0206 	sbc.w	r2, r2, r6
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	f04f 0400 	mov.w	r4, #0
 80048b4:	0194      	lsls	r4, r2, #6
 80048b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048ba:	018b      	lsls	r3, r1, #6
 80048bc:	1a5b      	subs	r3, r3, r1
 80048be:	eb64 0402 	sbc.w	r4, r4, r2
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	00e2      	lsls	r2, r4, #3
 80048cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048d0:	00d9      	lsls	r1, r3, #3
 80048d2:	460b      	mov	r3, r1
 80048d4:	4614      	mov	r4, r2
 80048d6:	195b      	adds	r3, r3, r5
 80048d8:	eb44 0406 	adc.w	r4, r4, r6
 80048dc:	f04f 0100 	mov.w	r1, #0
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	02a2      	lsls	r2, r4, #10
 80048e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048ea:	0299      	lsls	r1, r3, #10
 80048ec:	460b      	mov	r3, r1
 80048ee:	4614      	mov	r4, r2
 80048f0:	4618      	mov	r0, r3
 80048f2:	4621      	mov	r1, r4
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f04f 0400 	mov.w	r4, #0
 80048fa:	461a      	mov	r2, r3
 80048fc:	4623      	mov	r3, r4
 80048fe:	f7fc f9c3 	bl	8000c88 <__aeabi_uldivmod>
 8004902:	4603      	mov	r3, r0
 8004904:	460c      	mov	r4, r1
 8004906:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	3301      	adds	r3, #1
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	60bb      	str	r3, [r7, #8]
      break;
 8004922:	e002      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004926:	60bb      	str	r3, [r7, #8]
      break;
 8004928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800492a:	68bb      	ldr	r3, [r7, #8]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	00f42400 	.word	0x00f42400

0800493c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004940:	4b03      	ldr	r3, [pc, #12]	; (8004950 <HAL_RCC_GetHCLKFreq+0x14>)
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000000 	.word	0x20000000

08004954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004958:	f7ff fff0 	bl	800493c <HAL_RCC_GetHCLKFreq>
 800495c:	4601      	mov	r1, r0
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	0a9b      	lsrs	r3, r3, #10
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	4a03      	ldr	r2, [pc, #12]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800496a:	5cd3      	ldrb	r3, [r2, r3]
 800496c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40023800 	.word	0x40023800
 8004978:	0800b2fc 	.word	0x0800b2fc

0800497c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004980:	f7ff ffdc 	bl	800493c <HAL_RCC_GetHCLKFreq>
 8004984:	4601      	mov	r1, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0b5b      	lsrs	r3, r3, #13
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4a03      	ldr	r2, [pc, #12]	; (80049a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004992:	5cd3      	ldrb	r3, [r2, r3]
 8004994:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	0800b2fc 	.word	0x0800b2fc

080049a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e056      	b.n	8004a64 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fd fe77 	bl	80026c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	ea42 0103 	orr.w	r1, r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	f003 0104 	and.w	r1, r3, #4
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_SPI_Transmit+0x22>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e11e      	b.n	8004ccc <HAL_SPI_Transmit+0x260>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a96:	f7fe f997 	bl	8002dc8 <HAL_GetTick>
 8004a9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a9c:	88fb      	ldrh	r3, [r7, #6]
 8004a9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d002      	beq.n	8004ab2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
 8004aae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ab0:	e103      	b.n	8004cba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_SPI_Transmit+0x52>
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ac2:	e0fa      	b.n	8004cba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b0a:	d107      	bne.n	8004b1c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d007      	beq.n	8004b3a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b42:	d14b      	bne.n	8004bdc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_SPI_Transmit+0xe6>
 8004b4c:	8afb      	ldrh	r3, [r7, #22]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d13e      	bne.n	8004bd0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	1c9a      	adds	r2, r3, #2
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b76:	e02b      	b.n	8004bd0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d112      	bne.n	8004bac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	881a      	ldrh	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004baa:	e011      	b.n	8004bd0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bac:	f7fe f90c 	bl	8002dc8 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d803      	bhi.n	8004bc4 <HAL_SPI_Transmit+0x158>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Transmit+0x15e>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bce:	e074      	b.n	8004cba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1ce      	bne.n	8004b78 <HAL_SPI_Transmit+0x10c>
 8004bda:	e04c      	b.n	8004c76 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_SPI_Transmit+0x17e>
 8004be4:	8afb      	ldrh	r3, [r7, #22]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d140      	bne.n	8004c6c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c10:	e02c      	b.n	8004c6c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d113      	bne.n	8004c48 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	7812      	ldrb	r2, [r2, #0]
 8004c2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c46:	e011      	b.n	8004c6c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c48:	f7fe f8be 	bl	8002dc8 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d803      	bhi.n	8004c60 <HAL_SPI_Transmit+0x1f4>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d102      	bne.n	8004c66 <HAL_SPI_Transmit+0x1fa>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d102      	bne.n	8004c6c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c6a:	e026      	b.n	8004cba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1cd      	bne.n	8004c12 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	6839      	ldr	r1, [r7, #0]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fba4 	bl	80053c8 <SPI_EndRxTxTransaction>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e000      	b.n	8004cba <HAL_SPI_Transmit+0x24e>
  }

error:
 8004cb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cca:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf0:	d112      	bne.n	8004d18 <HAL_SPI_Receive+0x44>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10e      	bne.n	8004d18 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f8e9 	bl	8004ee6 <HAL_SPI_TransmitReceive>
 8004d14:	4603      	mov	r3, r0
 8004d16:	e0e2      	b.n	8004ede <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_SPI_Receive+0x52>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0db      	b.n	8004ede <HAL_SPI_Receive+0x20a>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d2e:	f7fe f84b 	bl	8002dc8 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d002      	beq.n	8004d46 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
 8004d42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d44:	e0c2      	b.n	8004ecc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_SPI_Receive+0x7e>
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d56:	e0b9      	b.n	8004ecc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9e:	d107      	bne.n	8004db0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d007      	beq.n	8004dce <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dcc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d162      	bne.n	8004e9c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004dd6:	e02e      	b.n	8004e36 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d115      	bne.n	8004e12 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f103 020c 	add.w	r2, r3, #12
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	7812      	ldrb	r2, [r2, #0]
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e10:	e011      	b.n	8004e36 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e12:	f7fd ffd9 	bl	8002dc8 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d803      	bhi.n	8004e2a <HAL_SPI_Receive+0x156>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d102      	bne.n	8004e30 <HAL_SPI_Receive+0x15c>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e34:	e04a      	b.n	8004ecc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1cb      	bne.n	8004dd8 <HAL_SPI_Receive+0x104>
 8004e40:	e031      	b.n	8004ea6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d113      	bne.n	8004e78 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	b292      	uxth	r2, r2
 8004e5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	1c9a      	adds	r2, r3, #2
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e76:	e011      	b.n	8004e9c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e78:	f7fd ffa6 	bl	8002dc8 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d803      	bhi.n	8004e90 <HAL_SPI_Receive+0x1bc>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d102      	bne.n	8004e96 <HAL_SPI_Receive+0x1c2>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e9a:	e017      	b.n	8004ecc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1cd      	bne.n	8004e42 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 fa27 	bl	80052fe <SPI_EndRxTransaction>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	75fb      	strb	r3, [r7, #23]
 8004ec8:	e000      	b.n	8004ecc <HAL_SPI_Receive+0x1f8>
  }

error :
 8004eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b08c      	sub	sp, #48	; 0x30
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0x26>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e18a      	b.n	8005222 <HAL_SPI_TransmitReceive+0x33c>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f14:	f7fd ff58 	bl	8002dc8 <HAL_GetTick>
 8004f18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d00f      	beq.n	8004f56 <HAL_SPI_TransmitReceive+0x70>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f3c:	d107      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x68>
 8004f46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d003      	beq.n	8004f56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f54:	e15b      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x82>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x82>
 8004f62:	887b      	ldrh	r3, [r7, #2]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d103      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f6e:	e14e      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d003      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2205      	movs	r2, #5
 8004f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	887a      	ldrh	r2, [r7, #2]
 8004f94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	887a      	ldrh	r2, [r7, #2]
 8004f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	887a      	ldrh	r2, [r7, #2]
 8004fa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d007      	beq.n	8004fd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe0:	d178      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x10a>
 8004fea:	8b7b      	ldrh	r3, [r7, #26]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d166      	bne.n	80050be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	881a      	ldrh	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	1c9a      	adds	r2, r3, #2
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005014:	e053      	b.n	80050be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d11b      	bne.n	800505c <HAL_SPI_TransmitReceive+0x176>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d016      	beq.n	800505c <HAL_SPI_TransmitReceive+0x176>
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d113      	bne.n	800505c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	881a      	ldrh	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d119      	bne.n	800509e <HAL_SPI_TransmitReceive+0x1b8>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d014      	beq.n	800509e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	b292      	uxth	r2, r2
 8005080:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	1c9a      	adds	r2, r3, #2
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800509a:	2301      	movs	r3, #1
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800509e:	f7fd fe93 	bl	8002dc8 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d807      	bhi.n	80050be <HAL_SPI_TransmitReceive+0x1d8>
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d003      	beq.n	80050be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050bc:	e0a7      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1a6      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x130>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1a1      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x130>
 80050d2:	e07c      	b.n	80051ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x1fc>
 80050dc:	8b7b      	ldrh	r3, [r7, #26]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d16b      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005108:	e057      	b.n	80051ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b02      	cmp	r3, #2
 8005116:	d11c      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x26c>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <HAL_SPI_TransmitReceive+0x26c>
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d114      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d119      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x2ae>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d014      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005190:	2301      	movs	r3, #1
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005194:	f7fd fe18 	bl	8002dc8 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d803      	bhi.n	80051ac <HAL_SPI_TransmitReceive+0x2c6>
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d102      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x2cc>
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d103      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051b8:	e029      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1a2      	bne.n	800510a <HAL_SPI_TransmitReceive+0x224>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d19d      	bne.n	800510a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f8f8 	bl	80053c8 <SPI_EndRxTxTransaction>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051ea:	e010      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	e000      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800520c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800521e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005222:	4618      	mov	r0, r3
 8005224:	3730      	adds	r7, #48	; 0x30
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4613      	mov	r3, r2
 8005238:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800523a:	e04c      	b.n	80052d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d048      	beq.n	80052d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005244:	f7fd fdc0 	bl	8002dc8 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d902      	bls.n	800525a <SPI_WaitFlagStateUntilTimeout+0x30>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d13d      	bne.n	80052d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005272:	d111      	bne.n	8005298 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800527c:	d004      	beq.n	8005288 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005286:	d107      	bne.n	8005298 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a0:	d10f      	bne.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e00f      	b.n	80052f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4013      	ands	r3, r2
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	bf0c      	ite	eq
 80052e6:	2301      	moveq	r3, #1
 80052e8:	2300      	movne	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d1a3      	bne.n	800523c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b086      	sub	sp, #24
 8005302:	af02      	add	r7, sp, #8
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005312:	d111      	bne.n	8005338 <SPI_EndRxTransaction+0x3a>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531c:	d004      	beq.n	8005328 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005326:	d107      	bne.n	8005338 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005336:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005340:	d12a      	bne.n	8005398 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534a:	d012      	beq.n	8005372 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2200      	movs	r2, #0
 8005354:	2180      	movs	r1, #128	; 0x80
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff ff67 	bl	800522a <SPI_WaitFlagStateUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d02d      	beq.n	80053be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	f043 0220 	orr.w	r2, r3, #32
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e026      	b.n	80053c0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2200      	movs	r2, #0
 800537a:	2101      	movs	r1, #1
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff ff54 	bl	800522a <SPI_WaitFlagStateUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01a      	beq.n	80053be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e013      	b.n	80053c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	2101      	movs	r1, #1
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff ff41 	bl	800522a <SPI_WaitFlagStateUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	f043 0220 	orr.w	r2, r3, #32
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e000      	b.n	80053c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053d4:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <SPI_EndRxTxTransaction+0x7c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <SPI_EndRxTxTransaction+0x80>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0d5b      	lsrs	r3, r3, #21
 80053e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053e4:	fb02 f303 	mul.w	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f2:	d112      	bne.n	800541a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2200      	movs	r2, #0
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff ff13 	bl	800522a <SPI_WaitFlagStateUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	f043 0220 	orr.w	r2, r3, #32
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e00f      	b.n	800543a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	3b01      	subs	r3, #1
 8005424:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d0f2      	beq.n	800541a <SPI_EndRxTxTransaction+0x52>
 8005434:	e000      	b.n	8005438 <SPI_EndRxTxTransaction+0x70>
        break;
 8005436:	bf00      	nop
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000000 	.word	0x20000000
 8005448:	165e9f81 	.word	0x165e9f81

0800544c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e01d      	b.n	800549a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fd fa1e 	bl	80028b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f000 fc20 	bl	8005cd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b06      	cmp	r3, #6
 80054ca:	d007      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	f241 1311 	movw	r3, #4369	; 0x1111
 800550c:	4013      	ands	r3, r2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10f      	bne.n	8005532 <HAL_TIM_Base_Stop_IT+0x48>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	f240 4344 	movw	r3, #1092	; 0x444
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <HAL_TIM_Base_Stop_IT+0x48>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e01d      	b.n	800558e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fd f982 	bl	8002870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 fba6 	bl	8005cd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2201      	movs	r2, #1
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fde0 	bl	8006170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a15      	ldr	r2, [pc, #84]	; (800560c <HAL_TIM_PWM_Start+0x74>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <HAL_TIM_PWM_Start+0x2c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a14      	ldr	r2, [pc, #80]	; (8005610 <HAL_TIM_PWM_Start+0x78>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <HAL_TIM_PWM_Start+0x30>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <HAL_TIM_PWM_Start+0x32>
 80055c8:	2300      	movs	r3, #0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b06      	cmp	r3, #6
 80055ee:	d007      	beq.n	8005600 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40010400 	.word	0x40010400

08005614 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fda2 	bl	8006170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a22      	ldr	r2, [pc, #136]	; (80056bc <HAL_TIM_PWM_Stop+0xa8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_TIM_PWM_Stop+0x2c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a21      	ldr	r2, [pc, #132]	; (80056c0 <HAL_TIM_PWM_Stop+0xac>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d101      	bne.n	8005644 <HAL_TIM_PWM_Stop+0x30>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <HAL_TIM_PWM_Stop+0x32>
 8005644:	2300      	movs	r3, #0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d017      	beq.n	800567a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	f241 1311 	movw	r3, #4369	; 0x1111
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10f      	bne.n	800567a <HAL_TIM_PWM_Stop+0x66>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a1a      	ldr	r2, [r3, #32]
 8005660:	f240 4344 	movw	r3, #1092	; 0x444
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d107      	bne.n	800567a <HAL_TIM_PWM_Stop+0x66>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005678:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6a1a      	ldr	r2, [r3, #32]
 8005680:	f241 1311 	movw	r3, #4369	; 0x1111
 8005684:	4013      	ands	r3, r2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10f      	bne.n	80056aa <HAL_TIM_PWM_Stop+0x96>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6a1a      	ldr	r2, [r3, #32]
 8005690:	f240 4344 	movw	r3, #1092	; 0x444
 8005694:	4013      	ands	r3, r2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d107      	bne.n	80056aa <HAL_TIM_PWM_Stop+0x96>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40010000 	.word	0x40010000
 80056c0:	40010400 	.word	0x40010400

080056c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e083      	b.n	80057e0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fd f831 	bl	8002754 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005708:	f023 0307 	bic.w	r3, r3, #7
 800570c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3304      	adds	r3, #4
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f000 fad9 	bl	8005cd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	4313      	orrs	r3, r2
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005764:	f023 030c 	bic.w	r3, r3, #12
 8005768:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	4313      	orrs	r3, r2
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	031b      	lsls	r3, r3, #12
 8005794:	4313      	orrs	r3, r2
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	4313      	orrs	r3, r2
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_TIM_Encoder_Start+0x16>
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d008      	beq.n	800580e <HAL_TIM_Encoder_Start+0x26>
 80057fc:	e00f      	b.n	800581e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fcb2 	bl	8006170 <TIM_CCxChannelCmd>
      break;
 800580c:	e016      	b.n	800583c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2201      	movs	r2, #1
 8005814:	2104      	movs	r1, #4
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fcaa 	bl	8006170 <TIM_CCxChannelCmd>
      break;
 800581c:	e00e      	b.n	800583c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2201      	movs	r2, #1
 8005824:	2100      	movs	r1, #0
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fca2 	bl	8006170 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2201      	movs	r2, #1
 8005832:	2104      	movs	r1, #4
 8005834:	4618      	mov	r0, r3
 8005836:	f000 fc9b 	bl	8006170 <TIM_CCxChannelCmd>
      break;
 800583a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <HAL_TIM_Encoder_Stop+0x16>
 8005866:	2b04      	cmp	r3, #4
 8005868:	d008      	beq.n	800587c <HAL_TIM_Encoder_Stop+0x26>
 800586a:	e00f      	b.n	800588c <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2200      	movs	r2, #0
 8005872:	2100      	movs	r1, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fc7b 	bl	8006170 <TIM_CCxChannelCmd>
      break;
 800587a:	e016      	b.n	80058aa <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2200      	movs	r2, #0
 8005882:	2104      	movs	r1, #4
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fc73 	bl	8006170 <TIM_CCxChannelCmd>
      break;
 800588a:	e00e      	b.n	80058aa <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2200      	movs	r2, #0
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fc6b 	bl	8006170 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2200      	movs	r2, #0
 80058a0:	2104      	movs	r1, #4
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fc64 	bl	8006170 <TIM_CCxChannelCmd>
      break;
 80058a8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10f      	bne.n	80058da <HAL_TIM_Encoder_Stop+0x84>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6a1a      	ldr	r2, [r3, #32]
 80058c0:	f240 4344 	movw	r3, #1092	; 0x444
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d107      	bne.n	80058da <HAL_TIM_Encoder_Stop+0x84>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d122      	bne.n	8005940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b02      	cmp	r3, #2
 8005906:	d11b      	bne.n	8005940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0202 	mvn.w	r2, #2
 8005910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f9b4 	bl	8005c94 <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f9a6 	bl	8005c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f9b7 	bl	8005ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b04      	cmp	r3, #4
 800594c:	d122      	bne.n	8005994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b04      	cmp	r3, #4
 800595a:	d11b      	bne.n	8005994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0204 	mvn.w	r2, #4
 8005964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f98a 	bl	8005c94 <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f97c 	bl	8005c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f98d 	bl	8005ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d122      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d11b      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0208 	mvn.w	r2, #8
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f960 	bl	8005c94 <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f952 	bl	8005c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f963 	bl	8005ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0210 	mvn.w	r2, #16
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2208      	movs	r2, #8
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f936 	bl	8005c94 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f928 	bl	8005c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f939 	bl	8005ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d10e      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d107      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0201 	mvn.w	r2, #1
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb fc38 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d10e      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a80:	2b80      	cmp	r3, #128	; 0x80
 8005a82:	d107      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fc1a 	bl	80062c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d107      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f8fe 	bl	8005cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d10e      	bne.n	8005aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d107      	bne.n	8005aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0220 	mvn.w	r2, #32
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fbe4 	bl	80062b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e0b4      	b.n	8005c78 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	f200 809f 	bhi.w	8005c64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b61 	.word	0x08005b61
 8005b30:	08005c65 	.word	0x08005c65
 8005b34:	08005c65 	.word	0x08005c65
 8005b38:	08005c65 	.word	0x08005c65
 8005b3c:	08005ba1 	.word	0x08005ba1
 8005b40:	08005c65 	.word	0x08005c65
 8005b44:	08005c65 	.word	0x08005c65
 8005b48:	08005c65 	.word	0x08005c65
 8005b4c:	08005be3 	.word	0x08005be3
 8005b50:	08005c65 	.word	0x08005c65
 8005b54:	08005c65 	.word	0x08005c65
 8005b58:	08005c65 	.word	0x08005c65
 8005b5c:	08005c23 	.word	0x08005c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f952 	bl	8005e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0204 	bic.w	r2, r2, #4
 8005b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	619a      	str	r2, [r3, #24]
      break;
 8005b9e:	e062      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f9a2 	bl	8005ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6999      	ldr	r1, [r3, #24]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	021a      	lsls	r2, r3, #8
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	619a      	str	r2, [r3, #24]
      break;
 8005be0:	e041      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 f9f7 	bl	8005fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0208 	orr.w	r2, r2, #8
 8005bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0204 	bic.w	r2, r2, #4
 8005c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69d9      	ldr	r1, [r3, #28]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	61da      	str	r2, [r3, #28]
      break;
 8005c20:	e021      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fa4b 	bl	80060c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	61da      	str	r2, [r3, #28]
      break;
 8005c62:	e000      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005c64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a40      	ldr	r2, [pc, #256]	; (8005de4 <TIM_Base_SetConfig+0x114>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <TIM_Base_SetConfig+0x40>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cee:	d00f      	beq.n	8005d10 <TIM_Base_SetConfig+0x40>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a3d      	ldr	r2, [pc, #244]	; (8005de8 <TIM_Base_SetConfig+0x118>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00b      	beq.n	8005d10 <TIM_Base_SetConfig+0x40>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a3c      	ldr	r2, [pc, #240]	; (8005dec <TIM_Base_SetConfig+0x11c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d007      	beq.n	8005d10 <TIM_Base_SetConfig+0x40>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a3b      	ldr	r2, [pc, #236]	; (8005df0 <TIM_Base_SetConfig+0x120>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_Base_SetConfig+0x40>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a3a      	ldr	r2, [pc, #232]	; (8005df4 <TIM_Base_SetConfig+0x124>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d108      	bne.n	8005d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2f      	ldr	r2, [pc, #188]	; (8005de4 <TIM_Base_SetConfig+0x114>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d02b      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d30:	d027      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2c      	ldr	r2, [pc, #176]	; (8005de8 <TIM_Base_SetConfig+0x118>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d023      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2b      	ldr	r2, [pc, #172]	; (8005dec <TIM_Base_SetConfig+0x11c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01f      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2a      	ldr	r2, [pc, #168]	; (8005df0 <TIM_Base_SetConfig+0x120>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01b      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a29      	ldr	r2, [pc, #164]	; (8005df4 <TIM_Base_SetConfig+0x124>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d017      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a28      	ldr	r2, [pc, #160]	; (8005df8 <TIM_Base_SetConfig+0x128>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <TIM_Base_SetConfig+0x12c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00f      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a26      	ldr	r2, [pc, #152]	; (8005e00 <TIM_Base_SetConfig+0x130>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00b      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a25      	ldr	r2, [pc, #148]	; (8005e04 <TIM_Base_SetConfig+0x134>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d007      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a24      	ldr	r2, [pc, #144]	; (8005e08 <TIM_Base_SetConfig+0x138>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d003      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a23      	ldr	r2, [pc, #140]	; (8005e0c <TIM_Base_SetConfig+0x13c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d108      	bne.n	8005d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a0a      	ldr	r2, [pc, #40]	; (8005de4 <TIM_Base_SetConfig+0x114>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_Base_SetConfig+0xf8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a0c      	ldr	r2, [pc, #48]	; (8005df4 <TIM_Base_SetConfig+0x124>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d103      	bne.n	8005dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	615a      	str	r2, [r3, #20]
}
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	40010400 	.word	0x40010400
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40014400 	.word	0x40014400
 8005e00:	40014800 	.word	0x40014800
 8005e04:	40001800 	.word	0x40001800
 8005e08:	40001c00 	.word	0x40001c00
 8005e0c:	40002000 	.word	0x40002000

08005e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f023 0302 	bic.w	r3, r3, #2
 8005e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a20      	ldr	r2, [pc, #128]	; (8005ee8 <TIM_OC1_SetConfig+0xd8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_OC1_SetConfig+0x64>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a1f      	ldr	r2, [pc, #124]	; (8005eec <TIM_OC1_SetConfig+0xdc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d10c      	bne.n	8005e8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f023 0308 	bic.w	r3, r3, #8
 8005e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f023 0304 	bic.w	r3, r3, #4
 8005e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <TIM_OC1_SetConfig+0xd8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d003      	beq.n	8005e9e <TIM_OC1_SetConfig+0x8e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a14      	ldr	r2, [pc, #80]	; (8005eec <TIM_OC1_SetConfig+0xdc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d111      	bne.n	8005ec2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40010400 	.word	0x40010400

08005ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f023 0210 	bic.w	r2, r3, #16
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0320 	bic.w	r3, r3, #32
 8005f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a22      	ldr	r2, [pc, #136]	; (8005fd4 <TIM_OC2_SetConfig+0xe4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_OC2_SetConfig+0x68>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <TIM_OC2_SetConfig+0xe8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d10d      	bne.n	8005f74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <TIM_OC2_SetConfig+0xe4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_OC2_SetConfig+0x94>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a16      	ldr	r2, [pc, #88]	; (8005fd8 <TIM_OC2_SetConfig+0xe8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d113      	bne.n	8005fac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	40010400 	.word	0x40010400

08005fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0303 	bic.w	r3, r3, #3
 8006012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a21      	ldr	r2, [pc, #132]	; (80060bc <TIM_OC3_SetConfig+0xe0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d003      	beq.n	8006042 <TIM_OC3_SetConfig+0x66>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a20      	ldr	r2, [pc, #128]	; (80060c0 <TIM_OC3_SetConfig+0xe4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d10d      	bne.n	800605e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800605c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a16      	ldr	r2, [pc, #88]	; (80060bc <TIM_OC3_SetConfig+0xe0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_OC3_SetConfig+0x92>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a15      	ldr	r2, [pc, #84]	; (80060c0 <TIM_OC3_SetConfig+0xe4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d113      	bne.n	8006096 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800607c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	621a      	str	r2, [r3, #32]
}
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400

080060c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800610e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	031b      	lsls	r3, r3, #12
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a12      	ldr	r2, [pc, #72]	; (8006168 <TIM_OC4_SetConfig+0xa4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_OC4_SetConfig+0x68>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a11      	ldr	r2, [pc, #68]	; (800616c <TIM_OC4_SetConfig+0xa8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d109      	bne.n	8006140 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	019b      	lsls	r3, r3, #6
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	4313      	orrs	r3, r2
 800613e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40010000 	.word	0x40010000
 800616c:	40010400 	.word	0x40010400

08006170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	2201      	movs	r2, #1
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a1a      	ldr	r2, [r3, #32]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	43db      	mvns	r3, r3
 8006192:	401a      	ands	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1a      	ldr	r2, [r3, #32]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	fa01 f303 	lsl.w	r3, r1, r3
 80061a8:	431a      	orrs	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
	...

080061bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e05a      	b.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a21      	ldr	r2, [pc, #132]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d022      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006220:	d01d      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1d      	ldr	r2, [pc, #116]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d018      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00e      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a17      	ldr	r2, [pc, #92]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a15      	ldr	r2, [pc, #84]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d10c      	bne.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4313      	orrs	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40010000 	.word	0x40010000
 800629c:	40000400 	.word	0x40000400
 80062a0:	40000800 	.word	0x40000800
 80062a4:	40000c00 	.word	0x40000c00
 80062a8:	40010400 	.word	0x40010400
 80062ac:	40014000 	.word	0x40014000
 80062b0:	40001800 	.word	0x40001800

080062b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e03f      	b.n	800636e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fc fb74 	bl	80029f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2224      	movs	r2, #36	; 0x24
 800630c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800631e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f90b 	bl	800653c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695a      	ldr	r2, [r3, #20]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b088      	sub	sp, #32
 800637a:	af02      	add	r7, sp, #8
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	4613      	mov	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b20      	cmp	r3, #32
 8006394:	f040 8083 	bne.w	800649e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_UART_Transmit+0x2e>
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e07b      	b.n	80064a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Transmit+0x40>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e074      	b.n	80064a0 <HAL_UART_Transmit+0x12a>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2221      	movs	r2, #33	; 0x21
 80063c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80063cc:	f7fc fcfc 	bl	8002dc8 <HAL_GetTick>
 80063d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	88fa      	ldrh	r2, [r7, #6]
 80063d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80063e6:	e042      	b.n	800646e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063fe:	d122      	bne.n	8006446 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2200      	movs	r2, #0
 8006408:	2180      	movs	r1, #128	; 0x80
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f84c 	bl	80064a8 <UART_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e042      	b.n	80064a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800642c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	3302      	adds	r3, #2
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	e017      	b.n	800646e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	3301      	adds	r3, #1
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	e013      	b.n	800646e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2200      	movs	r2, #0
 800644e:	2180      	movs	r1, #128	; 0x80
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 f829 	bl	80064a8 <UART_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e01f      	b.n	80064a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	60ba      	str	r2, [r7, #8]
 8006466:	781a      	ldrb	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1b7      	bne.n	80063e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2200      	movs	r2, #0
 8006480:	2140      	movs	r1, #64	; 0x40
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 f810 	bl	80064a8 <UART_WaitOnFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e006      	b.n	80064a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e000      	b.n	80064a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800649e:	2302      	movs	r3, #2
  }
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	4613      	mov	r3, r2
 80064b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b8:	e02c      	b.n	8006514 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c0:	d028      	beq.n	8006514 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80064c8:	f7fc fc7e 	bl	8002dc8 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d21d      	bcs.n	8006514 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e00f      	b.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4013      	ands	r3, r2
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	429a      	cmp	r2, r3
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	429a      	cmp	r2, r3
 8006530:	d0c3      	beq.n	80064ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800657e:	f023 030c 	bic.w	r3, r3, #12
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	68f9      	ldr	r1, [r7, #12]
 8006588:	430b      	orrs	r3, r1
 800658a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065aa:	f040 818b 	bne.w	80068c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4ac1      	ldr	r2, [pc, #772]	; (80068b8 <UART_SetConfig+0x37c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d005      	beq.n	80065c4 <UART_SetConfig+0x88>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4abf      	ldr	r2, [pc, #764]	; (80068bc <UART_SetConfig+0x380>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	f040 80bd 	bne.w	800673e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065c4:	f7fe f9da 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 80065c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	461d      	mov	r5, r3
 80065ce:	f04f 0600 	mov.w	r6, #0
 80065d2:	46a8      	mov	r8, r5
 80065d4:	46b1      	mov	r9, r6
 80065d6:	eb18 0308 	adds.w	r3, r8, r8
 80065da:	eb49 0409 	adc.w	r4, r9, r9
 80065de:	4698      	mov	r8, r3
 80065e0:	46a1      	mov	r9, r4
 80065e2:	eb18 0805 	adds.w	r8, r8, r5
 80065e6:	eb49 0906 	adc.w	r9, r9, r6
 80065ea:	f04f 0100 	mov.w	r1, #0
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065fe:	4688      	mov	r8, r1
 8006600:	4691      	mov	r9, r2
 8006602:	eb18 0005 	adds.w	r0, r8, r5
 8006606:	eb49 0106 	adc.w	r1, r9, r6
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	461d      	mov	r5, r3
 8006610:	f04f 0600 	mov.w	r6, #0
 8006614:	196b      	adds	r3, r5, r5
 8006616:	eb46 0406 	adc.w	r4, r6, r6
 800661a:	461a      	mov	r2, r3
 800661c:	4623      	mov	r3, r4
 800661e:	f7fa fb33 	bl	8000c88 <__aeabi_uldivmod>
 8006622:	4603      	mov	r3, r0
 8006624:	460c      	mov	r4, r1
 8006626:	461a      	mov	r2, r3
 8006628:	4ba5      	ldr	r3, [pc, #660]	; (80068c0 <UART_SetConfig+0x384>)
 800662a:	fba3 2302 	umull	r2, r3, r3, r2
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	461d      	mov	r5, r3
 8006638:	f04f 0600 	mov.w	r6, #0
 800663c:	46a9      	mov	r9, r5
 800663e:	46b2      	mov	sl, r6
 8006640:	eb19 0309 	adds.w	r3, r9, r9
 8006644:	eb4a 040a 	adc.w	r4, sl, sl
 8006648:	4699      	mov	r9, r3
 800664a:	46a2      	mov	sl, r4
 800664c:	eb19 0905 	adds.w	r9, r9, r5
 8006650:	eb4a 0a06 	adc.w	sl, sl, r6
 8006654:	f04f 0100 	mov.w	r1, #0
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006660:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006664:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006668:	4689      	mov	r9, r1
 800666a:	4692      	mov	sl, r2
 800666c:	eb19 0005 	adds.w	r0, r9, r5
 8006670:	eb4a 0106 	adc.w	r1, sl, r6
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	461d      	mov	r5, r3
 800667a:	f04f 0600 	mov.w	r6, #0
 800667e:	196b      	adds	r3, r5, r5
 8006680:	eb46 0406 	adc.w	r4, r6, r6
 8006684:	461a      	mov	r2, r3
 8006686:	4623      	mov	r3, r4
 8006688:	f7fa fafe 	bl	8000c88 <__aeabi_uldivmod>
 800668c:	4603      	mov	r3, r0
 800668e:	460c      	mov	r4, r1
 8006690:	461a      	mov	r2, r3
 8006692:	4b8b      	ldr	r3, [pc, #556]	; (80068c0 <UART_SetConfig+0x384>)
 8006694:	fba3 1302 	umull	r1, r3, r3, r2
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	2164      	movs	r1, #100	; 0x64
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	3332      	adds	r3, #50	; 0x32
 80066a6:	4a86      	ldr	r2, [pc, #536]	; (80068c0 <UART_SetConfig+0x384>)
 80066a8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066b4:	4498      	add	r8, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	461d      	mov	r5, r3
 80066ba:	f04f 0600 	mov.w	r6, #0
 80066be:	46a9      	mov	r9, r5
 80066c0:	46b2      	mov	sl, r6
 80066c2:	eb19 0309 	adds.w	r3, r9, r9
 80066c6:	eb4a 040a 	adc.w	r4, sl, sl
 80066ca:	4699      	mov	r9, r3
 80066cc:	46a2      	mov	sl, r4
 80066ce:	eb19 0905 	adds.w	r9, r9, r5
 80066d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80066d6:	f04f 0100 	mov.w	r1, #0
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066ea:	4689      	mov	r9, r1
 80066ec:	4692      	mov	sl, r2
 80066ee:	eb19 0005 	adds.w	r0, r9, r5
 80066f2:	eb4a 0106 	adc.w	r1, sl, r6
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	461d      	mov	r5, r3
 80066fc:	f04f 0600 	mov.w	r6, #0
 8006700:	196b      	adds	r3, r5, r5
 8006702:	eb46 0406 	adc.w	r4, r6, r6
 8006706:	461a      	mov	r2, r3
 8006708:	4623      	mov	r3, r4
 800670a:	f7fa fabd 	bl	8000c88 <__aeabi_uldivmod>
 800670e:	4603      	mov	r3, r0
 8006710:	460c      	mov	r4, r1
 8006712:	461a      	mov	r2, r3
 8006714:	4b6a      	ldr	r3, [pc, #424]	; (80068c0 <UART_SetConfig+0x384>)
 8006716:	fba3 1302 	umull	r1, r3, r3, r2
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	2164      	movs	r1, #100	; 0x64
 800671e:	fb01 f303 	mul.w	r3, r1, r3
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	3332      	adds	r3, #50	; 0x32
 8006728:	4a65      	ldr	r2, [pc, #404]	; (80068c0 <UART_SetConfig+0x384>)
 800672a:	fba2 2303 	umull	r2, r3, r2, r3
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	f003 0207 	and.w	r2, r3, #7
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4442      	add	r2, r8
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	e26f      	b.n	8006c1e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800673e:	f7fe f909 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8006742:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	461d      	mov	r5, r3
 8006748:	f04f 0600 	mov.w	r6, #0
 800674c:	46a8      	mov	r8, r5
 800674e:	46b1      	mov	r9, r6
 8006750:	eb18 0308 	adds.w	r3, r8, r8
 8006754:	eb49 0409 	adc.w	r4, r9, r9
 8006758:	4698      	mov	r8, r3
 800675a:	46a1      	mov	r9, r4
 800675c:	eb18 0805 	adds.w	r8, r8, r5
 8006760:	eb49 0906 	adc.w	r9, r9, r6
 8006764:	f04f 0100 	mov.w	r1, #0
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006770:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006774:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006778:	4688      	mov	r8, r1
 800677a:	4691      	mov	r9, r2
 800677c:	eb18 0005 	adds.w	r0, r8, r5
 8006780:	eb49 0106 	adc.w	r1, r9, r6
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	461d      	mov	r5, r3
 800678a:	f04f 0600 	mov.w	r6, #0
 800678e:	196b      	adds	r3, r5, r5
 8006790:	eb46 0406 	adc.w	r4, r6, r6
 8006794:	461a      	mov	r2, r3
 8006796:	4623      	mov	r3, r4
 8006798:	f7fa fa76 	bl	8000c88 <__aeabi_uldivmod>
 800679c:	4603      	mov	r3, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	461a      	mov	r2, r3
 80067a2:	4b47      	ldr	r3, [pc, #284]	; (80068c0 <UART_SetConfig+0x384>)
 80067a4:	fba3 2302 	umull	r2, r3, r3, r2
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	461d      	mov	r5, r3
 80067b2:	f04f 0600 	mov.w	r6, #0
 80067b6:	46a9      	mov	r9, r5
 80067b8:	46b2      	mov	sl, r6
 80067ba:	eb19 0309 	adds.w	r3, r9, r9
 80067be:	eb4a 040a 	adc.w	r4, sl, sl
 80067c2:	4699      	mov	r9, r3
 80067c4:	46a2      	mov	sl, r4
 80067c6:	eb19 0905 	adds.w	r9, r9, r5
 80067ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80067ce:	f04f 0100 	mov.w	r1, #0
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067e2:	4689      	mov	r9, r1
 80067e4:	4692      	mov	sl, r2
 80067e6:	eb19 0005 	adds.w	r0, r9, r5
 80067ea:	eb4a 0106 	adc.w	r1, sl, r6
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	461d      	mov	r5, r3
 80067f4:	f04f 0600 	mov.w	r6, #0
 80067f8:	196b      	adds	r3, r5, r5
 80067fa:	eb46 0406 	adc.w	r4, r6, r6
 80067fe:	461a      	mov	r2, r3
 8006800:	4623      	mov	r3, r4
 8006802:	f7fa fa41 	bl	8000c88 <__aeabi_uldivmod>
 8006806:	4603      	mov	r3, r0
 8006808:	460c      	mov	r4, r1
 800680a:	461a      	mov	r2, r3
 800680c:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <UART_SetConfig+0x384>)
 800680e:	fba3 1302 	umull	r1, r3, r3, r2
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	2164      	movs	r1, #100	; 0x64
 8006816:	fb01 f303 	mul.w	r3, r1, r3
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	3332      	adds	r3, #50	; 0x32
 8006820:	4a27      	ldr	r2, [pc, #156]	; (80068c0 <UART_SetConfig+0x384>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800682e:	4498      	add	r8, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	461d      	mov	r5, r3
 8006834:	f04f 0600 	mov.w	r6, #0
 8006838:	46a9      	mov	r9, r5
 800683a:	46b2      	mov	sl, r6
 800683c:	eb19 0309 	adds.w	r3, r9, r9
 8006840:	eb4a 040a 	adc.w	r4, sl, sl
 8006844:	4699      	mov	r9, r3
 8006846:	46a2      	mov	sl, r4
 8006848:	eb19 0905 	adds.w	r9, r9, r5
 800684c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006850:	f04f 0100 	mov.w	r1, #0
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800685c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006860:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006864:	4689      	mov	r9, r1
 8006866:	4692      	mov	sl, r2
 8006868:	eb19 0005 	adds.w	r0, r9, r5
 800686c:	eb4a 0106 	adc.w	r1, sl, r6
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	461d      	mov	r5, r3
 8006876:	f04f 0600 	mov.w	r6, #0
 800687a:	196b      	adds	r3, r5, r5
 800687c:	eb46 0406 	adc.w	r4, r6, r6
 8006880:	461a      	mov	r2, r3
 8006882:	4623      	mov	r3, r4
 8006884:	f7fa fa00 	bl	8000c88 <__aeabi_uldivmod>
 8006888:	4603      	mov	r3, r0
 800688a:	460c      	mov	r4, r1
 800688c:	461a      	mov	r2, r3
 800688e:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <UART_SetConfig+0x384>)
 8006890:	fba3 1302 	umull	r1, r3, r3, r2
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	2164      	movs	r1, #100	; 0x64
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	3332      	adds	r3, #50	; 0x32
 80068a2:	4a07      	ldr	r2, [pc, #28]	; (80068c0 <UART_SetConfig+0x384>)
 80068a4:	fba2 2303 	umull	r2, r3, r2, r3
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	f003 0207 	and.w	r2, r3, #7
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4442      	add	r2, r8
 80068b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80068b6:	e1b2      	b.n	8006c1e <UART_SetConfig+0x6e2>
 80068b8:	40011000 	.word	0x40011000
 80068bc:	40011400 	.word	0x40011400
 80068c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4ad7      	ldr	r2, [pc, #860]	; (8006c28 <UART_SetConfig+0x6ec>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d005      	beq.n	80068da <UART_SetConfig+0x39e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4ad6      	ldr	r2, [pc, #856]	; (8006c2c <UART_SetConfig+0x6f0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	f040 80d1 	bne.w	8006a7c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80068da:	f7fe f84f 	bl	800497c <HAL_RCC_GetPCLK2Freq>
 80068de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	469a      	mov	sl, r3
 80068e4:	f04f 0b00 	mov.w	fp, #0
 80068e8:	46d0      	mov	r8, sl
 80068ea:	46d9      	mov	r9, fp
 80068ec:	eb18 0308 	adds.w	r3, r8, r8
 80068f0:	eb49 0409 	adc.w	r4, r9, r9
 80068f4:	4698      	mov	r8, r3
 80068f6:	46a1      	mov	r9, r4
 80068f8:	eb18 080a 	adds.w	r8, r8, sl
 80068fc:	eb49 090b 	adc.w	r9, r9, fp
 8006900:	f04f 0100 	mov.w	r1, #0
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800690c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006910:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006914:	4688      	mov	r8, r1
 8006916:	4691      	mov	r9, r2
 8006918:	eb1a 0508 	adds.w	r5, sl, r8
 800691c:	eb4b 0609 	adc.w	r6, fp, r9
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4619      	mov	r1, r3
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	f04f 0400 	mov.w	r4, #0
 8006932:	0094      	lsls	r4, r2, #2
 8006934:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006938:	008b      	lsls	r3, r1, #2
 800693a:	461a      	mov	r2, r3
 800693c:	4623      	mov	r3, r4
 800693e:	4628      	mov	r0, r5
 8006940:	4631      	mov	r1, r6
 8006942:	f7fa f9a1 	bl	8000c88 <__aeabi_uldivmod>
 8006946:	4603      	mov	r3, r0
 8006948:	460c      	mov	r4, r1
 800694a:	461a      	mov	r2, r3
 800694c:	4bb8      	ldr	r3, [pc, #736]	; (8006c30 <UART_SetConfig+0x6f4>)
 800694e:	fba3 2302 	umull	r2, r3, r3, r2
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	469b      	mov	fp, r3
 800695c:	f04f 0c00 	mov.w	ip, #0
 8006960:	46d9      	mov	r9, fp
 8006962:	46e2      	mov	sl, ip
 8006964:	eb19 0309 	adds.w	r3, r9, r9
 8006968:	eb4a 040a 	adc.w	r4, sl, sl
 800696c:	4699      	mov	r9, r3
 800696e:	46a2      	mov	sl, r4
 8006970:	eb19 090b 	adds.w	r9, r9, fp
 8006974:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006978:	f04f 0100 	mov.w	r1, #0
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006984:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006988:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800698c:	4689      	mov	r9, r1
 800698e:	4692      	mov	sl, r2
 8006990:	eb1b 0509 	adds.w	r5, fp, r9
 8006994:	eb4c 060a 	adc.w	r6, ip, sl
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4619      	mov	r1, r3
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	f04f 0400 	mov.w	r4, #0
 80069aa:	0094      	lsls	r4, r2, #2
 80069ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069b0:	008b      	lsls	r3, r1, #2
 80069b2:	461a      	mov	r2, r3
 80069b4:	4623      	mov	r3, r4
 80069b6:	4628      	mov	r0, r5
 80069b8:	4631      	mov	r1, r6
 80069ba:	f7fa f965 	bl	8000c88 <__aeabi_uldivmod>
 80069be:	4603      	mov	r3, r0
 80069c0:	460c      	mov	r4, r1
 80069c2:	461a      	mov	r2, r3
 80069c4:	4b9a      	ldr	r3, [pc, #616]	; (8006c30 <UART_SetConfig+0x6f4>)
 80069c6:	fba3 1302 	umull	r1, r3, r3, r2
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	2164      	movs	r1, #100	; 0x64
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	3332      	adds	r3, #50	; 0x32
 80069d8:	4a95      	ldr	r2, [pc, #596]	; (8006c30 <UART_SetConfig+0x6f4>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	095b      	lsrs	r3, r3, #5
 80069e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069e4:	4498      	add	r8, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	469b      	mov	fp, r3
 80069ea:	f04f 0c00 	mov.w	ip, #0
 80069ee:	46d9      	mov	r9, fp
 80069f0:	46e2      	mov	sl, ip
 80069f2:	eb19 0309 	adds.w	r3, r9, r9
 80069f6:	eb4a 040a 	adc.w	r4, sl, sl
 80069fa:	4699      	mov	r9, r3
 80069fc:	46a2      	mov	sl, r4
 80069fe:	eb19 090b 	adds.w	r9, r9, fp
 8006a02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a06:	f04f 0100 	mov.w	r1, #0
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a1a:	4689      	mov	r9, r1
 8006a1c:	4692      	mov	sl, r2
 8006a1e:	eb1b 0509 	adds.w	r5, fp, r9
 8006a22:	eb4c 060a 	adc.w	r6, ip, sl
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	f04f 0400 	mov.w	r4, #0
 8006a38:	0094      	lsls	r4, r2, #2
 8006a3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a3e:	008b      	lsls	r3, r1, #2
 8006a40:	461a      	mov	r2, r3
 8006a42:	4623      	mov	r3, r4
 8006a44:	4628      	mov	r0, r5
 8006a46:	4631      	mov	r1, r6
 8006a48:	f7fa f91e 	bl	8000c88 <__aeabi_uldivmod>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	461a      	mov	r2, r3
 8006a52:	4b77      	ldr	r3, [pc, #476]	; (8006c30 <UART_SetConfig+0x6f4>)
 8006a54:	fba3 1302 	umull	r1, r3, r3, r2
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	2164      	movs	r1, #100	; 0x64
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	3332      	adds	r3, #50	; 0x32
 8006a66:	4a72      	ldr	r2, [pc, #456]	; (8006c30 <UART_SetConfig+0x6f4>)
 8006a68:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	f003 020f 	and.w	r2, r3, #15
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4442      	add	r2, r8
 8006a78:	609a      	str	r2, [r3, #8]
 8006a7a:	e0d0      	b.n	8006c1e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a7c:	f7fd ff6a 	bl	8004954 <HAL_RCC_GetPCLK1Freq>
 8006a80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	469a      	mov	sl, r3
 8006a86:	f04f 0b00 	mov.w	fp, #0
 8006a8a:	46d0      	mov	r8, sl
 8006a8c:	46d9      	mov	r9, fp
 8006a8e:	eb18 0308 	adds.w	r3, r8, r8
 8006a92:	eb49 0409 	adc.w	r4, r9, r9
 8006a96:	4698      	mov	r8, r3
 8006a98:	46a1      	mov	r9, r4
 8006a9a:	eb18 080a 	adds.w	r8, r8, sl
 8006a9e:	eb49 090b 	adc.w	r9, r9, fp
 8006aa2:	f04f 0100 	mov.w	r1, #0
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006aae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ab2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ab6:	4688      	mov	r8, r1
 8006ab8:	4691      	mov	r9, r2
 8006aba:	eb1a 0508 	adds.w	r5, sl, r8
 8006abe:	eb4b 0609 	adc.w	r6, fp, r9
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	f04f 0400 	mov.w	r4, #0
 8006ad4:	0094      	lsls	r4, r2, #2
 8006ad6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ada:	008b      	lsls	r3, r1, #2
 8006adc:	461a      	mov	r2, r3
 8006ade:	4623      	mov	r3, r4
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	f7fa f8d0 	bl	8000c88 <__aeabi_uldivmod>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	461a      	mov	r2, r3
 8006aee:	4b50      	ldr	r3, [pc, #320]	; (8006c30 <UART_SetConfig+0x6f4>)
 8006af0:	fba3 2302 	umull	r2, r3, r3, r2
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	469b      	mov	fp, r3
 8006afe:	f04f 0c00 	mov.w	ip, #0
 8006b02:	46d9      	mov	r9, fp
 8006b04:	46e2      	mov	sl, ip
 8006b06:	eb19 0309 	adds.w	r3, r9, r9
 8006b0a:	eb4a 040a 	adc.w	r4, sl, sl
 8006b0e:	4699      	mov	r9, r3
 8006b10:	46a2      	mov	sl, r4
 8006b12:	eb19 090b 	adds.w	r9, r9, fp
 8006b16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b1a:	f04f 0100 	mov.w	r1, #0
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b2e:	4689      	mov	r9, r1
 8006b30:	4692      	mov	sl, r2
 8006b32:	eb1b 0509 	adds.w	r5, fp, r9
 8006b36:	eb4c 060a 	adc.w	r6, ip, sl
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	f04f 0400 	mov.w	r4, #0
 8006b4c:	0094      	lsls	r4, r2, #2
 8006b4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b52:	008b      	lsls	r3, r1, #2
 8006b54:	461a      	mov	r2, r3
 8006b56:	4623      	mov	r3, r4
 8006b58:	4628      	mov	r0, r5
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	f7fa f894 	bl	8000c88 <__aeabi_uldivmod>
 8006b60:	4603      	mov	r3, r0
 8006b62:	460c      	mov	r4, r1
 8006b64:	461a      	mov	r2, r3
 8006b66:	4b32      	ldr	r3, [pc, #200]	; (8006c30 <UART_SetConfig+0x6f4>)
 8006b68:	fba3 1302 	umull	r1, r3, r3, r2
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	2164      	movs	r1, #100	; 0x64
 8006b70:	fb01 f303 	mul.w	r3, r1, r3
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	3332      	adds	r3, #50	; 0x32
 8006b7a:	4a2d      	ldr	r2, [pc, #180]	; (8006c30 <UART_SetConfig+0x6f4>)
 8006b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b80:	095b      	lsrs	r3, r3, #5
 8006b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b86:	4498      	add	r8, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	469b      	mov	fp, r3
 8006b8c:	f04f 0c00 	mov.w	ip, #0
 8006b90:	46d9      	mov	r9, fp
 8006b92:	46e2      	mov	sl, ip
 8006b94:	eb19 0309 	adds.w	r3, r9, r9
 8006b98:	eb4a 040a 	adc.w	r4, sl, sl
 8006b9c:	4699      	mov	r9, r3
 8006b9e:	46a2      	mov	sl, r4
 8006ba0:	eb19 090b 	adds.w	r9, r9, fp
 8006ba4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bbc:	4689      	mov	r9, r1
 8006bbe:	4692      	mov	sl, r2
 8006bc0:	eb1b 0509 	adds.w	r5, fp, r9
 8006bc4:	eb4c 060a 	adc.w	r6, ip, sl
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	f04f 0400 	mov.w	r4, #0
 8006bda:	0094      	lsls	r4, r2, #2
 8006bdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006be0:	008b      	lsls	r3, r1, #2
 8006be2:	461a      	mov	r2, r3
 8006be4:	4623      	mov	r3, r4
 8006be6:	4628      	mov	r0, r5
 8006be8:	4631      	mov	r1, r6
 8006bea:	f7fa f84d 	bl	8000c88 <__aeabi_uldivmod>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4b0e      	ldr	r3, [pc, #56]	; (8006c30 <UART_SetConfig+0x6f4>)
 8006bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	2164      	movs	r1, #100	; 0x64
 8006bfe:	fb01 f303 	mul.w	r3, r1, r3
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	3332      	adds	r3, #50	; 0x32
 8006c08:	4a09      	ldr	r2, [pc, #36]	; (8006c30 <UART_SetConfig+0x6f4>)
 8006c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	f003 020f 	and.w	r2, r3, #15
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4442      	add	r2, r8
 8006c1a:	609a      	str	r2, [r3, #8]
}
 8006c1c:	e7ff      	b.n	8006c1e <UART_SetConfig+0x6e2>
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c28:	40011000 	.word	0x40011000
 8006c2c:	40011400 	.word	0x40011400
 8006c30:	51eb851f 	.word	0x51eb851f

08006c34 <__errno>:
 8006c34:	4b01      	ldr	r3, [pc, #4]	; (8006c3c <__errno+0x8>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	2000000c 	.word	0x2000000c

08006c40 <__libc_init_array>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	4e0d      	ldr	r6, [pc, #52]	; (8006c78 <__libc_init_array+0x38>)
 8006c44:	4c0d      	ldr	r4, [pc, #52]	; (8006c7c <__libc_init_array+0x3c>)
 8006c46:	1ba4      	subs	r4, r4, r6
 8006c48:	10a4      	asrs	r4, r4, #2
 8006c4a:	2500      	movs	r5, #0
 8006c4c:	42a5      	cmp	r5, r4
 8006c4e:	d109      	bne.n	8006c64 <__libc_init_array+0x24>
 8006c50:	4e0b      	ldr	r6, [pc, #44]	; (8006c80 <__libc_init_array+0x40>)
 8006c52:	4c0c      	ldr	r4, [pc, #48]	; (8006c84 <__libc_init_array+0x44>)
 8006c54:	f004 fa5c 	bl	800b110 <_init>
 8006c58:	1ba4      	subs	r4, r4, r6
 8006c5a:	10a4      	asrs	r4, r4, #2
 8006c5c:	2500      	movs	r5, #0
 8006c5e:	42a5      	cmp	r5, r4
 8006c60:	d105      	bne.n	8006c6e <__libc_init_array+0x2e>
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c68:	4798      	blx	r3
 8006c6a:	3501      	adds	r5, #1
 8006c6c:	e7ee      	b.n	8006c4c <__libc_init_array+0xc>
 8006c6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c72:	4798      	blx	r3
 8006c74:	3501      	adds	r5, #1
 8006c76:	e7f2      	b.n	8006c5e <__libc_init_array+0x1e>
 8006c78:	0800b638 	.word	0x0800b638
 8006c7c:	0800b638 	.word	0x0800b638
 8006c80:	0800b638 	.word	0x0800b638
 8006c84:	0800b63c 	.word	0x0800b63c

08006c88 <memset>:
 8006c88:	4402      	add	r2, r0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d100      	bne.n	8006c92 <memset+0xa>
 8006c90:	4770      	bx	lr
 8006c92:	f803 1b01 	strb.w	r1, [r3], #1
 8006c96:	e7f9      	b.n	8006c8c <memset+0x4>

08006c98 <__cvt>:
 8006c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9c:	ec55 4b10 	vmov	r4, r5, d0
 8006ca0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006ca2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ca6:	2d00      	cmp	r5, #0
 8006ca8:	460e      	mov	r6, r1
 8006caa:	4691      	mov	r9, r2
 8006cac:	4619      	mov	r1, r3
 8006cae:	bfb8      	it	lt
 8006cb0:	4622      	movlt	r2, r4
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	f027 0720 	bic.w	r7, r7, #32
 8006cb8:	bfbb      	ittet	lt
 8006cba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cbe:	461d      	movlt	r5, r3
 8006cc0:	2300      	movge	r3, #0
 8006cc2:	232d      	movlt	r3, #45	; 0x2d
 8006cc4:	bfb8      	it	lt
 8006cc6:	4614      	movlt	r4, r2
 8006cc8:	2f46      	cmp	r7, #70	; 0x46
 8006cca:	700b      	strb	r3, [r1, #0]
 8006ccc:	d004      	beq.n	8006cd8 <__cvt+0x40>
 8006cce:	2f45      	cmp	r7, #69	; 0x45
 8006cd0:	d100      	bne.n	8006cd4 <__cvt+0x3c>
 8006cd2:	3601      	adds	r6, #1
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	e000      	b.n	8006cda <__cvt+0x42>
 8006cd8:	2103      	movs	r1, #3
 8006cda:	ab03      	add	r3, sp, #12
 8006cdc:	9301      	str	r3, [sp, #4]
 8006cde:	ab02      	add	r3, sp, #8
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	4632      	mov	r2, r6
 8006ce4:	4653      	mov	r3, sl
 8006ce6:	ec45 4b10 	vmov	d0, r4, r5
 8006cea:	f001 feb1 	bl	8008a50 <_dtoa_r>
 8006cee:	2f47      	cmp	r7, #71	; 0x47
 8006cf0:	4680      	mov	r8, r0
 8006cf2:	d102      	bne.n	8006cfa <__cvt+0x62>
 8006cf4:	f019 0f01 	tst.w	r9, #1
 8006cf8:	d026      	beq.n	8006d48 <__cvt+0xb0>
 8006cfa:	2f46      	cmp	r7, #70	; 0x46
 8006cfc:	eb08 0906 	add.w	r9, r8, r6
 8006d00:	d111      	bne.n	8006d26 <__cvt+0x8e>
 8006d02:	f898 3000 	ldrb.w	r3, [r8]
 8006d06:	2b30      	cmp	r3, #48	; 0x30
 8006d08:	d10a      	bne.n	8006d20 <__cvt+0x88>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7f9 fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d16:	b918      	cbnz	r0, 8006d20 <__cvt+0x88>
 8006d18:	f1c6 0601 	rsb	r6, r6, #1
 8006d1c:	f8ca 6000 	str.w	r6, [sl]
 8006d20:	f8da 3000 	ldr.w	r3, [sl]
 8006d24:	4499      	add	r9, r3
 8006d26:	2200      	movs	r2, #0
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	f7f9 fecb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d32:	b938      	cbnz	r0, 8006d44 <__cvt+0xac>
 8006d34:	2230      	movs	r2, #48	; 0x30
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	454b      	cmp	r3, r9
 8006d3a:	d205      	bcs.n	8006d48 <__cvt+0xb0>
 8006d3c:	1c59      	adds	r1, r3, #1
 8006d3e:	9103      	str	r1, [sp, #12]
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	e7f8      	b.n	8006d36 <__cvt+0x9e>
 8006d44:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d4c:	eba3 0308 	sub.w	r3, r3, r8
 8006d50:	4640      	mov	r0, r8
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	b004      	add	sp, #16
 8006d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006d5a <__exponent>:
 8006d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	bfba      	itte	lt
 8006d62:	4249      	neglt	r1, r1
 8006d64:	232d      	movlt	r3, #45	; 0x2d
 8006d66:	232b      	movge	r3, #43	; 0x2b
 8006d68:	2909      	cmp	r1, #9
 8006d6a:	f804 2b02 	strb.w	r2, [r4], #2
 8006d6e:	7043      	strb	r3, [r0, #1]
 8006d70:	dd20      	ble.n	8006db4 <__exponent+0x5a>
 8006d72:	f10d 0307 	add.w	r3, sp, #7
 8006d76:	461f      	mov	r7, r3
 8006d78:	260a      	movs	r6, #10
 8006d7a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006d7e:	fb06 1115 	mls	r1, r6, r5, r1
 8006d82:	3130      	adds	r1, #48	; 0x30
 8006d84:	2d09      	cmp	r5, #9
 8006d86:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d8a:	f103 32ff 	add.w	r2, r3, #4294967295
 8006d8e:	4629      	mov	r1, r5
 8006d90:	dc09      	bgt.n	8006da6 <__exponent+0x4c>
 8006d92:	3130      	adds	r1, #48	; 0x30
 8006d94:	3b02      	subs	r3, #2
 8006d96:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006d9a:	42bb      	cmp	r3, r7
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	d304      	bcc.n	8006daa <__exponent+0x50>
 8006da0:	1a10      	subs	r0, r2, r0
 8006da2:	b003      	add	sp, #12
 8006da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006da6:	4613      	mov	r3, r2
 8006da8:	e7e7      	b.n	8006d7a <__exponent+0x20>
 8006daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dae:	f804 2b01 	strb.w	r2, [r4], #1
 8006db2:	e7f2      	b.n	8006d9a <__exponent+0x40>
 8006db4:	2330      	movs	r3, #48	; 0x30
 8006db6:	4419      	add	r1, r3
 8006db8:	7083      	strb	r3, [r0, #2]
 8006dba:	1d02      	adds	r2, r0, #4
 8006dbc:	70c1      	strb	r1, [r0, #3]
 8006dbe:	e7ef      	b.n	8006da0 <__exponent+0x46>

08006dc0 <_printf_float>:
 8006dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	b08d      	sub	sp, #52	; 0x34
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006dcc:	4616      	mov	r6, r2
 8006dce:	461f      	mov	r7, r3
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	f003 f89b 	bl	8009f0c <_localeconv_r>
 8006dd6:	6803      	ldr	r3, [r0, #0]
 8006dd8:	9304      	str	r3, [sp, #16]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7f9 f9f8 	bl	80001d0 <strlen>
 8006de0:	2300      	movs	r3, #0
 8006de2:	930a      	str	r3, [sp, #40]	; 0x28
 8006de4:	f8d8 3000 	ldr.w	r3, [r8]
 8006de8:	9005      	str	r0, [sp, #20]
 8006dea:	3307      	adds	r3, #7
 8006dec:	f023 0307 	bic.w	r3, r3, #7
 8006df0:	f103 0208 	add.w	r2, r3, #8
 8006df4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006df8:	f8d4 b000 	ldr.w	fp, [r4]
 8006dfc:	f8c8 2000 	str.w	r2, [r8]
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e08:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e0c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e10:	9307      	str	r3, [sp, #28]
 8006e12:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e16:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1a:	4ba7      	ldr	r3, [pc, #668]	; (80070b8 <_printf_float+0x2f8>)
 8006e1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e20:	f7f9 fe84 	bl	8000b2c <__aeabi_dcmpun>
 8006e24:	bb70      	cbnz	r0, 8006e84 <_printf_float+0xc4>
 8006e26:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2a:	4ba3      	ldr	r3, [pc, #652]	; (80070b8 <_printf_float+0x2f8>)
 8006e2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e30:	f7f9 fe5e 	bl	8000af0 <__aeabi_dcmple>
 8006e34:	bb30      	cbnz	r0, 8006e84 <_printf_float+0xc4>
 8006e36:	2200      	movs	r2, #0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f7f9 fe4d 	bl	8000adc <__aeabi_dcmplt>
 8006e42:	b110      	cbz	r0, 8006e4a <_printf_float+0x8a>
 8006e44:	232d      	movs	r3, #45	; 0x2d
 8006e46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e4a:	4a9c      	ldr	r2, [pc, #624]	; (80070bc <_printf_float+0x2fc>)
 8006e4c:	4b9c      	ldr	r3, [pc, #624]	; (80070c0 <_printf_float+0x300>)
 8006e4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006e52:	bf8c      	ite	hi
 8006e54:	4690      	movhi	r8, r2
 8006e56:	4698      	movls	r8, r3
 8006e58:	2303      	movs	r3, #3
 8006e5a:	f02b 0204 	bic.w	r2, fp, #4
 8006e5e:	6123      	str	r3, [r4, #16]
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	f04f 0900 	mov.w	r9, #0
 8006e66:	9700      	str	r7, [sp, #0]
 8006e68:	4633      	mov	r3, r6
 8006e6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f000 f9e6 	bl	8007240 <_printf_common>
 8006e74:	3001      	adds	r0, #1
 8006e76:	f040 808d 	bne.w	8006f94 <_printf_float+0x1d4>
 8006e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7e:	b00d      	add	sp, #52	; 0x34
 8006e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e84:	4642      	mov	r2, r8
 8006e86:	464b      	mov	r3, r9
 8006e88:	4640      	mov	r0, r8
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	f7f9 fe4e 	bl	8000b2c <__aeabi_dcmpun>
 8006e90:	b110      	cbz	r0, 8006e98 <_printf_float+0xd8>
 8006e92:	4a8c      	ldr	r2, [pc, #560]	; (80070c4 <_printf_float+0x304>)
 8006e94:	4b8c      	ldr	r3, [pc, #560]	; (80070c8 <_printf_float+0x308>)
 8006e96:	e7da      	b.n	8006e4e <_printf_float+0x8e>
 8006e98:	6861      	ldr	r1, [r4, #4]
 8006e9a:	1c4b      	adds	r3, r1, #1
 8006e9c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006ea0:	a80a      	add	r0, sp, #40	; 0x28
 8006ea2:	d13e      	bne.n	8006f22 <_printf_float+0x162>
 8006ea4:	2306      	movs	r3, #6
 8006ea6:	6063      	str	r3, [r4, #4]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006eae:	ab09      	add	r3, sp, #36	; 0x24
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	ec49 8b10 	vmov	d0, r8, r9
 8006eb6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006eba:	6022      	str	r2, [r4, #0]
 8006ebc:	f8cd a004 	str.w	sl, [sp, #4]
 8006ec0:	6861      	ldr	r1, [r4, #4]
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f7ff fee8 	bl	8006c98 <__cvt>
 8006ec8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006ecc:	2b47      	cmp	r3, #71	; 0x47
 8006ece:	4680      	mov	r8, r0
 8006ed0:	d109      	bne.n	8006ee6 <_printf_float+0x126>
 8006ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed4:	1cd8      	adds	r0, r3, #3
 8006ed6:	db02      	blt.n	8006ede <_printf_float+0x11e>
 8006ed8:	6862      	ldr	r2, [r4, #4]
 8006eda:	4293      	cmp	r3, r2
 8006edc:	dd47      	ble.n	8006f6e <_printf_float+0x1ae>
 8006ede:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ee2:	fa5f fa8a 	uxtb.w	sl, sl
 8006ee6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006eea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eec:	d824      	bhi.n	8006f38 <_printf_float+0x178>
 8006eee:	3901      	subs	r1, #1
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ef6:	9109      	str	r1, [sp, #36]	; 0x24
 8006ef8:	f7ff ff2f 	bl	8006d5a <__exponent>
 8006efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006efe:	1813      	adds	r3, r2, r0
 8006f00:	2a01      	cmp	r2, #1
 8006f02:	4681      	mov	r9, r0
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	dc02      	bgt.n	8006f0e <_printf_float+0x14e>
 8006f08:	6822      	ldr	r2, [r4, #0]
 8006f0a:	07d1      	lsls	r1, r2, #31
 8006f0c:	d501      	bpl.n	8006f12 <_printf_float+0x152>
 8006f0e:	3301      	adds	r3, #1
 8006f10:	6123      	str	r3, [r4, #16]
 8006f12:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0a5      	beq.n	8006e66 <_printf_float+0xa6>
 8006f1a:	232d      	movs	r3, #45	; 0x2d
 8006f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f20:	e7a1      	b.n	8006e66 <_printf_float+0xa6>
 8006f22:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006f26:	f000 8177 	beq.w	8007218 <_printf_float+0x458>
 8006f2a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006f2e:	d1bb      	bne.n	8006ea8 <_printf_float+0xe8>
 8006f30:	2900      	cmp	r1, #0
 8006f32:	d1b9      	bne.n	8006ea8 <_printf_float+0xe8>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e7b6      	b.n	8006ea6 <_printf_float+0xe6>
 8006f38:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006f3c:	d119      	bne.n	8006f72 <_printf_float+0x1b2>
 8006f3e:	2900      	cmp	r1, #0
 8006f40:	6863      	ldr	r3, [r4, #4]
 8006f42:	dd0c      	ble.n	8006f5e <_printf_float+0x19e>
 8006f44:	6121      	str	r1, [r4, #16]
 8006f46:	b913      	cbnz	r3, 8006f4e <_printf_float+0x18e>
 8006f48:	6822      	ldr	r2, [r4, #0]
 8006f4a:	07d2      	lsls	r2, r2, #31
 8006f4c:	d502      	bpl.n	8006f54 <_printf_float+0x194>
 8006f4e:	3301      	adds	r3, #1
 8006f50:	440b      	add	r3, r1
 8006f52:	6123      	str	r3, [r4, #16]
 8006f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f56:	65a3      	str	r3, [r4, #88]	; 0x58
 8006f58:	f04f 0900 	mov.w	r9, #0
 8006f5c:	e7d9      	b.n	8006f12 <_printf_float+0x152>
 8006f5e:	b913      	cbnz	r3, 8006f66 <_printf_float+0x1a6>
 8006f60:	6822      	ldr	r2, [r4, #0]
 8006f62:	07d0      	lsls	r0, r2, #31
 8006f64:	d501      	bpl.n	8006f6a <_printf_float+0x1aa>
 8006f66:	3302      	adds	r3, #2
 8006f68:	e7f3      	b.n	8006f52 <_printf_float+0x192>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e7f1      	b.n	8006f52 <_printf_float+0x192>
 8006f6e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006f72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f76:	4293      	cmp	r3, r2
 8006f78:	db05      	blt.n	8006f86 <_printf_float+0x1c6>
 8006f7a:	6822      	ldr	r2, [r4, #0]
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	07d1      	lsls	r1, r2, #31
 8006f80:	d5e8      	bpl.n	8006f54 <_printf_float+0x194>
 8006f82:	3301      	adds	r3, #1
 8006f84:	e7e5      	b.n	8006f52 <_printf_float+0x192>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	bfd4      	ite	le
 8006f8a:	f1c3 0302 	rsble	r3, r3, #2
 8006f8e:	2301      	movgt	r3, #1
 8006f90:	4413      	add	r3, r2
 8006f92:	e7de      	b.n	8006f52 <_printf_float+0x192>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	055a      	lsls	r2, r3, #21
 8006f98:	d407      	bmi.n	8006faa <_printf_float+0x1ea>
 8006f9a:	6923      	ldr	r3, [r4, #16]
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d12b      	bne.n	8007000 <_printf_float+0x240>
 8006fa8:	e767      	b.n	8006e7a <_printf_float+0xba>
 8006faa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006fae:	f240 80dc 	bls.w	800716a <_printf_float+0x3aa>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fba:	f7f9 fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d033      	beq.n	800702a <_printf_float+0x26a>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4a41      	ldr	r2, [pc, #260]	; (80070cc <_printf_float+0x30c>)
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4628      	mov	r0, r5
 8006fca:	47b8      	blx	r7
 8006fcc:	3001      	adds	r0, #1
 8006fce:	f43f af54 	beq.w	8006e7a <_printf_float+0xba>
 8006fd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	db02      	blt.n	8006fe0 <_printf_float+0x220>
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	07d8      	lsls	r0, r3, #31
 8006fde:	d50f      	bpl.n	8007000 <_printf_float+0x240>
 8006fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	f43f af45 	beq.w	8006e7a <_printf_float+0xba>
 8006ff0:	f04f 0800 	mov.w	r8, #0
 8006ff4:	f104 091a 	add.w	r9, r4, #26
 8006ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	4543      	cmp	r3, r8
 8006ffe:	dc09      	bgt.n	8007014 <_printf_float+0x254>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	079b      	lsls	r3, r3, #30
 8007004:	f100 8103 	bmi.w	800720e <_printf_float+0x44e>
 8007008:	68e0      	ldr	r0, [r4, #12]
 800700a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800700c:	4298      	cmp	r0, r3
 800700e:	bfb8      	it	lt
 8007010:	4618      	movlt	r0, r3
 8007012:	e734      	b.n	8006e7e <_printf_float+0xbe>
 8007014:	2301      	movs	r3, #1
 8007016:	464a      	mov	r2, r9
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f af2b 	beq.w	8006e7a <_printf_float+0xba>
 8007024:	f108 0801 	add.w	r8, r8, #1
 8007028:	e7e6      	b.n	8006ff8 <_printf_float+0x238>
 800702a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	dc2b      	bgt.n	8007088 <_printf_float+0x2c8>
 8007030:	2301      	movs	r3, #1
 8007032:	4a26      	ldr	r2, [pc, #152]	; (80070cc <_printf_float+0x30c>)
 8007034:	4631      	mov	r1, r6
 8007036:	4628      	mov	r0, r5
 8007038:	47b8      	blx	r7
 800703a:	3001      	adds	r0, #1
 800703c:	f43f af1d 	beq.w	8006e7a <_printf_float+0xba>
 8007040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007042:	b923      	cbnz	r3, 800704e <_printf_float+0x28e>
 8007044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007046:	b913      	cbnz	r3, 800704e <_printf_float+0x28e>
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	07d9      	lsls	r1, r3, #31
 800704c:	d5d8      	bpl.n	8007000 <_printf_float+0x240>
 800704e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007052:	4631      	mov	r1, r6
 8007054:	4628      	mov	r0, r5
 8007056:	47b8      	blx	r7
 8007058:	3001      	adds	r0, #1
 800705a:	f43f af0e 	beq.w	8006e7a <_printf_float+0xba>
 800705e:	f04f 0900 	mov.w	r9, #0
 8007062:	f104 0a1a 	add.w	sl, r4, #26
 8007066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007068:	425b      	negs	r3, r3
 800706a:	454b      	cmp	r3, r9
 800706c:	dc01      	bgt.n	8007072 <_printf_float+0x2b2>
 800706e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007070:	e794      	b.n	8006f9c <_printf_float+0x1dc>
 8007072:	2301      	movs	r3, #1
 8007074:	4652      	mov	r2, sl
 8007076:	4631      	mov	r1, r6
 8007078:	4628      	mov	r0, r5
 800707a:	47b8      	blx	r7
 800707c:	3001      	adds	r0, #1
 800707e:	f43f aefc 	beq.w	8006e7a <_printf_float+0xba>
 8007082:	f109 0901 	add.w	r9, r9, #1
 8007086:	e7ee      	b.n	8007066 <_printf_float+0x2a6>
 8007088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800708a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800708c:	429a      	cmp	r2, r3
 800708e:	bfa8      	it	ge
 8007090:	461a      	movge	r2, r3
 8007092:	2a00      	cmp	r2, #0
 8007094:	4691      	mov	r9, r2
 8007096:	dd07      	ble.n	80070a8 <_printf_float+0x2e8>
 8007098:	4613      	mov	r3, r2
 800709a:	4631      	mov	r1, r6
 800709c:	4642      	mov	r2, r8
 800709e:	4628      	mov	r0, r5
 80070a0:	47b8      	blx	r7
 80070a2:	3001      	adds	r0, #1
 80070a4:	f43f aee9 	beq.w	8006e7a <_printf_float+0xba>
 80070a8:	f104 031a 	add.w	r3, r4, #26
 80070ac:	f04f 0b00 	mov.w	fp, #0
 80070b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070b4:	9306      	str	r3, [sp, #24]
 80070b6:	e015      	b.n	80070e4 <_printf_float+0x324>
 80070b8:	7fefffff 	.word	0x7fefffff
 80070bc:	0800b314 	.word	0x0800b314
 80070c0:	0800b310 	.word	0x0800b310
 80070c4:	0800b31c 	.word	0x0800b31c
 80070c8:	0800b318 	.word	0x0800b318
 80070cc:	0800b320 	.word	0x0800b320
 80070d0:	2301      	movs	r3, #1
 80070d2:	9a06      	ldr	r2, [sp, #24]
 80070d4:	4631      	mov	r1, r6
 80070d6:	4628      	mov	r0, r5
 80070d8:	47b8      	blx	r7
 80070da:	3001      	adds	r0, #1
 80070dc:	f43f aecd 	beq.w	8006e7a <_printf_float+0xba>
 80070e0:	f10b 0b01 	add.w	fp, fp, #1
 80070e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80070e8:	ebaa 0309 	sub.w	r3, sl, r9
 80070ec:	455b      	cmp	r3, fp
 80070ee:	dcef      	bgt.n	80070d0 <_printf_float+0x310>
 80070f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070f4:	429a      	cmp	r2, r3
 80070f6:	44d0      	add	r8, sl
 80070f8:	db15      	blt.n	8007126 <_printf_float+0x366>
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	07da      	lsls	r2, r3, #31
 80070fe:	d412      	bmi.n	8007126 <_printf_float+0x366>
 8007100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007102:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007104:	eba3 020a 	sub.w	r2, r3, sl
 8007108:	eba3 0a01 	sub.w	sl, r3, r1
 800710c:	4592      	cmp	sl, r2
 800710e:	bfa8      	it	ge
 8007110:	4692      	movge	sl, r2
 8007112:	f1ba 0f00 	cmp.w	sl, #0
 8007116:	dc0e      	bgt.n	8007136 <_printf_float+0x376>
 8007118:	f04f 0800 	mov.w	r8, #0
 800711c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007120:	f104 091a 	add.w	r9, r4, #26
 8007124:	e019      	b.n	800715a <_printf_float+0x39a>
 8007126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	d1e5      	bne.n	8007100 <_printf_float+0x340>
 8007134:	e6a1      	b.n	8006e7a <_printf_float+0xba>
 8007136:	4653      	mov	r3, sl
 8007138:	4642      	mov	r2, r8
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	d1e9      	bne.n	8007118 <_printf_float+0x358>
 8007144:	e699      	b.n	8006e7a <_printf_float+0xba>
 8007146:	2301      	movs	r3, #1
 8007148:	464a      	mov	r2, r9
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	f43f ae92 	beq.w	8006e7a <_printf_float+0xba>
 8007156:	f108 0801 	add.w	r8, r8, #1
 800715a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800715e:	1a9b      	subs	r3, r3, r2
 8007160:	eba3 030a 	sub.w	r3, r3, sl
 8007164:	4543      	cmp	r3, r8
 8007166:	dcee      	bgt.n	8007146 <_printf_float+0x386>
 8007168:	e74a      	b.n	8007000 <_printf_float+0x240>
 800716a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800716c:	2a01      	cmp	r2, #1
 800716e:	dc01      	bgt.n	8007174 <_printf_float+0x3b4>
 8007170:	07db      	lsls	r3, r3, #31
 8007172:	d53a      	bpl.n	80071ea <_printf_float+0x42a>
 8007174:	2301      	movs	r3, #1
 8007176:	4642      	mov	r2, r8
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	47b8      	blx	r7
 800717e:	3001      	adds	r0, #1
 8007180:	f43f ae7b 	beq.w	8006e7a <_printf_float+0xba>
 8007184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007188:	4631      	mov	r1, r6
 800718a:	4628      	mov	r0, r5
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	f108 0801 	add.w	r8, r8, #1
 8007194:	f43f ae71 	beq.w	8006e7a <_printf_float+0xba>
 8007198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719a:	2200      	movs	r2, #0
 800719c:	f103 3aff 	add.w	sl, r3, #4294967295
 80071a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071a4:	2300      	movs	r3, #0
 80071a6:	f7f9 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80071aa:	b9c8      	cbnz	r0, 80071e0 <_printf_float+0x420>
 80071ac:	4653      	mov	r3, sl
 80071ae:	4642      	mov	r2, r8
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	d10e      	bne.n	80071d8 <_printf_float+0x418>
 80071ba:	e65e      	b.n	8006e7a <_printf_float+0xba>
 80071bc:	2301      	movs	r3, #1
 80071be:	4652      	mov	r2, sl
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f ae57 	beq.w	8006e7a <_printf_float+0xba>
 80071cc:	f108 0801 	add.w	r8, r8, #1
 80071d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d2:	3b01      	subs	r3, #1
 80071d4:	4543      	cmp	r3, r8
 80071d6:	dcf1      	bgt.n	80071bc <_printf_float+0x3fc>
 80071d8:	464b      	mov	r3, r9
 80071da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071de:	e6de      	b.n	8006f9e <_printf_float+0x1de>
 80071e0:	f04f 0800 	mov.w	r8, #0
 80071e4:	f104 0a1a 	add.w	sl, r4, #26
 80071e8:	e7f2      	b.n	80071d0 <_printf_float+0x410>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e7df      	b.n	80071ae <_printf_float+0x3ee>
 80071ee:	2301      	movs	r3, #1
 80071f0:	464a      	mov	r2, r9
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	f43f ae3e 	beq.w	8006e7a <_printf_float+0xba>
 80071fe:	f108 0801 	add.w	r8, r8, #1
 8007202:	68e3      	ldr	r3, [r4, #12]
 8007204:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007206:	1a9b      	subs	r3, r3, r2
 8007208:	4543      	cmp	r3, r8
 800720a:	dcf0      	bgt.n	80071ee <_printf_float+0x42e>
 800720c:	e6fc      	b.n	8007008 <_printf_float+0x248>
 800720e:	f04f 0800 	mov.w	r8, #0
 8007212:	f104 0919 	add.w	r9, r4, #25
 8007216:	e7f4      	b.n	8007202 <_printf_float+0x442>
 8007218:	2900      	cmp	r1, #0
 800721a:	f43f ae8b 	beq.w	8006f34 <_printf_float+0x174>
 800721e:	2300      	movs	r3, #0
 8007220:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007224:	ab09      	add	r3, sp, #36	; 0x24
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	ec49 8b10 	vmov	d0, r8, r9
 800722c:	6022      	str	r2, [r4, #0]
 800722e:	f8cd a004 	str.w	sl, [sp, #4]
 8007232:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007236:	4628      	mov	r0, r5
 8007238:	f7ff fd2e 	bl	8006c98 <__cvt>
 800723c:	4680      	mov	r8, r0
 800723e:	e648      	b.n	8006ed2 <_printf_float+0x112>

08007240 <_printf_common>:
 8007240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007244:	4691      	mov	r9, r2
 8007246:	461f      	mov	r7, r3
 8007248:	688a      	ldr	r2, [r1, #8]
 800724a:	690b      	ldr	r3, [r1, #16]
 800724c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007250:	4293      	cmp	r3, r2
 8007252:	bfb8      	it	lt
 8007254:	4613      	movlt	r3, r2
 8007256:	f8c9 3000 	str.w	r3, [r9]
 800725a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800725e:	4606      	mov	r6, r0
 8007260:	460c      	mov	r4, r1
 8007262:	b112      	cbz	r2, 800726a <_printf_common+0x2a>
 8007264:	3301      	adds	r3, #1
 8007266:	f8c9 3000 	str.w	r3, [r9]
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	0699      	lsls	r1, r3, #26
 800726e:	bf42      	ittt	mi
 8007270:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007274:	3302      	addmi	r3, #2
 8007276:	f8c9 3000 	strmi.w	r3, [r9]
 800727a:	6825      	ldr	r5, [r4, #0]
 800727c:	f015 0506 	ands.w	r5, r5, #6
 8007280:	d107      	bne.n	8007292 <_printf_common+0x52>
 8007282:	f104 0a19 	add.w	sl, r4, #25
 8007286:	68e3      	ldr	r3, [r4, #12]
 8007288:	f8d9 2000 	ldr.w	r2, [r9]
 800728c:	1a9b      	subs	r3, r3, r2
 800728e:	42ab      	cmp	r3, r5
 8007290:	dc28      	bgt.n	80072e4 <_printf_common+0xa4>
 8007292:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007296:	6822      	ldr	r2, [r4, #0]
 8007298:	3300      	adds	r3, #0
 800729a:	bf18      	it	ne
 800729c:	2301      	movne	r3, #1
 800729e:	0692      	lsls	r2, r2, #26
 80072a0:	d42d      	bmi.n	80072fe <_printf_common+0xbe>
 80072a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a6:	4639      	mov	r1, r7
 80072a8:	4630      	mov	r0, r6
 80072aa:	47c0      	blx	r8
 80072ac:	3001      	adds	r0, #1
 80072ae:	d020      	beq.n	80072f2 <_printf_common+0xb2>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	68e5      	ldr	r5, [r4, #12]
 80072b4:	f8d9 2000 	ldr.w	r2, [r9]
 80072b8:	f003 0306 	and.w	r3, r3, #6
 80072bc:	2b04      	cmp	r3, #4
 80072be:	bf08      	it	eq
 80072c0:	1aad      	subeq	r5, r5, r2
 80072c2:	68a3      	ldr	r3, [r4, #8]
 80072c4:	6922      	ldr	r2, [r4, #16]
 80072c6:	bf0c      	ite	eq
 80072c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072cc:	2500      	movne	r5, #0
 80072ce:	4293      	cmp	r3, r2
 80072d0:	bfc4      	itt	gt
 80072d2:	1a9b      	subgt	r3, r3, r2
 80072d4:	18ed      	addgt	r5, r5, r3
 80072d6:	f04f 0900 	mov.w	r9, #0
 80072da:	341a      	adds	r4, #26
 80072dc:	454d      	cmp	r5, r9
 80072de:	d11a      	bne.n	8007316 <_printf_common+0xd6>
 80072e0:	2000      	movs	r0, #0
 80072e2:	e008      	b.n	80072f6 <_printf_common+0xb6>
 80072e4:	2301      	movs	r3, #1
 80072e6:	4652      	mov	r2, sl
 80072e8:	4639      	mov	r1, r7
 80072ea:	4630      	mov	r0, r6
 80072ec:	47c0      	blx	r8
 80072ee:	3001      	adds	r0, #1
 80072f0:	d103      	bne.n	80072fa <_printf_common+0xba>
 80072f2:	f04f 30ff 	mov.w	r0, #4294967295
 80072f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fa:	3501      	adds	r5, #1
 80072fc:	e7c3      	b.n	8007286 <_printf_common+0x46>
 80072fe:	18e1      	adds	r1, r4, r3
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	2030      	movs	r0, #48	; 0x30
 8007304:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007308:	4422      	add	r2, r4
 800730a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800730e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007312:	3302      	adds	r3, #2
 8007314:	e7c5      	b.n	80072a2 <_printf_common+0x62>
 8007316:	2301      	movs	r3, #1
 8007318:	4622      	mov	r2, r4
 800731a:	4639      	mov	r1, r7
 800731c:	4630      	mov	r0, r6
 800731e:	47c0      	blx	r8
 8007320:	3001      	adds	r0, #1
 8007322:	d0e6      	beq.n	80072f2 <_printf_common+0xb2>
 8007324:	f109 0901 	add.w	r9, r9, #1
 8007328:	e7d8      	b.n	80072dc <_printf_common+0x9c>
	...

0800732c <_printf_i>:
 800732c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007330:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007334:	460c      	mov	r4, r1
 8007336:	7e09      	ldrb	r1, [r1, #24]
 8007338:	b085      	sub	sp, #20
 800733a:	296e      	cmp	r1, #110	; 0x6e
 800733c:	4617      	mov	r7, r2
 800733e:	4606      	mov	r6, r0
 8007340:	4698      	mov	r8, r3
 8007342:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007344:	f000 80b3 	beq.w	80074ae <_printf_i+0x182>
 8007348:	d822      	bhi.n	8007390 <_printf_i+0x64>
 800734a:	2963      	cmp	r1, #99	; 0x63
 800734c:	d036      	beq.n	80073bc <_printf_i+0x90>
 800734e:	d80a      	bhi.n	8007366 <_printf_i+0x3a>
 8007350:	2900      	cmp	r1, #0
 8007352:	f000 80b9 	beq.w	80074c8 <_printf_i+0x19c>
 8007356:	2958      	cmp	r1, #88	; 0x58
 8007358:	f000 8083 	beq.w	8007462 <_printf_i+0x136>
 800735c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007360:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007364:	e032      	b.n	80073cc <_printf_i+0xa0>
 8007366:	2964      	cmp	r1, #100	; 0x64
 8007368:	d001      	beq.n	800736e <_printf_i+0x42>
 800736a:	2969      	cmp	r1, #105	; 0x69
 800736c:	d1f6      	bne.n	800735c <_printf_i+0x30>
 800736e:	6820      	ldr	r0, [r4, #0]
 8007370:	6813      	ldr	r3, [r2, #0]
 8007372:	0605      	lsls	r5, r0, #24
 8007374:	f103 0104 	add.w	r1, r3, #4
 8007378:	d52a      	bpl.n	80073d0 <_printf_i+0xa4>
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6011      	str	r1, [r2, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	da03      	bge.n	800738a <_printf_i+0x5e>
 8007382:	222d      	movs	r2, #45	; 0x2d
 8007384:	425b      	negs	r3, r3
 8007386:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800738a:	486f      	ldr	r0, [pc, #444]	; (8007548 <_printf_i+0x21c>)
 800738c:	220a      	movs	r2, #10
 800738e:	e039      	b.n	8007404 <_printf_i+0xd8>
 8007390:	2973      	cmp	r1, #115	; 0x73
 8007392:	f000 809d 	beq.w	80074d0 <_printf_i+0x1a4>
 8007396:	d808      	bhi.n	80073aa <_printf_i+0x7e>
 8007398:	296f      	cmp	r1, #111	; 0x6f
 800739a:	d020      	beq.n	80073de <_printf_i+0xb2>
 800739c:	2970      	cmp	r1, #112	; 0x70
 800739e:	d1dd      	bne.n	800735c <_printf_i+0x30>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	f043 0320 	orr.w	r3, r3, #32
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	e003      	b.n	80073b2 <_printf_i+0x86>
 80073aa:	2975      	cmp	r1, #117	; 0x75
 80073ac:	d017      	beq.n	80073de <_printf_i+0xb2>
 80073ae:	2978      	cmp	r1, #120	; 0x78
 80073b0:	d1d4      	bne.n	800735c <_printf_i+0x30>
 80073b2:	2378      	movs	r3, #120	; 0x78
 80073b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073b8:	4864      	ldr	r0, [pc, #400]	; (800754c <_printf_i+0x220>)
 80073ba:	e055      	b.n	8007468 <_printf_i+0x13c>
 80073bc:	6813      	ldr	r3, [r2, #0]
 80073be:	1d19      	adds	r1, r3, #4
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6011      	str	r1, [r2, #0]
 80073c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073cc:	2301      	movs	r3, #1
 80073ce:	e08c      	b.n	80074ea <_printf_i+0x1be>
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6011      	str	r1, [r2, #0]
 80073d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073d8:	bf18      	it	ne
 80073da:	b21b      	sxthne	r3, r3
 80073dc:	e7cf      	b.n	800737e <_printf_i+0x52>
 80073de:	6813      	ldr	r3, [r2, #0]
 80073e0:	6825      	ldr	r5, [r4, #0]
 80073e2:	1d18      	adds	r0, r3, #4
 80073e4:	6010      	str	r0, [r2, #0]
 80073e6:	0628      	lsls	r0, r5, #24
 80073e8:	d501      	bpl.n	80073ee <_printf_i+0xc2>
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	e002      	b.n	80073f4 <_printf_i+0xc8>
 80073ee:	0668      	lsls	r0, r5, #25
 80073f0:	d5fb      	bpl.n	80073ea <_printf_i+0xbe>
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	4854      	ldr	r0, [pc, #336]	; (8007548 <_printf_i+0x21c>)
 80073f6:	296f      	cmp	r1, #111	; 0x6f
 80073f8:	bf14      	ite	ne
 80073fa:	220a      	movne	r2, #10
 80073fc:	2208      	moveq	r2, #8
 80073fe:	2100      	movs	r1, #0
 8007400:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007404:	6865      	ldr	r5, [r4, #4]
 8007406:	60a5      	str	r5, [r4, #8]
 8007408:	2d00      	cmp	r5, #0
 800740a:	f2c0 8095 	blt.w	8007538 <_printf_i+0x20c>
 800740e:	6821      	ldr	r1, [r4, #0]
 8007410:	f021 0104 	bic.w	r1, r1, #4
 8007414:	6021      	str	r1, [r4, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d13d      	bne.n	8007496 <_printf_i+0x16a>
 800741a:	2d00      	cmp	r5, #0
 800741c:	f040 808e 	bne.w	800753c <_printf_i+0x210>
 8007420:	4665      	mov	r5, ip
 8007422:	2a08      	cmp	r2, #8
 8007424:	d10b      	bne.n	800743e <_printf_i+0x112>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	07db      	lsls	r3, r3, #31
 800742a:	d508      	bpl.n	800743e <_printf_i+0x112>
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	6862      	ldr	r2, [r4, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	bfde      	ittt	le
 8007434:	2330      	movle	r3, #48	; 0x30
 8007436:	f805 3c01 	strble.w	r3, [r5, #-1]
 800743a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800743e:	ebac 0305 	sub.w	r3, ip, r5
 8007442:	6123      	str	r3, [r4, #16]
 8007444:	f8cd 8000 	str.w	r8, [sp]
 8007448:	463b      	mov	r3, r7
 800744a:	aa03      	add	r2, sp, #12
 800744c:	4621      	mov	r1, r4
 800744e:	4630      	mov	r0, r6
 8007450:	f7ff fef6 	bl	8007240 <_printf_common>
 8007454:	3001      	adds	r0, #1
 8007456:	d14d      	bne.n	80074f4 <_printf_i+0x1c8>
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	b005      	add	sp, #20
 800745e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007462:	4839      	ldr	r0, [pc, #228]	; (8007548 <_printf_i+0x21c>)
 8007464:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007468:	6813      	ldr	r3, [r2, #0]
 800746a:	6821      	ldr	r1, [r4, #0]
 800746c:	1d1d      	adds	r5, r3, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6015      	str	r5, [r2, #0]
 8007472:	060a      	lsls	r2, r1, #24
 8007474:	d50b      	bpl.n	800748e <_printf_i+0x162>
 8007476:	07ca      	lsls	r2, r1, #31
 8007478:	bf44      	itt	mi
 800747a:	f041 0120 	orrmi.w	r1, r1, #32
 800747e:	6021      	strmi	r1, [r4, #0]
 8007480:	b91b      	cbnz	r3, 800748a <_printf_i+0x15e>
 8007482:	6822      	ldr	r2, [r4, #0]
 8007484:	f022 0220 	bic.w	r2, r2, #32
 8007488:	6022      	str	r2, [r4, #0]
 800748a:	2210      	movs	r2, #16
 800748c:	e7b7      	b.n	80073fe <_printf_i+0xd2>
 800748e:	064d      	lsls	r5, r1, #25
 8007490:	bf48      	it	mi
 8007492:	b29b      	uxthmi	r3, r3
 8007494:	e7ef      	b.n	8007476 <_printf_i+0x14a>
 8007496:	4665      	mov	r5, ip
 8007498:	fbb3 f1f2 	udiv	r1, r3, r2
 800749c:	fb02 3311 	mls	r3, r2, r1, r3
 80074a0:	5cc3      	ldrb	r3, [r0, r3]
 80074a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80074a6:	460b      	mov	r3, r1
 80074a8:	2900      	cmp	r1, #0
 80074aa:	d1f5      	bne.n	8007498 <_printf_i+0x16c>
 80074ac:	e7b9      	b.n	8007422 <_printf_i+0xf6>
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	6825      	ldr	r5, [r4, #0]
 80074b2:	6961      	ldr	r1, [r4, #20]
 80074b4:	1d18      	adds	r0, r3, #4
 80074b6:	6010      	str	r0, [r2, #0]
 80074b8:	0628      	lsls	r0, r5, #24
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	d501      	bpl.n	80074c2 <_printf_i+0x196>
 80074be:	6019      	str	r1, [r3, #0]
 80074c0:	e002      	b.n	80074c8 <_printf_i+0x19c>
 80074c2:	066a      	lsls	r2, r5, #25
 80074c4:	d5fb      	bpl.n	80074be <_printf_i+0x192>
 80074c6:	8019      	strh	r1, [r3, #0]
 80074c8:	2300      	movs	r3, #0
 80074ca:	6123      	str	r3, [r4, #16]
 80074cc:	4665      	mov	r5, ip
 80074ce:	e7b9      	b.n	8007444 <_printf_i+0x118>
 80074d0:	6813      	ldr	r3, [r2, #0]
 80074d2:	1d19      	adds	r1, r3, #4
 80074d4:	6011      	str	r1, [r2, #0]
 80074d6:	681d      	ldr	r5, [r3, #0]
 80074d8:	6862      	ldr	r2, [r4, #4]
 80074da:	2100      	movs	r1, #0
 80074dc:	4628      	mov	r0, r5
 80074de:	f7f8 fe7f 	bl	80001e0 <memchr>
 80074e2:	b108      	cbz	r0, 80074e8 <_printf_i+0x1bc>
 80074e4:	1b40      	subs	r0, r0, r5
 80074e6:	6060      	str	r0, [r4, #4]
 80074e8:	6863      	ldr	r3, [r4, #4]
 80074ea:	6123      	str	r3, [r4, #16]
 80074ec:	2300      	movs	r3, #0
 80074ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f2:	e7a7      	b.n	8007444 <_printf_i+0x118>
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	462a      	mov	r2, r5
 80074f8:	4639      	mov	r1, r7
 80074fa:	4630      	mov	r0, r6
 80074fc:	47c0      	blx	r8
 80074fe:	3001      	adds	r0, #1
 8007500:	d0aa      	beq.n	8007458 <_printf_i+0x12c>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	079b      	lsls	r3, r3, #30
 8007506:	d413      	bmi.n	8007530 <_printf_i+0x204>
 8007508:	68e0      	ldr	r0, [r4, #12]
 800750a:	9b03      	ldr	r3, [sp, #12]
 800750c:	4298      	cmp	r0, r3
 800750e:	bfb8      	it	lt
 8007510:	4618      	movlt	r0, r3
 8007512:	e7a3      	b.n	800745c <_printf_i+0x130>
 8007514:	2301      	movs	r3, #1
 8007516:	464a      	mov	r2, r9
 8007518:	4639      	mov	r1, r7
 800751a:	4630      	mov	r0, r6
 800751c:	47c0      	blx	r8
 800751e:	3001      	adds	r0, #1
 8007520:	d09a      	beq.n	8007458 <_printf_i+0x12c>
 8007522:	3501      	adds	r5, #1
 8007524:	68e3      	ldr	r3, [r4, #12]
 8007526:	9a03      	ldr	r2, [sp, #12]
 8007528:	1a9b      	subs	r3, r3, r2
 800752a:	42ab      	cmp	r3, r5
 800752c:	dcf2      	bgt.n	8007514 <_printf_i+0x1e8>
 800752e:	e7eb      	b.n	8007508 <_printf_i+0x1dc>
 8007530:	2500      	movs	r5, #0
 8007532:	f104 0919 	add.w	r9, r4, #25
 8007536:	e7f5      	b.n	8007524 <_printf_i+0x1f8>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1ac      	bne.n	8007496 <_printf_i+0x16a>
 800753c:	7803      	ldrb	r3, [r0, #0]
 800753e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007542:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007546:	e76c      	b.n	8007422 <_printf_i+0xf6>
 8007548:	0800b322 	.word	0x0800b322
 800754c:	0800b333 	.word	0x0800b333

08007550 <_scanf_float>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	469a      	mov	sl, r3
 8007556:	688b      	ldr	r3, [r1, #8]
 8007558:	4616      	mov	r6, r2
 800755a:	1e5a      	subs	r2, r3, #1
 800755c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007560:	b087      	sub	sp, #28
 8007562:	bf83      	ittte	hi
 8007564:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007568:	189b      	addhi	r3, r3, r2
 800756a:	9301      	strhi	r3, [sp, #4]
 800756c:	2300      	movls	r3, #0
 800756e:	bf86      	itte	hi
 8007570:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007574:	608b      	strhi	r3, [r1, #8]
 8007576:	9301      	strls	r3, [sp, #4]
 8007578:	680b      	ldr	r3, [r1, #0]
 800757a:	4688      	mov	r8, r1
 800757c:	f04f 0b00 	mov.w	fp, #0
 8007580:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007584:	f848 3b1c 	str.w	r3, [r8], #28
 8007588:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800758c:	4607      	mov	r7, r0
 800758e:	460c      	mov	r4, r1
 8007590:	4645      	mov	r5, r8
 8007592:	465a      	mov	r2, fp
 8007594:	46d9      	mov	r9, fp
 8007596:	f8cd b008 	str.w	fp, [sp, #8]
 800759a:	68a1      	ldr	r1, [r4, #8]
 800759c:	b181      	cbz	r1, 80075c0 <_scanf_float+0x70>
 800759e:	6833      	ldr	r3, [r6, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b49      	cmp	r3, #73	; 0x49
 80075a4:	d071      	beq.n	800768a <_scanf_float+0x13a>
 80075a6:	d84d      	bhi.n	8007644 <_scanf_float+0xf4>
 80075a8:	2b39      	cmp	r3, #57	; 0x39
 80075aa:	d840      	bhi.n	800762e <_scanf_float+0xde>
 80075ac:	2b31      	cmp	r3, #49	; 0x31
 80075ae:	f080 8088 	bcs.w	80076c2 <_scanf_float+0x172>
 80075b2:	2b2d      	cmp	r3, #45	; 0x2d
 80075b4:	f000 8090 	beq.w	80076d8 <_scanf_float+0x188>
 80075b8:	d815      	bhi.n	80075e6 <_scanf_float+0x96>
 80075ba:	2b2b      	cmp	r3, #43	; 0x2b
 80075bc:	f000 808c 	beq.w	80076d8 <_scanf_float+0x188>
 80075c0:	f1b9 0f00 	cmp.w	r9, #0
 80075c4:	d003      	beq.n	80075ce <_scanf_float+0x7e>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	3a01      	subs	r2, #1
 80075d0:	2a01      	cmp	r2, #1
 80075d2:	f200 80ea 	bhi.w	80077aa <_scanf_float+0x25a>
 80075d6:	4545      	cmp	r5, r8
 80075d8:	f200 80dc 	bhi.w	8007794 <_scanf_float+0x244>
 80075dc:	2601      	movs	r6, #1
 80075de:	4630      	mov	r0, r6
 80075e0:	b007      	add	sp, #28
 80075e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e6:	2b2e      	cmp	r3, #46	; 0x2e
 80075e8:	f000 809f 	beq.w	800772a <_scanf_float+0x1da>
 80075ec:	2b30      	cmp	r3, #48	; 0x30
 80075ee:	d1e7      	bne.n	80075c0 <_scanf_float+0x70>
 80075f0:	6820      	ldr	r0, [r4, #0]
 80075f2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80075f6:	d064      	beq.n	80076c2 <_scanf_float+0x172>
 80075f8:	9b01      	ldr	r3, [sp, #4]
 80075fa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80075fe:	6020      	str	r0, [r4, #0]
 8007600:	f109 0901 	add.w	r9, r9, #1
 8007604:	b11b      	cbz	r3, 800760e <_scanf_float+0xbe>
 8007606:	3b01      	subs	r3, #1
 8007608:	3101      	adds	r1, #1
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	60a1      	str	r1, [r4, #8]
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	3b01      	subs	r3, #1
 8007612:	60a3      	str	r3, [r4, #8]
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	3301      	adds	r3, #1
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	6873      	ldr	r3, [r6, #4]
 800761c:	3b01      	subs	r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	6073      	str	r3, [r6, #4]
 8007622:	f340 80ac 	ble.w	800777e <_scanf_float+0x22e>
 8007626:	6833      	ldr	r3, [r6, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	6033      	str	r3, [r6, #0]
 800762c:	e7b5      	b.n	800759a <_scanf_float+0x4a>
 800762e:	2b45      	cmp	r3, #69	; 0x45
 8007630:	f000 8085 	beq.w	800773e <_scanf_float+0x1ee>
 8007634:	2b46      	cmp	r3, #70	; 0x46
 8007636:	d06a      	beq.n	800770e <_scanf_float+0x1be>
 8007638:	2b41      	cmp	r3, #65	; 0x41
 800763a:	d1c1      	bne.n	80075c0 <_scanf_float+0x70>
 800763c:	2a01      	cmp	r2, #1
 800763e:	d1bf      	bne.n	80075c0 <_scanf_float+0x70>
 8007640:	2202      	movs	r2, #2
 8007642:	e046      	b.n	80076d2 <_scanf_float+0x182>
 8007644:	2b65      	cmp	r3, #101	; 0x65
 8007646:	d07a      	beq.n	800773e <_scanf_float+0x1ee>
 8007648:	d818      	bhi.n	800767c <_scanf_float+0x12c>
 800764a:	2b54      	cmp	r3, #84	; 0x54
 800764c:	d066      	beq.n	800771c <_scanf_float+0x1cc>
 800764e:	d811      	bhi.n	8007674 <_scanf_float+0x124>
 8007650:	2b4e      	cmp	r3, #78	; 0x4e
 8007652:	d1b5      	bne.n	80075c0 <_scanf_float+0x70>
 8007654:	2a00      	cmp	r2, #0
 8007656:	d146      	bne.n	80076e6 <_scanf_float+0x196>
 8007658:	f1b9 0f00 	cmp.w	r9, #0
 800765c:	d145      	bne.n	80076ea <_scanf_float+0x19a>
 800765e:	6821      	ldr	r1, [r4, #0]
 8007660:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007664:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007668:	d13f      	bne.n	80076ea <_scanf_float+0x19a>
 800766a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800766e:	6021      	str	r1, [r4, #0]
 8007670:	2201      	movs	r2, #1
 8007672:	e02e      	b.n	80076d2 <_scanf_float+0x182>
 8007674:	2b59      	cmp	r3, #89	; 0x59
 8007676:	d01e      	beq.n	80076b6 <_scanf_float+0x166>
 8007678:	2b61      	cmp	r3, #97	; 0x61
 800767a:	e7de      	b.n	800763a <_scanf_float+0xea>
 800767c:	2b6e      	cmp	r3, #110	; 0x6e
 800767e:	d0e9      	beq.n	8007654 <_scanf_float+0x104>
 8007680:	d815      	bhi.n	80076ae <_scanf_float+0x15e>
 8007682:	2b66      	cmp	r3, #102	; 0x66
 8007684:	d043      	beq.n	800770e <_scanf_float+0x1be>
 8007686:	2b69      	cmp	r3, #105	; 0x69
 8007688:	d19a      	bne.n	80075c0 <_scanf_float+0x70>
 800768a:	f1bb 0f00 	cmp.w	fp, #0
 800768e:	d138      	bne.n	8007702 <_scanf_float+0x1b2>
 8007690:	f1b9 0f00 	cmp.w	r9, #0
 8007694:	d197      	bne.n	80075c6 <_scanf_float+0x76>
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800769c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80076a0:	d195      	bne.n	80075ce <_scanf_float+0x7e>
 80076a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80076a6:	6021      	str	r1, [r4, #0]
 80076a8:	f04f 0b01 	mov.w	fp, #1
 80076ac:	e011      	b.n	80076d2 <_scanf_float+0x182>
 80076ae:	2b74      	cmp	r3, #116	; 0x74
 80076b0:	d034      	beq.n	800771c <_scanf_float+0x1cc>
 80076b2:	2b79      	cmp	r3, #121	; 0x79
 80076b4:	d184      	bne.n	80075c0 <_scanf_float+0x70>
 80076b6:	f1bb 0f07 	cmp.w	fp, #7
 80076ba:	d181      	bne.n	80075c0 <_scanf_float+0x70>
 80076bc:	f04f 0b08 	mov.w	fp, #8
 80076c0:	e007      	b.n	80076d2 <_scanf_float+0x182>
 80076c2:	eb12 0f0b 	cmn.w	r2, fp
 80076c6:	f47f af7b 	bne.w	80075c0 <_scanf_float+0x70>
 80076ca:	6821      	ldr	r1, [r4, #0]
 80076cc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80076d0:	6021      	str	r1, [r4, #0]
 80076d2:	702b      	strb	r3, [r5, #0]
 80076d4:	3501      	adds	r5, #1
 80076d6:	e79a      	b.n	800760e <_scanf_float+0xbe>
 80076d8:	6821      	ldr	r1, [r4, #0]
 80076da:	0608      	lsls	r0, r1, #24
 80076dc:	f57f af70 	bpl.w	80075c0 <_scanf_float+0x70>
 80076e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076e4:	e7f4      	b.n	80076d0 <_scanf_float+0x180>
 80076e6:	2a02      	cmp	r2, #2
 80076e8:	d047      	beq.n	800777a <_scanf_float+0x22a>
 80076ea:	f1bb 0f01 	cmp.w	fp, #1
 80076ee:	d003      	beq.n	80076f8 <_scanf_float+0x1a8>
 80076f0:	f1bb 0f04 	cmp.w	fp, #4
 80076f4:	f47f af64 	bne.w	80075c0 <_scanf_float+0x70>
 80076f8:	f10b 0b01 	add.w	fp, fp, #1
 80076fc:	fa5f fb8b 	uxtb.w	fp, fp
 8007700:	e7e7      	b.n	80076d2 <_scanf_float+0x182>
 8007702:	f1bb 0f03 	cmp.w	fp, #3
 8007706:	d0f7      	beq.n	80076f8 <_scanf_float+0x1a8>
 8007708:	f1bb 0f05 	cmp.w	fp, #5
 800770c:	e7f2      	b.n	80076f4 <_scanf_float+0x1a4>
 800770e:	f1bb 0f02 	cmp.w	fp, #2
 8007712:	f47f af55 	bne.w	80075c0 <_scanf_float+0x70>
 8007716:	f04f 0b03 	mov.w	fp, #3
 800771a:	e7da      	b.n	80076d2 <_scanf_float+0x182>
 800771c:	f1bb 0f06 	cmp.w	fp, #6
 8007720:	f47f af4e 	bne.w	80075c0 <_scanf_float+0x70>
 8007724:	f04f 0b07 	mov.w	fp, #7
 8007728:	e7d3      	b.n	80076d2 <_scanf_float+0x182>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	0588      	lsls	r0, r1, #22
 800772e:	f57f af47 	bpl.w	80075c0 <_scanf_float+0x70>
 8007732:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007736:	6021      	str	r1, [r4, #0]
 8007738:	f8cd 9008 	str.w	r9, [sp, #8]
 800773c:	e7c9      	b.n	80076d2 <_scanf_float+0x182>
 800773e:	6821      	ldr	r1, [r4, #0]
 8007740:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007744:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007748:	d006      	beq.n	8007758 <_scanf_float+0x208>
 800774a:	0548      	lsls	r0, r1, #21
 800774c:	f57f af38 	bpl.w	80075c0 <_scanf_float+0x70>
 8007750:	f1b9 0f00 	cmp.w	r9, #0
 8007754:	f43f af3b 	beq.w	80075ce <_scanf_float+0x7e>
 8007758:	0588      	lsls	r0, r1, #22
 800775a:	bf58      	it	pl
 800775c:	9802      	ldrpl	r0, [sp, #8]
 800775e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007762:	bf58      	it	pl
 8007764:	eba9 0000 	subpl.w	r0, r9, r0
 8007768:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800776c:	bf58      	it	pl
 800776e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007772:	6021      	str	r1, [r4, #0]
 8007774:	f04f 0900 	mov.w	r9, #0
 8007778:	e7ab      	b.n	80076d2 <_scanf_float+0x182>
 800777a:	2203      	movs	r2, #3
 800777c:	e7a9      	b.n	80076d2 <_scanf_float+0x182>
 800777e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007782:	9205      	str	r2, [sp, #20]
 8007784:	4631      	mov	r1, r6
 8007786:	4638      	mov	r0, r7
 8007788:	4798      	blx	r3
 800778a:	9a05      	ldr	r2, [sp, #20]
 800778c:	2800      	cmp	r0, #0
 800778e:	f43f af04 	beq.w	800759a <_scanf_float+0x4a>
 8007792:	e715      	b.n	80075c0 <_scanf_float+0x70>
 8007794:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007798:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800779c:	4632      	mov	r2, r6
 800779e:	4638      	mov	r0, r7
 80077a0:	4798      	blx	r3
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	6123      	str	r3, [r4, #16]
 80077a8:	e715      	b.n	80075d6 <_scanf_float+0x86>
 80077aa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80077ae:	2b06      	cmp	r3, #6
 80077b0:	d80a      	bhi.n	80077c8 <_scanf_float+0x278>
 80077b2:	f1bb 0f02 	cmp.w	fp, #2
 80077b6:	d968      	bls.n	800788a <_scanf_float+0x33a>
 80077b8:	f1ab 0b03 	sub.w	fp, fp, #3
 80077bc:	fa5f fb8b 	uxtb.w	fp, fp
 80077c0:	eba5 0b0b 	sub.w	fp, r5, fp
 80077c4:	455d      	cmp	r5, fp
 80077c6:	d14b      	bne.n	8007860 <_scanf_float+0x310>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	05da      	lsls	r2, r3, #23
 80077cc:	d51f      	bpl.n	800780e <_scanf_float+0x2be>
 80077ce:	055b      	lsls	r3, r3, #21
 80077d0:	d468      	bmi.n	80078a4 <_scanf_float+0x354>
 80077d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	2965      	cmp	r1, #101	; 0x65
 80077da:	f103 33ff 	add.w	r3, r3, #4294967295
 80077de:	f105 3bff 	add.w	fp, r5, #4294967295
 80077e2:	6123      	str	r3, [r4, #16]
 80077e4:	d00d      	beq.n	8007802 <_scanf_float+0x2b2>
 80077e6:	2945      	cmp	r1, #69	; 0x45
 80077e8:	d00b      	beq.n	8007802 <_scanf_float+0x2b2>
 80077ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077ee:	4632      	mov	r2, r6
 80077f0:	4638      	mov	r0, r7
 80077f2:	4798      	blx	r3
 80077f4:	6923      	ldr	r3, [r4, #16]
 80077f6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	f1a5 0b02 	sub.w	fp, r5, #2
 8007800:	6123      	str	r3, [r4, #16]
 8007802:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007806:	4632      	mov	r2, r6
 8007808:	4638      	mov	r0, r7
 800780a:	4798      	blx	r3
 800780c:	465d      	mov	r5, fp
 800780e:	6826      	ldr	r6, [r4, #0]
 8007810:	f016 0610 	ands.w	r6, r6, #16
 8007814:	d17a      	bne.n	800790c <_scanf_float+0x3bc>
 8007816:	702e      	strb	r6, [r5, #0]
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800781e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007822:	d142      	bne.n	80078aa <_scanf_float+0x35a>
 8007824:	9b02      	ldr	r3, [sp, #8]
 8007826:	eba9 0303 	sub.w	r3, r9, r3
 800782a:	425a      	negs	r2, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d149      	bne.n	80078c4 <_scanf_float+0x374>
 8007830:	2200      	movs	r2, #0
 8007832:	4641      	mov	r1, r8
 8007834:	4638      	mov	r0, r7
 8007836:	f000 ff1f 	bl	8008678 <_strtod_r>
 800783a:	6825      	ldr	r5, [r4, #0]
 800783c:	f8da 3000 	ldr.w	r3, [sl]
 8007840:	f015 0f02 	tst.w	r5, #2
 8007844:	f103 0204 	add.w	r2, r3, #4
 8007848:	ec59 8b10 	vmov	r8, r9, d0
 800784c:	f8ca 2000 	str.w	r2, [sl]
 8007850:	d043      	beq.n	80078da <_scanf_float+0x38a>
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	e9c3 8900 	strd	r8, r9, [r3]
 8007858:	68e3      	ldr	r3, [r4, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	60e3      	str	r3, [r4, #12]
 800785e:	e6be      	b.n	80075de <_scanf_float+0x8e>
 8007860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007864:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007868:	4632      	mov	r2, r6
 800786a:	4638      	mov	r0, r7
 800786c:	4798      	blx	r3
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	3b01      	subs	r3, #1
 8007872:	6123      	str	r3, [r4, #16]
 8007874:	e7a6      	b.n	80077c4 <_scanf_float+0x274>
 8007876:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800787a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800787e:	4632      	mov	r2, r6
 8007880:	4638      	mov	r0, r7
 8007882:	4798      	blx	r3
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	3b01      	subs	r3, #1
 8007888:	6123      	str	r3, [r4, #16]
 800788a:	4545      	cmp	r5, r8
 800788c:	d8f3      	bhi.n	8007876 <_scanf_float+0x326>
 800788e:	e6a5      	b.n	80075dc <_scanf_float+0x8c>
 8007890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007894:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007898:	4632      	mov	r2, r6
 800789a:	4638      	mov	r0, r7
 800789c:	4798      	blx	r3
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	6123      	str	r3, [r4, #16]
 80078a4:	4545      	cmp	r5, r8
 80078a6:	d8f3      	bhi.n	8007890 <_scanf_float+0x340>
 80078a8:	e698      	b.n	80075dc <_scanf_float+0x8c>
 80078aa:	9b03      	ldr	r3, [sp, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0bf      	beq.n	8007830 <_scanf_float+0x2e0>
 80078b0:	9904      	ldr	r1, [sp, #16]
 80078b2:	230a      	movs	r3, #10
 80078b4:	4632      	mov	r2, r6
 80078b6:	3101      	adds	r1, #1
 80078b8:	4638      	mov	r0, r7
 80078ba:	f000 ff69 	bl	8008790 <_strtol_r>
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	9d04      	ldr	r5, [sp, #16]
 80078c2:	1ac2      	subs	r2, r0, r3
 80078c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80078c8:	429d      	cmp	r5, r3
 80078ca:	bf28      	it	cs
 80078cc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80078d0:	490f      	ldr	r1, [pc, #60]	; (8007910 <_scanf_float+0x3c0>)
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 f8a0 	bl	8007a18 <siprintf>
 80078d8:	e7aa      	b.n	8007830 <_scanf_float+0x2e0>
 80078da:	f015 0504 	ands.w	r5, r5, #4
 80078de:	d1b8      	bne.n	8007852 <_scanf_float+0x302>
 80078e0:	681f      	ldr	r7, [r3, #0]
 80078e2:	ee10 2a10 	vmov	r2, s0
 80078e6:	464b      	mov	r3, r9
 80078e8:	ee10 0a10 	vmov	r0, s0
 80078ec:	4649      	mov	r1, r9
 80078ee:	f7f9 f91d 	bl	8000b2c <__aeabi_dcmpun>
 80078f2:	b128      	cbz	r0, 8007900 <_scanf_float+0x3b0>
 80078f4:	4628      	mov	r0, r5
 80078f6:	f000 f889 	bl	8007a0c <nanf>
 80078fa:	ed87 0a00 	vstr	s0, [r7]
 80078fe:	e7ab      	b.n	8007858 <_scanf_float+0x308>
 8007900:	4640      	mov	r0, r8
 8007902:	4649      	mov	r1, r9
 8007904:	f7f9 f970 	bl	8000be8 <__aeabi_d2f>
 8007908:	6038      	str	r0, [r7, #0]
 800790a:	e7a5      	b.n	8007858 <_scanf_float+0x308>
 800790c:	2600      	movs	r6, #0
 800790e:	e666      	b.n	80075de <_scanf_float+0x8e>
 8007910:	0800b344 	.word	0x0800b344

08007914 <iprintf>:
 8007914:	b40f      	push	{r0, r1, r2, r3}
 8007916:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <iprintf+0x2c>)
 8007918:	b513      	push	{r0, r1, r4, lr}
 800791a:	681c      	ldr	r4, [r3, #0]
 800791c:	b124      	cbz	r4, 8007928 <iprintf+0x14>
 800791e:	69a3      	ldr	r3, [r4, #24]
 8007920:	b913      	cbnz	r3, 8007928 <iprintf+0x14>
 8007922:	4620      	mov	r0, r4
 8007924:	f001 ff3c 	bl	80097a0 <__sinit>
 8007928:	ab05      	add	r3, sp, #20
 800792a:	9a04      	ldr	r2, [sp, #16]
 800792c:	68a1      	ldr	r1, [r4, #8]
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	4620      	mov	r0, r4
 8007932:	f003 f9b3 	bl	800ac9c <_vfiprintf_r>
 8007936:	b002      	add	sp, #8
 8007938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800793c:	b004      	add	sp, #16
 800793e:	4770      	bx	lr
 8007940:	2000000c 	.word	0x2000000c

08007944 <_puts_r>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	460e      	mov	r6, r1
 8007948:	4605      	mov	r5, r0
 800794a:	b118      	cbz	r0, 8007954 <_puts_r+0x10>
 800794c:	6983      	ldr	r3, [r0, #24]
 800794e:	b90b      	cbnz	r3, 8007954 <_puts_r+0x10>
 8007950:	f001 ff26 	bl	80097a0 <__sinit>
 8007954:	69ab      	ldr	r3, [r5, #24]
 8007956:	68ac      	ldr	r4, [r5, #8]
 8007958:	b913      	cbnz	r3, 8007960 <_puts_r+0x1c>
 800795a:	4628      	mov	r0, r5
 800795c:	f001 ff20 	bl	80097a0 <__sinit>
 8007960:	4b23      	ldr	r3, [pc, #140]	; (80079f0 <_puts_r+0xac>)
 8007962:	429c      	cmp	r4, r3
 8007964:	d117      	bne.n	8007996 <_puts_r+0x52>
 8007966:	686c      	ldr	r4, [r5, #4]
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	071b      	lsls	r3, r3, #28
 800796c:	d51d      	bpl.n	80079aa <_puts_r+0x66>
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	b1db      	cbz	r3, 80079aa <_puts_r+0x66>
 8007972:	3e01      	subs	r6, #1
 8007974:	68a3      	ldr	r3, [r4, #8]
 8007976:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800797a:	3b01      	subs	r3, #1
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	b9e9      	cbnz	r1, 80079bc <_puts_r+0x78>
 8007980:	2b00      	cmp	r3, #0
 8007982:	da2e      	bge.n	80079e2 <_puts_r+0x9e>
 8007984:	4622      	mov	r2, r4
 8007986:	210a      	movs	r1, #10
 8007988:	4628      	mov	r0, r5
 800798a:	f000 ff13 	bl	80087b4 <__swbuf_r>
 800798e:	3001      	adds	r0, #1
 8007990:	d011      	beq.n	80079b6 <_puts_r+0x72>
 8007992:	200a      	movs	r0, #10
 8007994:	e011      	b.n	80079ba <_puts_r+0x76>
 8007996:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <_puts_r+0xb0>)
 8007998:	429c      	cmp	r4, r3
 800799a:	d101      	bne.n	80079a0 <_puts_r+0x5c>
 800799c:	68ac      	ldr	r4, [r5, #8]
 800799e:	e7e3      	b.n	8007968 <_puts_r+0x24>
 80079a0:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <_puts_r+0xb4>)
 80079a2:	429c      	cmp	r4, r3
 80079a4:	bf08      	it	eq
 80079a6:	68ec      	ldreq	r4, [r5, #12]
 80079a8:	e7de      	b.n	8007968 <_puts_r+0x24>
 80079aa:	4621      	mov	r1, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 ff53 	bl	8008858 <__swsetup_r>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d0dd      	beq.n	8007972 <_puts_r+0x2e>
 80079b6:	f04f 30ff 	mov.w	r0, #4294967295
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da04      	bge.n	80079ca <_puts_r+0x86>
 80079c0:	69a2      	ldr	r2, [r4, #24]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	dc06      	bgt.n	80079d4 <_puts_r+0x90>
 80079c6:	290a      	cmp	r1, #10
 80079c8:	d004      	beq.n	80079d4 <_puts_r+0x90>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	6022      	str	r2, [r4, #0]
 80079d0:	7019      	strb	r1, [r3, #0]
 80079d2:	e7cf      	b.n	8007974 <_puts_r+0x30>
 80079d4:	4622      	mov	r2, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 feec 	bl	80087b4 <__swbuf_r>
 80079dc:	3001      	adds	r0, #1
 80079de:	d1c9      	bne.n	8007974 <_puts_r+0x30>
 80079e0:	e7e9      	b.n	80079b6 <_puts_r+0x72>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	200a      	movs	r0, #10
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	6022      	str	r2, [r4, #0]
 80079ea:	7018      	strb	r0, [r3, #0]
 80079ec:	e7e5      	b.n	80079ba <_puts_r+0x76>
 80079ee:	bf00      	nop
 80079f0:	0800b3d0 	.word	0x0800b3d0
 80079f4:	0800b3f0 	.word	0x0800b3f0
 80079f8:	0800b3b0 	.word	0x0800b3b0

080079fc <puts>:
 80079fc:	4b02      	ldr	r3, [pc, #8]	; (8007a08 <puts+0xc>)
 80079fe:	4601      	mov	r1, r0
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	f7ff bf9f 	b.w	8007944 <_puts_r>
 8007a06:	bf00      	nop
 8007a08:	2000000c 	.word	0x2000000c

08007a0c <nanf>:
 8007a0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007a14 <nanf+0x8>
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	7fc00000 	.word	0x7fc00000

08007a18 <siprintf>:
 8007a18:	b40e      	push	{r1, r2, r3}
 8007a1a:	b500      	push	{lr}
 8007a1c:	b09c      	sub	sp, #112	; 0x70
 8007a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8007a20:	9002      	str	r0, [sp, #8]
 8007a22:	9006      	str	r0, [sp, #24]
 8007a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a28:	4809      	ldr	r0, [pc, #36]	; (8007a50 <siprintf+0x38>)
 8007a2a:	9107      	str	r1, [sp, #28]
 8007a2c:	9104      	str	r1, [sp, #16]
 8007a2e:	4909      	ldr	r1, [pc, #36]	; (8007a54 <siprintf+0x3c>)
 8007a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a34:	9105      	str	r1, [sp, #20]
 8007a36:	6800      	ldr	r0, [r0, #0]
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	a902      	add	r1, sp, #8
 8007a3c:	f003 f80c 	bl	800aa58 <_svfiprintf_r>
 8007a40:	9b02      	ldr	r3, [sp, #8]
 8007a42:	2200      	movs	r2, #0
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	b01c      	add	sp, #112	; 0x70
 8007a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a4c:	b003      	add	sp, #12
 8007a4e:	4770      	bx	lr
 8007a50:	2000000c 	.word	0x2000000c
 8007a54:	ffff0208 	.word	0xffff0208

08007a58 <sulp>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	460d      	mov	r5, r1
 8007a5e:	ec45 4b10 	vmov	d0, r4, r5
 8007a62:	4616      	mov	r6, r2
 8007a64:	f002 fdb4 	bl	800a5d0 <__ulp>
 8007a68:	ec51 0b10 	vmov	r0, r1, d0
 8007a6c:	b17e      	cbz	r6, 8007a8e <sulp+0x36>
 8007a6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd09      	ble.n	8007a8e <sulp+0x36>
 8007a7a:	051b      	lsls	r3, r3, #20
 8007a7c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a80:	2400      	movs	r4, #0
 8007a82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a86:	4622      	mov	r2, r4
 8007a88:	462b      	mov	r3, r5
 8007a8a:	f7f8 fdb5 	bl	80005f8 <__aeabi_dmul>
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}

08007a90 <_strtod_l>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	461f      	mov	r7, r3
 8007a96:	b0a1      	sub	sp, #132	; 0x84
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4681      	mov	r9, r0
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	460e      	mov	r6, r1
 8007aa0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007aa2:	931c      	str	r3, [sp, #112]	; 0x70
 8007aa4:	f002 fa2f 	bl	8009f06 <__localeconv_l>
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	6800      	ldr	r0, [r0, #0]
 8007aac:	f7f8 fb90 	bl	80001d0 <strlen>
 8007ab0:	f04f 0a00 	mov.w	sl, #0
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	f04f 0b00 	mov.w	fp, #0
 8007aba:	961b      	str	r6, [sp, #108]	; 0x6c
 8007abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007abe:	781a      	ldrb	r2, [r3, #0]
 8007ac0:	2a0d      	cmp	r2, #13
 8007ac2:	d832      	bhi.n	8007b2a <_strtod_l+0x9a>
 8007ac4:	2a09      	cmp	r2, #9
 8007ac6:	d236      	bcs.n	8007b36 <_strtod_l+0xa6>
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	d03e      	beq.n	8007b4a <_strtod_l+0xba>
 8007acc:	2300      	movs	r3, #0
 8007ace:	930d      	str	r3, [sp, #52]	; 0x34
 8007ad0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007ad2:	782b      	ldrb	r3, [r5, #0]
 8007ad4:	2b30      	cmp	r3, #48	; 0x30
 8007ad6:	f040 80ac 	bne.w	8007c32 <_strtod_l+0x1a2>
 8007ada:	786b      	ldrb	r3, [r5, #1]
 8007adc:	2b58      	cmp	r3, #88	; 0x58
 8007ade:	d001      	beq.n	8007ae4 <_strtod_l+0x54>
 8007ae0:	2b78      	cmp	r3, #120	; 0x78
 8007ae2:	d167      	bne.n	8007bb4 <_strtod_l+0x124>
 8007ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	ab1c      	add	r3, sp, #112	; 0x70
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	9702      	str	r7, [sp, #8]
 8007aee:	ab1d      	add	r3, sp, #116	; 0x74
 8007af0:	4a88      	ldr	r2, [pc, #544]	; (8007d14 <_strtod_l+0x284>)
 8007af2:	a91b      	add	r1, sp, #108	; 0x6c
 8007af4:	4648      	mov	r0, r9
 8007af6:	f001 ff2c 	bl	8009952 <__gethex>
 8007afa:	f010 0407 	ands.w	r4, r0, #7
 8007afe:	4606      	mov	r6, r0
 8007b00:	d005      	beq.n	8007b0e <_strtod_l+0x7e>
 8007b02:	2c06      	cmp	r4, #6
 8007b04:	d12b      	bne.n	8007b5e <_strtod_l+0xce>
 8007b06:	3501      	adds	r5, #1
 8007b08:	2300      	movs	r3, #0
 8007b0a:	951b      	str	r5, [sp, #108]	; 0x6c
 8007b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f040 859a 	bne.w	800864a <_strtod_l+0xbba>
 8007b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b18:	b1e3      	cbz	r3, 8007b54 <_strtod_l+0xc4>
 8007b1a:	4652      	mov	r2, sl
 8007b1c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b20:	ec43 2b10 	vmov	d0, r2, r3
 8007b24:	b021      	add	sp, #132	; 0x84
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2a:	2a2b      	cmp	r2, #43	; 0x2b
 8007b2c:	d015      	beq.n	8007b5a <_strtod_l+0xca>
 8007b2e:	2a2d      	cmp	r2, #45	; 0x2d
 8007b30:	d004      	beq.n	8007b3c <_strtod_l+0xac>
 8007b32:	2a20      	cmp	r2, #32
 8007b34:	d1ca      	bne.n	8007acc <_strtod_l+0x3c>
 8007b36:	3301      	adds	r3, #1
 8007b38:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b3a:	e7bf      	b.n	8007abc <_strtod_l+0x2c>
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	920d      	str	r2, [sp, #52]	; 0x34
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b44:	785b      	ldrb	r3, [r3, #1]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1c2      	bne.n	8007ad0 <_strtod_l+0x40>
 8007b4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f040 8579 	bne.w	8008646 <_strtod_l+0xbb6>
 8007b54:	4652      	mov	r2, sl
 8007b56:	465b      	mov	r3, fp
 8007b58:	e7e2      	b.n	8007b20 <_strtod_l+0x90>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	e7ef      	b.n	8007b3e <_strtod_l+0xae>
 8007b5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007b60:	b13a      	cbz	r2, 8007b72 <_strtod_l+0xe2>
 8007b62:	2135      	movs	r1, #53	; 0x35
 8007b64:	a81e      	add	r0, sp, #120	; 0x78
 8007b66:	f002 fe2b 	bl	800a7c0 <__copybits>
 8007b6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b6c:	4648      	mov	r0, r9
 8007b6e:	f002 fa98 	bl	800a0a2 <_Bfree>
 8007b72:	3c01      	subs	r4, #1
 8007b74:	2c04      	cmp	r4, #4
 8007b76:	d806      	bhi.n	8007b86 <_strtod_l+0xf6>
 8007b78:	e8df f004 	tbb	[pc, r4]
 8007b7c:	1714030a 	.word	0x1714030a
 8007b80:	0a          	.byte	0x0a
 8007b81:	00          	.byte	0x00
 8007b82:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007b86:	0730      	lsls	r0, r6, #28
 8007b88:	d5c1      	bpl.n	8007b0e <_strtod_l+0x7e>
 8007b8a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b8e:	e7be      	b.n	8007b0e <_strtod_l+0x7e>
 8007b90:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007b94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007b96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b9a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b9e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ba2:	e7f0      	b.n	8007b86 <_strtod_l+0xf6>
 8007ba4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007d18 <_strtod_l+0x288>
 8007ba8:	e7ed      	b.n	8007b86 <_strtod_l+0xf6>
 8007baa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007bae:	f04f 3aff 	mov.w	sl, #4294967295
 8007bb2:	e7e8      	b.n	8007b86 <_strtod_l+0xf6>
 8007bb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	921b      	str	r2, [sp, #108]	; 0x6c
 8007bba:	785b      	ldrb	r3, [r3, #1]
 8007bbc:	2b30      	cmp	r3, #48	; 0x30
 8007bbe:	d0f9      	beq.n	8007bb4 <_strtod_l+0x124>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0a4      	beq.n	8007b0e <_strtod_l+0x7e>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	9306      	str	r3, [sp, #24]
 8007bca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bcc:	9308      	str	r3, [sp, #32]
 8007bce:	9507      	str	r5, [sp, #28]
 8007bd0:	9505      	str	r5, [sp, #20]
 8007bd2:	220a      	movs	r2, #10
 8007bd4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007bd6:	7807      	ldrb	r7, [r0, #0]
 8007bd8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007bdc:	b2d9      	uxtb	r1, r3
 8007bde:	2909      	cmp	r1, #9
 8007be0:	d929      	bls.n	8007c36 <_strtod_l+0x1a6>
 8007be2:	4622      	mov	r2, r4
 8007be4:	f8d8 1000 	ldr.w	r1, [r8]
 8007be8:	f003 f9c1 	bl	800af6e <strncmp>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d031      	beq.n	8007c54 <_strtod_l+0x1c4>
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	9c05      	ldr	r4, [sp, #20]
 8007bf4:	9004      	str	r0, [sp, #16]
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	2b65      	cmp	r3, #101	; 0x65
 8007bfc:	d001      	beq.n	8007c02 <_strtod_l+0x172>
 8007bfe:	2b45      	cmp	r3, #69	; 0x45
 8007c00:	d114      	bne.n	8007c2c <_strtod_l+0x19c>
 8007c02:	b924      	cbnz	r4, 8007c0e <_strtod_l+0x17e>
 8007c04:	b910      	cbnz	r0, 8007c0c <_strtod_l+0x17c>
 8007c06:	9b06      	ldr	r3, [sp, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d09e      	beq.n	8007b4a <_strtod_l+0xba>
 8007c0c:	2400      	movs	r4, #0
 8007c0e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007c10:	1c73      	adds	r3, r6, #1
 8007c12:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c14:	7873      	ldrb	r3, [r6, #1]
 8007c16:	2b2b      	cmp	r3, #43	; 0x2b
 8007c18:	d078      	beq.n	8007d0c <_strtod_l+0x27c>
 8007c1a:	2b2d      	cmp	r3, #45	; 0x2d
 8007c1c:	d070      	beq.n	8007d00 <_strtod_l+0x270>
 8007c1e:	f04f 0c00 	mov.w	ip, #0
 8007c22:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007c26:	2f09      	cmp	r7, #9
 8007c28:	d97c      	bls.n	8007d24 <_strtod_l+0x294>
 8007c2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8007c2c:	f04f 0e00 	mov.w	lr, #0
 8007c30:	e09a      	b.n	8007d68 <_strtod_l+0x2d8>
 8007c32:	2300      	movs	r3, #0
 8007c34:	e7c7      	b.n	8007bc6 <_strtod_l+0x136>
 8007c36:	9905      	ldr	r1, [sp, #20]
 8007c38:	2908      	cmp	r1, #8
 8007c3a:	bfdd      	ittte	le
 8007c3c:	9907      	ldrle	r1, [sp, #28]
 8007c3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c42:	9307      	strle	r3, [sp, #28]
 8007c44:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007c48:	9b05      	ldr	r3, [sp, #20]
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	901b      	str	r0, [sp, #108]	; 0x6c
 8007c52:	e7bf      	b.n	8007bd4 <_strtod_l+0x144>
 8007c54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c56:	191a      	adds	r2, r3, r4
 8007c58:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c5a:	9a05      	ldr	r2, [sp, #20]
 8007c5c:	5d1b      	ldrb	r3, [r3, r4]
 8007c5e:	2a00      	cmp	r2, #0
 8007c60:	d037      	beq.n	8007cd2 <_strtod_l+0x242>
 8007c62:	9c05      	ldr	r4, [sp, #20]
 8007c64:	4602      	mov	r2, r0
 8007c66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007c6a:	2909      	cmp	r1, #9
 8007c6c:	d913      	bls.n	8007c96 <_strtod_l+0x206>
 8007c6e:	2101      	movs	r1, #1
 8007c70:	9104      	str	r1, [sp, #16]
 8007c72:	e7c2      	b.n	8007bfa <_strtod_l+0x16a>
 8007c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	2b30      	cmp	r3, #48	; 0x30
 8007c80:	d0f8      	beq.n	8007c74 <_strtod_l+0x1e4>
 8007c82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007c86:	2a08      	cmp	r2, #8
 8007c88:	f200 84e4 	bhi.w	8008654 <_strtod_l+0xbc4>
 8007c8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007c8e:	9208      	str	r2, [sp, #32]
 8007c90:	4602      	mov	r2, r0
 8007c92:	2000      	movs	r0, #0
 8007c94:	4604      	mov	r4, r0
 8007c96:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007c9a:	f100 0101 	add.w	r1, r0, #1
 8007c9e:	d012      	beq.n	8007cc6 <_strtod_l+0x236>
 8007ca0:	440a      	add	r2, r1
 8007ca2:	eb00 0c04 	add.w	ip, r0, r4
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	270a      	movs	r7, #10
 8007caa:	458c      	cmp	ip, r1
 8007cac:	d113      	bne.n	8007cd6 <_strtod_l+0x246>
 8007cae:	1821      	adds	r1, r4, r0
 8007cb0:	2908      	cmp	r1, #8
 8007cb2:	f104 0401 	add.w	r4, r4, #1
 8007cb6:	4404      	add	r4, r0
 8007cb8:	dc19      	bgt.n	8007cee <_strtod_l+0x25e>
 8007cba:	9b07      	ldr	r3, [sp, #28]
 8007cbc:	210a      	movs	r1, #10
 8007cbe:	fb01 e303 	mla	r3, r1, r3, lr
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cc8:	1c58      	adds	r0, r3, #1
 8007cca:	901b      	str	r0, [sp, #108]	; 0x6c
 8007ccc:	785b      	ldrb	r3, [r3, #1]
 8007cce:	4608      	mov	r0, r1
 8007cd0:	e7c9      	b.n	8007c66 <_strtod_l+0x1d6>
 8007cd2:	9805      	ldr	r0, [sp, #20]
 8007cd4:	e7d3      	b.n	8007c7e <_strtod_l+0x1ee>
 8007cd6:	2908      	cmp	r1, #8
 8007cd8:	f101 0101 	add.w	r1, r1, #1
 8007cdc:	dc03      	bgt.n	8007ce6 <_strtod_l+0x256>
 8007cde:	9b07      	ldr	r3, [sp, #28]
 8007ce0:	437b      	muls	r3, r7
 8007ce2:	9307      	str	r3, [sp, #28]
 8007ce4:	e7e1      	b.n	8007caa <_strtod_l+0x21a>
 8007ce6:	2910      	cmp	r1, #16
 8007ce8:	bfd8      	it	le
 8007cea:	437d      	mulle	r5, r7
 8007cec:	e7dd      	b.n	8007caa <_strtod_l+0x21a>
 8007cee:	2c10      	cmp	r4, #16
 8007cf0:	bfdc      	itt	le
 8007cf2:	210a      	movle	r1, #10
 8007cf4:	fb01 e505 	mlale	r5, r1, r5, lr
 8007cf8:	e7e4      	b.n	8007cc4 <_strtod_l+0x234>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	e781      	b.n	8007c04 <_strtod_l+0x174>
 8007d00:	f04f 0c01 	mov.w	ip, #1
 8007d04:	1cb3      	adds	r3, r6, #2
 8007d06:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d08:	78b3      	ldrb	r3, [r6, #2]
 8007d0a:	e78a      	b.n	8007c22 <_strtod_l+0x192>
 8007d0c:	f04f 0c00 	mov.w	ip, #0
 8007d10:	e7f8      	b.n	8007d04 <_strtod_l+0x274>
 8007d12:	bf00      	nop
 8007d14:	0800b34c 	.word	0x0800b34c
 8007d18:	7ff00000 	.word	0x7ff00000
 8007d1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d1e:	1c5f      	adds	r7, r3, #1
 8007d20:	971b      	str	r7, [sp, #108]	; 0x6c
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b30      	cmp	r3, #48	; 0x30
 8007d26:	d0f9      	beq.n	8007d1c <_strtod_l+0x28c>
 8007d28:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007d2c:	2f08      	cmp	r7, #8
 8007d2e:	f63f af7d 	bhi.w	8007c2c <_strtod_l+0x19c>
 8007d32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007d36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d38:	930a      	str	r3, [sp, #40]	; 0x28
 8007d3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d3c:	1c5f      	adds	r7, r3, #1
 8007d3e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007d40:	785b      	ldrb	r3, [r3, #1]
 8007d42:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007d46:	f1b8 0f09 	cmp.w	r8, #9
 8007d4a:	d937      	bls.n	8007dbc <_strtod_l+0x32c>
 8007d4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d4e:	1a7f      	subs	r7, r7, r1
 8007d50:	2f08      	cmp	r7, #8
 8007d52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007d56:	dc37      	bgt.n	8007dc8 <_strtod_l+0x338>
 8007d58:	45be      	cmp	lr, r7
 8007d5a:	bfa8      	it	ge
 8007d5c:	46be      	movge	lr, r7
 8007d5e:	f1bc 0f00 	cmp.w	ip, #0
 8007d62:	d001      	beq.n	8007d68 <_strtod_l+0x2d8>
 8007d64:	f1ce 0e00 	rsb	lr, lr, #0
 8007d68:	2c00      	cmp	r4, #0
 8007d6a:	d151      	bne.n	8007e10 <_strtod_l+0x380>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f47f aece 	bne.w	8007b0e <_strtod_l+0x7e>
 8007d72:	9a06      	ldr	r2, [sp, #24]
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	f47f aeca 	bne.w	8007b0e <_strtod_l+0x7e>
 8007d7a:	9a04      	ldr	r2, [sp, #16]
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	f47f aee4 	bne.w	8007b4a <_strtod_l+0xba>
 8007d82:	2b4e      	cmp	r3, #78	; 0x4e
 8007d84:	d027      	beq.n	8007dd6 <_strtod_l+0x346>
 8007d86:	dc21      	bgt.n	8007dcc <_strtod_l+0x33c>
 8007d88:	2b49      	cmp	r3, #73	; 0x49
 8007d8a:	f47f aede 	bne.w	8007b4a <_strtod_l+0xba>
 8007d8e:	49a0      	ldr	r1, [pc, #640]	; (8008010 <_strtod_l+0x580>)
 8007d90:	a81b      	add	r0, sp, #108	; 0x6c
 8007d92:	f002 f811 	bl	8009db8 <__match>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	f43f aed7 	beq.w	8007b4a <_strtod_l+0xba>
 8007d9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d9e:	499d      	ldr	r1, [pc, #628]	; (8008014 <_strtod_l+0x584>)
 8007da0:	3b01      	subs	r3, #1
 8007da2:	a81b      	add	r0, sp, #108	; 0x6c
 8007da4:	931b      	str	r3, [sp, #108]	; 0x6c
 8007da6:	f002 f807 	bl	8009db8 <__match>
 8007daa:	b910      	cbnz	r0, 8007db2 <_strtod_l+0x322>
 8007dac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dae:	3301      	adds	r3, #1
 8007db0:	931b      	str	r3, [sp, #108]	; 0x6c
 8007db2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008028 <_strtod_l+0x598>
 8007db6:	f04f 0a00 	mov.w	sl, #0
 8007dba:	e6a8      	b.n	8007b0e <_strtod_l+0x7e>
 8007dbc:	210a      	movs	r1, #10
 8007dbe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007dc2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007dc6:	e7b8      	b.n	8007d3a <_strtod_l+0x2aa>
 8007dc8:	46be      	mov	lr, r7
 8007dca:	e7c8      	b.n	8007d5e <_strtod_l+0x2ce>
 8007dcc:	2b69      	cmp	r3, #105	; 0x69
 8007dce:	d0de      	beq.n	8007d8e <_strtod_l+0x2fe>
 8007dd0:	2b6e      	cmp	r3, #110	; 0x6e
 8007dd2:	f47f aeba 	bne.w	8007b4a <_strtod_l+0xba>
 8007dd6:	4990      	ldr	r1, [pc, #576]	; (8008018 <_strtod_l+0x588>)
 8007dd8:	a81b      	add	r0, sp, #108	; 0x6c
 8007dda:	f001 ffed 	bl	8009db8 <__match>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	f43f aeb3 	beq.w	8007b4a <_strtod_l+0xba>
 8007de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b28      	cmp	r3, #40	; 0x28
 8007dea:	d10e      	bne.n	8007e0a <_strtod_l+0x37a>
 8007dec:	aa1e      	add	r2, sp, #120	; 0x78
 8007dee:	498b      	ldr	r1, [pc, #556]	; (800801c <_strtod_l+0x58c>)
 8007df0:	a81b      	add	r0, sp, #108	; 0x6c
 8007df2:	f001 fff5 	bl	8009de0 <__hexnan>
 8007df6:	2805      	cmp	r0, #5
 8007df8:	d107      	bne.n	8007e0a <_strtod_l+0x37a>
 8007dfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007dfc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007e00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007e04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007e08:	e681      	b.n	8007b0e <_strtod_l+0x7e>
 8007e0a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008030 <_strtod_l+0x5a0>
 8007e0e:	e7d2      	b.n	8007db6 <_strtod_l+0x326>
 8007e10:	ebae 0302 	sub.w	r3, lr, r2
 8007e14:	9306      	str	r3, [sp, #24]
 8007e16:	9b05      	ldr	r3, [sp, #20]
 8007e18:	9807      	ldr	r0, [sp, #28]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	bf08      	it	eq
 8007e1e:	4623      	moveq	r3, r4
 8007e20:	2c10      	cmp	r4, #16
 8007e22:	9305      	str	r3, [sp, #20]
 8007e24:	46a0      	mov	r8, r4
 8007e26:	bfa8      	it	ge
 8007e28:	f04f 0810 	movge.w	r8, #16
 8007e2c:	f7f8 fb6a 	bl	8000504 <__aeabi_ui2d>
 8007e30:	2c09      	cmp	r4, #9
 8007e32:	4682      	mov	sl, r0
 8007e34:	468b      	mov	fp, r1
 8007e36:	dc13      	bgt.n	8007e60 <_strtod_l+0x3d0>
 8007e38:	9b06      	ldr	r3, [sp, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f43f ae67 	beq.w	8007b0e <_strtod_l+0x7e>
 8007e40:	9b06      	ldr	r3, [sp, #24]
 8007e42:	dd7a      	ble.n	8007f3a <_strtod_l+0x4aa>
 8007e44:	2b16      	cmp	r3, #22
 8007e46:	dc61      	bgt.n	8007f0c <_strtod_l+0x47c>
 8007e48:	4a75      	ldr	r2, [pc, #468]	; (8008020 <_strtod_l+0x590>)
 8007e4a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007e4e:	e9de 0100 	ldrd	r0, r1, [lr]
 8007e52:	4652      	mov	r2, sl
 8007e54:	465b      	mov	r3, fp
 8007e56:	f7f8 fbcf 	bl	80005f8 <__aeabi_dmul>
 8007e5a:	4682      	mov	sl, r0
 8007e5c:	468b      	mov	fp, r1
 8007e5e:	e656      	b.n	8007b0e <_strtod_l+0x7e>
 8007e60:	4b6f      	ldr	r3, [pc, #444]	; (8008020 <_strtod_l+0x590>)
 8007e62:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007e66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e6a:	f7f8 fbc5 	bl	80005f8 <__aeabi_dmul>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	4628      	mov	r0, r5
 8007e72:	460f      	mov	r7, r1
 8007e74:	f7f8 fb46 	bl	8000504 <__aeabi_ui2d>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 fa04 	bl	800028c <__adddf3>
 8007e84:	2c0f      	cmp	r4, #15
 8007e86:	4682      	mov	sl, r0
 8007e88:	468b      	mov	fp, r1
 8007e8a:	ddd5      	ble.n	8007e38 <_strtod_l+0x3a8>
 8007e8c:	9b06      	ldr	r3, [sp, #24]
 8007e8e:	eba4 0808 	sub.w	r8, r4, r8
 8007e92:	4498      	add	r8, r3
 8007e94:	f1b8 0f00 	cmp.w	r8, #0
 8007e98:	f340 8096 	ble.w	8007fc8 <_strtod_l+0x538>
 8007e9c:	f018 030f 	ands.w	r3, r8, #15
 8007ea0:	d00a      	beq.n	8007eb8 <_strtod_l+0x428>
 8007ea2:	495f      	ldr	r1, [pc, #380]	; (8008020 <_strtod_l+0x590>)
 8007ea4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ea8:	4652      	mov	r2, sl
 8007eaa:	465b      	mov	r3, fp
 8007eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eb0:	f7f8 fba2 	bl	80005f8 <__aeabi_dmul>
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	468b      	mov	fp, r1
 8007eb8:	f038 080f 	bics.w	r8, r8, #15
 8007ebc:	d073      	beq.n	8007fa6 <_strtod_l+0x516>
 8007ebe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007ec2:	dd47      	ble.n	8007f54 <_strtod_l+0x4c4>
 8007ec4:	2400      	movs	r4, #0
 8007ec6:	46a0      	mov	r8, r4
 8007ec8:	9407      	str	r4, [sp, #28]
 8007eca:	9405      	str	r4, [sp, #20]
 8007ecc:	2322      	movs	r3, #34	; 0x22
 8007ece:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008028 <_strtod_l+0x598>
 8007ed2:	f8c9 3000 	str.w	r3, [r9]
 8007ed6:	f04f 0a00 	mov.w	sl, #0
 8007eda:	9b07      	ldr	r3, [sp, #28]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f43f ae16 	beq.w	8007b0e <_strtod_l+0x7e>
 8007ee2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ee4:	4648      	mov	r0, r9
 8007ee6:	f002 f8dc 	bl	800a0a2 <_Bfree>
 8007eea:	9905      	ldr	r1, [sp, #20]
 8007eec:	4648      	mov	r0, r9
 8007eee:	f002 f8d8 	bl	800a0a2 <_Bfree>
 8007ef2:	4641      	mov	r1, r8
 8007ef4:	4648      	mov	r0, r9
 8007ef6:	f002 f8d4 	bl	800a0a2 <_Bfree>
 8007efa:	9907      	ldr	r1, [sp, #28]
 8007efc:	4648      	mov	r0, r9
 8007efe:	f002 f8d0 	bl	800a0a2 <_Bfree>
 8007f02:	4621      	mov	r1, r4
 8007f04:	4648      	mov	r0, r9
 8007f06:	f002 f8cc 	bl	800a0a2 <_Bfree>
 8007f0a:	e600      	b.n	8007b0e <_strtod_l+0x7e>
 8007f0c:	9a06      	ldr	r2, [sp, #24]
 8007f0e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007f12:	4293      	cmp	r3, r2
 8007f14:	dbba      	blt.n	8007e8c <_strtod_l+0x3fc>
 8007f16:	4d42      	ldr	r5, [pc, #264]	; (8008020 <_strtod_l+0x590>)
 8007f18:	f1c4 040f 	rsb	r4, r4, #15
 8007f1c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007f20:	4652      	mov	r2, sl
 8007f22:	465b      	mov	r3, fp
 8007f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f28:	f7f8 fb66 	bl	80005f8 <__aeabi_dmul>
 8007f2c:	9b06      	ldr	r3, [sp, #24]
 8007f2e:	1b1c      	subs	r4, r3, r4
 8007f30:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007f34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f38:	e78d      	b.n	8007e56 <_strtod_l+0x3c6>
 8007f3a:	f113 0f16 	cmn.w	r3, #22
 8007f3e:	dba5      	blt.n	8007e8c <_strtod_l+0x3fc>
 8007f40:	4a37      	ldr	r2, [pc, #220]	; (8008020 <_strtod_l+0x590>)
 8007f42:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007f46:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	4659      	mov	r1, fp
 8007f4e:	f7f8 fc7d 	bl	800084c <__aeabi_ddiv>
 8007f52:	e782      	b.n	8007e5a <_strtod_l+0x3ca>
 8007f54:	2300      	movs	r3, #0
 8007f56:	4e33      	ldr	r6, [pc, #204]	; (8008024 <_strtod_l+0x594>)
 8007f58:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	4659      	mov	r1, fp
 8007f60:	461d      	mov	r5, r3
 8007f62:	f1b8 0f01 	cmp.w	r8, #1
 8007f66:	dc21      	bgt.n	8007fac <_strtod_l+0x51c>
 8007f68:	b10b      	cbz	r3, 8007f6e <_strtod_l+0x4de>
 8007f6a:	4682      	mov	sl, r0
 8007f6c:	468b      	mov	fp, r1
 8007f6e:	4b2d      	ldr	r3, [pc, #180]	; (8008024 <_strtod_l+0x594>)
 8007f70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007f74:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007f78:	4652      	mov	r2, sl
 8007f7a:	465b      	mov	r3, fp
 8007f7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007f80:	f7f8 fb3a 	bl	80005f8 <__aeabi_dmul>
 8007f84:	4b28      	ldr	r3, [pc, #160]	; (8008028 <_strtod_l+0x598>)
 8007f86:	460a      	mov	r2, r1
 8007f88:	400b      	ands	r3, r1
 8007f8a:	4928      	ldr	r1, [pc, #160]	; (800802c <_strtod_l+0x59c>)
 8007f8c:	428b      	cmp	r3, r1
 8007f8e:	4682      	mov	sl, r0
 8007f90:	d898      	bhi.n	8007ec4 <_strtod_l+0x434>
 8007f92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f96:	428b      	cmp	r3, r1
 8007f98:	bf86      	itte	hi
 8007f9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008034 <_strtod_l+0x5a4>
 8007f9e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007fa2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9304      	str	r3, [sp, #16]
 8007faa:	e077      	b.n	800809c <_strtod_l+0x60c>
 8007fac:	f018 0f01 	tst.w	r8, #1
 8007fb0:	d006      	beq.n	8007fc0 <_strtod_l+0x530>
 8007fb2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 fb1d 	bl	80005f8 <__aeabi_dmul>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	3501      	adds	r5, #1
 8007fc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007fc6:	e7cc      	b.n	8007f62 <_strtod_l+0x4d2>
 8007fc8:	d0ed      	beq.n	8007fa6 <_strtod_l+0x516>
 8007fca:	f1c8 0800 	rsb	r8, r8, #0
 8007fce:	f018 020f 	ands.w	r2, r8, #15
 8007fd2:	d00a      	beq.n	8007fea <_strtod_l+0x55a>
 8007fd4:	4b12      	ldr	r3, [pc, #72]	; (8008020 <_strtod_l+0x590>)
 8007fd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fda:	4650      	mov	r0, sl
 8007fdc:	4659      	mov	r1, fp
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f7f8 fc33 	bl	800084c <__aeabi_ddiv>
 8007fe6:	4682      	mov	sl, r0
 8007fe8:	468b      	mov	fp, r1
 8007fea:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007fee:	d0da      	beq.n	8007fa6 <_strtod_l+0x516>
 8007ff0:	f1b8 0f1f 	cmp.w	r8, #31
 8007ff4:	dd20      	ble.n	8008038 <_strtod_l+0x5a8>
 8007ff6:	2400      	movs	r4, #0
 8007ff8:	46a0      	mov	r8, r4
 8007ffa:	9407      	str	r4, [sp, #28]
 8007ffc:	9405      	str	r4, [sp, #20]
 8007ffe:	2322      	movs	r3, #34	; 0x22
 8008000:	f04f 0a00 	mov.w	sl, #0
 8008004:	f04f 0b00 	mov.w	fp, #0
 8008008:	f8c9 3000 	str.w	r3, [r9]
 800800c:	e765      	b.n	8007eda <_strtod_l+0x44a>
 800800e:	bf00      	nop
 8008010:	0800b315 	.word	0x0800b315
 8008014:	0800b3a3 	.word	0x0800b3a3
 8008018:	0800b31d 	.word	0x0800b31d
 800801c:	0800b360 	.word	0x0800b360
 8008020:	0800b448 	.word	0x0800b448
 8008024:	0800b420 	.word	0x0800b420
 8008028:	7ff00000 	.word	0x7ff00000
 800802c:	7ca00000 	.word	0x7ca00000
 8008030:	fff80000 	.word	0xfff80000
 8008034:	7fefffff 	.word	0x7fefffff
 8008038:	f018 0310 	ands.w	r3, r8, #16
 800803c:	bf18      	it	ne
 800803e:	236a      	movne	r3, #106	; 0x6a
 8008040:	4da0      	ldr	r5, [pc, #640]	; (80082c4 <_strtod_l+0x834>)
 8008042:	9304      	str	r3, [sp, #16]
 8008044:	4650      	mov	r0, sl
 8008046:	4659      	mov	r1, fp
 8008048:	2300      	movs	r3, #0
 800804a:	f1b8 0f00 	cmp.w	r8, #0
 800804e:	f300 810a 	bgt.w	8008266 <_strtod_l+0x7d6>
 8008052:	b10b      	cbz	r3, 8008058 <_strtod_l+0x5c8>
 8008054:	4682      	mov	sl, r0
 8008056:	468b      	mov	fp, r1
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	b1bb      	cbz	r3, 800808c <_strtod_l+0x5fc>
 800805c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008060:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008064:	2b00      	cmp	r3, #0
 8008066:	4659      	mov	r1, fp
 8008068:	dd10      	ble.n	800808c <_strtod_l+0x5fc>
 800806a:	2b1f      	cmp	r3, #31
 800806c:	f340 8107 	ble.w	800827e <_strtod_l+0x7ee>
 8008070:	2b34      	cmp	r3, #52	; 0x34
 8008072:	bfde      	ittt	le
 8008074:	3b20      	suble	r3, #32
 8008076:	f04f 32ff 	movle.w	r2, #4294967295
 800807a:	fa02 f303 	lslle.w	r3, r2, r3
 800807e:	f04f 0a00 	mov.w	sl, #0
 8008082:	bfcc      	ite	gt
 8008084:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008088:	ea03 0b01 	andle.w	fp, r3, r1
 800808c:	2200      	movs	r2, #0
 800808e:	2300      	movs	r3, #0
 8008090:	4650      	mov	r0, sl
 8008092:	4659      	mov	r1, fp
 8008094:	f7f8 fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 8008098:	2800      	cmp	r0, #0
 800809a:	d1ac      	bne.n	8007ff6 <_strtod_l+0x566>
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	9a05      	ldr	r2, [sp, #20]
 80080a2:	9908      	ldr	r1, [sp, #32]
 80080a4:	4623      	mov	r3, r4
 80080a6:	4648      	mov	r0, r9
 80080a8:	f002 f84d 	bl	800a146 <__s2b>
 80080ac:	9007      	str	r0, [sp, #28]
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f af08 	beq.w	8007ec4 <_strtod_l+0x434>
 80080b4:	9a06      	ldr	r2, [sp, #24]
 80080b6:	9b06      	ldr	r3, [sp, #24]
 80080b8:	2a00      	cmp	r2, #0
 80080ba:	f1c3 0300 	rsb	r3, r3, #0
 80080be:	bfa8      	it	ge
 80080c0:	2300      	movge	r3, #0
 80080c2:	930e      	str	r3, [sp, #56]	; 0x38
 80080c4:	2400      	movs	r4, #0
 80080c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80080ca:	9316      	str	r3, [sp, #88]	; 0x58
 80080cc:	46a0      	mov	r8, r4
 80080ce:	9b07      	ldr	r3, [sp, #28]
 80080d0:	4648      	mov	r0, r9
 80080d2:	6859      	ldr	r1, [r3, #4]
 80080d4:	f001 ffb1 	bl	800a03a <_Balloc>
 80080d8:	9005      	str	r0, [sp, #20]
 80080da:	2800      	cmp	r0, #0
 80080dc:	f43f aef6 	beq.w	8007ecc <_strtod_l+0x43c>
 80080e0:	9b07      	ldr	r3, [sp, #28]
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	3202      	adds	r2, #2
 80080e6:	f103 010c 	add.w	r1, r3, #12
 80080ea:	0092      	lsls	r2, r2, #2
 80080ec:	300c      	adds	r0, #12
 80080ee:	f001 ff99 	bl	800a024 <memcpy>
 80080f2:	aa1e      	add	r2, sp, #120	; 0x78
 80080f4:	a91d      	add	r1, sp, #116	; 0x74
 80080f6:	ec4b ab10 	vmov	d0, sl, fp
 80080fa:	4648      	mov	r0, r9
 80080fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008100:	f002 fadc 	bl	800a6bc <__d2b>
 8008104:	901c      	str	r0, [sp, #112]	; 0x70
 8008106:	2800      	cmp	r0, #0
 8008108:	f43f aee0 	beq.w	8007ecc <_strtod_l+0x43c>
 800810c:	2101      	movs	r1, #1
 800810e:	4648      	mov	r0, r9
 8008110:	f002 f8a5 	bl	800a25e <__i2b>
 8008114:	4680      	mov	r8, r0
 8008116:	2800      	cmp	r0, #0
 8008118:	f43f aed8 	beq.w	8007ecc <_strtod_l+0x43c>
 800811c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800811e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008120:	2e00      	cmp	r6, #0
 8008122:	bfab      	itete	ge
 8008124:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008126:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008128:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800812a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800812c:	bfac      	ite	ge
 800812e:	18f7      	addge	r7, r6, r3
 8008130:	1b9d      	sublt	r5, r3, r6
 8008132:	9b04      	ldr	r3, [sp, #16]
 8008134:	1af6      	subs	r6, r6, r3
 8008136:	4416      	add	r6, r2
 8008138:	4b63      	ldr	r3, [pc, #396]	; (80082c8 <_strtod_l+0x838>)
 800813a:	3e01      	subs	r6, #1
 800813c:	429e      	cmp	r6, r3
 800813e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008142:	f280 80af 	bge.w	80082a4 <_strtod_l+0x814>
 8008146:	1b9b      	subs	r3, r3, r6
 8008148:	2b1f      	cmp	r3, #31
 800814a:	eba2 0203 	sub.w	r2, r2, r3
 800814e:	f04f 0101 	mov.w	r1, #1
 8008152:	f300 809b 	bgt.w	800828c <_strtod_l+0x7fc>
 8008156:	fa01 f303 	lsl.w	r3, r1, r3
 800815a:	930f      	str	r3, [sp, #60]	; 0x3c
 800815c:	2300      	movs	r3, #0
 800815e:	930a      	str	r3, [sp, #40]	; 0x28
 8008160:	18be      	adds	r6, r7, r2
 8008162:	9b04      	ldr	r3, [sp, #16]
 8008164:	42b7      	cmp	r7, r6
 8008166:	4415      	add	r5, r2
 8008168:	441d      	add	r5, r3
 800816a:	463b      	mov	r3, r7
 800816c:	bfa8      	it	ge
 800816e:	4633      	movge	r3, r6
 8008170:	42ab      	cmp	r3, r5
 8008172:	bfa8      	it	ge
 8008174:	462b      	movge	r3, r5
 8008176:	2b00      	cmp	r3, #0
 8008178:	bfc2      	ittt	gt
 800817a:	1af6      	subgt	r6, r6, r3
 800817c:	1aed      	subgt	r5, r5, r3
 800817e:	1aff      	subgt	r7, r7, r3
 8008180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008182:	b1bb      	cbz	r3, 80081b4 <_strtod_l+0x724>
 8008184:	4641      	mov	r1, r8
 8008186:	461a      	mov	r2, r3
 8008188:	4648      	mov	r0, r9
 800818a:	f002 f907 	bl	800a39c <__pow5mult>
 800818e:	4680      	mov	r8, r0
 8008190:	2800      	cmp	r0, #0
 8008192:	f43f ae9b 	beq.w	8007ecc <_strtod_l+0x43c>
 8008196:	4601      	mov	r1, r0
 8008198:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800819a:	4648      	mov	r0, r9
 800819c:	f002 f868 	bl	800a270 <__multiply>
 80081a0:	900c      	str	r0, [sp, #48]	; 0x30
 80081a2:	2800      	cmp	r0, #0
 80081a4:	f43f ae92 	beq.w	8007ecc <_strtod_l+0x43c>
 80081a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081aa:	4648      	mov	r0, r9
 80081ac:	f001 ff79 	bl	800a0a2 <_Bfree>
 80081b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081b2:	931c      	str	r3, [sp, #112]	; 0x70
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	dc7a      	bgt.n	80082ae <_strtod_l+0x81e>
 80081b8:	9b06      	ldr	r3, [sp, #24]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	dd08      	ble.n	80081d0 <_strtod_l+0x740>
 80081be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80081c0:	9905      	ldr	r1, [sp, #20]
 80081c2:	4648      	mov	r0, r9
 80081c4:	f002 f8ea 	bl	800a39c <__pow5mult>
 80081c8:	9005      	str	r0, [sp, #20]
 80081ca:	2800      	cmp	r0, #0
 80081cc:	f43f ae7e 	beq.w	8007ecc <_strtod_l+0x43c>
 80081d0:	2d00      	cmp	r5, #0
 80081d2:	dd08      	ble.n	80081e6 <_strtod_l+0x756>
 80081d4:	462a      	mov	r2, r5
 80081d6:	9905      	ldr	r1, [sp, #20]
 80081d8:	4648      	mov	r0, r9
 80081da:	f002 f92d 	bl	800a438 <__lshift>
 80081de:	9005      	str	r0, [sp, #20]
 80081e0:	2800      	cmp	r0, #0
 80081e2:	f43f ae73 	beq.w	8007ecc <_strtod_l+0x43c>
 80081e6:	2f00      	cmp	r7, #0
 80081e8:	dd08      	ble.n	80081fc <_strtod_l+0x76c>
 80081ea:	4641      	mov	r1, r8
 80081ec:	463a      	mov	r2, r7
 80081ee:	4648      	mov	r0, r9
 80081f0:	f002 f922 	bl	800a438 <__lshift>
 80081f4:	4680      	mov	r8, r0
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f43f ae68 	beq.w	8007ecc <_strtod_l+0x43c>
 80081fc:	9a05      	ldr	r2, [sp, #20]
 80081fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008200:	4648      	mov	r0, r9
 8008202:	f002 f987 	bl	800a514 <__mdiff>
 8008206:	4604      	mov	r4, r0
 8008208:	2800      	cmp	r0, #0
 800820a:	f43f ae5f 	beq.w	8007ecc <_strtod_l+0x43c>
 800820e:	68c3      	ldr	r3, [r0, #12]
 8008210:	930c      	str	r3, [sp, #48]	; 0x30
 8008212:	2300      	movs	r3, #0
 8008214:	60c3      	str	r3, [r0, #12]
 8008216:	4641      	mov	r1, r8
 8008218:	f002 f962 	bl	800a4e0 <__mcmp>
 800821c:	2800      	cmp	r0, #0
 800821e:	da55      	bge.n	80082cc <_strtod_l+0x83c>
 8008220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008222:	b9e3      	cbnz	r3, 800825e <_strtod_l+0x7ce>
 8008224:	f1ba 0f00 	cmp.w	sl, #0
 8008228:	d119      	bne.n	800825e <_strtod_l+0x7ce>
 800822a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800822e:	b9b3      	cbnz	r3, 800825e <_strtod_l+0x7ce>
 8008230:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008234:	0d1b      	lsrs	r3, r3, #20
 8008236:	051b      	lsls	r3, r3, #20
 8008238:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800823c:	d90f      	bls.n	800825e <_strtod_l+0x7ce>
 800823e:	6963      	ldr	r3, [r4, #20]
 8008240:	b913      	cbnz	r3, 8008248 <_strtod_l+0x7b8>
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	2b01      	cmp	r3, #1
 8008246:	dd0a      	ble.n	800825e <_strtod_l+0x7ce>
 8008248:	4621      	mov	r1, r4
 800824a:	2201      	movs	r2, #1
 800824c:	4648      	mov	r0, r9
 800824e:	f002 f8f3 	bl	800a438 <__lshift>
 8008252:	4641      	mov	r1, r8
 8008254:	4604      	mov	r4, r0
 8008256:	f002 f943 	bl	800a4e0 <__mcmp>
 800825a:	2800      	cmp	r0, #0
 800825c:	dc67      	bgt.n	800832e <_strtod_l+0x89e>
 800825e:	9b04      	ldr	r3, [sp, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d171      	bne.n	8008348 <_strtod_l+0x8b8>
 8008264:	e63d      	b.n	8007ee2 <_strtod_l+0x452>
 8008266:	f018 0f01 	tst.w	r8, #1
 800826a:	d004      	beq.n	8008276 <_strtod_l+0x7e6>
 800826c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008270:	f7f8 f9c2 	bl	80005f8 <__aeabi_dmul>
 8008274:	2301      	movs	r3, #1
 8008276:	ea4f 0868 	mov.w	r8, r8, asr #1
 800827a:	3508      	adds	r5, #8
 800827c:	e6e5      	b.n	800804a <_strtod_l+0x5ba>
 800827e:	f04f 32ff 	mov.w	r2, #4294967295
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	ea03 0a0a 	and.w	sl, r3, sl
 800828a:	e6ff      	b.n	800808c <_strtod_l+0x5fc>
 800828c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008290:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008294:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008298:	36e2      	adds	r6, #226	; 0xe2
 800829a:	fa01 f306 	lsl.w	r3, r1, r6
 800829e:	930a      	str	r3, [sp, #40]	; 0x28
 80082a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80082a2:	e75d      	b.n	8008160 <_strtod_l+0x6d0>
 80082a4:	2300      	movs	r3, #0
 80082a6:	930a      	str	r3, [sp, #40]	; 0x28
 80082a8:	2301      	movs	r3, #1
 80082aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80082ac:	e758      	b.n	8008160 <_strtod_l+0x6d0>
 80082ae:	4632      	mov	r2, r6
 80082b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80082b2:	4648      	mov	r0, r9
 80082b4:	f002 f8c0 	bl	800a438 <__lshift>
 80082b8:	901c      	str	r0, [sp, #112]	; 0x70
 80082ba:	2800      	cmp	r0, #0
 80082bc:	f47f af7c 	bne.w	80081b8 <_strtod_l+0x728>
 80082c0:	e604      	b.n	8007ecc <_strtod_l+0x43c>
 80082c2:	bf00      	nop
 80082c4:	0800b378 	.word	0x0800b378
 80082c8:	fffffc02 	.word	0xfffffc02
 80082cc:	465d      	mov	r5, fp
 80082ce:	f040 8086 	bne.w	80083de <_strtod_l+0x94e>
 80082d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082d8:	b32a      	cbz	r2, 8008326 <_strtod_l+0x896>
 80082da:	4aaf      	ldr	r2, [pc, #700]	; (8008598 <_strtod_l+0xb08>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d153      	bne.n	8008388 <_strtod_l+0x8f8>
 80082e0:	9b04      	ldr	r3, [sp, #16]
 80082e2:	4650      	mov	r0, sl
 80082e4:	b1d3      	cbz	r3, 800831c <_strtod_l+0x88c>
 80082e6:	4aad      	ldr	r2, [pc, #692]	; (800859c <_strtod_l+0xb0c>)
 80082e8:	402a      	ands	r2, r5
 80082ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80082ee:	f04f 31ff 	mov.w	r1, #4294967295
 80082f2:	d816      	bhi.n	8008322 <_strtod_l+0x892>
 80082f4:	0d12      	lsrs	r2, r2, #20
 80082f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082fa:	fa01 f303 	lsl.w	r3, r1, r3
 80082fe:	4298      	cmp	r0, r3
 8008300:	d142      	bne.n	8008388 <_strtod_l+0x8f8>
 8008302:	4ba7      	ldr	r3, [pc, #668]	; (80085a0 <_strtod_l+0xb10>)
 8008304:	429d      	cmp	r5, r3
 8008306:	d102      	bne.n	800830e <_strtod_l+0x87e>
 8008308:	3001      	adds	r0, #1
 800830a:	f43f addf 	beq.w	8007ecc <_strtod_l+0x43c>
 800830e:	4ba3      	ldr	r3, [pc, #652]	; (800859c <_strtod_l+0xb0c>)
 8008310:	402b      	ands	r3, r5
 8008312:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008316:	f04f 0a00 	mov.w	sl, #0
 800831a:	e7a0      	b.n	800825e <_strtod_l+0x7ce>
 800831c:	f04f 33ff 	mov.w	r3, #4294967295
 8008320:	e7ed      	b.n	80082fe <_strtod_l+0x86e>
 8008322:	460b      	mov	r3, r1
 8008324:	e7eb      	b.n	80082fe <_strtod_l+0x86e>
 8008326:	bb7b      	cbnz	r3, 8008388 <_strtod_l+0x8f8>
 8008328:	f1ba 0f00 	cmp.w	sl, #0
 800832c:	d12c      	bne.n	8008388 <_strtod_l+0x8f8>
 800832e:	9904      	ldr	r1, [sp, #16]
 8008330:	4a9a      	ldr	r2, [pc, #616]	; (800859c <_strtod_l+0xb0c>)
 8008332:	465b      	mov	r3, fp
 8008334:	b1f1      	cbz	r1, 8008374 <_strtod_l+0x8e4>
 8008336:	ea02 010b 	and.w	r1, r2, fp
 800833a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800833e:	dc19      	bgt.n	8008374 <_strtod_l+0x8e4>
 8008340:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008344:	f77f ae5b 	ble.w	8007ffe <_strtod_l+0x56e>
 8008348:	4a96      	ldr	r2, [pc, #600]	; (80085a4 <_strtod_l+0xb14>)
 800834a:	2300      	movs	r3, #0
 800834c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008350:	4650      	mov	r0, sl
 8008352:	4659      	mov	r1, fp
 8008354:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008358:	f7f8 f94e 	bl	80005f8 <__aeabi_dmul>
 800835c:	4682      	mov	sl, r0
 800835e:	468b      	mov	fp, r1
 8008360:	2900      	cmp	r1, #0
 8008362:	f47f adbe 	bne.w	8007ee2 <_strtod_l+0x452>
 8008366:	2800      	cmp	r0, #0
 8008368:	f47f adbb 	bne.w	8007ee2 <_strtod_l+0x452>
 800836c:	2322      	movs	r3, #34	; 0x22
 800836e:	f8c9 3000 	str.w	r3, [r9]
 8008372:	e5b6      	b.n	8007ee2 <_strtod_l+0x452>
 8008374:	4013      	ands	r3, r2
 8008376:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800837a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800837e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008382:	f04f 3aff 	mov.w	sl, #4294967295
 8008386:	e76a      	b.n	800825e <_strtod_l+0x7ce>
 8008388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800838a:	b193      	cbz	r3, 80083b2 <_strtod_l+0x922>
 800838c:	422b      	tst	r3, r5
 800838e:	f43f af66 	beq.w	800825e <_strtod_l+0x7ce>
 8008392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008394:	9a04      	ldr	r2, [sp, #16]
 8008396:	4650      	mov	r0, sl
 8008398:	4659      	mov	r1, fp
 800839a:	b173      	cbz	r3, 80083ba <_strtod_l+0x92a>
 800839c:	f7ff fb5c 	bl	8007a58 <sulp>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083a8:	f7f7 ff70 	bl	800028c <__adddf3>
 80083ac:	4682      	mov	sl, r0
 80083ae:	468b      	mov	fp, r1
 80083b0:	e755      	b.n	800825e <_strtod_l+0x7ce>
 80083b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083b4:	ea13 0f0a 	tst.w	r3, sl
 80083b8:	e7e9      	b.n	800838e <_strtod_l+0x8fe>
 80083ba:	f7ff fb4d 	bl	8007a58 <sulp>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083c6:	f7f7 ff5f 	bl	8000288 <__aeabi_dsub>
 80083ca:	2200      	movs	r2, #0
 80083cc:	2300      	movs	r3, #0
 80083ce:	4682      	mov	sl, r0
 80083d0:	468b      	mov	fp, r1
 80083d2:	f7f8 fb79 	bl	8000ac8 <__aeabi_dcmpeq>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f47f ae11 	bne.w	8007ffe <_strtod_l+0x56e>
 80083dc:	e73f      	b.n	800825e <_strtod_l+0x7ce>
 80083de:	4641      	mov	r1, r8
 80083e0:	4620      	mov	r0, r4
 80083e2:	f002 f9ba 	bl	800a75a <__ratio>
 80083e6:	ec57 6b10 	vmov	r6, r7, d0
 80083ea:	2200      	movs	r2, #0
 80083ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083f0:	ee10 0a10 	vmov	r0, s0
 80083f4:	4639      	mov	r1, r7
 80083f6:	f7f8 fb7b 	bl	8000af0 <__aeabi_dcmple>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d077      	beq.n	80084ee <_strtod_l+0xa5e>
 80083fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008400:	2b00      	cmp	r3, #0
 8008402:	d04a      	beq.n	800849a <_strtod_l+0xa0a>
 8008404:	4b68      	ldr	r3, [pc, #416]	; (80085a8 <_strtod_l+0xb18>)
 8008406:	2200      	movs	r2, #0
 8008408:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800840c:	4f66      	ldr	r7, [pc, #408]	; (80085a8 <_strtod_l+0xb18>)
 800840e:	2600      	movs	r6, #0
 8008410:	4b62      	ldr	r3, [pc, #392]	; (800859c <_strtod_l+0xb0c>)
 8008412:	402b      	ands	r3, r5
 8008414:	930f      	str	r3, [sp, #60]	; 0x3c
 8008416:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008418:	4b64      	ldr	r3, [pc, #400]	; (80085ac <_strtod_l+0xb1c>)
 800841a:	429a      	cmp	r2, r3
 800841c:	f040 80ce 	bne.w	80085bc <_strtod_l+0xb2c>
 8008420:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008424:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008428:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800842c:	ec4b ab10 	vmov	d0, sl, fp
 8008430:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008434:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008438:	f002 f8ca 	bl	800a5d0 <__ulp>
 800843c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008440:	ec53 2b10 	vmov	r2, r3, d0
 8008444:	f7f8 f8d8 	bl	80005f8 <__aeabi_dmul>
 8008448:	4652      	mov	r2, sl
 800844a:	465b      	mov	r3, fp
 800844c:	f7f7 ff1e 	bl	800028c <__adddf3>
 8008450:	460b      	mov	r3, r1
 8008452:	4952      	ldr	r1, [pc, #328]	; (800859c <_strtod_l+0xb0c>)
 8008454:	4a56      	ldr	r2, [pc, #344]	; (80085b0 <_strtod_l+0xb20>)
 8008456:	4019      	ands	r1, r3
 8008458:	4291      	cmp	r1, r2
 800845a:	4682      	mov	sl, r0
 800845c:	d95b      	bls.n	8008516 <_strtod_l+0xa86>
 800845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008460:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008464:	4293      	cmp	r3, r2
 8008466:	d103      	bne.n	8008470 <_strtod_l+0x9e0>
 8008468:	9b08      	ldr	r3, [sp, #32]
 800846a:	3301      	adds	r3, #1
 800846c:	f43f ad2e 	beq.w	8007ecc <_strtod_l+0x43c>
 8008470:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80085a0 <_strtod_l+0xb10>
 8008474:	f04f 3aff 	mov.w	sl, #4294967295
 8008478:	991c      	ldr	r1, [sp, #112]	; 0x70
 800847a:	4648      	mov	r0, r9
 800847c:	f001 fe11 	bl	800a0a2 <_Bfree>
 8008480:	9905      	ldr	r1, [sp, #20]
 8008482:	4648      	mov	r0, r9
 8008484:	f001 fe0d 	bl	800a0a2 <_Bfree>
 8008488:	4641      	mov	r1, r8
 800848a:	4648      	mov	r0, r9
 800848c:	f001 fe09 	bl	800a0a2 <_Bfree>
 8008490:	4621      	mov	r1, r4
 8008492:	4648      	mov	r0, r9
 8008494:	f001 fe05 	bl	800a0a2 <_Bfree>
 8008498:	e619      	b.n	80080ce <_strtod_l+0x63e>
 800849a:	f1ba 0f00 	cmp.w	sl, #0
 800849e:	d11a      	bne.n	80084d6 <_strtod_l+0xa46>
 80084a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084a4:	b9eb      	cbnz	r3, 80084e2 <_strtod_l+0xa52>
 80084a6:	2200      	movs	r2, #0
 80084a8:	4b3f      	ldr	r3, [pc, #252]	; (80085a8 <_strtod_l+0xb18>)
 80084aa:	4630      	mov	r0, r6
 80084ac:	4639      	mov	r1, r7
 80084ae:	f7f8 fb15 	bl	8000adc <__aeabi_dcmplt>
 80084b2:	b9c8      	cbnz	r0, 80084e8 <_strtod_l+0xa58>
 80084b4:	4630      	mov	r0, r6
 80084b6:	4639      	mov	r1, r7
 80084b8:	2200      	movs	r2, #0
 80084ba:	4b3e      	ldr	r3, [pc, #248]	; (80085b4 <_strtod_l+0xb24>)
 80084bc:	f7f8 f89c 	bl	80005f8 <__aeabi_dmul>
 80084c0:	4606      	mov	r6, r0
 80084c2:	460f      	mov	r7, r1
 80084c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80084c8:	9618      	str	r6, [sp, #96]	; 0x60
 80084ca:	9319      	str	r3, [sp, #100]	; 0x64
 80084cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80084d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80084d4:	e79c      	b.n	8008410 <_strtod_l+0x980>
 80084d6:	f1ba 0f01 	cmp.w	sl, #1
 80084da:	d102      	bne.n	80084e2 <_strtod_l+0xa52>
 80084dc:	2d00      	cmp	r5, #0
 80084de:	f43f ad8e 	beq.w	8007ffe <_strtod_l+0x56e>
 80084e2:	2200      	movs	r2, #0
 80084e4:	4b34      	ldr	r3, [pc, #208]	; (80085b8 <_strtod_l+0xb28>)
 80084e6:	e78f      	b.n	8008408 <_strtod_l+0x978>
 80084e8:	2600      	movs	r6, #0
 80084ea:	4f32      	ldr	r7, [pc, #200]	; (80085b4 <_strtod_l+0xb24>)
 80084ec:	e7ea      	b.n	80084c4 <_strtod_l+0xa34>
 80084ee:	4b31      	ldr	r3, [pc, #196]	; (80085b4 <_strtod_l+0xb24>)
 80084f0:	4630      	mov	r0, r6
 80084f2:	4639      	mov	r1, r7
 80084f4:	2200      	movs	r2, #0
 80084f6:	f7f8 f87f 	bl	80005f8 <__aeabi_dmul>
 80084fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084fc:	4606      	mov	r6, r0
 80084fe:	460f      	mov	r7, r1
 8008500:	b933      	cbnz	r3, 8008510 <_strtod_l+0xa80>
 8008502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008506:	9010      	str	r0, [sp, #64]	; 0x40
 8008508:	9311      	str	r3, [sp, #68]	; 0x44
 800850a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800850e:	e7df      	b.n	80084d0 <_strtod_l+0xa40>
 8008510:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008514:	e7f9      	b.n	800850a <_strtod_l+0xa7a>
 8008516:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800851a:	9b04      	ldr	r3, [sp, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1ab      	bne.n	8008478 <_strtod_l+0x9e8>
 8008520:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008524:	0d1b      	lsrs	r3, r3, #20
 8008526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008528:	051b      	lsls	r3, r3, #20
 800852a:	429a      	cmp	r2, r3
 800852c:	465d      	mov	r5, fp
 800852e:	d1a3      	bne.n	8008478 <_strtod_l+0x9e8>
 8008530:	4639      	mov	r1, r7
 8008532:	4630      	mov	r0, r6
 8008534:	f7f8 fb10 	bl	8000b58 <__aeabi_d2iz>
 8008538:	f7f7 fff4 	bl	8000524 <__aeabi_i2d>
 800853c:	460b      	mov	r3, r1
 800853e:	4602      	mov	r2, r0
 8008540:	4639      	mov	r1, r7
 8008542:	4630      	mov	r0, r6
 8008544:	f7f7 fea0 	bl	8000288 <__aeabi_dsub>
 8008548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800854a:	4606      	mov	r6, r0
 800854c:	460f      	mov	r7, r1
 800854e:	b933      	cbnz	r3, 800855e <_strtod_l+0xace>
 8008550:	f1ba 0f00 	cmp.w	sl, #0
 8008554:	d103      	bne.n	800855e <_strtod_l+0xace>
 8008556:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800855a:	2d00      	cmp	r5, #0
 800855c:	d06d      	beq.n	800863a <_strtod_l+0xbaa>
 800855e:	a30a      	add	r3, pc, #40	; (adr r3, 8008588 <_strtod_l+0xaf8>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	4630      	mov	r0, r6
 8008566:	4639      	mov	r1, r7
 8008568:	f7f8 fab8 	bl	8000adc <__aeabi_dcmplt>
 800856c:	2800      	cmp	r0, #0
 800856e:	f47f acb8 	bne.w	8007ee2 <_strtod_l+0x452>
 8008572:	a307      	add	r3, pc, #28	; (adr r3, 8008590 <_strtod_l+0xb00>)
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	4630      	mov	r0, r6
 800857a:	4639      	mov	r1, r7
 800857c:	f7f8 facc 	bl	8000b18 <__aeabi_dcmpgt>
 8008580:	2800      	cmp	r0, #0
 8008582:	f43f af79 	beq.w	8008478 <_strtod_l+0x9e8>
 8008586:	e4ac      	b.n	8007ee2 <_strtod_l+0x452>
 8008588:	94a03595 	.word	0x94a03595
 800858c:	3fdfffff 	.word	0x3fdfffff
 8008590:	35afe535 	.word	0x35afe535
 8008594:	3fe00000 	.word	0x3fe00000
 8008598:	000fffff 	.word	0x000fffff
 800859c:	7ff00000 	.word	0x7ff00000
 80085a0:	7fefffff 	.word	0x7fefffff
 80085a4:	39500000 	.word	0x39500000
 80085a8:	3ff00000 	.word	0x3ff00000
 80085ac:	7fe00000 	.word	0x7fe00000
 80085b0:	7c9fffff 	.word	0x7c9fffff
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	bff00000 	.word	0xbff00000
 80085bc:	9b04      	ldr	r3, [sp, #16]
 80085be:	b333      	cbz	r3, 800860e <_strtod_l+0xb7e>
 80085c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085c6:	d822      	bhi.n	800860e <_strtod_l+0xb7e>
 80085c8:	a327      	add	r3, pc, #156	; (adr r3, 8008668 <_strtod_l+0xbd8>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	4630      	mov	r0, r6
 80085d0:	4639      	mov	r1, r7
 80085d2:	f7f8 fa8d 	bl	8000af0 <__aeabi_dcmple>
 80085d6:	b1a0      	cbz	r0, 8008602 <_strtod_l+0xb72>
 80085d8:	4639      	mov	r1, r7
 80085da:	4630      	mov	r0, r6
 80085dc:	f7f8 fae4 	bl	8000ba8 <__aeabi_d2uiz>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	bf08      	it	eq
 80085e4:	2001      	moveq	r0, #1
 80085e6:	f7f7 ff8d 	bl	8000504 <__aeabi_ui2d>
 80085ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ec:	4606      	mov	r6, r0
 80085ee:	460f      	mov	r7, r1
 80085f0:	bb03      	cbnz	r3, 8008634 <_strtod_l+0xba4>
 80085f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085f6:	9012      	str	r0, [sp, #72]	; 0x48
 80085f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80085fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80085fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008604:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008606:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	930b      	str	r3, [sp, #44]	; 0x2c
 800860e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008612:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008616:	f001 ffdb 	bl	800a5d0 <__ulp>
 800861a:	4650      	mov	r0, sl
 800861c:	ec53 2b10 	vmov	r2, r3, d0
 8008620:	4659      	mov	r1, fp
 8008622:	f7f7 ffe9 	bl	80005f8 <__aeabi_dmul>
 8008626:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800862a:	f7f7 fe2f 	bl	800028c <__adddf3>
 800862e:	4682      	mov	sl, r0
 8008630:	468b      	mov	fp, r1
 8008632:	e772      	b.n	800851a <_strtod_l+0xa8a>
 8008634:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008638:	e7df      	b.n	80085fa <_strtod_l+0xb6a>
 800863a:	a30d      	add	r3, pc, #52	; (adr r3, 8008670 <_strtod_l+0xbe0>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f7f8 fa4c 	bl	8000adc <__aeabi_dcmplt>
 8008644:	e79c      	b.n	8008580 <_strtod_l+0xaf0>
 8008646:	2300      	movs	r3, #0
 8008648:	930d      	str	r3, [sp, #52]	; 0x34
 800864a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800864c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	f7ff ba61 	b.w	8007b16 <_strtod_l+0x86>
 8008654:	2b65      	cmp	r3, #101	; 0x65
 8008656:	f04f 0200 	mov.w	r2, #0
 800865a:	f43f ab4e 	beq.w	8007cfa <_strtod_l+0x26a>
 800865e:	2101      	movs	r1, #1
 8008660:	4614      	mov	r4, r2
 8008662:	9104      	str	r1, [sp, #16]
 8008664:	f7ff bacb 	b.w	8007bfe <_strtod_l+0x16e>
 8008668:	ffc00000 	.word	0xffc00000
 800866c:	41dfffff 	.word	0x41dfffff
 8008670:	94a03595 	.word	0x94a03595
 8008674:	3fcfffff 	.word	0x3fcfffff

08008678 <_strtod_r>:
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <_strtod_r+0x18>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	b410      	push	{r4}
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	4c04      	ldr	r4, [pc, #16]	; (8008694 <_strtod_r+0x1c>)
 8008682:	2b00      	cmp	r3, #0
 8008684:	bf08      	it	eq
 8008686:	4623      	moveq	r3, r4
 8008688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800868c:	f7ff ba00 	b.w	8007a90 <_strtod_l>
 8008690:	2000000c 	.word	0x2000000c
 8008694:	20000070 	.word	0x20000070

08008698 <_strtol_l.isra.0>:
 8008698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	4680      	mov	r8, r0
 800869e:	4689      	mov	r9, r1
 80086a0:	4692      	mov	sl, r2
 80086a2:	461e      	mov	r6, r3
 80086a4:	460f      	mov	r7, r1
 80086a6:	463d      	mov	r5, r7
 80086a8:	9808      	ldr	r0, [sp, #32]
 80086aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086ae:	f001 fc27 	bl	8009f00 <__locale_ctype_ptr_l>
 80086b2:	4420      	add	r0, r4
 80086b4:	7843      	ldrb	r3, [r0, #1]
 80086b6:	f013 0308 	ands.w	r3, r3, #8
 80086ba:	d132      	bne.n	8008722 <_strtol_l.isra.0+0x8a>
 80086bc:	2c2d      	cmp	r4, #45	; 0x2d
 80086be:	d132      	bne.n	8008726 <_strtol_l.isra.0+0x8e>
 80086c0:	787c      	ldrb	r4, [r7, #1]
 80086c2:	1cbd      	adds	r5, r7, #2
 80086c4:	2201      	movs	r2, #1
 80086c6:	2e00      	cmp	r6, #0
 80086c8:	d05d      	beq.n	8008786 <_strtol_l.isra.0+0xee>
 80086ca:	2e10      	cmp	r6, #16
 80086cc:	d109      	bne.n	80086e2 <_strtol_l.isra.0+0x4a>
 80086ce:	2c30      	cmp	r4, #48	; 0x30
 80086d0:	d107      	bne.n	80086e2 <_strtol_l.isra.0+0x4a>
 80086d2:	782b      	ldrb	r3, [r5, #0]
 80086d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086d8:	2b58      	cmp	r3, #88	; 0x58
 80086da:	d14f      	bne.n	800877c <_strtol_l.isra.0+0xe4>
 80086dc:	786c      	ldrb	r4, [r5, #1]
 80086de:	2610      	movs	r6, #16
 80086e0:	3502      	adds	r5, #2
 80086e2:	2a00      	cmp	r2, #0
 80086e4:	bf14      	ite	ne
 80086e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80086ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80086ee:	2700      	movs	r7, #0
 80086f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80086f4:	4638      	mov	r0, r7
 80086f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80086fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80086fe:	2b09      	cmp	r3, #9
 8008700:	d817      	bhi.n	8008732 <_strtol_l.isra.0+0x9a>
 8008702:	461c      	mov	r4, r3
 8008704:	42a6      	cmp	r6, r4
 8008706:	dd23      	ble.n	8008750 <_strtol_l.isra.0+0xb8>
 8008708:	1c7b      	adds	r3, r7, #1
 800870a:	d007      	beq.n	800871c <_strtol_l.isra.0+0x84>
 800870c:	4584      	cmp	ip, r0
 800870e:	d31c      	bcc.n	800874a <_strtol_l.isra.0+0xb2>
 8008710:	d101      	bne.n	8008716 <_strtol_l.isra.0+0x7e>
 8008712:	45a6      	cmp	lr, r4
 8008714:	db19      	blt.n	800874a <_strtol_l.isra.0+0xb2>
 8008716:	fb00 4006 	mla	r0, r0, r6, r4
 800871a:	2701      	movs	r7, #1
 800871c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008720:	e7eb      	b.n	80086fa <_strtol_l.isra.0+0x62>
 8008722:	462f      	mov	r7, r5
 8008724:	e7bf      	b.n	80086a6 <_strtol_l.isra.0+0xe>
 8008726:	2c2b      	cmp	r4, #43	; 0x2b
 8008728:	bf04      	itt	eq
 800872a:	1cbd      	addeq	r5, r7, #2
 800872c:	787c      	ldrbeq	r4, [r7, #1]
 800872e:	461a      	mov	r2, r3
 8008730:	e7c9      	b.n	80086c6 <_strtol_l.isra.0+0x2e>
 8008732:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008736:	2b19      	cmp	r3, #25
 8008738:	d801      	bhi.n	800873e <_strtol_l.isra.0+0xa6>
 800873a:	3c37      	subs	r4, #55	; 0x37
 800873c:	e7e2      	b.n	8008704 <_strtol_l.isra.0+0x6c>
 800873e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008742:	2b19      	cmp	r3, #25
 8008744:	d804      	bhi.n	8008750 <_strtol_l.isra.0+0xb8>
 8008746:	3c57      	subs	r4, #87	; 0x57
 8008748:	e7dc      	b.n	8008704 <_strtol_l.isra.0+0x6c>
 800874a:	f04f 37ff 	mov.w	r7, #4294967295
 800874e:	e7e5      	b.n	800871c <_strtol_l.isra.0+0x84>
 8008750:	1c7b      	adds	r3, r7, #1
 8008752:	d108      	bne.n	8008766 <_strtol_l.isra.0+0xce>
 8008754:	2322      	movs	r3, #34	; 0x22
 8008756:	f8c8 3000 	str.w	r3, [r8]
 800875a:	4608      	mov	r0, r1
 800875c:	f1ba 0f00 	cmp.w	sl, #0
 8008760:	d107      	bne.n	8008772 <_strtol_l.isra.0+0xda>
 8008762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008766:	b102      	cbz	r2, 800876a <_strtol_l.isra.0+0xd2>
 8008768:	4240      	negs	r0, r0
 800876a:	f1ba 0f00 	cmp.w	sl, #0
 800876e:	d0f8      	beq.n	8008762 <_strtol_l.isra.0+0xca>
 8008770:	b10f      	cbz	r7, 8008776 <_strtol_l.isra.0+0xde>
 8008772:	f105 39ff 	add.w	r9, r5, #4294967295
 8008776:	f8ca 9000 	str.w	r9, [sl]
 800877a:	e7f2      	b.n	8008762 <_strtol_l.isra.0+0xca>
 800877c:	2430      	movs	r4, #48	; 0x30
 800877e:	2e00      	cmp	r6, #0
 8008780:	d1af      	bne.n	80086e2 <_strtol_l.isra.0+0x4a>
 8008782:	2608      	movs	r6, #8
 8008784:	e7ad      	b.n	80086e2 <_strtol_l.isra.0+0x4a>
 8008786:	2c30      	cmp	r4, #48	; 0x30
 8008788:	d0a3      	beq.n	80086d2 <_strtol_l.isra.0+0x3a>
 800878a:	260a      	movs	r6, #10
 800878c:	e7a9      	b.n	80086e2 <_strtol_l.isra.0+0x4a>
	...

08008790 <_strtol_r>:
 8008790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008792:	4c06      	ldr	r4, [pc, #24]	; (80087ac <_strtol_r+0x1c>)
 8008794:	4d06      	ldr	r5, [pc, #24]	; (80087b0 <_strtol_r+0x20>)
 8008796:	6824      	ldr	r4, [r4, #0]
 8008798:	6a24      	ldr	r4, [r4, #32]
 800879a:	2c00      	cmp	r4, #0
 800879c:	bf08      	it	eq
 800879e:	462c      	moveq	r4, r5
 80087a0:	9400      	str	r4, [sp, #0]
 80087a2:	f7ff ff79 	bl	8008698 <_strtol_l.isra.0>
 80087a6:	b003      	add	sp, #12
 80087a8:	bd30      	pop	{r4, r5, pc}
 80087aa:	bf00      	nop
 80087ac:	2000000c 	.word	0x2000000c
 80087b0:	20000070 	.word	0x20000070

080087b4 <__swbuf_r>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	460e      	mov	r6, r1
 80087b8:	4614      	mov	r4, r2
 80087ba:	4605      	mov	r5, r0
 80087bc:	b118      	cbz	r0, 80087c6 <__swbuf_r+0x12>
 80087be:	6983      	ldr	r3, [r0, #24]
 80087c0:	b90b      	cbnz	r3, 80087c6 <__swbuf_r+0x12>
 80087c2:	f000 ffed 	bl	80097a0 <__sinit>
 80087c6:	4b21      	ldr	r3, [pc, #132]	; (800884c <__swbuf_r+0x98>)
 80087c8:	429c      	cmp	r4, r3
 80087ca:	d12a      	bne.n	8008822 <__swbuf_r+0x6e>
 80087cc:	686c      	ldr	r4, [r5, #4]
 80087ce:	69a3      	ldr	r3, [r4, #24]
 80087d0:	60a3      	str	r3, [r4, #8]
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	071a      	lsls	r2, r3, #28
 80087d6:	d52e      	bpl.n	8008836 <__swbuf_r+0x82>
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	b363      	cbz	r3, 8008836 <__swbuf_r+0x82>
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	6820      	ldr	r0, [r4, #0]
 80087e0:	1ac0      	subs	r0, r0, r3
 80087e2:	6963      	ldr	r3, [r4, #20]
 80087e4:	b2f6      	uxtb	r6, r6
 80087e6:	4283      	cmp	r3, r0
 80087e8:	4637      	mov	r7, r6
 80087ea:	dc04      	bgt.n	80087f6 <__swbuf_r+0x42>
 80087ec:	4621      	mov	r1, r4
 80087ee:	4628      	mov	r0, r5
 80087f0:	f000 ff6c 	bl	80096cc <_fflush_r>
 80087f4:	bb28      	cbnz	r0, 8008842 <__swbuf_r+0x8e>
 80087f6:	68a3      	ldr	r3, [r4, #8]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	60a3      	str	r3, [r4, #8]
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	1c5a      	adds	r2, r3, #1
 8008800:	6022      	str	r2, [r4, #0]
 8008802:	701e      	strb	r6, [r3, #0]
 8008804:	6963      	ldr	r3, [r4, #20]
 8008806:	3001      	adds	r0, #1
 8008808:	4283      	cmp	r3, r0
 800880a:	d004      	beq.n	8008816 <__swbuf_r+0x62>
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	07db      	lsls	r3, r3, #31
 8008810:	d519      	bpl.n	8008846 <__swbuf_r+0x92>
 8008812:	2e0a      	cmp	r6, #10
 8008814:	d117      	bne.n	8008846 <__swbuf_r+0x92>
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 ff57 	bl	80096cc <_fflush_r>
 800881e:	b190      	cbz	r0, 8008846 <__swbuf_r+0x92>
 8008820:	e00f      	b.n	8008842 <__swbuf_r+0x8e>
 8008822:	4b0b      	ldr	r3, [pc, #44]	; (8008850 <__swbuf_r+0x9c>)
 8008824:	429c      	cmp	r4, r3
 8008826:	d101      	bne.n	800882c <__swbuf_r+0x78>
 8008828:	68ac      	ldr	r4, [r5, #8]
 800882a:	e7d0      	b.n	80087ce <__swbuf_r+0x1a>
 800882c:	4b09      	ldr	r3, [pc, #36]	; (8008854 <__swbuf_r+0xa0>)
 800882e:	429c      	cmp	r4, r3
 8008830:	bf08      	it	eq
 8008832:	68ec      	ldreq	r4, [r5, #12]
 8008834:	e7cb      	b.n	80087ce <__swbuf_r+0x1a>
 8008836:	4621      	mov	r1, r4
 8008838:	4628      	mov	r0, r5
 800883a:	f000 f80d 	bl	8008858 <__swsetup_r>
 800883e:	2800      	cmp	r0, #0
 8008840:	d0cc      	beq.n	80087dc <__swbuf_r+0x28>
 8008842:	f04f 37ff 	mov.w	r7, #4294967295
 8008846:	4638      	mov	r0, r7
 8008848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800884a:	bf00      	nop
 800884c:	0800b3d0 	.word	0x0800b3d0
 8008850:	0800b3f0 	.word	0x0800b3f0
 8008854:	0800b3b0 	.word	0x0800b3b0

08008858 <__swsetup_r>:
 8008858:	4b32      	ldr	r3, [pc, #200]	; (8008924 <__swsetup_r+0xcc>)
 800885a:	b570      	push	{r4, r5, r6, lr}
 800885c:	681d      	ldr	r5, [r3, #0]
 800885e:	4606      	mov	r6, r0
 8008860:	460c      	mov	r4, r1
 8008862:	b125      	cbz	r5, 800886e <__swsetup_r+0x16>
 8008864:	69ab      	ldr	r3, [r5, #24]
 8008866:	b913      	cbnz	r3, 800886e <__swsetup_r+0x16>
 8008868:	4628      	mov	r0, r5
 800886a:	f000 ff99 	bl	80097a0 <__sinit>
 800886e:	4b2e      	ldr	r3, [pc, #184]	; (8008928 <__swsetup_r+0xd0>)
 8008870:	429c      	cmp	r4, r3
 8008872:	d10f      	bne.n	8008894 <__swsetup_r+0x3c>
 8008874:	686c      	ldr	r4, [r5, #4]
 8008876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887a:	b29a      	uxth	r2, r3
 800887c:	0715      	lsls	r5, r2, #28
 800887e:	d42c      	bmi.n	80088da <__swsetup_r+0x82>
 8008880:	06d0      	lsls	r0, r2, #27
 8008882:	d411      	bmi.n	80088a8 <__swsetup_r+0x50>
 8008884:	2209      	movs	r2, #9
 8008886:	6032      	str	r2, [r6, #0]
 8008888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	f04f 30ff 	mov.w	r0, #4294967295
 8008892:	e03e      	b.n	8008912 <__swsetup_r+0xba>
 8008894:	4b25      	ldr	r3, [pc, #148]	; (800892c <__swsetup_r+0xd4>)
 8008896:	429c      	cmp	r4, r3
 8008898:	d101      	bne.n	800889e <__swsetup_r+0x46>
 800889a:	68ac      	ldr	r4, [r5, #8]
 800889c:	e7eb      	b.n	8008876 <__swsetup_r+0x1e>
 800889e:	4b24      	ldr	r3, [pc, #144]	; (8008930 <__swsetup_r+0xd8>)
 80088a0:	429c      	cmp	r4, r3
 80088a2:	bf08      	it	eq
 80088a4:	68ec      	ldreq	r4, [r5, #12]
 80088a6:	e7e6      	b.n	8008876 <__swsetup_r+0x1e>
 80088a8:	0751      	lsls	r1, r2, #29
 80088aa:	d512      	bpl.n	80088d2 <__swsetup_r+0x7a>
 80088ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ae:	b141      	cbz	r1, 80088c2 <__swsetup_r+0x6a>
 80088b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088b4:	4299      	cmp	r1, r3
 80088b6:	d002      	beq.n	80088be <__swsetup_r+0x66>
 80088b8:	4630      	mov	r0, r6
 80088ba:	f001 ffcb 	bl	800a854 <_free_r>
 80088be:	2300      	movs	r3, #0
 80088c0:	6363      	str	r3, [r4, #52]	; 0x34
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	2300      	movs	r3, #0
 80088cc:	6063      	str	r3, [r4, #4]
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f043 0308 	orr.w	r3, r3, #8
 80088d8:	81a3      	strh	r3, [r4, #12]
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	b94b      	cbnz	r3, 80088f2 <__swsetup_r+0x9a>
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088e8:	d003      	beq.n	80088f2 <__swsetup_r+0x9a>
 80088ea:	4621      	mov	r1, r4
 80088ec:	4630      	mov	r0, r6
 80088ee:	f001 fb3f 	bl	8009f70 <__smakebuf_r>
 80088f2:	89a2      	ldrh	r2, [r4, #12]
 80088f4:	f012 0301 	ands.w	r3, r2, #1
 80088f8:	d00c      	beq.n	8008914 <__swsetup_r+0xbc>
 80088fa:	2300      	movs	r3, #0
 80088fc:	60a3      	str	r3, [r4, #8]
 80088fe:	6963      	ldr	r3, [r4, #20]
 8008900:	425b      	negs	r3, r3
 8008902:	61a3      	str	r3, [r4, #24]
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	b953      	cbnz	r3, 800891e <__swsetup_r+0xc6>
 8008908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008910:	d1ba      	bne.n	8008888 <__swsetup_r+0x30>
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	0792      	lsls	r2, r2, #30
 8008916:	bf58      	it	pl
 8008918:	6963      	ldrpl	r3, [r4, #20]
 800891a:	60a3      	str	r3, [r4, #8]
 800891c:	e7f2      	b.n	8008904 <__swsetup_r+0xac>
 800891e:	2000      	movs	r0, #0
 8008920:	e7f7      	b.n	8008912 <__swsetup_r+0xba>
 8008922:	bf00      	nop
 8008924:	2000000c 	.word	0x2000000c
 8008928:	0800b3d0 	.word	0x0800b3d0
 800892c:	0800b3f0 	.word	0x0800b3f0
 8008930:	0800b3b0 	.word	0x0800b3b0

08008934 <quorem>:
 8008934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	6903      	ldr	r3, [r0, #16]
 800893a:	690c      	ldr	r4, [r1, #16]
 800893c:	42a3      	cmp	r3, r4
 800893e:	4680      	mov	r8, r0
 8008940:	f2c0 8082 	blt.w	8008a48 <quorem+0x114>
 8008944:	3c01      	subs	r4, #1
 8008946:	f101 0714 	add.w	r7, r1, #20
 800894a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800894e:	f100 0614 	add.w	r6, r0, #20
 8008952:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008956:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800895a:	eb06 030c 	add.w	r3, r6, ip
 800895e:	3501      	adds	r5, #1
 8008960:	eb07 090c 	add.w	r9, r7, ip
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	fbb0 f5f5 	udiv	r5, r0, r5
 800896a:	b395      	cbz	r5, 80089d2 <quorem+0x9e>
 800896c:	f04f 0a00 	mov.w	sl, #0
 8008970:	4638      	mov	r0, r7
 8008972:	46b6      	mov	lr, r6
 8008974:	46d3      	mov	fp, sl
 8008976:	f850 2b04 	ldr.w	r2, [r0], #4
 800897a:	b293      	uxth	r3, r2
 800897c:	fb05 a303 	mla	r3, r5, r3, sl
 8008980:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008984:	b29b      	uxth	r3, r3
 8008986:	ebab 0303 	sub.w	r3, fp, r3
 800898a:	0c12      	lsrs	r2, r2, #16
 800898c:	f8de b000 	ldr.w	fp, [lr]
 8008990:	fb05 a202 	mla	r2, r5, r2, sl
 8008994:	fa13 f38b 	uxtah	r3, r3, fp
 8008998:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800899c:	fa1f fb82 	uxth.w	fp, r2
 80089a0:	f8de 2000 	ldr.w	r2, [lr]
 80089a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80089a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089b2:	4581      	cmp	r9, r0
 80089b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80089b8:	f84e 3b04 	str.w	r3, [lr], #4
 80089bc:	d2db      	bcs.n	8008976 <quorem+0x42>
 80089be:	f856 300c 	ldr.w	r3, [r6, ip]
 80089c2:	b933      	cbnz	r3, 80089d2 <quorem+0x9e>
 80089c4:	9b01      	ldr	r3, [sp, #4]
 80089c6:	3b04      	subs	r3, #4
 80089c8:	429e      	cmp	r6, r3
 80089ca:	461a      	mov	r2, r3
 80089cc:	d330      	bcc.n	8008a30 <quorem+0xfc>
 80089ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80089d2:	4640      	mov	r0, r8
 80089d4:	f001 fd84 	bl	800a4e0 <__mcmp>
 80089d8:	2800      	cmp	r0, #0
 80089da:	db25      	blt.n	8008a28 <quorem+0xf4>
 80089dc:	3501      	adds	r5, #1
 80089de:	4630      	mov	r0, r6
 80089e0:	f04f 0c00 	mov.w	ip, #0
 80089e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80089e8:	f8d0 e000 	ldr.w	lr, [r0]
 80089ec:	b293      	uxth	r3, r2
 80089ee:	ebac 0303 	sub.w	r3, ip, r3
 80089f2:	0c12      	lsrs	r2, r2, #16
 80089f4:	fa13 f38e 	uxtah	r3, r3, lr
 80089f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a06:	45b9      	cmp	r9, r7
 8008a08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a0c:	f840 3b04 	str.w	r3, [r0], #4
 8008a10:	d2e8      	bcs.n	80089e4 <quorem+0xb0>
 8008a12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008a16:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008a1a:	b92a      	cbnz	r2, 8008a28 <quorem+0xf4>
 8008a1c:	3b04      	subs	r3, #4
 8008a1e:	429e      	cmp	r6, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	d30b      	bcc.n	8008a3c <quorem+0x108>
 8008a24:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a28:	4628      	mov	r0, r5
 8008a2a:	b003      	add	sp, #12
 8008a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	3b04      	subs	r3, #4
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	d1ca      	bne.n	80089ce <quorem+0x9a>
 8008a38:	3c01      	subs	r4, #1
 8008a3a:	e7c5      	b.n	80089c8 <quorem+0x94>
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	3b04      	subs	r3, #4
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	d1ef      	bne.n	8008a24 <quorem+0xf0>
 8008a44:	3c01      	subs	r4, #1
 8008a46:	e7ea      	b.n	8008a1e <quorem+0xea>
 8008a48:	2000      	movs	r0, #0
 8008a4a:	e7ee      	b.n	8008a2a <quorem+0xf6>
 8008a4c:	0000      	movs	r0, r0
	...

08008a50 <_dtoa_r>:
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	ec57 6b10 	vmov	r6, r7, d0
 8008a58:	b097      	sub	sp, #92	; 0x5c
 8008a5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a5c:	9106      	str	r1, [sp, #24]
 8008a5e:	4604      	mov	r4, r0
 8008a60:	920b      	str	r2, [sp, #44]	; 0x2c
 8008a62:	9312      	str	r3, [sp, #72]	; 0x48
 8008a64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a68:	e9cd 6700 	strd	r6, r7, [sp]
 8008a6c:	b93d      	cbnz	r5, 8008a7e <_dtoa_r+0x2e>
 8008a6e:	2010      	movs	r0, #16
 8008a70:	f001 fabe 	bl	8009ff0 <malloc>
 8008a74:	6260      	str	r0, [r4, #36]	; 0x24
 8008a76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a7a:	6005      	str	r5, [r0, #0]
 8008a7c:	60c5      	str	r5, [r0, #12]
 8008a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a80:	6819      	ldr	r1, [r3, #0]
 8008a82:	b151      	cbz	r1, 8008a9a <_dtoa_r+0x4a>
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	604a      	str	r2, [r1, #4]
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4093      	lsls	r3, r2
 8008a8c:	608b      	str	r3, [r1, #8]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f001 fb07 	bl	800a0a2 <_Bfree>
 8008a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	1e3b      	subs	r3, r7, #0
 8008a9c:	bfbb      	ittet	lt
 8008a9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008aa2:	9301      	strlt	r3, [sp, #4]
 8008aa4:	2300      	movge	r3, #0
 8008aa6:	2201      	movlt	r2, #1
 8008aa8:	bfac      	ite	ge
 8008aaa:	f8c8 3000 	strge.w	r3, [r8]
 8008aae:	f8c8 2000 	strlt.w	r2, [r8]
 8008ab2:	4baf      	ldr	r3, [pc, #700]	; (8008d70 <_dtoa_r+0x320>)
 8008ab4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ab8:	ea33 0308 	bics.w	r3, r3, r8
 8008abc:	d114      	bne.n	8008ae8 <_dtoa_r+0x98>
 8008abe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ac0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	9b00      	ldr	r3, [sp, #0]
 8008ac8:	b923      	cbnz	r3, 8008ad4 <_dtoa_r+0x84>
 8008aca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f000 8542 	beq.w	8009558 <_dtoa_r+0xb08>
 8008ad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008d84 <_dtoa_r+0x334>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 8544 	beq.w	8009568 <_dtoa_r+0xb18>
 8008ae0:	f10b 0303 	add.w	r3, fp, #3
 8008ae4:	f000 bd3e 	b.w	8009564 <_dtoa_r+0xb14>
 8008ae8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008aec:	2200      	movs	r2, #0
 8008aee:	2300      	movs	r3, #0
 8008af0:	4630      	mov	r0, r6
 8008af2:	4639      	mov	r1, r7
 8008af4:	f7f7 ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008af8:	4681      	mov	r9, r0
 8008afa:	b168      	cbz	r0, 8008b18 <_dtoa_r+0xc8>
 8008afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008afe:	2301      	movs	r3, #1
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 8524 	beq.w	8009552 <_dtoa_r+0xb02>
 8008b0a:	4b9a      	ldr	r3, [pc, #616]	; (8008d74 <_dtoa_r+0x324>)
 8008b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b0e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	f000 bd28 	b.w	8009568 <_dtoa_r+0xb18>
 8008b18:	aa14      	add	r2, sp, #80	; 0x50
 8008b1a:	a915      	add	r1, sp, #84	; 0x54
 8008b1c:	ec47 6b10 	vmov	d0, r6, r7
 8008b20:	4620      	mov	r0, r4
 8008b22:	f001 fdcb 	bl	800a6bc <__d2b>
 8008b26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b2a:	9004      	str	r0, [sp, #16]
 8008b2c:	2d00      	cmp	r5, #0
 8008b2e:	d07c      	beq.n	8008c2a <_dtoa_r+0x1da>
 8008b30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008b38:	46b2      	mov	sl, r6
 8008b3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008b3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008b46:	2200      	movs	r2, #0
 8008b48:	4b8b      	ldr	r3, [pc, #556]	; (8008d78 <_dtoa_r+0x328>)
 8008b4a:	4650      	mov	r0, sl
 8008b4c:	4659      	mov	r1, fp
 8008b4e:	f7f7 fb9b 	bl	8000288 <__aeabi_dsub>
 8008b52:	a381      	add	r3, pc, #516	; (adr r3, 8008d58 <_dtoa_r+0x308>)
 8008b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b58:	f7f7 fd4e 	bl	80005f8 <__aeabi_dmul>
 8008b5c:	a380      	add	r3, pc, #512	; (adr r3, 8008d60 <_dtoa_r+0x310>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	f7f7 fb93 	bl	800028c <__adddf3>
 8008b66:	4606      	mov	r6, r0
 8008b68:	4628      	mov	r0, r5
 8008b6a:	460f      	mov	r7, r1
 8008b6c:	f7f7 fcda 	bl	8000524 <__aeabi_i2d>
 8008b70:	a37d      	add	r3, pc, #500	; (adr r3, 8008d68 <_dtoa_r+0x318>)
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	f7f7 fd3f 	bl	80005f8 <__aeabi_dmul>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4630      	mov	r0, r6
 8008b80:	4639      	mov	r1, r7
 8008b82:	f7f7 fb83 	bl	800028c <__adddf3>
 8008b86:	4606      	mov	r6, r0
 8008b88:	460f      	mov	r7, r1
 8008b8a:	f7f7 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8008b8e:	2200      	movs	r2, #0
 8008b90:	4682      	mov	sl, r0
 8008b92:	2300      	movs	r3, #0
 8008b94:	4630      	mov	r0, r6
 8008b96:	4639      	mov	r1, r7
 8008b98:	f7f7 ffa0 	bl	8000adc <__aeabi_dcmplt>
 8008b9c:	b148      	cbz	r0, 8008bb2 <_dtoa_r+0x162>
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	f7f7 fcc0 	bl	8000524 <__aeabi_i2d>
 8008ba4:	4632      	mov	r2, r6
 8008ba6:	463b      	mov	r3, r7
 8008ba8:	f7f7 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bac:	b908      	cbnz	r0, 8008bb2 <_dtoa_r+0x162>
 8008bae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bb2:	f1ba 0f16 	cmp.w	sl, #22
 8008bb6:	d859      	bhi.n	8008c6c <_dtoa_r+0x21c>
 8008bb8:	4970      	ldr	r1, [pc, #448]	; (8008d7c <_dtoa_r+0x32c>)
 8008bba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bc6:	f7f7 ffa7 	bl	8000b18 <__aeabi_dcmpgt>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d050      	beq.n	8008c70 <_dtoa_r+0x220>
 8008bce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bd8:	1b5d      	subs	r5, r3, r5
 8008bda:	f1b5 0801 	subs.w	r8, r5, #1
 8008bde:	bf49      	itett	mi
 8008be0:	f1c5 0301 	rsbmi	r3, r5, #1
 8008be4:	2300      	movpl	r3, #0
 8008be6:	9305      	strmi	r3, [sp, #20]
 8008be8:	f04f 0800 	movmi.w	r8, #0
 8008bec:	bf58      	it	pl
 8008bee:	9305      	strpl	r3, [sp, #20]
 8008bf0:	f1ba 0f00 	cmp.w	sl, #0
 8008bf4:	db3e      	blt.n	8008c74 <_dtoa_r+0x224>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	44d0      	add	r8, sl
 8008bfa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008bfe:	9307      	str	r3, [sp, #28]
 8008c00:	9b06      	ldr	r3, [sp, #24]
 8008c02:	2b09      	cmp	r3, #9
 8008c04:	f200 8090 	bhi.w	8008d28 <_dtoa_r+0x2d8>
 8008c08:	2b05      	cmp	r3, #5
 8008c0a:	bfc4      	itt	gt
 8008c0c:	3b04      	subgt	r3, #4
 8008c0e:	9306      	strgt	r3, [sp, #24]
 8008c10:	9b06      	ldr	r3, [sp, #24]
 8008c12:	f1a3 0302 	sub.w	r3, r3, #2
 8008c16:	bfcc      	ite	gt
 8008c18:	2500      	movgt	r5, #0
 8008c1a:	2501      	movle	r5, #1
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	f200 808f 	bhi.w	8008d40 <_dtoa_r+0x2f0>
 8008c22:	e8df f003 	tbb	[pc, r3]
 8008c26:	7f7d      	.short	0x7f7d
 8008c28:	7131      	.short	0x7131
 8008c2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008c2e:	441d      	add	r5, r3
 8008c30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008c34:	2820      	cmp	r0, #32
 8008c36:	dd13      	ble.n	8008c60 <_dtoa_r+0x210>
 8008c38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008c3c:	9b00      	ldr	r3, [sp, #0]
 8008c3e:	fa08 f800 	lsl.w	r8, r8, r0
 8008c42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008c46:	fa23 f000 	lsr.w	r0, r3, r0
 8008c4a:	ea48 0000 	orr.w	r0, r8, r0
 8008c4e:	f7f7 fc59 	bl	8000504 <__aeabi_ui2d>
 8008c52:	2301      	movs	r3, #1
 8008c54:	4682      	mov	sl, r0
 8008c56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008c5a:	3d01      	subs	r5, #1
 8008c5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c5e:	e772      	b.n	8008b46 <_dtoa_r+0xf6>
 8008c60:	9b00      	ldr	r3, [sp, #0]
 8008c62:	f1c0 0020 	rsb	r0, r0, #32
 8008c66:	fa03 f000 	lsl.w	r0, r3, r0
 8008c6a:	e7f0      	b.n	8008c4e <_dtoa_r+0x1fe>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e7b1      	b.n	8008bd4 <_dtoa_r+0x184>
 8008c70:	900f      	str	r0, [sp, #60]	; 0x3c
 8008c72:	e7b0      	b.n	8008bd6 <_dtoa_r+0x186>
 8008c74:	9b05      	ldr	r3, [sp, #20]
 8008c76:	eba3 030a 	sub.w	r3, r3, sl
 8008c7a:	9305      	str	r3, [sp, #20]
 8008c7c:	f1ca 0300 	rsb	r3, sl, #0
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	2300      	movs	r3, #0
 8008c84:	930e      	str	r3, [sp, #56]	; 0x38
 8008c86:	e7bb      	b.n	8008c00 <_dtoa_r+0x1b0>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	dd59      	ble.n	8008d46 <_dtoa_r+0x2f6>
 8008c92:	9302      	str	r3, [sp, #8]
 8008c94:	4699      	mov	r9, r3
 8008c96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c98:	2200      	movs	r2, #0
 8008c9a:	6072      	str	r2, [r6, #4]
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	f102 0014 	add.w	r0, r2, #20
 8008ca2:	4298      	cmp	r0, r3
 8008ca4:	6871      	ldr	r1, [r6, #4]
 8008ca6:	d953      	bls.n	8008d50 <_dtoa_r+0x300>
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f001 f9c6 	bl	800a03a <_Balloc>
 8008cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb0:	6030      	str	r0, [r6, #0]
 8008cb2:	f1b9 0f0e 	cmp.w	r9, #14
 8008cb6:	f8d3 b000 	ldr.w	fp, [r3]
 8008cba:	f200 80e6 	bhi.w	8008e8a <_dtoa_r+0x43a>
 8008cbe:	2d00      	cmp	r5, #0
 8008cc0:	f000 80e3 	beq.w	8008e8a <_dtoa_r+0x43a>
 8008cc4:	ed9d 7b00 	vldr	d7, [sp]
 8008cc8:	f1ba 0f00 	cmp.w	sl, #0
 8008ccc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008cd0:	dd74      	ble.n	8008dbc <_dtoa_r+0x36c>
 8008cd2:	4a2a      	ldr	r2, [pc, #168]	; (8008d7c <_dtoa_r+0x32c>)
 8008cd4:	f00a 030f 	and.w	r3, sl, #15
 8008cd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cdc:	ed93 7b00 	vldr	d7, [r3]
 8008ce0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008ce4:	06f0      	lsls	r0, r6, #27
 8008ce6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008cea:	d565      	bpl.n	8008db8 <_dtoa_r+0x368>
 8008cec:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <_dtoa_r+0x330>)
 8008cee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cf6:	f7f7 fda9 	bl	800084c <__aeabi_ddiv>
 8008cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8008cfe:	f006 060f 	and.w	r6, r6, #15
 8008d02:	2503      	movs	r5, #3
 8008d04:	4f1e      	ldr	r7, [pc, #120]	; (8008d80 <_dtoa_r+0x330>)
 8008d06:	e04c      	b.n	8008da2 <_dtoa_r+0x352>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d0e:	4453      	add	r3, sl
 8008d10:	f103 0901 	add.w	r9, r3, #1
 8008d14:	9302      	str	r3, [sp, #8]
 8008d16:	464b      	mov	r3, r9
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	bfb8      	it	lt
 8008d1c:	2301      	movlt	r3, #1
 8008d1e:	e7ba      	b.n	8008c96 <_dtoa_r+0x246>
 8008d20:	2300      	movs	r3, #0
 8008d22:	e7b2      	b.n	8008c8a <_dtoa_r+0x23a>
 8008d24:	2300      	movs	r3, #0
 8008d26:	e7f0      	b.n	8008d0a <_dtoa_r+0x2ba>
 8008d28:	2501      	movs	r5, #1
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9306      	str	r3, [sp, #24]
 8008d2e:	950a      	str	r5, [sp, #40]	; 0x28
 8008d30:	f04f 33ff 	mov.w	r3, #4294967295
 8008d34:	9302      	str	r3, [sp, #8]
 8008d36:	4699      	mov	r9, r3
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2312      	movs	r3, #18
 8008d3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d3e:	e7aa      	b.n	8008c96 <_dtoa_r+0x246>
 8008d40:	2301      	movs	r3, #1
 8008d42:	930a      	str	r3, [sp, #40]	; 0x28
 8008d44:	e7f4      	b.n	8008d30 <_dtoa_r+0x2e0>
 8008d46:	2301      	movs	r3, #1
 8008d48:	9302      	str	r3, [sp, #8]
 8008d4a:	4699      	mov	r9, r3
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	e7f5      	b.n	8008d3c <_dtoa_r+0x2ec>
 8008d50:	3101      	adds	r1, #1
 8008d52:	6071      	str	r1, [r6, #4]
 8008d54:	0052      	lsls	r2, r2, #1
 8008d56:	e7a2      	b.n	8008c9e <_dtoa_r+0x24e>
 8008d58:	636f4361 	.word	0x636f4361
 8008d5c:	3fd287a7 	.word	0x3fd287a7
 8008d60:	8b60c8b3 	.word	0x8b60c8b3
 8008d64:	3fc68a28 	.word	0x3fc68a28
 8008d68:	509f79fb 	.word	0x509f79fb
 8008d6c:	3fd34413 	.word	0x3fd34413
 8008d70:	7ff00000 	.word	0x7ff00000
 8008d74:	0800b321 	.word	0x0800b321
 8008d78:	3ff80000 	.word	0x3ff80000
 8008d7c:	0800b448 	.word	0x0800b448
 8008d80:	0800b420 	.word	0x0800b420
 8008d84:	0800b3a9 	.word	0x0800b3a9
 8008d88:	07f1      	lsls	r1, r6, #31
 8008d8a:	d508      	bpl.n	8008d9e <_dtoa_r+0x34e>
 8008d8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d94:	f7f7 fc30 	bl	80005f8 <__aeabi_dmul>
 8008d98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	1076      	asrs	r6, r6, #1
 8008da0:	3708      	adds	r7, #8
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	d1f0      	bne.n	8008d88 <_dtoa_r+0x338>
 8008da6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dae:	f7f7 fd4d 	bl	800084c <__aeabi_ddiv>
 8008db2:	e9cd 0100 	strd	r0, r1, [sp]
 8008db6:	e01a      	b.n	8008dee <_dtoa_r+0x39e>
 8008db8:	2502      	movs	r5, #2
 8008dba:	e7a3      	b.n	8008d04 <_dtoa_r+0x2b4>
 8008dbc:	f000 80a0 	beq.w	8008f00 <_dtoa_r+0x4b0>
 8008dc0:	f1ca 0600 	rsb	r6, sl, #0
 8008dc4:	4b9f      	ldr	r3, [pc, #636]	; (8009044 <_dtoa_r+0x5f4>)
 8008dc6:	4fa0      	ldr	r7, [pc, #640]	; (8009048 <_dtoa_r+0x5f8>)
 8008dc8:	f006 020f 	and.w	r2, r6, #15
 8008dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008dd8:	f7f7 fc0e 	bl	80005f8 <__aeabi_dmul>
 8008ddc:	e9cd 0100 	strd	r0, r1, [sp]
 8008de0:	1136      	asrs	r6, r6, #4
 8008de2:	2300      	movs	r3, #0
 8008de4:	2502      	movs	r5, #2
 8008de6:	2e00      	cmp	r6, #0
 8008de8:	d17f      	bne.n	8008eea <_dtoa_r+0x49a>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e1      	bne.n	8008db2 <_dtoa_r+0x362>
 8008dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 8087 	beq.w	8008f04 <_dtoa_r+0x4b4>
 8008df6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4b93      	ldr	r3, [pc, #588]	; (800904c <_dtoa_r+0x5fc>)
 8008dfe:	4630      	mov	r0, r6
 8008e00:	4639      	mov	r1, r7
 8008e02:	f7f7 fe6b 	bl	8000adc <__aeabi_dcmplt>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d07c      	beq.n	8008f04 <_dtoa_r+0x4b4>
 8008e0a:	f1b9 0f00 	cmp.w	r9, #0
 8008e0e:	d079      	beq.n	8008f04 <_dtoa_r+0x4b4>
 8008e10:	9b02      	ldr	r3, [sp, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dd35      	ble.n	8008e82 <_dtoa_r+0x432>
 8008e16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008e1a:	9308      	str	r3, [sp, #32]
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	2200      	movs	r2, #0
 8008e20:	4b8b      	ldr	r3, [pc, #556]	; (8009050 <_dtoa_r+0x600>)
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7f7 fbe8 	bl	80005f8 <__aeabi_dmul>
 8008e28:	e9cd 0100 	strd	r0, r1, [sp]
 8008e2c:	9f02      	ldr	r7, [sp, #8]
 8008e2e:	3501      	adds	r5, #1
 8008e30:	4628      	mov	r0, r5
 8008e32:	f7f7 fb77 	bl	8000524 <__aeabi_i2d>
 8008e36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e3a:	f7f7 fbdd 	bl	80005f8 <__aeabi_dmul>
 8008e3e:	2200      	movs	r2, #0
 8008e40:	4b84      	ldr	r3, [pc, #528]	; (8009054 <_dtoa_r+0x604>)
 8008e42:	f7f7 fa23 	bl	800028c <__adddf3>
 8008e46:	4605      	mov	r5, r0
 8008e48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008e4c:	2f00      	cmp	r7, #0
 8008e4e:	d15d      	bne.n	8008f0c <_dtoa_r+0x4bc>
 8008e50:	2200      	movs	r2, #0
 8008e52:	4b81      	ldr	r3, [pc, #516]	; (8009058 <_dtoa_r+0x608>)
 8008e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e58:	f7f7 fa16 	bl	8000288 <__aeabi_dsub>
 8008e5c:	462a      	mov	r2, r5
 8008e5e:	4633      	mov	r3, r6
 8008e60:	e9cd 0100 	strd	r0, r1, [sp]
 8008e64:	f7f7 fe58 	bl	8000b18 <__aeabi_dcmpgt>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	f040 8288 	bne.w	800937e <_dtoa_r+0x92e>
 8008e6e:	462a      	mov	r2, r5
 8008e70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e78:	f7f7 fe30 	bl	8000adc <__aeabi_dcmplt>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f040 827c 	bne.w	800937a <_dtoa_r+0x92a>
 8008e82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e86:	e9cd 2300 	strd	r2, r3, [sp]
 8008e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f2c0 8150 	blt.w	8009132 <_dtoa_r+0x6e2>
 8008e92:	f1ba 0f0e 	cmp.w	sl, #14
 8008e96:	f300 814c 	bgt.w	8009132 <_dtoa_r+0x6e2>
 8008e9a:	4b6a      	ldr	r3, [pc, #424]	; (8009044 <_dtoa_r+0x5f4>)
 8008e9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ea0:	ed93 7b00 	vldr	d7, [r3]
 8008ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008eac:	f280 80d8 	bge.w	8009060 <_dtoa_r+0x610>
 8008eb0:	f1b9 0f00 	cmp.w	r9, #0
 8008eb4:	f300 80d4 	bgt.w	8009060 <_dtoa_r+0x610>
 8008eb8:	f040 825e 	bne.w	8009378 <_dtoa_r+0x928>
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	4b66      	ldr	r3, [pc, #408]	; (8009058 <_dtoa_r+0x608>)
 8008ec0:	ec51 0b17 	vmov	r0, r1, d7
 8008ec4:	f7f7 fb98 	bl	80005f8 <__aeabi_dmul>
 8008ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ecc:	f7f7 fe1a 	bl	8000b04 <__aeabi_dcmpge>
 8008ed0:	464f      	mov	r7, r9
 8008ed2:	464e      	mov	r6, r9
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f040 8234 	bne.w	8009342 <_dtoa_r+0x8f2>
 8008eda:	2331      	movs	r3, #49	; 0x31
 8008edc:	f10b 0501 	add.w	r5, fp, #1
 8008ee0:	f88b 3000 	strb.w	r3, [fp]
 8008ee4:	f10a 0a01 	add.w	sl, sl, #1
 8008ee8:	e22f      	b.n	800934a <_dtoa_r+0x8fa>
 8008eea:	07f2      	lsls	r2, r6, #31
 8008eec:	d505      	bpl.n	8008efa <_dtoa_r+0x4aa>
 8008eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef2:	f7f7 fb81 	bl	80005f8 <__aeabi_dmul>
 8008ef6:	3501      	adds	r5, #1
 8008ef8:	2301      	movs	r3, #1
 8008efa:	1076      	asrs	r6, r6, #1
 8008efc:	3708      	adds	r7, #8
 8008efe:	e772      	b.n	8008de6 <_dtoa_r+0x396>
 8008f00:	2502      	movs	r5, #2
 8008f02:	e774      	b.n	8008dee <_dtoa_r+0x39e>
 8008f04:	f8cd a020 	str.w	sl, [sp, #32]
 8008f08:	464f      	mov	r7, r9
 8008f0a:	e791      	b.n	8008e30 <_dtoa_r+0x3e0>
 8008f0c:	4b4d      	ldr	r3, [pc, #308]	; (8009044 <_dtoa_r+0x5f4>)
 8008f0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d047      	beq.n	8008fac <_dtoa_r+0x55c>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	2000      	movs	r0, #0
 8008f22:	494e      	ldr	r1, [pc, #312]	; (800905c <_dtoa_r+0x60c>)
 8008f24:	f7f7 fc92 	bl	800084c <__aeabi_ddiv>
 8008f28:	462a      	mov	r2, r5
 8008f2a:	4633      	mov	r3, r6
 8008f2c:	f7f7 f9ac 	bl	8000288 <__aeabi_dsub>
 8008f30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f34:	465d      	mov	r5, fp
 8008f36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f3a:	f7f7 fe0d 	bl	8000b58 <__aeabi_d2iz>
 8008f3e:	4606      	mov	r6, r0
 8008f40:	f7f7 faf0 	bl	8000524 <__aeabi_i2d>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f4c:	f7f7 f99c 	bl	8000288 <__aeabi_dsub>
 8008f50:	3630      	adds	r6, #48	; 0x30
 8008f52:	f805 6b01 	strb.w	r6, [r5], #1
 8008f56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f5e:	f7f7 fdbd 	bl	8000adc <__aeabi_dcmplt>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d163      	bne.n	800902e <_dtoa_r+0x5de>
 8008f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	4937      	ldr	r1, [pc, #220]	; (800904c <_dtoa_r+0x5fc>)
 8008f6e:	f7f7 f98b 	bl	8000288 <__aeabi_dsub>
 8008f72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f76:	f7f7 fdb1 	bl	8000adc <__aeabi_dcmplt>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f040 80b7 	bne.w	80090ee <_dtoa_r+0x69e>
 8008f80:	eba5 030b 	sub.w	r3, r5, fp
 8008f84:	429f      	cmp	r7, r3
 8008f86:	f77f af7c 	ble.w	8008e82 <_dtoa_r+0x432>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	4b30      	ldr	r3, [pc, #192]	; (8009050 <_dtoa_r+0x600>)
 8008f8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f92:	f7f7 fb31 	bl	80005f8 <__aeabi_dmul>
 8008f96:	2200      	movs	r2, #0
 8008f98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f9c:	4b2c      	ldr	r3, [pc, #176]	; (8009050 <_dtoa_r+0x600>)
 8008f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fa2:	f7f7 fb29 	bl	80005f8 <__aeabi_dmul>
 8008fa6:	e9cd 0100 	strd	r0, r1, [sp]
 8008faa:	e7c4      	b.n	8008f36 <_dtoa_r+0x4e6>
 8008fac:	462a      	mov	r2, r5
 8008fae:	4633      	mov	r3, r6
 8008fb0:	f7f7 fb22 	bl	80005f8 <__aeabi_dmul>
 8008fb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008fb8:	eb0b 0507 	add.w	r5, fp, r7
 8008fbc:	465e      	mov	r6, fp
 8008fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fc2:	f7f7 fdc9 	bl	8000b58 <__aeabi_d2iz>
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	f7f7 faac 	bl	8000524 <__aeabi_i2d>
 8008fcc:	3730      	adds	r7, #48	; 0x30
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fd6:	f7f7 f957 	bl	8000288 <__aeabi_dsub>
 8008fda:	f806 7b01 	strb.w	r7, [r6], #1
 8008fde:	42ae      	cmp	r6, r5
 8008fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	d126      	bne.n	8009038 <_dtoa_r+0x5e8>
 8008fea:	4b1c      	ldr	r3, [pc, #112]	; (800905c <_dtoa_r+0x60c>)
 8008fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ff0:	f7f7 f94c 	bl	800028c <__adddf3>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ffc:	f7f7 fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 8009000:	2800      	cmp	r0, #0
 8009002:	d174      	bne.n	80090ee <_dtoa_r+0x69e>
 8009004:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009008:	2000      	movs	r0, #0
 800900a:	4914      	ldr	r1, [pc, #80]	; (800905c <_dtoa_r+0x60c>)
 800900c:	f7f7 f93c 	bl	8000288 <__aeabi_dsub>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009018:	f7f7 fd60 	bl	8000adc <__aeabi_dcmplt>
 800901c:	2800      	cmp	r0, #0
 800901e:	f43f af30 	beq.w	8008e82 <_dtoa_r+0x432>
 8009022:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009026:	2b30      	cmp	r3, #48	; 0x30
 8009028:	f105 32ff 	add.w	r2, r5, #4294967295
 800902c:	d002      	beq.n	8009034 <_dtoa_r+0x5e4>
 800902e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009032:	e04a      	b.n	80090ca <_dtoa_r+0x67a>
 8009034:	4615      	mov	r5, r2
 8009036:	e7f4      	b.n	8009022 <_dtoa_r+0x5d2>
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <_dtoa_r+0x600>)
 800903a:	f7f7 fadd 	bl	80005f8 <__aeabi_dmul>
 800903e:	e9cd 0100 	strd	r0, r1, [sp]
 8009042:	e7bc      	b.n	8008fbe <_dtoa_r+0x56e>
 8009044:	0800b448 	.word	0x0800b448
 8009048:	0800b420 	.word	0x0800b420
 800904c:	3ff00000 	.word	0x3ff00000
 8009050:	40240000 	.word	0x40240000
 8009054:	401c0000 	.word	0x401c0000
 8009058:	40140000 	.word	0x40140000
 800905c:	3fe00000 	.word	0x3fe00000
 8009060:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009064:	465d      	mov	r5, fp
 8009066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800906a:	4630      	mov	r0, r6
 800906c:	4639      	mov	r1, r7
 800906e:	f7f7 fbed 	bl	800084c <__aeabi_ddiv>
 8009072:	f7f7 fd71 	bl	8000b58 <__aeabi_d2iz>
 8009076:	4680      	mov	r8, r0
 8009078:	f7f7 fa54 	bl	8000524 <__aeabi_i2d>
 800907c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009080:	f7f7 faba 	bl	80005f8 <__aeabi_dmul>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4630      	mov	r0, r6
 800908a:	4639      	mov	r1, r7
 800908c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009090:	f7f7 f8fa 	bl	8000288 <__aeabi_dsub>
 8009094:	f805 6b01 	strb.w	r6, [r5], #1
 8009098:	eba5 060b 	sub.w	r6, r5, fp
 800909c:	45b1      	cmp	r9, r6
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	d139      	bne.n	8009118 <_dtoa_r+0x6c8>
 80090a4:	f7f7 f8f2 	bl	800028c <__adddf3>
 80090a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	f7f7 fd32 	bl	8000b18 <__aeabi_dcmpgt>
 80090b4:	b9c8      	cbnz	r0, 80090ea <_dtoa_r+0x69a>
 80090b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 80090c2:	b110      	cbz	r0, 80090ca <_dtoa_r+0x67a>
 80090c4:	f018 0f01 	tst.w	r8, #1
 80090c8:	d10f      	bne.n	80090ea <_dtoa_r+0x69a>
 80090ca:	9904      	ldr	r1, [sp, #16]
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 ffe8 	bl	800a0a2 <_Bfree>
 80090d2:	2300      	movs	r3, #0
 80090d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090d6:	702b      	strb	r3, [r5, #0]
 80090d8:	f10a 0301 	add.w	r3, sl, #1
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 8241 	beq.w	8009568 <_dtoa_r+0xb18>
 80090e6:	601d      	str	r5, [r3, #0]
 80090e8:	e23e      	b.n	8009568 <_dtoa_r+0xb18>
 80090ea:	f8cd a020 	str.w	sl, [sp, #32]
 80090ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090f2:	2a39      	cmp	r2, #57	; 0x39
 80090f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80090f8:	d108      	bne.n	800910c <_dtoa_r+0x6bc>
 80090fa:	459b      	cmp	fp, r3
 80090fc:	d10a      	bne.n	8009114 <_dtoa_r+0x6c4>
 80090fe:	9b08      	ldr	r3, [sp, #32]
 8009100:	3301      	adds	r3, #1
 8009102:	9308      	str	r3, [sp, #32]
 8009104:	2330      	movs	r3, #48	; 0x30
 8009106:	f88b 3000 	strb.w	r3, [fp]
 800910a:	465b      	mov	r3, fp
 800910c:	781a      	ldrb	r2, [r3, #0]
 800910e:	3201      	adds	r2, #1
 8009110:	701a      	strb	r2, [r3, #0]
 8009112:	e78c      	b.n	800902e <_dtoa_r+0x5de>
 8009114:	461d      	mov	r5, r3
 8009116:	e7ea      	b.n	80090ee <_dtoa_r+0x69e>
 8009118:	2200      	movs	r2, #0
 800911a:	4b9b      	ldr	r3, [pc, #620]	; (8009388 <_dtoa_r+0x938>)
 800911c:	f7f7 fa6c 	bl	80005f8 <__aeabi_dmul>
 8009120:	2200      	movs	r2, #0
 8009122:	2300      	movs	r3, #0
 8009124:	4606      	mov	r6, r0
 8009126:	460f      	mov	r7, r1
 8009128:	f7f7 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800912c:	2800      	cmp	r0, #0
 800912e:	d09a      	beq.n	8009066 <_dtoa_r+0x616>
 8009130:	e7cb      	b.n	80090ca <_dtoa_r+0x67a>
 8009132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009134:	2a00      	cmp	r2, #0
 8009136:	f000 808b 	beq.w	8009250 <_dtoa_r+0x800>
 800913a:	9a06      	ldr	r2, [sp, #24]
 800913c:	2a01      	cmp	r2, #1
 800913e:	dc6e      	bgt.n	800921e <_dtoa_r+0x7ce>
 8009140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009142:	2a00      	cmp	r2, #0
 8009144:	d067      	beq.n	8009216 <_dtoa_r+0x7c6>
 8009146:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800914a:	9f07      	ldr	r7, [sp, #28]
 800914c:	9d05      	ldr	r5, [sp, #20]
 800914e:	9a05      	ldr	r2, [sp, #20]
 8009150:	2101      	movs	r1, #1
 8009152:	441a      	add	r2, r3
 8009154:	4620      	mov	r0, r4
 8009156:	9205      	str	r2, [sp, #20]
 8009158:	4498      	add	r8, r3
 800915a:	f001 f880 	bl	800a25e <__i2b>
 800915e:	4606      	mov	r6, r0
 8009160:	2d00      	cmp	r5, #0
 8009162:	dd0c      	ble.n	800917e <_dtoa_r+0x72e>
 8009164:	f1b8 0f00 	cmp.w	r8, #0
 8009168:	dd09      	ble.n	800917e <_dtoa_r+0x72e>
 800916a:	4545      	cmp	r5, r8
 800916c:	9a05      	ldr	r2, [sp, #20]
 800916e:	462b      	mov	r3, r5
 8009170:	bfa8      	it	ge
 8009172:	4643      	movge	r3, r8
 8009174:	1ad2      	subs	r2, r2, r3
 8009176:	9205      	str	r2, [sp, #20]
 8009178:	1aed      	subs	r5, r5, r3
 800917a:	eba8 0803 	sub.w	r8, r8, r3
 800917e:	9b07      	ldr	r3, [sp, #28]
 8009180:	b1eb      	cbz	r3, 80091be <_dtoa_r+0x76e>
 8009182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	d067      	beq.n	8009258 <_dtoa_r+0x808>
 8009188:	b18f      	cbz	r7, 80091ae <_dtoa_r+0x75e>
 800918a:	4631      	mov	r1, r6
 800918c:	463a      	mov	r2, r7
 800918e:	4620      	mov	r0, r4
 8009190:	f001 f904 	bl	800a39c <__pow5mult>
 8009194:	9a04      	ldr	r2, [sp, #16]
 8009196:	4601      	mov	r1, r0
 8009198:	4606      	mov	r6, r0
 800919a:	4620      	mov	r0, r4
 800919c:	f001 f868 	bl	800a270 <__multiply>
 80091a0:	9904      	ldr	r1, [sp, #16]
 80091a2:	9008      	str	r0, [sp, #32]
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 ff7c 	bl	800a0a2 <_Bfree>
 80091aa:	9b08      	ldr	r3, [sp, #32]
 80091ac:	9304      	str	r3, [sp, #16]
 80091ae:	9b07      	ldr	r3, [sp, #28]
 80091b0:	1bda      	subs	r2, r3, r7
 80091b2:	d004      	beq.n	80091be <_dtoa_r+0x76e>
 80091b4:	9904      	ldr	r1, [sp, #16]
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 f8f0 	bl	800a39c <__pow5mult>
 80091bc:	9004      	str	r0, [sp, #16]
 80091be:	2101      	movs	r1, #1
 80091c0:	4620      	mov	r0, r4
 80091c2:	f001 f84c 	bl	800a25e <__i2b>
 80091c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091c8:	4607      	mov	r7, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 81d0 	beq.w	8009570 <_dtoa_r+0xb20>
 80091d0:	461a      	mov	r2, r3
 80091d2:	4601      	mov	r1, r0
 80091d4:	4620      	mov	r0, r4
 80091d6:	f001 f8e1 	bl	800a39c <__pow5mult>
 80091da:	9b06      	ldr	r3, [sp, #24]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	4607      	mov	r7, r0
 80091e0:	dc40      	bgt.n	8009264 <_dtoa_r+0x814>
 80091e2:	9b00      	ldr	r3, [sp, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d139      	bne.n	800925c <_dtoa_r+0x80c>
 80091e8:	9b01      	ldr	r3, [sp, #4]
 80091ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d136      	bne.n	8009260 <_dtoa_r+0x810>
 80091f2:	9b01      	ldr	r3, [sp, #4]
 80091f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091f8:	0d1b      	lsrs	r3, r3, #20
 80091fa:	051b      	lsls	r3, r3, #20
 80091fc:	b12b      	cbz	r3, 800920a <_dtoa_r+0x7ba>
 80091fe:	9b05      	ldr	r3, [sp, #20]
 8009200:	3301      	adds	r3, #1
 8009202:	9305      	str	r3, [sp, #20]
 8009204:	f108 0801 	add.w	r8, r8, #1
 8009208:	2301      	movs	r3, #1
 800920a:	9307      	str	r3, [sp, #28]
 800920c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800920e:	2b00      	cmp	r3, #0
 8009210:	d12a      	bne.n	8009268 <_dtoa_r+0x818>
 8009212:	2001      	movs	r0, #1
 8009214:	e030      	b.n	8009278 <_dtoa_r+0x828>
 8009216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009218:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800921c:	e795      	b.n	800914a <_dtoa_r+0x6fa>
 800921e:	9b07      	ldr	r3, [sp, #28]
 8009220:	f109 37ff 	add.w	r7, r9, #4294967295
 8009224:	42bb      	cmp	r3, r7
 8009226:	bfbf      	itttt	lt
 8009228:	9b07      	ldrlt	r3, [sp, #28]
 800922a:	9707      	strlt	r7, [sp, #28]
 800922c:	1afa      	sublt	r2, r7, r3
 800922e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009230:	bfbb      	ittet	lt
 8009232:	189b      	addlt	r3, r3, r2
 8009234:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009236:	1bdf      	subge	r7, r3, r7
 8009238:	2700      	movlt	r7, #0
 800923a:	f1b9 0f00 	cmp.w	r9, #0
 800923e:	bfb5      	itete	lt
 8009240:	9b05      	ldrlt	r3, [sp, #20]
 8009242:	9d05      	ldrge	r5, [sp, #20]
 8009244:	eba3 0509 	sublt.w	r5, r3, r9
 8009248:	464b      	movge	r3, r9
 800924a:	bfb8      	it	lt
 800924c:	2300      	movlt	r3, #0
 800924e:	e77e      	b.n	800914e <_dtoa_r+0x6fe>
 8009250:	9f07      	ldr	r7, [sp, #28]
 8009252:	9d05      	ldr	r5, [sp, #20]
 8009254:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009256:	e783      	b.n	8009160 <_dtoa_r+0x710>
 8009258:	9a07      	ldr	r2, [sp, #28]
 800925a:	e7ab      	b.n	80091b4 <_dtoa_r+0x764>
 800925c:	2300      	movs	r3, #0
 800925e:	e7d4      	b.n	800920a <_dtoa_r+0x7ba>
 8009260:	9b00      	ldr	r3, [sp, #0]
 8009262:	e7d2      	b.n	800920a <_dtoa_r+0x7ba>
 8009264:	2300      	movs	r3, #0
 8009266:	9307      	str	r3, [sp, #28]
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800926e:	6918      	ldr	r0, [r3, #16]
 8009270:	f000 ffa7 	bl	800a1c2 <__hi0bits>
 8009274:	f1c0 0020 	rsb	r0, r0, #32
 8009278:	4440      	add	r0, r8
 800927a:	f010 001f 	ands.w	r0, r0, #31
 800927e:	d047      	beq.n	8009310 <_dtoa_r+0x8c0>
 8009280:	f1c0 0320 	rsb	r3, r0, #32
 8009284:	2b04      	cmp	r3, #4
 8009286:	dd3b      	ble.n	8009300 <_dtoa_r+0x8b0>
 8009288:	9b05      	ldr	r3, [sp, #20]
 800928a:	f1c0 001c 	rsb	r0, r0, #28
 800928e:	4403      	add	r3, r0
 8009290:	9305      	str	r3, [sp, #20]
 8009292:	4405      	add	r5, r0
 8009294:	4480      	add	r8, r0
 8009296:	9b05      	ldr	r3, [sp, #20]
 8009298:	2b00      	cmp	r3, #0
 800929a:	dd05      	ble.n	80092a8 <_dtoa_r+0x858>
 800929c:	461a      	mov	r2, r3
 800929e:	9904      	ldr	r1, [sp, #16]
 80092a0:	4620      	mov	r0, r4
 80092a2:	f001 f8c9 	bl	800a438 <__lshift>
 80092a6:	9004      	str	r0, [sp, #16]
 80092a8:	f1b8 0f00 	cmp.w	r8, #0
 80092ac:	dd05      	ble.n	80092ba <_dtoa_r+0x86a>
 80092ae:	4639      	mov	r1, r7
 80092b0:	4642      	mov	r2, r8
 80092b2:	4620      	mov	r0, r4
 80092b4:	f001 f8c0 	bl	800a438 <__lshift>
 80092b8:	4607      	mov	r7, r0
 80092ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092bc:	b353      	cbz	r3, 8009314 <_dtoa_r+0x8c4>
 80092be:	4639      	mov	r1, r7
 80092c0:	9804      	ldr	r0, [sp, #16]
 80092c2:	f001 f90d 	bl	800a4e0 <__mcmp>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	da24      	bge.n	8009314 <_dtoa_r+0x8c4>
 80092ca:	2300      	movs	r3, #0
 80092cc:	220a      	movs	r2, #10
 80092ce:	9904      	ldr	r1, [sp, #16]
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 fefd 	bl	800a0d0 <__multadd>
 80092d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d8:	9004      	str	r0, [sp, #16]
 80092da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 814d 	beq.w	800957e <_dtoa_r+0xb2e>
 80092e4:	2300      	movs	r3, #0
 80092e6:	4631      	mov	r1, r6
 80092e8:	220a      	movs	r2, #10
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fef0 	bl	800a0d0 <__multadd>
 80092f0:	9b02      	ldr	r3, [sp, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	4606      	mov	r6, r0
 80092f6:	dc4f      	bgt.n	8009398 <_dtoa_r+0x948>
 80092f8:	9b06      	ldr	r3, [sp, #24]
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	dd4c      	ble.n	8009398 <_dtoa_r+0x948>
 80092fe:	e011      	b.n	8009324 <_dtoa_r+0x8d4>
 8009300:	d0c9      	beq.n	8009296 <_dtoa_r+0x846>
 8009302:	9a05      	ldr	r2, [sp, #20]
 8009304:	331c      	adds	r3, #28
 8009306:	441a      	add	r2, r3
 8009308:	9205      	str	r2, [sp, #20]
 800930a:	441d      	add	r5, r3
 800930c:	4498      	add	r8, r3
 800930e:	e7c2      	b.n	8009296 <_dtoa_r+0x846>
 8009310:	4603      	mov	r3, r0
 8009312:	e7f6      	b.n	8009302 <_dtoa_r+0x8b2>
 8009314:	f1b9 0f00 	cmp.w	r9, #0
 8009318:	dc38      	bgt.n	800938c <_dtoa_r+0x93c>
 800931a:	9b06      	ldr	r3, [sp, #24]
 800931c:	2b02      	cmp	r3, #2
 800931e:	dd35      	ble.n	800938c <_dtoa_r+0x93c>
 8009320:	f8cd 9008 	str.w	r9, [sp, #8]
 8009324:	9b02      	ldr	r3, [sp, #8]
 8009326:	b963      	cbnz	r3, 8009342 <_dtoa_r+0x8f2>
 8009328:	4639      	mov	r1, r7
 800932a:	2205      	movs	r2, #5
 800932c:	4620      	mov	r0, r4
 800932e:	f000 fecf 	bl	800a0d0 <__multadd>
 8009332:	4601      	mov	r1, r0
 8009334:	4607      	mov	r7, r0
 8009336:	9804      	ldr	r0, [sp, #16]
 8009338:	f001 f8d2 	bl	800a4e0 <__mcmp>
 800933c:	2800      	cmp	r0, #0
 800933e:	f73f adcc 	bgt.w	8008eda <_dtoa_r+0x48a>
 8009342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009344:	465d      	mov	r5, fp
 8009346:	ea6f 0a03 	mvn.w	sl, r3
 800934a:	f04f 0900 	mov.w	r9, #0
 800934e:	4639      	mov	r1, r7
 8009350:	4620      	mov	r0, r4
 8009352:	f000 fea6 	bl	800a0a2 <_Bfree>
 8009356:	2e00      	cmp	r6, #0
 8009358:	f43f aeb7 	beq.w	80090ca <_dtoa_r+0x67a>
 800935c:	f1b9 0f00 	cmp.w	r9, #0
 8009360:	d005      	beq.n	800936e <_dtoa_r+0x91e>
 8009362:	45b1      	cmp	r9, r6
 8009364:	d003      	beq.n	800936e <_dtoa_r+0x91e>
 8009366:	4649      	mov	r1, r9
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fe9a 	bl	800a0a2 <_Bfree>
 800936e:	4631      	mov	r1, r6
 8009370:	4620      	mov	r0, r4
 8009372:	f000 fe96 	bl	800a0a2 <_Bfree>
 8009376:	e6a8      	b.n	80090ca <_dtoa_r+0x67a>
 8009378:	2700      	movs	r7, #0
 800937a:	463e      	mov	r6, r7
 800937c:	e7e1      	b.n	8009342 <_dtoa_r+0x8f2>
 800937e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009382:	463e      	mov	r6, r7
 8009384:	e5a9      	b.n	8008eda <_dtoa_r+0x48a>
 8009386:	bf00      	nop
 8009388:	40240000 	.word	0x40240000
 800938c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800938e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 80fa 	beq.w	800958c <_dtoa_r+0xb3c>
 8009398:	2d00      	cmp	r5, #0
 800939a:	dd05      	ble.n	80093a8 <_dtoa_r+0x958>
 800939c:	4631      	mov	r1, r6
 800939e:	462a      	mov	r2, r5
 80093a0:	4620      	mov	r0, r4
 80093a2:	f001 f849 	bl	800a438 <__lshift>
 80093a6:	4606      	mov	r6, r0
 80093a8:	9b07      	ldr	r3, [sp, #28]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d04c      	beq.n	8009448 <_dtoa_r+0x9f8>
 80093ae:	6871      	ldr	r1, [r6, #4]
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fe42 	bl	800a03a <_Balloc>
 80093b6:	6932      	ldr	r2, [r6, #16]
 80093b8:	3202      	adds	r2, #2
 80093ba:	4605      	mov	r5, r0
 80093bc:	0092      	lsls	r2, r2, #2
 80093be:	f106 010c 	add.w	r1, r6, #12
 80093c2:	300c      	adds	r0, #12
 80093c4:	f000 fe2e 	bl	800a024 <memcpy>
 80093c8:	2201      	movs	r2, #1
 80093ca:	4629      	mov	r1, r5
 80093cc:	4620      	mov	r0, r4
 80093ce:	f001 f833 	bl	800a438 <__lshift>
 80093d2:	9b00      	ldr	r3, [sp, #0]
 80093d4:	f8cd b014 	str.w	fp, [sp, #20]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	46b1      	mov	r9, r6
 80093de:	9307      	str	r3, [sp, #28]
 80093e0:	4606      	mov	r6, r0
 80093e2:	4639      	mov	r1, r7
 80093e4:	9804      	ldr	r0, [sp, #16]
 80093e6:	f7ff faa5 	bl	8008934 <quorem>
 80093ea:	4649      	mov	r1, r9
 80093ec:	4605      	mov	r5, r0
 80093ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80093f2:	9804      	ldr	r0, [sp, #16]
 80093f4:	f001 f874 	bl	800a4e0 <__mcmp>
 80093f8:	4632      	mov	r2, r6
 80093fa:	9000      	str	r0, [sp, #0]
 80093fc:	4639      	mov	r1, r7
 80093fe:	4620      	mov	r0, r4
 8009400:	f001 f888 	bl	800a514 <__mdiff>
 8009404:	68c3      	ldr	r3, [r0, #12]
 8009406:	4602      	mov	r2, r0
 8009408:	bb03      	cbnz	r3, 800944c <_dtoa_r+0x9fc>
 800940a:	4601      	mov	r1, r0
 800940c:	9008      	str	r0, [sp, #32]
 800940e:	9804      	ldr	r0, [sp, #16]
 8009410:	f001 f866 	bl	800a4e0 <__mcmp>
 8009414:	9a08      	ldr	r2, [sp, #32]
 8009416:	4603      	mov	r3, r0
 8009418:	4611      	mov	r1, r2
 800941a:	4620      	mov	r0, r4
 800941c:	9308      	str	r3, [sp, #32]
 800941e:	f000 fe40 	bl	800a0a2 <_Bfree>
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	b9a3      	cbnz	r3, 8009450 <_dtoa_r+0xa00>
 8009426:	9a06      	ldr	r2, [sp, #24]
 8009428:	b992      	cbnz	r2, 8009450 <_dtoa_r+0xa00>
 800942a:	9a07      	ldr	r2, [sp, #28]
 800942c:	b982      	cbnz	r2, 8009450 <_dtoa_r+0xa00>
 800942e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009432:	d029      	beq.n	8009488 <_dtoa_r+0xa38>
 8009434:	9b00      	ldr	r3, [sp, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	dd01      	ble.n	800943e <_dtoa_r+0x9ee>
 800943a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800943e:	9b05      	ldr	r3, [sp, #20]
 8009440:	1c5d      	adds	r5, r3, #1
 8009442:	f883 8000 	strb.w	r8, [r3]
 8009446:	e782      	b.n	800934e <_dtoa_r+0x8fe>
 8009448:	4630      	mov	r0, r6
 800944a:	e7c2      	b.n	80093d2 <_dtoa_r+0x982>
 800944c:	2301      	movs	r3, #1
 800944e:	e7e3      	b.n	8009418 <_dtoa_r+0x9c8>
 8009450:	9a00      	ldr	r2, [sp, #0]
 8009452:	2a00      	cmp	r2, #0
 8009454:	db04      	blt.n	8009460 <_dtoa_r+0xa10>
 8009456:	d125      	bne.n	80094a4 <_dtoa_r+0xa54>
 8009458:	9a06      	ldr	r2, [sp, #24]
 800945a:	bb1a      	cbnz	r2, 80094a4 <_dtoa_r+0xa54>
 800945c:	9a07      	ldr	r2, [sp, #28]
 800945e:	bb0a      	cbnz	r2, 80094a4 <_dtoa_r+0xa54>
 8009460:	2b00      	cmp	r3, #0
 8009462:	ddec      	ble.n	800943e <_dtoa_r+0x9ee>
 8009464:	2201      	movs	r2, #1
 8009466:	9904      	ldr	r1, [sp, #16]
 8009468:	4620      	mov	r0, r4
 800946a:	f000 ffe5 	bl	800a438 <__lshift>
 800946e:	4639      	mov	r1, r7
 8009470:	9004      	str	r0, [sp, #16]
 8009472:	f001 f835 	bl	800a4e0 <__mcmp>
 8009476:	2800      	cmp	r0, #0
 8009478:	dc03      	bgt.n	8009482 <_dtoa_r+0xa32>
 800947a:	d1e0      	bne.n	800943e <_dtoa_r+0x9ee>
 800947c:	f018 0f01 	tst.w	r8, #1
 8009480:	d0dd      	beq.n	800943e <_dtoa_r+0x9ee>
 8009482:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009486:	d1d8      	bne.n	800943a <_dtoa_r+0x9ea>
 8009488:	9b05      	ldr	r3, [sp, #20]
 800948a:	9a05      	ldr	r2, [sp, #20]
 800948c:	1c5d      	adds	r5, r3, #1
 800948e:	2339      	movs	r3, #57	; 0x39
 8009490:	7013      	strb	r3, [r2, #0]
 8009492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009496:	2b39      	cmp	r3, #57	; 0x39
 8009498:	f105 32ff 	add.w	r2, r5, #4294967295
 800949c:	d04f      	beq.n	800953e <_dtoa_r+0xaee>
 800949e:	3301      	adds	r3, #1
 80094a0:	7013      	strb	r3, [r2, #0]
 80094a2:	e754      	b.n	800934e <_dtoa_r+0x8fe>
 80094a4:	9a05      	ldr	r2, [sp, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f102 0501 	add.w	r5, r2, #1
 80094ac:	dd06      	ble.n	80094bc <_dtoa_r+0xa6c>
 80094ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80094b2:	d0e9      	beq.n	8009488 <_dtoa_r+0xa38>
 80094b4:	f108 0801 	add.w	r8, r8, #1
 80094b8:	9b05      	ldr	r3, [sp, #20]
 80094ba:	e7c2      	b.n	8009442 <_dtoa_r+0x9f2>
 80094bc:	9a02      	ldr	r2, [sp, #8]
 80094be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80094c2:	eba5 030b 	sub.w	r3, r5, fp
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d021      	beq.n	800950e <_dtoa_r+0xabe>
 80094ca:	2300      	movs	r3, #0
 80094cc:	220a      	movs	r2, #10
 80094ce:	9904      	ldr	r1, [sp, #16]
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fdfd 	bl	800a0d0 <__multadd>
 80094d6:	45b1      	cmp	r9, r6
 80094d8:	9004      	str	r0, [sp, #16]
 80094da:	f04f 0300 	mov.w	r3, #0
 80094de:	f04f 020a 	mov.w	r2, #10
 80094e2:	4649      	mov	r1, r9
 80094e4:	4620      	mov	r0, r4
 80094e6:	d105      	bne.n	80094f4 <_dtoa_r+0xaa4>
 80094e8:	f000 fdf2 	bl	800a0d0 <__multadd>
 80094ec:	4681      	mov	r9, r0
 80094ee:	4606      	mov	r6, r0
 80094f0:	9505      	str	r5, [sp, #20]
 80094f2:	e776      	b.n	80093e2 <_dtoa_r+0x992>
 80094f4:	f000 fdec 	bl	800a0d0 <__multadd>
 80094f8:	4631      	mov	r1, r6
 80094fa:	4681      	mov	r9, r0
 80094fc:	2300      	movs	r3, #0
 80094fe:	220a      	movs	r2, #10
 8009500:	4620      	mov	r0, r4
 8009502:	f000 fde5 	bl	800a0d0 <__multadd>
 8009506:	4606      	mov	r6, r0
 8009508:	e7f2      	b.n	80094f0 <_dtoa_r+0xaa0>
 800950a:	f04f 0900 	mov.w	r9, #0
 800950e:	2201      	movs	r2, #1
 8009510:	9904      	ldr	r1, [sp, #16]
 8009512:	4620      	mov	r0, r4
 8009514:	f000 ff90 	bl	800a438 <__lshift>
 8009518:	4639      	mov	r1, r7
 800951a:	9004      	str	r0, [sp, #16]
 800951c:	f000 ffe0 	bl	800a4e0 <__mcmp>
 8009520:	2800      	cmp	r0, #0
 8009522:	dcb6      	bgt.n	8009492 <_dtoa_r+0xa42>
 8009524:	d102      	bne.n	800952c <_dtoa_r+0xadc>
 8009526:	f018 0f01 	tst.w	r8, #1
 800952a:	d1b2      	bne.n	8009492 <_dtoa_r+0xa42>
 800952c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009530:	2b30      	cmp	r3, #48	; 0x30
 8009532:	f105 32ff 	add.w	r2, r5, #4294967295
 8009536:	f47f af0a 	bne.w	800934e <_dtoa_r+0x8fe>
 800953a:	4615      	mov	r5, r2
 800953c:	e7f6      	b.n	800952c <_dtoa_r+0xadc>
 800953e:	4593      	cmp	fp, r2
 8009540:	d105      	bne.n	800954e <_dtoa_r+0xafe>
 8009542:	2331      	movs	r3, #49	; 0x31
 8009544:	f10a 0a01 	add.w	sl, sl, #1
 8009548:	f88b 3000 	strb.w	r3, [fp]
 800954c:	e6ff      	b.n	800934e <_dtoa_r+0x8fe>
 800954e:	4615      	mov	r5, r2
 8009550:	e79f      	b.n	8009492 <_dtoa_r+0xa42>
 8009552:	f8df b064 	ldr.w	fp, [pc, #100]	; 80095b8 <_dtoa_r+0xb68>
 8009556:	e007      	b.n	8009568 <_dtoa_r+0xb18>
 8009558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800955a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80095bc <_dtoa_r+0xb6c>
 800955e:	b11b      	cbz	r3, 8009568 <_dtoa_r+0xb18>
 8009560:	f10b 0308 	add.w	r3, fp, #8
 8009564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	4658      	mov	r0, fp
 800956a:	b017      	add	sp, #92	; 0x5c
 800956c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009570:	9b06      	ldr	r3, [sp, #24]
 8009572:	2b01      	cmp	r3, #1
 8009574:	f77f ae35 	ble.w	80091e2 <_dtoa_r+0x792>
 8009578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800957a:	9307      	str	r3, [sp, #28]
 800957c:	e649      	b.n	8009212 <_dtoa_r+0x7c2>
 800957e:	9b02      	ldr	r3, [sp, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	dc03      	bgt.n	800958c <_dtoa_r+0xb3c>
 8009584:	9b06      	ldr	r3, [sp, #24]
 8009586:	2b02      	cmp	r3, #2
 8009588:	f73f aecc 	bgt.w	8009324 <_dtoa_r+0x8d4>
 800958c:	465d      	mov	r5, fp
 800958e:	4639      	mov	r1, r7
 8009590:	9804      	ldr	r0, [sp, #16]
 8009592:	f7ff f9cf 	bl	8008934 <quorem>
 8009596:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800959a:	f805 8b01 	strb.w	r8, [r5], #1
 800959e:	9a02      	ldr	r2, [sp, #8]
 80095a0:	eba5 030b 	sub.w	r3, r5, fp
 80095a4:	429a      	cmp	r2, r3
 80095a6:	ddb0      	ble.n	800950a <_dtoa_r+0xaba>
 80095a8:	2300      	movs	r3, #0
 80095aa:	220a      	movs	r2, #10
 80095ac:	9904      	ldr	r1, [sp, #16]
 80095ae:	4620      	mov	r0, r4
 80095b0:	f000 fd8e 	bl	800a0d0 <__multadd>
 80095b4:	9004      	str	r0, [sp, #16]
 80095b6:	e7ea      	b.n	800958e <_dtoa_r+0xb3e>
 80095b8:	0800b320 	.word	0x0800b320
 80095bc:	0800b3a0 	.word	0x0800b3a0

080095c0 <__sflush_r>:
 80095c0:	898a      	ldrh	r2, [r1, #12]
 80095c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c6:	4605      	mov	r5, r0
 80095c8:	0710      	lsls	r0, r2, #28
 80095ca:	460c      	mov	r4, r1
 80095cc:	d458      	bmi.n	8009680 <__sflush_r+0xc0>
 80095ce:	684b      	ldr	r3, [r1, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	dc05      	bgt.n	80095e0 <__sflush_r+0x20>
 80095d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	dc02      	bgt.n	80095e0 <__sflush_r+0x20>
 80095da:	2000      	movs	r0, #0
 80095dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095e2:	2e00      	cmp	r6, #0
 80095e4:	d0f9      	beq.n	80095da <__sflush_r+0x1a>
 80095e6:	2300      	movs	r3, #0
 80095e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095ec:	682f      	ldr	r7, [r5, #0]
 80095ee:	6a21      	ldr	r1, [r4, #32]
 80095f0:	602b      	str	r3, [r5, #0]
 80095f2:	d032      	beq.n	800965a <__sflush_r+0x9a>
 80095f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	075a      	lsls	r2, r3, #29
 80095fa:	d505      	bpl.n	8009608 <__sflush_r+0x48>
 80095fc:	6863      	ldr	r3, [r4, #4]
 80095fe:	1ac0      	subs	r0, r0, r3
 8009600:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009602:	b10b      	cbz	r3, 8009608 <__sflush_r+0x48>
 8009604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009606:	1ac0      	subs	r0, r0, r3
 8009608:	2300      	movs	r3, #0
 800960a:	4602      	mov	r2, r0
 800960c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800960e:	6a21      	ldr	r1, [r4, #32]
 8009610:	4628      	mov	r0, r5
 8009612:	47b0      	blx	r6
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	d106      	bne.n	8009628 <__sflush_r+0x68>
 800961a:	6829      	ldr	r1, [r5, #0]
 800961c:	291d      	cmp	r1, #29
 800961e:	d848      	bhi.n	80096b2 <__sflush_r+0xf2>
 8009620:	4a29      	ldr	r2, [pc, #164]	; (80096c8 <__sflush_r+0x108>)
 8009622:	40ca      	lsrs	r2, r1
 8009624:	07d6      	lsls	r6, r2, #31
 8009626:	d544      	bpl.n	80096b2 <__sflush_r+0xf2>
 8009628:	2200      	movs	r2, #0
 800962a:	6062      	str	r2, [r4, #4]
 800962c:	04d9      	lsls	r1, r3, #19
 800962e:	6922      	ldr	r2, [r4, #16]
 8009630:	6022      	str	r2, [r4, #0]
 8009632:	d504      	bpl.n	800963e <__sflush_r+0x7e>
 8009634:	1c42      	adds	r2, r0, #1
 8009636:	d101      	bne.n	800963c <__sflush_r+0x7c>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b903      	cbnz	r3, 800963e <__sflush_r+0x7e>
 800963c:	6560      	str	r0, [r4, #84]	; 0x54
 800963e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009640:	602f      	str	r7, [r5, #0]
 8009642:	2900      	cmp	r1, #0
 8009644:	d0c9      	beq.n	80095da <__sflush_r+0x1a>
 8009646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800964a:	4299      	cmp	r1, r3
 800964c:	d002      	beq.n	8009654 <__sflush_r+0x94>
 800964e:	4628      	mov	r0, r5
 8009650:	f001 f900 	bl	800a854 <_free_r>
 8009654:	2000      	movs	r0, #0
 8009656:	6360      	str	r0, [r4, #52]	; 0x34
 8009658:	e7c0      	b.n	80095dc <__sflush_r+0x1c>
 800965a:	2301      	movs	r3, #1
 800965c:	4628      	mov	r0, r5
 800965e:	47b0      	blx	r6
 8009660:	1c41      	adds	r1, r0, #1
 8009662:	d1c8      	bne.n	80095f6 <__sflush_r+0x36>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0c5      	beq.n	80095f6 <__sflush_r+0x36>
 800966a:	2b1d      	cmp	r3, #29
 800966c:	d001      	beq.n	8009672 <__sflush_r+0xb2>
 800966e:	2b16      	cmp	r3, #22
 8009670:	d101      	bne.n	8009676 <__sflush_r+0xb6>
 8009672:	602f      	str	r7, [r5, #0]
 8009674:	e7b1      	b.n	80095da <__sflush_r+0x1a>
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800967c:	81a3      	strh	r3, [r4, #12]
 800967e:	e7ad      	b.n	80095dc <__sflush_r+0x1c>
 8009680:	690f      	ldr	r7, [r1, #16]
 8009682:	2f00      	cmp	r7, #0
 8009684:	d0a9      	beq.n	80095da <__sflush_r+0x1a>
 8009686:	0793      	lsls	r3, r2, #30
 8009688:	680e      	ldr	r6, [r1, #0]
 800968a:	bf08      	it	eq
 800968c:	694b      	ldreq	r3, [r1, #20]
 800968e:	600f      	str	r7, [r1, #0]
 8009690:	bf18      	it	ne
 8009692:	2300      	movne	r3, #0
 8009694:	eba6 0807 	sub.w	r8, r6, r7
 8009698:	608b      	str	r3, [r1, #8]
 800969a:	f1b8 0f00 	cmp.w	r8, #0
 800969e:	dd9c      	ble.n	80095da <__sflush_r+0x1a>
 80096a0:	4643      	mov	r3, r8
 80096a2:	463a      	mov	r2, r7
 80096a4:	6a21      	ldr	r1, [r4, #32]
 80096a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096a8:	4628      	mov	r0, r5
 80096aa:	47b0      	blx	r6
 80096ac:	2800      	cmp	r0, #0
 80096ae:	dc06      	bgt.n	80096be <__sflush_r+0xfe>
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b6:	81a3      	strh	r3, [r4, #12]
 80096b8:	f04f 30ff 	mov.w	r0, #4294967295
 80096bc:	e78e      	b.n	80095dc <__sflush_r+0x1c>
 80096be:	4407      	add	r7, r0
 80096c0:	eba8 0800 	sub.w	r8, r8, r0
 80096c4:	e7e9      	b.n	800969a <__sflush_r+0xda>
 80096c6:	bf00      	nop
 80096c8:	20400001 	.word	0x20400001

080096cc <_fflush_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	690b      	ldr	r3, [r1, #16]
 80096d0:	4605      	mov	r5, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	b1db      	cbz	r3, 800970e <_fflush_r+0x42>
 80096d6:	b118      	cbz	r0, 80096e0 <_fflush_r+0x14>
 80096d8:	6983      	ldr	r3, [r0, #24]
 80096da:	b90b      	cbnz	r3, 80096e0 <_fflush_r+0x14>
 80096dc:	f000 f860 	bl	80097a0 <__sinit>
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <_fflush_r+0x48>)
 80096e2:	429c      	cmp	r4, r3
 80096e4:	d109      	bne.n	80096fa <_fflush_r+0x2e>
 80096e6:	686c      	ldr	r4, [r5, #4]
 80096e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ec:	b17b      	cbz	r3, 800970e <_fflush_r+0x42>
 80096ee:	4621      	mov	r1, r4
 80096f0:	4628      	mov	r0, r5
 80096f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096f6:	f7ff bf63 	b.w	80095c0 <__sflush_r>
 80096fa:	4b07      	ldr	r3, [pc, #28]	; (8009718 <_fflush_r+0x4c>)
 80096fc:	429c      	cmp	r4, r3
 80096fe:	d101      	bne.n	8009704 <_fflush_r+0x38>
 8009700:	68ac      	ldr	r4, [r5, #8]
 8009702:	e7f1      	b.n	80096e8 <_fflush_r+0x1c>
 8009704:	4b05      	ldr	r3, [pc, #20]	; (800971c <_fflush_r+0x50>)
 8009706:	429c      	cmp	r4, r3
 8009708:	bf08      	it	eq
 800970a:	68ec      	ldreq	r4, [r5, #12]
 800970c:	e7ec      	b.n	80096e8 <_fflush_r+0x1c>
 800970e:	2000      	movs	r0, #0
 8009710:	bd38      	pop	{r3, r4, r5, pc}
 8009712:	bf00      	nop
 8009714:	0800b3d0 	.word	0x0800b3d0
 8009718:	0800b3f0 	.word	0x0800b3f0
 800971c:	0800b3b0 	.word	0x0800b3b0

08009720 <std>:
 8009720:	2300      	movs	r3, #0
 8009722:	b510      	push	{r4, lr}
 8009724:	4604      	mov	r4, r0
 8009726:	e9c0 3300 	strd	r3, r3, [r0]
 800972a:	6083      	str	r3, [r0, #8]
 800972c:	8181      	strh	r1, [r0, #12]
 800972e:	6643      	str	r3, [r0, #100]	; 0x64
 8009730:	81c2      	strh	r2, [r0, #14]
 8009732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009736:	6183      	str	r3, [r0, #24]
 8009738:	4619      	mov	r1, r3
 800973a:	2208      	movs	r2, #8
 800973c:	305c      	adds	r0, #92	; 0x5c
 800973e:	f7fd faa3 	bl	8006c88 <memset>
 8009742:	4b05      	ldr	r3, [pc, #20]	; (8009758 <std+0x38>)
 8009744:	6263      	str	r3, [r4, #36]	; 0x24
 8009746:	4b05      	ldr	r3, [pc, #20]	; (800975c <std+0x3c>)
 8009748:	62a3      	str	r3, [r4, #40]	; 0x28
 800974a:	4b05      	ldr	r3, [pc, #20]	; (8009760 <std+0x40>)
 800974c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800974e:	4b05      	ldr	r3, [pc, #20]	; (8009764 <std+0x44>)
 8009750:	6224      	str	r4, [r4, #32]
 8009752:	6323      	str	r3, [r4, #48]	; 0x30
 8009754:	bd10      	pop	{r4, pc}
 8009756:	bf00      	nop
 8009758:	0800aee9 	.word	0x0800aee9
 800975c:	0800af0b 	.word	0x0800af0b
 8009760:	0800af43 	.word	0x0800af43
 8009764:	0800af67 	.word	0x0800af67

08009768 <_cleanup_r>:
 8009768:	4901      	ldr	r1, [pc, #4]	; (8009770 <_cleanup_r+0x8>)
 800976a:	f000 b885 	b.w	8009878 <_fwalk_reent>
 800976e:	bf00      	nop
 8009770:	080096cd 	.word	0x080096cd

08009774 <__sfmoreglue>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	1e4a      	subs	r2, r1, #1
 8009778:	2568      	movs	r5, #104	; 0x68
 800977a:	4355      	muls	r5, r2
 800977c:	460e      	mov	r6, r1
 800977e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009782:	f001 f8b5 	bl	800a8f0 <_malloc_r>
 8009786:	4604      	mov	r4, r0
 8009788:	b140      	cbz	r0, 800979c <__sfmoreglue+0x28>
 800978a:	2100      	movs	r1, #0
 800978c:	e9c0 1600 	strd	r1, r6, [r0]
 8009790:	300c      	adds	r0, #12
 8009792:	60a0      	str	r0, [r4, #8]
 8009794:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009798:	f7fd fa76 	bl	8006c88 <memset>
 800979c:	4620      	mov	r0, r4
 800979e:	bd70      	pop	{r4, r5, r6, pc}

080097a0 <__sinit>:
 80097a0:	6983      	ldr	r3, [r0, #24]
 80097a2:	b510      	push	{r4, lr}
 80097a4:	4604      	mov	r4, r0
 80097a6:	bb33      	cbnz	r3, 80097f6 <__sinit+0x56>
 80097a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80097ac:	6503      	str	r3, [r0, #80]	; 0x50
 80097ae:	4b12      	ldr	r3, [pc, #72]	; (80097f8 <__sinit+0x58>)
 80097b0:	4a12      	ldr	r2, [pc, #72]	; (80097fc <__sinit+0x5c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6282      	str	r2, [r0, #40]	; 0x28
 80097b6:	4298      	cmp	r0, r3
 80097b8:	bf04      	itt	eq
 80097ba:	2301      	moveq	r3, #1
 80097bc:	6183      	streq	r3, [r0, #24]
 80097be:	f000 f81f 	bl	8009800 <__sfp>
 80097c2:	6060      	str	r0, [r4, #4]
 80097c4:	4620      	mov	r0, r4
 80097c6:	f000 f81b 	bl	8009800 <__sfp>
 80097ca:	60a0      	str	r0, [r4, #8]
 80097cc:	4620      	mov	r0, r4
 80097ce:	f000 f817 	bl	8009800 <__sfp>
 80097d2:	2200      	movs	r2, #0
 80097d4:	60e0      	str	r0, [r4, #12]
 80097d6:	2104      	movs	r1, #4
 80097d8:	6860      	ldr	r0, [r4, #4]
 80097da:	f7ff ffa1 	bl	8009720 <std>
 80097de:	2201      	movs	r2, #1
 80097e0:	2109      	movs	r1, #9
 80097e2:	68a0      	ldr	r0, [r4, #8]
 80097e4:	f7ff ff9c 	bl	8009720 <std>
 80097e8:	2202      	movs	r2, #2
 80097ea:	2112      	movs	r1, #18
 80097ec:	68e0      	ldr	r0, [r4, #12]
 80097ee:	f7ff ff97 	bl	8009720 <std>
 80097f2:	2301      	movs	r3, #1
 80097f4:	61a3      	str	r3, [r4, #24]
 80097f6:	bd10      	pop	{r4, pc}
 80097f8:	0800b30c 	.word	0x0800b30c
 80097fc:	08009769 	.word	0x08009769

08009800 <__sfp>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	4b1b      	ldr	r3, [pc, #108]	; (8009870 <__sfp+0x70>)
 8009804:	681e      	ldr	r6, [r3, #0]
 8009806:	69b3      	ldr	r3, [r6, #24]
 8009808:	4607      	mov	r7, r0
 800980a:	b913      	cbnz	r3, 8009812 <__sfp+0x12>
 800980c:	4630      	mov	r0, r6
 800980e:	f7ff ffc7 	bl	80097a0 <__sinit>
 8009812:	3648      	adds	r6, #72	; 0x48
 8009814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009818:	3b01      	subs	r3, #1
 800981a:	d503      	bpl.n	8009824 <__sfp+0x24>
 800981c:	6833      	ldr	r3, [r6, #0]
 800981e:	b133      	cbz	r3, 800982e <__sfp+0x2e>
 8009820:	6836      	ldr	r6, [r6, #0]
 8009822:	e7f7      	b.n	8009814 <__sfp+0x14>
 8009824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009828:	b16d      	cbz	r5, 8009846 <__sfp+0x46>
 800982a:	3468      	adds	r4, #104	; 0x68
 800982c:	e7f4      	b.n	8009818 <__sfp+0x18>
 800982e:	2104      	movs	r1, #4
 8009830:	4638      	mov	r0, r7
 8009832:	f7ff ff9f 	bl	8009774 <__sfmoreglue>
 8009836:	6030      	str	r0, [r6, #0]
 8009838:	2800      	cmp	r0, #0
 800983a:	d1f1      	bne.n	8009820 <__sfp+0x20>
 800983c:	230c      	movs	r3, #12
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	4604      	mov	r4, r0
 8009842:	4620      	mov	r0, r4
 8009844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009846:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <__sfp+0x74>)
 8009848:	6665      	str	r5, [r4, #100]	; 0x64
 800984a:	e9c4 5500 	strd	r5, r5, [r4]
 800984e:	60a5      	str	r5, [r4, #8]
 8009850:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009854:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009858:	2208      	movs	r2, #8
 800985a:	4629      	mov	r1, r5
 800985c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009860:	f7fd fa12 	bl	8006c88 <memset>
 8009864:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009868:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800986c:	e7e9      	b.n	8009842 <__sfp+0x42>
 800986e:	bf00      	nop
 8009870:	0800b30c 	.word	0x0800b30c
 8009874:	ffff0001 	.word	0xffff0001

08009878 <_fwalk_reent>:
 8009878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800987c:	4680      	mov	r8, r0
 800987e:	4689      	mov	r9, r1
 8009880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009884:	2600      	movs	r6, #0
 8009886:	b914      	cbnz	r4, 800988e <_fwalk_reent+0x16>
 8009888:	4630      	mov	r0, r6
 800988a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800988e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009892:	3f01      	subs	r7, #1
 8009894:	d501      	bpl.n	800989a <_fwalk_reent+0x22>
 8009896:	6824      	ldr	r4, [r4, #0]
 8009898:	e7f5      	b.n	8009886 <_fwalk_reent+0xe>
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d907      	bls.n	80098b0 <_fwalk_reent+0x38>
 80098a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098a4:	3301      	adds	r3, #1
 80098a6:	d003      	beq.n	80098b0 <_fwalk_reent+0x38>
 80098a8:	4629      	mov	r1, r5
 80098aa:	4640      	mov	r0, r8
 80098ac:	47c8      	blx	r9
 80098ae:	4306      	orrs	r6, r0
 80098b0:	3568      	adds	r5, #104	; 0x68
 80098b2:	e7ee      	b.n	8009892 <_fwalk_reent+0x1a>

080098b4 <rshift>:
 80098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b6:	6906      	ldr	r6, [r0, #16]
 80098b8:	114b      	asrs	r3, r1, #5
 80098ba:	429e      	cmp	r6, r3
 80098bc:	f100 0414 	add.w	r4, r0, #20
 80098c0:	dd30      	ble.n	8009924 <rshift+0x70>
 80098c2:	f011 011f 	ands.w	r1, r1, #31
 80098c6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80098ca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80098ce:	d108      	bne.n	80098e2 <rshift+0x2e>
 80098d0:	4621      	mov	r1, r4
 80098d2:	42b2      	cmp	r2, r6
 80098d4:	460b      	mov	r3, r1
 80098d6:	d211      	bcs.n	80098fc <rshift+0x48>
 80098d8:	f852 3b04 	ldr.w	r3, [r2], #4
 80098dc:	f841 3b04 	str.w	r3, [r1], #4
 80098e0:	e7f7      	b.n	80098d2 <rshift+0x1e>
 80098e2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80098e6:	f1c1 0c20 	rsb	ip, r1, #32
 80098ea:	40cd      	lsrs	r5, r1
 80098ec:	3204      	adds	r2, #4
 80098ee:	4623      	mov	r3, r4
 80098f0:	42b2      	cmp	r2, r6
 80098f2:	4617      	mov	r7, r2
 80098f4:	d30c      	bcc.n	8009910 <rshift+0x5c>
 80098f6:	601d      	str	r5, [r3, #0]
 80098f8:	b105      	cbz	r5, 80098fc <rshift+0x48>
 80098fa:	3304      	adds	r3, #4
 80098fc:	1b1a      	subs	r2, r3, r4
 80098fe:	42a3      	cmp	r3, r4
 8009900:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009904:	bf08      	it	eq
 8009906:	2300      	moveq	r3, #0
 8009908:	6102      	str	r2, [r0, #16]
 800990a:	bf08      	it	eq
 800990c:	6143      	streq	r3, [r0, #20]
 800990e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009910:	683f      	ldr	r7, [r7, #0]
 8009912:	fa07 f70c 	lsl.w	r7, r7, ip
 8009916:	433d      	orrs	r5, r7
 8009918:	f843 5b04 	str.w	r5, [r3], #4
 800991c:	f852 5b04 	ldr.w	r5, [r2], #4
 8009920:	40cd      	lsrs	r5, r1
 8009922:	e7e5      	b.n	80098f0 <rshift+0x3c>
 8009924:	4623      	mov	r3, r4
 8009926:	e7e9      	b.n	80098fc <rshift+0x48>

08009928 <__hexdig_fun>:
 8009928:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800992c:	2b09      	cmp	r3, #9
 800992e:	d802      	bhi.n	8009936 <__hexdig_fun+0xe>
 8009930:	3820      	subs	r0, #32
 8009932:	b2c0      	uxtb	r0, r0
 8009934:	4770      	bx	lr
 8009936:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800993a:	2b05      	cmp	r3, #5
 800993c:	d801      	bhi.n	8009942 <__hexdig_fun+0x1a>
 800993e:	3847      	subs	r0, #71	; 0x47
 8009940:	e7f7      	b.n	8009932 <__hexdig_fun+0xa>
 8009942:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009946:	2b05      	cmp	r3, #5
 8009948:	d801      	bhi.n	800994e <__hexdig_fun+0x26>
 800994a:	3827      	subs	r0, #39	; 0x27
 800994c:	e7f1      	b.n	8009932 <__hexdig_fun+0xa>
 800994e:	2000      	movs	r0, #0
 8009950:	4770      	bx	lr

08009952 <__gethex>:
 8009952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009956:	b08b      	sub	sp, #44	; 0x2c
 8009958:	468a      	mov	sl, r1
 800995a:	9002      	str	r0, [sp, #8]
 800995c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800995e:	9306      	str	r3, [sp, #24]
 8009960:	4690      	mov	r8, r2
 8009962:	f000 fad0 	bl	8009f06 <__localeconv_l>
 8009966:	6803      	ldr	r3, [r0, #0]
 8009968:	9303      	str	r3, [sp, #12]
 800996a:	4618      	mov	r0, r3
 800996c:	f7f6 fc30 	bl	80001d0 <strlen>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	9001      	str	r0, [sp, #4]
 8009974:	4403      	add	r3, r0
 8009976:	f04f 0b00 	mov.w	fp, #0
 800997a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800997e:	9307      	str	r3, [sp, #28]
 8009980:	f8da 3000 	ldr.w	r3, [sl]
 8009984:	3302      	adds	r3, #2
 8009986:	461f      	mov	r7, r3
 8009988:	f813 0b01 	ldrb.w	r0, [r3], #1
 800998c:	2830      	cmp	r0, #48	; 0x30
 800998e:	d06c      	beq.n	8009a6a <__gethex+0x118>
 8009990:	f7ff ffca 	bl	8009928 <__hexdig_fun>
 8009994:	4604      	mov	r4, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	d16a      	bne.n	8009a70 <__gethex+0x11e>
 800999a:	9a01      	ldr	r2, [sp, #4]
 800999c:	9903      	ldr	r1, [sp, #12]
 800999e:	4638      	mov	r0, r7
 80099a0:	f001 fae5 	bl	800af6e <strncmp>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d166      	bne.n	8009a76 <__gethex+0x124>
 80099a8:	9b01      	ldr	r3, [sp, #4]
 80099aa:	5cf8      	ldrb	r0, [r7, r3]
 80099ac:	18fe      	adds	r6, r7, r3
 80099ae:	f7ff ffbb 	bl	8009928 <__hexdig_fun>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d062      	beq.n	8009a7c <__gethex+0x12a>
 80099b6:	4633      	mov	r3, r6
 80099b8:	7818      	ldrb	r0, [r3, #0]
 80099ba:	2830      	cmp	r0, #48	; 0x30
 80099bc:	461f      	mov	r7, r3
 80099be:	f103 0301 	add.w	r3, r3, #1
 80099c2:	d0f9      	beq.n	80099b8 <__gethex+0x66>
 80099c4:	f7ff ffb0 	bl	8009928 <__hexdig_fun>
 80099c8:	fab0 f580 	clz	r5, r0
 80099cc:	096d      	lsrs	r5, r5, #5
 80099ce:	4634      	mov	r4, r6
 80099d0:	f04f 0b01 	mov.w	fp, #1
 80099d4:	463a      	mov	r2, r7
 80099d6:	4616      	mov	r6, r2
 80099d8:	3201      	adds	r2, #1
 80099da:	7830      	ldrb	r0, [r6, #0]
 80099dc:	f7ff ffa4 	bl	8009928 <__hexdig_fun>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d1f8      	bne.n	80099d6 <__gethex+0x84>
 80099e4:	9a01      	ldr	r2, [sp, #4]
 80099e6:	9903      	ldr	r1, [sp, #12]
 80099e8:	4630      	mov	r0, r6
 80099ea:	f001 fac0 	bl	800af6e <strncmp>
 80099ee:	b950      	cbnz	r0, 8009a06 <__gethex+0xb4>
 80099f0:	b954      	cbnz	r4, 8009a08 <__gethex+0xb6>
 80099f2:	9b01      	ldr	r3, [sp, #4]
 80099f4:	18f4      	adds	r4, r6, r3
 80099f6:	4622      	mov	r2, r4
 80099f8:	4616      	mov	r6, r2
 80099fa:	3201      	adds	r2, #1
 80099fc:	7830      	ldrb	r0, [r6, #0]
 80099fe:	f7ff ff93 	bl	8009928 <__hexdig_fun>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d1f8      	bne.n	80099f8 <__gethex+0xa6>
 8009a06:	b10c      	cbz	r4, 8009a0c <__gethex+0xba>
 8009a08:	1ba4      	subs	r4, r4, r6
 8009a0a:	00a4      	lsls	r4, r4, #2
 8009a0c:	7833      	ldrb	r3, [r6, #0]
 8009a0e:	2b50      	cmp	r3, #80	; 0x50
 8009a10:	d001      	beq.n	8009a16 <__gethex+0xc4>
 8009a12:	2b70      	cmp	r3, #112	; 0x70
 8009a14:	d140      	bne.n	8009a98 <__gethex+0x146>
 8009a16:	7873      	ldrb	r3, [r6, #1]
 8009a18:	2b2b      	cmp	r3, #43	; 0x2b
 8009a1a:	d031      	beq.n	8009a80 <__gethex+0x12e>
 8009a1c:	2b2d      	cmp	r3, #45	; 0x2d
 8009a1e:	d033      	beq.n	8009a88 <__gethex+0x136>
 8009a20:	1c71      	adds	r1, r6, #1
 8009a22:	f04f 0900 	mov.w	r9, #0
 8009a26:	7808      	ldrb	r0, [r1, #0]
 8009a28:	f7ff ff7e 	bl	8009928 <__hexdig_fun>
 8009a2c:	1e43      	subs	r3, r0, #1
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b18      	cmp	r3, #24
 8009a32:	d831      	bhi.n	8009a98 <__gethex+0x146>
 8009a34:	f1a0 0210 	sub.w	r2, r0, #16
 8009a38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a3c:	f7ff ff74 	bl	8009928 <__hexdig_fun>
 8009a40:	1e43      	subs	r3, r0, #1
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b18      	cmp	r3, #24
 8009a46:	d922      	bls.n	8009a8e <__gethex+0x13c>
 8009a48:	f1b9 0f00 	cmp.w	r9, #0
 8009a4c:	d000      	beq.n	8009a50 <__gethex+0xfe>
 8009a4e:	4252      	negs	r2, r2
 8009a50:	4414      	add	r4, r2
 8009a52:	f8ca 1000 	str.w	r1, [sl]
 8009a56:	b30d      	cbz	r5, 8009a9c <__gethex+0x14a>
 8009a58:	f1bb 0f00 	cmp.w	fp, #0
 8009a5c:	bf0c      	ite	eq
 8009a5e:	2706      	moveq	r7, #6
 8009a60:	2700      	movne	r7, #0
 8009a62:	4638      	mov	r0, r7
 8009a64:	b00b      	add	sp, #44	; 0x2c
 8009a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6a:	f10b 0b01 	add.w	fp, fp, #1
 8009a6e:	e78a      	b.n	8009986 <__gethex+0x34>
 8009a70:	2500      	movs	r5, #0
 8009a72:	462c      	mov	r4, r5
 8009a74:	e7ae      	b.n	80099d4 <__gethex+0x82>
 8009a76:	463e      	mov	r6, r7
 8009a78:	2501      	movs	r5, #1
 8009a7a:	e7c7      	b.n	8009a0c <__gethex+0xba>
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	e7fb      	b.n	8009a78 <__gethex+0x126>
 8009a80:	f04f 0900 	mov.w	r9, #0
 8009a84:	1cb1      	adds	r1, r6, #2
 8009a86:	e7ce      	b.n	8009a26 <__gethex+0xd4>
 8009a88:	f04f 0901 	mov.w	r9, #1
 8009a8c:	e7fa      	b.n	8009a84 <__gethex+0x132>
 8009a8e:	230a      	movs	r3, #10
 8009a90:	fb03 0202 	mla	r2, r3, r2, r0
 8009a94:	3a10      	subs	r2, #16
 8009a96:	e7cf      	b.n	8009a38 <__gethex+0xe6>
 8009a98:	4631      	mov	r1, r6
 8009a9a:	e7da      	b.n	8009a52 <__gethex+0x100>
 8009a9c:	1bf3      	subs	r3, r6, r7
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	2b07      	cmp	r3, #7
 8009aa4:	dc49      	bgt.n	8009b3a <__gethex+0x1e8>
 8009aa6:	9802      	ldr	r0, [sp, #8]
 8009aa8:	f000 fac7 	bl	800a03a <_Balloc>
 8009aac:	9b01      	ldr	r3, [sp, #4]
 8009aae:	f100 0914 	add.w	r9, r0, #20
 8009ab2:	f04f 0b00 	mov.w	fp, #0
 8009ab6:	f1c3 0301 	rsb	r3, r3, #1
 8009aba:	4605      	mov	r5, r0
 8009abc:	f8cd 9010 	str.w	r9, [sp, #16]
 8009ac0:	46da      	mov	sl, fp
 8009ac2:	9308      	str	r3, [sp, #32]
 8009ac4:	42b7      	cmp	r7, r6
 8009ac6:	d33b      	bcc.n	8009b40 <__gethex+0x1ee>
 8009ac8:	9804      	ldr	r0, [sp, #16]
 8009aca:	f840 ab04 	str.w	sl, [r0], #4
 8009ace:	eba0 0009 	sub.w	r0, r0, r9
 8009ad2:	1080      	asrs	r0, r0, #2
 8009ad4:	6128      	str	r0, [r5, #16]
 8009ad6:	0147      	lsls	r7, r0, #5
 8009ad8:	4650      	mov	r0, sl
 8009ada:	f000 fb72 	bl	800a1c2 <__hi0bits>
 8009ade:	f8d8 6000 	ldr.w	r6, [r8]
 8009ae2:	1a3f      	subs	r7, r7, r0
 8009ae4:	42b7      	cmp	r7, r6
 8009ae6:	dd64      	ble.n	8009bb2 <__gethex+0x260>
 8009ae8:	1bbf      	subs	r7, r7, r6
 8009aea:	4639      	mov	r1, r7
 8009aec:	4628      	mov	r0, r5
 8009aee:	f000 fe81 	bl	800a7f4 <__any_on>
 8009af2:	4682      	mov	sl, r0
 8009af4:	b178      	cbz	r0, 8009b16 <__gethex+0x1c4>
 8009af6:	1e7b      	subs	r3, r7, #1
 8009af8:	1159      	asrs	r1, r3, #5
 8009afa:	f003 021f 	and.w	r2, r3, #31
 8009afe:	f04f 0a01 	mov.w	sl, #1
 8009b02:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009b06:	fa0a f202 	lsl.w	r2, sl, r2
 8009b0a:	420a      	tst	r2, r1
 8009b0c:	d003      	beq.n	8009b16 <__gethex+0x1c4>
 8009b0e:	4553      	cmp	r3, sl
 8009b10:	dc46      	bgt.n	8009ba0 <__gethex+0x24e>
 8009b12:	f04f 0a02 	mov.w	sl, #2
 8009b16:	4639      	mov	r1, r7
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f7ff fecb 	bl	80098b4 <rshift>
 8009b1e:	443c      	add	r4, r7
 8009b20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	da52      	bge.n	8009bce <__gethex+0x27c>
 8009b28:	4629      	mov	r1, r5
 8009b2a:	9802      	ldr	r0, [sp, #8]
 8009b2c:	f000 fab9 	bl	800a0a2 <_Bfree>
 8009b30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b32:	2300      	movs	r3, #0
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	27a3      	movs	r7, #163	; 0xa3
 8009b38:	e793      	b.n	8009a62 <__gethex+0x110>
 8009b3a:	3101      	adds	r1, #1
 8009b3c:	105b      	asrs	r3, r3, #1
 8009b3e:	e7b0      	b.n	8009aa2 <__gethex+0x150>
 8009b40:	1e73      	subs	r3, r6, #1
 8009b42:	9305      	str	r3, [sp, #20]
 8009b44:	9a07      	ldr	r2, [sp, #28]
 8009b46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d018      	beq.n	8009b80 <__gethex+0x22e>
 8009b4e:	f1bb 0f20 	cmp.w	fp, #32
 8009b52:	d107      	bne.n	8009b64 <__gethex+0x212>
 8009b54:	9b04      	ldr	r3, [sp, #16]
 8009b56:	f8c3 a000 	str.w	sl, [r3]
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	f04f 0a00 	mov.w	sl, #0
 8009b60:	9304      	str	r3, [sp, #16]
 8009b62:	46d3      	mov	fp, sl
 8009b64:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b68:	f7ff fede 	bl	8009928 <__hexdig_fun>
 8009b6c:	f000 000f 	and.w	r0, r0, #15
 8009b70:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b74:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b78:	f10b 0b04 	add.w	fp, fp, #4
 8009b7c:	9b05      	ldr	r3, [sp, #20]
 8009b7e:	e00d      	b.n	8009b9c <__gethex+0x24a>
 8009b80:	9b05      	ldr	r3, [sp, #20]
 8009b82:	9a08      	ldr	r2, [sp, #32]
 8009b84:	4413      	add	r3, r2
 8009b86:	42bb      	cmp	r3, r7
 8009b88:	d3e1      	bcc.n	8009b4e <__gethex+0x1fc>
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	9a01      	ldr	r2, [sp, #4]
 8009b8e:	9903      	ldr	r1, [sp, #12]
 8009b90:	9309      	str	r3, [sp, #36]	; 0x24
 8009b92:	f001 f9ec 	bl	800af6e <strncmp>
 8009b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d1d8      	bne.n	8009b4e <__gethex+0x1fc>
 8009b9c:	461e      	mov	r6, r3
 8009b9e:	e791      	b.n	8009ac4 <__gethex+0x172>
 8009ba0:	1eb9      	subs	r1, r7, #2
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f000 fe26 	bl	800a7f4 <__any_on>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d0b2      	beq.n	8009b12 <__gethex+0x1c0>
 8009bac:	f04f 0a03 	mov.w	sl, #3
 8009bb0:	e7b1      	b.n	8009b16 <__gethex+0x1c4>
 8009bb2:	da09      	bge.n	8009bc8 <__gethex+0x276>
 8009bb4:	1bf7      	subs	r7, r6, r7
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	463a      	mov	r2, r7
 8009bba:	9802      	ldr	r0, [sp, #8]
 8009bbc:	f000 fc3c 	bl	800a438 <__lshift>
 8009bc0:	1be4      	subs	r4, r4, r7
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	f100 0914 	add.w	r9, r0, #20
 8009bc8:	f04f 0a00 	mov.w	sl, #0
 8009bcc:	e7a8      	b.n	8009b20 <__gethex+0x1ce>
 8009bce:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009bd2:	42a0      	cmp	r0, r4
 8009bd4:	dd6a      	ble.n	8009cac <__gethex+0x35a>
 8009bd6:	1b04      	subs	r4, r0, r4
 8009bd8:	42a6      	cmp	r6, r4
 8009bda:	dc2e      	bgt.n	8009c3a <__gethex+0x2e8>
 8009bdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d022      	beq.n	8009c2a <__gethex+0x2d8>
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d024      	beq.n	8009c32 <__gethex+0x2e0>
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d115      	bne.n	8009c18 <__gethex+0x2c6>
 8009bec:	42a6      	cmp	r6, r4
 8009bee:	d113      	bne.n	8009c18 <__gethex+0x2c6>
 8009bf0:	2e01      	cmp	r6, #1
 8009bf2:	dc0b      	bgt.n	8009c0c <__gethex+0x2ba>
 8009bf4:	9a06      	ldr	r2, [sp, #24]
 8009bf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	612b      	str	r3, [r5, #16]
 8009c00:	f8c9 3000 	str.w	r3, [r9]
 8009c04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c06:	2762      	movs	r7, #98	; 0x62
 8009c08:	601d      	str	r5, [r3, #0]
 8009c0a:	e72a      	b.n	8009a62 <__gethex+0x110>
 8009c0c:	1e71      	subs	r1, r6, #1
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f000 fdf0 	bl	800a7f4 <__any_on>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d1ed      	bne.n	8009bf4 <__gethex+0x2a2>
 8009c18:	4629      	mov	r1, r5
 8009c1a:	9802      	ldr	r0, [sp, #8]
 8009c1c:	f000 fa41 	bl	800a0a2 <_Bfree>
 8009c20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c22:	2300      	movs	r3, #0
 8009c24:	6013      	str	r3, [r2, #0]
 8009c26:	2750      	movs	r7, #80	; 0x50
 8009c28:	e71b      	b.n	8009a62 <__gethex+0x110>
 8009c2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d0e1      	beq.n	8009bf4 <__gethex+0x2a2>
 8009c30:	e7f2      	b.n	8009c18 <__gethex+0x2c6>
 8009c32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1dd      	bne.n	8009bf4 <__gethex+0x2a2>
 8009c38:	e7ee      	b.n	8009c18 <__gethex+0x2c6>
 8009c3a:	1e67      	subs	r7, r4, #1
 8009c3c:	f1ba 0f00 	cmp.w	sl, #0
 8009c40:	d131      	bne.n	8009ca6 <__gethex+0x354>
 8009c42:	b127      	cbz	r7, 8009c4e <__gethex+0x2fc>
 8009c44:	4639      	mov	r1, r7
 8009c46:	4628      	mov	r0, r5
 8009c48:	f000 fdd4 	bl	800a7f4 <__any_on>
 8009c4c:	4682      	mov	sl, r0
 8009c4e:	117a      	asrs	r2, r7, #5
 8009c50:	2301      	movs	r3, #1
 8009c52:	f007 071f 	and.w	r7, r7, #31
 8009c56:	fa03 f707 	lsl.w	r7, r3, r7
 8009c5a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009c5e:	4621      	mov	r1, r4
 8009c60:	421f      	tst	r7, r3
 8009c62:	4628      	mov	r0, r5
 8009c64:	bf18      	it	ne
 8009c66:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c6a:	1b36      	subs	r6, r6, r4
 8009c6c:	f7ff fe22 	bl	80098b4 <rshift>
 8009c70:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009c74:	2702      	movs	r7, #2
 8009c76:	f1ba 0f00 	cmp.w	sl, #0
 8009c7a:	d048      	beq.n	8009d0e <__gethex+0x3bc>
 8009c7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d015      	beq.n	8009cb0 <__gethex+0x35e>
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d017      	beq.n	8009cb8 <__gethex+0x366>
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d109      	bne.n	8009ca0 <__gethex+0x34e>
 8009c8c:	f01a 0f02 	tst.w	sl, #2
 8009c90:	d006      	beq.n	8009ca0 <__gethex+0x34e>
 8009c92:	f8d9 3000 	ldr.w	r3, [r9]
 8009c96:	ea4a 0a03 	orr.w	sl, sl, r3
 8009c9a:	f01a 0f01 	tst.w	sl, #1
 8009c9e:	d10e      	bne.n	8009cbe <__gethex+0x36c>
 8009ca0:	f047 0710 	orr.w	r7, r7, #16
 8009ca4:	e033      	b.n	8009d0e <__gethex+0x3bc>
 8009ca6:	f04f 0a01 	mov.w	sl, #1
 8009caa:	e7d0      	b.n	8009c4e <__gethex+0x2fc>
 8009cac:	2701      	movs	r7, #1
 8009cae:	e7e2      	b.n	8009c76 <__gethex+0x324>
 8009cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cb2:	f1c3 0301 	rsb	r3, r3, #1
 8009cb6:	9315      	str	r3, [sp, #84]	; 0x54
 8009cb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0f0      	beq.n	8009ca0 <__gethex+0x34e>
 8009cbe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009cc2:	f105 0314 	add.w	r3, r5, #20
 8009cc6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009cca:	eb03 010a 	add.w	r1, r3, sl
 8009cce:	f04f 0c00 	mov.w	ip, #0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009cdc:	d01c      	beq.n	8009d18 <__gethex+0x3c6>
 8009cde:	3201      	adds	r2, #1
 8009ce0:	6002      	str	r2, [r0, #0]
 8009ce2:	2f02      	cmp	r7, #2
 8009ce4:	f105 0314 	add.w	r3, r5, #20
 8009ce8:	d138      	bne.n	8009d5c <__gethex+0x40a>
 8009cea:	f8d8 2000 	ldr.w	r2, [r8]
 8009cee:	3a01      	subs	r2, #1
 8009cf0:	42b2      	cmp	r2, r6
 8009cf2:	d10a      	bne.n	8009d0a <__gethex+0x3b8>
 8009cf4:	1171      	asrs	r1, r6, #5
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f006 061f 	and.w	r6, r6, #31
 8009cfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d00:	fa02 f606 	lsl.w	r6, r2, r6
 8009d04:	421e      	tst	r6, r3
 8009d06:	bf18      	it	ne
 8009d08:	4617      	movne	r7, r2
 8009d0a:	f047 0720 	orr.w	r7, r7, #32
 8009d0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d10:	601d      	str	r5, [r3, #0]
 8009d12:	9b06      	ldr	r3, [sp, #24]
 8009d14:	601c      	str	r4, [r3, #0]
 8009d16:	e6a4      	b.n	8009a62 <__gethex+0x110>
 8009d18:	4299      	cmp	r1, r3
 8009d1a:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d1e:	d8d8      	bhi.n	8009cd2 <__gethex+0x380>
 8009d20:	68ab      	ldr	r3, [r5, #8]
 8009d22:	4599      	cmp	r9, r3
 8009d24:	db12      	blt.n	8009d4c <__gethex+0x3fa>
 8009d26:	6869      	ldr	r1, [r5, #4]
 8009d28:	9802      	ldr	r0, [sp, #8]
 8009d2a:	3101      	adds	r1, #1
 8009d2c:	f000 f985 	bl	800a03a <_Balloc>
 8009d30:	692a      	ldr	r2, [r5, #16]
 8009d32:	3202      	adds	r2, #2
 8009d34:	f105 010c 	add.w	r1, r5, #12
 8009d38:	4683      	mov	fp, r0
 8009d3a:	0092      	lsls	r2, r2, #2
 8009d3c:	300c      	adds	r0, #12
 8009d3e:	f000 f971 	bl	800a024 <memcpy>
 8009d42:	4629      	mov	r1, r5
 8009d44:	9802      	ldr	r0, [sp, #8]
 8009d46:	f000 f9ac 	bl	800a0a2 <_Bfree>
 8009d4a:	465d      	mov	r5, fp
 8009d4c:	692b      	ldr	r3, [r5, #16]
 8009d4e:	1c5a      	adds	r2, r3, #1
 8009d50:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009d54:	612a      	str	r2, [r5, #16]
 8009d56:	2201      	movs	r2, #1
 8009d58:	615a      	str	r2, [r3, #20]
 8009d5a:	e7c2      	b.n	8009ce2 <__gethex+0x390>
 8009d5c:	692a      	ldr	r2, [r5, #16]
 8009d5e:	454a      	cmp	r2, r9
 8009d60:	dd0b      	ble.n	8009d7a <__gethex+0x428>
 8009d62:	2101      	movs	r1, #1
 8009d64:	4628      	mov	r0, r5
 8009d66:	f7ff fda5 	bl	80098b4 <rshift>
 8009d6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d6e:	3401      	adds	r4, #1
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	f6ff aed9 	blt.w	8009b28 <__gethex+0x1d6>
 8009d76:	2701      	movs	r7, #1
 8009d78:	e7c7      	b.n	8009d0a <__gethex+0x3b8>
 8009d7a:	f016 061f 	ands.w	r6, r6, #31
 8009d7e:	d0fa      	beq.n	8009d76 <__gethex+0x424>
 8009d80:	449a      	add	sl, r3
 8009d82:	f1c6 0620 	rsb	r6, r6, #32
 8009d86:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009d8a:	f000 fa1a 	bl	800a1c2 <__hi0bits>
 8009d8e:	42b0      	cmp	r0, r6
 8009d90:	dbe7      	blt.n	8009d62 <__gethex+0x410>
 8009d92:	e7f0      	b.n	8009d76 <__gethex+0x424>

08009d94 <L_shift>:
 8009d94:	f1c2 0208 	rsb	r2, r2, #8
 8009d98:	0092      	lsls	r2, r2, #2
 8009d9a:	b570      	push	{r4, r5, r6, lr}
 8009d9c:	f1c2 0620 	rsb	r6, r2, #32
 8009da0:	6843      	ldr	r3, [r0, #4]
 8009da2:	6804      	ldr	r4, [r0, #0]
 8009da4:	fa03 f506 	lsl.w	r5, r3, r6
 8009da8:	432c      	orrs	r4, r5
 8009daa:	40d3      	lsrs	r3, r2
 8009dac:	6004      	str	r4, [r0, #0]
 8009dae:	f840 3f04 	str.w	r3, [r0, #4]!
 8009db2:	4288      	cmp	r0, r1
 8009db4:	d3f4      	bcc.n	8009da0 <L_shift+0xc>
 8009db6:	bd70      	pop	{r4, r5, r6, pc}

08009db8 <__match>:
 8009db8:	b530      	push	{r4, r5, lr}
 8009dba:	6803      	ldr	r3, [r0, #0]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc2:	b914      	cbnz	r4, 8009dca <__match+0x12>
 8009dc4:	6003      	str	r3, [r0, #0]
 8009dc6:	2001      	movs	r0, #1
 8009dc8:	bd30      	pop	{r4, r5, pc}
 8009dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009dd2:	2d19      	cmp	r5, #25
 8009dd4:	bf98      	it	ls
 8009dd6:	3220      	addls	r2, #32
 8009dd8:	42a2      	cmp	r2, r4
 8009dda:	d0f0      	beq.n	8009dbe <__match+0x6>
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e7f3      	b.n	8009dc8 <__match+0x10>

08009de0 <__hexnan>:
 8009de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	680b      	ldr	r3, [r1, #0]
 8009de6:	6801      	ldr	r1, [r0, #0]
 8009de8:	115f      	asrs	r7, r3, #5
 8009dea:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009dee:	f013 031f 	ands.w	r3, r3, #31
 8009df2:	b087      	sub	sp, #28
 8009df4:	bf18      	it	ne
 8009df6:	3704      	addne	r7, #4
 8009df8:	2500      	movs	r5, #0
 8009dfa:	1f3e      	subs	r6, r7, #4
 8009dfc:	4682      	mov	sl, r0
 8009dfe:	4690      	mov	r8, r2
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	f847 5c04 	str.w	r5, [r7, #-4]
 8009e06:	46b1      	mov	r9, r6
 8009e08:	4634      	mov	r4, r6
 8009e0a:	9502      	str	r5, [sp, #8]
 8009e0c:	46ab      	mov	fp, r5
 8009e0e:	784a      	ldrb	r2, [r1, #1]
 8009e10:	1c4b      	adds	r3, r1, #1
 8009e12:	9303      	str	r3, [sp, #12]
 8009e14:	b342      	cbz	r2, 8009e68 <__hexnan+0x88>
 8009e16:	4610      	mov	r0, r2
 8009e18:	9105      	str	r1, [sp, #20]
 8009e1a:	9204      	str	r2, [sp, #16]
 8009e1c:	f7ff fd84 	bl	8009928 <__hexdig_fun>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d143      	bne.n	8009eac <__hexnan+0xcc>
 8009e24:	9a04      	ldr	r2, [sp, #16]
 8009e26:	9905      	ldr	r1, [sp, #20]
 8009e28:	2a20      	cmp	r2, #32
 8009e2a:	d818      	bhi.n	8009e5e <__hexnan+0x7e>
 8009e2c:	9b02      	ldr	r3, [sp, #8]
 8009e2e:	459b      	cmp	fp, r3
 8009e30:	dd13      	ble.n	8009e5a <__hexnan+0x7a>
 8009e32:	454c      	cmp	r4, r9
 8009e34:	d206      	bcs.n	8009e44 <__hexnan+0x64>
 8009e36:	2d07      	cmp	r5, #7
 8009e38:	dc04      	bgt.n	8009e44 <__hexnan+0x64>
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f7ff ffa8 	bl	8009d94 <L_shift>
 8009e44:	4544      	cmp	r4, r8
 8009e46:	d944      	bls.n	8009ed2 <__hexnan+0xf2>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	f1a4 0904 	sub.w	r9, r4, #4
 8009e4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e52:	f8cd b008 	str.w	fp, [sp, #8]
 8009e56:	464c      	mov	r4, r9
 8009e58:	461d      	mov	r5, r3
 8009e5a:	9903      	ldr	r1, [sp, #12]
 8009e5c:	e7d7      	b.n	8009e0e <__hexnan+0x2e>
 8009e5e:	2a29      	cmp	r2, #41	; 0x29
 8009e60:	d14a      	bne.n	8009ef8 <__hexnan+0x118>
 8009e62:	3102      	adds	r1, #2
 8009e64:	f8ca 1000 	str.w	r1, [sl]
 8009e68:	f1bb 0f00 	cmp.w	fp, #0
 8009e6c:	d044      	beq.n	8009ef8 <__hexnan+0x118>
 8009e6e:	454c      	cmp	r4, r9
 8009e70:	d206      	bcs.n	8009e80 <__hexnan+0xa0>
 8009e72:	2d07      	cmp	r5, #7
 8009e74:	dc04      	bgt.n	8009e80 <__hexnan+0xa0>
 8009e76:	462a      	mov	r2, r5
 8009e78:	4649      	mov	r1, r9
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f7ff ff8a 	bl	8009d94 <L_shift>
 8009e80:	4544      	cmp	r4, r8
 8009e82:	d928      	bls.n	8009ed6 <__hexnan+0xf6>
 8009e84:	4643      	mov	r3, r8
 8009e86:	f854 2b04 	ldr.w	r2, [r4], #4
 8009e8a:	f843 2b04 	str.w	r2, [r3], #4
 8009e8e:	42a6      	cmp	r6, r4
 8009e90:	d2f9      	bcs.n	8009e86 <__hexnan+0xa6>
 8009e92:	2200      	movs	r2, #0
 8009e94:	f843 2b04 	str.w	r2, [r3], #4
 8009e98:	429e      	cmp	r6, r3
 8009e9a:	d2fb      	bcs.n	8009e94 <__hexnan+0xb4>
 8009e9c:	6833      	ldr	r3, [r6, #0]
 8009e9e:	b91b      	cbnz	r3, 8009ea8 <__hexnan+0xc8>
 8009ea0:	4546      	cmp	r6, r8
 8009ea2:	d127      	bne.n	8009ef4 <__hexnan+0x114>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	6033      	str	r3, [r6, #0]
 8009ea8:	2005      	movs	r0, #5
 8009eaa:	e026      	b.n	8009efa <__hexnan+0x11a>
 8009eac:	3501      	adds	r5, #1
 8009eae:	2d08      	cmp	r5, #8
 8009eb0:	f10b 0b01 	add.w	fp, fp, #1
 8009eb4:	dd06      	ble.n	8009ec4 <__hexnan+0xe4>
 8009eb6:	4544      	cmp	r4, r8
 8009eb8:	d9cf      	bls.n	8009e5a <__hexnan+0x7a>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ec0:	2501      	movs	r5, #1
 8009ec2:	3c04      	subs	r4, #4
 8009ec4:	6822      	ldr	r2, [r4, #0]
 8009ec6:	f000 000f 	and.w	r0, r0, #15
 8009eca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009ece:	6020      	str	r0, [r4, #0]
 8009ed0:	e7c3      	b.n	8009e5a <__hexnan+0x7a>
 8009ed2:	2508      	movs	r5, #8
 8009ed4:	e7c1      	b.n	8009e5a <__hexnan+0x7a>
 8009ed6:	9b01      	ldr	r3, [sp, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0df      	beq.n	8009e9c <__hexnan+0xbc>
 8009edc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee0:	f1c3 0320 	rsb	r3, r3, #32
 8009ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ee8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009eec:	401a      	ands	r2, r3
 8009eee:	f847 2c04 	str.w	r2, [r7, #-4]
 8009ef2:	e7d3      	b.n	8009e9c <__hexnan+0xbc>
 8009ef4:	3e04      	subs	r6, #4
 8009ef6:	e7d1      	b.n	8009e9c <__hexnan+0xbc>
 8009ef8:	2004      	movs	r0, #4
 8009efa:	b007      	add	sp, #28
 8009efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f00 <__locale_ctype_ptr_l>:
 8009f00:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009f04:	4770      	bx	lr

08009f06 <__localeconv_l>:
 8009f06:	30f0      	adds	r0, #240	; 0xf0
 8009f08:	4770      	bx	lr
	...

08009f0c <_localeconv_r>:
 8009f0c:	4b04      	ldr	r3, [pc, #16]	; (8009f20 <_localeconv_r+0x14>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6a18      	ldr	r0, [r3, #32]
 8009f12:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <_localeconv_r+0x18>)
 8009f14:	2800      	cmp	r0, #0
 8009f16:	bf08      	it	eq
 8009f18:	4618      	moveq	r0, r3
 8009f1a:	30f0      	adds	r0, #240	; 0xf0
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	2000000c 	.word	0x2000000c
 8009f24:	20000070 	.word	0x20000070

08009f28 <__swhatbuf_r>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	460e      	mov	r6, r1
 8009f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f30:	2900      	cmp	r1, #0
 8009f32:	b096      	sub	sp, #88	; 0x58
 8009f34:	4614      	mov	r4, r2
 8009f36:	461d      	mov	r5, r3
 8009f38:	da07      	bge.n	8009f4a <__swhatbuf_r+0x22>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	89b3      	ldrh	r3, [r6, #12]
 8009f40:	061a      	lsls	r2, r3, #24
 8009f42:	d410      	bmi.n	8009f66 <__swhatbuf_r+0x3e>
 8009f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f48:	e00e      	b.n	8009f68 <__swhatbuf_r+0x40>
 8009f4a:	466a      	mov	r2, sp
 8009f4c:	f001 f850 	bl	800aff0 <_fstat_r>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	dbf2      	blt.n	8009f3a <__swhatbuf_r+0x12>
 8009f54:	9a01      	ldr	r2, [sp, #4]
 8009f56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f5e:	425a      	negs	r2, r3
 8009f60:	415a      	adcs	r2, r3
 8009f62:	602a      	str	r2, [r5, #0]
 8009f64:	e7ee      	b.n	8009f44 <__swhatbuf_r+0x1c>
 8009f66:	2340      	movs	r3, #64	; 0x40
 8009f68:	2000      	movs	r0, #0
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	b016      	add	sp, #88	; 0x58
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}

08009f70 <__smakebuf_r>:
 8009f70:	898b      	ldrh	r3, [r1, #12]
 8009f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f74:	079d      	lsls	r5, r3, #30
 8009f76:	4606      	mov	r6, r0
 8009f78:	460c      	mov	r4, r1
 8009f7a:	d507      	bpl.n	8009f8c <__smakebuf_r+0x1c>
 8009f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	6123      	str	r3, [r4, #16]
 8009f84:	2301      	movs	r3, #1
 8009f86:	6163      	str	r3, [r4, #20]
 8009f88:	b002      	add	sp, #8
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	ab01      	add	r3, sp, #4
 8009f8e:	466a      	mov	r2, sp
 8009f90:	f7ff ffca 	bl	8009f28 <__swhatbuf_r>
 8009f94:	9900      	ldr	r1, [sp, #0]
 8009f96:	4605      	mov	r5, r0
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f000 fca9 	bl	800a8f0 <_malloc_r>
 8009f9e:	b948      	cbnz	r0, 8009fb4 <__smakebuf_r+0x44>
 8009fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fa4:	059a      	lsls	r2, r3, #22
 8009fa6:	d4ef      	bmi.n	8009f88 <__smakebuf_r+0x18>
 8009fa8:	f023 0303 	bic.w	r3, r3, #3
 8009fac:	f043 0302 	orr.w	r3, r3, #2
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	e7e3      	b.n	8009f7c <__smakebuf_r+0xc>
 8009fb4:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <__smakebuf_r+0x7c>)
 8009fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	6020      	str	r0, [r4, #0]
 8009fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc0:	81a3      	strh	r3, [r4, #12]
 8009fc2:	9b00      	ldr	r3, [sp, #0]
 8009fc4:	6163      	str	r3, [r4, #20]
 8009fc6:	9b01      	ldr	r3, [sp, #4]
 8009fc8:	6120      	str	r0, [r4, #16]
 8009fca:	b15b      	cbz	r3, 8009fe4 <__smakebuf_r+0x74>
 8009fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f001 f81f 	bl	800b014 <_isatty_r>
 8009fd6:	b128      	cbz	r0, 8009fe4 <__smakebuf_r+0x74>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f023 0303 	bic.w	r3, r3, #3
 8009fde:	f043 0301 	orr.w	r3, r3, #1
 8009fe2:	81a3      	strh	r3, [r4, #12]
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	431d      	orrs	r5, r3
 8009fe8:	81a5      	strh	r5, [r4, #12]
 8009fea:	e7cd      	b.n	8009f88 <__smakebuf_r+0x18>
 8009fec:	08009769 	.word	0x08009769

08009ff0 <malloc>:
 8009ff0:	4b02      	ldr	r3, [pc, #8]	; (8009ffc <malloc+0xc>)
 8009ff2:	4601      	mov	r1, r0
 8009ff4:	6818      	ldr	r0, [r3, #0]
 8009ff6:	f000 bc7b 	b.w	800a8f0 <_malloc_r>
 8009ffa:	bf00      	nop
 8009ffc:	2000000c 	.word	0x2000000c

0800a000 <__ascii_mbtowc>:
 800a000:	b082      	sub	sp, #8
 800a002:	b901      	cbnz	r1, 800a006 <__ascii_mbtowc+0x6>
 800a004:	a901      	add	r1, sp, #4
 800a006:	b142      	cbz	r2, 800a01a <__ascii_mbtowc+0x1a>
 800a008:	b14b      	cbz	r3, 800a01e <__ascii_mbtowc+0x1e>
 800a00a:	7813      	ldrb	r3, [r2, #0]
 800a00c:	600b      	str	r3, [r1, #0]
 800a00e:	7812      	ldrb	r2, [r2, #0]
 800a010:	1c10      	adds	r0, r2, #0
 800a012:	bf18      	it	ne
 800a014:	2001      	movne	r0, #1
 800a016:	b002      	add	sp, #8
 800a018:	4770      	bx	lr
 800a01a:	4610      	mov	r0, r2
 800a01c:	e7fb      	b.n	800a016 <__ascii_mbtowc+0x16>
 800a01e:	f06f 0001 	mvn.w	r0, #1
 800a022:	e7f8      	b.n	800a016 <__ascii_mbtowc+0x16>

0800a024 <memcpy>:
 800a024:	b510      	push	{r4, lr}
 800a026:	1e43      	subs	r3, r0, #1
 800a028:	440a      	add	r2, r1
 800a02a:	4291      	cmp	r1, r2
 800a02c:	d100      	bne.n	800a030 <memcpy+0xc>
 800a02e:	bd10      	pop	{r4, pc}
 800a030:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a034:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a038:	e7f7      	b.n	800a02a <memcpy+0x6>

0800a03a <_Balloc>:
 800a03a:	b570      	push	{r4, r5, r6, lr}
 800a03c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a03e:	4604      	mov	r4, r0
 800a040:	460e      	mov	r6, r1
 800a042:	b93d      	cbnz	r5, 800a054 <_Balloc+0x1a>
 800a044:	2010      	movs	r0, #16
 800a046:	f7ff ffd3 	bl	8009ff0 <malloc>
 800a04a:	6260      	str	r0, [r4, #36]	; 0x24
 800a04c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a050:	6005      	str	r5, [r0, #0]
 800a052:	60c5      	str	r5, [r0, #12]
 800a054:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a056:	68eb      	ldr	r3, [r5, #12]
 800a058:	b183      	cbz	r3, 800a07c <_Balloc+0x42>
 800a05a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a062:	b9b8      	cbnz	r0, 800a094 <_Balloc+0x5a>
 800a064:	2101      	movs	r1, #1
 800a066:	fa01 f506 	lsl.w	r5, r1, r6
 800a06a:	1d6a      	adds	r2, r5, #5
 800a06c:	0092      	lsls	r2, r2, #2
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 fbe1 	bl	800a836 <_calloc_r>
 800a074:	b160      	cbz	r0, 800a090 <_Balloc+0x56>
 800a076:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a07a:	e00e      	b.n	800a09a <_Balloc+0x60>
 800a07c:	2221      	movs	r2, #33	; 0x21
 800a07e:	2104      	movs	r1, #4
 800a080:	4620      	mov	r0, r4
 800a082:	f000 fbd8 	bl	800a836 <_calloc_r>
 800a086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a088:	60e8      	str	r0, [r5, #12]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e4      	bne.n	800a05a <_Balloc+0x20>
 800a090:	2000      	movs	r0, #0
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	6802      	ldr	r2, [r0, #0]
 800a096:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a09a:	2300      	movs	r3, #0
 800a09c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0a0:	e7f7      	b.n	800a092 <_Balloc+0x58>

0800a0a2 <_Bfree>:
 800a0a2:	b570      	push	{r4, r5, r6, lr}
 800a0a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	b93c      	cbnz	r4, 800a0bc <_Bfree+0x1a>
 800a0ac:	2010      	movs	r0, #16
 800a0ae:	f7ff ff9f 	bl	8009ff0 <malloc>
 800a0b2:	6270      	str	r0, [r6, #36]	; 0x24
 800a0b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0b8:	6004      	str	r4, [r0, #0]
 800a0ba:	60c4      	str	r4, [r0, #12]
 800a0bc:	b13d      	cbz	r5, 800a0ce <_Bfree+0x2c>
 800a0be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a0c0:	686a      	ldr	r2, [r5, #4]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0c8:	6029      	str	r1, [r5, #0]
 800a0ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a0ce:	bd70      	pop	{r4, r5, r6, pc}

0800a0d0 <__multadd>:
 800a0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d4:	690d      	ldr	r5, [r1, #16]
 800a0d6:	461f      	mov	r7, r3
 800a0d8:	4606      	mov	r6, r0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	f101 0c14 	add.w	ip, r1, #20
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f8dc 0000 	ldr.w	r0, [ip]
 800a0e6:	b281      	uxth	r1, r0
 800a0e8:	fb02 7101 	mla	r1, r2, r1, r7
 800a0ec:	0c0f      	lsrs	r7, r1, #16
 800a0ee:	0c00      	lsrs	r0, r0, #16
 800a0f0:	fb02 7000 	mla	r0, r2, r0, r7
 800a0f4:	b289      	uxth	r1, r1
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a0fc:	429d      	cmp	r5, r3
 800a0fe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a102:	f84c 1b04 	str.w	r1, [ip], #4
 800a106:	dcec      	bgt.n	800a0e2 <__multadd+0x12>
 800a108:	b1d7      	cbz	r7, 800a140 <__multadd+0x70>
 800a10a:	68a3      	ldr	r3, [r4, #8]
 800a10c:	42ab      	cmp	r3, r5
 800a10e:	dc12      	bgt.n	800a136 <__multadd+0x66>
 800a110:	6861      	ldr	r1, [r4, #4]
 800a112:	4630      	mov	r0, r6
 800a114:	3101      	adds	r1, #1
 800a116:	f7ff ff90 	bl	800a03a <_Balloc>
 800a11a:	6922      	ldr	r2, [r4, #16]
 800a11c:	3202      	adds	r2, #2
 800a11e:	f104 010c 	add.w	r1, r4, #12
 800a122:	4680      	mov	r8, r0
 800a124:	0092      	lsls	r2, r2, #2
 800a126:	300c      	adds	r0, #12
 800a128:	f7ff ff7c 	bl	800a024 <memcpy>
 800a12c:	4621      	mov	r1, r4
 800a12e:	4630      	mov	r0, r6
 800a130:	f7ff ffb7 	bl	800a0a2 <_Bfree>
 800a134:	4644      	mov	r4, r8
 800a136:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a13a:	3501      	adds	r5, #1
 800a13c:	615f      	str	r7, [r3, #20]
 800a13e:	6125      	str	r5, [r4, #16]
 800a140:	4620      	mov	r0, r4
 800a142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a146 <__s2b>:
 800a146:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a14a:	460c      	mov	r4, r1
 800a14c:	4615      	mov	r5, r2
 800a14e:	461f      	mov	r7, r3
 800a150:	2209      	movs	r2, #9
 800a152:	3308      	adds	r3, #8
 800a154:	4606      	mov	r6, r0
 800a156:	fb93 f3f2 	sdiv	r3, r3, r2
 800a15a:	2100      	movs	r1, #0
 800a15c:	2201      	movs	r2, #1
 800a15e:	429a      	cmp	r2, r3
 800a160:	db20      	blt.n	800a1a4 <__s2b+0x5e>
 800a162:	4630      	mov	r0, r6
 800a164:	f7ff ff69 	bl	800a03a <_Balloc>
 800a168:	9b08      	ldr	r3, [sp, #32]
 800a16a:	6143      	str	r3, [r0, #20]
 800a16c:	2d09      	cmp	r5, #9
 800a16e:	f04f 0301 	mov.w	r3, #1
 800a172:	6103      	str	r3, [r0, #16]
 800a174:	dd19      	ble.n	800a1aa <__s2b+0x64>
 800a176:	f104 0809 	add.w	r8, r4, #9
 800a17a:	46c1      	mov	r9, r8
 800a17c:	442c      	add	r4, r5
 800a17e:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a182:	4601      	mov	r1, r0
 800a184:	3b30      	subs	r3, #48	; 0x30
 800a186:	220a      	movs	r2, #10
 800a188:	4630      	mov	r0, r6
 800a18a:	f7ff ffa1 	bl	800a0d0 <__multadd>
 800a18e:	45a1      	cmp	r9, r4
 800a190:	d1f5      	bne.n	800a17e <__s2b+0x38>
 800a192:	eb08 0405 	add.w	r4, r8, r5
 800a196:	3c08      	subs	r4, #8
 800a198:	1b2d      	subs	r5, r5, r4
 800a19a:	1963      	adds	r3, r4, r5
 800a19c:	42bb      	cmp	r3, r7
 800a19e:	db07      	blt.n	800a1b0 <__s2b+0x6a>
 800a1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a4:	0052      	lsls	r2, r2, #1
 800a1a6:	3101      	adds	r1, #1
 800a1a8:	e7d9      	b.n	800a15e <__s2b+0x18>
 800a1aa:	340a      	adds	r4, #10
 800a1ac:	2509      	movs	r5, #9
 800a1ae:	e7f3      	b.n	800a198 <__s2b+0x52>
 800a1b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1b4:	4601      	mov	r1, r0
 800a1b6:	3b30      	subs	r3, #48	; 0x30
 800a1b8:	220a      	movs	r2, #10
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f7ff ff88 	bl	800a0d0 <__multadd>
 800a1c0:	e7eb      	b.n	800a19a <__s2b+0x54>

0800a1c2 <__hi0bits>:
 800a1c2:	0c02      	lsrs	r2, r0, #16
 800a1c4:	0412      	lsls	r2, r2, #16
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	b9b2      	cbnz	r2, 800a1f8 <__hi0bits+0x36>
 800a1ca:	0403      	lsls	r3, r0, #16
 800a1cc:	2010      	movs	r0, #16
 800a1ce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a1d2:	bf04      	itt	eq
 800a1d4:	021b      	lsleq	r3, r3, #8
 800a1d6:	3008      	addeq	r0, #8
 800a1d8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a1dc:	bf04      	itt	eq
 800a1de:	011b      	lsleq	r3, r3, #4
 800a1e0:	3004      	addeq	r0, #4
 800a1e2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a1e6:	bf04      	itt	eq
 800a1e8:	009b      	lsleq	r3, r3, #2
 800a1ea:	3002      	addeq	r0, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	db06      	blt.n	800a1fe <__hi0bits+0x3c>
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	d503      	bpl.n	800a1fc <__hi0bits+0x3a>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	4770      	bx	lr
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	e7e8      	b.n	800a1ce <__hi0bits+0xc>
 800a1fc:	2020      	movs	r0, #32
 800a1fe:	4770      	bx	lr

0800a200 <__lo0bits>:
 800a200:	6803      	ldr	r3, [r0, #0]
 800a202:	f013 0207 	ands.w	r2, r3, #7
 800a206:	4601      	mov	r1, r0
 800a208:	d00b      	beq.n	800a222 <__lo0bits+0x22>
 800a20a:	07da      	lsls	r2, r3, #31
 800a20c:	d423      	bmi.n	800a256 <__lo0bits+0x56>
 800a20e:	0798      	lsls	r0, r3, #30
 800a210:	bf49      	itett	mi
 800a212:	085b      	lsrmi	r3, r3, #1
 800a214:	089b      	lsrpl	r3, r3, #2
 800a216:	2001      	movmi	r0, #1
 800a218:	600b      	strmi	r3, [r1, #0]
 800a21a:	bf5c      	itt	pl
 800a21c:	600b      	strpl	r3, [r1, #0]
 800a21e:	2002      	movpl	r0, #2
 800a220:	4770      	bx	lr
 800a222:	b298      	uxth	r0, r3
 800a224:	b9a8      	cbnz	r0, 800a252 <__lo0bits+0x52>
 800a226:	0c1b      	lsrs	r3, r3, #16
 800a228:	2010      	movs	r0, #16
 800a22a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a22e:	bf04      	itt	eq
 800a230:	0a1b      	lsreq	r3, r3, #8
 800a232:	3008      	addeq	r0, #8
 800a234:	071a      	lsls	r2, r3, #28
 800a236:	bf04      	itt	eq
 800a238:	091b      	lsreq	r3, r3, #4
 800a23a:	3004      	addeq	r0, #4
 800a23c:	079a      	lsls	r2, r3, #30
 800a23e:	bf04      	itt	eq
 800a240:	089b      	lsreq	r3, r3, #2
 800a242:	3002      	addeq	r0, #2
 800a244:	07da      	lsls	r2, r3, #31
 800a246:	d402      	bmi.n	800a24e <__lo0bits+0x4e>
 800a248:	085b      	lsrs	r3, r3, #1
 800a24a:	d006      	beq.n	800a25a <__lo0bits+0x5a>
 800a24c:	3001      	adds	r0, #1
 800a24e:	600b      	str	r3, [r1, #0]
 800a250:	4770      	bx	lr
 800a252:	4610      	mov	r0, r2
 800a254:	e7e9      	b.n	800a22a <__lo0bits+0x2a>
 800a256:	2000      	movs	r0, #0
 800a258:	4770      	bx	lr
 800a25a:	2020      	movs	r0, #32
 800a25c:	4770      	bx	lr

0800a25e <__i2b>:
 800a25e:	b510      	push	{r4, lr}
 800a260:	460c      	mov	r4, r1
 800a262:	2101      	movs	r1, #1
 800a264:	f7ff fee9 	bl	800a03a <_Balloc>
 800a268:	2201      	movs	r2, #1
 800a26a:	6144      	str	r4, [r0, #20]
 800a26c:	6102      	str	r2, [r0, #16]
 800a26e:	bd10      	pop	{r4, pc}

0800a270 <__multiply>:
 800a270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	4614      	mov	r4, r2
 800a276:	690a      	ldr	r2, [r1, #16]
 800a278:	6923      	ldr	r3, [r4, #16]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	bfb8      	it	lt
 800a27e:	460b      	movlt	r3, r1
 800a280:	4688      	mov	r8, r1
 800a282:	bfbc      	itt	lt
 800a284:	46a0      	movlt	r8, r4
 800a286:	461c      	movlt	r4, r3
 800a288:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a28c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a290:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a294:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a298:	eb07 0609 	add.w	r6, r7, r9
 800a29c:	42b3      	cmp	r3, r6
 800a29e:	bfb8      	it	lt
 800a2a0:	3101      	addlt	r1, #1
 800a2a2:	f7ff feca 	bl	800a03a <_Balloc>
 800a2a6:	f100 0514 	add.w	r5, r0, #20
 800a2aa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a2ae:	462b      	mov	r3, r5
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	4573      	cmp	r3, lr
 800a2b4:	d316      	bcc.n	800a2e4 <__multiply+0x74>
 800a2b6:	f104 0214 	add.w	r2, r4, #20
 800a2ba:	f108 0114 	add.w	r1, r8, #20
 800a2be:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a2c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	9b00      	ldr	r3, [sp, #0]
 800a2ca:	9201      	str	r2, [sp, #4]
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d80c      	bhi.n	800a2ea <__multiply+0x7a>
 800a2d0:	2e00      	cmp	r6, #0
 800a2d2:	dd03      	ble.n	800a2dc <__multiply+0x6c>
 800a2d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d05d      	beq.n	800a398 <__multiply+0x128>
 800a2dc:	6106      	str	r6, [r0, #16]
 800a2de:	b003      	add	sp, #12
 800a2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e4:	f843 2b04 	str.w	r2, [r3], #4
 800a2e8:	e7e3      	b.n	800a2b2 <__multiply+0x42>
 800a2ea:	f8b2 b000 	ldrh.w	fp, [r2]
 800a2ee:	f1bb 0f00 	cmp.w	fp, #0
 800a2f2:	d023      	beq.n	800a33c <__multiply+0xcc>
 800a2f4:	4689      	mov	r9, r1
 800a2f6:	46ac      	mov	ip, r5
 800a2f8:	f04f 0800 	mov.w	r8, #0
 800a2fc:	f859 4b04 	ldr.w	r4, [r9], #4
 800a300:	f8dc a000 	ldr.w	sl, [ip]
 800a304:	b2a3      	uxth	r3, r4
 800a306:	fa1f fa8a 	uxth.w	sl, sl
 800a30a:	fb0b a303 	mla	r3, fp, r3, sl
 800a30e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a312:	f8dc 4000 	ldr.w	r4, [ip]
 800a316:	4443      	add	r3, r8
 800a318:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a31c:	fb0b 840a 	mla	r4, fp, sl, r8
 800a320:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a324:	46e2      	mov	sl, ip
 800a326:	b29b      	uxth	r3, r3
 800a328:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a32c:	454f      	cmp	r7, r9
 800a32e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a332:	f84a 3b04 	str.w	r3, [sl], #4
 800a336:	d82b      	bhi.n	800a390 <__multiply+0x120>
 800a338:	f8cc 8004 	str.w	r8, [ip, #4]
 800a33c:	9b01      	ldr	r3, [sp, #4]
 800a33e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a342:	3204      	adds	r2, #4
 800a344:	f1ba 0f00 	cmp.w	sl, #0
 800a348:	d020      	beq.n	800a38c <__multiply+0x11c>
 800a34a:	682b      	ldr	r3, [r5, #0]
 800a34c:	4689      	mov	r9, r1
 800a34e:	46a8      	mov	r8, r5
 800a350:	f04f 0b00 	mov.w	fp, #0
 800a354:	f8b9 c000 	ldrh.w	ip, [r9]
 800a358:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a35c:	fb0a 440c 	mla	r4, sl, ip, r4
 800a360:	445c      	add	r4, fp
 800a362:	46c4      	mov	ip, r8
 800a364:	b29b      	uxth	r3, r3
 800a366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a36a:	f84c 3b04 	str.w	r3, [ip], #4
 800a36e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a372:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a376:	0c1b      	lsrs	r3, r3, #16
 800a378:	fb0a b303 	mla	r3, sl, r3, fp
 800a37c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a380:	454f      	cmp	r7, r9
 800a382:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a386:	d805      	bhi.n	800a394 <__multiply+0x124>
 800a388:	f8c8 3004 	str.w	r3, [r8, #4]
 800a38c:	3504      	adds	r5, #4
 800a38e:	e79b      	b.n	800a2c8 <__multiply+0x58>
 800a390:	46d4      	mov	ip, sl
 800a392:	e7b3      	b.n	800a2fc <__multiply+0x8c>
 800a394:	46e0      	mov	r8, ip
 800a396:	e7dd      	b.n	800a354 <__multiply+0xe4>
 800a398:	3e01      	subs	r6, #1
 800a39a:	e799      	b.n	800a2d0 <__multiply+0x60>

0800a39c <__pow5mult>:
 800a39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a0:	4615      	mov	r5, r2
 800a3a2:	f012 0203 	ands.w	r2, r2, #3
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460f      	mov	r7, r1
 800a3aa:	d007      	beq.n	800a3bc <__pow5mult+0x20>
 800a3ac:	3a01      	subs	r2, #1
 800a3ae:	4c21      	ldr	r4, [pc, #132]	; (800a434 <__pow5mult+0x98>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3b6:	f7ff fe8b 	bl	800a0d0 <__multadd>
 800a3ba:	4607      	mov	r7, r0
 800a3bc:	10ad      	asrs	r5, r5, #2
 800a3be:	d035      	beq.n	800a42c <__pow5mult+0x90>
 800a3c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3c2:	b93c      	cbnz	r4, 800a3d4 <__pow5mult+0x38>
 800a3c4:	2010      	movs	r0, #16
 800a3c6:	f7ff fe13 	bl	8009ff0 <malloc>
 800a3ca:	6270      	str	r0, [r6, #36]	; 0x24
 800a3cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3d0:	6004      	str	r4, [r0, #0]
 800a3d2:	60c4      	str	r4, [r0, #12]
 800a3d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3dc:	b94c      	cbnz	r4, 800a3f2 <__pow5mult+0x56>
 800a3de:	f240 2171 	movw	r1, #625	; 0x271
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f7ff ff3b 	bl	800a25e <__i2b>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	6003      	str	r3, [r0, #0]
 800a3f2:	f04f 0800 	mov.w	r8, #0
 800a3f6:	07eb      	lsls	r3, r5, #31
 800a3f8:	d50a      	bpl.n	800a410 <__pow5mult+0x74>
 800a3fa:	4639      	mov	r1, r7
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4630      	mov	r0, r6
 800a400:	f7ff ff36 	bl	800a270 <__multiply>
 800a404:	4639      	mov	r1, r7
 800a406:	4681      	mov	r9, r0
 800a408:	4630      	mov	r0, r6
 800a40a:	f7ff fe4a 	bl	800a0a2 <_Bfree>
 800a40e:	464f      	mov	r7, r9
 800a410:	106d      	asrs	r5, r5, #1
 800a412:	d00b      	beq.n	800a42c <__pow5mult+0x90>
 800a414:	6820      	ldr	r0, [r4, #0]
 800a416:	b938      	cbnz	r0, 800a428 <__pow5mult+0x8c>
 800a418:	4622      	mov	r2, r4
 800a41a:	4621      	mov	r1, r4
 800a41c:	4630      	mov	r0, r6
 800a41e:	f7ff ff27 	bl	800a270 <__multiply>
 800a422:	6020      	str	r0, [r4, #0]
 800a424:	f8c0 8000 	str.w	r8, [r0]
 800a428:	4604      	mov	r4, r0
 800a42a:	e7e4      	b.n	800a3f6 <__pow5mult+0x5a>
 800a42c:	4638      	mov	r0, r7
 800a42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a432:	bf00      	nop
 800a434:	0800b510 	.word	0x0800b510

0800a438 <__lshift>:
 800a438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a43c:	460c      	mov	r4, r1
 800a43e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a442:	6923      	ldr	r3, [r4, #16]
 800a444:	6849      	ldr	r1, [r1, #4]
 800a446:	eb0a 0903 	add.w	r9, sl, r3
 800a44a:	68a3      	ldr	r3, [r4, #8]
 800a44c:	4607      	mov	r7, r0
 800a44e:	4616      	mov	r6, r2
 800a450:	f109 0501 	add.w	r5, r9, #1
 800a454:	42ab      	cmp	r3, r5
 800a456:	db32      	blt.n	800a4be <__lshift+0x86>
 800a458:	4638      	mov	r0, r7
 800a45a:	f7ff fdee 	bl	800a03a <_Balloc>
 800a45e:	2300      	movs	r3, #0
 800a460:	4680      	mov	r8, r0
 800a462:	f100 0114 	add.w	r1, r0, #20
 800a466:	461a      	mov	r2, r3
 800a468:	4553      	cmp	r3, sl
 800a46a:	db2b      	blt.n	800a4c4 <__lshift+0x8c>
 800a46c:	6920      	ldr	r0, [r4, #16]
 800a46e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a472:	f104 0314 	add.w	r3, r4, #20
 800a476:	f016 021f 	ands.w	r2, r6, #31
 800a47a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a47e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a482:	d025      	beq.n	800a4d0 <__lshift+0x98>
 800a484:	f1c2 0e20 	rsb	lr, r2, #32
 800a488:	2000      	movs	r0, #0
 800a48a:	681e      	ldr	r6, [r3, #0]
 800a48c:	468a      	mov	sl, r1
 800a48e:	4096      	lsls	r6, r2
 800a490:	4330      	orrs	r0, r6
 800a492:	f84a 0b04 	str.w	r0, [sl], #4
 800a496:	f853 0b04 	ldr.w	r0, [r3], #4
 800a49a:	459c      	cmp	ip, r3
 800a49c:	fa20 f00e 	lsr.w	r0, r0, lr
 800a4a0:	d814      	bhi.n	800a4cc <__lshift+0x94>
 800a4a2:	6048      	str	r0, [r1, #4]
 800a4a4:	b108      	cbz	r0, 800a4aa <__lshift+0x72>
 800a4a6:	f109 0502 	add.w	r5, r9, #2
 800a4aa:	3d01      	subs	r5, #1
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	f8c8 5010 	str.w	r5, [r8, #16]
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	f7ff fdf5 	bl	800a0a2 <_Bfree>
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4be:	3101      	adds	r1, #1
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	e7c7      	b.n	800a454 <__lshift+0x1c>
 800a4c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	e7cd      	b.n	800a468 <__lshift+0x30>
 800a4cc:	4651      	mov	r1, sl
 800a4ce:	e7dc      	b.n	800a48a <__lshift+0x52>
 800a4d0:	3904      	subs	r1, #4
 800a4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4da:	459c      	cmp	ip, r3
 800a4dc:	d8f9      	bhi.n	800a4d2 <__lshift+0x9a>
 800a4de:	e7e4      	b.n	800a4aa <__lshift+0x72>

0800a4e0 <__mcmp>:
 800a4e0:	6903      	ldr	r3, [r0, #16]
 800a4e2:	690a      	ldr	r2, [r1, #16]
 800a4e4:	1a9b      	subs	r3, r3, r2
 800a4e6:	b530      	push	{r4, r5, lr}
 800a4e8:	d10c      	bne.n	800a504 <__mcmp+0x24>
 800a4ea:	0092      	lsls	r2, r2, #2
 800a4ec:	3014      	adds	r0, #20
 800a4ee:	3114      	adds	r1, #20
 800a4f0:	1884      	adds	r4, r0, r2
 800a4f2:	4411      	add	r1, r2
 800a4f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4fc:	4295      	cmp	r5, r2
 800a4fe:	d003      	beq.n	800a508 <__mcmp+0x28>
 800a500:	d305      	bcc.n	800a50e <__mcmp+0x2e>
 800a502:	2301      	movs	r3, #1
 800a504:	4618      	mov	r0, r3
 800a506:	bd30      	pop	{r4, r5, pc}
 800a508:	42a0      	cmp	r0, r4
 800a50a:	d3f3      	bcc.n	800a4f4 <__mcmp+0x14>
 800a50c:	e7fa      	b.n	800a504 <__mcmp+0x24>
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	e7f7      	b.n	800a504 <__mcmp+0x24>

0800a514 <__mdiff>:
 800a514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a518:	460d      	mov	r5, r1
 800a51a:	4607      	mov	r7, r0
 800a51c:	4611      	mov	r1, r2
 800a51e:	4628      	mov	r0, r5
 800a520:	4614      	mov	r4, r2
 800a522:	f7ff ffdd 	bl	800a4e0 <__mcmp>
 800a526:	1e06      	subs	r6, r0, #0
 800a528:	d108      	bne.n	800a53c <__mdiff+0x28>
 800a52a:	4631      	mov	r1, r6
 800a52c:	4638      	mov	r0, r7
 800a52e:	f7ff fd84 	bl	800a03a <_Balloc>
 800a532:	2301      	movs	r3, #1
 800a534:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53c:	bfa4      	itt	ge
 800a53e:	4623      	movge	r3, r4
 800a540:	462c      	movge	r4, r5
 800a542:	4638      	mov	r0, r7
 800a544:	6861      	ldr	r1, [r4, #4]
 800a546:	bfa6      	itte	ge
 800a548:	461d      	movge	r5, r3
 800a54a:	2600      	movge	r6, #0
 800a54c:	2601      	movlt	r6, #1
 800a54e:	f7ff fd74 	bl	800a03a <_Balloc>
 800a552:	692b      	ldr	r3, [r5, #16]
 800a554:	60c6      	str	r6, [r0, #12]
 800a556:	6926      	ldr	r6, [r4, #16]
 800a558:	f105 0914 	add.w	r9, r5, #20
 800a55c:	f104 0214 	add.w	r2, r4, #20
 800a560:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a564:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a568:	f100 0514 	add.w	r5, r0, #20
 800a56c:	f04f 0e00 	mov.w	lr, #0
 800a570:	f852 ab04 	ldr.w	sl, [r2], #4
 800a574:	f859 4b04 	ldr.w	r4, [r9], #4
 800a578:	fa1e f18a 	uxtah	r1, lr, sl
 800a57c:	b2a3      	uxth	r3, r4
 800a57e:	1ac9      	subs	r1, r1, r3
 800a580:	0c23      	lsrs	r3, r4, #16
 800a582:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a586:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a58a:	b289      	uxth	r1, r1
 800a58c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a590:	45c8      	cmp	r8, r9
 800a592:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a596:	4694      	mov	ip, r2
 800a598:	f845 3b04 	str.w	r3, [r5], #4
 800a59c:	d8e8      	bhi.n	800a570 <__mdiff+0x5c>
 800a59e:	45bc      	cmp	ip, r7
 800a5a0:	d304      	bcc.n	800a5ac <__mdiff+0x98>
 800a5a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a5a6:	b183      	cbz	r3, 800a5ca <__mdiff+0xb6>
 800a5a8:	6106      	str	r6, [r0, #16]
 800a5aa:	e7c5      	b.n	800a538 <__mdiff+0x24>
 800a5ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a5b0:	fa1e f381 	uxtah	r3, lr, r1
 800a5b4:	141a      	asrs	r2, r3, #16
 800a5b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a5c4:	f845 3b04 	str.w	r3, [r5], #4
 800a5c8:	e7e9      	b.n	800a59e <__mdiff+0x8a>
 800a5ca:	3e01      	subs	r6, #1
 800a5cc:	e7e9      	b.n	800a5a2 <__mdiff+0x8e>
	...

0800a5d0 <__ulp>:
 800a5d0:	4b12      	ldr	r3, [pc, #72]	; (800a61c <__ulp+0x4c>)
 800a5d2:	ee10 2a90 	vmov	r2, s1
 800a5d6:	401a      	ands	r2, r3
 800a5d8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	dd04      	ble.n	800a5ea <__ulp+0x1a>
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	ec41 0b10 	vmov	d0, r0, r1
 800a5e8:	4770      	bx	lr
 800a5ea:	425b      	negs	r3, r3
 800a5ec:	151b      	asrs	r3, r3, #20
 800a5ee:	2b13      	cmp	r3, #19
 800a5f0:	f04f 0000 	mov.w	r0, #0
 800a5f4:	f04f 0100 	mov.w	r1, #0
 800a5f8:	dc04      	bgt.n	800a604 <__ulp+0x34>
 800a5fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a5fe:	fa42 f103 	asr.w	r1, r2, r3
 800a602:	e7ef      	b.n	800a5e4 <__ulp+0x14>
 800a604:	3b14      	subs	r3, #20
 800a606:	2b1e      	cmp	r3, #30
 800a608:	f04f 0201 	mov.w	r2, #1
 800a60c:	bfda      	itte	le
 800a60e:	f1c3 031f 	rsble	r3, r3, #31
 800a612:	fa02 f303 	lslle.w	r3, r2, r3
 800a616:	4613      	movgt	r3, r2
 800a618:	4618      	mov	r0, r3
 800a61a:	e7e3      	b.n	800a5e4 <__ulp+0x14>
 800a61c:	7ff00000 	.word	0x7ff00000

0800a620 <__b2d>:
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a622:	6905      	ldr	r5, [r0, #16]
 800a624:	f100 0714 	add.w	r7, r0, #20
 800a628:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a62c:	1f2e      	subs	r6, r5, #4
 800a62e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a632:	4620      	mov	r0, r4
 800a634:	f7ff fdc5 	bl	800a1c2 <__hi0bits>
 800a638:	f1c0 0320 	rsb	r3, r0, #32
 800a63c:	280a      	cmp	r0, #10
 800a63e:	600b      	str	r3, [r1, #0]
 800a640:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a6b8 <__b2d+0x98>
 800a644:	dc14      	bgt.n	800a670 <__b2d+0x50>
 800a646:	f1c0 0e0b 	rsb	lr, r0, #11
 800a64a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a64e:	42b7      	cmp	r7, r6
 800a650:	ea41 030c 	orr.w	r3, r1, ip
 800a654:	bf34      	ite	cc
 800a656:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a65a:	2100      	movcs	r1, #0
 800a65c:	3015      	adds	r0, #21
 800a65e:	fa04 f000 	lsl.w	r0, r4, r0
 800a662:	fa21 f10e 	lsr.w	r1, r1, lr
 800a666:	ea40 0201 	orr.w	r2, r0, r1
 800a66a:	ec43 2b10 	vmov	d0, r2, r3
 800a66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a670:	42b7      	cmp	r7, r6
 800a672:	bf3a      	itte	cc
 800a674:	f1a5 0608 	subcc.w	r6, r5, #8
 800a678:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a67c:	2100      	movcs	r1, #0
 800a67e:	380b      	subs	r0, #11
 800a680:	d015      	beq.n	800a6ae <__b2d+0x8e>
 800a682:	4084      	lsls	r4, r0
 800a684:	f1c0 0520 	rsb	r5, r0, #32
 800a688:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a68c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a690:	42be      	cmp	r6, r7
 800a692:	fa21 fc05 	lsr.w	ip, r1, r5
 800a696:	ea44 030c 	orr.w	r3, r4, ip
 800a69a:	bf8c      	ite	hi
 800a69c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a6a0:	2400      	movls	r4, #0
 800a6a2:	fa01 f000 	lsl.w	r0, r1, r0
 800a6a6:	40ec      	lsrs	r4, r5
 800a6a8:	ea40 0204 	orr.w	r2, r0, r4
 800a6ac:	e7dd      	b.n	800a66a <__b2d+0x4a>
 800a6ae:	ea44 030c 	orr.w	r3, r4, ip
 800a6b2:	460a      	mov	r2, r1
 800a6b4:	e7d9      	b.n	800a66a <__b2d+0x4a>
 800a6b6:	bf00      	nop
 800a6b8:	3ff00000 	.word	0x3ff00000

0800a6bc <__d2b>:
 800a6bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6c0:	460e      	mov	r6, r1
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	ec59 8b10 	vmov	r8, r9, d0
 800a6c8:	4615      	mov	r5, r2
 800a6ca:	f7ff fcb6 	bl	800a03a <_Balloc>
 800a6ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a6d2:	4607      	mov	r7, r0
 800a6d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6d8:	bb34      	cbnz	r4, 800a728 <__d2b+0x6c>
 800a6da:	9301      	str	r3, [sp, #4]
 800a6dc:	f1b8 0300 	subs.w	r3, r8, #0
 800a6e0:	d027      	beq.n	800a732 <__d2b+0x76>
 800a6e2:	a802      	add	r0, sp, #8
 800a6e4:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a6e8:	f7ff fd8a 	bl	800a200 <__lo0bits>
 800a6ec:	9900      	ldr	r1, [sp, #0]
 800a6ee:	b1f0      	cbz	r0, 800a72e <__d2b+0x72>
 800a6f0:	9a01      	ldr	r2, [sp, #4]
 800a6f2:	f1c0 0320 	rsb	r3, r0, #32
 800a6f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fa:	430b      	orrs	r3, r1
 800a6fc:	40c2      	lsrs	r2, r0
 800a6fe:	617b      	str	r3, [r7, #20]
 800a700:	9201      	str	r2, [sp, #4]
 800a702:	9b01      	ldr	r3, [sp, #4]
 800a704:	61bb      	str	r3, [r7, #24]
 800a706:	2b00      	cmp	r3, #0
 800a708:	bf14      	ite	ne
 800a70a:	2102      	movne	r1, #2
 800a70c:	2101      	moveq	r1, #1
 800a70e:	6139      	str	r1, [r7, #16]
 800a710:	b1c4      	cbz	r4, 800a744 <__d2b+0x88>
 800a712:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a716:	4404      	add	r4, r0
 800a718:	6034      	str	r4, [r6, #0]
 800a71a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a71e:	6028      	str	r0, [r5, #0]
 800a720:	4638      	mov	r0, r7
 800a722:	b003      	add	sp, #12
 800a724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a72c:	e7d5      	b.n	800a6da <__d2b+0x1e>
 800a72e:	6179      	str	r1, [r7, #20]
 800a730:	e7e7      	b.n	800a702 <__d2b+0x46>
 800a732:	a801      	add	r0, sp, #4
 800a734:	f7ff fd64 	bl	800a200 <__lo0bits>
 800a738:	9b01      	ldr	r3, [sp, #4]
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	2101      	movs	r1, #1
 800a73e:	6139      	str	r1, [r7, #16]
 800a740:	3020      	adds	r0, #32
 800a742:	e7e5      	b.n	800a710 <__d2b+0x54>
 800a744:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a748:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a74c:	6030      	str	r0, [r6, #0]
 800a74e:	6918      	ldr	r0, [r3, #16]
 800a750:	f7ff fd37 	bl	800a1c2 <__hi0bits>
 800a754:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a758:	e7e1      	b.n	800a71e <__d2b+0x62>

0800a75a <__ratio>:
 800a75a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75e:	4688      	mov	r8, r1
 800a760:	4669      	mov	r1, sp
 800a762:	4681      	mov	r9, r0
 800a764:	f7ff ff5c 	bl	800a620 <__b2d>
 800a768:	a901      	add	r1, sp, #4
 800a76a:	4640      	mov	r0, r8
 800a76c:	ec57 6b10 	vmov	r6, r7, d0
 800a770:	f7ff ff56 	bl	800a620 <__b2d>
 800a774:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a778:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a77c:	eba3 0c02 	sub.w	ip, r3, r2
 800a780:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a784:	1a9b      	subs	r3, r3, r2
 800a786:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a78a:	ec5b ab10 	vmov	sl, fp, d0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	bfce      	itee	gt
 800a792:	463a      	movgt	r2, r7
 800a794:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a798:	465a      	movle	r2, fp
 800a79a:	4659      	mov	r1, fp
 800a79c:	463d      	mov	r5, r7
 800a79e:	bfd4      	ite	le
 800a7a0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a7a4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	ee10 2a10 	vmov	r2, s0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	f7f6 f84b 	bl	800084c <__aeabi_ddiv>
 800a7b6:	ec41 0b10 	vmov	d0, r0, r1
 800a7ba:	b003      	add	sp, #12
 800a7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a7c0 <__copybits>:
 800a7c0:	3901      	subs	r1, #1
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	1149      	asrs	r1, r1, #5
 800a7c6:	6914      	ldr	r4, [r2, #16]
 800a7c8:	3101      	adds	r1, #1
 800a7ca:	f102 0314 	add.w	r3, r2, #20
 800a7ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a7d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	4602      	mov	r2, r0
 800a7da:	d303      	bcc.n	800a7e4 <__copybits+0x24>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	428a      	cmp	r2, r1
 800a7e0:	d305      	bcc.n	800a7ee <__copybits+0x2e>
 800a7e2:	bd10      	pop	{r4, pc}
 800a7e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e8:	f840 2b04 	str.w	r2, [r0], #4
 800a7ec:	e7f3      	b.n	800a7d6 <__copybits+0x16>
 800a7ee:	f842 3b04 	str.w	r3, [r2], #4
 800a7f2:	e7f4      	b.n	800a7de <__copybits+0x1e>

0800a7f4 <__any_on>:
 800a7f4:	f100 0214 	add.w	r2, r0, #20
 800a7f8:	6900      	ldr	r0, [r0, #16]
 800a7fa:	114b      	asrs	r3, r1, #5
 800a7fc:	4298      	cmp	r0, r3
 800a7fe:	b510      	push	{r4, lr}
 800a800:	db11      	blt.n	800a826 <__any_on+0x32>
 800a802:	dd0a      	ble.n	800a81a <__any_on+0x26>
 800a804:	f011 011f 	ands.w	r1, r1, #31
 800a808:	d007      	beq.n	800a81a <__any_on+0x26>
 800a80a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a80e:	fa24 f001 	lsr.w	r0, r4, r1
 800a812:	fa00 f101 	lsl.w	r1, r0, r1
 800a816:	428c      	cmp	r4, r1
 800a818:	d10b      	bne.n	800a832 <__any_on+0x3e>
 800a81a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a81e:	4293      	cmp	r3, r2
 800a820:	d803      	bhi.n	800a82a <__any_on+0x36>
 800a822:	2000      	movs	r0, #0
 800a824:	bd10      	pop	{r4, pc}
 800a826:	4603      	mov	r3, r0
 800a828:	e7f7      	b.n	800a81a <__any_on+0x26>
 800a82a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a82e:	2900      	cmp	r1, #0
 800a830:	d0f5      	beq.n	800a81e <__any_on+0x2a>
 800a832:	2001      	movs	r0, #1
 800a834:	e7f6      	b.n	800a824 <__any_on+0x30>

0800a836 <_calloc_r>:
 800a836:	b538      	push	{r3, r4, r5, lr}
 800a838:	fb02 f401 	mul.w	r4, r2, r1
 800a83c:	4621      	mov	r1, r4
 800a83e:	f000 f857 	bl	800a8f0 <_malloc_r>
 800a842:	4605      	mov	r5, r0
 800a844:	b118      	cbz	r0, 800a84e <_calloc_r+0x18>
 800a846:	4622      	mov	r2, r4
 800a848:	2100      	movs	r1, #0
 800a84a:	f7fc fa1d 	bl	8006c88 <memset>
 800a84e:	4628      	mov	r0, r5
 800a850:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a854 <_free_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	4605      	mov	r5, r0
 800a858:	2900      	cmp	r1, #0
 800a85a:	d045      	beq.n	800a8e8 <_free_r+0x94>
 800a85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a860:	1f0c      	subs	r4, r1, #4
 800a862:	2b00      	cmp	r3, #0
 800a864:	bfb8      	it	lt
 800a866:	18e4      	addlt	r4, r4, r3
 800a868:	f000 fc0f 	bl	800b08a <__malloc_lock>
 800a86c:	4a1f      	ldr	r2, [pc, #124]	; (800a8ec <_free_r+0x98>)
 800a86e:	6813      	ldr	r3, [r2, #0]
 800a870:	4610      	mov	r0, r2
 800a872:	b933      	cbnz	r3, 800a882 <_free_r+0x2e>
 800a874:	6063      	str	r3, [r4, #4]
 800a876:	6014      	str	r4, [r2, #0]
 800a878:	4628      	mov	r0, r5
 800a87a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a87e:	f000 bc05 	b.w	800b08c <__malloc_unlock>
 800a882:	42a3      	cmp	r3, r4
 800a884:	d90c      	bls.n	800a8a0 <_free_r+0x4c>
 800a886:	6821      	ldr	r1, [r4, #0]
 800a888:	1862      	adds	r2, r4, r1
 800a88a:	4293      	cmp	r3, r2
 800a88c:	bf04      	itt	eq
 800a88e:	681a      	ldreq	r2, [r3, #0]
 800a890:	685b      	ldreq	r3, [r3, #4]
 800a892:	6063      	str	r3, [r4, #4]
 800a894:	bf04      	itt	eq
 800a896:	1852      	addeq	r2, r2, r1
 800a898:	6022      	streq	r2, [r4, #0]
 800a89a:	6004      	str	r4, [r0, #0]
 800a89c:	e7ec      	b.n	800a878 <_free_r+0x24>
 800a89e:	4613      	mov	r3, r2
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	b10a      	cbz	r2, 800a8a8 <_free_r+0x54>
 800a8a4:	42a2      	cmp	r2, r4
 800a8a6:	d9fa      	bls.n	800a89e <_free_r+0x4a>
 800a8a8:	6819      	ldr	r1, [r3, #0]
 800a8aa:	1858      	adds	r0, r3, r1
 800a8ac:	42a0      	cmp	r0, r4
 800a8ae:	d10b      	bne.n	800a8c8 <_free_r+0x74>
 800a8b0:	6820      	ldr	r0, [r4, #0]
 800a8b2:	4401      	add	r1, r0
 800a8b4:	1858      	adds	r0, r3, r1
 800a8b6:	4282      	cmp	r2, r0
 800a8b8:	6019      	str	r1, [r3, #0]
 800a8ba:	d1dd      	bne.n	800a878 <_free_r+0x24>
 800a8bc:	6810      	ldr	r0, [r2, #0]
 800a8be:	6852      	ldr	r2, [r2, #4]
 800a8c0:	605a      	str	r2, [r3, #4]
 800a8c2:	4401      	add	r1, r0
 800a8c4:	6019      	str	r1, [r3, #0]
 800a8c6:	e7d7      	b.n	800a878 <_free_r+0x24>
 800a8c8:	d902      	bls.n	800a8d0 <_free_r+0x7c>
 800a8ca:	230c      	movs	r3, #12
 800a8cc:	602b      	str	r3, [r5, #0]
 800a8ce:	e7d3      	b.n	800a878 <_free_r+0x24>
 800a8d0:	6820      	ldr	r0, [r4, #0]
 800a8d2:	1821      	adds	r1, r4, r0
 800a8d4:	428a      	cmp	r2, r1
 800a8d6:	bf04      	itt	eq
 800a8d8:	6811      	ldreq	r1, [r2, #0]
 800a8da:	6852      	ldreq	r2, [r2, #4]
 800a8dc:	6062      	str	r2, [r4, #4]
 800a8de:	bf04      	itt	eq
 800a8e0:	1809      	addeq	r1, r1, r0
 800a8e2:	6021      	streq	r1, [r4, #0]
 800a8e4:	605c      	str	r4, [r3, #4]
 800a8e6:	e7c7      	b.n	800a878 <_free_r+0x24>
 800a8e8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20000200 	.word	0x20000200

0800a8f0 <_malloc_r>:
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	1ccd      	adds	r5, r1, #3
 800a8f4:	f025 0503 	bic.w	r5, r5, #3
 800a8f8:	3508      	adds	r5, #8
 800a8fa:	2d0c      	cmp	r5, #12
 800a8fc:	bf38      	it	cc
 800a8fe:	250c      	movcc	r5, #12
 800a900:	2d00      	cmp	r5, #0
 800a902:	4606      	mov	r6, r0
 800a904:	db01      	blt.n	800a90a <_malloc_r+0x1a>
 800a906:	42a9      	cmp	r1, r5
 800a908:	d903      	bls.n	800a912 <_malloc_r+0x22>
 800a90a:	230c      	movs	r3, #12
 800a90c:	6033      	str	r3, [r6, #0]
 800a90e:	2000      	movs	r0, #0
 800a910:	bd70      	pop	{r4, r5, r6, pc}
 800a912:	f000 fbba 	bl	800b08a <__malloc_lock>
 800a916:	4a21      	ldr	r2, [pc, #132]	; (800a99c <_malloc_r+0xac>)
 800a918:	6814      	ldr	r4, [r2, #0]
 800a91a:	4621      	mov	r1, r4
 800a91c:	b991      	cbnz	r1, 800a944 <_malloc_r+0x54>
 800a91e:	4c20      	ldr	r4, [pc, #128]	; (800a9a0 <_malloc_r+0xb0>)
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	b91b      	cbnz	r3, 800a92c <_malloc_r+0x3c>
 800a924:	4630      	mov	r0, r6
 800a926:	f000 facf 	bl	800aec8 <_sbrk_r>
 800a92a:	6020      	str	r0, [r4, #0]
 800a92c:	4629      	mov	r1, r5
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 faca 	bl	800aec8 <_sbrk_r>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d124      	bne.n	800a982 <_malloc_r+0x92>
 800a938:	230c      	movs	r3, #12
 800a93a:	6033      	str	r3, [r6, #0]
 800a93c:	4630      	mov	r0, r6
 800a93e:	f000 fba5 	bl	800b08c <__malloc_unlock>
 800a942:	e7e4      	b.n	800a90e <_malloc_r+0x1e>
 800a944:	680b      	ldr	r3, [r1, #0]
 800a946:	1b5b      	subs	r3, r3, r5
 800a948:	d418      	bmi.n	800a97c <_malloc_r+0x8c>
 800a94a:	2b0b      	cmp	r3, #11
 800a94c:	d90f      	bls.n	800a96e <_malloc_r+0x7e>
 800a94e:	600b      	str	r3, [r1, #0]
 800a950:	50cd      	str	r5, [r1, r3]
 800a952:	18cc      	adds	r4, r1, r3
 800a954:	4630      	mov	r0, r6
 800a956:	f000 fb99 	bl	800b08c <__malloc_unlock>
 800a95a:	f104 000b 	add.w	r0, r4, #11
 800a95e:	1d23      	adds	r3, r4, #4
 800a960:	f020 0007 	bic.w	r0, r0, #7
 800a964:	1ac3      	subs	r3, r0, r3
 800a966:	d0d3      	beq.n	800a910 <_malloc_r+0x20>
 800a968:	425a      	negs	r2, r3
 800a96a:	50e2      	str	r2, [r4, r3]
 800a96c:	e7d0      	b.n	800a910 <_malloc_r+0x20>
 800a96e:	428c      	cmp	r4, r1
 800a970:	684b      	ldr	r3, [r1, #4]
 800a972:	bf16      	itet	ne
 800a974:	6063      	strne	r3, [r4, #4]
 800a976:	6013      	streq	r3, [r2, #0]
 800a978:	460c      	movne	r4, r1
 800a97a:	e7eb      	b.n	800a954 <_malloc_r+0x64>
 800a97c:	460c      	mov	r4, r1
 800a97e:	6849      	ldr	r1, [r1, #4]
 800a980:	e7cc      	b.n	800a91c <_malloc_r+0x2c>
 800a982:	1cc4      	adds	r4, r0, #3
 800a984:	f024 0403 	bic.w	r4, r4, #3
 800a988:	42a0      	cmp	r0, r4
 800a98a:	d005      	beq.n	800a998 <_malloc_r+0xa8>
 800a98c:	1a21      	subs	r1, r4, r0
 800a98e:	4630      	mov	r0, r6
 800a990:	f000 fa9a 	bl	800aec8 <_sbrk_r>
 800a994:	3001      	adds	r0, #1
 800a996:	d0cf      	beq.n	800a938 <_malloc_r+0x48>
 800a998:	6025      	str	r5, [r4, #0]
 800a99a:	e7db      	b.n	800a954 <_malloc_r+0x64>
 800a99c:	20000200 	.word	0x20000200
 800a9a0:	20000204 	.word	0x20000204

0800a9a4 <__ssputs_r>:
 800a9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a8:	688e      	ldr	r6, [r1, #8]
 800a9aa:	429e      	cmp	r6, r3
 800a9ac:	4682      	mov	sl, r0
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	4690      	mov	r8, r2
 800a9b2:	4699      	mov	r9, r3
 800a9b4:	d837      	bhi.n	800aa26 <__ssputs_r+0x82>
 800a9b6:	898a      	ldrh	r2, [r1, #12]
 800a9b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9bc:	d031      	beq.n	800aa22 <__ssputs_r+0x7e>
 800a9be:	6825      	ldr	r5, [r4, #0]
 800a9c0:	6909      	ldr	r1, [r1, #16]
 800a9c2:	1a6f      	subs	r7, r5, r1
 800a9c4:	6965      	ldr	r5, [r4, #20]
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9cc:	fb95 f5f3 	sdiv	r5, r5, r3
 800a9d0:	f109 0301 	add.w	r3, r9, #1
 800a9d4:	443b      	add	r3, r7
 800a9d6:	429d      	cmp	r5, r3
 800a9d8:	bf38      	it	cc
 800a9da:	461d      	movcc	r5, r3
 800a9dc:	0553      	lsls	r3, r2, #21
 800a9de:	d530      	bpl.n	800aa42 <__ssputs_r+0x9e>
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	f7ff ff85 	bl	800a8f0 <_malloc_r>
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	b950      	cbnz	r0, 800aa00 <__ssputs_r+0x5c>
 800a9ea:	230c      	movs	r3, #12
 800a9ec:	f8ca 3000 	str.w	r3, [sl]
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa00:	463a      	mov	r2, r7
 800aa02:	6921      	ldr	r1, [r4, #16]
 800aa04:	f7ff fb0e 	bl	800a024 <memcpy>
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa12:	81a3      	strh	r3, [r4, #12]
 800aa14:	6126      	str	r6, [r4, #16]
 800aa16:	6165      	str	r5, [r4, #20]
 800aa18:	443e      	add	r6, r7
 800aa1a:	1bed      	subs	r5, r5, r7
 800aa1c:	6026      	str	r6, [r4, #0]
 800aa1e:	60a5      	str	r5, [r4, #8]
 800aa20:	464e      	mov	r6, r9
 800aa22:	454e      	cmp	r6, r9
 800aa24:	d900      	bls.n	800aa28 <__ssputs_r+0x84>
 800aa26:	464e      	mov	r6, r9
 800aa28:	4632      	mov	r2, r6
 800aa2a:	4641      	mov	r1, r8
 800aa2c:	6820      	ldr	r0, [r4, #0]
 800aa2e:	f000 fb13 	bl	800b058 <memmove>
 800aa32:	68a3      	ldr	r3, [r4, #8]
 800aa34:	1b9b      	subs	r3, r3, r6
 800aa36:	60a3      	str	r3, [r4, #8]
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	441e      	add	r6, r3
 800aa3c:	6026      	str	r6, [r4, #0]
 800aa3e:	2000      	movs	r0, #0
 800aa40:	e7dc      	b.n	800a9fc <__ssputs_r+0x58>
 800aa42:	462a      	mov	r2, r5
 800aa44:	f000 fb23 	bl	800b08e <_realloc_r>
 800aa48:	4606      	mov	r6, r0
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d1e2      	bne.n	800aa14 <__ssputs_r+0x70>
 800aa4e:	6921      	ldr	r1, [r4, #16]
 800aa50:	4650      	mov	r0, sl
 800aa52:	f7ff feff 	bl	800a854 <_free_r>
 800aa56:	e7c8      	b.n	800a9ea <__ssputs_r+0x46>

0800aa58 <_svfiprintf_r>:
 800aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	461d      	mov	r5, r3
 800aa5e:	898b      	ldrh	r3, [r1, #12]
 800aa60:	061f      	lsls	r7, r3, #24
 800aa62:	b09d      	sub	sp, #116	; 0x74
 800aa64:	4680      	mov	r8, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	4616      	mov	r6, r2
 800aa6a:	d50f      	bpl.n	800aa8c <_svfiprintf_r+0x34>
 800aa6c:	690b      	ldr	r3, [r1, #16]
 800aa6e:	b96b      	cbnz	r3, 800aa8c <_svfiprintf_r+0x34>
 800aa70:	2140      	movs	r1, #64	; 0x40
 800aa72:	f7ff ff3d 	bl	800a8f0 <_malloc_r>
 800aa76:	6020      	str	r0, [r4, #0]
 800aa78:	6120      	str	r0, [r4, #16]
 800aa7a:	b928      	cbnz	r0, 800aa88 <_svfiprintf_r+0x30>
 800aa7c:	230c      	movs	r3, #12
 800aa7e:	f8c8 3000 	str.w	r3, [r8]
 800aa82:	f04f 30ff 	mov.w	r0, #4294967295
 800aa86:	e0c8      	b.n	800ac1a <_svfiprintf_r+0x1c2>
 800aa88:	2340      	movs	r3, #64	; 0x40
 800aa8a:	6163      	str	r3, [r4, #20]
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa90:	2320      	movs	r3, #32
 800aa92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa96:	2330      	movs	r3, #48	; 0x30
 800aa98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa9c:	9503      	str	r5, [sp, #12]
 800aa9e:	f04f 0b01 	mov.w	fp, #1
 800aaa2:	4637      	mov	r7, r6
 800aaa4:	463d      	mov	r5, r7
 800aaa6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aaaa:	b10b      	cbz	r3, 800aab0 <_svfiprintf_r+0x58>
 800aaac:	2b25      	cmp	r3, #37	; 0x25
 800aaae:	d13e      	bne.n	800ab2e <_svfiprintf_r+0xd6>
 800aab0:	ebb7 0a06 	subs.w	sl, r7, r6
 800aab4:	d00b      	beq.n	800aace <_svfiprintf_r+0x76>
 800aab6:	4653      	mov	r3, sl
 800aab8:	4632      	mov	r2, r6
 800aaba:	4621      	mov	r1, r4
 800aabc:	4640      	mov	r0, r8
 800aabe:	f7ff ff71 	bl	800a9a4 <__ssputs_r>
 800aac2:	3001      	adds	r0, #1
 800aac4:	f000 80a4 	beq.w	800ac10 <_svfiprintf_r+0x1b8>
 800aac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaca:	4453      	add	r3, sl
 800aacc:	9309      	str	r3, [sp, #36]	; 0x24
 800aace:	783b      	ldrb	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 809d 	beq.w	800ac10 <_svfiprintf_r+0x1b8>
 800aad6:	2300      	movs	r3, #0
 800aad8:	f04f 32ff 	mov.w	r2, #4294967295
 800aadc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aae0:	9304      	str	r3, [sp, #16]
 800aae2:	9307      	str	r3, [sp, #28]
 800aae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aae8:	931a      	str	r3, [sp, #104]	; 0x68
 800aaea:	462f      	mov	r7, r5
 800aaec:	2205      	movs	r2, #5
 800aaee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aaf2:	4850      	ldr	r0, [pc, #320]	; (800ac34 <_svfiprintf_r+0x1dc>)
 800aaf4:	f7f5 fb74 	bl	80001e0 <memchr>
 800aaf8:	9b04      	ldr	r3, [sp, #16]
 800aafa:	b9d0      	cbnz	r0, 800ab32 <_svfiprintf_r+0xda>
 800aafc:	06d9      	lsls	r1, r3, #27
 800aafe:	bf44      	itt	mi
 800ab00:	2220      	movmi	r2, #32
 800ab02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab06:	071a      	lsls	r2, r3, #28
 800ab08:	bf44      	itt	mi
 800ab0a:	222b      	movmi	r2, #43	; 0x2b
 800ab0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab10:	782a      	ldrb	r2, [r5, #0]
 800ab12:	2a2a      	cmp	r2, #42	; 0x2a
 800ab14:	d015      	beq.n	800ab42 <_svfiprintf_r+0xea>
 800ab16:	9a07      	ldr	r2, [sp, #28]
 800ab18:	462f      	mov	r7, r5
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	250a      	movs	r5, #10
 800ab1e:	4639      	mov	r1, r7
 800ab20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab24:	3b30      	subs	r3, #48	; 0x30
 800ab26:	2b09      	cmp	r3, #9
 800ab28:	d94d      	bls.n	800abc6 <_svfiprintf_r+0x16e>
 800ab2a:	b1b8      	cbz	r0, 800ab5c <_svfiprintf_r+0x104>
 800ab2c:	e00f      	b.n	800ab4e <_svfiprintf_r+0xf6>
 800ab2e:	462f      	mov	r7, r5
 800ab30:	e7b8      	b.n	800aaa4 <_svfiprintf_r+0x4c>
 800ab32:	4a40      	ldr	r2, [pc, #256]	; (800ac34 <_svfiprintf_r+0x1dc>)
 800ab34:	1a80      	subs	r0, r0, r2
 800ab36:	fa0b f000 	lsl.w	r0, fp, r0
 800ab3a:	4318      	orrs	r0, r3
 800ab3c:	9004      	str	r0, [sp, #16]
 800ab3e:	463d      	mov	r5, r7
 800ab40:	e7d3      	b.n	800aaea <_svfiprintf_r+0x92>
 800ab42:	9a03      	ldr	r2, [sp, #12]
 800ab44:	1d11      	adds	r1, r2, #4
 800ab46:	6812      	ldr	r2, [r2, #0]
 800ab48:	9103      	str	r1, [sp, #12]
 800ab4a:	2a00      	cmp	r2, #0
 800ab4c:	db01      	blt.n	800ab52 <_svfiprintf_r+0xfa>
 800ab4e:	9207      	str	r2, [sp, #28]
 800ab50:	e004      	b.n	800ab5c <_svfiprintf_r+0x104>
 800ab52:	4252      	negs	r2, r2
 800ab54:	f043 0302 	orr.w	r3, r3, #2
 800ab58:	9207      	str	r2, [sp, #28]
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	783b      	ldrb	r3, [r7, #0]
 800ab5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab60:	d10c      	bne.n	800ab7c <_svfiprintf_r+0x124>
 800ab62:	787b      	ldrb	r3, [r7, #1]
 800ab64:	2b2a      	cmp	r3, #42	; 0x2a
 800ab66:	d133      	bne.n	800abd0 <_svfiprintf_r+0x178>
 800ab68:	9b03      	ldr	r3, [sp, #12]
 800ab6a:	1d1a      	adds	r2, r3, #4
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	9203      	str	r2, [sp, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	bfb8      	it	lt
 800ab74:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab78:	3702      	adds	r7, #2
 800ab7a:	9305      	str	r3, [sp, #20]
 800ab7c:	4d2e      	ldr	r5, [pc, #184]	; (800ac38 <_svfiprintf_r+0x1e0>)
 800ab7e:	7839      	ldrb	r1, [r7, #0]
 800ab80:	2203      	movs	r2, #3
 800ab82:	4628      	mov	r0, r5
 800ab84:	f7f5 fb2c 	bl	80001e0 <memchr>
 800ab88:	b138      	cbz	r0, 800ab9a <_svfiprintf_r+0x142>
 800ab8a:	2340      	movs	r3, #64	; 0x40
 800ab8c:	1b40      	subs	r0, r0, r5
 800ab8e:	fa03 f000 	lsl.w	r0, r3, r0
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	4303      	orrs	r3, r0
 800ab96:	3701      	adds	r7, #1
 800ab98:	9304      	str	r3, [sp, #16]
 800ab9a:	7839      	ldrb	r1, [r7, #0]
 800ab9c:	4827      	ldr	r0, [pc, #156]	; (800ac3c <_svfiprintf_r+0x1e4>)
 800ab9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aba2:	2206      	movs	r2, #6
 800aba4:	1c7e      	adds	r6, r7, #1
 800aba6:	f7f5 fb1b 	bl	80001e0 <memchr>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d038      	beq.n	800ac20 <_svfiprintf_r+0x1c8>
 800abae:	4b24      	ldr	r3, [pc, #144]	; (800ac40 <_svfiprintf_r+0x1e8>)
 800abb0:	bb13      	cbnz	r3, 800abf8 <_svfiprintf_r+0x1a0>
 800abb2:	9b03      	ldr	r3, [sp, #12]
 800abb4:	3307      	adds	r3, #7
 800abb6:	f023 0307 	bic.w	r3, r3, #7
 800abba:	3308      	adds	r3, #8
 800abbc:	9303      	str	r3, [sp, #12]
 800abbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc0:	444b      	add	r3, r9
 800abc2:	9309      	str	r3, [sp, #36]	; 0x24
 800abc4:	e76d      	b.n	800aaa2 <_svfiprintf_r+0x4a>
 800abc6:	fb05 3202 	mla	r2, r5, r2, r3
 800abca:	2001      	movs	r0, #1
 800abcc:	460f      	mov	r7, r1
 800abce:	e7a6      	b.n	800ab1e <_svfiprintf_r+0xc6>
 800abd0:	2300      	movs	r3, #0
 800abd2:	3701      	adds	r7, #1
 800abd4:	9305      	str	r3, [sp, #20]
 800abd6:	4619      	mov	r1, r3
 800abd8:	250a      	movs	r5, #10
 800abda:	4638      	mov	r0, r7
 800abdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abe0:	3a30      	subs	r2, #48	; 0x30
 800abe2:	2a09      	cmp	r2, #9
 800abe4:	d903      	bls.n	800abee <_svfiprintf_r+0x196>
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0c8      	beq.n	800ab7c <_svfiprintf_r+0x124>
 800abea:	9105      	str	r1, [sp, #20]
 800abec:	e7c6      	b.n	800ab7c <_svfiprintf_r+0x124>
 800abee:	fb05 2101 	mla	r1, r5, r1, r2
 800abf2:	2301      	movs	r3, #1
 800abf4:	4607      	mov	r7, r0
 800abf6:	e7f0      	b.n	800abda <_svfiprintf_r+0x182>
 800abf8:	ab03      	add	r3, sp, #12
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	4622      	mov	r2, r4
 800abfe:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <_svfiprintf_r+0x1ec>)
 800ac00:	a904      	add	r1, sp, #16
 800ac02:	4640      	mov	r0, r8
 800ac04:	f7fc f8dc 	bl	8006dc0 <_printf_float>
 800ac08:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ac0c:	4681      	mov	r9, r0
 800ac0e:	d1d6      	bne.n	800abbe <_svfiprintf_r+0x166>
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	065b      	lsls	r3, r3, #25
 800ac14:	f53f af35 	bmi.w	800aa82 <_svfiprintf_r+0x2a>
 800ac18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac1a:	b01d      	add	sp, #116	; 0x74
 800ac1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac20:	ab03      	add	r3, sp, #12
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	4622      	mov	r2, r4
 800ac26:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <_svfiprintf_r+0x1ec>)
 800ac28:	a904      	add	r1, sp, #16
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	f7fc fb7e 	bl	800732c <_printf_i>
 800ac30:	e7ea      	b.n	800ac08 <_svfiprintf_r+0x1b0>
 800ac32:	bf00      	nop
 800ac34:	0800b51c 	.word	0x0800b51c
 800ac38:	0800b522 	.word	0x0800b522
 800ac3c:	0800b526 	.word	0x0800b526
 800ac40:	08006dc1 	.word	0x08006dc1
 800ac44:	0800a9a5 	.word	0x0800a9a5

0800ac48 <__sfputc_r>:
 800ac48:	6893      	ldr	r3, [r2, #8]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	b410      	push	{r4}
 800ac50:	6093      	str	r3, [r2, #8]
 800ac52:	da08      	bge.n	800ac66 <__sfputc_r+0x1e>
 800ac54:	6994      	ldr	r4, [r2, #24]
 800ac56:	42a3      	cmp	r3, r4
 800ac58:	db01      	blt.n	800ac5e <__sfputc_r+0x16>
 800ac5a:	290a      	cmp	r1, #10
 800ac5c:	d103      	bne.n	800ac66 <__sfputc_r+0x1e>
 800ac5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac62:	f7fd bda7 	b.w	80087b4 <__swbuf_r>
 800ac66:	6813      	ldr	r3, [r2, #0]
 800ac68:	1c58      	adds	r0, r3, #1
 800ac6a:	6010      	str	r0, [r2, #0]
 800ac6c:	7019      	strb	r1, [r3, #0]
 800ac6e:	4608      	mov	r0, r1
 800ac70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <__sfputs_r>:
 800ac76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac78:	4606      	mov	r6, r0
 800ac7a:	460f      	mov	r7, r1
 800ac7c:	4614      	mov	r4, r2
 800ac7e:	18d5      	adds	r5, r2, r3
 800ac80:	42ac      	cmp	r4, r5
 800ac82:	d101      	bne.n	800ac88 <__sfputs_r+0x12>
 800ac84:	2000      	movs	r0, #0
 800ac86:	e007      	b.n	800ac98 <__sfputs_r+0x22>
 800ac88:	463a      	mov	r2, r7
 800ac8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f7ff ffda 	bl	800ac48 <__sfputc_r>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d1f3      	bne.n	800ac80 <__sfputs_r+0xa>
 800ac98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac9c <_vfiprintf_r>:
 800ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	460c      	mov	r4, r1
 800aca2:	b09d      	sub	sp, #116	; 0x74
 800aca4:	4617      	mov	r7, r2
 800aca6:	461d      	mov	r5, r3
 800aca8:	4606      	mov	r6, r0
 800acaa:	b118      	cbz	r0, 800acb4 <_vfiprintf_r+0x18>
 800acac:	6983      	ldr	r3, [r0, #24]
 800acae:	b90b      	cbnz	r3, 800acb4 <_vfiprintf_r+0x18>
 800acb0:	f7fe fd76 	bl	80097a0 <__sinit>
 800acb4:	4b7c      	ldr	r3, [pc, #496]	; (800aea8 <_vfiprintf_r+0x20c>)
 800acb6:	429c      	cmp	r4, r3
 800acb8:	d158      	bne.n	800ad6c <_vfiprintf_r+0xd0>
 800acba:	6874      	ldr	r4, [r6, #4]
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	0718      	lsls	r0, r3, #28
 800acc0:	d55e      	bpl.n	800ad80 <_vfiprintf_r+0xe4>
 800acc2:	6923      	ldr	r3, [r4, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d05b      	beq.n	800ad80 <_vfiprintf_r+0xe4>
 800acc8:	2300      	movs	r3, #0
 800acca:	9309      	str	r3, [sp, #36]	; 0x24
 800accc:	2320      	movs	r3, #32
 800acce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acd2:	2330      	movs	r3, #48	; 0x30
 800acd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acd8:	9503      	str	r5, [sp, #12]
 800acda:	f04f 0b01 	mov.w	fp, #1
 800acde:	46b8      	mov	r8, r7
 800ace0:	4645      	mov	r5, r8
 800ace2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ace6:	b10b      	cbz	r3, 800acec <_vfiprintf_r+0x50>
 800ace8:	2b25      	cmp	r3, #37	; 0x25
 800acea:	d154      	bne.n	800ad96 <_vfiprintf_r+0xfa>
 800acec:	ebb8 0a07 	subs.w	sl, r8, r7
 800acf0:	d00b      	beq.n	800ad0a <_vfiprintf_r+0x6e>
 800acf2:	4653      	mov	r3, sl
 800acf4:	463a      	mov	r2, r7
 800acf6:	4621      	mov	r1, r4
 800acf8:	4630      	mov	r0, r6
 800acfa:	f7ff ffbc 	bl	800ac76 <__sfputs_r>
 800acfe:	3001      	adds	r0, #1
 800ad00:	f000 80c2 	beq.w	800ae88 <_vfiprintf_r+0x1ec>
 800ad04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad06:	4453      	add	r3, sl
 800ad08:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0a:	f898 3000 	ldrb.w	r3, [r8]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f000 80ba 	beq.w	800ae88 <_vfiprintf_r+0x1ec>
 800ad14:	2300      	movs	r3, #0
 800ad16:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad1e:	9304      	str	r3, [sp, #16]
 800ad20:	9307      	str	r3, [sp, #28]
 800ad22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad26:	931a      	str	r3, [sp, #104]	; 0x68
 800ad28:	46a8      	mov	r8, r5
 800ad2a:	2205      	movs	r2, #5
 800ad2c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ad30:	485e      	ldr	r0, [pc, #376]	; (800aeac <_vfiprintf_r+0x210>)
 800ad32:	f7f5 fa55 	bl	80001e0 <memchr>
 800ad36:	9b04      	ldr	r3, [sp, #16]
 800ad38:	bb78      	cbnz	r0, 800ad9a <_vfiprintf_r+0xfe>
 800ad3a:	06d9      	lsls	r1, r3, #27
 800ad3c:	bf44      	itt	mi
 800ad3e:	2220      	movmi	r2, #32
 800ad40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ad44:	071a      	lsls	r2, r3, #28
 800ad46:	bf44      	itt	mi
 800ad48:	222b      	movmi	r2, #43	; 0x2b
 800ad4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ad4e:	782a      	ldrb	r2, [r5, #0]
 800ad50:	2a2a      	cmp	r2, #42	; 0x2a
 800ad52:	d02a      	beq.n	800adaa <_vfiprintf_r+0x10e>
 800ad54:	9a07      	ldr	r2, [sp, #28]
 800ad56:	46a8      	mov	r8, r5
 800ad58:	2000      	movs	r0, #0
 800ad5a:	250a      	movs	r5, #10
 800ad5c:	4641      	mov	r1, r8
 800ad5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad62:	3b30      	subs	r3, #48	; 0x30
 800ad64:	2b09      	cmp	r3, #9
 800ad66:	d969      	bls.n	800ae3c <_vfiprintf_r+0x1a0>
 800ad68:	b360      	cbz	r0, 800adc4 <_vfiprintf_r+0x128>
 800ad6a:	e024      	b.n	800adb6 <_vfiprintf_r+0x11a>
 800ad6c:	4b50      	ldr	r3, [pc, #320]	; (800aeb0 <_vfiprintf_r+0x214>)
 800ad6e:	429c      	cmp	r4, r3
 800ad70:	d101      	bne.n	800ad76 <_vfiprintf_r+0xda>
 800ad72:	68b4      	ldr	r4, [r6, #8]
 800ad74:	e7a2      	b.n	800acbc <_vfiprintf_r+0x20>
 800ad76:	4b4f      	ldr	r3, [pc, #316]	; (800aeb4 <_vfiprintf_r+0x218>)
 800ad78:	429c      	cmp	r4, r3
 800ad7a:	bf08      	it	eq
 800ad7c:	68f4      	ldreq	r4, [r6, #12]
 800ad7e:	e79d      	b.n	800acbc <_vfiprintf_r+0x20>
 800ad80:	4621      	mov	r1, r4
 800ad82:	4630      	mov	r0, r6
 800ad84:	f7fd fd68 	bl	8008858 <__swsetup_r>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d09d      	beq.n	800acc8 <_vfiprintf_r+0x2c>
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad90:	b01d      	add	sp, #116	; 0x74
 800ad92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad96:	46a8      	mov	r8, r5
 800ad98:	e7a2      	b.n	800ace0 <_vfiprintf_r+0x44>
 800ad9a:	4a44      	ldr	r2, [pc, #272]	; (800aeac <_vfiprintf_r+0x210>)
 800ad9c:	1a80      	subs	r0, r0, r2
 800ad9e:	fa0b f000 	lsl.w	r0, fp, r0
 800ada2:	4318      	orrs	r0, r3
 800ada4:	9004      	str	r0, [sp, #16]
 800ada6:	4645      	mov	r5, r8
 800ada8:	e7be      	b.n	800ad28 <_vfiprintf_r+0x8c>
 800adaa:	9a03      	ldr	r2, [sp, #12]
 800adac:	1d11      	adds	r1, r2, #4
 800adae:	6812      	ldr	r2, [r2, #0]
 800adb0:	9103      	str	r1, [sp, #12]
 800adb2:	2a00      	cmp	r2, #0
 800adb4:	db01      	blt.n	800adba <_vfiprintf_r+0x11e>
 800adb6:	9207      	str	r2, [sp, #28]
 800adb8:	e004      	b.n	800adc4 <_vfiprintf_r+0x128>
 800adba:	4252      	negs	r2, r2
 800adbc:	f043 0302 	orr.w	r3, r3, #2
 800adc0:	9207      	str	r2, [sp, #28]
 800adc2:	9304      	str	r3, [sp, #16]
 800adc4:	f898 3000 	ldrb.w	r3, [r8]
 800adc8:	2b2e      	cmp	r3, #46	; 0x2e
 800adca:	d10e      	bne.n	800adea <_vfiprintf_r+0x14e>
 800adcc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800add0:	2b2a      	cmp	r3, #42	; 0x2a
 800add2:	d138      	bne.n	800ae46 <_vfiprintf_r+0x1aa>
 800add4:	9b03      	ldr	r3, [sp, #12]
 800add6:	1d1a      	adds	r2, r3, #4
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	9203      	str	r2, [sp, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	bfb8      	it	lt
 800ade0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ade4:	f108 0802 	add.w	r8, r8, #2
 800ade8:	9305      	str	r3, [sp, #20]
 800adea:	4d33      	ldr	r5, [pc, #204]	; (800aeb8 <_vfiprintf_r+0x21c>)
 800adec:	f898 1000 	ldrb.w	r1, [r8]
 800adf0:	2203      	movs	r2, #3
 800adf2:	4628      	mov	r0, r5
 800adf4:	f7f5 f9f4 	bl	80001e0 <memchr>
 800adf8:	b140      	cbz	r0, 800ae0c <_vfiprintf_r+0x170>
 800adfa:	2340      	movs	r3, #64	; 0x40
 800adfc:	1b40      	subs	r0, r0, r5
 800adfe:	fa03 f000 	lsl.w	r0, r3, r0
 800ae02:	9b04      	ldr	r3, [sp, #16]
 800ae04:	4303      	orrs	r3, r0
 800ae06:	f108 0801 	add.w	r8, r8, #1
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	f898 1000 	ldrb.w	r1, [r8]
 800ae10:	482a      	ldr	r0, [pc, #168]	; (800aebc <_vfiprintf_r+0x220>)
 800ae12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae16:	2206      	movs	r2, #6
 800ae18:	f108 0701 	add.w	r7, r8, #1
 800ae1c:	f7f5 f9e0 	bl	80001e0 <memchr>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d037      	beq.n	800ae94 <_vfiprintf_r+0x1f8>
 800ae24:	4b26      	ldr	r3, [pc, #152]	; (800aec0 <_vfiprintf_r+0x224>)
 800ae26:	bb1b      	cbnz	r3, 800ae70 <_vfiprintf_r+0x1d4>
 800ae28:	9b03      	ldr	r3, [sp, #12]
 800ae2a:	3307      	adds	r3, #7
 800ae2c:	f023 0307 	bic.w	r3, r3, #7
 800ae30:	3308      	adds	r3, #8
 800ae32:	9303      	str	r3, [sp, #12]
 800ae34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae36:	444b      	add	r3, r9
 800ae38:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3a:	e750      	b.n	800acde <_vfiprintf_r+0x42>
 800ae3c:	fb05 3202 	mla	r2, r5, r2, r3
 800ae40:	2001      	movs	r0, #1
 800ae42:	4688      	mov	r8, r1
 800ae44:	e78a      	b.n	800ad5c <_vfiprintf_r+0xc0>
 800ae46:	2300      	movs	r3, #0
 800ae48:	f108 0801 	add.w	r8, r8, #1
 800ae4c:	9305      	str	r3, [sp, #20]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	250a      	movs	r5, #10
 800ae52:	4640      	mov	r0, r8
 800ae54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae58:	3a30      	subs	r2, #48	; 0x30
 800ae5a:	2a09      	cmp	r2, #9
 800ae5c:	d903      	bls.n	800ae66 <_vfiprintf_r+0x1ca>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d0c3      	beq.n	800adea <_vfiprintf_r+0x14e>
 800ae62:	9105      	str	r1, [sp, #20]
 800ae64:	e7c1      	b.n	800adea <_vfiprintf_r+0x14e>
 800ae66:	fb05 2101 	mla	r1, r5, r1, r2
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	4680      	mov	r8, r0
 800ae6e:	e7f0      	b.n	800ae52 <_vfiprintf_r+0x1b6>
 800ae70:	ab03      	add	r3, sp, #12
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	4622      	mov	r2, r4
 800ae76:	4b13      	ldr	r3, [pc, #76]	; (800aec4 <_vfiprintf_r+0x228>)
 800ae78:	a904      	add	r1, sp, #16
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f7fb ffa0 	bl	8006dc0 <_printf_float>
 800ae80:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ae84:	4681      	mov	r9, r0
 800ae86:	d1d5      	bne.n	800ae34 <_vfiprintf_r+0x198>
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	065b      	lsls	r3, r3, #25
 800ae8c:	f53f af7e 	bmi.w	800ad8c <_vfiprintf_r+0xf0>
 800ae90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae92:	e77d      	b.n	800ad90 <_vfiprintf_r+0xf4>
 800ae94:	ab03      	add	r3, sp, #12
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	4622      	mov	r2, r4
 800ae9a:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <_vfiprintf_r+0x228>)
 800ae9c:	a904      	add	r1, sp, #16
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f7fc fa44 	bl	800732c <_printf_i>
 800aea4:	e7ec      	b.n	800ae80 <_vfiprintf_r+0x1e4>
 800aea6:	bf00      	nop
 800aea8:	0800b3d0 	.word	0x0800b3d0
 800aeac:	0800b51c 	.word	0x0800b51c
 800aeb0:	0800b3f0 	.word	0x0800b3f0
 800aeb4:	0800b3b0 	.word	0x0800b3b0
 800aeb8:	0800b522 	.word	0x0800b522
 800aebc:	0800b526 	.word	0x0800b526
 800aec0:	08006dc1 	.word	0x08006dc1
 800aec4:	0800ac77 	.word	0x0800ac77

0800aec8 <_sbrk_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4c06      	ldr	r4, [pc, #24]	; (800aee4 <_sbrk_r+0x1c>)
 800aecc:	2300      	movs	r3, #0
 800aece:	4605      	mov	r5, r0
 800aed0:	4608      	mov	r0, r1
 800aed2:	6023      	str	r3, [r4, #0]
 800aed4:	f7f7 fe9c 	bl	8002c10 <_sbrk>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_sbrk_r+0x1a>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_sbrk_r+0x1a>
 800aee0:	602b      	str	r3, [r5, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	200005dc 	.word	0x200005dc

0800aee8 <__sread>:
 800aee8:	b510      	push	{r4, lr}
 800aeea:	460c      	mov	r4, r1
 800aeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef0:	f000 f8f4 	bl	800b0dc <_read_r>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	bfab      	itete	ge
 800aef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aefa:	89a3      	ldrhlt	r3, [r4, #12]
 800aefc:	181b      	addge	r3, r3, r0
 800aefe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af02:	bfac      	ite	ge
 800af04:	6563      	strge	r3, [r4, #84]	; 0x54
 800af06:	81a3      	strhlt	r3, [r4, #12]
 800af08:	bd10      	pop	{r4, pc}

0800af0a <__swrite>:
 800af0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af0e:	461f      	mov	r7, r3
 800af10:	898b      	ldrh	r3, [r1, #12]
 800af12:	05db      	lsls	r3, r3, #23
 800af14:	4605      	mov	r5, r0
 800af16:	460c      	mov	r4, r1
 800af18:	4616      	mov	r6, r2
 800af1a:	d505      	bpl.n	800af28 <__swrite+0x1e>
 800af1c:	2302      	movs	r3, #2
 800af1e:	2200      	movs	r2, #0
 800af20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af24:	f000 f886 	bl	800b034 <_lseek_r>
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	4632      	mov	r2, r6
 800af36:	463b      	mov	r3, r7
 800af38:	4628      	mov	r0, r5
 800af3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	f000 b835 	b.w	800afac <_write_r>

0800af42 <__sseek>:
 800af42:	b510      	push	{r4, lr}
 800af44:	460c      	mov	r4, r1
 800af46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af4a:	f000 f873 	bl	800b034 <_lseek_r>
 800af4e:	1c43      	adds	r3, r0, #1
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	bf15      	itete	ne
 800af54:	6560      	strne	r0, [r4, #84]	; 0x54
 800af56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af5e:	81a3      	strheq	r3, [r4, #12]
 800af60:	bf18      	it	ne
 800af62:	81a3      	strhne	r3, [r4, #12]
 800af64:	bd10      	pop	{r4, pc}

0800af66 <__sclose>:
 800af66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af6a:	f000 b831 	b.w	800afd0 <_close_r>

0800af6e <strncmp>:
 800af6e:	b510      	push	{r4, lr}
 800af70:	b16a      	cbz	r2, 800af8e <strncmp+0x20>
 800af72:	3901      	subs	r1, #1
 800af74:	1884      	adds	r4, r0, r2
 800af76:	f810 3b01 	ldrb.w	r3, [r0], #1
 800af7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af7e:	4293      	cmp	r3, r2
 800af80:	d103      	bne.n	800af8a <strncmp+0x1c>
 800af82:	42a0      	cmp	r0, r4
 800af84:	d001      	beq.n	800af8a <strncmp+0x1c>
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1f5      	bne.n	800af76 <strncmp+0x8>
 800af8a:	1a98      	subs	r0, r3, r2
 800af8c:	bd10      	pop	{r4, pc}
 800af8e:	4610      	mov	r0, r2
 800af90:	e7fc      	b.n	800af8c <strncmp+0x1e>

0800af92 <__ascii_wctomb>:
 800af92:	b149      	cbz	r1, 800afa8 <__ascii_wctomb+0x16>
 800af94:	2aff      	cmp	r2, #255	; 0xff
 800af96:	bf85      	ittet	hi
 800af98:	238a      	movhi	r3, #138	; 0x8a
 800af9a:	6003      	strhi	r3, [r0, #0]
 800af9c:	700a      	strbls	r2, [r1, #0]
 800af9e:	f04f 30ff 	movhi.w	r0, #4294967295
 800afa2:	bf98      	it	ls
 800afa4:	2001      	movls	r0, #1
 800afa6:	4770      	bx	lr
 800afa8:	4608      	mov	r0, r1
 800afaa:	4770      	bx	lr

0800afac <_write_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4c07      	ldr	r4, [pc, #28]	; (800afcc <_write_r+0x20>)
 800afb0:	4605      	mov	r5, r0
 800afb2:	4608      	mov	r0, r1
 800afb4:	4611      	mov	r1, r2
 800afb6:	2200      	movs	r2, #0
 800afb8:	6022      	str	r2, [r4, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	f7f7 fdd7 	bl	8002b6e <_write>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d102      	bne.n	800afca <_write_r+0x1e>
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	b103      	cbz	r3, 800afca <_write_r+0x1e>
 800afc8:	602b      	str	r3, [r5, #0]
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	200005dc 	.word	0x200005dc

0800afd0 <_close_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4c06      	ldr	r4, [pc, #24]	; (800afec <_close_r+0x1c>)
 800afd4:	2300      	movs	r3, #0
 800afd6:	4605      	mov	r5, r0
 800afd8:	4608      	mov	r0, r1
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	f7f7 fde3 	bl	8002ba6 <_close>
 800afe0:	1c43      	adds	r3, r0, #1
 800afe2:	d102      	bne.n	800afea <_close_r+0x1a>
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	b103      	cbz	r3, 800afea <_close_r+0x1a>
 800afe8:	602b      	str	r3, [r5, #0]
 800afea:	bd38      	pop	{r3, r4, r5, pc}
 800afec:	200005dc 	.word	0x200005dc

0800aff0 <_fstat_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4c07      	ldr	r4, [pc, #28]	; (800b010 <_fstat_r+0x20>)
 800aff4:	2300      	movs	r3, #0
 800aff6:	4605      	mov	r5, r0
 800aff8:	4608      	mov	r0, r1
 800affa:	4611      	mov	r1, r2
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	f7f7 fdde 	bl	8002bbe <_fstat>
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	d102      	bne.n	800b00c <_fstat_r+0x1c>
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	b103      	cbz	r3, 800b00c <_fstat_r+0x1c>
 800b00a:	602b      	str	r3, [r5, #0]
 800b00c:	bd38      	pop	{r3, r4, r5, pc}
 800b00e:	bf00      	nop
 800b010:	200005dc 	.word	0x200005dc

0800b014 <_isatty_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4c06      	ldr	r4, [pc, #24]	; (800b030 <_isatty_r+0x1c>)
 800b018:	2300      	movs	r3, #0
 800b01a:	4605      	mov	r5, r0
 800b01c:	4608      	mov	r0, r1
 800b01e:	6023      	str	r3, [r4, #0]
 800b020:	f7f7 fddd 	bl	8002bde <_isatty>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d102      	bne.n	800b02e <_isatty_r+0x1a>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	b103      	cbz	r3, 800b02e <_isatty_r+0x1a>
 800b02c:	602b      	str	r3, [r5, #0]
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	200005dc 	.word	0x200005dc

0800b034 <_lseek_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4c07      	ldr	r4, [pc, #28]	; (800b054 <_lseek_r+0x20>)
 800b038:	4605      	mov	r5, r0
 800b03a:	4608      	mov	r0, r1
 800b03c:	4611      	mov	r1, r2
 800b03e:	2200      	movs	r2, #0
 800b040:	6022      	str	r2, [r4, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	f7f7 fdd6 	bl	8002bf4 <_lseek>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_lseek_r+0x1e>
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_lseek_r+0x1e>
 800b050:	602b      	str	r3, [r5, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	200005dc 	.word	0x200005dc

0800b058 <memmove>:
 800b058:	4288      	cmp	r0, r1
 800b05a:	b510      	push	{r4, lr}
 800b05c:	eb01 0302 	add.w	r3, r1, r2
 800b060:	d807      	bhi.n	800b072 <memmove+0x1a>
 800b062:	1e42      	subs	r2, r0, #1
 800b064:	4299      	cmp	r1, r3
 800b066:	d00a      	beq.n	800b07e <memmove+0x26>
 800b068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b06c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b070:	e7f8      	b.n	800b064 <memmove+0xc>
 800b072:	4283      	cmp	r3, r0
 800b074:	d9f5      	bls.n	800b062 <memmove+0xa>
 800b076:	1881      	adds	r1, r0, r2
 800b078:	1ad2      	subs	r2, r2, r3
 800b07a:	42d3      	cmn	r3, r2
 800b07c:	d100      	bne.n	800b080 <memmove+0x28>
 800b07e:	bd10      	pop	{r4, pc}
 800b080:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b084:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b088:	e7f7      	b.n	800b07a <memmove+0x22>

0800b08a <__malloc_lock>:
 800b08a:	4770      	bx	lr

0800b08c <__malloc_unlock>:
 800b08c:	4770      	bx	lr

0800b08e <_realloc_r>:
 800b08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b090:	4607      	mov	r7, r0
 800b092:	4614      	mov	r4, r2
 800b094:	460e      	mov	r6, r1
 800b096:	b921      	cbnz	r1, 800b0a2 <_realloc_r+0x14>
 800b098:	4611      	mov	r1, r2
 800b09a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b09e:	f7ff bc27 	b.w	800a8f0 <_malloc_r>
 800b0a2:	b922      	cbnz	r2, 800b0ae <_realloc_r+0x20>
 800b0a4:	f7ff fbd6 	bl	800a854 <_free_r>
 800b0a8:	4625      	mov	r5, r4
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ae:	f000 f827 	bl	800b100 <_malloc_usable_size_r>
 800b0b2:	42a0      	cmp	r0, r4
 800b0b4:	d20f      	bcs.n	800b0d6 <_realloc_r+0x48>
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f7ff fc19 	bl	800a8f0 <_malloc_r>
 800b0be:	4605      	mov	r5, r0
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d0f2      	beq.n	800b0aa <_realloc_r+0x1c>
 800b0c4:	4631      	mov	r1, r6
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	f7fe ffac 	bl	800a024 <memcpy>
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	f7ff fbc0 	bl	800a854 <_free_r>
 800b0d4:	e7e9      	b.n	800b0aa <_realloc_r+0x1c>
 800b0d6:	4635      	mov	r5, r6
 800b0d8:	e7e7      	b.n	800b0aa <_realloc_r+0x1c>
	...

0800b0dc <_read_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4c07      	ldr	r4, [pc, #28]	; (800b0fc <_read_r+0x20>)
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	4608      	mov	r0, r1
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	6022      	str	r2, [r4, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f7f7 fd22 	bl	8002b34 <_read>
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	d102      	bne.n	800b0fa <_read_r+0x1e>
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	b103      	cbz	r3, 800b0fa <_read_r+0x1e>
 800b0f8:	602b      	str	r3, [r5, #0]
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	200005dc 	.word	0x200005dc

0800b100 <_malloc_usable_size_r>:
 800b100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b104:	1f18      	subs	r0, r3, #4
 800b106:	2b00      	cmp	r3, #0
 800b108:	bfbc      	itt	lt
 800b10a:	580b      	ldrlt	r3, [r1, r0]
 800b10c:	18c0      	addlt	r0, r0, r3
 800b10e:	4770      	bx	lr

0800b110 <_init>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	bf00      	nop
 800b114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b116:	bc08      	pop	{r3}
 800b118:	469e      	mov	lr, r3
 800b11a:	4770      	bx	lr

0800b11c <_fini>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	bf00      	nop
 800b120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b122:	bc08      	pop	{r3}
 800b124:	469e      	mov	lr, r3
 800b126:	4770      	bx	lr
