
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08006be0  08006be0  00016be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e80  08006e80  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e80  08006e80  00016e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e88  08006e88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000070  08006f00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08006f00  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e355  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f7e  00000000  00000000  0002e3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00030378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  00031198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020a30  00000000  00000000  00031ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a2db  00000000  00000000  000528f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5338  00000000  00000000  0005cbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121f03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042ec  00000000  00000000  00121f80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bc8 	.word	0x08006bc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006bc8 	.word	0x08006bc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
static void MX_TIM10_Init(void);
static void MX_TIM11_Init(void);
static void MX_TIM13_Init(void);
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f004 fefe 	bl	8005382 <HAL_UART_Transmit>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200003cc 	.word	0x200003cc

08000594 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8000594:	b4b0      	push	{r4, r5, r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	if(sensgettime >= SENSGETCOUNT)
 800059c:	4b3e      	ldr	r3, [pc, #248]	; (8000698 <HAL_ADC_ConvCpltCallback+0x104>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d954      	bls.n	800064e <HAL_ADC_ConvCpltCallback+0xba>
	{
		sensgettime = 0;
 80005a4:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <HAL_ADC_ConvCpltCallback+0x104>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e04b      	b.n	8000648 <HAL_ADC_ConvCpltCallback+0xb4>
		{
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	73bb      	strb	r3, [r7, #14]
 80005b4:	e039      	b.n	800062a <HAL_ADC_ConvCpltCallback+0x96>
			{
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 80005b6:	2300      	movs	r3, #0
 80005b8:	737b      	strb	r3, [r7, #13]
 80005ba:	e02f      	b.n	800061c <HAL_ADC_ConvCpltCallback+0x88>
				{
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	1e5a      	subs	r2, r3, #1
 80005c0:	7bf9      	ldrb	r1, [r7, #15]
 80005c2:	4836      	ldr	r0, [pc, #216]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 80005c4:	4613      	mov	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	440b      	add	r3, r1
 80005ce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80005d2:	817b      	strh	r3, [r7, #10]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 80005d4:	7b79      	ldrb	r1, [r7, #13]
 80005d6:	7bfc      	ldrb	r4, [r7, #15]
 80005d8:	7b7b      	ldrb	r3, [r7, #13]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	7bf8      	ldrb	r0, [r7, #15]
 80005de:	4d2f      	ldr	r5, [pc, #188]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 80005e0:	460b      	mov	r3, r1
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	440b      	add	r3, r1
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	4423      	add	r3, r4
 80005ea:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 80005ee:	492b      	ldr	r1, [pc, #172]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 80005f0:	4613      	mov	r3, r2
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4413      	add	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4403      	add	r3, r0
 80005fa:	4622      	mov	r2, r4
 80005fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8000600:	7b7a      	ldrb	r2, [r7, #13]
 8000602:	7bf9      	ldrb	r1, [r7, #15]
 8000604:	4825      	ldr	r0, [pc, #148]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	897a      	ldrh	r2, [r7, #10]
 8000612:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8000616:	7b7b      	ldrb	r3, [r7, #13]
 8000618:	3b01      	subs	r3, #1
 800061a:	737b      	strb	r3, [r7, #13]
 800061c:	7b7a      	ldrb	r2, [r7, #13]
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8cb      	bhi.n	80005bc <HAL_ADC_ConvCpltCallback+0x28>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	3301      	adds	r3, #1
 8000628:	73bb      	strb	r3, [r7, #14]
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b08      	cmp	r3, #8
 800062e:	d9c2      	bls.n	80005b6 <HAL_ADC_ConvCpltCallback+0x22>
				}
			}
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	4919      	ldr	r1, [pc, #100]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 8000636:	3230      	adds	r2, #48	; 0x30
 8000638:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800063c:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <HAL_ADC_ConvCpltCallback+0x10c>)
 800063e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	3301      	adds	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	2b0b      	cmp	r3, #11
 800064c:	d9b0      	bls.n	80005b0 <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 800064e:	2300      	movs	r3, #0
 8000650:	733b      	strb	r3, [r7, #12]
 8000652:	e013      	b.n	800067c <HAL_ADC_ConvCpltCallback+0xe8>
	{
		analogbuffers[sensgettime][index] = analograw[index];
 8000654:	7b3b      	ldrb	r3, [r7, #12]
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <HAL_ADC_ConvCpltCallback+0x104>)
 8000658:	7812      	ldrb	r2, [r2, #0]
 800065a:	4610      	mov	r0, r2
 800065c:	7b3a      	ldrb	r2, [r7, #12]
 800065e:	4911      	ldr	r1, [pc, #68]	; (80006a4 <HAL_ADC_ConvCpltCallback+0x110>)
 8000660:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 8000664:	490d      	ldr	r1, [pc, #52]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 8000666:	4603      	mov	r3, r0
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4403      	add	r3, r0
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	4622      	mov	r2, r4
 8000672:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8000676:	7b3b      	ldrb	r3, [r7, #12]
 8000678:	3301      	adds	r3, #1
 800067a:	733b      	strb	r3, [r7, #12]
 800067c:	7b3b      	ldrb	r3, [r7, #12]
 800067e:	2b0b      	cmp	r3, #11
 8000680:	d9e8      	bls.n	8000654 <HAL_ADC_ConvCpltCallback+0xc0>
	}
	sensgettime++;
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_ADC_ConvCpltCallback+0x104>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_ADC_ConvCpltCallback+0x104>)
 800068c:	701a      	strb	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bcb0      	pop	{r4, r5, r7}
 8000696:	4770      	bx	lr
 8000698:	200000b8 	.word	0x200000b8
 800069c:	20000414 	.word	0x20000414
 80006a0:	200000a0 	.word	0x200000a0
 80006a4:	200000bc 	.word	0x200000bc

080006a8 <HAL_TIM_PeriodElapsedCallback>:
void sensor_initialize();
void sensor_finalize();
void d_print();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a8e      	ldr	r2, [pc, #568]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	f040 80fe 	bne.w	80008b8 <HAL_TIM_PeriodElapsedCallback+0x210>
	{
#if USE_MOTOR
		if(motorenable)
 80006bc:	4b8d      	ldr	r3, [pc, #564]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	f000 80e9 	beq.w	8000898 <HAL_TIM_PeriodElapsedCallback+0x1f0>
		{
#if !STATICMOTORPWM
			analogl = 0;
 80006c6:	4b8c      	ldr	r3, [pc, #560]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	801a      	strh	r2, [r3, #0]
			analogr = 0;
 80006cc:	4b8b      	ldr	r3, [pc, #556]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	801a      	strh	r2, [r3, #0]
			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	e059      	b.n	800078c <HAL_TIM_PeriodElapsedCallback+0xe4>
			{
				uint16_t analogbuf = analog[i];
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	4a89      	ldr	r2, [pc, #548]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80006dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006e0:	81bb      	strh	r3, [r7, #12]
				//			analogmax[i] = (analogmax[i] < analogbuf) ? analogbuf : analogmax[i];
				//			analogmin[i] = (analogmin[i] > analogbuf) ? analogbuf : analogmin[i];
				if(analogmax[i] < analogbuf)
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4a87      	ldr	r2, [pc, #540]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80006e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d904      	bls.n	80006fa <HAL_TIM_PeriodElapsedCallback+0x52>
				{
					analogmax[i] = analogbuf;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	4984      	ldr	r1, [pc, #528]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80006f4:	89ba      	ldrh	r2, [r7, #12]
 80006f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if(analogmin[i] > analogbuf)
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	4a82      	ldr	r2, [pc, #520]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80006fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000702:	89ba      	ldrh	r2, [r7, #12]
 8000704:	429a      	cmp	r2, r3
 8000706:	d204      	bcs.n	8000712 <HAL_TIM_PeriodElapsedCallback+0x6a>
				{
					analogmin[i] = analogbuf;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	497f      	ldr	r1, [pc, #508]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800070c:	89ba      	ldrh	r2, [r7, #12]
 800070e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}

				analograte[i] = ((analog[i] - analogmin[i]) * 1000) / (analogmax[i] - analogmin[i]);
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	4a7a      	ldr	r2, [pc, #488]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071a:	4619      	mov	r1, r3
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4a7a      	ldr	r2, [pc, #488]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000724:	1acb      	subs	r3, r1, r3
 8000726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072a:	fb02 f203 	mul.w	r2, r2, r3
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4974      	ldr	r1, [pc, #464]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000732:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000736:	4618      	mov	r0, r3
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	4973      	ldr	r1, [pc, #460]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800073c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000740:	1ac3      	subs	r3, r0, r3
 8000742:	fb92 f2f3 	sdiv	r2, r2, r3
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	b291      	uxth	r1, r2
 800074a:	4a70      	ldr	r2, [pc, #448]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800074c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if(i % 2 == 0)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d10a      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0xca>
				{
				  analogl += analograte[i];
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	4a6b      	ldr	r2, [pc, #428]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000760:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000764:	4b64      	ldr	r3, [pc, #400]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4413      	add	r3, r2
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	e009      	b.n	8000786 <HAL_TIM_PeriodElapsedCallback+0xde>
				}
				else
				{
				  analogr += analograte[i];
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4a65      	ldr	r2, [pc, #404]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000776:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800077a:	4b60      	ldr	r3, [pc, #384]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000784:	801a      	strh	r2, [r3, #0]
			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	3301      	adds	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	2b0b      	cmp	r3, #11
 8000790:	d9a2      	bls.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x30>
				}
			}
			direction = (analogl - analogr);	// difference
 8000792:	4b59      	ldr	r3, [pc, #356]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	4b58      	ldr	r3, [pc, #352]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a5c      	ldr	r2, [pc, #368]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80007a0:	6013      	str	r3, [r2, #0]
			leftmotor = commonspeed - direction / CALIBRATIONSIZE / 2 * KPL - (direction - beforedirection) * KDL;
 80007a2:	4b5c      	ldr	r3, [pc, #368]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	4b59      	ldr	r3, [pc, #356]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a5a      	ldr	r2, [pc, #360]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80007ae:	fb82 0203 	smull	r0, r2, r2, r3
 80007b2:	1092      	asrs	r2, r2, #2
 80007b4:	17db      	asrs	r3, r3, #31
 80007b6:	1a9a      	subs	r2, r3, r2
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	009a      	lsls	r2, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	18ca      	adds	r2, r1, r3
 80007c4:	4b52      	ldr	r3, [pc, #328]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80007c6:	6819      	ldr	r1, [r3, #0]
 80007c8:	4b54      	ldr	r3, [pc, #336]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1acb      	subs	r3, r1, r3
 80007ce:	f06f 0109 	mvn.w	r1, #9
 80007d2:	fb01 f303 	mul.w	r3, r1, r3
 80007d6:	4413      	add	r3, r2
 80007d8:	4a51      	ldr	r2, [pc, #324]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80007da:	6013      	str	r3, [r2, #0]
			rightmotor = commonspeed + direction / CALIBRATIONSIZE / 2 * KPR + (direction - beforedirection) * KDR;
 80007dc:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	4b4b      	ldr	r3, [pc, #300]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a4c      	ldr	r2, [pc, #304]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80007e8:	fb82 0203 	smull	r0, r2, r2, r3
 80007ec:	1092      	asrs	r2, r2, #2
 80007ee:	17db      	asrs	r3, r3, #31
 80007f0:	1ad2      	subs	r2, r2, r3
 80007f2:	4613      	mov	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4413      	add	r3, r2
 80007f8:	009a      	lsls	r2, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	4419      	add	r1, r3
 80007fe:	4b44      	ldr	r3, [pc, #272]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b46      	ldr	r3, [pc, #280]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	440b      	add	r3, r1
 8000812:	4a44      	ldr	r2, [pc, #272]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000814:	6013      	str	r3, [r2, #0]
			beforedirection = direction;
 8000816:	4b3e      	ldr	r3, [pc, #248]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a40      	ldr	r2, [pc, #256]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800081c:	6013      	str	r3, [r2, #0]
#else	// !STATICMOTORPWM
			leftmotor = -COMMONSPEED;
			rightmotor = COMMONSPEED;
#endif	// !STATICMOTORPWM
			if(leftmotor < 0)
 800081e:	4b40      	ldr	r3, [pc, #256]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da0a      	bge.n	800083c <HAL_TIM_PeriodElapsedCallback+0x194>
			{
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2104      	movs	r1, #4
 800082a:	483f      	ldr	r0, [pc, #252]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800082c:	f003 f99a 	bl	8003b64 <HAL_GPIO_WritePin>
			  leftmotor *= -1;
 8000830:	4b3b      	ldr	r3, [pc, #236]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	425b      	negs	r3, r3
 8000836:	4a3a      	ldr	r2, [pc, #232]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	e004      	b.n	8000846 <HAL_TIM_PeriodElapsedCallback+0x19e>
			}
			else
			{
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2104      	movs	r1, #4
 8000840:	4839      	ldr	r0, [pc, #228]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000842:	f003 f98f 	bl	8003b64 <HAL_GPIO_WritePin>
			}
			if(rightmotor < 0)
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	da0b      	bge.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x1be>
			{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000854:	4835      	ldr	r0, [pc, #212]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000856:	f003 f985 	bl	8003b64 <HAL_GPIO_WritePin>
			  rightmotor *= -1;
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	425b      	negs	r3, r3
 8000860:	4a30      	ldr	r2, [pc, #192]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	e005      	b.n	8000872 <HAL_TIM_PeriodElapsedCallback+0x1ca>
			}
			else
			{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086c:	482f      	ldr	r0, [pc, #188]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800086e:	f003 f979 	bl	8003b64 <HAL_GPIO_WritePin>
			}
			leftmotor = leftmotor > PWMMAX ? PWMMAX : leftmotor;
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f5b3 6f52 	cmp.w	r3, #3360	; 0xd20
 800087a:	bfa8      	it	ge
 800087c:	f44f 6352 	movge.w	r3, #3360	; 0xd20
 8000880:	4a27      	ldr	r2, [pc, #156]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000882:	6013      	str	r3, [r2, #0]
			rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f5b3 6f52 	cmp.w	r3, #3360	; 0xd20
 800088c:	bfa8      	it	ge
 800088e:	f44f 6352 	movge.w	r3, #3360	; 0xd20
 8000892:	4a24      	ldr	r2, [pc, #144]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e005      	b.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
		}
		else
		{
			leftmotor = 0;
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
			rightmotor = 0;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
		}

#if !D_PWM
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	639a      	str	r2, [r3, #56]	; 0x38
			pwmsteptime = (pwmstepud == 255) ? pwmsteptime - 1 : pwmsteptime + 1;
		}
#endif	// D_PWM
#endif
	}	// TIM6
	if(htim->Instance == TIM10)	// TIM10 // 1ms
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	f040 8111 	bne.w	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x43e>
	{
#if USE_SIDESENSOR
		unsigned char subsens, first, second;

		subsens = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0; // right
 80008c4:	2104      	movs	r1, #4
 80008c6:	481c      	ldr	r0, [pc, #112]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80008c8:	f003 f934 	bl	8003b34 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bf0c      	ite	eq
 80008d2:	2301      	moveq	r3, #1
 80008d4:	2300      	movne	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	72fb      	strb	r3, [r7, #11]
		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 80008da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008de:	4816      	ldr	r0, [pc, #88]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80008e0:	f003 f928 	bl	8003b34 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d128      	bne.n	800093c <HAL_TIM_PeriodElapsedCallback+0x294>
 80008ea:	2302      	movs	r3, #2
 80008ec:	e027      	b.n	800093e <HAL_TIM_PeriodElapsedCallback+0x296>
 80008ee:	bf00      	nop
 80008f0:	40001000 	.word	0x40001000
 80008f4:	2000040c 	.word	0x2000040c
 80008f8:	20000196 	.word	0x20000196
 80008fc:	2000040e 	.word	0x2000040e
 8000900:	200000a0 	.word	0x200000a0
 8000904:	200004ec 	.word	0x200004ec
 8000908:	2000017c 	.word	0x2000017c
 800090c:	200002c0 	.word	0x200002c0
 8000910:	200001ec 	.word	0x200001ec
 8000914:	2000019c 	.word	0x2000019c
 8000918:	2aaaaaab 	.word	0x2aaaaaab
 800091c:	2000054c 	.word	0x2000054c
 8000920:	20000174 	.word	0x20000174
 8000924:	20000168 	.word	0x20000168
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40020800 	.word	0x40020800
 8000930:	200000dc 	.word	0x200000dc
 8000934:	40014400 	.word	0x40014400
 8000938:	40020400 	.word	0x40020400
 800093c:	2300      	movs	r3, #0
 800093e:	b2da      	uxtb	r2, r3
 8000940:	7afb      	ldrb	r3, [r7, #11]
 8000942:	4413      	add	r3, r2
 8000944:	72fb      	strb	r3, [r7, #11]

		if(subsens != subsensbuf)
 8000946:	4b9d      	ldr	r3, [pc, #628]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	7afa      	ldrb	r2, [r7, #11]
 800094c:	429a      	cmp	r2, r3
 800094e:	d05c      	beq.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x362>
		{
			subsensbuf = subsens;
 8000950:	4a9a      	ldr	r2, [pc, #616]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000952:	7afb      	ldrb	r3, [r7, #11]
 8000954:	7013      	strb	r3, [r2, #0]
			marker += subsens << (2 * sidedeltacount);
 8000956:	7afa      	ldrb	r2, [r7, #11]
 8000958:	4b99      	ldr	r3, [pc, #612]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	b2da      	uxtb	r2, r3
 8000964:	4b97      	ldr	r3, [pc, #604]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4413      	add	r3, r2
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b95      	ldr	r3, [pc, #596]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800096e:	701a      	strb	r2, [r3, #0]
			if(subsens == 0b00 && sidedeltacount != 0)
 8000970:	7afb      	ldrb	r3, [r7, #11]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d143      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x356>
 8000976:	4b92      	ldr	r3, [pc, #584]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d03f      	beq.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x356>
			{
				first = (marker & 0b0011);
 800097e:	4b91      	ldr	r3, [pc, #580]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	72bb      	strb	r3, [r7, #10]
				second = (marker & 0b1100) >> 2;
 8000988:	4b8e      	ldr	r3, [pc, #568]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	109b      	asrs	r3, r3, #2
 800098e:	b2db      	uxtb	r3, r3
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	727b      	strb	r3, [r7, #9]
				if(second == 0b00)
 8000996:	7a7b      	ldrb	r3, [r7, #9]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d123      	bne.n	80009e4 <HAL_TIM_PeriodElapsedCallback+0x33c>
				{
					if(first == 0b01)
 800099c:	7abb      	ldrb	r3, [r7, #10]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d115      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x326>
					{
						// right -> stop
						markerstate = 0b01;
 80009a2:	4b89      	ldr	r3, [pc, #548]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
						if(rightmarkercount == 0)
 80009a8:	4b88      	ldr	r3, [pc, #544]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x524>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d106      	bne.n	80009be <HAL_TIM_PeriodElapsedCallback+0x316>
						{
							rightmarkercount++;
 80009b0:	4b86      	ldr	r3, [pc, #536]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x524>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b84      	ldr	r3, [pc, #528]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x524>)
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e015      	b.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x342>
						}
						else if(rightmarkercount == 1)
 80009be:	4b83      	ldr	r3, [pc, #524]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x524>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d111      	bne.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x342>
						{
							motorenable = 0;
 80009c6:	4b82      	ldr	r3, [pc, #520]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e00d      	b.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x342>
						}
					}
					else if(first == 0b10)
 80009ce:	7abb      	ldrb	r3, [r7, #10]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d103      	bne.n	80009dc <HAL_TIM_PeriodElapsedCallback+0x334>
					{
						// left -> curve
						markerstate = 0b10;
 80009d4:	4b7c      	ldr	r3, [pc, #496]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	e006      	b.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x342>
					}
					else
					{
						// cross
						markerstate = 0b11;
 80009dc:	4b7a      	ldr	r3, [pc, #488]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80009de:	2203      	movs	r2, #3
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e002      	b.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x342>
					}
				}
				else
				{
					// cross
					markerstate = 0b11;
 80009e4:	4b78      	ldr	r3, [pc, #480]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80009e6:	2203      	movs	r2, #3
 80009e8:	701a      	strb	r2, [r3, #0]
				}
				sidedeltacount = 0;
 80009ea:	4b75      	ldr	r3, [pc, #468]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
				marker = 0;
 80009f0:	4b74      	ldr	r3, [pc, #464]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
				markerstate = 0;
 80009f6:	4b74      	ldr	r3, [pc, #464]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e005      	b.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x362>
			}
			else
			{
				sidedeltacount++;
 80009fe:	4b70      	ldr	r3, [pc, #448]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b6e      	ldr	r3, [pc, #440]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8000a08:	701a      	strb	r2, [r3, #0]
			}
		}
#endif	// USE_SIDESENSOR

#if USE_ENCODER
		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);	// Left
 8000a0a:	213c      	movs	r1, #60	; 0x3c
 8000a0c:	4871      	ldr	r0, [pc, #452]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000a0e:	f003 ff28 	bl	8004862 <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);	// Right
 8000a12:	213c      	movs	r1, #60	; 0x3c
 8000a14:	4870      	ldr	r0, [pc, #448]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000a16:	f003 ff24 	bl	8004862 <HAL_TIM_Encoder_Stop>

		encl_row = TIM1->CNT;
 8000a1a:	4b70      	ldr	r3, [pc, #448]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	4b6f      	ldr	r3, [pc, #444]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000a22:	801a      	strh	r2, [r3, #0]
		encr_row = 65535 - TIM3->CNT;
 8000a24:	4b6f      	ldr	r3, [pc, #444]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8000a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b6e      	ldr	r3, [pc, #440]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000a30:	801a      	strh	r2, [r3, #0]

		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// Left
 8000a32:	213c      	movs	r1, #60	; 0x3c
 8000a34:	4867      	ldr	r0, [pc, #412]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000a36:	f003 fedd 	bl	80047f4 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	// Right
 8000a3a:	213c      	movs	r1, #60	; 0x3c
 8000a3c:	4866      	ldr	r0, [pc, #408]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000a3e:	f003 fed9 	bl	80047f4 <HAL_TIM_Encoder_Start>

		if(encl_row < encl)
 8000a42:	4b67      	ldr	r3, [pc, #412]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000a44:	881a      	ldrh	r2, [r3, #0]
 8000a46:	4b69      	ldr	r3, [pc, #420]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d208      	bcs.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		{
			dencl = encl_row + 65536 - encl;
 8000a4e:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000a50:	881a      	ldrh	r2, [r3, #0]
 8000a52:	4b66      	ldr	r3, [pc, #408]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b65      	ldr	r3, [pc, #404]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000a5c:	801a      	strh	r2, [r3, #0]
 8000a5e:	e007      	b.n	8000a70 <HAL_TIM_PeriodElapsedCallback+0x3c8>
		}
		else
		{
			dencl = encl_row - encl;
 8000a60:	4b5f      	ldr	r3, [pc, #380]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000a62:	881a      	ldrh	r2, [r3, #0]
 8000a64:	4b61      	ldr	r3, [pc, #388]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b60      	ldr	r3, [pc, #384]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000a6e:	801a      	strh	r2, [r3, #0]
		}
		if(encr_row < encr)
 8000a70:	4b5d      	ldr	r3, [pc, #372]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000a72:	881a      	ldrh	r2, [r3, #0]
 8000a74:	4b5f      	ldr	r3, [pc, #380]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d208      	bcs.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x3e6>
		{
			dencr = encr_row + 65536 - encr;
 8000a7c:	4b5a      	ldr	r3, [pc, #360]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000a7e:	881a      	ldrh	r2, [r3, #0]
 8000a80:	4b5c      	ldr	r3, [pc, #368]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b5b      	ldr	r3, [pc, #364]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8000a8a:	801a      	strh	r2, [r3, #0]
 8000a8c:	e007      	b.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x3f6>
		}
		else
		{
			dencr = encr_row - encr;
 8000a8e:	4b56      	ldr	r3, [pc, #344]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000a90:	881a      	ldrh	r2, [r3, #0]
 8000a92:	4b58      	ldr	r3, [pc, #352]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	4b57      	ldr	r3, [pc, #348]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8000a9c:	801a      	strh	r2, [r3, #0]
		}

		encl = encl_row;
 8000a9e:	4b50      	ldr	r3, [pc, #320]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000aa0:	881a      	ldrh	r2, [r3, #0]
 8000aa2:	4b52      	ldr	r3, [pc, #328]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000aa4:	801a      	strh	r2, [r3, #0]
		encr = encr_row;
 8000aa6:	4b50      	ldr	r3, [pc, #320]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000aa8:	881a      	ldrh	r2, [r3, #0]
 8000aaa:	4b52      	ldr	r3, [pc, #328]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000aac:	801a      	strh	r2, [r3, #0]

		lengthl = LENGTHPERPULSE * dencl;	// um
 8000aae:	4b50      	ldr	r3, [pc, #320]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b51      	ldr	r3, [pc, #324]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x554>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	fb03 f302 	mul.w	r3, r3, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b50      	ldr	r3, [pc, #320]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000ac0:	601a      	str	r2, [r3, #0]
		lengthr = LENGTHPERPULSE * dencr;	// um
 8000ac2:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b4c      	ldr	r3, [pc, #304]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x554>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	fb03 f302 	mul.w	r3, r3, r2
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000ad4:	601a      	str	r2, [r3, #0]

		velocityl = lengthl / 1;
 8000ad6:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a4b      	ldr	r2, [pc, #300]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000adc:	6013      	str	r3, [r2, #0]
		velocityr = lengthr / 1;
 8000ade:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a4a      	ldr	r2, [pc, #296]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000ae4:	6013      	str	r3, [r2, #0]
#endif	// USE_ENCODER
	}	// TIM10

	if(htim->Instance == TIM11)	// TIM11 // 1ms
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a49      	ldr	r2, [pc, #292]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d161      	bne.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0x50c>
	{
		uint8_t rotary_value_row;
		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 8000af0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af4:	4847      	ldr	r0, [pc, #284]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000af6:	f003 f81d 	bl	8003b34 <HAL_GPIO_ReadPin>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bf0c      	ite	eq
 8000b00:	2301      	moveq	r3, #1
 8000b02:	2300      	movne	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 8000b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0c:	4841      	ldr	r0, [pc, #260]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000b0e:	f003 f811 	bl	8003b34 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <HAL_TIM_PeriodElapsedCallback+0x474>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	e000      	b.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x476>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	7a3b      	ldrb	r3, [r7, #8]
 8000b22:	4413      	add	r3, r2
 8000b24:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 8000b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2a:	483b      	ldr	r0, [pc, #236]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000b2c:	f003 f802 	bl	8003b34 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0x492>
 8000b36:	2304      	movs	r3, #4
 8000b38:	e000      	b.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x494>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	7a3b      	ldrb	r3, [r7, #8]
 8000b40:	4413      	add	r3, r2
 8000b42:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 8000b44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b48:	4832      	ldr	r0, [pc, #200]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000b4a:	f002 fff3 	bl	8003b34 <HAL_GPIO_ReadPin>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <HAL_TIM_PeriodElapsedCallback+0x4b0>
 8000b54:	2308      	movs	r3, #8
 8000b56:	e000      	b.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x4b2>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	7a3b      	ldrb	r3, [r7, #8]
 8000b5e:	4413      	add	r3, r2
 8000b60:	723b      	strb	r3, [r7, #8]
		rotary_value = rotary_value_row;
 8000b62:	4a2e      	ldr	r2, [pc, #184]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000b64:	7a3b      	ldrb	r3, [r7, #8]
 8000b66:	7013      	strb	r3, [r2, #0]

		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6c:	4829      	ldr	r0, [pc, #164]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000b6e:	f002 ffe1 	bl	8003b34 <HAL_GPIO_ReadPin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10a      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x4e6>
 8000b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7c:	4825      	ldr	r0, [pc, #148]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000b7e:	f002 ffd9 	bl	8003b34 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d002      	beq.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x4e6>
		{
			enter = 1;
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	4820      	ldr	r0, [pc, #128]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000b94:	f002 ffce 	bl	8003b34 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00a      	beq.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0x50c>
 8000b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba2:	481c      	ldr	r0, [pc, #112]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000ba4:	f002 ffc6 	bl	8003b34 <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0x50c>
		{
			enter = 0;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
	}

	if(htim->Instance == TIM7)	// TIM7 // 0.1ms
	{
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000198 	.word	0x20000198
 8000bc0:	200001e2 	.word	0x200001e2
 8000bc4:	2000033c 	.word	0x2000033c
 8000bc8:	2000023d 	.word	0x2000023d
 8000bcc:	20000550 	.word	0x20000550
 8000bd0:	2000040c 	.word	0x2000040c
 8000bd4:	20000380 	.word	0x20000380
 8000bd8:	200001a0 	.word	0x200001a0
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	2000016e 	.word	0x2000016e
 8000be4:	40000400 	.word	0x40000400
 8000be8:	2000016c 	.word	0x2000016c
 8000bec:	200001e0 	.word	0x200001e0
 8000bf0:	2000019a 	.word	0x2000019a
 8000bf4:	20000098 	.word	0x20000098
 8000bf8:	2000009a 	.word	0x2000009a
 8000bfc:	200003c8 	.word	0x200003c8
 8000c00:	200003c0 	.word	0x200003c0
 8000c04:	20000508 	.word	0x20000508
 8000c08:	2000009c 	.word	0x2000009c
 8000c0c:	20000164 	.word	0x20000164
 8000c10:	40014800 	.word	0x40014800
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	20000194 	.word	0x20000194
 8000c20:	20000551 	.word	0x20000551

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2a:	f001 fc31 	bl	8002490 <HAL_Init>

  /* USER CODE BEGIN Init */
	enter = 0;
 8000c2e:	4bb8      	ldr	r3, [pc, #736]	; (8000f10 <main+0x2ec>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
	motorenable = 0;
 8000c34:	4bb7      	ldr	r3, [pc, #732]	; (8000f14 <main+0x2f0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
	rotary_value = 0;
 8000c3a:	4bb7      	ldr	r3, [pc, #732]	; (8000f18 <main+0x2f4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
	LENGTHPERPULSE = PI * TIREDIAMETER * PINIONGEAR / SPURGEAR / PULSEPERROTATE;
 8000c40:	4bb6      	ldr	r3, [pc, #728]	; (8000f1c <main+0x2f8>)
 8000c42:	2227      	movs	r2, #39	; 0x27
 8000c44:	601a      	str	r2, [r3, #0]
	commonspeed = COMMONSPEED;
 8000c46:	4bb6      	ldr	r3, [pc, #728]	; (8000f20 <main+0x2fc>)
 8000c48:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000c4c:	801a      	strh	r2, [r3, #0]
#if D_PWM
	pwmsteptime = 0;
	pwmstepud = 1;
#endif

	for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e00d      	b.n	8000c70 <main+0x4c>
	{
		analogmax[i] = 0;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	4ab3      	ldr	r2, [pc, #716]	; (8000f24 <main+0x300>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmin[i] = 4096;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	4ab1      	ldr	r2, [pc, #708]	; (8000f28 <main+0x304>)
 8000c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b0b      	cmp	r3, #11
 8000c74:	d9ee      	bls.n	8000c54 <main+0x30>
	}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c76:	f000 f9d7 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f000 fd95 	bl	80017a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c7e:	f000 fd73 	bl	8001768 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c82:	f000 fa3b 	bl	80010fc <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000c86:	f000 fd45 	bl	8001714 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8000c8a:	f000 fc6b 	bl	8001564 <MX_TIM6_Init>
  MX_TIM4_Init();
 8000c8e:	f000 fc05 	bl	800149c <MX_TIM4_Init>
  MX_TIM7_Init();
 8000c92:	f000 fc9d 	bl	80015d0 <MX_TIM7_Init>
  MX_TIM1_Init();
 8000c96:	f000 fb55 	bl	8001344 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c9a:	f000 fbab 	bl	80013f4 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000c9e:	f000 fccd 	bl	800163c <MX_TIM10_Init>
  MX_TIM11_Init();
 8000ca2:	f000 fcef 	bl	8001684 <MX_TIM11_Init>
  MX_TIM13_Init();
 8000ca6:	f000 fd11 	bl	80016cc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8000caa:	48a0      	ldr	r0, [pc, #640]	; (8000f2c <main+0x308>)
 8000cac:	f004 fffa 	bl	8005ca4 <iprintf>
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8000cb0:	489f      	ldr	r0, [pc, #636]	; (8000f30 <main+0x30c>)
 8000cb2:	f005 f87f 	bl	8005db4 <puts>

	printf("Starting Analog Read\r\n");
 8000cb6:	489f      	ldr	r0, [pc, #636]	; (8000f34 <main+0x310>)
 8000cb8:	f005 f87c 	bl	8005db4 <puts>
	if(HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
 8000cbc:	489e      	ldr	r0, [pc, #632]	; (8000f38 <main+0x314>)
 8000cbe:	f001 fc7b 	bl	80025b8 <HAL_ADC_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <main+0xa8>
 8000cc8:	f000 fff4 	bl	8001cb4 <Error_Handler>

	printf("Starting TIM11\r\n");
 8000ccc:	489b      	ldr	r0, [pc, #620]	; (8000f3c <main+0x318>)
 8000cce:	f005 f871 	bl	8005db4 <puts>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8000cd2:	489b      	ldr	r0, [pc, #620]	; (8000f40 <main+0x31c>)
 8000cd4:	f003 fbeb 	bl	80044ae <HAL_TIM_Base_Start_IT>

#if D_ENCODER
	printf("LENGTHPERPULSE = %u\r\n", LENGTHPERPULSE);
 8000cd8:	4b90      	ldr	r3, [pc, #576]	; (8000f1c <main+0x2f8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4899      	ldr	r0, [pc, #612]	; (8000f44 <main+0x320>)
 8000ce0:	f004 ffe0 	bl	8005ca4 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	led_rgb(1, 1, 1);	// White
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fe35 	bl	8001958 <led_rgb>
	while (1)
	{
		printf("///// WHILE /////\n\r");
 8000cee:	4896      	ldr	r0, [pc, #600]	; (8000f48 <main+0x324>)
 8000cf0:	f004 ffd8 	bl	8005ca4 <iprintf>
#if D_SWITCH
		printf("enter = %d\r\n", enter);
 8000cf4:	4b86      	ldr	r3, [pc, #536]	; (8000f10 <main+0x2ec>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4894      	ldr	r0, [pc, #592]	; (8000f4c <main+0x328>)
 8000cfc:	f004 ffd2 	bl	8005ca4 <iprintf>
#endif
#if D_ROTARY
		printf("rotary_value = %d\r\n", rotary_value);
 8000d00:	4b85      	ldr	r3, [pc, #532]	; (8000f18 <main+0x2f4>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4892      	ldr	r0, [pc, #584]	; (8000f50 <main+0x32c>)
 8000d08:	f004 ffcc 	bl	8005ca4 <iprintf>
#endif
		if(enter)
 8000d0c:	4b80      	ldr	r3, [pc, #512]	; (8000f10 <main+0x2ec>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0ec      	beq.n	8000cee <main+0xca>
		{
			switch(rotary_value)
 8000d14:	4b80      	ldr	r3, [pc, #512]	; (8000f18 <main+0x2f4>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d8e8      	bhi.n	8000cee <main+0xca>
 8000d1c:	a201      	add	r2, pc, #4	; (adr r2, 8000d24 <main+0x100>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d35 	.word	0x08000d35
 8000d28:	08000fb5 	.word	0x08000fb5
 8000d2c:	08000fd3 	.word	0x08000fd3
 8000d30:	08000ff1 	.word	0x08000ff1
			{
				case 0x0:
					led_rgb(1, 1, 0);	// Yellow
 8000d34:	2200      	movs	r2, #0
 8000d36:	2101      	movs	r1, #1
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f000 fe0d 	bl	8001958 <led_rgb>

					sensor_initialize();
 8000d3e:	f000 fe41 	bl	80019c4 <sensor_initialize>

					while(enter)
 8000d42:	e03e      	b.n	8000dc2 <main+0x19e>
					{
						for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	73bb      	strb	r3, [r7, #14]
 8000d48:	e035      	b.n	8000db6 <main+0x192>
						{
							uint16_t analogbuf = analog[j];
 8000d4a:	7bbb      	ldrb	r3, [r7, #14]
 8000d4c:	4a81      	ldr	r2, [pc, #516]	; (8000f54 <main+0x330>)
 8000d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d52:	80bb      	strh	r3, [r7, #4]
							analogmax[j] = (analogmax[j] < analogbuf) ? analogbuf : analogmax[j];
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	4a73      	ldr	r2, [pc, #460]	; (8000f24 <main+0x300>)
 8000d58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d5c:	7bbb      	ldrb	r3, [r7, #14]
 8000d5e:	88b9      	ldrh	r1, [r7, #4]
 8000d60:	428a      	cmp	r2, r1
 8000d62:	bf38      	it	cc
 8000d64:	460a      	movcc	r2, r1
 8000d66:	b291      	uxth	r1, r2
 8000d68:	4a6e      	ldr	r2, [pc, #440]	; (8000f24 <main+0x300>)
 8000d6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							analogmin[j] = (analogmin[j] > analogbuf) ? analogbuf : analogmin[j];
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	4a6d      	ldr	r2, [pc, #436]	; (8000f28 <main+0x304>)
 8000d72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	88b9      	ldrh	r1, [r7, #4]
 8000d7a:	428a      	cmp	r2, r1
 8000d7c:	bf28      	it	cs
 8000d7e:	460a      	movcs	r2, r1
 8000d80:	b291      	uxth	r1, r2
 8000d82:	4a69      	ldr	r2, [pc, #420]	; (8000f28 <main+0x304>)
 8000d84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if D_ANALOG
							printf("[%2d] = ", j);
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4872      	ldr	r0, [pc, #456]	; (8000f58 <main+0x334>)
 8000d8e:	f004 ff89 	bl	8005ca4 <iprintf>
							printf("%4d", analogbuf);
 8000d92:	88bb      	ldrh	r3, [r7, #4]
 8000d94:	4619      	mov	r1, r3
 8000d96:	4871      	ldr	r0, [pc, #452]	; (8000f5c <main+0x338>)
 8000d98:	f004 ff84 	bl	8005ca4 <iprintf>
							if(j != CALIBRATIONSIZE - 1)
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	2b0b      	cmp	r3, #11
 8000da0:	d003      	beq.n	8000daa <main+0x186>
							{
								printf(", ");
 8000da2:	486f      	ldr	r0, [pc, #444]	; (8000f60 <main+0x33c>)
 8000da4:	f004 ff7e 	bl	8005ca4 <iprintf>
 8000da8:	e002      	b.n	8000db0 <main+0x18c>
							}
							else
							{
								printf("\r\n");
 8000daa:	486e      	ldr	r0, [pc, #440]	; (8000f64 <main+0x340>)
 8000dac:	f005 f802 	bl	8005db4 <puts>
						for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	3301      	adds	r3, #1
 8000db4:	73bb      	strb	r3, [r7, #14]
 8000db6:	7bbb      	ldrb	r3, [r7, #14]
 8000db8:	2b0b      	cmp	r3, #11
 8000dba:	d9c6      	bls.n	8000d4a <main+0x126>
							}
#endif
						}
						HAL_Delay(250);
 8000dbc:	20fa      	movs	r0, #250	; 0xfa
 8000dbe:	f001 fbd9 	bl	8002574 <HAL_Delay>
					while(enter)
 8000dc2:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <main+0x2ec>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1bc      	bne.n	8000d44 <main+0x120>
					}
					sensor_finalize();
 8000dca:	f000 fe1b 	bl	8001a04 <sensor_finalize>
#if D_ANALOG
					printf(ESC_YEL);
 8000dce:	4866      	ldr	r0, [pc, #408]	; (8000f68 <main+0x344>)
 8000dd0:	f004 ff68 	bl	8005ca4 <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	737b      	strb	r3, [r7, #13]
 8000dd8:	e00f      	b.n	8000dfa <main+0x1d6>
					{
							printf("[%2d] = ", j);
 8000dda:	7b7b      	ldrb	r3, [r7, #13]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	485e      	ldr	r0, [pc, #376]	; (8000f58 <main+0x334>)
 8000de0:	f004 ff60 	bl	8005ca4 <iprintf>
							printf("%4d,", analogmax[j]);
 8000de4:	7b7b      	ldrb	r3, [r7, #13]
 8000de6:	4a4f      	ldr	r2, [pc, #316]	; (8000f24 <main+0x300>)
 8000de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dec:	4619      	mov	r1, r3
 8000dee:	485f      	ldr	r0, [pc, #380]	; (8000f6c <main+0x348>)
 8000df0:	f004 ff58 	bl	8005ca4 <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000df4:	7b7b      	ldrb	r3, [r7, #13]
 8000df6:	3301      	adds	r3, #1
 8000df8:	737b      	strb	r3, [r7, #13]
 8000dfa:	7b7b      	ldrb	r3, [r7, #13]
 8000dfc:	2b0b      	cmp	r3, #11
 8000dfe:	d9ec      	bls.n	8000dda <main+0x1b6>
					}
					printf("\r\n");
 8000e00:	4858      	ldr	r0, [pc, #352]	; (8000f64 <main+0x340>)
 8000e02:	f004 ffd7 	bl	8005db4 <puts>
					printf(ESC_CYA);
 8000e06:	485a      	ldr	r0, [pc, #360]	; (8000f70 <main+0x34c>)
 8000e08:	f004 ff4c 	bl	8005ca4 <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	733b      	strb	r3, [r7, #12]
 8000e10:	e00f      	b.n	8000e32 <main+0x20e>
					{
							printf("[%2d] = ", j);
 8000e12:	7b3b      	ldrb	r3, [r7, #12]
 8000e14:	4619      	mov	r1, r3
 8000e16:	4850      	ldr	r0, [pc, #320]	; (8000f58 <main+0x334>)
 8000e18:	f004 ff44 	bl	8005ca4 <iprintf>
							printf("%4d,", analogmin[j]);
 8000e1c:	7b3b      	ldrb	r3, [r7, #12]
 8000e1e:	4a42      	ldr	r2, [pc, #264]	; (8000f28 <main+0x304>)
 8000e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4851      	ldr	r0, [pc, #324]	; (8000f6c <main+0x348>)
 8000e28:	f004 ff3c 	bl	8005ca4 <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000e2c:	7b3b      	ldrb	r3, [r7, #12]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	733b      	strb	r3, [r7, #12]
 8000e32:	7b3b      	ldrb	r3, [r7, #12]
 8000e34:	2b0b      	cmp	r3, #11
 8000e36:	d9ec      	bls.n	8000e12 <main+0x1ee>
					}
					printf("\r\n");
 8000e38:	484a      	ldr	r0, [pc, #296]	; (8000f64 <main+0x340>)
 8000e3a:	f004 ffbb 	bl	8005db4 <puts>
					printf(ESC_DEF);
 8000e3e:	483b      	ldr	r0, [pc, #236]	; (8000f2c <main+0x308>)
 8000e40:	f004 ff30 	bl	8005ca4 <iprintf>
					for(unsigned char i = 0; 5 * CALIBRATIONSIZE > i; i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	72fb      	strb	r3, [r7, #11]
 8000e48:	e005      	b.n	8000e56 <main+0x232>
					{
							printf("v");
 8000e4a:	2076      	movs	r0, #118	; 0x76
 8000e4c:	f004 ff42 	bl	8005cd4 <putchar>
					for(unsigned char i = 0; 5 * CALIBRATIONSIZE > i; i++)
 8000e50:	7afb      	ldrb	r3, [r7, #11]
 8000e52:	3301      	adds	r3, #1
 8000e54:	72fb      	strb	r3, [r7, #11]
 8000e56:	7afb      	ldrb	r3, [r7, #11]
 8000e58:	2b3b      	cmp	r3, #59	; 0x3b
 8000e5a:	d9f6      	bls.n	8000e4a <main+0x226>
					}
					printf("\r\n");
 8000e5c:	4841      	ldr	r0, [pc, #260]	; (8000f64 <main+0x340>)
 8000e5e:	f004 ffa9 	bl	8005db4 <puts>
					printf(ESC_YEL);
 8000e62:	4841      	ldr	r0, [pc, #260]	; (8000f68 <main+0x344>)
 8000e64:	f004 ff1e 	bl	8005ca4 <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	72bb      	strb	r3, [r7, #10]
 8000e6c:	e011      	b.n	8000e92 <main+0x26e>
					{
							printf("[%2d] = ", i * 2);
 8000e6e:	7abb      	ldrb	r3, [r7, #10]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4619      	mov	r1, r3
 8000e74:	4838      	ldr	r0, [pc, #224]	; (8000f58 <main+0x334>)
 8000e76:	f004 ff15 	bl	8005ca4 <iprintf>
							printf("%4d, ", analogmax[i * 2]);
 8000e7a:	7abb      	ldrb	r3, [r7, #10]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4a29      	ldr	r2, [pc, #164]	; (8000f24 <main+0x300>)
 8000e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e84:	4619      	mov	r1, r3
 8000e86:	483b      	ldr	r0, [pc, #236]	; (8000f74 <main+0x350>)
 8000e88:	f004 ff0c 	bl	8005ca4 <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000e8c:	7abb      	ldrb	r3, [r7, #10]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	72bb      	strb	r3, [r7, #10]
 8000e92:	7abb      	ldrb	r3, [r7, #10]
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d9ea      	bls.n	8000e6e <main+0x24a>
					}
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000e98:	2306      	movs	r3, #6
 8000e9a:	727b      	strb	r3, [r7, #9]
 8000e9c:	e013      	b.n	8000ec6 <main+0x2a2>
					{
							printf("[%2d] = ", i * 2 - 1);
 8000e9e:	7a7b      	ldrb	r3, [r7, #9]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	482c      	ldr	r0, [pc, #176]	; (8000f58 <main+0x334>)
 8000ea8:	f004 fefc 	bl	8005ca4 <iprintf>
							printf("%4d,", analogmax[i * 2 - 1]);
 8000eac:	7a7b      	ldrb	r3, [r7, #9]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <main+0x300>)
 8000eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	482c      	ldr	r0, [pc, #176]	; (8000f6c <main+0x348>)
 8000ebc:	f004 fef2 	bl	8005ca4 <iprintf>
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000ec0:	7a7b      	ldrb	r3, [r7, #9]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	727b      	strb	r3, [r7, #9]
 8000ec6:	7a7b      	ldrb	r3, [r7, #9]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1e8      	bne.n	8000e9e <main+0x27a>
					}
					printf("\r\n");
 8000ecc:	4825      	ldr	r0, [pc, #148]	; (8000f64 <main+0x340>)
 8000ece:	f004 ff71 	bl	8005db4 <puts>
					printf(ESC_CYA);
 8000ed2:	4827      	ldr	r0, [pc, #156]	; (8000f70 <main+0x34c>)
 8000ed4:	f004 fee6 	bl	8005ca4 <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	723b      	strb	r3, [r7, #8]
 8000edc:	e011      	b.n	8000f02 <main+0x2de>
					{
							printf("[%2d] = ", i * 2);
 8000ede:	7a3b      	ldrb	r3, [r7, #8]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481c      	ldr	r0, [pc, #112]	; (8000f58 <main+0x334>)
 8000ee6:	f004 fedd 	bl	8005ca4 <iprintf>
							printf("%4d, ", analogmin[i * 2]);
 8000eea:	7a3b      	ldrb	r3, [r7, #8]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <main+0x304>)
 8000ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	481f      	ldr	r0, [pc, #124]	; (8000f74 <main+0x350>)
 8000ef8:	f004 fed4 	bl	8005ca4 <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000efc:	7a3b      	ldrb	r3, [r7, #8]
 8000efe:	3301      	adds	r3, #1
 8000f00:	723b      	strb	r3, [r7, #8]
 8000f02:	7a3b      	ldrb	r3, [r7, #8]
 8000f04:	2b05      	cmp	r3, #5
 8000f06:	d9ea      	bls.n	8000ede <main+0x2ba>
					}
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000f08:	2306      	movs	r3, #6
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	e048      	b.n	8000fa0 <main+0x37c>
 8000f0e:	bf00      	nop
 8000f10:	20000551 	.word	0x20000551
 8000f14:	2000040c 	.word	0x2000040c
 8000f18:	20000194 	.word	0x20000194
 8000f1c:	200003c8 	.word	0x200003c8
 8000f20:	2000019c 	.word	0x2000019c
 8000f24:	200004ec 	.word	0x200004ec
 8000f28:	2000017c 	.word	0x2000017c
 8000f2c:	08006be0 	.word	0x08006be0
 8000f30:	08006be8 	.word	0x08006be8
 8000f34:	08006c08 	.word	0x08006c08
 8000f38:	200001f4 	.word	0x200001f4
 8000f3c:	08006c20 	.word	0x08006c20
 8000f40:	20000280 	.word	0x20000280
 8000f44:	08006c30 	.word	0x08006c30
 8000f48:	08006c48 	.word	0x08006c48
 8000f4c:	08006c5c 	.word	0x08006c5c
 8000f50:	08006c6c 	.word	0x08006c6c
 8000f54:	200000a0 	.word	0x200000a0
 8000f58:	08006c80 	.word	0x08006c80
 8000f5c:	08006c8c 	.word	0x08006c8c
 8000f60:	08006c90 	.word	0x08006c90
 8000f64:	08006c94 	.word	0x08006c94
 8000f68:	08006c98 	.word	0x08006c98
 8000f6c:	08006ca0 	.word	0x08006ca0
 8000f70:	08006ca8 	.word	0x08006ca8
 8000f74:	08006cb0 	.word	0x08006cb0
					{
							printf("[%2d] = ", i * 2 - 1);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4823      	ldr	r0, [pc, #140]	; (8001010 <main+0x3ec>)
 8000f82:	f004 fe8f 	bl	8005ca4 <iprintf>
							printf("%4d,", analogmin[i * 2 - 1]);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <main+0x3f0>)
 8000f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f92:	4619      	mov	r1, r3
 8000f94:	4820      	ldr	r0, [pc, #128]	; (8001018 <main+0x3f4>)
 8000f96:	f004 fe85 	bl	8005ca4 <iprintf>
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1e8      	bne.n	8000f78 <main+0x354>
					}
					printf("\r\n");
 8000fa6:	481d      	ldr	r0, [pc, #116]	; (800101c <main+0x3f8>)
 8000fa8:	f004 ff04 	bl	8005db4 <puts>
					printf(ESC_DEF);
 8000fac:	481c      	ldr	r0, [pc, #112]	; (8001020 <main+0x3fc>)
 8000fae:	f004 fe79 	bl	8005ca4 <iprintf>
#endif
					break;
 8000fb2:	e02c      	b.n	800100e <main+0x3ea>
				case 0x1:
					running_initialize();
 8000fb4:	f000 fd34 	bl	8001a20 <running_initialize>

					while(enter)
 8000fb8:	e004      	b.n	8000fc4 <main+0x3a0>
					{
						d_print();
 8000fba:	f000 fdcf 	bl	8001b5c <d_print>
						HAL_Delay(250);
 8000fbe:	20fa      	movs	r0, #250	; 0xfa
 8000fc0:	f001 fad8 	bl	8002574 <HAL_Delay>
					while(enter)
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <main+0x400>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f6      	bne.n	8000fba <main+0x396>
					}

					running_finalize();
 8000fcc:	f000 fd9a 	bl	8001b04 <running_finalize>
					break;
 8000fd0:	e01d      	b.n	800100e <main+0x3ea>
				case 0x2:
					running_initialize();
 8000fd2:	f000 fd25 	bl	8001a20 <running_initialize>

					while(enter)
 8000fd6:	e004      	b.n	8000fe2 <main+0x3be>
					{
						d_print();
 8000fd8:	f000 fdc0 	bl	8001b5c <d_print>
						HAL_Delay(250);
 8000fdc:	20fa      	movs	r0, #250	; 0xfa
 8000fde:	f001 fac9 	bl	8002574 <HAL_Delay>
					while(enter)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <main+0x400>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f6      	bne.n	8000fd8 <main+0x3b4>
					}

					running_finalize();
 8000fea:	f000 fd8b 	bl	8001b04 <running_finalize>
					break;
 8000fee:	e00e      	b.n	800100e <main+0x3ea>
				case 0x3:
					running_initialize();
 8000ff0:	f000 fd16 	bl	8001a20 <running_initialize>

					while(enter)
 8000ff4:	e004      	b.n	8001000 <main+0x3dc>
					{
						d_print();
 8000ff6:	f000 fdb1 	bl	8001b5c <d_print>
						HAL_Delay(250);
 8000ffa:	20fa      	movs	r0, #250	; 0xfa
 8000ffc:	f001 faba 	bl	8002574 <HAL_Delay>
					while(enter)
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <main+0x400>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f6      	bne.n	8000ff6 <main+0x3d2>
					}

					running_finalize();
 8001008:	f000 fd7c 	bl	8001b04 <running_finalize>
					break;
 800100c:	bf00      	nop
		printf("///// WHILE /////\n\r");
 800100e:	e66e      	b.n	8000cee <main+0xca>
 8001010:	08006c80 	.word	0x08006c80
 8001014:	2000017c 	.word	0x2000017c
 8001018:	08006ca0 	.word	0x08006ca0
 800101c:	08006c94 	.word	0x08006c94
 8001020:	08006be0 	.word	0x08006be0
 8001024:	20000551 	.word	0x20000551

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fe2c 	bl	8005c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <SystemClock_Config+0xcc>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <SystemClock_Config+0xcc>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <SystemClock_Config+0xd0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <SystemClock_Config+0xd0>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001084:	2301      	movs	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001088:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108e:	2302      	movs	r3, #2
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001098:	2308      	movs	r3, #8
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800109c:	23a8      	movs	r3, #168	; 0xa8
 800109e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a4:	2304      	movs	r3, #4
 80010a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 fd73 	bl	8003b98 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010b8:	f000 fdfc 	bl	8001cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	230f      	movs	r3, #15
 80010be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c0:	2302      	movs	r3, #2
 80010c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2105      	movs	r1, #5
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 ffcc 	bl	8004078 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010e6:	f000 fde5 	bl	8001cb4 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3750      	adds	r7, #80	; 0x50
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800110e:	4b8a      	ldr	r3, [pc, #552]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001110:	4a8a      	ldr	r2, [pc, #552]	; (800133c <MX_ADC1_Init+0x240>)
 8001112:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001114:	4b88      	ldr	r3, [pc, #544]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001116:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800111a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111c:	4b86      	ldr	r3, [pc, #536]	; (8001338 <MX_ADC1_Init+0x23c>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001122:	4b85      	ldr	r3, [pc, #532]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001124:	2201      	movs	r2, #1
 8001126:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001128:	4b83      	ldr	r3, [pc, #524]	; (8001338 <MX_ADC1_Init+0x23c>)
 800112a:	2201      	movs	r2, #1
 800112c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800112e:	4b82      	ldr	r3, [pc, #520]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001136:	4b80      	ldr	r3, [pc, #512]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001138:	2200      	movs	r2, #0
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113c:	4b7e      	ldr	r3, [pc, #504]	; (8001338 <MX_ADC1_Init+0x23c>)
 800113e:	4a80      	ldr	r2, [pc, #512]	; (8001340 <MX_ADC1_Init+0x244>)
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001142:	4b7d      	ldr	r3, [pc, #500]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8001148:	4b7b      	ldr	r3, [pc, #492]	; (8001338 <MX_ADC1_Init+0x23c>)
 800114a:	2210      	movs	r2, #16
 800114c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800114e:	4b7a      	ldr	r3, [pc, #488]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001156:	4b78      	ldr	r3, [pc, #480]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001158:	2201      	movs	r2, #1
 800115a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115c:	4876      	ldr	r0, [pc, #472]	; (8001338 <MX_ADC1_Init+0x23c>)
 800115e:	f001 fa2b 	bl	80025b8 <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 fda4 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800116c:	2309      	movs	r3, #9
 800116e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001170:	2301      	movs	r3, #1
 8001172:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001174:	2303      	movs	r3, #3
 8001176:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	486e      	ldr	r0, [pc, #440]	; (8001338 <MX_ADC1_Init+0x23c>)
 800117e:	f001 fbaf 	bl	80028e0 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001188:	f000 fd94 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800118c:	230a      	movs	r3, #10
 800118e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4867      	ldr	r0, [pc, #412]	; (8001338 <MX_ADC1_Init+0x23c>)
 800119a:	f001 fba1 	bl	80028e0 <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011a4:	f000 fd86 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011a8:	2308      	movs	r3, #8
 80011aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011ac:	2303      	movs	r3, #3
 80011ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	4860      	ldr	r0, [pc, #384]	; (8001338 <MX_ADC1_Init+0x23c>)
 80011b6:	f001 fb93 	bl	80028e0 <HAL_ADC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80011c0:	f000 fd78 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011c4:	230b      	movs	r3, #11
 80011c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011c8:	2304      	movs	r3, #4
 80011ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4859      	ldr	r0, [pc, #356]	; (8001338 <MX_ADC1_Init+0x23c>)
 80011d2:	f001 fb85 	bl	80028e0 <HAL_ADC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80011dc:	f000 fd6a 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011e0:	230e      	movs	r3, #14
 80011e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80011e4:	2305      	movs	r3, #5
 80011e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	4852      	ldr	r0, [pc, #328]	; (8001338 <MX_ADC1_Init+0x23c>)
 80011ee:	f001 fb77 	bl	80028e0 <HAL_ADC_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80011f8:	f000 fd5c 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011fc:	230f      	movs	r3, #15
 80011fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001200:	2306      	movs	r3, #6
 8001202:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	484b      	ldr	r0, [pc, #300]	; (8001338 <MX_ADC1_Init+0x23c>)
 800120a:	f001 fb69 	bl	80028e0 <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001214:	f000 fd4e 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001218:	230c      	movs	r3, #12
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800121c:	2307      	movs	r3, #7
 800121e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4844      	ldr	r0, [pc, #272]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001226:	f001 fb5b 	bl	80028e0 <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001230:	f000 fd40 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001234:	230d      	movs	r3, #13
 8001236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001238:	2308      	movs	r3, #8
 800123a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	4619      	mov	r1, r3
 8001240:	483d      	ldr	r0, [pc, #244]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001242:	f001 fb4d 	bl	80028e0 <HAL_ADC_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800124c:	f000 fd32 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001250:	2307      	movs	r3, #7
 8001252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001254:	2309      	movs	r3, #9
 8001256:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	4836      	ldr	r0, [pc, #216]	; (8001338 <MX_ADC1_Init+0x23c>)
 800125e:	f001 fb3f 	bl	80028e0 <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001268:	f000 fd24 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001270:	230a      	movs	r3, #10
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	482f      	ldr	r0, [pc, #188]	; (8001338 <MX_ADC1_Init+0x23c>)
 800127a:	f001 fb31 	bl	80028e0 <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001284:	f000 fd16 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001288:	2306      	movs	r3, #6
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800128c:	230b      	movs	r3, #11
 800128e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	4828      	ldr	r0, [pc, #160]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001296:	f001 fb23 	bl	80028e0 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80012a0:	f000 fd08 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80012a8:	230c      	movs	r3, #12
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4821      	ldr	r0, [pc, #132]	; (8001338 <MX_ADC1_Init+0x23c>)
 80012b2:	f001 fb15 	bl	80028e0 <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80012bc:	f000 fcfa 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012c0:	2305      	movs	r3, #5
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80012c4:	230d      	movs	r3, #13
 80012c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	481a      	ldr	r0, [pc, #104]	; (8001338 <MX_ADC1_Init+0x23c>)
 80012ce:	f001 fb07 	bl	80028e0 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80012d8:	f000 fcec 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012dc:	2302      	movs	r3, #2
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80012e0:	230e      	movs	r3, #14
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4813      	ldr	r0, [pc, #76]	; (8001338 <MX_ADC1_Init+0x23c>)
 80012ea:	f001 faf9 	bl	80028e0 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80012f4:	f000 fcde 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80012fc:	230f      	movs	r3, #15
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001306:	f001 faeb 	bl	80028e0 <HAL_ADC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001310:	f000 fcd0 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001314:	2303      	movs	r3, #3
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001318:	2310      	movs	r3, #16
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_ADC1_Init+0x23c>)
 8001322:	f001 fadd 	bl	80028e0 <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 800132c:	f000 fcc2 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200001f4 	.word	0x200001f4
 800133c:	40012000 	.word	0x40012000
 8001340:	0f000001 	.word	0x0f000001

08001344 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f004 fc9e 	bl	8005c94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_TIM1_Init+0xa8>)
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <MX_TIM1_Init+0xac>)
 8001364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_TIM1_Init+0xa8>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_TIM1_Init+0xa8>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_TIM1_Init+0xa8>)
 8001374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_TIM1_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_TIM1_Init+0xa8>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_TIM1_Init+0xa8>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138c:	2303      	movs	r3, #3
 800138e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001394:	2301      	movs	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_TIM1_Init+0xa8>)
 80013b8:	f003 f98a 	bl	80046d0 <HAL_TIM_Encoder_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013c2:	f000 fc77 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_TIM1_Init+0xa8>)
 80013d4:	f003 fef8 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80013de:	f000 fc69 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000380 	.word	0x20000380
 80013f0:	40010000 	.word	0x40010000

080013f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f004 fc46 	bl	8005c94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <MX_TIM3_Init+0xa0>)
 8001412:	4a21      	ldr	r2, [pc, #132]	; (8001498 <MX_TIM3_Init+0xa4>)
 8001414:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_TIM3_Init+0xa0>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_TIM3_Init+0xa0>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_TIM3_Init+0xa0>)
 8001424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001428:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_TIM3_Init+0xa0>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_TIM3_Init+0xa0>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001436:	2303      	movs	r3, #3
 8001438:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800144e:	2301      	movs	r3, #1
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	480c      	ldr	r0, [pc, #48]	; (8001494 <MX_TIM3_Init+0xa0>)
 8001462:	f003 f935 	bl	80046d0 <HAL_TIM_Encoder_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800146c:	f000 fc22 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_TIM3_Init+0xa0>)
 800147e:	f003 fea3 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001488:	f000 fc14 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3730      	adds	r7, #48	; 0x30
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200001a0 	.word	0x200001a0
 8001498:	40000400 	.word	0x40000400

0800149c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <MX_TIM4_Init+0xc0>)
 80014c0:	4a27      	ldr	r2, [pc, #156]	; (8001560 <MX_TIM4_Init+0xc4>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <MX_TIM4_Init+0xc0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <MX_TIM4_Init+0xc0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3359;
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <MX_TIM4_Init+0xc0>)
 80014d2:	f640 521f 	movw	r2, #3359	; 0xd1f
 80014d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <MX_TIM4_Init+0xc0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_TIM4_Init+0xc0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014e4:	481d      	ldr	r0, [pc, #116]	; (800155c <MX_TIM4_Init+0xc0>)
 80014e6:	f003 f831 	bl	800454c <HAL_TIM_PWM_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80014f0:	f000 fbe0 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4619      	mov	r1, r3
 8001502:	4816      	ldr	r0, [pc, #88]	; (800155c <MX_TIM4_Init+0xc0>)
 8001504:	f003 fe60 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800150e:	f000 fbd1 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001512:	2360      	movs	r3, #96	; 0x60
 8001514:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <MX_TIM4_Init+0xc0>)
 800152a:	f003 fae9 	bl	8004b00 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001534:	f000 fbbe 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2204      	movs	r2, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <MX_TIM4_Init+0xc0>)
 8001540:	f003 fade 	bl	8004b00 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800154a:	f000 fbb3 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <MX_TIM4_Init+0xc0>)
 8001550:	f000 fdd4 	bl	80020fc <HAL_TIM_MspPostInit>

}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200000dc 	.word	0x200000dc
 8001560:	40000800 	.word	0x40000800

08001564 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156a:	463b      	mov	r3, r7
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_TIM6_Init+0x64>)
 8001574:	4a15      	ldr	r2, [pc, #84]	; (80015cc <MX_TIM6_Init+0x68>)
 8001576:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_TIM6_Init+0x64>)
 800157a:	2202      	movs	r2, #2
 800157c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_TIM6_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 55999;
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_TIM6_Init+0x64>)
 8001586:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 800158a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_TIM6_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_TIM6_Init+0x64>)
 8001594:	f002 ff60 	bl	8004458 <HAL_TIM_Base_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800159e:	f000 fb89 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <MX_TIM6_Init+0x64>)
 80015b0:	f003 fe0a 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80015ba:	f000 fb7b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000340 	.word	0x20000340
 80015cc:	40001000 	.word	0x40001000

080015d0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d6:	463b      	mov	r3, r7
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_TIM7_Init+0x64>)
 80015e0:	4a15      	ldr	r2, [pc, #84]	; (8001638 <MX_TIM7_Init+0x68>)
 80015e2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <MX_TIM7_Init+0x64>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_TIM7_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 16799;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_TIM7_Init+0x64>)
 80015f2:	f244 129f 	movw	r2, #16799	; 0x419f
 80015f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_TIM7_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015fe:	480d      	ldr	r0, [pc, #52]	; (8001634 <MX_TIM7_Init+0x64>)
 8001600:	f002 ff2a 	bl	8004458 <HAL_TIM_Base_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800160a:	f000 fb53 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001616:	463b      	mov	r3, r7
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_TIM7_Init+0x64>)
 800161c:	f003 fdd4 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001626:	f000 fb45 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000050c 	.word	0x2000050c
 8001638:	40001400 	.word	0x40001400

0800163c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_TIM10_Init+0x40>)
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <MX_TIM10_Init+0x44>)
 8001644:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2;
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <MX_TIM10_Init+0x40>)
 8001648:	2202      	movs	r2, #2
 800164a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_TIM10_Init+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 55999;
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_TIM10_Init+0x40>)
 8001654:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001658:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_TIM10_Init+0x40>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_TIM10_Init+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_TIM10_Init+0x40>)
 8001668:	f002 fef6 	bl	8004458 <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001672:	f000 fb1f 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000120 	.word	0x20000120
 8001680:	40014400 	.word	0x40014400

08001684 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_TIM11_Init+0x40>)
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <MX_TIM11_Init+0x44>)
 800168c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2;
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <MX_TIM11_Init+0x40>)
 8001690:	2202      	movs	r2, #2
 8001692:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_TIM11_Init+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 55999;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <MX_TIM11_Init+0x40>)
 800169c:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 80016a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_TIM11_Init+0x40>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_TIM11_Init+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_TIM11_Init+0x40>)
 80016b0:	f002 fed2 	bl	8004458 <HAL_TIM_Base_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80016ba:	f000 fafb 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000280 	.word	0x20000280
 80016c8:	40014800 	.word	0x40014800

080016cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_TIM13_Init+0x40>)
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <MX_TIM13_Init+0x44>)
 80016d4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2;
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <MX_TIM13_Init+0x40>)
 80016d8:	2202      	movs	r2, #2
 80016da:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_TIM13_Init+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 55999;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <MX_TIM13_Init+0x40>)
 80016e4:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 80016e8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_TIM13_Init+0x40>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_TIM13_Init+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_TIM13_Init+0x40>)
 80016f8:	f002 feae 	bl	8004458 <HAL_TIM_Base_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001702:	f000 fad7 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000240 	.word	0x20000240
 8001710:	40001c00 	.word	0x40001c00

08001714 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_USART6_UART_Init+0x4c>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_USART6_UART_Init+0x50>)
 800171c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <MX_USART6_UART_Init+0x4c>)
 8001720:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001724:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_USART6_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_USART6_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_USART6_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_USART6_UART_Init+0x4c>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_USART6_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_USART6_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_USART6_UART_Init+0x4c>)
 800174c:	f003 fdcc 	bl	80052e8 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001756:	f000 faad 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200003cc 	.word	0x200003cc
 8001764:	40011400 	.word	0x40011400

08001768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_DMA_Init+0x3c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <MX_DMA_Init+0x3c>)
 8001778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_DMA_Init+0x3c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2038      	movs	r0, #56	; 0x38
 8001790:	f001 fc21 	bl	8002fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001794:	2038      	movs	r0, #56	; 0x38
 8001796:	f001 fc3a 	bl	800300e <HAL_NVIC_EnableIRQ>

}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b60      	ldr	r3, [pc, #384]	; (8001944 <MX_GPIO_Init+0x19c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a5f      	ldr	r2, [pc, #380]	; (8001944 <MX_GPIO_Init+0x19c>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <MX_GPIO_Init+0x19c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b59      	ldr	r3, [pc, #356]	; (8001944 <MX_GPIO_Init+0x19c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a58      	ldr	r2, [pc, #352]	; (8001944 <MX_GPIO_Init+0x19c>)
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b56      	ldr	r3, [pc, #344]	; (8001944 <MX_GPIO_Init+0x19c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b52      	ldr	r3, [pc, #328]	; (8001944 <MX_GPIO_Init+0x19c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a51      	ldr	r2, [pc, #324]	; (8001944 <MX_GPIO_Init+0x19c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b4f      	ldr	r3, [pc, #316]	; (8001944 <MX_GPIO_Init+0x19c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b4b      	ldr	r3, [pc, #300]	; (8001944 <MX_GPIO_Init+0x19c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a4a      	ldr	r2, [pc, #296]	; (8001944 <MX_GPIO_Init+0x19c>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b48      	ldr	r3, [pc, #288]	; (8001944 <MX_GPIO_Init+0x19c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b44      	ldr	r3, [pc, #272]	; (8001944 <MX_GPIO_Init+0x19c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a43      	ldr	r2, [pc, #268]	; (8001944 <MX_GPIO_Init+0x19c>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <MX_GPIO_Init+0x19c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8001850:	483d      	ldr	r0, [pc, #244]	; (8001948 <MX_GPIO_Init+0x1a0>)
 8001852:	f002 f987 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185c:	483b      	ldr	r0, [pc, #236]	; (800194c <MX_GPIO_Init+0x1a4>)
 800185e:	f002 f981 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001868:	4839      	ldr	r0, [pc, #228]	; (8001950 <MX_GPIO_Init+0x1a8>)
 800186a:	f002 f97b 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2104      	movs	r1, #4
 8001872:	4838      	ldr	r0, [pc, #224]	; (8001954 <MX_GPIO_Init+0x1ac>)
 8001874:	f002 f976 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8001878:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	482d      	ldr	r0, [pc, #180]	; (8001948 <MX_GPIO_Init+0x1a0>)
 8001892:	f001 ffb5 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8001896:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 800189a:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4827      	ldr	r0, [pc, #156]	; (8001948 <MX_GPIO_Init+0x1a0>)
 80018ac:	f001 ffa8 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 80018b0:	f640 0304 	movw	r3, #2052	; 0x804
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4821      	ldr	r0, [pc, #132]	; (800194c <MX_GPIO_Init+0x1a4>)
 80018c6:	f001 ff9b 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	481a      	ldr	r0, [pc, #104]	; (800194c <MX_GPIO_Init+0x1a4>)
 80018e4:	f001 ff8c 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 80018e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_GPIO_Init+0x1a8>)
 8001902:	f001 ff7d 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_GPIO_Init+0x1a8>)
 800191c:	f001 ff70 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8001920:	2304      	movs	r3, #4
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4807      	ldr	r0, [pc, #28]	; (8001954 <MX_GPIO_Init+0x1ac>)
 8001938:	f001 ff62 	bl	8003800 <HAL_GPIO_Init>

}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	; 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	40020800 	.word	0x40020800
 800194c:	40020400 	.word	0x40020400
 8001950:	40020000 	.word	0x40020000
 8001954:	40020c00 	.word	0x40020c00

08001958 <led_rgb>:
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 0 : 1;	// Rotary8
	return _rotaryvalue;
}

void led_rgb(char r, char g, char b)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	460b      	mov	r3, r1
 8001964:	71bb      	strb	r3, [r7, #6]
 8001966:	4613      	mov	r3, r2
 8001968:	717b      	strb	r3, [r7, #5]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (r) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197c:	480f      	ldr	r0, [pc, #60]	; (80019bc <led_rgb+0x64>)
 800197e:	f002 f8f1 	bl	8003b64 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <led_rgb+0x64>)
 8001996:	f002 f8e5 	bl	8003b64 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_B ON
 800199a:	797b      	ldrb	r3, [r7, #5]
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <led_rgb+0x68>)
 80019ae:	f002 f8d9 	bl	8003b64 <HAL_GPIO_WritePin>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020800 	.word	0x40020800

080019c4 <sensor_initialize>:

void sensor_initialize()
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	sensgettime = 0;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <sensor_initialize+0x30>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analograw, ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) { Error_Handler(); }
 80019ce:	2210      	movs	r2, #16
 80019d0:	4909      	ldr	r1, [pc, #36]	; (80019f8 <sensor_initialize+0x34>)
 80019d2:	480a      	ldr	r0, [pc, #40]	; (80019fc <sensor_initialize+0x38>)
 80019d4:	f000 fe34 	bl	8002640 <HAL_ADC_Start_DMA>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <sensor_initialize+0x1e>
 80019de:	f000 f969 	bl	8001cb4 <Error_Handler>
	HAL_TIM_Base_Start_IT(&htim7);	// SENSORGET SORT
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <sensor_initialize+0x3c>)
 80019e4:	f002 fd63 	bl	80044ae <HAL_TIM_Base_Start_IT>
	HAL_Delay(1000);
 80019e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ec:	f000 fdc2 	bl	8002574 <HAL_Delay>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200000b8 	.word	0x200000b8
 80019f8:	200000bc 	.word	0x200000bc
 80019fc:	200001f4 	.word	0x200001f4
 8001a00:	2000050c 	.word	0x2000050c

08001a04 <sensor_finalize>:

void sensor_finalize()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim7);
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <sensor_finalize+0x14>)
 8001a0a:	f002 fd74 	bl	80044f6 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <sensor_finalize+0x18>)
 8001a10:	f000 ff08 	bl	8002824 <HAL_ADC_Stop_DMA>
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000050c 	.word	0x2000050c
 8001a1c:	200001f4 	.word	0x200001f4

08001a20 <running_initialize>:

void running_initialize()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	sensor_initialize();
 8001a24:	f7ff ffce 	bl	80019c4 <sensor_initialize>
	printf("Encoder_Start\r\n");
 8001a28:	4822      	ldr	r0, [pc, #136]	; (8001ab4 <running_initialize+0x94>)
 8001a2a:	f004 f9c3 	bl	8005db4 <puts>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001a2e:	213c      	movs	r1, #60	; 0x3c
 8001a30:	4821      	ldr	r0, [pc, #132]	; (8001ab8 <running_initialize+0x98>)
 8001a32:	f002 fedf 	bl	80047f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a36:	213c      	movs	r1, #60	; 0x3c
 8001a38:	4820      	ldr	r0, [pc, #128]	; (8001abc <running_initialize+0x9c>)
 8001a3a:	f002 fedb 	bl	80047f4 <HAL_TIM_Encoder_Start>
	subsensbuf = 0;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <running_initialize+0xa0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
	marker = 0;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <running_initialize+0xa4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	sidedeltacount = 0;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <running_initialize+0xa8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
	markerstate = 0;
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <running_initialize+0xac>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
	rightmarkercount = 0;
 8001a56:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <running_initialize+0xb0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
	prelengthl = 0;
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <running_initialize+0xb4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
	prelengthr = 0;
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <running_initialize+0xb8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
	printf("SIDESENSOR ENCODER\r\n");
 8001a68:	481c      	ldr	r0, [pc, #112]	; (8001adc <running_initialize+0xbc>)
 8001a6a:	f004 f9a3 	bl	8005db4 <puts>
	HAL_TIM_Base_Start_IT(&htim10);
 8001a6e:	481c      	ldr	r0, [pc, #112]	; (8001ae0 <running_initialize+0xc0>)
 8001a70:	f002 fd1d 	bl	80044ae <HAL_TIM_Base_Start_IT>
	leftmotor = 0;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <running_initialize+0xc4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
	rightmotor = 0;
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <running_initialize+0xc8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
	beforedirection = 0;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <running_initialize+0xcc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
	printf("PWM_Start\r\n");
 8001a86:	481a      	ldr	r0, [pc, #104]	; (8001af0 <running_initialize+0xd0>)
 8001a88:	f004 f994 	bl	8005db4 <puts>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4819      	ldr	r0, [pc, #100]	; (8001af4 <running_initialize+0xd4>)
 8001a90:	f002 fd88 	bl	80045a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001a94:	2104      	movs	r1, #4
 8001a96:	4817      	ldr	r0, [pc, #92]	; (8001af4 <running_initialize+0xd4>)
 8001a98:	f002 fd84 	bl	80045a4 <HAL_TIM_PWM_Start>
	printf("PID\r\n");
 8001a9c:	4816      	ldr	r0, [pc, #88]	; (8001af8 <running_initialize+0xd8>)
 8001a9e:	f004 f989 	bl	8005db4 <puts>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8001aa2:	4816      	ldr	r0, [pc, #88]	; (8001afc <running_initialize+0xdc>)
 8001aa4:	f002 fd03 	bl	80044ae <HAL_TIM_Base_Start_IT>
#if PLAY
	motorenable = 1;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <running_initialize+0xe0>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
#endif
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	08006cb8 	.word	0x08006cb8
 8001ab8:	20000380 	.word	0x20000380
 8001abc:	200001a0 	.word	0x200001a0
 8001ac0:	20000198 	.word	0x20000198
 8001ac4:	2000033c 	.word	0x2000033c
 8001ac8:	200001e2 	.word	0x200001e2
 8001acc:	2000023d 	.word	0x2000023d
 8001ad0:	20000550 	.word	0x20000550
 8001ad4:	200001e4 	.word	0x200001e4
 8001ad8:	2000011c 	.word	0x2000011c
 8001adc:	08006cc8 	.word	0x08006cc8
 8001ae0:	20000120 	.word	0x20000120
 8001ae4:	20000174 	.word	0x20000174
 8001ae8:	20000168 	.word	0x20000168
 8001aec:	2000054c 	.word	0x2000054c
 8001af0:	08006cdc 	.word	0x08006cdc
 8001af4:	200000dc 	.word	0x200000dc
 8001af8:	08006ce8 	.word	0x08006ce8
 8001afc:	20000340 	.word	0x20000340
 8001b00:	2000040c 	.word	0x2000040c

08001b04 <running_finalize>:

void running_finalize()
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	motorenable = 0;
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <running_finalize+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	sensor_finalize();
 8001b0e:	f7ff ff79 	bl	8001a04 <sensor_finalize>
	HAL_TIM_Base_Stop_IT(&htim6);
 8001b12:	480d      	ldr	r0, [pc, #52]	; (8001b48 <running_finalize+0x44>)
 8001b14:	f002 fcef 	bl	80044f6 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001b18:	2104      	movs	r1, #4
 8001b1a:	480c      	ldr	r0, [pc, #48]	; (8001b4c <running_finalize+0x48>)
 8001b1c:	f002 fd80 	bl	8004620 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001b20:	2100      	movs	r1, #0
 8001b22:	480a      	ldr	r0, [pc, #40]	; (8001b4c <running_finalize+0x48>)
 8001b24:	f002 fd7c 	bl	8004620 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim10);
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <running_finalize+0x4c>)
 8001b2a:	f002 fce4 	bl	80044f6 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001b2e:	213c      	movs	r1, #60	; 0x3c
 8001b30:	4808      	ldr	r0, [pc, #32]	; (8001b54 <running_finalize+0x50>)
 8001b32:	f002 fe96 	bl	8004862 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001b36:	213c      	movs	r1, #60	; 0x3c
 8001b38:	4807      	ldr	r0, [pc, #28]	; (8001b58 <running_finalize+0x54>)
 8001b3a:	f002 fe92 	bl	8004862 <HAL_TIM_Encoder_Stop>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000040c 	.word	0x2000040c
 8001b48:	20000340 	.word	0x20000340
 8001b4c:	200000dc 	.word	0x200000dc
 8001b50:	20000120 	.word	0x20000120
 8001b54:	200001a0 	.word	0x200001a0
 8001b58:	20000380 	.word	0x20000380

08001b5c <d_print>:

void d_print()
{
 8001b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b60:	b08c      	sub	sp, #48	; 0x30
 8001b62:	af0a      	add	r7, sp, #40	; 0x28
	printf("%4d, %4d | %4d, %4d\r\n", analog[5], analog[4], analog[3], analog[2]);
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], analog[15], analog[14], analog[7], analog[6], analog[1], analog[0], analog[13], analog[12], analog[11], analog[10]);
#else	// ATTACH_LONGSENSOR
#if !USE_LONGSENSOR
	// only use normal sensor
	printf("\x1b[24C");	// Cursor move right *24
 8001b64:	483e      	ldr	r0, [pc, #248]	; (8001c60 <d_print+0x104>)
 8001b66:	f004 f89d 	bl	8005ca4 <iprintf>
	printf(ESC_RED);
 8001b6a:	483e      	ldr	r0, [pc, #248]	; (8001c64 <d_print+0x108>)
 8001b6c:	f004 f89a 	bl	8005ca4 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", analog[5], analog[4], analog[3], analog[2]);
 8001b70:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <d_print+0x10c>)
 8001b72:	895b      	ldrh	r3, [r3, #10]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <d_print+0x10c>)
 8001b78:	891b      	ldrh	r3, [r3, #8]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <d_print+0x10c>)
 8001b7e:	88db      	ldrh	r3, [r3, #6]
 8001b80:	4618      	mov	r0, r3
 8001b82:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <d_print+0x10c>)
 8001b84:	889b      	ldrh	r3, [r3, #4]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4838      	ldr	r0, [pc, #224]	; (8001c6c <d_print+0x110>)
 8001b8c:	f004 f88a 	bl	8005ca4 <iprintf>
	printf(ESC_DEF);
 8001b90:	4837      	ldr	r0, [pc, #220]	; (8001c70 <d_print+0x114>)
 8001b92:	f004 f887 	bl	8005ca4 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], analog[15], analog[14], analog[7], analog[6], analog[1], analog[0], analog[13], analog[12], analog[11], analog[10]);
 8001b96:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <d_print+0x10c>)
 8001b98:	8a5b      	ldrh	r3, [r3, #18]
 8001b9a:	469c      	mov	ip, r3
 8001b9c:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <d_print+0x10c>)
 8001b9e:	8a1b      	ldrh	r3, [r3, #16]
 8001ba0:	469e      	mov	lr, r3
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <d_print+0x10c>)
 8001ba4:	8bdb      	ldrh	r3, [r3, #30]
 8001ba6:	4698      	mov	r8, r3
 8001ba8:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <d_print+0x10c>)
 8001baa:	8b9b      	ldrh	r3, [r3, #28]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <d_print+0x10c>)
 8001bb0:	89db      	ldrh	r3, [r3, #14]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <d_print+0x10c>)
 8001bb6:	899b      	ldrh	r3, [r3, #12]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <d_print+0x10c>)
 8001bbc:	885b      	ldrh	r3, [r3, #2]
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <d_print+0x10c>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	461d      	mov	r5, r3
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <d_print+0x10c>)
 8001bc8:	8b5b      	ldrh	r3, [r3, #26]
 8001bca:	461e      	mov	r6, r3
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <d_print+0x10c>)
 8001bce:	8b1b      	ldrh	r3, [r3, #24]
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <d_print+0x10c>)
 8001bd4:	8adb      	ldrh	r3, [r3, #22]
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <d_print+0x10c>)
 8001bda:	8a9b      	ldrh	r3, [r3, #20]
 8001bdc:	9308      	str	r3, [sp, #32]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	9307      	str	r3, [sp, #28]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	9306      	str	r3, [sp, #24]
 8001be6:	9605      	str	r6, [sp, #20]
 8001be8:	9504      	str	r5, [sp, #16]
 8001bea:	9403      	str	r4, [sp, #12]
 8001bec:	9002      	str	r0, [sp, #8]
 8001bee:	9101      	str	r1, [sp, #4]
 8001bf0:	9200      	str	r2, [sp, #0]
 8001bf2:	4643      	mov	r3, r8
 8001bf4:	4672      	mov	r2, lr
 8001bf6:	4661      	mov	r1, ip
 8001bf8:	481e      	ldr	r0, [pc, #120]	; (8001c74 <d_print+0x118>)
 8001bfa:	f004 f853 	bl	8005ca4 <iprintf>
	printf(ESC_RED);
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], analog[15], analog[14], analog[7], analog[6], analog[1], analog[0], analog[13], analog[12], analog[11], analog[10]);
	printf(ESC_DEF);
#endif	// !USE_LONGSENSOR
#endif	// ATTACH_LONGSENSOR
	printf("\r\n");
 8001bfe:	481e      	ldr	r0, [pc, #120]	; (8001c78 <d_print+0x11c>)
 8001c00:	f004 f8d8 	bl	8005db4 <puts>
	printf("\r\n");
#endif	// !CSV_FORMAT
#endif	// D_ANALOG

#if D_ENCODER
	printf("encl = %d, encr = %d \r\ndencl = %d, dencr = %d\r\n", encl, encr, dencl, dencr);
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <d_print+0x120>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <d_print+0x124>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <d_print+0x128>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <d_print+0x12c>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	481b      	ldr	r0, [pc, #108]	; (8001c8c <d_print+0x130>)
 8001c20:	f004 f840 	bl	8005ca4 <iprintf>
	printf("lengthl = %d, lengthr = %d \r\nvelocityl = %d, velocityr = %d\r\n", lengthl, lengthr, velocityl, velocityr);
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <d_print+0x134>)
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <d_print+0x138>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <d_print+0x13c>)
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <d_print+0x140>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4603      	mov	r3, r0
 8001c38:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <d_print+0x144>)
 8001c3a:	f004 f833 	bl	8005ca4 <iprintf>
#if D_PWM
	printf("pwmstepoutput = %5d, pwmsteptime = %5d, pwmstepud = %d\r\n", pwmstepoutput, pwmsteptime, pwmstepud);
#endif

#if D_ROTARY
	printf("rotary_value = %d\r\n", rotary_value);
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <d_print+0x148>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4818      	ldr	r0, [pc, #96]	; (8001ca8 <d_print+0x14c>)
 8001c46:	f004 f82d 	bl	8005ca4 <iprintf>
#endif

#if D_SWITCH
	printf("enter = %d\r\n", enter);
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <d_print+0x150>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4817      	ldr	r0, [pc, #92]	; (8001cb0 <d_print+0x154>)
 8001c52:	f004 f827 	bl	8005ca4 <iprintf>
#endif
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c60:	08006cf0 	.word	0x08006cf0
 8001c64:	08006cf8 	.word	0x08006cf8
 8001c68:	200000a0 	.word	0x200000a0
 8001c6c:	08006d00 	.word	0x08006d00
 8001c70:	08006be0 	.word	0x08006be0
 8001c74:	08006d18 	.word	0x08006d18
 8001c78:	08006c94 	.word	0x08006c94
 8001c7c:	200001e0 	.word	0x200001e0
 8001c80:	20000098 	.word	0x20000098
 8001c84:	2000019a 	.word	0x2000019a
 8001c88:	2000009a 	.word	0x2000009a
 8001c8c:	08006d58 	.word	0x08006d58
 8001c90:	200003c0 	.word	0x200003c0
 8001c94:	20000508 	.word	0x20000508
 8001c98:	2000009c 	.word	0x2000009c
 8001c9c:	20000164 	.word	0x20000164
 8001ca0:	08006d88 	.word	0x08006d88
 8001ca4:	20000194 	.word	0x20000194
 8001ca8:	08006c6c 	.word	0x08006c6c
 8001cac:	20000551 	.word	0x20000551
 8001cb0:	08006c5c 	.word	0x08006c5c

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cba:	e7fe      	b.n	8001cba <Error_Handler+0x6>

08001cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	; 0x30
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a49      	ldr	r2, [pc, #292]	; (8001e50 <HAL_ADC_MspInit+0x144>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	f040 808c 	bne.w	8001e48 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	4a46      	ldr	r2, [pc, #280]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d40:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	4a3f      	ldr	r2, [pc, #252]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4a38      	ldr	r2, [pc, #224]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6313      	str	r3, [r2, #48]	; 0x30
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	4b32      	ldr	r3, [pc, #200]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a31      	ldr	r2, [pc, #196]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_ADC_MspInit+0x148>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001da0:	233f      	movs	r3, #63	; 0x3f
 8001da2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da4:	2303      	movs	r3, #3
 8001da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4619      	mov	r1, r3
 8001db2:	4829      	ldr	r0, [pc, #164]	; (8001e58 <HAL_ADC_MspInit+0x14c>)
 8001db4:	f001 fd24 	bl	8003800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001db8:	23ff      	movs	r3, #255	; 0xff
 8001dba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4824      	ldr	r0, [pc, #144]	; (8001e5c <HAL_ADC_MspInit+0x150>)
 8001dcc:	f001 fd18 	bl	8003800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	4619      	mov	r1, r3
 8001de2:	481f      	ldr	r0, [pc, #124]	; (8001e60 <HAL_ADC_MspInit+0x154>)
 8001de4:	f001 fd0c 	bl	8003800 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001dea:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <HAL_ADC_MspInit+0x15c>)
 8001dec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001e0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001e2e:	f001 f909 	bl	8003044 <HAL_DMA_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001e38:	f7ff ff3c 	bl	8001cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a09      	ldr	r2, [pc, #36]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001e40:	639a      	str	r2, [r3, #56]	; 0x38
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_ADC_MspInit+0x158>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e48:	bf00      	nop
 8001e4a:	3730      	adds	r7, #48	; 0x30
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40012000 	.word	0x40012000
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	200002dc 	.word	0x200002dc
 8001e68:	40026410 	.word	0x40026410

08001e6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x108>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d13d      	bne.n	8001f0a <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a38      	ldr	r2, [pc, #224]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8001ec6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4826      	ldr	r0, [pc, #152]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x110>)
 8001ee4:	f001 fc8c 	bl	8003800 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2100      	movs	r1, #0
 8001eec:	2019      	movs	r0, #25
 8001eee:	f001 f872 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ef2:	2019      	movs	r0, #25
 8001ef4:	f001 f88b 	bl	800300e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2100      	movs	r1, #0
 8001efc:	201a      	movs	r0, #26
 8001efe:	f001 f86a 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f02:	201a      	movs	r0, #26
 8001f04:	f001 f883 	bl	800300e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f08:	e030      	b.n	8001f6c <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x114>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d12b      	bne.n	8001f6c <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8001f4c:	2330      	movs	r3, #48	; 0x30
 8001f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f68:	f001 fc4a 	bl	8003800 <HAL_GPIO_Init>
}
 8001f6c:	bf00      	nop
 8001f6e:	3730      	adds	r7, #48	; 0x30
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40020400 	.word	0x40020400

08001f88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10d      	bne.n	8001fb6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_TIM_PWM_MspInit+0x40>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_TIM_PWM_MspInit+0x40>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_TIM_PWM_MspInit+0x40>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40023800 	.word	0x40023800

08001fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a42      	ldr	r2, [pc, #264]	; (80020e4 <HAL_TIM_Base_MspInit+0x118>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d116      	bne.n	800200c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a40      	ldr	r2, [pc, #256]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 8001fe8:	f043 0310 	orr.w	r3, r3, #16
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2036      	movs	r0, #54	; 0x36
 8002000:	f000 ffe9 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002004:	2036      	movs	r0, #54	; 0x36
 8002006:	f001 f802 	bl	800300e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800200a:	e066      	b.n	80020da <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a36      	ldr	r2, [pc, #216]	; (80020ec <HAL_TIM_Base_MspInit+0x120>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d116      	bne.n	8002044 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a32      	ldr	r2, [pc, #200]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 8002020:	f043 0320 	orr.w	r3, r3, #32
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	2037      	movs	r0, #55	; 0x37
 8002038:	f000 ffcd 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800203c:	2037      	movs	r0, #55	; 0x37
 800203e:	f000 ffe6 	bl	800300e <HAL_NVIC_EnableIRQ>
}
 8002042:	e04a      	b.n	80020da <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a29      	ldr	r2, [pc, #164]	; (80020f0 <HAL_TIM_Base_MspInit+0x124>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d116      	bne.n	800207c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	6453      	str	r3, [r2, #68]	; 0x44
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	2019      	movs	r0, #25
 8002070:	f000 ffb1 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002074:	2019      	movs	r0, #25
 8002076:	f000 ffca 	bl	800300e <HAL_NVIC_EnableIRQ>
}
 800207a:	e02e      	b.n	80020da <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_TIM_Base_MspInit+0x128>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d116      	bne.n	80020b4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 8002090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	201a      	movs	r0, #26
 80020a8:	f000 ff95 	bl	8002fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80020ac:	201a      	movs	r0, #26
 80020ae:	f000 ffae 	bl	800300e <HAL_NVIC_EnableIRQ>
}
 80020b2:	e012      	b.n	80020da <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM13)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <HAL_TIM_Base_MspInit+0x12c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10d      	bne.n	80020da <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_TIM_Base_MspInit+0x11c>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40001000 	.word	0x40001000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40001400 	.word	0x40001400
 80020f0:	40014400 	.word	0x40014400
 80020f4:	40014800 	.word	0x40014800
 80020f8:	40001c00 	.word	0x40001c00

080020fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a12      	ldr	r2, [pc, #72]	; (8002164 <HAL_TIM_MspPostInit+0x68>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d11d      	bne.n	800215a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_TIM_MspPostInit+0x6c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_TIM_MspPostInit+0x6c>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_TIM_MspPostInit+0x6c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 800213a:	23c0      	movs	r3, #192	; 0xc0
 800213c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800214a:	2302      	movs	r3, #2
 800214c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	; (800216c <HAL_TIM_MspPostInit+0x70>)
 8002156:	f001 fb53 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800215a:	bf00      	nop
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40000800 	.word	0x40000800
 8002168:	40023800 	.word	0x40023800
 800216c:	40020400 	.word	0x40020400

08002170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <HAL_UART_MspInit+0x84>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d12b      	bne.n	80021ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <HAL_UART_MspInit+0x88>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <HAL_UART_MspInit+0x88>)
 800219c:	f043 0320 	orr.w	r3, r3, #32
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_UART_MspInit+0x88>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_UART_MspInit+0x88>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_UART_MspInit+0x88>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_UART_MspInit+0x88>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021da:	2308      	movs	r3, #8
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <HAL_UART_MspInit+0x8c>)
 80021e6:	f001 fb0b 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80021ea:	bf00      	nop
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40011400 	.word	0x40011400
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020800 	.word	0x40020800

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <NMI_Handler+0x4>

08002206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler+0x4>

08002212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler+0x4>

0800221e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224c:	f000 f972 	bl	8002534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800225a:	f002 fb49 	bl	80048f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800225e:	4803      	ldr	r0, [pc, #12]	; (800226c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002260:	f002 fb46 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000380 	.word	0x20000380
 800226c:	20000120 	.word	0x20000120

08002270 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002276:	f002 fb3b 	bl	80048f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800227a:	4803      	ldr	r0, [pc, #12]	; (8002288 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800227c:	f002 fb38 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000380 	.word	0x20000380
 8002288:	20000280 	.word	0x20000280

0800228c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <TIM6_DAC_IRQHandler+0x10>)
 8002292:	f002 fb2d 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000340 	.word	0x20000340

080022a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <TIM7_IRQHandler+0x10>)
 80022a6:	f002 fb23 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000050c 	.word	0x2000050c

080022b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <DMA2_Stream0_IRQHandler+0x10>)
 80022ba:	f001 f839 	bl	8003330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200002dc 	.word	0x200002dc

080022c8 <_read>:
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e00a      	b.n	80022f0 <_read+0x28>
 80022da:	f3af 8000 	nop.w
 80022de:	4601      	mov	r1, r0
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf0      	blt.n	80022da <_read+0x12>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_write>:
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e009      	b.n	8002328 <_write+0x26>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	60ba      	str	r2, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f927 	bl	8000570 <__io_putchar>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf1      	blt.n	8002314 <_write+0x12>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_close>:
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_fstat>:
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	2300      	movs	r3, #0
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_isatty>:
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	2301      	movs	r3, #1
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_lseek>:
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	2300      	movs	r3, #0
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <_sbrk>:
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
 80023d4:	f003 fc34 	bl	8005c40 <__errno>
 80023d8:	4602      	mov	r2, r0
 80023da:	230c      	movs	r3, #12
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20020000 	.word	0x20020000
 8002404:	00000400 	.word	0x00000400
 8002408:	2000008c 	.word	0x2000008c
 800240c:	20000560 	.word	0x20000560

08002410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <SystemInit+0x28>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <SystemInit+0x28>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SystemInit+0x28>)
 8002426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800242a:	609a      	str	r2, [r3, #8]
#endif
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <Reset_Handler>:
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopFillZerobss+0x14>
 8002440:	2100      	movs	r1, #0
 8002442:	e003      	b.n	800244c <LoopCopyDataInit>

08002444 <CopyDataInit>:
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <LoopFillZerobss+0x18>)
 8002446:	585b      	ldr	r3, [r3, r1]
 8002448:	5043      	str	r3, [r0, r1]
 800244a:	3104      	adds	r1, #4

0800244c <LoopCopyDataInit>:
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <LoopFillZerobss+0x1c>)
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <LoopFillZerobss+0x20>)
 8002450:	1842      	adds	r2, r0, r1
 8002452:	429a      	cmp	r2, r3
 8002454:	d3f6      	bcc.n	8002444 <CopyDataInit>
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <LoopFillZerobss+0x24>)
 8002458:	e002      	b.n	8002460 <LoopFillZerobss>

0800245a <FillZerobss>:
 800245a:	2300      	movs	r3, #0
 800245c:	f842 3b04 	str.w	r3, [r2], #4

08002460 <LoopFillZerobss>:
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <LoopFillZerobss+0x28>)
 8002462:	429a      	cmp	r2, r3
 8002464:	d3f9      	bcc.n	800245a <FillZerobss>
 8002466:	f7ff ffd3 	bl	8002410 <SystemInit>
 800246a:	f003 fbef 	bl	8005c4c <__libc_init_array>
 800246e:	f7fe fbd9 	bl	8000c24 <main>
 8002472:	4770      	bx	lr
 8002474:	20020000 	.word	0x20020000
 8002478:	08006e90 	.word	0x08006e90
 800247c:	20000000 	.word	0x20000000
 8002480:	20000070 	.word	0x20000070
 8002484:	20000070 	.word	0x20000070
 8002488:	2000055c 	.word	0x2000055c

0800248c <ADC_IRQHandler>:
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_Init+0x40>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_Init+0x40>)
 80024a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_Init+0x40>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 fd81 	bl	8002fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 f808 	bl	80024d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c4:	f7ff fbfa 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00

080024d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_InitTick+0x54>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x58>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fd99 	bl	800302a <HAL_SYSTICK_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00e      	b.n	8002520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d80a      	bhi.n	800251e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002508:	2200      	movs	r2, #0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f000 fd61 	bl	8002fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002514:	4a06      	ldr	r2, [pc, #24]	; (8002530 <HAL_InitTick+0x5c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000000 	.word	0x20000000
 800252c:	20000008 	.word	0x20000008
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_IncTick+0x20>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x24>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_IncTick+0x24>)
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008
 8002558:	20000554 	.word	0x20000554

0800255c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_GetTick+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000554 	.word	0x20000554

08002574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff ffee 	bl	800255c <HAL_GetTick>
 8002580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d005      	beq.n	800259a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_Delay+0x40>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800259a:	bf00      	nop
 800259c:	f7ff ffde 	bl	800255c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d8f7      	bhi.n	800259c <HAL_Delay+0x28>
  {
  }
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000008 	.word	0x20000008

080025b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e033      	b.n	8002636 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fb98 	bl	8001d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025fe:	f023 0302 	bic.w	r3, r3, #2
 8002602:	f043 0202 	orr.w	r2, r3, #2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fa8a 	bl	8002b24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f023 0303 	bic.w	r3, r3, #3
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
 8002626:	e001      	b.n	800262c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_Start_DMA+0x1e>
 800265a:	2302      	movs	r3, #2
 800265c:	e0cc      	b.n	80027f8 <HAL_ADC_Start_DMA+0x1b8>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d018      	beq.n	80026a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002684:	4b5e      	ldr	r3, [pc, #376]	; (8002800 <HAL_ADC_Start_DMA+0x1c0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5e      	ldr	r2, [pc, #376]	; (8002804 <HAL_ADC_Start_DMA+0x1c4>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9a      	lsrs	r2, r3, #18
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002698:	e002      	b.n	80026a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	3b01      	subs	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f9      	bne.n	800269a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	f040 80a0 	bne.w	80027f6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f4:	d106      	bne.n	8002704 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f023 0206 	bic.w	r2, r3, #6
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
 8002702:	e002      	b.n	800270a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_ADC_Start_DMA+0x1c8>)
 8002714:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	4a3c      	ldr	r2, [pc, #240]	; (800280c <HAL_ADC_Start_DMA+0x1cc>)
 800271c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	4a3b      	ldr	r2, [pc, #236]	; (8002810 <HAL_ADC_Start_DMA+0x1d0>)
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	4a3a      	ldr	r2, [pc, #232]	; (8002814 <HAL_ADC_Start_DMA+0x1d4>)
 800272c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002736:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002746:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002756:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	334c      	adds	r3, #76	; 0x4c
 8002762:	4619      	mov	r1, r3
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f000 fd1a 	bl	80031a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2b00      	cmp	r3, #0
 8002776:	d12a      	bne.n	80027ce <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a26      	ldr	r2, [pc, #152]	; (8002818 <HAL_ADC_Start_DMA+0x1d8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d015      	beq.n	80027ae <HAL_ADC_Start_DMA+0x16e>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a25      	ldr	r2, [pc, #148]	; (800281c <HAL_ADC_Start_DMA+0x1dc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d105      	bne.n	8002798 <HAL_ADC_Start_DMA+0x158>
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <HAL_ADC_Start_DMA+0x1c8>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a20      	ldr	r2, [pc, #128]	; (8002820 <HAL_ADC_Start_DMA+0x1e0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d129      	bne.n	80027f6 <HAL_ADC_Start_DMA+0x1b6>
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_ADC_Start_DMA+0x1c8>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	d823      	bhi.n	80027f6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d11c      	bne.n	80027f6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	e013      	b.n	80027f6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a11      	ldr	r2, [pc, #68]	; (8002818 <HAL_ADC_Start_DMA+0x1d8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d10e      	bne.n	80027f6 <HAL_ADC_Start_DMA+0x1b6>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027f4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000000 	.word	0x20000000
 8002804:	431bde83 	.word	0x431bde83
 8002808:	40012300 	.word	0x40012300
 800280c:	08002d1d 	.word	0x08002d1d
 8002810:	08002dd7 	.word	0x08002dd7
 8002814:	08002df3 	.word	0x08002df3
 8002818:	40012000 	.word	0x40012000
 800281c:	40012100 	.word	0x40012100
 8002820:	40012200 	.word	0x40012200

08002824 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADC_Stop_DMA+0x1a>
 800283a:	2302      	movs	r3, #2
 800283c:	e038      	b.n	80028b0 <HAL_ADC_Stop_DMA+0x8c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d120      	bne.n	80028a6 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002872:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fce9 	bl	8003250 <HAL_DMA_Abort>
 800287e:	4603      	mov	r3, r0
 8002880:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002890:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1c>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e105      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x228>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b09      	cmp	r3, #9
 800290a:	d925      	bls.n	8002958 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68d9      	ldr	r1, [r3, #12]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	3b1e      	subs	r3, #30
 8002922:	2207      	movs	r2, #7
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43da      	mvns	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	400a      	ands	r2, r1
 8002930:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68d9      	ldr	r1, [r3, #12]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	4603      	mov	r3, r0
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4403      	add	r3, r0
 800294a:	3b1e      	subs	r3, #30
 800294c:	409a      	lsls	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	e022      	b.n	800299e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6919      	ldr	r1, [r3, #16]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	2207      	movs	r2, #7
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	400a      	ands	r2, r1
 800297a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6919      	ldr	r1, [r3, #16]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	4618      	mov	r0, r3
 800298e:	4603      	mov	r3, r0
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4403      	add	r3, r0
 8002994:	409a      	lsls	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d824      	bhi.n	80029f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	3b05      	subs	r3, #5
 80029b8:	221f      	movs	r2, #31
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	400a      	ands	r2, r1
 80029c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	4618      	mov	r0, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	3b05      	subs	r3, #5
 80029e2:	fa00 f203 	lsl.w	r2, r0, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
 80029ee:	e04c      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b0c      	cmp	r3, #12
 80029f6:	d824      	bhi.n	8002a42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	3b23      	subs	r3, #35	; 0x23
 8002a0a:	221f      	movs	r2, #31
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43da      	mvns	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	400a      	ands	r2, r1
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	3b23      	subs	r3, #35	; 0x23
 8002a34:	fa00 f203 	lsl.w	r2, r0, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a40:	e023      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3b41      	subs	r3, #65	; 0x41
 8002a54:	221f      	movs	r2, #31
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	400a      	ands	r2, r1
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b41      	subs	r3, #65	; 0x41
 8002a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_ADC_ConfigChannel+0x234>)
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <HAL_ADC_ConfigChannel+0x238>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d109      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1cc>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b12      	cmp	r3, #18
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <HAL_ADC_ConfigChannel+0x238>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d123      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x21e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	d003      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x1e6>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b11      	cmp	r3, #17
 8002ac4:	d11b      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d111      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_ADC_ConfigChannel+0x23c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_ADC_ConfigChannel+0x240>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	0c9a      	lsrs	r2, r3, #18
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002af0:	e002      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f9      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40012300 	.word	0x40012300
 8002b18:	40012000 	.word	0x40012000
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	431bde83 	.word	0x431bde83

08002b24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b2c:	4b79      	ldr	r3, [pc, #484]	; (8002d14 <ADC_Init+0x1f0>)
 8002b2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	021a      	lsls	r2, r3, #8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	4a58      	ldr	r2, [pc, #352]	; (8002d18 <ADC_Init+0x1f4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d022      	beq.n	8002c02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6899      	ldr	r1, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	e00f      	b.n	8002c22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0202 	bic.w	r2, r2, #2
 8002c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6899      	ldr	r1, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7e1b      	ldrb	r3, [r3, #24]
 8002c3c:	005a      	lsls	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	035a      	lsls	r2, r3, #13
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	e007      	b.n	8002c98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	051a      	lsls	r2, r3, #20
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cda:	025a      	lsls	r2, r3, #9
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6899      	ldr	r1, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	029a      	lsls	r2, r3, #10
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40012300 	.word	0x40012300
 8002d18:	0f000001 	.word	0x0f000001

08002d1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d13c      	bne.n	8002db0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d12b      	bne.n	8002da8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d127      	bne.n	8002da8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d119      	bne.n	8002da8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0220 	bic.w	r2, r2, #32
 8002d82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7fd fbf3 	bl	8000594 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dae:	e00e      	b.n	8002dce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f7ff fd85 	bl	80028cc <HAL_ADC_ErrorCallback>
}
 8002dc2:	e004      	b.n	8002dce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fd67 	bl	80028b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f043 0204 	orr.w	r2, r3, #4
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7ff fd5a 	bl	80028cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <__NVIC_SetPriorityGrouping+0x44>)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	60d3      	str	r3, [r2, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <__NVIC_GetPriorityGrouping+0x18>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	f003 0307 	and.w	r3, r3, #7
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	db0b      	blt.n	8002eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	4907      	ldr	r1, [pc, #28]	; (8002ebc <__NVIC_EnableIRQ+0x38>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000e100 	.word	0xe000e100

08002ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	6039      	str	r1, [r7, #0]
 8002eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	db0a      	blt.n	8002eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	490c      	ldr	r1, [pc, #48]	; (8002f0c <__NVIC_SetPriority+0x4c>)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	0112      	lsls	r2, r2, #4
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee8:	e00a      	b.n	8002f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4908      	ldr	r1, [pc, #32]	; (8002f10 <__NVIC_SetPriority+0x50>)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	3b04      	subs	r3, #4
 8002ef8:	0112      	lsls	r2, r2, #4
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	440b      	add	r3, r1
 8002efe:	761a      	strb	r2, [r3, #24]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000e100 	.word	0xe000e100
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f1c3 0307 	rsb	r3, r3, #7
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	bf28      	it	cs
 8002f32:	2304      	movcs	r3, #4
 8002f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d902      	bls.n	8002f44 <NVIC_EncodePriority+0x30>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3b03      	subs	r3, #3
 8002f42:	e000      	b.n	8002f46 <NVIC_EncodePriority+0x32>
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	f04f 32ff 	mov.w	r2, #4294967295
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	401a      	ands	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	43d9      	mvns	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	4313      	orrs	r3, r2
         );
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f8c:	d301      	bcc.n	8002f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00f      	b.n	8002fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <SysTick_Config+0x40>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9a:	210f      	movs	r1, #15
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	f7ff ff8e 	bl	8002ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <SysTick_Config+0x40>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <SysTick_Config+0x40>)
 8002fac:	2207      	movs	r2, #7
 8002fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	e000e010 	.word	0xe000e010

08002fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff29 	bl	8002e20 <__NVIC_SetPriorityGrouping>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe8:	f7ff ff3e 	bl	8002e68 <__NVIC_GetPriorityGrouping>
 8002fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	f7ff ff8e 	bl	8002f14 <NVIC_EncodePriority>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ff5d 	bl	8002ec0 <__NVIC_SetPriority>
}
 8003006:	bf00      	nop
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff31 	bl	8002e84 <__NVIC_EnableIRQ>
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ffa2 	bl	8002f7c <SysTick_Config>
 8003038:	4603      	mov	r3, r0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7ff fa84 	bl	800255c <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e099      	b.n	8003194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003080:	e00f      	b.n	80030a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003082:	f7ff fa6b 	bl	800255c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b05      	cmp	r3, #5
 800308e:	d908      	bls.n	80030a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2203      	movs	r2, #3
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e078      	b.n	8003194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e8      	bne.n	8003082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4b38      	ldr	r3, [pc, #224]	; (800319c <HAL_DMA_Init+0x158>)
 80030bc:	4013      	ands	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d107      	bne.n	800310c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	4313      	orrs	r3, r2
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f023 0307 	bic.w	r3, r3, #7
 8003122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	2b04      	cmp	r3, #4
 8003134:	d117      	bne.n	8003166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00e      	beq.n	8003166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fadf 	bl	800370c <DMA_CheckFifoParam>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2240      	movs	r2, #64	; 0x40
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003162:	2301      	movs	r3, #1
 8003164:	e016      	b.n	8003194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa96 	bl	80036a0 <DMA_CalcBaseAndBitshift>
 8003174:	4603      	mov	r3, r0
 8003176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	223f      	movs	r2, #63	; 0x3f
 800317e:	409a      	lsls	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	f010803f 	.word	0xf010803f

080031a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_DMA_Start_IT+0x26>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e040      	b.n	8003248 <HAL_DMA_Start_IT+0xa8>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d12f      	bne.n	800323a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fa28 	bl	8003644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	223f      	movs	r2, #63	; 0x3f
 80031fa:	409a      	lsls	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0216 	orr.w	r2, r2, #22
 800320e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0208 	orr.w	r2, r2, #8
 8003226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e005      	b.n	8003246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800325e:	f7ff f97d 	bl	800255c <HAL_GetTick>
 8003262:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d008      	beq.n	8003282 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2280      	movs	r2, #128	; 0x80
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e052      	b.n	8003328 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0216 	bic.w	r2, r2, #22
 8003290:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_DMA_Abort+0x62>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0208 	bic.w	r2, r2, #8
 80032c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d2:	e013      	b.n	80032fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d4:	f7ff f942 	bl	800255c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d90c      	bls.n	80032fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2203      	movs	r2, #3
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e015      	b.n	8003328 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e4      	bne.n	80032d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	223f      	movs	r2, #63	; 0x3f
 8003310:	409a      	lsls	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800333c:	4b92      	ldr	r3, [pc, #584]	; (8003588 <HAL_DMA_IRQHandler+0x258>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a92      	ldr	r2, [pc, #584]	; (800358c <HAL_DMA_IRQHandler+0x25c>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0a9b      	lsrs	r3, r3, #10
 8003348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	2208      	movs	r2, #8
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01a      	beq.n	800339c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	2208      	movs	r2, #8
 800338a:	409a      	lsls	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	2201      	movs	r2, #1
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d012      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	2201      	movs	r2, #1
 80033c0:	409a      	lsls	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	f043 0202 	orr.w	r2, r3, #2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	2204      	movs	r2, #4
 80033d8:	409a      	lsls	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	2204      	movs	r2, #4
 80033f6:	409a      	lsls	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003400:	f043 0204 	orr.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	2210      	movs	r2, #16
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d043      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d03c      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	2210      	movs	r2, #16
 800342c:	409a      	lsls	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d018      	beq.n	8003472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d024      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	e01f      	b.n	80034a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
 8003470:	e016      	b.n	80034a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0208 	bic.w	r2, r2, #8
 800348e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	2220      	movs	r2, #32
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 808e 	beq.w	80035ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8086 	beq.w	80035ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	2220      	movs	r2, #32
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d136      	bne.n	8003548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0216 	bic.w	r2, r2, #22
 80034e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <HAL_DMA_IRQHandler+0x1da>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0208 	bic.w	r2, r2, #8
 8003518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	223f      	movs	r2, #63	; 0x3f
 8003520:	409a      	lsls	r2, r3
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353a:	2b00      	cmp	r3, #0
 800353c:	d07d      	beq.n	800363a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
        }
        return;
 8003546:	e078      	b.n	800363a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01c      	beq.n	8003590 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d108      	bne.n	8003576 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	2b00      	cmp	r3, #0
 800356a:	d030      	beq.n	80035ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e02b      	b.n	80035ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d027      	beq.n	80035ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
 8003586:	e022      	b.n	80035ce <HAL_DMA_IRQHandler+0x29e>
 8003588:	20000000 	.word	0x20000000
 800358c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0210 	bic.w	r2, r2, #16
 80035ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d032      	beq.n	800363c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d022      	beq.n	8003628 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2205      	movs	r2, #5
 80035e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	3301      	adds	r3, #1
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	429a      	cmp	r2, r3
 8003604:	d307      	bcc.n	8003616 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f2      	bne.n	80035fa <HAL_DMA_IRQHandler+0x2ca>
 8003614:	e000      	b.n	8003618 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003616:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
 8003638:	e000      	b.n	800363c <HAL_DMA_IRQHandler+0x30c>
        return;
 800363a:	bf00      	nop
    }
  }
}
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop

08003644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d108      	bne.n	8003684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003682:	e007      	b.n	8003694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3b10      	subs	r3, #16
 80036b0:	4a14      	ldr	r2, [pc, #80]	; (8003704 <DMA_CalcBaseAndBitshift+0x64>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ba:	4a13      	ldr	r2, [pc, #76]	; (8003708 <DMA_CalcBaseAndBitshift+0x68>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d909      	bls.n	80036e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	659a      	str	r2, [r3, #88]	; 0x58
 80036e0:	e007      	b.n	80036f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	aaaaaaab 	.word	0xaaaaaaab
 8003708:	08006de0 	.word	0x08006de0

0800370c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11f      	bne.n	8003766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d855      	bhi.n	80037d8 <DMA_CheckFifoParam+0xcc>
 800372c:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <DMA_CheckFifoParam+0x28>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003745 	.word	0x08003745
 8003738:	08003757 	.word	0x08003757
 800373c:	08003745 	.word	0x08003745
 8003740:	080037d9 	.word	0x080037d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d045      	beq.n	80037dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003754:	e042      	b.n	80037dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800375e:	d13f      	bne.n	80037e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003764:	e03c      	b.n	80037e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376e:	d121      	bne.n	80037b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d836      	bhi.n	80037e4 <DMA_CheckFifoParam+0xd8>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <DMA_CheckFifoParam+0x70>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	0800378d 	.word	0x0800378d
 8003780:	08003793 	.word	0x08003793
 8003784:	0800378d 	.word	0x0800378d
 8003788:	080037a5 	.word	0x080037a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e02f      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d024      	beq.n	80037e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a2:	e021      	b.n	80037e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ac:	d11e      	bne.n	80037ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b2:	e01b      	b.n	80037ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d902      	bls.n	80037c0 <DMA_CheckFifoParam+0xb4>
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d003      	beq.n	80037c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037be:	e018      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      break;
 80037c4:	e015      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00e      	beq.n	80037f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
      break;
 80037d6:	e00b      	b.n	80037f0 <DMA_CheckFifoParam+0xe4>
      break;
 80037d8:	bf00      	nop
 80037da:	e00a      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      break;
 80037dc:	bf00      	nop
 80037de:	e008      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      break;
 80037e0:	bf00      	nop
 80037e2:	e006      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      break;
 80037e4:	bf00      	nop
 80037e6:	e004      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      break;
 80037e8:	bf00      	nop
 80037ea:	e002      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      break;
 80037f0:	bf00      	nop
    }
  } 
  
  return status; 
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	e16b      	b.n	8003af4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800381c:	2201      	movs	r2, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	429a      	cmp	r2, r3
 8003836:	f040 815a 	bne.w	8003aee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d00b      	beq.n	800385a <HAL_GPIO_Init+0x5a>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d007      	beq.n	800385a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800384e:	2b11      	cmp	r3, #17
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b12      	cmp	r3, #18
 8003858:	d130      	bne.n	80038bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0201 	and.w	r2, r3, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2203      	movs	r2, #3
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0xfc>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b12      	cmp	r3, #18
 80038fa:	d123      	bne.n	8003944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	08da      	lsrs	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3208      	adds	r2, #8
 800393e:	69b9      	ldr	r1, [r7, #24]
 8003940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0203 	and.w	r2, r3, #3
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80b4 	beq.w	8003aee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b5f      	ldr	r3, [pc, #380]	; (8003b08 <HAL_GPIO_Init+0x308>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	4a5e      	ldr	r2, [pc, #376]	; (8003b08 <HAL_GPIO_Init+0x308>)
 8003990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003994:	6453      	str	r3, [r2, #68]	; 0x44
 8003996:	4b5c      	ldr	r3, [pc, #368]	; (8003b08 <HAL_GPIO_Init+0x308>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039a2:	4a5a      	ldr	r2, [pc, #360]	; (8003b0c <HAL_GPIO_Init+0x30c>)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	3302      	adds	r3, #2
 80039aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a51      	ldr	r2, [pc, #324]	; (8003b10 <HAL_GPIO_Init+0x310>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02b      	beq.n	8003a26 <HAL_GPIO_Init+0x226>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a50      	ldr	r2, [pc, #320]	; (8003b14 <HAL_GPIO_Init+0x314>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d025      	beq.n	8003a22 <HAL_GPIO_Init+0x222>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4f      	ldr	r2, [pc, #316]	; (8003b18 <HAL_GPIO_Init+0x318>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01f      	beq.n	8003a1e <HAL_GPIO_Init+0x21e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4e      	ldr	r2, [pc, #312]	; (8003b1c <HAL_GPIO_Init+0x31c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d019      	beq.n	8003a1a <HAL_GPIO_Init+0x21a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4d      	ldr	r2, [pc, #308]	; (8003b20 <HAL_GPIO_Init+0x320>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_GPIO_Init+0x216>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4c      	ldr	r2, [pc, #304]	; (8003b24 <HAL_GPIO_Init+0x324>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00d      	beq.n	8003a12 <HAL_GPIO_Init+0x212>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <HAL_GPIO_Init+0x328>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <HAL_GPIO_Init+0x20e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4a      	ldr	r2, [pc, #296]	; (8003b2c <HAL_GPIO_Init+0x32c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_GPIO_Init+0x20a>
 8003a06:	2307      	movs	r3, #7
 8003a08:	e00e      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	e00c      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a0e:	2306      	movs	r3, #6
 8003a10:	e00a      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a12:	2305      	movs	r3, #5
 8003a14:	e008      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a16:	2304      	movs	r3, #4
 8003a18:	e006      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e004      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e002      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_GPIO_Init+0x228>
 8003a26:	2300      	movs	r3, #0
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	f002 0203 	and.w	r2, r2, #3
 8003a2e:	0092      	lsls	r2, r2, #2
 8003a30:	4093      	lsls	r3, r2
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a38:	4934      	ldr	r1, [pc, #208]	; (8003b0c <HAL_GPIO_Init+0x30c>)
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	3302      	adds	r3, #2
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a46:	4b3a      	ldr	r3, [pc, #232]	; (8003b30 <HAL_GPIO_Init+0x330>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a6a:	4a31      	ldr	r2, [pc, #196]	; (8003b30 <HAL_GPIO_Init+0x330>)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a70:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <HAL_GPIO_Init+0x330>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a94:	4a26      	ldr	r2, [pc, #152]	; (8003b30 <HAL_GPIO_Init+0x330>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a9a:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_GPIO_Init+0x330>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003abe:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_GPIO_Init+0x330>)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_GPIO_Init+0x330>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae8:	4a11      	ldr	r2, [pc, #68]	; (8003b30 <HAL_GPIO_Init+0x330>)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	f67f ae90 	bls.w	800381c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003afc:	bf00      	nop
 8003afe:	3724      	adds	r7, #36	; 0x24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	40020400 	.word	0x40020400
 8003b18:	40020800 	.word	0x40020800
 8003b1c:	40020c00 	.word	0x40020c00
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40021400 	.word	0x40021400
 8003b28:	40021800 	.word	0x40021800
 8003b2c:	40021c00 	.word	0x40021c00
 8003b30:	40013c00 	.word	0x40013c00

08003b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e001      	b.n	8003b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b80:	e003      	b.n	8003b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	041a      	lsls	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e25b      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d075      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb6:	4ba3      	ldr	r3, [pc, #652]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d00c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc2:	4ba0      	ldr	r3, [pc, #640]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d112      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bce:	4b9d      	ldr	r3, [pc, #628]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bda:	d10b      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	4b99      	ldr	r3, [pc, #612]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05b      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x108>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d157      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e236      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfc:	d106      	bne.n	8003c0c <HAL_RCC_OscConfig+0x74>
 8003bfe:	4b91      	ldr	r3, [pc, #580]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a90      	ldr	r2, [pc, #576]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x98>
 8003c16:	4b8b      	ldr	r3, [pc, #556]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a8a      	ldr	r2, [pc, #552]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b88      	ldr	r3, [pc, #544]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a87      	ldr	r2, [pc, #540]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0xb0>
 8003c30:	4b84      	ldr	r3, [pc, #528]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a83      	ldr	r2, [pc, #524]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b81      	ldr	r3, [pc, #516]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a80      	ldr	r2, [pc, #512]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fc84 	bl	800255c <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fe fc80 	bl	800255c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e1fb      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b76      	ldr	r3, [pc, #472]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0xc0>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fe fc70 	bl	800255c <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe fc6c 	bl	800255c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1e7      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0xe8>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d063      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cae:	4b65      	ldr	r3, [pc, #404]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b62      	ldr	r3, [pc, #392]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d11c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc6:	4b5f      	ldr	r3, [pc, #380]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d116      	bne.n	8003d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x152>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e1bb      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cea:	4b56      	ldr	r3, [pc, #344]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4952      	ldr	r1, [pc, #328]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	e03a      	b.n	8003d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d020      	beq.n	8003d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d08:	4b4f      	ldr	r3, [pc, #316]	; (8003e48 <HAL_RCC_OscConfig+0x2b0>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fe fc25 	bl	800255c <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d16:	f7fe fc21 	bl	800255c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e19c      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	4b46      	ldr	r3, [pc, #280]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4940      	ldr	r1, [pc, #256]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d4a:	4b3f      	ldr	r3, [pc, #252]	; (8003e48 <HAL_RCC_OscConfig+0x2b0>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fc04 	bl	800255c <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fe fc00 	bl	800255c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e17b      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d030      	beq.n	8003de4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d016      	beq.n	8003db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCC_OscConfig+0x2b4>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe fbe4 	bl	800255c <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fe fbe0 	bl	800255c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e15b      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x200>
 8003db6:	e015      	b.n	8003de4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db8:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <HAL_RCC_OscConfig+0x2b4>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbe:	f7fe fbcd 	bl	800255c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc6:	f7fe fbc9 	bl	800255c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e144      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a0 	beq.w	8003f32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df6:	4b13      	ldr	r3, [pc, #76]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_OscConfig+0x2b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d121      	bne.n	8003e72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_RCC_OscConfig+0x2b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <HAL_RCC_OscConfig+0x2b8>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fb8f 	bl	800255c <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	e011      	b.n	8003e66 <HAL_RCC_OscConfig+0x2ce>
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	42470000 	.word	0x42470000
 8003e4c:	42470e80 	.word	0x42470e80
 8003e50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e54:	f7fe fb82 	bl	800255c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e0fd      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	4b81      	ldr	r3, [pc, #516]	; (800406c <HAL_RCC_OscConfig+0x4d4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d106      	bne.n	8003e88 <HAL_RCC_OscConfig+0x2f0>
 8003e7a:	4b7d      	ldr	r3, [pc, #500]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a7c      	ldr	r2, [pc, #496]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70
 8003e86:	e01c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x32a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCC_OscConfig+0x312>
 8003e90:	4b77      	ldr	r3, [pc, #476]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a76      	ldr	r2, [pc, #472]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003e96:	f043 0304 	orr.w	r3, r3, #4
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	4b74      	ldr	r3, [pc, #464]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a73      	ldr	r2, [pc, #460]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea8:	e00b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x32a>
 8003eaa:	4b71      	ldr	r3, [pc, #452]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	4a70      	ldr	r2, [pc, #448]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb6:	4b6e      	ldr	r3, [pc, #440]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a6d      	ldr	r2, [pc, #436]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d015      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eca:	f7fe fb47 	bl	800255c <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7fe fb43 	bl	800255c <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e0bc      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	4b61      	ldr	r3, [pc, #388]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ee      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x33a>
 8003ef4:	e014      	b.n	8003f20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe fb31 	bl	800255c <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fe fb2d 	bl	800255c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0a6      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	4b56      	ldr	r3, [pc, #344]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ee      	bne.n	8003efe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d105      	bne.n	8003f32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b52      	ldr	r3, [pc, #328]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	4a51      	ldr	r2, [pc, #324]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8092 	beq.w	8004060 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f3c:	4b4c      	ldr	r3, [pc, #304]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d05c      	beq.n	8004002 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d141      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f50:	4b48      	ldr	r3, [pc, #288]	; (8004074 <HAL_RCC_OscConfig+0x4dc>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fe fb01 	bl	800255c <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fe fafd 	bl	800255c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e078      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f70:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f0      	bne.n	8003f5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	019b      	lsls	r3, r3, #6
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	3b01      	subs	r3, #1
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	061b      	lsls	r3, r3, #24
 8003fa0:	4933      	ldr	r1, [pc, #204]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa6:	4b33      	ldr	r3, [pc, #204]	; (8004074 <HAL_RCC_OscConfig+0x4dc>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe fad6 	bl	800255c <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fe fad2 	bl	800255c <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e04d      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc6:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x41c>
 8003fd2:	e045      	b.n	8004060 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <HAL_RCC_OscConfig+0x4dc>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fda:	f7fe fabf 	bl	800255c <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe2:	f7fe fabb 	bl	800255c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e036      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff4:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x44a>
 8004000:	e02e      	b.n	8004060 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e029      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400e:	4b18      	ldr	r3, [pc, #96]	; (8004070 <HAL_RCC_OscConfig+0x4d8>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	429a      	cmp	r2, r3
 8004020:	d11c      	bne.n	800405c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d115      	bne.n	800405c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004036:	4013      	ands	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800403c:	4293      	cmp	r3, r2
 800403e:	d10d      	bne.n	800405c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d106      	bne.n	800405c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40007000 	.word	0x40007000
 8004070:	40023800 	.word	0x40023800
 8004074:	42470060 	.word	0x42470060

08004078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0cc      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800408c:	4b68      	ldr	r3, [pc, #416]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d90c      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b65      	ldr	r3, [pc, #404]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0b8      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040cc:	4b59      	ldr	r3, [pc, #356]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a58      	ldr	r2, [pc, #352]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e4:	4b53      	ldr	r3, [pc, #332]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a52      	ldr	r2, [pc, #328]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b50      	ldr	r3, [pc, #320]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	494d      	ldr	r1, [pc, #308]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d044      	beq.n	8004198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	4b47      	ldr	r3, [pc, #284]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d119      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e07f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d003      	beq.n	8004136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	2b03      	cmp	r3, #3
 8004134:	d107      	bne.n	8004146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	4b3f      	ldr	r3, [pc, #252]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004146:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e067      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004156:	4b37      	ldr	r3, [pc, #220]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 0203 	bic.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4934      	ldr	r1, [pc, #208]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004168:	f7fe f9f8 	bl	800255c <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	e00a      	b.n	8004186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004170:	f7fe f9f4 	bl	800255c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e04f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 020c 	and.w	r2, r3, #12
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	429a      	cmp	r2, r3
 8004196:	d1eb      	bne.n	8004170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004198:	4b25      	ldr	r3, [pc, #148]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d20c      	bcs.n	80041c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e032      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4916      	ldr	r1, [pc, #88]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	490e      	ldr	r1, [pc, #56]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fe:	f000 f821 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8004202:	4601      	mov	r1, r0
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	5cd3      	ldrb	r3, [r2, r3]
 8004212:	fa21 f303 	lsr.w	r3, r1, r3
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <HAL_RCC_ClockConfig+0x1c8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe f958 	bl	80024d4 <HAL_InitTick>

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40023c00 	.word	0x40023c00
 8004234:	40023800 	.word	0x40023800
 8004238:	08006dc8 	.word	0x08006dc8
 800423c:	20000000 	.word	0x20000000
 8004240:	20000004 	.word	0x20000004

08004244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	2300      	movs	r3, #0
 8004254:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425a:	4b63      	ldr	r3, [pc, #396]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b04      	cmp	r3, #4
 8004264:	d007      	beq.n	8004276 <HAL_RCC_GetSysClockFreq+0x32>
 8004266:	2b08      	cmp	r3, #8
 8004268:	d008      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x38>
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 80b4 	bne.w	80043d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004270:	4b5e      	ldr	r3, [pc, #376]	; (80043ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004272:	60bb      	str	r3, [r7, #8]
       break;
 8004274:	e0b3      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004276:	4b5d      	ldr	r3, [pc, #372]	; (80043ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004278:	60bb      	str	r3, [r7, #8]
      break;
 800427a:	e0b0      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800427c:	4b5a      	ldr	r3, [pc, #360]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004284:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004286:	4b58      	ldr	r3, [pc, #352]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d04a      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004292:	4b55      	ldr	r3, [pc, #340]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	f04f 0400 	mov.w	r4, #0
 800429c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	ea03 0501 	and.w	r5, r3, r1
 80042a8:	ea04 0602 	and.w	r6, r4, r2
 80042ac:	4629      	mov	r1, r5
 80042ae:	4632      	mov	r2, r6
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	f04f 0400 	mov.w	r4, #0
 80042b8:	0154      	lsls	r4, r2, #5
 80042ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042be:	014b      	lsls	r3, r1, #5
 80042c0:	4619      	mov	r1, r3
 80042c2:	4622      	mov	r2, r4
 80042c4:	1b49      	subs	r1, r1, r5
 80042c6:	eb62 0206 	sbc.w	r2, r2, r6
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	f04f 0400 	mov.w	r4, #0
 80042d2:	0194      	lsls	r4, r2, #6
 80042d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042d8:	018b      	lsls	r3, r1, #6
 80042da:	1a5b      	subs	r3, r3, r1
 80042dc:	eb64 0402 	sbc.w	r4, r4, r2
 80042e0:	f04f 0100 	mov.w	r1, #0
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	00e2      	lsls	r2, r4, #3
 80042ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042ee:	00d9      	lsls	r1, r3, #3
 80042f0:	460b      	mov	r3, r1
 80042f2:	4614      	mov	r4, r2
 80042f4:	195b      	adds	r3, r3, r5
 80042f6:	eb44 0406 	adc.w	r4, r4, r6
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	02a2      	lsls	r2, r4, #10
 8004304:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004308:	0299      	lsls	r1, r3, #10
 800430a:	460b      	mov	r3, r1
 800430c:	4614      	mov	r4, r2
 800430e:	4618      	mov	r0, r3
 8004310:	4621      	mov	r1, r4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f04f 0400 	mov.w	r4, #0
 8004318:	461a      	mov	r2, r3
 800431a:	4623      	mov	r3, r4
 800431c:	f7fb ffa8 	bl	8000270 <__aeabi_uldivmod>
 8004320:	4603      	mov	r3, r0
 8004322:	460c      	mov	r4, r1
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e049      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004328:	4b2f      	ldr	r3, [pc, #188]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	f04f 0400 	mov.w	r4, #0
 8004332:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	ea03 0501 	and.w	r5, r3, r1
 800433e:	ea04 0602 	and.w	r6, r4, r2
 8004342:	4629      	mov	r1, r5
 8004344:	4632      	mov	r2, r6
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	f04f 0400 	mov.w	r4, #0
 800434e:	0154      	lsls	r4, r2, #5
 8004350:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004354:	014b      	lsls	r3, r1, #5
 8004356:	4619      	mov	r1, r3
 8004358:	4622      	mov	r2, r4
 800435a:	1b49      	subs	r1, r1, r5
 800435c:	eb62 0206 	sbc.w	r2, r2, r6
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	0194      	lsls	r4, r2, #6
 800436a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800436e:	018b      	lsls	r3, r1, #6
 8004370:	1a5b      	subs	r3, r3, r1
 8004372:	eb64 0402 	sbc.w	r4, r4, r2
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	00e2      	lsls	r2, r4, #3
 8004380:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004384:	00d9      	lsls	r1, r3, #3
 8004386:	460b      	mov	r3, r1
 8004388:	4614      	mov	r4, r2
 800438a:	195b      	adds	r3, r3, r5
 800438c:	eb44 0406 	adc.w	r4, r4, r6
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	02a2      	lsls	r2, r4, #10
 800439a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800439e:	0299      	lsls	r1, r3, #10
 80043a0:	460b      	mov	r3, r1
 80043a2:	4614      	mov	r4, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	4621      	mov	r1, r4
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f04f 0400 	mov.w	r4, #0
 80043ae:	461a      	mov	r2, r3
 80043b0:	4623      	mov	r3, r4
 80043b2:	f7fb ff5d 	bl	8000270 <__aeabi_uldivmod>
 80043b6:	4603      	mov	r3, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	3301      	adds	r3, #1
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	60bb      	str	r3, [r7, #8]
      break;
 80043d6:	e002      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043da:	60bb      	str	r3, [r7, #8]
      break;
 80043dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043de:	68bb      	ldr	r3, [r7, #8]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e8:	40023800 	.word	0x40023800
 80043ec:	00f42400 	.word	0x00f42400

080043f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000000 	.word	0x20000000

08004408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800440c:	f7ff fff0 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004410:	4601      	mov	r1, r0
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0a9b      	lsrs	r3, r3, #10
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4a03      	ldr	r2, [pc, #12]	; (800442c <HAL_RCC_GetPCLK1Freq+0x24>)
 800441e:	5cd3      	ldrb	r3, [r2, r3]
 8004420:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	08006dd8 	.word	0x08006dd8

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004434:	f7ff ffdc 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004438:	4601      	mov	r1, r0
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0b5b      	lsrs	r3, r3, #13
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4a03      	ldr	r2, [pc, #12]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004446:	5cd3      	ldrb	r3, [r2, r3]
 8004448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40023800 	.word	0x40023800
 8004454:	08006dd8 	.word	0x08006dd8

08004458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e01d      	b.n	80044a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd fda4 	bl	8001fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f000 fc20 	bl	8004cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d007      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a1a      	ldr	r2, [r3, #32]
 8004514:	f241 1311 	movw	r3, #4369	; 0x1111
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10f      	bne.n	800453e <HAL_TIM_Base_Stop_IT+0x48>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a1a      	ldr	r2, [r3, #32]
 8004524:	f240 4344 	movw	r3, #1092	; 0x444
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d107      	bne.n	800453e <HAL_TIM_Base_Stop_IT+0x48>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e01d      	b.n	800459a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd fd08 	bl	8001f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	4619      	mov	r1, r3
 800458a:	4610      	mov	r0, r2
 800458c:	f000 fba6 	bl	8004cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2201      	movs	r2, #1
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fde0 	bl	800517c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <HAL_TIM_PWM_Start+0x74>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_TIM_PWM_Start+0x2c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a14      	ldr	r2, [pc, #80]	; (800461c <HAL_TIM_PWM_Start+0x78>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_TIM_PWM_Start+0x30>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_TIM_PWM_Start+0x32>
 80045d4:	2300      	movs	r3, #0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b06      	cmp	r3, #6
 80045fa:	d007      	beq.n	800460c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40010000 	.word	0x40010000
 800461c:	40010400 	.word	0x40010400

08004620 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fda2 	bl	800517c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <HAL_TIM_PWM_Stop+0xa8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_TIM_PWM_Stop+0x2c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a21      	ldr	r2, [pc, #132]	; (80046cc <HAL_TIM_PWM_Stop+0xac>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <HAL_TIM_PWM_Stop+0x30>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <HAL_TIM_PWM_Stop+0x32>
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d017      	beq.n	8004686 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6a1a      	ldr	r2, [r3, #32]
 800465c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <HAL_TIM_PWM_Stop+0x66>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	f240 4344 	movw	r3, #1092	; 0x444
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <HAL_TIM_PWM_Stop+0x66>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004684:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a1a      	ldr	r2, [r3, #32]
 800468c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10f      	bne.n	80046b6 <HAL_TIM_PWM_Stop+0x96>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a1a      	ldr	r2, [r3, #32]
 800469c:	f240 4344 	movw	r3, #1092	; 0x444
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d107      	bne.n	80046b6 <HAL_TIM_PWM_Stop+0x96>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40010400 	.word	0x40010400

080046d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e083      	b.n	80047ec <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fd fbb7 	bl	8001e6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004714:	f023 0307 	bic.w	r3, r3, #7
 8004718:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f000 fad9 	bl	8004cdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	4313      	orrs	r3, r2
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004770:	f023 030c 	bic.w	r3, r3, #12
 8004774:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800477c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	4313      	orrs	r3, r2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	011a      	lsls	r2, r3, #4
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	031b      	lsls	r3, r3, #12
 80047a0:	4313      	orrs	r3, r2
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	4313      	orrs	r3, r2
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_TIM_Encoder_Start+0x16>
 8004804:	2b04      	cmp	r3, #4
 8004806:	d008      	beq.n	800481a <HAL_TIM_Encoder_Start+0x26>
 8004808:	e00f      	b.n	800482a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2201      	movs	r2, #1
 8004810:	2100      	movs	r1, #0
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fcb2 	bl	800517c <TIM_CCxChannelCmd>
      break;
 8004818:	e016      	b.n	8004848 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2201      	movs	r2, #1
 8004820:	2104      	movs	r1, #4
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fcaa 	bl	800517c <TIM_CCxChannelCmd>
      break;
 8004828:	e00e      	b.n	8004848 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2201      	movs	r2, #1
 8004830:	2100      	movs	r1, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fca2 	bl	800517c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2201      	movs	r2, #1
 800483e:	2104      	movs	r1, #4
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fc9b 	bl	800517c <TIM_CCxChannelCmd>
      break;
 8004846:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_TIM_Encoder_Stop+0x16>
 8004872:	2b04      	cmp	r3, #4
 8004874:	d008      	beq.n	8004888 <HAL_TIM_Encoder_Stop+0x26>
 8004876:	e00f      	b.n	8004898 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2200      	movs	r2, #0
 800487e:	2100      	movs	r1, #0
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fc7b 	bl	800517c <TIM_CCxChannelCmd>
      break;
 8004886:	e016      	b.n	80048b6 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2200      	movs	r2, #0
 800488e:	2104      	movs	r1, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fc73 	bl	800517c <TIM_CCxChannelCmd>
      break;
 8004896:	e00e      	b.n	80048b6 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2200      	movs	r2, #0
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fc6b 	bl	800517c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	2104      	movs	r1, #4
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fc64 	bl	800517c <TIM_CCxChannelCmd>
      break;
 80048b4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <HAL_TIM_Encoder_Stop+0x84>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a1a      	ldr	r2, [r3, #32]
 80048cc:	f240 4344 	movw	r3, #1092	; 0x444
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d107      	bne.n	80048e6 <HAL_TIM_Encoder_Stop+0x84>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b02      	cmp	r3, #2
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0202 	mvn.w	r2, #2
 800491c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9b4 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9a6 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f9b7 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b04      	cmp	r3, #4
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0204 	mvn.w	r2, #4
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f98a 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f97c 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f98d 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d122      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0208 	mvn.w	r2, #8
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2204      	movs	r2, #4
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f960 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f952 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f963 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0210 	mvn.w	r2, #16
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f936 	bl	8004ca0 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f928 	bl	8004c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f939 	bl	8004cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d10e      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d107      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0201 	mvn.w	r2, #1
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fb fe1a 	bl	80006a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b80      	cmp	r3, #128	; 0x80
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8c:	2b80      	cmp	r3, #128	; 0x80
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fc1a 	bl	80052d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aaa:	2b40      	cmp	r3, #64	; 0x40
 8004aac:	d10e      	bne.n	8004acc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d107      	bne.n	8004acc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8fe 	bl	8004cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d10e      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d107      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0220 	mvn.w	r2, #32
 8004af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fbe4 	bl	80052c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e0b4      	b.n	8004c84 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	f200 809f 	bhi.w	8004c70 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b6d 	.word	0x08004b6d
 8004b3c:	08004c71 	.word	0x08004c71
 8004b40:	08004c71 	.word	0x08004c71
 8004b44:	08004c71 	.word	0x08004c71
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004c71 	.word	0x08004c71
 8004b50:	08004c71 	.word	0x08004c71
 8004b54:	08004c71 	.word	0x08004c71
 8004b58:	08004bef 	.word	0x08004bef
 8004b5c:	08004c71 	.word	0x08004c71
 8004b60:	08004c71 	.word	0x08004c71
 8004b64:	08004c71 	.word	0x08004c71
 8004b68:	08004c2f 	.word	0x08004c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 f952 	bl	8004e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0208 	orr.w	r2, r2, #8
 8004b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0204 	bic.w	r2, r2, #4
 8004b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6999      	ldr	r1, [r3, #24]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	619a      	str	r2, [r3, #24]
      break;
 8004baa:	e062      	b.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f9a2 	bl	8004efc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6999      	ldr	r1, [r3, #24]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	021a      	lsls	r2, r3, #8
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	619a      	str	r2, [r3, #24]
      break;
 8004bec:	e041      	b.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f9f7 	bl	8004fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0208 	orr.w	r2, r2, #8
 8004c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0204 	bic.w	r2, r2, #4
 8004c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69d9      	ldr	r1, [r3, #28]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	61da      	str	r2, [r3, #28]
      break;
 8004c2c:	e021      	b.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fa4b 	bl	80050d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69d9      	ldr	r1, [r3, #28]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	021a      	lsls	r2, r3, #8
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	61da      	str	r2, [r3, #28]
      break;
 8004c6e:	e000      	b.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004c70:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a40      	ldr	r2, [pc, #256]	; (8004df0 <TIM_Base_SetConfig+0x114>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfa:	d00f      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a3d      	ldr	r2, [pc, #244]	; (8004df4 <TIM_Base_SetConfig+0x118>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a3c      	ldr	r2, [pc, #240]	; (8004df8 <TIM_Base_SetConfig+0x11c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a3b      	ldr	r2, [pc, #236]	; (8004dfc <TIM_Base_SetConfig+0x120>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a3a      	ldr	r2, [pc, #232]	; (8004e00 <TIM_Base_SetConfig+0x124>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d108      	bne.n	8004d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2f      	ldr	r2, [pc, #188]	; (8004df0 <TIM_Base_SetConfig+0x114>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d02b      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3c:	d027      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2c      	ldr	r2, [pc, #176]	; (8004df4 <TIM_Base_SetConfig+0x118>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d023      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2b      	ldr	r2, [pc, #172]	; (8004df8 <TIM_Base_SetConfig+0x11c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d01f      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2a      	ldr	r2, [pc, #168]	; (8004dfc <TIM_Base_SetConfig+0x120>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01b      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a29      	ldr	r2, [pc, #164]	; (8004e00 <TIM_Base_SetConfig+0x124>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d017      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a28      	ldr	r2, [pc, #160]	; (8004e04 <TIM_Base_SetConfig+0x128>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a27      	ldr	r2, [pc, #156]	; (8004e08 <TIM_Base_SetConfig+0x12c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00f      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <TIM_Base_SetConfig+0x130>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00b      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a25      	ldr	r2, [pc, #148]	; (8004e10 <TIM_Base_SetConfig+0x134>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <TIM_Base_SetConfig+0x138>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d003      	beq.n	8004d8e <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <TIM_Base_SetConfig+0x13c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d108      	bne.n	8004da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <TIM_Base_SetConfig+0x114>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_Base_SetConfig+0xf8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a0c      	ldr	r2, [pc, #48]	; (8004e00 <TIM_Base_SetConfig+0x124>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d103      	bne.n	8004ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	615a      	str	r2, [r3, #20]
}
 8004de2:	bf00      	nop
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	40010400 	.word	0x40010400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800
 8004e10:	40001800 	.word	0x40001800
 8004e14:	40001c00 	.word	0x40001c00
 8004e18:	40002000 	.word	0x40002000

08004e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0201 	bic.w	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 0302 	bic.w	r3, r3, #2
 8004e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a20      	ldr	r2, [pc, #128]	; (8004ef4 <TIM_OC1_SetConfig+0xd8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d003      	beq.n	8004e80 <TIM_OC1_SetConfig+0x64>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a1f      	ldr	r2, [pc, #124]	; (8004ef8 <TIM_OC1_SetConfig+0xdc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d10c      	bne.n	8004e9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f023 0308 	bic.w	r3, r3, #8
 8004e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f023 0304 	bic.w	r3, r3, #4
 8004e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <TIM_OC1_SetConfig+0xd8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_OC1_SetConfig+0x8e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <TIM_OC1_SetConfig+0xdc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d111      	bne.n	8004ece <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	621a      	str	r2, [r3, #32]
}
 8004ee8:	bf00      	nop
 8004eea:	371c      	adds	r7, #28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40010400 	.word	0x40010400

08004efc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0210 	bic.w	r2, r3, #16
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0320 	bic.w	r3, r3, #32
 8004f46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a22      	ldr	r2, [pc, #136]	; (8004fe0 <TIM_OC2_SetConfig+0xe4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_OC2_SetConfig+0x68>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a21      	ldr	r2, [pc, #132]	; (8004fe4 <TIM_OC2_SetConfig+0xe8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d10d      	bne.n	8004f80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <TIM_OC2_SetConfig+0xe4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_OC2_SetConfig+0x94>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <TIM_OC2_SetConfig+0xe8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d113      	bne.n	8004fb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40010400 	.word	0x40010400

08004fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <TIM_OC3_SetConfig+0xe0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_OC3_SetConfig+0x66>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a20      	ldr	r2, [pc, #128]	; (80050cc <TIM_OC3_SetConfig+0xe4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d10d      	bne.n	800506a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a16      	ldr	r2, [pc, #88]	; (80050c8 <TIM_OC3_SetConfig+0xe0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d003      	beq.n	800507a <TIM_OC3_SetConfig+0x92>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a15      	ldr	r2, [pc, #84]	; (80050cc <TIM_OC3_SetConfig+0xe4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d113      	bne.n	80050a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40010400 	.word	0x40010400

080050d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800511a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <TIM_OC4_SetConfig+0xa4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC4_SetConfig+0x68>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a11      	ldr	r2, [pc, #68]	; (8005178 <TIM_OC4_SetConfig+0xa8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d109      	bne.n	800514c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800513e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	019b      	lsls	r3, r3, #6
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40010000 	.word	0x40010000
 8005178:	40010400 	.word	0x40010400

0800517c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	2201      	movs	r2, #1
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	43db      	mvns	r3, r3
 800519e:	401a      	ands	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051dc:	2302      	movs	r3, #2
 80051de:	e05a      	b.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d022      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522c:	d01d      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d018      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10c      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	4313      	orrs	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40001800 	.word	0x40001800

080052c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e03f      	b.n	800537a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fc ff2e 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2224      	movs	r2, #36	; 0x24
 8005318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800532a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f90b 	bl	8005548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b088      	sub	sp, #32
 8005386:	af02      	add	r7, sp, #8
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	4613      	mov	r3, r2
 8005390:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b20      	cmp	r3, #32
 80053a0:	f040 8083 	bne.w	80054aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_UART_Transmit+0x2e>
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e07b      	b.n	80054ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_UART_Transmit+0x40>
 80053be:	2302      	movs	r3, #2
 80053c0:	e074      	b.n	80054ac <HAL_UART_Transmit+0x12a>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2221      	movs	r2, #33	; 0x21
 80053d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80053d8:	f7fd f8c0 	bl	800255c <HAL_GetTick>
 80053dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	88fa      	ldrh	r2, [r7, #6]
 80053e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	88fa      	ldrh	r2, [r7, #6]
 80053e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80053f2:	e042      	b.n	800547a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	d122      	bne.n	8005452 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2200      	movs	r2, #0
 8005414:	2180      	movs	r1, #128	; 0x80
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f84c 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e042      	b.n	80054ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005438:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	3302      	adds	r3, #2
 8005446:	60bb      	str	r3, [r7, #8]
 8005448:	e017      	b.n	800547a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3301      	adds	r3, #1
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	e013      	b.n	800547a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2200      	movs	r2, #0
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f829 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e01f      	b.n	80054ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	60ba      	str	r2, [r7, #8]
 8005472:	781a      	ldrb	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1b7      	bne.n	80053f4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2200      	movs	r2, #0
 800548c:	2140      	movs	r1, #64	; 0x40
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f810 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e006      	b.n	80054ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e000      	b.n	80054ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80054aa:	2302      	movs	r3, #2
  }
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c4:	e02c      	b.n	8005520 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d028      	beq.n	8005520 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054d4:	f7fd f842 	bl	800255c <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d21d      	bcs.n	8005520 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0201 	bic.w	r2, r2, #1
 8005502:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e00f      	b.n	8005540 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4013      	ands	r3, r2
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	429a      	cmp	r2, r3
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	429a      	cmp	r2, r3
 800553c:	d0c3      	beq.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800558a:	f023 030c 	bic.w	r3, r3, #12
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	430b      	orrs	r3, r1
 8005596:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b6:	f040 818b 	bne.w	80058d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4ac1      	ldr	r2, [pc, #772]	; (80058c4 <UART_SetConfig+0x37c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d005      	beq.n	80055d0 <UART_SetConfig+0x88>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4abf      	ldr	r2, [pc, #764]	; (80058c8 <UART_SetConfig+0x380>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	f040 80bd 	bne.w	800574a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055d0:	f7fe ff2e 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 80055d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	461d      	mov	r5, r3
 80055da:	f04f 0600 	mov.w	r6, #0
 80055de:	46a8      	mov	r8, r5
 80055e0:	46b1      	mov	r9, r6
 80055e2:	eb18 0308 	adds.w	r3, r8, r8
 80055e6:	eb49 0409 	adc.w	r4, r9, r9
 80055ea:	4698      	mov	r8, r3
 80055ec:	46a1      	mov	r9, r4
 80055ee:	eb18 0805 	adds.w	r8, r8, r5
 80055f2:	eb49 0906 	adc.w	r9, r9, r6
 80055f6:	f04f 0100 	mov.w	r1, #0
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005602:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005606:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800560a:	4688      	mov	r8, r1
 800560c:	4691      	mov	r9, r2
 800560e:	eb18 0005 	adds.w	r0, r8, r5
 8005612:	eb49 0106 	adc.w	r1, r9, r6
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	461d      	mov	r5, r3
 800561c:	f04f 0600 	mov.w	r6, #0
 8005620:	196b      	adds	r3, r5, r5
 8005622:	eb46 0406 	adc.w	r4, r6, r6
 8005626:	461a      	mov	r2, r3
 8005628:	4623      	mov	r3, r4
 800562a:	f7fa fe21 	bl	8000270 <__aeabi_uldivmod>
 800562e:	4603      	mov	r3, r0
 8005630:	460c      	mov	r4, r1
 8005632:	461a      	mov	r2, r3
 8005634:	4ba5      	ldr	r3, [pc, #660]	; (80058cc <UART_SetConfig+0x384>)
 8005636:	fba3 2302 	umull	r2, r3, r3, r2
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	461d      	mov	r5, r3
 8005644:	f04f 0600 	mov.w	r6, #0
 8005648:	46a9      	mov	r9, r5
 800564a:	46b2      	mov	sl, r6
 800564c:	eb19 0309 	adds.w	r3, r9, r9
 8005650:	eb4a 040a 	adc.w	r4, sl, sl
 8005654:	4699      	mov	r9, r3
 8005656:	46a2      	mov	sl, r4
 8005658:	eb19 0905 	adds.w	r9, r9, r5
 800565c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005660:	f04f 0100 	mov.w	r1, #0
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800566c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005670:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005674:	4689      	mov	r9, r1
 8005676:	4692      	mov	sl, r2
 8005678:	eb19 0005 	adds.w	r0, r9, r5
 800567c:	eb4a 0106 	adc.w	r1, sl, r6
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	461d      	mov	r5, r3
 8005686:	f04f 0600 	mov.w	r6, #0
 800568a:	196b      	adds	r3, r5, r5
 800568c:	eb46 0406 	adc.w	r4, r6, r6
 8005690:	461a      	mov	r2, r3
 8005692:	4623      	mov	r3, r4
 8005694:	f7fa fdec 	bl	8000270 <__aeabi_uldivmod>
 8005698:	4603      	mov	r3, r0
 800569a:	460c      	mov	r4, r1
 800569c:	461a      	mov	r2, r3
 800569e:	4b8b      	ldr	r3, [pc, #556]	; (80058cc <UART_SetConfig+0x384>)
 80056a0:	fba3 1302 	umull	r1, r3, r3, r2
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	2164      	movs	r1, #100	; 0x64
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	3332      	adds	r3, #50	; 0x32
 80056b2:	4a86      	ldr	r2, [pc, #536]	; (80058cc <UART_SetConfig+0x384>)
 80056b4:	fba2 2303 	umull	r2, r3, r2, r3
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056c0:	4498      	add	r8, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	461d      	mov	r5, r3
 80056c6:	f04f 0600 	mov.w	r6, #0
 80056ca:	46a9      	mov	r9, r5
 80056cc:	46b2      	mov	sl, r6
 80056ce:	eb19 0309 	adds.w	r3, r9, r9
 80056d2:	eb4a 040a 	adc.w	r4, sl, sl
 80056d6:	4699      	mov	r9, r3
 80056d8:	46a2      	mov	sl, r4
 80056da:	eb19 0905 	adds.w	r9, r9, r5
 80056de:	eb4a 0a06 	adc.w	sl, sl, r6
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056f6:	4689      	mov	r9, r1
 80056f8:	4692      	mov	sl, r2
 80056fa:	eb19 0005 	adds.w	r0, r9, r5
 80056fe:	eb4a 0106 	adc.w	r1, sl, r6
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	461d      	mov	r5, r3
 8005708:	f04f 0600 	mov.w	r6, #0
 800570c:	196b      	adds	r3, r5, r5
 800570e:	eb46 0406 	adc.w	r4, r6, r6
 8005712:	461a      	mov	r2, r3
 8005714:	4623      	mov	r3, r4
 8005716:	f7fa fdab 	bl	8000270 <__aeabi_uldivmod>
 800571a:	4603      	mov	r3, r0
 800571c:	460c      	mov	r4, r1
 800571e:	461a      	mov	r2, r3
 8005720:	4b6a      	ldr	r3, [pc, #424]	; (80058cc <UART_SetConfig+0x384>)
 8005722:	fba3 1302 	umull	r1, r3, r3, r2
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	2164      	movs	r1, #100	; 0x64
 800572a:	fb01 f303 	mul.w	r3, r1, r3
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	3332      	adds	r3, #50	; 0x32
 8005734:	4a65      	ldr	r2, [pc, #404]	; (80058cc <UART_SetConfig+0x384>)
 8005736:	fba2 2303 	umull	r2, r3, r2, r3
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	f003 0207 	and.w	r2, r3, #7
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4442      	add	r2, r8
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	e26f      	b.n	8005c2a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800574a:	f7fe fe5d 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 800574e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	461d      	mov	r5, r3
 8005754:	f04f 0600 	mov.w	r6, #0
 8005758:	46a8      	mov	r8, r5
 800575a:	46b1      	mov	r9, r6
 800575c:	eb18 0308 	adds.w	r3, r8, r8
 8005760:	eb49 0409 	adc.w	r4, r9, r9
 8005764:	4698      	mov	r8, r3
 8005766:	46a1      	mov	r9, r4
 8005768:	eb18 0805 	adds.w	r8, r8, r5
 800576c:	eb49 0906 	adc.w	r9, r9, r6
 8005770:	f04f 0100 	mov.w	r1, #0
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800577c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005780:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005784:	4688      	mov	r8, r1
 8005786:	4691      	mov	r9, r2
 8005788:	eb18 0005 	adds.w	r0, r8, r5
 800578c:	eb49 0106 	adc.w	r1, r9, r6
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	461d      	mov	r5, r3
 8005796:	f04f 0600 	mov.w	r6, #0
 800579a:	196b      	adds	r3, r5, r5
 800579c:	eb46 0406 	adc.w	r4, r6, r6
 80057a0:	461a      	mov	r2, r3
 80057a2:	4623      	mov	r3, r4
 80057a4:	f7fa fd64 	bl	8000270 <__aeabi_uldivmod>
 80057a8:	4603      	mov	r3, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	461a      	mov	r2, r3
 80057ae:	4b47      	ldr	r3, [pc, #284]	; (80058cc <UART_SetConfig+0x384>)
 80057b0:	fba3 2302 	umull	r2, r3, r3, r2
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	461d      	mov	r5, r3
 80057be:	f04f 0600 	mov.w	r6, #0
 80057c2:	46a9      	mov	r9, r5
 80057c4:	46b2      	mov	sl, r6
 80057c6:	eb19 0309 	adds.w	r3, r9, r9
 80057ca:	eb4a 040a 	adc.w	r4, sl, sl
 80057ce:	4699      	mov	r9, r3
 80057d0:	46a2      	mov	sl, r4
 80057d2:	eb19 0905 	adds.w	r9, r9, r5
 80057d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80057da:	f04f 0100 	mov.w	r1, #0
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057ee:	4689      	mov	r9, r1
 80057f0:	4692      	mov	sl, r2
 80057f2:	eb19 0005 	adds.w	r0, r9, r5
 80057f6:	eb4a 0106 	adc.w	r1, sl, r6
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	461d      	mov	r5, r3
 8005800:	f04f 0600 	mov.w	r6, #0
 8005804:	196b      	adds	r3, r5, r5
 8005806:	eb46 0406 	adc.w	r4, r6, r6
 800580a:	461a      	mov	r2, r3
 800580c:	4623      	mov	r3, r4
 800580e:	f7fa fd2f 	bl	8000270 <__aeabi_uldivmod>
 8005812:	4603      	mov	r3, r0
 8005814:	460c      	mov	r4, r1
 8005816:	461a      	mov	r2, r3
 8005818:	4b2c      	ldr	r3, [pc, #176]	; (80058cc <UART_SetConfig+0x384>)
 800581a:	fba3 1302 	umull	r1, r3, r3, r2
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	2164      	movs	r1, #100	; 0x64
 8005822:	fb01 f303 	mul.w	r3, r1, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	3332      	adds	r3, #50	; 0x32
 800582c:	4a27      	ldr	r2, [pc, #156]	; (80058cc <UART_SetConfig+0x384>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800583a:	4498      	add	r8, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	461d      	mov	r5, r3
 8005840:	f04f 0600 	mov.w	r6, #0
 8005844:	46a9      	mov	r9, r5
 8005846:	46b2      	mov	sl, r6
 8005848:	eb19 0309 	adds.w	r3, r9, r9
 800584c:	eb4a 040a 	adc.w	r4, sl, sl
 8005850:	4699      	mov	r9, r3
 8005852:	46a2      	mov	sl, r4
 8005854:	eb19 0905 	adds.w	r9, r9, r5
 8005858:	eb4a 0a06 	adc.w	sl, sl, r6
 800585c:	f04f 0100 	mov.w	r1, #0
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005868:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800586c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005870:	4689      	mov	r9, r1
 8005872:	4692      	mov	sl, r2
 8005874:	eb19 0005 	adds.w	r0, r9, r5
 8005878:	eb4a 0106 	adc.w	r1, sl, r6
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	461d      	mov	r5, r3
 8005882:	f04f 0600 	mov.w	r6, #0
 8005886:	196b      	adds	r3, r5, r5
 8005888:	eb46 0406 	adc.w	r4, r6, r6
 800588c:	461a      	mov	r2, r3
 800588e:	4623      	mov	r3, r4
 8005890:	f7fa fcee 	bl	8000270 <__aeabi_uldivmod>
 8005894:	4603      	mov	r3, r0
 8005896:	460c      	mov	r4, r1
 8005898:	461a      	mov	r2, r3
 800589a:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <UART_SetConfig+0x384>)
 800589c:	fba3 1302 	umull	r1, r3, r3, r2
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	2164      	movs	r1, #100	; 0x64
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	3332      	adds	r3, #50	; 0x32
 80058ae:	4a07      	ldr	r2, [pc, #28]	; (80058cc <UART_SetConfig+0x384>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f003 0207 	and.w	r2, r3, #7
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4442      	add	r2, r8
 80058c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80058c2:	e1b2      	b.n	8005c2a <UART_SetConfig+0x6e2>
 80058c4:	40011000 	.word	0x40011000
 80058c8:	40011400 	.word	0x40011400
 80058cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4ad7      	ldr	r2, [pc, #860]	; (8005c34 <UART_SetConfig+0x6ec>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d005      	beq.n	80058e6 <UART_SetConfig+0x39e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4ad6      	ldr	r2, [pc, #856]	; (8005c38 <UART_SetConfig+0x6f0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	f040 80d1 	bne.w	8005a88 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80058e6:	f7fe fda3 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 80058ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	469a      	mov	sl, r3
 80058f0:	f04f 0b00 	mov.w	fp, #0
 80058f4:	46d0      	mov	r8, sl
 80058f6:	46d9      	mov	r9, fp
 80058f8:	eb18 0308 	adds.w	r3, r8, r8
 80058fc:	eb49 0409 	adc.w	r4, r9, r9
 8005900:	4698      	mov	r8, r3
 8005902:	46a1      	mov	r9, r4
 8005904:	eb18 080a 	adds.w	r8, r8, sl
 8005908:	eb49 090b 	adc.w	r9, r9, fp
 800590c:	f04f 0100 	mov.w	r1, #0
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005918:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800591c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005920:	4688      	mov	r8, r1
 8005922:	4691      	mov	r9, r2
 8005924:	eb1a 0508 	adds.w	r5, sl, r8
 8005928:	eb4b 0609 	adc.w	r6, fp, r9
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	4619      	mov	r1, r3
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	f04f 0400 	mov.w	r4, #0
 800593e:	0094      	lsls	r4, r2, #2
 8005940:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005944:	008b      	lsls	r3, r1, #2
 8005946:	461a      	mov	r2, r3
 8005948:	4623      	mov	r3, r4
 800594a:	4628      	mov	r0, r5
 800594c:	4631      	mov	r1, r6
 800594e:	f7fa fc8f 	bl	8000270 <__aeabi_uldivmod>
 8005952:	4603      	mov	r3, r0
 8005954:	460c      	mov	r4, r1
 8005956:	461a      	mov	r2, r3
 8005958:	4bb8      	ldr	r3, [pc, #736]	; (8005c3c <UART_SetConfig+0x6f4>)
 800595a:	fba3 2302 	umull	r2, r3, r3, r2
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	469b      	mov	fp, r3
 8005968:	f04f 0c00 	mov.w	ip, #0
 800596c:	46d9      	mov	r9, fp
 800596e:	46e2      	mov	sl, ip
 8005970:	eb19 0309 	adds.w	r3, r9, r9
 8005974:	eb4a 040a 	adc.w	r4, sl, sl
 8005978:	4699      	mov	r9, r3
 800597a:	46a2      	mov	sl, r4
 800597c:	eb19 090b 	adds.w	r9, r9, fp
 8005980:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005984:	f04f 0100 	mov.w	r1, #0
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005990:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005994:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005998:	4689      	mov	r9, r1
 800599a:	4692      	mov	sl, r2
 800599c:	eb1b 0509 	adds.w	r5, fp, r9
 80059a0:	eb4c 060a 	adc.w	r6, ip, sl
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4619      	mov	r1, r3
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	0094      	lsls	r4, r2, #2
 80059b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059bc:	008b      	lsls	r3, r1, #2
 80059be:	461a      	mov	r2, r3
 80059c0:	4623      	mov	r3, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	4631      	mov	r1, r6
 80059c6:	f7fa fc53 	bl	8000270 <__aeabi_uldivmod>
 80059ca:	4603      	mov	r3, r0
 80059cc:	460c      	mov	r4, r1
 80059ce:	461a      	mov	r2, r3
 80059d0:	4b9a      	ldr	r3, [pc, #616]	; (8005c3c <UART_SetConfig+0x6f4>)
 80059d2:	fba3 1302 	umull	r1, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	2164      	movs	r1, #100	; 0x64
 80059da:	fb01 f303 	mul.w	r3, r1, r3
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	3332      	adds	r3, #50	; 0x32
 80059e4:	4a95      	ldr	r2, [pc, #596]	; (8005c3c <UART_SetConfig+0x6f4>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059f0:	4498      	add	r8, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	469b      	mov	fp, r3
 80059f6:	f04f 0c00 	mov.w	ip, #0
 80059fa:	46d9      	mov	r9, fp
 80059fc:	46e2      	mov	sl, ip
 80059fe:	eb19 0309 	adds.w	r3, r9, r9
 8005a02:	eb4a 040a 	adc.w	r4, sl, sl
 8005a06:	4699      	mov	r9, r3
 8005a08:	46a2      	mov	sl, r4
 8005a0a:	eb19 090b 	adds.w	r9, r9, fp
 8005a0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a12:	f04f 0100 	mov.w	r1, #0
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a26:	4689      	mov	r9, r1
 8005a28:	4692      	mov	sl, r2
 8005a2a:	eb1b 0509 	adds.w	r5, fp, r9
 8005a2e:	eb4c 060a 	adc.w	r6, ip, sl
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4619      	mov	r1, r3
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	f04f 0400 	mov.w	r4, #0
 8005a44:	0094      	lsls	r4, r2, #2
 8005a46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a4a:	008b      	lsls	r3, r1, #2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4623      	mov	r3, r4
 8005a50:	4628      	mov	r0, r5
 8005a52:	4631      	mov	r1, r6
 8005a54:	f7fa fc0c 	bl	8000270 <__aeabi_uldivmod>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	4b77      	ldr	r3, [pc, #476]	; (8005c3c <UART_SetConfig+0x6f4>)
 8005a60:	fba3 1302 	umull	r1, r3, r3, r2
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	2164      	movs	r1, #100	; 0x64
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	3332      	adds	r3, #50	; 0x32
 8005a72:	4a72      	ldr	r2, [pc, #456]	; (8005c3c <UART_SetConfig+0x6f4>)
 8005a74:	fba2 2303 	umull	r2, r3, r2, r3
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	f003 020f 	and.w	r2, r3, #15
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4442      	add	r2, r8
 8005a84:	609a      	str	r2, [r3, #8]
 8005a86:	e0d0      	b.n	8005c2a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a88:	f7fe fcbe 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8005a8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	469a      	mov	sl, r3
 8005a92:	f04f 0b00 	mov.w	fp, #0
 8005a96:	46d0      	mov	r8, sl
 8005a98:	46d9      	mov	r9, fp
 8005a9a:	eb18 0308 	adds.w	r3, r8, r8
 8005a9e:	eb49 0409 	adc.w	r4, r9, r9
 8005aa2:	4698      	mov	r8, r3
 8005aa4:	46a1      	mov	r9, r4
 8005aa6:	eb18 080a 	adds.w	r8, r8, sl
 8005aaa:	eb49 090b 	adc.w	r9, r9, fp
 8005aae:	f04f 0100 	mov.w	r1, #0
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005aba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005abe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ac2:	4688      	mov	r8, r1
 8005ac4:	4691      	mov	r9, r2
 8005ac6:	eb1a 0508 	adds.w	r5, sl, r8
 8005aca:	eb4b 0609 	adc.w	r6, fp, r9
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	f04f 0400 	mov.w	r4, #0
 8005ae0:	0094      	lsls	r4, r2, #2
 8005ae2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ae6:	008b      	lsls	r3, r1, #2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4623      	mov	r3, r4
 8005aec:	4628      	mov	r0, r5
 8005aee:	4631      	mov	r1, r6
 8005af0:	f7fa fbbe 	bl	8000270 <__aeabi_uldivmod>
 8005af4:	4603      	mov	r3, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	461a      	mov	r2, r3
 8005afa:	4b50      	ldr	r3, [pc, #320]	; (8005c3c <UART_SetConfig+0x6f4>)
 8005afc:	fba3 2302 	umull	r2, r3, r3, r2
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	469b      	mov	fp, r3
 8005b0a:	f04f 0c00 	mov.w	ip, #0
 8005b0e:	46d9      	mov	r9, fp
 8005b10:	46e2      	mov	sl, ip
 8005b12:	eb19 0309 	adds.w	r3, r9, r9
 8005b16:	eb4a 040a 	adc.w	r4, sl, sl
 8005b1a:	4699      	mov	r9, r3
 8005b1c:	46a2      	mov	sl, r4
 8005b1e:	eb19 090b 	adds.w	r9, r9, fp
 8005b22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b3a:	4689      	mov	r9, r1
 8005b3c:	4692      	mov	sl, r2
 8005b3e:	eb1b 0509 	adds.w	r5, fp, r9
 8005b42:	eb4c 060a 	adc.w	r6, ip, sl
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	f04f 0400 	mov.w	r4, #0
 8005b58:	0094      	lsls	r4, r2, #2
 8005b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b5e:	008b      	lsls	r3, r1, #2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	4631      	mov	r1, r6
 8005b68:	f7fa fb82 	bl	8000270 <__aeabi_uldivmod>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	461a      	mov	r2, r3
 8005b72:	4b32      	ldr	r3, [pc, #200]	; (8005c3c <UART_SetConfig+0x6f4>)
 8005b74:	fba3 1302 	umull	r1, r3, r3, r2
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	2164      	movs	r1, #100	; 0x64
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	3332      	adds	r3, #50	; 0x32
 8005b86:	4a2d      	ldr	r2, [pc, #180]	; (8005c3c <UART_SetConfig+0x6f4>)
 8005b88:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b92:	4498      	add	r8, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	469b      	mov	fp, r3
 8005b98:	f04f 0c00 	mov.w	ip, #0
 8005b9c:	46d9      	mov	r9, fp
 8005b9e:	46e2      	mov	sl, ip
 8005ba0:	eb19 0309 	adds.w	r3, r9, r9
 8005ba4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ba8:	4699      	mov	r9, r3
 8005baa:	46a2      	mov	sl, r4
 8005bac:	eb19 090b 	adds.w	r9, r9, fp
 8005bb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bb4:	f04f 0100 	mov.w	r1, #0
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bc8:	4689      	mov	r9, r1
 8005bca:	4692      	mov	sl, r2
 8005bcc:	eb1b 0509 	adds.w	r5, fp, r9
 8005bd0:	eb4c 060a 	adc.w	r6, ip, sl
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	f04f 0200 	mov.w	r2, #0
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	f04f 0400 	mov.w	r4, #0
 8005be6:	0094      	lsls	r4, r2, #2
 8005be8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bec:	008b      	lsls	r3, r1, #2
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	f7fa fb3b 	bl	8000270 <__aeabi_uldivmod>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <UART_SetConfig+0x6f4>)
 8005c02:	fba3 1302 	umull	r1, r3, r3, r2
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	2164      	movs	r1, #100	; 0x64
 8005c0a:	fb01 f303 	mul.w	r3, r1, r3
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	3332      	adds	r3, #50	; 0x32
 8005c14:	4a09      	ldr	r2, [pc, #36]	; (8005c3c <UART_SetConfig+0x6f4>)
 8005c16:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	f003 020f 	and.w	r2, r3, #15
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4442      	add	r2, r8
 8005c26:	609a      	str	r2, [r3, #8]
}
 8005c28:	e7ff      	b.n	8005c2a <UART_SetConfig+0x6e2>
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c34:	40011000 	.word	0x40011000
 8005c38:	40011400 	.word	0x40011400
 8005c3c:	51eb851f 	.word	0x51eb851f

08005c40 <__errno>:
 8005c40:	4b01      	ldr	r3, [pc, #4]	; (8005c48 <__errno+0x8>)
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	2000000c 	.word	0x2000000c

08005c4c <__libc_init_array>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	4e0d      	ldr	r6, [pc, #52]	; (8005c84 <__libc_init_array+0x38>)
 8005c50:	4c0d      	ldr	r4, [pc, #52]	; (8005c88 <__libc_init_array+0x3c>)
 8005c52:	1ba4      	subs	r4, r4, r6
 8005c54:	10a4      	asrs	r4, r4, #2
 8005c56:	2500      	movs	r5, #0
 8005c58:	42a5      	cmp	r5, r4
 8005c5a:	d109      	bne.n	8005c70 <__libc_init_array+0x24>
 8005c5c:	4e0b      	ldr	r6, [pc, #44]	; (8005c8c <__libc_init_array+0x40>)
 8005c5e:	4c0c      	ldr	r4, [pc, #48]	; (8005c90 <__libc_init_array+0x44>)
 8005c60:	f000 ffb2 	bl	8006bc8 <_init>
 8005c64:	1ba4      	subs	r4, r4, r6
 8005c66:	10a4      	asrs	r4, r4, #2
 8005c68:	2500      	movs	r5, #0
 8005c6a:	42a5      	cmp	r5, r4
 8005c6c:	d105      	bne.n	8005c7a <__libc_init_array+0x2e>
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c74:	4798      	blx	r3
 8005c76:	3501      	adds	r5, #1
 8005c78:	e7ee      	b.n	8005c58 <__libc_init_array+0xc>
 8005c7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c7e:	4798      	blx	r3
 8005c80:	3501      	adds	r5, #1
 8005c82:	e7f2      	b.n	8005c6a <__libc_init_array+0x1e>
 8005c84:	08006e88 	.word	0x08006e88
 8005c88:	08006e88 	.word	0x08006e88
 8005c8c:	08006e88 	.word	0x08006e88
 8005c90:	08006e8c 	.word	0x08006e8c

08005c94 <memset>:
 8005c94:	4402      	add	r2, r0
 8005c96:	4603      	mov	r3, r0
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d100      	bne.n	8005c9e <memset+0xa>
 8005c9c:	4770      	bx	lr
 8005c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ca2:	e7f9      	b.n	8005c98 <memset+0x4>

08005ca4 <iprintf>:
 8005ca4:	b40f      	push	{r0, r1, r2, r3}
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <iprintf+0x2c>)
 8005ca8:	b513      	push	{r0, r1, r4, lr}
 8005caa:	681c      	ldr	r4, [r3, #0]
 8005cac:	b124      	cbz	r4, 8005cb8 <iprintf+0x14>
 8005cae:	69a3      	ldr	r3, [r4, #24]
 8005cb0:	b913      	cbnz	r3, 8005cb8 <iprintf+0x14>
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 fa36 	bl	8006124 <__sinit>
 8005cb8:	ab05      	add	r3, sp, #20
 8005cba:	9a04      	ldr	r2, [sp, #16]
 8005cbc:	68a1      	ldr	r1, [r4, #8]
 8005cbe:	9301      	str	r3, [sp, #4]
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f000 fbef 	bl	80064a4 <_vfiprintf_r>
 8005cc6:	b002      	add	sp, #8
 8005cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ccc:	b004      	add	sp, #16
 8005cce:	4770      	bx	lr
 8005cd0:	2000000c 	.word	0x2000000c

08005cd4 <putchar>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <putchar+0x24>)
 8005cd8:	681c      	ldr	r4, [r3, #0]
 8005cda:	4605      	mov	r5, r0
 8005cdc:	b124      	cbz	r4, 8005ce8 <putchar+0x14>
 8005cde:	69a3      	ldr	r3, [r4, #24]
 8005ce0:	b913      	cbnz	r3, 8005ce8 <putchar+0x14>
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 fa1e 	bl	8006124 <__sinit>
 8005ce8:	68a2      	ldr	r2, [r4, #8]
 8005cea:	4629      	mov	r1, r5
 8005cec:	4620      	mov	r0, r4
 8005cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cf2:	f000 be75 	b.w	80069e0 <_putc_r>
 8005cf6:	bf00      	nop
 8005cf8:	2000000c 	.word	0x2000000c

08005cfc <_puts_r>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	460e      	mov	r6, r1
 8005d00:	4605      	mov	r5, r0
 8005d02:	b118      	cbz	r0, 8005d0c <_puts_r+0x10>
 8005d04:	6983      	ldr	r3, [r0, #24]
 8005d06:	b90b      	cbnz	r3, 8005d0c <_puts_r+0x10>
 8005d08:	f000 fa0c 	bl	8006124 <__sinit>
 8005d0c:	69ab      	ldr	r3, [r5, #24]
 8005d0e:	68ac      	ldr	r4, [r5, #8]
 8005d10:	b913      	cbnz	r3, 8005d18 <_puts_r+0x1c>
 8005d12:	4628      	mov	r0, r5
 8005d14:	f000 fa06 	bl	8006124 <__sinit>
 8005d18:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <_puts_r+0xac>)
 8005d1a:	429c      	cmp	r4, r3
 8005d1c:	d117      	bne.n	8005d4e <_puts_r+0x52>
 8005d1e:	686c      	ldr	r4, [r5, #4]
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	071b      	lsls	r3, r3, #28
 8005d24:	d51d      	bpl.n	8005d62 <_puts_r+0x66>
 8005d26:	6923      	ldr	r3, [r4, #16]
 8005d28:	b1db      	cbz	r3, 8005d62 <_puts_r+0x66>
 8005d2a:	3e01      	subs	r6, #1
 8005d2c:	68a3      	ldr	r3, [r4, #8]
 8005d2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d32:	3b01      	subs	r3, #1
 8005d34:	60a3      	str	r3, [r4, #8]
 8005d36:	b9e9      	cbnz	r1, 8005d74 <_puts_r+0x78>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da2e      	bge.n	8005d9a <_puts_r+0x9e>
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	210a      	movs	r1, #10
 8005d40:	4628      	mov	r0, r5
 8005d42:	f000 f83f 	bl	8005dc4 <__swbuf_r>
 8005d46:	3001      	adds	r0, #1
 8005d48:	d011      	beq.n	8005d6e <_puts_r+0x72>
 8005d4a:	200a      	movs	r0, #10
 8005d4c:	e011      	b.n	8005d72 <_puts_r+0x76>
 8005d4e:	4b17      	ldr	r3, [pc, #92]	; (8005dac <_puts_r+0xb0>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	d101      	bne.n	8005d58 <_puts_r+0x5c>
 8005d54:	68ac      	ldr	r4, [r5, #8]
 8005d56:	e7e3      	b.n	8005d20 <_puts_r+0x24>
 8005d58:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <_puts_r+0xb4>)
 8005d5a:	429c      	cmp	r4, r3
 8005d5c:	bf08      	it	eq
 8005d5e:	68ec      	ldreq	r4, [r5, #12]
 8005d60:	e7de      	b.n	8005d20 <_puts_r+0x24>
 8005d62:	4621      	mov	r1, r4
 8005d64:	4628      	mov	r0, r5
 8005d66:	f000 f87f 	bl	8005e68 <__swsetup_r>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d0dd      	beq.n	8005d2a <_puts_r+0x2e>
 8005d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	da04      	bge.n	8005d82 <_puts_r+0x86>
 8005d78:	69a2      	ldr	r2, [r4, #24]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	dc06      	bgt.n	8005d8c <_puts_r+0x90>
 8005d7e:	290a      	cmp	r1, #10
 8005d80:	d004      	beq.n	8005d8c <_puts_r+0x90>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	6022      	str	r2, [r4, #0]
 8005d88:	7019      	strb	r1, [r3, #0]
 8005d8a:	e7cf      	b.n	8005d2c <_puts_r+0x30>
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 f818 	bl	8005dc4 <__swbuf_r>
 8005d94:	3001      	adds	r0, #1
 8005d96:	d1c9      	bne.n	8005d2c <_puts_r+0x30>
 8005d98:	e7e9      	b.n	8005d6e <_puts_r+0x72>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	200a      	movs	r0, #10
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	6022      	str	r2, [r4, #0]
 8005da2:	7018      	strb	r0, [r3, #0]
 8005da4:	e7e5      	b.n	8005d72 <_puts_r+0x76>
 8005da6:	bf00      	nop
 8005da8:	08006e0c 	.word	0x08006e0c
 8005dac:	08006e2c 	.word	0x08006e2c
 8005db0:	08006dec 	.word	0x08006dec

08005db4 <puts>:
 8005db4:	4b02      	ldr	r3, [pc, #8]	; (8005dc0 <puts+0xc>)
 8005db6:	4601      	mov	r1, r0
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	f7ff bf9f 	b.w	8005cfc <_puts_r>
 8005dbe:	bf00      	nop
 8005dc0:	2000000c 	.word	0x2000000c

08005dc4 <__swbuf_r>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	460e      	mov	r6, r1
 8005dc8:	4614      	mov	r4, r2
 8005dca:	4605      	mov	r5, r0
 8005dcc:	b118      	cbz	r0, 8005dd6 <__swbuf_r+0x12>
 8005dce:	6983      	ldr	r3, [r0, #24]
 8005dd0:	b90b      	cbnz	r3, 8005dd6 <__swbuf_r+0x12>
 8005dd2:	f000 f9a7 	bl	8006124 <__sinit>
 8005dd6:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <__swbuf_r+0x98>)
 8005dd8:	429c      	cmp	r4, r3
 8005dda:	d12a      	bne.n	8005e32 <__swbuf_r+0x6e>
 8005ddc:	686c      	ldr	r4, [r5, #4]
 8005dde:	69a3      	ldr	r3, [r4, #24]
 8005de0:	60a3      	str	r3, [r4, #8]
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	071a      	lsls	r2, r3, #28
 8005de6:	d52e      	bpl.n	8005e46 <__swbuf_r+0x82>
 8005de8:	6923      	ldr	r3, [r4, #16]
 8005dea:	b363      	cbz	r3, 8005e46 <__swbuf_r+0x82>
 8005dec:	6923      	ldr	r3, [r4, #16]
 8005dee:	6820      	ldr	r0, [r4, #0]
 8005df0:	1ac0      	subs	r0, r0, r3
 8005df2:	6963      	ldr	r3, [r4, #20]
 8005df4:	b2f6      	uxtb	r6, r6
 8005df6:	4283      	cmp	r3, r0
 8005df8:	4637      	mov	r7, r6
 8005dfa:	dc04      	bgt.n	8005e06 <__swbuf_r+0x42>
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f926 	bl	8006050 <_fflush_r>
 8005e04:	bb28      	cbnz	r0, 8005e52 <__swbuf_r+0x8e>
 8005e06:	68a3      	ldr	r3, [r4, #8]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	60a3      	str	r3, [r4, #8]
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	701e      	strb	r6, [r3, #0]
 8005e14:	6963      	ldr	r3, [r4, #20]
 8005e16:	3001      	adds	r0, #1
 8005e18:	4283      	cmp	r3, r0
 8005e1a:	d004      	beq.n	8005e26 <__swbuf_r+0x62>
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	07db      	lsls	r3, r3, #31
 8005e20:	d519      	bpl.n	8005e56 <__swbuf_r+0x92>
 8005e22:	2e0a      	cmp	r6, #10
 8005e24:	d117      	bne.n	8005e56 <__swbuf_r+0x92>
 8005e26:	4621      	mov	r1, r4
 8005e28:	4628      	mov	r0, r5
 8005e2a:	f000 f911 	bl	8006050 <_fflush_r>
 8005e2e:	b190      	cbz	r0, 8005e56 <__swbuf_r+0x92>
 8005e30:	e00f      	b.n	8005e52 <__swbuf_r+0x8e>
 8005e32:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <__swbuf_r+0x9c>)
 8005e34:	429c      	cmp	r4, r3
 8005e36:	d101      	bne.n	8005e3c <__swbuf_r+0x78>
 8005e38:	68ac      	ldr	r4, [r5, #8]
 8005e3a:	e7d0      	b.n	8005dde <__swbuf_r+0x1a>
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <__swbuf_r+0xa0>)
 8005e3e:	429c      	cmp	r4, r3
 8005e40:	bf08      	it	eq
 8005e42:	68ec      	ldreq	r4, [r5, #12]
 8005e44:	e7cb      	b.n	8005dde <__swbuf_r+0x1a>
 8005e46:	4621      	mov	r1, r4
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f000 f80d 	bl	8005e68 <__swsetup_r>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d0cc      	beq.n	8005dec <__swbuf_r+0x28>
 8005e52:	f04f 37ff 	mov.w	r7, #4294967295
 8005e56:	4638      	mov	r0, r7
 8005e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08006e0c 	.word	0x08006e0c
 8005e60:	08006e2c 	.word	0x08006e2c
 8005e64:	08006dec 	.word	0x08006dec

08005e68 <__swsetup_r>:
 8005e68:	4b32      	ldr	r3, [pc, #200]	; (8005f34 <__swsetup_r+0xcc>)
 8005e6a:	b570      	push	{r4, r5, r6, lr}
 8005e6c:	681d      	ldr	r5, [r3, #0]
 8005e6e:	4606      	mov	r6, r0
 8005e70:	460c      	mov	r4, r1
 8005e72:	b125      	cbz	r5, 8005e7e <__swsetup_r+0x16>
 8005e74:	69ab      	ldr	r3, [r5, #24]
 8005e76:	b913      	cbnz	r3, 8005e7e <__swsetup_r+0x16>
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f000 f953 	bl	8006124 <__sinit>
 8005e7e:	4b2e      	ldr	r3, [pc, #184]	; (8005f38 <__swsetup_r+0xd0>)
 8005e80:	429c      	cmp	r4, r3
 8005e82:	d10f      	bne.n	8005ea4 <__swsetup_r+0x3c>
 8005e84:	686c      	ldr	r4, [r5, #4]
 8005e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	0715      	lsls	r5, r2, #28
 8005e8e:	d42c      	bmi.n	8005eea <__swsetup_r+0x82>
 8005e90:	06d0      	lsls	r0, r2, #27
 8005e92:	d411      	bmi.n	8005eb8 <__swsetup_r+0x50>
 8005e94:	2209      	movs	r2, #9
 8005e96:	6032      	str	r2, [r6, #0]
 8005e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e9c:	81a3      	strh	r3, [r4, #12]
 8005e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea2:	e03e      	b.n	8005f22 <__swsetup_r+0xba>
 8005ea4:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <__swsetup_r+0xd4>)
 8005ea6:	429c      	cmp	r4, r3
 8005ea8:	d101      	bne.n	8005eae <__swsetup_r+0x46>
 8005eaa:	68ac      	ldr	r4, [r5, #8]
 8005eac:	e7eb      	b.n	8005e86 <__swsetup_r+0x1e>
 8005eae:	4b24      	ldr	r3, [pc, #144]	; (8005f40 <__swsetup_r+0xd8>)
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	bf08      	it	eq
 8005eb4:	68ec      	ldreq	r4, [r5, #12]
 8005eb6:	e7e6      	b.n	8005e86 <__swsetup_r+0x1e>
 8005eb8:	0751      	lsls	r1, r2, #29
 8005eba:	d512      	bpl.n	8005ee2 <__swsetup_r+0x7a>
 8005ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ebe:	b141      	cbz	r1, 8005ed2 <__swsetup_r+0x6a>
 8005ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ec4:	4299      	cmp	r1, r3
 8005ec6:	d002      	beq.n	8005ece <__swsetup_r+0x66>
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f000 fa19 	bl	8006300 <_free_r>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ed8:	81a3      	strh	r3, [r4, #12]
 8005eda:	2300      	movs	r3, #0
 8005edc:	6063      	str	r3, [r4, #4]
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	f043 0308 	orr.w	r3, r3, #8
 8005ee8:	81a3      	strh	r3, [r4, #12]
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	b94b      	cbnz	r3, 8005f02 <__swsetup_r+0x9a>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d003      	beq.n	8005f02 <__swsetup_r+0x9a>
 8005efa:	4621      	mov	r1, r4
 8005efc:	4630      	mov	r0, r6
 8005efe:	f000 f9bf 	bl	8006280 <__smakebuf_r>
 8005f02:	89a2      	ldrh	r2, [r4, #12]
 8005f04:	f012 0301 	ands.w	r3, r2, #1
 8005f08:	d00c      	beq.n	8005f24 <__swsetup_r+0xbc>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60a3      	str	r3, [r4, #8]
 8005f0e:	6963      	ldr	r3, [r4, #20]
 8005f10:	425b      	negs	r3, r3
 8005f12:	61a3      	str	r3, [r4, #24]
 8005f14:	6923      	ldr	r3, [r4, #16]
 8005f16:	b953      	cbnz	r3, 8005f2e <__swsetup_r+0xc6>
 8005f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f1c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005f20:	d1ba      	bne.n	8005e98 <__swsetup_r+0x30>
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	0792      	lsls	r2, r2, #30
 8005f26:	bf58      	it	pl
 8005f28:	6963      	ldrpl	r3, [r4, #20]
 8005f2a:	60a3      	str	r3, [r4, #8]
 8005f2c:	e7f2      	b.n	8005f14 <__swsetup_r+0xac>
 8005f2e:	2000      	movs	r0, #0
 8005f30:	e7f7      	b.n	8005f22 <__swsetup_r+0xba>
 8005f32:	bf00      	nop
 8005f34:	2000000c 	.word	0x2000000c
 8005f38:	08006e0c 	.word	0x08006e0c
 8005f3c:	08006e2c 	.word	0x08006e2c
 8005f40:	08006dec 	.word	0x08006dec

08005f44 <__sflush_r>:
 8005f44:	898a      	ldrh	r2, [r1, #12]
 8005f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	0710      	lsls	r0, r2, #28
 8005f4e:	460c      	mov	r4, r1
 8005f50:	d458      	bmi.n	8006004 <__sflush_r+0xc0>
 8005f52:	684b      	ldr	r3, [r1, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	dc05      	bgt.n	8005f64 <__sflush_r+0x20>
 8005f58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dc02      	bgt.n	8005f64 <__sflush_r+0x20>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f66:	2e00      	cmp	r6, #0
 8005f68:	d0f9      	beq.n	8005f5e <__sflush_r+0x1a>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f70:	682f      	ldr	r7, [r5, #0]
 8005f72:	6a21      	ldr	r1, [r4, #32]
 8005f74:	602b      	str	r3, [r5, #0]
 8005f76:	d032      	beq.n	8005fde <__sflush_r+0x9a>
 8005f78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	075a      	lsls	r2, r3, #29
 8005f7e:	d505      	bpl.n	8005f8c <__sflush_r+0x48>
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	1ac0      	subs	r0, r0, r3
 8005f84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f86:	b10b      	cbz	r3, 8005f8c <__sflush_r+0x48>
 8005f88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f8a:	1ac0      	subs	r0, r0, r3
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f92:	6a21      	ldr	r1, [r4, #32]
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b0      	blx	r6
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	d106      	bne.n	8005fac <__sflush_r+0x68>
 8005f9e:	6829      	ldr	r1, [r5, #0]
 8005fa0:	291d      	cmp	r1, #29
 8005fa2:	d848      	bhi.n	8006036 <__sflush_r+0xf2>
 8005fa4:	4a29      	ldr	r2, [pc, #164]	; (800604c <__sflush_r+0x108>)
 8005fa6:	40ca      	lsrs	r2, r1
 8005fa8:	07d6      	lsls	r6, r2, #31
 8005faa:	d544      	bpl.n	8006036 <__sflush_r+0xf2>
 8005fac:	2200      	movs	r2, #0
 8005fae:	6062      	str	r2, [r4, #4]
 8005fb0:	04d9      	lsls	r1, r3, #19
 8005fb2:	6922      	ldr	r2, [r4, #16]
 8005fb4:	6022      	str	r2, [r4, #0]
 8005fb6:	d504      	bpl.n	8005fc2 <__sflush_r+0x7e>
 8005fb8:	1c42      	adds	r2, r0, #1
 8005fba:	d101      	bne.n	8005fc0 <__sflush_r+0x7c>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b903      	cbnz	r3, 8005fc2 <__sflush_r+0x7e>
 8005fc0:	6560      	str	r0, [r4, #84]	; 0x54
 8005fc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fc4:	602f      	str	r7, [r5, #0]
 8005fc6:	2900      	cmp	r1, #0
 8005fc8:	d0c9      	beq.n	8005f5e <__sflush_r+0x1a>
 8005fca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d002      	beq.n	8005fd8 <__sflush_r+0x94>
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 f994 	bl	8006300 <_free_r>
 8005fd8:	2000      	movs	r0, #0
 8005fda:	6360      	str	r0, [r4, #52]	; 0x34
 8005fdc:	e7c0      	b.n	8005f60 <__sflush_r+0x1c>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b0      	blx	r6
 8005fe4:	1c41      	adds	r1, r0, #1
 8005fe6:	d1c8      	bne.n	8005f7a <__sflush_r+0x36>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0c5      	beq.n	8005f7a <__sflush_r+0x36>
 8005fee:	2b1d      	cmp	r3, #29
 8005ff0:	d001      	beq.n	8005ff6 <__sflush_r+0xb2>
 8005ff2:	2b16      	cmp	r3, #22
 8005ff4:	d101      	bne.n	8005ffa <__sflush_r+0xb6>
 8005ff6:	602f      	str	r7, [r5, #0]
 8005ff8:	e7b1      	b.n	8005f5e <__sflush_r+0x1a>
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	e7ad      	b.n	8005f60 <__sflush_r+0x1c>
 8006004:	690f      	ldr	r7, [r1, #16]
 8006006:	2f00      	cmp	r7, #0
 8006008:	d0a9      	beq.n	8005f5e <__sflush_r+0x1a>
 800600a:	0793      	lsls	r3, r2, #30
 800600c:	680e      	ldr	r6, [r1, #0]
 800600e:	bf08      	it	eq
 8006010:	694b      	ldreq	r3, [r1, #20]
 8006012:	600f      	str	r7, [r1, #0]
 8006014:	bf18      	it	ne
 8006016:	2300      	movne	r3, #0
 8006018:	eba6 0807 	sub.w	r8, r6, r7
 800601c:	608b      	str	r3, [r1, #8]
 800601e:	f1b8 0f00 	cmp.w	r8, #0
 8006022:	dd9c      	ble.n	8005f5e <__sflush_r+0x1a>
 8006024:	4643      	mov	r3, r8
 8006026:	463a      	mov	r2, r7
 8006028:	6a21      	ldr	r1, [r4, #32]
 800602a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800602c:	4628      	mov	r0, r5
 800602e:	47b0      	blx	r6
 8006030:	2800      	cmp	r0, #0
 8006032:	dc06      	bgt.n	8006042 <__sflush_r+0xfe>
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800603a:	81a3      	strh	r3, [r4, #12]
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	e78e      	b.n	8005f60 <__sflush_r+0x1c>
 8006042:	4407      	add	r7, r0
 8006044:	eba8 0800 	sub.w	r8, r8, r0
 8006048:	e7e9      	b.n	800601e <__sflush_r+0xda>
 800604a:	bf00      	nop
 800604c:	20400001 	.word	0x20400001

08006050 <_fflush_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	690b      	ldr	r3, [r1, #16]
 8006054:	4605      	mov	r5, r0
 8006056:	460c      	mov	r4, r1
 8006058:	b1db      	cbz	r3, 8006092 <_fflush_r+0x42>
 800605a:	b118      	cbz	r0, 8006064 <_fflush_r+0x14>
 800605c:	6983      	ldr	r3, [r0, #24]
 800605e:	b90b      	cbnz	r3, 8006064 <_fflush_r+0x14>
 8006060:	f000 f860 	bl	8006124 <__sinit>
 8006064:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <_fflush_r+0x48>)
 8006066:	429c      	cmp	r4, r3
 8006068:	d109      	bne.n	800607e <_fflush_r+0x2e>
 800606a:	686c      	ldr	r4, [r5, #4]
 800606c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006070:	b17b      	cbz	r3, 8006092 <_fflush_r+0x42>
 8006072:	4621      	mov	r1, r4
 8006074:	4628      	mov	r0, r5
 8006076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800607a:	f7ff bf63 	b.w	8005f44 <__sflush_r>
 800607e:	4b07      	ldr	r3, [pc, #28]	; (800609c <_fflush_r+0x4c>)
 8006080:	429c      	cmp	r4, r3
 8006082:	d101      	bne.n	8006088 <_fflush_r+0x38>
 8006084:	68ac      	ldr	r4, [r5, #8]
 8006086:	e7f1      	b.n	800606c <_fflush_r+0x1c>
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <_fflush_r+0x50>)
 800608a:	429c      	cmp	r4, r3
 800608c:	bf08      	it	eq
 800608e:	68ec      	ldreq	r4, [r5, #12]
 8006090:	e7ec      	b.n	800606c <_fflush_r+0x1c>
 8006092:	2000      	movs	r0, #0
 8006094:	bd38      	pop	{r3, r4, r5, pc}
 8006096:	bf00      	nop
 8006098:	08006e0c 	.word	0x08006e0c
 800609c:	08006e2c 	.word	0x08006e2c
 80060a0:	08006dec 	.word	0x08006dec

080060a4 <std>:
 80060a4:	2300      	movs	r3, #0
 80060a6:	b510      	push	{r4, lr}
 80060a8:	4604      	mov	r4, r0
 80060aa:	e9c0 3300 	strd	r3, r3, [r0]
 80060ae:	6083      	str	r3, [r0, #8]
 80060b0:	8181      	strh	r1, [r0, #12]
 80060b2:	6643      	str	r3, [r0, #100]	; 0x64
 80060b4:	81c2      	strh	r2, [r0, #14]
 80060b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ba:	6183      	str	r3, [r0, #24]
 80060bc:	4619      	mov	r1, r3
 80060be:	2208      	movs	r2, #8
 80060c0:	305c      	adds	r0, #92	; 0x5c
 80060c2:	f7ff fde7 	bl	8005c94 <memset>
 80060c6:	4b05      	ldr	r3, [pc, #20]	; (80060dc <std+0x38>)
 80060c8:	6263      	str	r3, [r4, #36]	; 0x24
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <std+0x3c>)
 80060cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <std+0x40>)
 80060d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <std+0x44>)
 80060d4:	6224      	str	r4, [r4, #32]
 80060d6:	6323      	str	r3, [r4, #48]	; 0x30
 80060d8:	bd10      	pop	{r4, pc}
 80060da:	bf00      	nop
 80060dc:	08006a6d 	.word	0x08006a6d
 80060e0:	08006a8f 	.word	0x08006a8f
 80060e4:	08006ac7 	.word	0x08006ac7
 80060e8:	08006aeb 	.word	0x08006aeb

080060ec <_cleanup_r>:
 80060ec:	4901      	ldr	r1, [pc, #4]	; (80060f4 <_cleanup_r+0x8>)
 80060ee:	f000 b885 	b.w	80061fc <_fwalk_reent>
 80060f2:	bf00      	nop
 80060f4:	08006051 	.word	0x08006051

080060f8 <__sfmoreglue>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	1e4a      	subs	r2, r1, #1
 80060fc:	2568      	movs	r5, #104	; 0x68
 80060fe:	4355      	muls	r5, r2
 8006100:	460e      	mov	r6, r1
 8006102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006106:	f000 f949 	bl	800639c <_malloc_r>
 800610a:	4604      	mov	r4, r0
 800610c:	b140      	cbz	r0, 8006120 <__sfmoreglue+0x28>
 800610e:	2100      	movs	r1, #0
 8006110:	e9c0 1600 	strd	r1, r6, [r0]
 8006114:	300c      	adds	r0, #12
 8006116:	60a0      	str	r0, [r4, #8]
 8006118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800611c:	f7ff fdba 	bl	8005c94 <memset>
 8006120:	4620      	mov	r0, r4
 8006122:	bd70      	pop	{r4, r5, r6, pc}

08006124 <__sinit>:
 8006124:	6983      	ldr	r3, [r0, #24]
 8006126:	b510      	push	{r4, lr}
 8006128:	4604      	mov	r4, r0
 800612a:	bb33      	cbnz	r3, 800617a <__sinit+0x56>
 800612c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006130:	6503      	str	r3, [r0, #80]	; 0x50
 8006132:	4b12      	ldr	r3, [pc, #72]	; (800617c <__sinit+0x58>)
 8006134:	4a12      	ldr	r2, [pc, #72]	; (8006180 <__sinit+0x5c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6282      	str	r2, [r0, #40]	; 0x28
 800613a:	4298      	cmp	r0, r3
 800613c:	bf04      	itt	eq
 800613e:	2301      	moveq	r3, #1
 8006140:	6183      	streq	r3, [r0, #24]
 8006142:	f000 f81f 	bl	8006184 <__sfp>
 8006146:	6060      	str	r0, [r4, #4]
 8006148:	4620      	mov	r0, r4
 800614a:	f000 f81b 	bl	8006184 <__sfp>
 800614e:	60a0      	str	r0, [r4, #8]
 8006150:	4620      	mov	r0, r4
 8006152:	f000 f817 	bl	8006184 <__sfp>
 8006156:	2200      	movs	r2, #0
 8006158:	60e0      	str	r0, [r4, #12]
 800615a:	2104      	movs	r1, #4
 800615c:	6860      	ldr	r0, [r4, #4]
 800615e:	f7ff ffa1 	bl	80060a4 <std>
 8006162:	2201      	movs	r2, #1
 8006164:	2109      	movs	r1, #9
 8006166:	68a0      	ldr	r0, [r4, #8]
 8006168:	f7ff ff9c 	bl	80060a4 <std>
 800616c:	2202      	movs	r2, #2
 800616e:	2112      	movs	r1, #18
 8006170:	68e0      	ldr	r0, [r4, #12]
 8006172:	f7ff ff97 	bl	80060a4 <std>
 8006176:	2301      	movs	r3, #1
 8006178:	61a3      	str	r3, [r4, #24]
 800617a:	bd10      	pop	{r4, pc}
 800617c:	08006de8 	.word	0x08006de8
 8006180:	080060ed 	.word	0x080060ed

08006184 <__sfp>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	4b1b      	ldr	r3, [pc, #108]	; (80061f4 <__sfp+0x70>)
 8006188:	681e      	ldr	r6, [r3, #0]
 800618a:	69b3      	ldr	r3, [r6, #24]
 800618c:	4607      	mov	r7, r0
 800618e:	b913      	cbnz	r3, 8006196 <__sfp+0x12>
 8006190:	4630      	mov	r0, r6
 8006192:	f7ff ffc7 	bl	8006124 <__sinit>
 8006196:	3648      	adds	r6, #72	; 0x48
 8006198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800619c:	3b01      	subs	r3, #1
 800619e:	d503      	bpl.n	80061a8 <__sfp+0x24>
 80061a0:	6833      	ldr	r3, [r6, #0]
 80061a2:	b133      	cbz	r3, 80061b2 <__sfp+0x2e>
 80061a4:	6836      	ldr	r6, [r6, #0]
 80061a6:	e7f7      	b.n	8006198 <__sfp+0x14>
 80061a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061ac:	b16d      	cbz	r5, 80061ca <__sfp+0x46>
 80061ae:	3468      	adds	r4, #104	; 0x68
 80061b0:	e7f4      	b.n	800619c <__sfp+0x18>
 80061b2:	2104      	movs	r1, #4
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff ff9f 	bl	80060f8 <__sfmoreglue>
 80061ba:	6030      	str	r0, [r6, #0]
 80061bc:	2800      	cmp	r0, #0
 80061be:	d1f1      	bne.n	80061a4 <__sfp+0x20>
 80061c0:	230c      	movs	r3, #12
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4604      	mov	r4, r0
 80061c6:	4620      	mov	r0, r4
 80061c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ca:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <__sfp+0x74>)
 80061cc:	6665      	str	r5, [r4, #100]	; 0x64
 80061ce:	e9c4 5500 	strd	r5, r5, [r4]
 80061d2:	60a5      	str	r5, [r4, #8]
 80061d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80061d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80061dc:	2208      	movs	r2, #8
 80061de:	4629      	mov	r1, r5
 80061e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061e4:	f7ff fd56 	bl	8005c94 <memset>
 80061e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061f0:	e7e9      	b.n	80061c6 <__sfp+0x42>
 80061f2:	bf00      	nop
 80061f4:	08006de8 	.word	0x08006de8
 80061f8:	ffff0001 	.word	0xffff0001

080061fc <_fwalk_reent>:
 80061fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006200:	4680      	mov	r8, r0
 8006202:	4689      	mov	r9, r1
 8006204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006208:	2600      	movs	r6, #0
 800620a:	b914      	cbnz	r4, 8006212 <_fwalk_reent+0x16>
 800620c:	4630      	mov	r0, r6
 800620e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006212:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006216:	3f01      	subs	r7, #1
 8006218:	d501      	bpl.n	800621e <_fwalk_reent+0x22>
 800621a:	6824      	ldr	r4, [r4, #0]
 800621c:	e7f5      	b.n	800620a <_fwalk_reent+0xe>
 800621e:	89ab      	ldrh	r3, [r5, #12]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d907      	bls.n	8006234 <_fwalk_reent+0x38>
 8006224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006228:	3301      	adds	r3, #1
 800622a:	d003      	beq.n	8006234 <_fwalk_reent+0x38>
 800622c:	4629      	mov	r1, r5
 800622e:	4640      	mov	r0, r8
 8006230:	47c8      	blx	r9
 8006232:	4306      	orrs	r6, r0
 8006234:	3568      	adds	r5, #104	; 0x68
 8006236:	e7ee      	b.n	8006216 <_fwalk_reent+0x1a>

08006238 <__swhatbuf_r>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	460e      	mov	r6, r1
 800623c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006240:	2900      	cmp	r1, #0
 8006242:	b096      	sub	sp, #88	; 0x58
 8006244:	4614      	mov	r4, r2
 8006246:	461d      	mov	r5, r3
 8006248:	da07      	bge.n	800625a <__swhatbuf_r+0x22>
 800624a:	2300      	movs	r3, #0
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	89b3      	ldrh	r3, [r6, #12]
 8006250:	061a      	lsls	r2, r3, #24
 8006252:	d410      	bmi.n	8006276 <__swhatbuf_r+0x3e>
 8006254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006258:	e00e      	b.n	8006278 <__swhatbuf_r+0x40>
 800625a:	466a      	mov	r2, sp
 800625c:	f000 fc6c 	bl	8006b38 <_fstat_r>
 8006260:	2800      	cmp	r0, #0
 8006262:	dbf2      	blt.n	800624a <__swhatbuf_r+0x12>
 8006264:	9a01      	ldr	r2, [sp, #4]
 8006266:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800626a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800626e:	425a      	negs	r2, r3
 8006270:	415a      	adcs	r2, r3
 8006272:	602a      	str	r2, [r5, #0]
 8006274:	e7ee      	b.n	8006254 <__swhatbuf_r+0x1c>
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	2000      	movs	r0, #0
 800627a:	6023      	str	r3, [r4, #0]
 800627c:	b016      	add	sp, #88	; 0x58
 800627e:	bd70      	pop	{r4, r5, r6, pc}

08006280 <__smakebuf_r>:
 8006280:	898b      	ldrh	r3, [r1, #12]
 8006282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006284:	079d      	lsls	r5, r3, #30
 8006286:	4606      	mov	r6, r0
 8006288:	460c      	mov	r4, r1
 800628a:	d507      	bpl.n	800629c <__smakebuf_r+0x1c>
 800628c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	2301      	movs	r3, #1
 8006296:	6163      	str	r3, [r4, #20]
 8006298:	b002      	add	sp, #8
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	ab01      	add	r3, sp, #4
 800629e:	466a      	mov	r2, sp
 80062a0:	f7ff ffca 	bl	8006238 <__swhatbuf_r>
 80062a4:	9900      	ldr	r1, [sp, #0]
 80062a6:	4605      	mov	r5, r0
 80062a8:	4630      	mov	r0, r6
 80062aa:	f000 f877 	bl	800639c <_malloc_r>
 80062ae:	b948      	cbnz	r0, 80062c4 <__smakebuf_r+0x44>
 80062b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b4:	059a      	lsls	r2, r3, #22
 80062b6:	d4ef      	bmi.n	8006298 <__smakebuf_r+0x18>
 80062b8:	f023 0303 	bic.w	r3, r3, #3
 80062bc:	f043 0302 	orr.w	r3, r3, #2
 80062c0:	81a3      	strh	r3, [r4, #12]
 80062c2:	e7e3      	b.n	800628c <__smakebuf_r+0xc>
 80062c4:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <__smakebuf_r+0x7c>)
 80062c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	6020      	str	r0, [r4, #0]
 80062cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d0:	81a3      	strh	r3, [r4, #12]
 80062d2:	9b00      	ldr	r3, [sp, #0]
 80062d4:	6163      	str	r3, [r4, #20]
 80062d6:	9b01      	ldr	r3, [sp, #4]
 80062d8:	6120      	str	r0, [r4, #16]
 80062da:	b15b      	cbz	r3, 80062f4 <__smakebuf_r+0x74>
 80062dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062e0:	4630      	mov	r0, r6
 80062e2:	f000 fc3b 	bl	8006b5c <_isatty_r>
 80062e6:	b128      	cbz	r0, 80062f4 <__smakebuf_r+0x74>
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	f023 0303 	bic.w	r3, r3, #3
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	81a3      	strh	r3, [r4, #12]
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	431d      	orrs	r5, r3
 80062f8:	81a5      	strh	r5, [r4, #12]
 80062fa:	e7cd      	b.n	8006298 <__smakebuf_r+0x18>
 80062fc:	080060ed 	.word	0x080060ed

08006300 <_free_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	4605      	mov	r5, r0
 8006304:	2900      	cmp	r1, #0
 8006306:	d045      	beq.n	8006394 <_free_r+0x94>
 8006308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800630c:	1f0c      	subs	r4, r1, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	bfb8      	it	lt
 8006312:	18e4      	addlt	r4, r4, r3
 8006314:	f000 fc44 	bl	8006ba0 <__malloc_lock>
 8006318:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <_free_r+0x98>)
 800631a:	6813      	ldr	r3, [r2, #0]
 800631c:	4610      	mov	r0, r2
 800631e:	b933      	cbnz	r3, 800632e <_free_r+0x2e>
 8006320:	6063      	str	r3, [r4, #4]
 8006322:	6014      	str	r4, [r2, #0]
 8006324:	4628      	mov	r0, r5
 8006326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800632a:	f000 bc3a 	b.w	8006ba2 <__malloc_unlock>
 800632e:	42a3      	cmp	r3, r4
 8006330:	d90c      	bls.n	800634c <_free_r+0x4c>
 8006332:	6821      	ldr	r1, [r4, #0]
 8006334:	1862      	adds	r2, r4, r1
 8006336:	4293      	cmp	r3, r2
 8006338:	bf04      	itt	eq
 800633a:	681a      	ldreq	r2, [r3, #0]
 800633c:	685b      	ldreq	r3, [r3, #4]
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	bf04      	itt	eq
 8006342:	1852      	addeq	r2, r2, r1
 8006344:	6022      	streq	r2, [r4, #0]
 8006346:	6004      	str	r4, [r0, #0]
 8006348:	e7ec      	b.n	8006324 <_free_r+0x24>
 800634a:	4613      	mov	r3, r2
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	b10a      	cbz	r2, 8006354 <_free_r+0x54>
 8006350:	42a2      	cmp	r2, r4
 8006352:	d9fa      	bls.n	800634a <_free_r+0x4a>
 8006354:	6819      	ldr	r1, [r3, #0]
 8006356:	1858      	adds	r0, r3, r1
 8006358:	42a0      	cmp	r0, r4
 800635a:	d10b      	bne.n	8006374 <_free_r+0x74>
 800635c:	6820      	ldr	r0, [r4, #0]
 800635e:	4401      	add	r1, r0
 8006360:	1858      	adds	r0, r3, r1
 8006362:	4282      	cmp	r2, r0
 8006364:	6019      	str	r1, [r3, #0]
 8006366:	d1dd      	bne.n	8006324 <_free_r+0x24>
 8006368:	6810      	ldr	r0, [r2, #0]
 800636a:	6852      	ldr	r2, [r2, #4]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	4401      	add	r1, r0
 8006370:	6019      	str	r1, [r3, #0]
 8006372:	e7d7      	b.n	8006324 <_free_r+0x24>
 8006374:	d902      	bls.n	800637c <_free_r+0x7c>
 8006376:	230c      	movs	r3, #12
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	e7d3      	b.n	8006324 <_free_r+0x24>
 800637c:	6820      	ldr	r0, [r4, #0]
 800637e:	1821      	adds	r1, r4, r0
 8006380:	428a      	cmp	r2, r1
 8006382:	bf04      	itt	eq
 8006384:	6811      	ldreq	r1, [r2, #0]
 8006386:	6852      	ldreq	r2, [r2, #4]
 8006388:	6062      	str	r2, [r4, #4]
 800638a:	bf04      	itt	eq
 800638c:	1809      	addeq	r1, r1, r0
 800638e:	6021      	streq	r1, [r4, #0]
 8006390:	605c      	str	r4, [r3, #4]
 8006392:	e7c7      	b.n	8006324 <_free_r+0x24>
 8006394:	bd38      	pop	{r3, r4, r5, pc}
 8006396:	bf00      	nop
 8006398:	20000090 	.word	0x20000090

0800639c <_malloc_r>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	1ccd      	adds	r5, r1, #3
 80063a0:	f025 0503 	bic.w	r5, r5, #3
 80063a4:	3508      	adds	r5, #8
 80063a6:	2d0c      	cmp	r5, #12
 80063a8:	bf38      	it	cc
 80063aa:	250c      	movcc	r5, #12
 80063ac:	2d00      	cmp	r5, #0
 80063ae:	4606      	mov	r6, r0
 80063b0:	db01      	blt.n	80063b6 <_malloc_r+0x1a>
 80063b2:	42a9      	cmp	r1, r5
 80063b4:	d903      	bls.n	80063be <_malloc_r+0x22>
 80063b6:	230c      	movs	r3, #12
 80063b8:	6033      	str	r3, [r6, #0]
 80063ba:	2000      	movs	r0, #0
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	f000 fbef 	bl	8006ba0 <__malloc_lock>
 80063c2:	4a21      	ldr	r2, [pc, #132]	; (8006448 <_malloc_r+0xac>)
 80063c4:	6814      	ldr	r4, [r2, #0]
 80063c6:	4621      	mov	r1, r4
 80063c8:	b991      	cbnz	r1, 80063f0 <_malloc_r+0x54>
 80063ca:	4c20      	ldr	r4, [pc, #128]	; (800644c <_malloc_r+0xb0>)
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	b91b      	cbnz	r3, 80063d8 <_malloc_r+0x3c>
 80063d0:	4630      	mov	r0, r6
 80063d2:	f000 fb3b 	bl	8006a4c <_sbrk_r>
 80063d6:	6020      	str	r0, [r4, #0]
 80063d8:	4629      	mov	r1, r5
 80063da:	4630      	mov	r0, r6
 80063dc:	f000 fb36 	bl	8006a4c <_sbrk_r>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d124      	bne.n	800642e <_malloc_r+0x92>
 80063e4:	230c      	movs	r3, #12
 80063e6:	6033      	str	r3, [r6, #0]
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 fbda 	bl	8006ba2 <__malloc_unlock>
 80063ee:	e7e4      	b.n	80063ba <_malloc_r+0x1e>
 80063f0:	680b      	ldr	r3, [r1, #0]
 80063f2:	1b5b      	subs	r3, r3, r5
 80063f4:	d418      	bmi.n	8006428 <_malloc_r+0x8c>
 80063f6:	2b0b      	cmp	r3, #11
 80063f8:	d90f      	bls.n	800641a <_malloc_r+0x7e>
 80063fa:	600b      	str	r3, [r1, #0]
 80063fc:	50cd      	str	r5, [r1, r3]
 80063fe:	18cc      	adds	r4, r1, r3
 8006400:	4630      	mov	r0, r6
 8006402:	f000 fbce 	bl	8006ba2 <__malloc_unlock>
 8006406:	f104 000b 	add.w	r0, r4, #11
 800640a:	1d23      	adds	r3, r4, #4
 800640c:	f020 0007 	bic.w	r0, r0, #7
 8006410:	1ac3      	subs	r3, r0, r3
 8006412:	d0d3      	beq.n	80063bc <_malloc_r+0x20>
 8006414:	425a      	negs	r2, r3
 8006416:	50e2      	str	r2, [r4, r3]
 8006418:	e7d0      	b.n	80063bc <_malloc_r+0x20>
 800641a:	428c      	cmp	r4, r1
 800641c:	684b      	ldr	r3, [r1, #4]
 800641e:	bf16      	itet	ne
 8006420:	6063      	strne	r3, [r4, #4]
 8006422:	6013      	streq	r3, [r2, #0]
 8006424:	460c      	movne	r4, r1
 8006426:	e7eb      	b.n	8006400 <_malloc_r+0x64>
 8006428:	460c      	mov	r4, r1
 800642a:	6849      	ldr	r1, [r1, #4]
 800642c:	e7cc      	b.n	80063c8 <_malloc_r+0x2c>
 800642e:	1cc4      	adds	r4, r0, #3
 8006430:	f024 0403 	bic.w	r4, r4, #3
 8006434:	42a0      	cmp	r0, r4
 8006436:	d005      	beq.n	8006444 <_malloc_r+0xa8>
 8006438:	1a21      	subs	r1, r4, r0
 800643a:	4630      	mov	r0, r6
 800643c:	f000 fb06 	bl	8006a4c <_sbrk_r>
 8006440:	3001      	adds	r0, #1
 8006442:	d0cf      	beq.n	80063e4 <_malloc_r+0x48>
 8006444:	6025      	str	r5, [r4, #0]
 8006446:	e7db      	b.n	8006400 <_malloc_r+0x64>
 8006448:	20000090 	.word	0x20000090
 800644c:	20000094 	.word	0x20000094

08006450 <__sfputc_r>:
 8006450:	6893      	ldr	r3, [r2, #8]
 8006452:	3b01      	subs	r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	b410      	push	{r4}
 8006458:	6093      	str	r3, [r2, #8]
 800645a:	da08      	bge.n	800646e <__sfputc_r+0x1e>
 800645c:	6994      	ldr	r4, [r2, #24]
 800645e:	42a3      	cmp	r3, r4
 8006460:	db01      	blt.n	8006466 <__sfputc_r+0x16>
 8006462:	290a      	cmp	r1, #10
 8006464:	d103      	bne.n	800646e <__sfputc_r+0x1e>
 8006466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800646a:	f7ff bcab 	b.w	8005dc4 <__swbuf_r>
 800646e:	6813      	ldr	r3, [r2, #0]
 8006470:	1c58      	adds	r0, r3, #1
 8006472:	6010      	str	r0, [r2, #0]
 8006474:	7019      	strb	r1, [r3, #0]
 8006476:	4608      	mov	r0, r1
 8006478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800647c:	4770      	bx	lr

0800647e <__sfputs_r>:
 800647e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006480:	4606      	mov	r6, r0
 8006482:	460f      	mov	r7, r1
 8006484:	4614      	mov	r4, r2
 8006486:	18d5      	adds	r5, r2, r3
 8006488:	42ac      	cmp	r4, r5
 800648a:	d101      	bne.n	8006490 <__sfputs_r+0x12>
 800648c:	2000      	movs	r0, #0
 800648e:	e007      	b.n	80064a0 <__sfputs_r+0x22>
 8006490:	463a      	mov	r2, r7
 8006492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006496:	4630      	mov	r0, r6
 8006498:	f7ff ffda 	bl	8006450 <__sfputc_r>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d1f3      	bne.n	8006488 <__sfputs_r+0xa>
 80064a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064a4 <_vfiprintf_r>:
 80064a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	460c      	mov	r4, r1
 80064aa:	b09d      	sub	sp, #116	; 0x74
 80064ac:	4617      	mov	r7, r2
 80064ae:	461d      	mov	r5, r3
 80064b0:	4606      	mov	r6, r0
 80064b2:	b118      	cbz	r0, 80064bc <_vfiprintf_r+0x18>
 80064b4:	6983      	ldr	r3, [r0, #24]
 80064b6:	b90b      	cbnz	r3, 80064bc <_vfiprintf_r+0x18>
 80064b8:	f7ff fe34 	bl	8006124 <__sinit>
 80064bc:	4b7c      	ldr	r3, [pc, #496]	; (80066b0 <_vfiprintf_r+0x20c>)
 80064be:	429c      	cmp	r4, r3
 80064c0:	d158      	bne.n	8006574 <_vfiprintf_r+0xd0>
 80064c2:	6874      	ldr	r4, [r6, #4]
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	0718      	lsls	r0, r3, #28
 80064c8:	d55e      	bpl.n	8006588 <_vfiprintf_r+0xe4>
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d05b      	beq.n	8006588 <_vfiprintf_r+0xe4>
 80064d0:	2300      	movs	r3, #0
 80064d2:	9309      	str	r3, [sp, #36]	; 0x24
 80064d4:	2320      	movs	r3, #32
 80064d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064da:	2330      	movs	r3, #48	; 0x30
 80064dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064e0:	9503      	str	r5, [sp, #12]
 80064e2:	f04f 0b01 	mov.w	fp, #1
 80064e6:	46b8      	mov	r8, r7
 80064e8:	4645      	mov	r5, r8
 80064ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064ee:	b10b      	cbz	r3, 80064f4 <_vfiprintf_r+0x50>
 80064f0:	2b25      	cmp	r3, #37	; 0x25
 80064f2:	d154      	bne.n	800659e <_vfiprintf_r+0xfa>
 80064f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80064f8:	d00b      	beq.n	8006512 <_vfiprintf_r+0x6e>
 80064fa:	4653      	mov	r3, sl
 80064fc:	463a      	mov	r2, r7
 80064fe:	4621      	mov	r1, r4
 8006500:	4630      	mov	r0, r6
 8006502:	f7ff ffbc 	bl	800647e <__sfputs_r>
 8006506:	3001      	adds	r0, #1
 8006508:	f000 80c2 	beq.w	8006690 <_vfiprintf_r+0x1ec>
 800650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650e:	4453      	add	r3, sl
 8006510:	9309      	str	r3, [sp, #36]	; 0x24
 8006512:	f898 3000 	ldrb.w	r3, [r8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 80ba 	beq.w	8006690 <_vfiprintf_r+0x1ec>
 800651c:	2300      	movs	r3, #0
 800651e:	f04f 32ff 	mov.w	r2, #4294967295
 8006522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	9307      	str	r3, [sp, #28]
 800652a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800652e:	931a      	str	r3, [sp, #104]	; 0x68
 8006530:	46a8      	mov	r8, r5
 8006532:	2205      	movs	r2, #5
 8006534:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006538:	485e      	ldr	r0, [pc, #376]	; (80066b4 <_vfiprintf_r+0x210>)
 800653a:	f7f9 fe49 	bl	80001d0 <memchr>
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	bb78      	cbnz	r0, 80065a2 <_vfiprintf_r+0xfe>
 8006542:	06d9      	lsls	r1, r3, #27
 8006544:	bf44      	itt	mi
 8006546:	2220      	movmi	r2, #32
 8006548:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800654c:	071a      	lsls	r2, r3, #28
 800654e:	bf44      	itt	mi
 8006550:	222b      	movmi	r2, #43	; 0x2b
 8006552:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006556:	782a      	ldrb	r2, [r5, #0]
 8006558:	2a2a      	cmp	r2, #42	; 0x2a
 800655a:	d02a      	beq.n	80065b2 <_vfiprintf_r+0x10e>
 800655c:	9a07      	ldr	r2, [sp, #28]
 800655e:	46a8      	mov	r8, r5
 8006560:	2000      	movs	r0, #0
 8006562:	250a      	movs	r5, #10
 8006564:	4641      	mov	r1, r8
 8006566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800656a:	3b30      	subs	r3, #48	; 0x30
 800656c:	2b09      	cmp	r3, #9
 800656e:	d969      	bls.n	8006644 <_vfiprintf_r+0x1a0>
 8006570:	b360      	cbz	r0, 80065cc <_vfiprintf_r+0x128>
 8006572:	e024      	b.n	80065be <_vfiprintf_r+0x11a>
 8006574:	4b50      	ldr	r3, [pc, #320]	; (80066b8 <_vfiprintf_r+0x214>)
 8006576:	429c      	cmp	r4, r3
 8006578:	d101      	bne.n	800657e <_vfiprintf_r+0xda>
 800657a:	68b4      	ldr	r4, [r6, #8]
 800657c:	e7a2      	b.n	80064c4 <_vfiprintf_r+0x20>
 800657e:	4b4f      	ldr	r3, [pc, #316]	; (80066bc <_vfiprintf_r+0x218>)
 8006580:	429c      	cmp	r4, r3
 8006582:	bf08      	it	eq
 8006584:	68f4      	ldreq	r4, [r6, #12]
 8006586:	e79d      	b.n	80064c4 <_vfiprintf_r+0x20>
 8006588:	4621      	mov	r1, r4
 800658a:	4630      	mov	r0, r6
 800658c:	f7ff fc6c 	bl	8005e68 <__swsetup_r>
 8006590:	2800      	cmp	r0, #0
 8006592:	d09d      	beq.n	80064d0 <_vfiprintf_r+0x2c>
 8006594:	f04f 30ff 	mov.w	r0, #4294967295
 8006598:	b01d      	add	sp, #116	; 0x74
 800659a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659e:	46a8      	mov	r8, r5
 80065a0:	e7a2      	b.n	80064e8 <_vfiprintf_r+0x44>
 80065a2:	4a44      	ldr	r2, [pc, #272]	; (80066b4 <_vfiprintf_r+0x210>)
 80065a4:	1a80      	subs	r0, r0, r2
 80065a6:	fa0b f000 	lsl.w	r0, fp, r0
 80065aa:	4318      	orrs	r0, r3
 80065ac:	9004      	str	r0, [sp, #16]
 80065ae:	4645      	mov	r5, r8
 80065b0:	e7be      	b.n	8006530 <_vfiprintf_r+0x8c>
 80065b2:	9a03      	ldr	r2, [sp, #12]
 80065b4:	1d11      	adds	r1, r2, #4
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	9103      	str	r1, [sp, #12]
 80065ba:	2a00      	cmp	r2, #0
 80065bc:	db01      	blt.n	80065c2 <_vfiprintf_r+0x11e>
 80065be:	9207      	str	r2, [sp, #28]
 80065c0:	e004      	b.n	80065cc <_vfiprintf_r+0x128>
 80065c2:	4252      	negs	r2, r2
 80065c4:	f043 0302 	orr.w	r3, r3, #2
 80065c8:	9207      	str	r2, [sp, #28]
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	f898 3000 	ldrb.w	r3, [r8]
 80065d0:	2b2e      	cmp	r3, #46	; 0x2e
 80065d2:	d10e      	bne.n	80065f2 <_vfiprintf_r+0x14e>
 80065d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80065d8:	2b2a      	cmp	r3, #42	; 0x2a
 80065da:	d138      	bne.n	800664e <_vfiprintf_r+0x1aa>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	1d1a      	adds	r2, r3, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	9203      	str	r2, [sp, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bfb8      	it	lt
 80065e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80065ec:	f108 0802 	add.w	r8, r8, #2
 80065f0:	9305      	str	r3, [sp, #20]
 80065f2:	4d33      	ldr	r5, [pc, #204]	; (80066c0 <_vfiprintf_r+0x21c>)
 80065f4:	f898 1000 	ldrb.w	r1, [r8]
 80065f8:	2203      	movs	r2, #3
 80065fa:	4628      	mov	r0, r5
 80065fc:	f7f9 fde8 	bl	80001d0 <memchr>
 8006600:	b140      	cbz	r0, 8006614 <_vfiprintf_r+0x170>
 8006602:	2340      	movs	r3, #64	; 0x40
 8006604:	1b40      	subs	r0, r0, r5
 8006606:	fa03 f000 	lsl.w	r0, r3, r0
 800660a:	9b04      	ldr	r3, [sp, #16]
 800660c:	4303      	orrs	r3, r0
 800660e:	f108 0801 	add.w	r8, r8, #1
 8006612:	9304      	str	r3, [sp, #16]
 8006614:	f898 1000 	ldrb.w	r1, [r8]
 8006618:	482a      	ldr	r0, [pc, #168]	; (80066c4 <_vfiprintf_r+0x220>)
 800661a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800661e:	2206      	movs	r2, #6
 8006620:	f108 0701 	add.w	r7, r8, #1
 8006624:	f7f9 fdd4 	bl	80001d0 <memchr>
 8006628:	2800      	cmp	r0, #0
 800662a:	d037      	beq.n	800669c <_vfiprintf_r+0x1f8>
 800662c:	4b26      	ldr	r3, [pc, #152]	; (80066c8 <_vfiprintf_r+0x224>)
 800662e:	bb1b      	cbnz	r3, 8006678 <_vfiprintf_r+0x1d4>
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	3307      	adds	r3, #7
 8006634:	f023 0307 	bic.w	r3, r3, #7
 8006638:	3308      	adds	r3, #8
 800663a:	9303      	str	r3, [sp, #12]
 800663c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663e:	444b      	add	r3, r9
 8006640:	9309      	str	r3, [sp, #36]	; 0x24
 8006642:	e750      	b.n	80064e6 <_vfiprintf_r+0x42>
 8006644:	fb05 3202 	mla	r2, r5, r2, r3
 8006648:	2001      	movs	r0, #1
 800664a:	4688      	mov	r8, r1
 800664c:	e78a      	b.n	8006564 <_vfiprintf_r+0xc0>
 800664e:	2300      	movs	r3, #0
 8006650:	f108 0801 	add.w	r8, r8, #1
 8006654:	9305      	str	r3, [sp, #20]
 8006656:	4619      	mov	r1, r3
 8006658:	250a      	movs	r5, #10
 800665a:	4640      	mov	r0, r8
 800665c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006660:	3a30      	subs	r2, #48	; 0x30
 8006662:	2a09      	cmp	r2, #9
 8006664:	d903      	bls.n	800666e <_vfiprintf_r+0x1ca>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0c3      	beq.n	80065f2 <_vfiprintf_r+0x14e>
 800666a:	9105      	str	r1, [sp, #20]
 800666c:	e7c1      	b.n	80065f2 <_vfiprintf_r+0x14e>
 800666e:	fb05 2101 	mla	r1, r5, r1, r2
 8006672:	2301      	movs	r3, #1
 8006674:	4680      	mov	r8, r0
 8006676:	e7f0      	b.n	800665a <_vfiprintf_r+0x1b6>
 8006678:	ab03      	add	r3, sp, #12
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	4622      	mov	r2, r4
 800667e:	4b13      	ldr	r3, [pc, #76]	; (80066cc <_vfiprintf_r+0x228>)
 8006680:	a904      	add	r1, sp, #16
 8006682:	4630      	mov	r0, r6
 8006684:	f3af 8000 	nop.w
 8006688:	f1b0 3fff 	cmp.w	r0, #4294967295
 800668c:	4681      	mov	r9, r0
 800668e:	d1d5      	bne.n	800663c <_vfiprintf_r+0x198>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	065b      	lsls	r3, r3, #25
 8006694:	f53f af7e 	bmi.w	8006594 <_vfiprintf_r+0xf0>
 8006698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800669a:	e77d      	b.n	8006598 <_vfiprintf_r+0xf4>
 800669c:	ab03      	add	r3, sp, #12
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	4622      	mov	r2, r4
 80066a2:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <_vfiprintf_r+0x228>)
 80066a4:	a904      	add	r1, sp, #16
 80066a6:	4630      	mov	r0, r6
 80066a8:	f000 f888 	bl	80067bc <_printf_i>
 80066ac:	e7ec      	b.n	8006688 <_vfiprintf_r+0x1e4>
 80066ae:	bf00      	nop
 80066b0:	08006e0c 	.word	0x08006e0c
 80066b4:	08006e4c 	.word	0x08006e4c
 80066b8:	08006e2c 	.word	0x08006e2c
 80066bc:	08006dec 	.word	0x08006dec
 80066c0:	08006e52 	.word	0x08006e52
 80066c4:	08006e56 	.word	0x08006e56
 80066c8:	00000000 	.word	0x00000000
 80066cc:	0800647f 	.word	0x0800647f

080066d0 <_printf_common>:
 80066d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d4:	4691      	mov	r9, r2
 80066d6:	461f      	mov	r7, r3
 80066d8:	688a      	ldr	r2, [r1, #8]
 80066da:	690b      	ldr	r3, [r1, #16]
 80066dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066e0:	4293      	cmp	r3, r2
 80066e2:	bfb8      	it	lt
 80066e4:	4613      	movlt	r3, r2
 80066e6:	f8c9 3000 	str.w	r3, [r9]
 80066ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066ee:	4606      	mov	r6, r0
 80066f0:	460c      	mov	r4, r1
 80066f2:	b112      	cbz	r2, 80066fa <_printf_common+0x2a>
 80066f4:	3301      	adds	r3, #1
 80066f6:	f8c9 3000 	str.w	r3, [r9]
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	0699      	lsls	r1, r3, #26
 80066fe:	bf42      	ittt	mi
 8006700:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006704:	3302      	addmi	r3, #2
 8006706:	f8c9 3000 	strmi.w	r3, [r9]
 800670a:	6825      	ldr	r5, [r4, #0]
 800670c:	f015 0506 	ands.w	r5, r5, #6
 8006710:	d107      	bne.n	8006722 <_printf_common+0x52>
 8006712:	f104 0a19 	add.w	sl, r4, #25
 8006716:	68e3      	ldr	r3, [r4, #12]
 8006718:	f8d9 2000 	ldr.w	r2, [r9]
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	42ab      	cmp	r3, r5
 8006720:	dc28      	bgt.n	8006774 <_printf_common+0xa4>
 8006722:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	3300      	adds	r3, #0
 800672a:	bf18      	it	ne
 800672c:	2301      	movne	r3, #1
 800672e:	0692      	lsls	r2, r2, #26
 8006730:	d42d      	bmi.n	800678e <_printf_common+0xbe>
 8006732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006736:	4639      	mov	r1, r7
 8006738:	4630      	mov	r0, r6
 800673a:	47c0      	blx	r8
 800673c:	3001      	adds	r0, #1
 800673e:	d020      	beq.n	8006782 <_printf_common+0xb2>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	68e5      	ldr	r5, [r4, #12]
 8006744:	f8d9 2000 	ldr.w	r2, [r9]
 8006748:	f003 0306 	and.w	r3, r3, #6
 800674c:	2b04      	cmp	r3, #4
 800674e:	bf08      	it	eq
 8006750:	1aad      	subeq	r5, r5, r2
 8006752:	68a3      	ldr	r3, [r4, #8]
 8006754:	6922      	ldr	r2, [r4, #16]
 8006756:	bf0c      	ite	eq
 8006758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800675c:	2500      	movne	r5, #0
 800675e:	4293      	cmp	r3, r2
 8006760:	bfc4      	itt	gt
 8006762:	1a9b      	subgt	r3, r3, r2
 8006764:	18ed      	addgt	r5, r5, r3
 8006766:	f04f 0900 	mov.w	r9, #0
 800676a:	341a      	adds	r4, #26
 800676c:	454d      	cmp	r5, r9
 800676e:	d11a      	bne.n	80067a6 <_printf_common+0xd6>
 8006770:	2000      	movs	r0, #0
 8006772:	e008      	b.n	8006786 <_printf_common+0xb6>
 8006774:	2301      	movs	r3, #1
 8006776:	4652      	mov	r2, sl
 8006778:	4639      	mov	r1, r7
 800677a:	4630      	mov	r0, r6
 800677c:	47c0      	blx	r8
 800677e:	3001      	adds	r0, #1
 8006780:	d103      	bne.n	800678a <_printf_common+0xba>
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678a:	3501      	adds	r5, #1
 800678c:	e7c3      	b.n	8006716 <_printf_common+0x46>
 800678e:	18e1      	adds	r1, r4, r3
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	2030      	movs	r0, #48	; 0x30
 8006794:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006798:	4422      	add	r2, r4
 800679a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800679e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067a2:	3302      	adds	r3, #2
 80067a4:	e7c5      	b.n	8006732 <_printf_common+0x62>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4622      	mov	r2, r4
 80067aa:	4639      	mov	r1, r7
 80067ac:	4630      	mov	r0, r6
 80067ae:	47c0      	blx	r8
 80067b0:	3001      	adds	r0, #1
 80067b2:	d0e6      	beq.n	8006782 <_printf_common+0xb2>
 80067b4:	f109 0901 	add.w	r9, r9, #1
 80067b8:	e7d8      	b.n	800676c <_printf_common+0x9c>
	...

080067bc <_printf_i>:
 80067bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067c4:	460c      	mov	r4, r1
 80067c6:	7e09      	ldrb	r1, [r1, #24]
 80067c8:	b085      	sub	sp, #20
 80067ca:	296e      	cmp	r1, #110	; 0x6e
 80067cc:	4617      	mov	r7, r2
 80067ce:	4606      	mov	r6, r0
 80067d0:	4698      	mov	r8, r3
 80067d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067d4:	f000 80b3 	beq.w	800693e <_printf_i+0x182>
 80067d8:	d822      	bhi.n	8006820 <_printf_i+0x64>
 80067da:	2963      	cmp	r1, #99	; 0x63
 80067dc:	d036      	beq.n	800684c <_printf_i+0x90>
 80067de:	d80a      	bhi.n	80067f6 <_printf_i+0x3a>
 80067e0:	2900      	cmp	r1, #0
 80067e2:	f000 80b9 	beq.w	8006958 <_printf_i+0x19c>
 80067e6:	2958      	cmp	r1, #88	; 0x58
 80067e8:	f000 8083 	beq.w	80068f2 <_printf_i+0x136>
 80067ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067f4:	e032      	b.n	800685c <_printf_i+0xa0>
 80067f6:	2964      	cmp	r1, #100	; 0x64
 80067f8:	d001      	beq.n	80067fe <_printf_i+0x42>
 80067fa:	2969      	cmp	r1, #105	; 0x69
 80067fc:	d1f6      	bne.n	80067ec <_printf_i+0x30>
 80067fe:	6820      	ldr	r0, [r4, #0]
 8006800:	6813      	ldr	r3, [r2, #0]
 8006802:	0605      	lsls	r5, r0, #24
 8006804:	f103 0104 	add.w	r1, r3, #4
 8006808:	d52a      	bpl.n	8006860 <_printf_i+0xa4>
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	da03      	bge.n	800681a <_printf_i+0x5e>
 8006812:	222d      	movs	r2, #45	; 0x2d
 8006814:	425b      	negs	r3, r3
 8006816:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800681a:	486f      	ldr	r0, [pc, #444]	; (80069d8 <_printf_i+0x21c>)
 800681c:	220a      	movs	r2, #10
 800681e:	e039      	b.n	8006894 <_printf_i+0xd8>
 8006820:	2973      	cmp	r1, #115	; 0x73
 8006822:	f000 809d 	beq.w	8006960 <_printf_i+0x1a4>
 8006826:	d808      	bhi.n	800683a <_printf_i+0x7e>
 8006828:	296f      	cmp	r1, #111	; 0x6f
 800682a:	d020      	beq.n	800686e <_printf_i+0xb2>
 800682c:	2970      	cmp	r1, #112	; 0x70
 800682e:	d1dd      	bne.n	80067ec <_printf_i+0x30>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	f043 0320 	orr.w	r3, r3, #32
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	e003      	b.n	8006842 <_printf_i+0x86>
 800683a:	2975      	cmp	r1, #117	; 0x75
 800683c:	d017      	beq.n	800686e <_printf_i+0xb2>
 800683e:	2978      	cmp	r1, #120	; 0x78
 8006840:	d1d4      	bne.n	80067ec <_printf_i+0x30>
 8006842:	2378      	movs	r3, #120	; 0x78
 8006844:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006848:	4864      	ldr	r0, [pc, #400]	; (80069dc <_printf_i+0x220>)
 800684a:	e055      	b.n	80068f8 <_printf_i+0x13c>
 800684c:	6813      	ldr	r3, [r2, #0]
 800684e:	1d19      	adds	r1, r3, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6011      	str	r1, [r2, #0]
 8006854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800685c:	2301      	movs	r3, #1
 800685e:	e08c      	b.n	800697a <_printf_i+0x1be>
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6011      	str	r1, [r2, #0]
 8006864:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006868:	bf18      	it	ne
 800686a:	b21b      	sxthne	r3, r3
 800686c:	e7cf      	b.n	800680e <_printf_i+0x52>
 800686e:	6813      	ldr	r3, [r2, #0]
 8006870:	6825      	ldr	r5, [r4, #0]
 8006872:	1d18      	adds	r0, r3, #4
 8006874:	6010      	str	r0, [r2, #0]
 8006876:	0628      	lsls	r0, r5, #24
 8006878:	d501      	bpl.n	800687e <_printf_i+0xc2>
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	e002      	b.n	8006884 <_printf_i+0xc8>
 800687e:	0668      	lsls	r0, r5, #25
 8006880:	d5fb      	bpl.n	800687a <_printf_i+0xbe>
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	4854      	ldr	r0, [pc, #336]	; (80069d8 <_printf_i+0x21c>)
 8006886:	296f      	cmp	r1, #111	; 0x6f
 8006888:	bf14      	ite	ne
 800688a:	220a      	movne	r2, #10
 800688c:	2208      	moveq	r2, #8
 800688e:	2100      	movs	r1, #0
 8006890:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006894:	6865      	ldr	r5, [r4, #4]
 8006896:	60a5      	str	r5, [r4, #8]
 8006898:	2d00      	cmp	r5, #0
 800689a:	f2c0 8095 	blt.w	80069c8 <_printf_i+0x20c>
 800689e:	6821      	ldr	r1, [r4, #0]
 80068a0:	f021 0104 	bic.w	r1, r1, #4
 80068a4:	6021      	str	r1, [r4, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d13d      	bne.n	8006926 <_printf_i+0x16a>
 80068aa:	2d00      	cmp	r5, #0
 80068ac:	f040 808e 	bne.w	80069cc <_printf_i+0x210>
 80068b0:	4665      	mov	r5, ip
 80068b2:	2a08      	cmp	r2, #8
 80068b4:	d10b      	bne.n	80068ce <_printf_i+0x112>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	07db      	lsls	r3, r3, #31
 80068ba:	d508      	bpl.n	80068ce <_printf_i+0x112>
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	6862      	ldr	r2, [r4, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	bfde      	ittt	le
 80068c4:	2330      	movle	r3, #48	; 0x30
 80068c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068ce:	ebac 0305 	sub.w	r3, ip, r5
 80068d2:	6123      	str	r3, [r4, #16]
 80068d4:	f8cd 8000 	str.w	r8, [sp]
 80068d8:	463b      	mov	r3, r7
 80068da:	aa03      	add	r2, sp, #12
 80068dc:	4621      	mov	r1, r4
 80068de:	4630      	mov	r0, r6
 80068e0:	f7ff fef6 	bl	80066d0 <_printf_common>
 80068e4:	3001      	adds	r0, #1
 80068e6:	d14d      	bne.n	8006984 <_printf_i+0x1c8>
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	b005      	add	sp, #20
 80068ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068f2:	4839      	ldr	r0, [pc, #228]	; (80069d8 <_printf_i+0x21c>)
 80068f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068f8:	6813      	ldr	r3, [r2, #0]
 80068fa:	6821      	ldr	r1, [r4, #0]
 80068fc:	1d1d      	adds	r5, r3, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6015      	str	r5, [r2, #0]
 8006902:	060a      	lsls	r2, r1, #24
 8006904:	d50b      	bpl.n	800691e <_printf_i+0x162>
 8006906:	07ca      	lsls	r2, r1, #31
 8006908:	bf44      	itt	mi
 800690a:	f041 0120 	orrmi.w	r1, r1, #32
 800690e:	6021      	strmi	r1, [r4, #0]
 8006910:	b91b      	cbnz	r3, 800691a <_printf_i+0x15e>
 8006912:	6822      	ldr	r2, [r4, #0]
 8006914:	f022 0220 	bic.w	r2, r2, #32
 8006918:	6022      	str	r2, [r4, #0]
 800691a:	2210      	movs	r2, #16
 800691c:	e7b7      	b.n	800688e <_printf_i+0xd2>
 800691e:	064d      	lsls	r5, r1, #25
 8006920:	bf48      	it	mi
 8006922:	b29b      	uxthmi	r3, r3
 8006924:	e7ef      	b.n	8006906 <_printf_i+0x14a>
 8006926:	4665      	mov	r5, ip
 8006928:	fbb3 f1f2 	udiv	r1, r3, r2
 800692c:	fb02 3311 	mls	r3, r2, r1, r3
 8006930:	5cc3      	ldrb	r3, [r0, r3]
 8006932:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006936:	460b      	mov	r3, r1
 8006938:	2900      	cmp	r1, #0
 800693a:	d1f5      	bne.n	8006928 <_printf_i+0x16c>
 800693c:	e7b9      	b.n	80068b2 <_printf_i+0xf6>
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	6825      	ldr	r5, [r4, #0]
 8006942:	6961      	ldr	r1, [r4, #20]
 8006944:	1d18      	adds	r0, r3, #4
 8006946:	6010      	str	r0, [r2, #0]
 8006948:	0628      	lsls	r0, r5, #24
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	d501      	bpl.n	8006952 <_printf_i+0x196>
 800694e:	6019      	str	r1, [r3, #0]
 8006950:	e002      	b.n	8006958 <_printf_i+0x19c>
 8006952:	066a      	lsls	r2, r5, #25
 8006954:	d5fb      	bpl.n	800694e <_printf_i+0x192>
 8006956:	8019      	strh	r1, [r3, #0]
 8006958:	2300      	movs	r3, #0
 800695a:	6123      	str	r3, [r4, #16]
 800695c:	4665      	mov	r5, ip
 800695e:	e7b9      	b.n	80068d4 <_printf_i+0x118>
 8006960:	6813      	ldr	r3, [r2, #0]
 8006962:	1d19      	adds	r1, r3, #4
 8006964:	6011      	str	r1, [r2, #0]
 8006966:	681d      	ldr	r5, [r3, #0]
 8006968:	6862      	ldr	r2, [r4, #4]
 800696a:	2100      	movs	r1, #0
 800696c:	4628      	mov	r0, r5
 800696e:	f7f9 fc2f 	bl	80001d0 <memchr>
 8006972:	b108      	cbz	r0, 8006978 <_printf_i+0x1bc>
 8006974:	1b40      	subs	r0, r0, r5
 8006976:	6060      	str	r0, [r4, #4]
 8006978:	6863      	ldr	r3, [r4, #4]
 800697a:	6123      	str	r3, [r4, #16]
 800697c:	2300      	movs	r3, #0
 800697e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006982:	e7a7      	b.n	80068d4 <_printf_i+0x118>
 8006984:	6923      	ldr	r3, [r4, #16]
 8006986:	462a      	mov	r2, r5
 8006988:	4639      	mov	r1, r7
 800698a:	4630      	mov	r0, r6
 800698c:	47c0      	blx	r8
 800698e:	3001      	adds	r0, #1
 8006990:	d0aa      	beq.n	80068e8 <_printf_i+0x12c>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	079b      	lsls	r3, r3, #30
 8006996:	d413      	bmi.n	80069c0 <_printf_i+0x204>
 8006998:	68e0      	ldr	r0, [r4, #12]
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	4298      	cmp	r0, r3
 800699e:	bfb8      	it	lt
 80069a0:	4618      	movlt	r0, r3
 80069a2:	e7a3      	b.n	80068ec <_printf_i+0x130>
 80069a4:	2301      	movs	r3, #1
 80069a6:	464a      	mov	r2, r9
 80069a8:	4639      	mov	r1, r7
 80069aa:	4630      	mov	r0, r6
 80069ac:	47c0      	blx	r8
 80069ae:	3001      	adds	r0, #1
 80069b0:	d09a      	beq.n	80068e8 <_printf_i+0x12c>
 80069b2:	3501      	adds	r5, #1
 80069b4:	68e3      	ldr	r3, [r4, #12]
 80069b6:	9a03      	ldr	r2, [sp, #12]
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	42ab      	cmp	r3, r5
 80069bc:	dcf2      	bgt.n	80069a4 <_printf_i+0x1e8>
 80069be:	e7eb      	b.n	8006998 <_printf_i+0x1dc>
 80069c0:	2500      	movs	r5, #0
 80069c2:	f104 0919 	add.w	r9, r4, #25
 80069c6:	e7f5      	b.n	80069b4 <_printf_i+0x1f8>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1ac      	bne.n	8006926 <_printf_i+0x16a>
 80069cc:	7803      	ldrb	r3, [r0, #0]
 80069ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d6:	e76c      	b.n	80068b2 <_printf_i+0xf6>
 80069d8:	08006e5d 	.word	0x08006e5d
 80069dc:	08006e6e 	.word	0x08006e6e

080069e0 <_putc_r>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	460d      	mov	r5, r1
 80069e4:	4614      	mov	r4, r2
 80069e6:	4606      	mov	r6, r0
 80069e8:	b118      	cbz	r0, 80069f2 <_putc_r+0x12>
 80069ea:	6983      	ldr	r3, [r0, #24]
 80069ec:	b90b      	cbnz	r3, 80069f2 <_putc_r+0x12>
 80069ee:	f7ff fb99 	bl	8006124 <__sinit>
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <_putc_r+0x60>)
 80069f4:	429c      	cmp	r4, r3
 80069f6:	d112      	bne.n	8006a1e <_putc_r+0x3e>
 80069f8:	6874      	ldr	r4, [r6, #4]
 80069fa:	68a3      	ldr	r3, [r4, #8]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	60a3      	str	r3, [r4, #8]
 8006a02:	da16      	bge.n	8006a32 <_putc_r+0x52>
 8006a04:	69a2      	ldr	r2, [r4, #24]
 8006a06:	4293      	cmp	r3, r2
 8006a08:	db02      	blt.n	8006a10 <_putc_r+0x30>
 8006a0a:	b2eb      	uxtb	r3, r5
 8006a0c:	2b0a      	cmp	r3, #10
 8006a0e:	d110      	bne.n	8006a32 <_putc_r+0x52>
 8006a10:	4622      	mov	r2, r4
 8006a12:	4629      	mov	r1, r5
 8006a14:	4630      	mov	r0, r6
 8006a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a1a:	f7ff b9d3 	b.w	8005dc4 <__swbuf_r>
 8006a1e:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <_putc_r+0x64>)
 8006a20:	429c      	cmp	r4, r3
 8006a22:	d101      	bne.n	8006a28 <_putc_r+0x48>
 8006a24:	68b4      	ldr	r4, [r6, #8]
 8006a26:	e7e8      	b.n	80069fa <_putc_r+0x1a>
 8006a28:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <_putc_r+0x68>)
 8006a2a:	429c      	cmp	r4, r3
 8006a2c:	bf08      	it	eq
 8006a2e:	68f4      	ldreq	r4, [r6, #12]
 8006a30:	e7e3      	b.n	80069fa <_putc_r+0x1a>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	6022      	str	r2, [r4, #0]
 8006a38:	701d      	strb	r5, [r3, #0]
 8006a3a:	b2e8      	uxtb	r0, r5
 8006a3c:	bd70      	pop	{r4, r5, r6, pc}
 8006a3e:	bf00      	nop
 8006a40:	08006e0c 	.word	0x08006e0c
 8006a44:	08006e2c 	.word	0x08006e2c
 8006a48:	08006dec 	.word	0x08006dec

08006a4c <_sbrk_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4c06      	ldr	r4, [pc, #24]	; (8006a68 <_sbrk_r+0x1c>)
 8006a50:	2300      	movs	r3, #0
 8006a52:	4605      	mov	r5, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	f7fb fca4 	bl	80023a4 <_sbrk>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_sbrk_r+0x1a>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_sbrk_r+0x1a>
 8006a64:	602b      	str	r3, [r5, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	20000558 	.word	0x20000558

08006a6c <__sread>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	460c      	mov	r4, r1
 8006a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a74:	f000 f896 	bl	8006ba4 <_read_r>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	bfab      	itete	ge
 8006a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a80:	181b      	addge	r3, r3, r0
 8006a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a86:	bfac      	ite	ge
 8006a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a8a:	81a3      	strhlt	r3, [r4, #12]
 8006a8c:	bd10      	pop	{r4, pc}

08006a8e <__swrite>:
 8006a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a92:	461f      	mov	r7, r3
 8006a94:	898b      	ldrh	r3, [r1, #12]
 8006a96:	05db      	lsls	r3, r3, #23
 8006a98:	4605      	mov	r5, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	4616      	mov	r6, r2
 8006a9e:	d505      	bpl.n	8006aac <__swrite+0x1e>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa8:	f000 f868 	bl	8006b7c <_lseek_r>
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	4632      	mov	r2, r6
 8006aba:	463b      	mov	r3, r7
 8006abc:	4628      	mov	r0, r5
 8006abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac2:	f000 b817 	b.w	8006af4 <_write_r>

08006ac6 <__sseek>:
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	460c      	mov	r4, r1
 8006aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ace:	f000 f855 	bl	8006b7c <_lseek_r>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	89a3      	ldrh	r3, [r4, #12]
 8006ad6:	bf15      	itete	ne
 8006ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ae2:	81a3      	strheq	r3, [r4, #12]
 8006ae4:	bf18      	it	ne
 8006ae6:	81a3      	strhne	r3, [r4, #12]
 8006ae8:	bd10      	pop	{r4, pc}

08006aea <__sclose>:
 8006aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aee:	f000 b813 	b.w	8006b18 <_close_r>
	...

08006af4 <_write_r>:
 8006af4:	b538      	push	{r3, r4, r5, lr}
 8006af6:	4c07      	ldr	r4, [pc, #28]	; (8006b14 <_write_r+0x20>)
 8006af8:	4605      	mov	r5, r0
 8006afa:	4608      	mov	r0, r1
 8006afc:	4611      	mov	r1, r2
 8006afe:	2200      	movs	r2, #0
 8006b00:	6022      	str	r2, [r4, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f7fb fbfd 	bl	8002302 <_write>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d102      	bne.n	8006b12 <_write_r+0x1e>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	b103      	cbz	r3, 8006b12 <_write_r+0x1e>
 8006b10:	602b      	str	r3, [r5, #0]
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	20000558 	.word	0x20000558

08006b18 <_close_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4c06      	ldr	r4, [pc, #24]	; (8006b34 <_close_r+0x1c>)
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4605      	mov	r5, r0
 8006b20:	4608      	mov	r0, r1
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	f7fb fc09 	bl	800233a <_close>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_close_r+0x1a>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_close_r+0x1a>
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	20000558 	.word	0x20000558

08006b38 <_fstat_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4c07      	ldr	r4, [pc, #28]	; (8006b58 <_fstat_r+0x20>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4605      	mov	r5, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	f7fb fc04 	bl	8002352 <_fstat>
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	d102      	bne.n	8006b54 <_fstat_r+0x1c>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	b103      	cbz	r3, 8006b54 <_fstat_r+0x1c>
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	bd38      	pop	{r3, r4, r5, pc}
 8006b56:	bf00      	nop
 8006b58:	20000558 	.word	0x20000558

08006b5c <_isatty_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4c06      	ldr	r4, [pc, #24]	; (8006b78 <_isatty_r+0x1c>)
 8006b60:	2300      	movs	r3, #0
 8006b62:	4605      	mov	r5, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	f7fb fc03 	bl	8002372 <_isatty>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_isatty_r+0x1a>
 8006b70:	6823      	ldr	r3, [r4, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_isatty_r+0x1a>
 8006b74:	602b      	str	r3, [r5, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	20000558 	.word	0x20000558

08006b7c <_lseek_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4c07      	ldr	r4, [pc, #28]	; (8006b9c <_lseek_r+0x20>)
 8006b80:	4605      	mov	r5, r0
 8006b82:	4608      	mov	r0, r1
 8006b84:	4611      	mov	r1, r2
 8006b86:	2200      	movs	r2, #0
 8006b88:	6022      	str	r2, [r4, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f7fb fbfc 	bl	8002388 <_lseek>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_lseek_r+0x1e>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_lseek_r+0x1e>
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	20000558 	.word	0x20000558

08006ba0 <__malloc_lock>:
 8006ba0:	4770      	bx	lr

08006ba2 <__malloc_unlock>:
 8006ba2:	4770      	bx	lr

08006ba4 <_read_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4c07      	ldr	r4, [pc, #28]	; (8006bc4 <_read_r+0x20>)
 8006ba8:	4605      	mov	r5, r0
 8006baa:	4608      	mov	r0, r1
 8006bac:	4611      	mov	r1, r2
 8006bae:	2200      	movs	r2, #0
 8006bb0:	6022      	str	r2, [r4, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f7fb fb88 	bl	80022c8 <_read>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_read_r+0x1e>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_read_r+0x1e>
 8006bc0:	602b      	str	r3, [r5, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20000558 	.word	0x20000558

08006bc8 <_init>:
 8006bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bca:	bf00      	nop
 8006bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bce:	bc08      	pop	{r3}
 8006bd0:	469e      	mov	lr, r3
 8006bd2:	4770      	bx	lr

08006bd4 <_fini>:
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	bf00      	nop
 8006bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bda:	bc08      	pop	{r3}
 8006bdc:	469e      	mov	lr, r3
 8006bde:	4770      	bx	lr
