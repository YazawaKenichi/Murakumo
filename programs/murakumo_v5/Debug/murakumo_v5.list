
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800b228  0800b228  0001b228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6c0  0800b6c0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6c0  0800b6c0  0001b6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6c8  0800b6c8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6c8  0800b6c8  0001b6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6cc  0800b6cc  0001b6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b6d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200001e0  0800b8ac  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  0800b8ac  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128a2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023ac  00000000  00000000  00032aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  00034e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e0  00000000  00000000  00036130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003de7  00000000  00000000  00037310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3f9  00000000  00000000  0003b0f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9912  00000000  00000000  000484f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111e02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063d0  00000000  00000000  00111e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b210 	.word	0x0800b210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b210 	.word	0x0800b210

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_TIM_PeriodElapsedCallback>:
void IMU_printf(Inertial*);
void IMU_raw_printf();
#endif
double low_pass_filter(double val, double pre_val, double gamma);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f8c:	b087      	sub	sp, #28
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
	if (htim->Instance == TIM6) {
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4aa7      	ldr	r2, [pc, #668]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	f040 81ff 	bne.w	800139c <HAL_TIM_PeriodElapsedCallback+0x414>
			motorenable = 0;
		}
#endif // D_VELOCITY_CONTROL_TIMER
#endif	// USE_VELOCITY_CONTROL

		if (motorenable) {
 8000f9e:	4ba6      	ldr	r3, [pc, #664]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 816a 	beq.w	800127c <HAL_TIM_PeriodElapsedCallback+0x2f4>
#if !STATICMOTORPWM
#if USE_ANALOG
			analogl = 0;
 8000fa8:	4ba4      	ldr	r3, [pc, #656]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
			analogr = 0;
 8000fae:	4ba4      	ldr	r3, [pc, #656]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	801a      	strh	r2, [r3, #0]
			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	75fb      	strb	r3, [r7, #23]
 8000fb8:	e059      	b.n	800106e <HAL_TIM_PeriodElapsedCallback+0xe6>
			{
				uint16_t analogbuf = analog[i];
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	4aa1      	ldr	r2, [pc, #644]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc2:	82bb      	strh	r3, [r7, #20]
				//			analogmax[i] = (analogmax[i] < analogbuf) ? analogbuf : analogmax[i];
				//			analogmin[i] = (analogmin[i] > analogbuf) ? analogbuf : analogmin[i];
				if(analogmax[i] < analogbuf)
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	4aa0      	ldr	r2, [pc, #640]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fcc:	8aba      	ldrh	r2, [r7, #20]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d904      	bls.n	8000fdc <HAL_TIM_PeriodElapsedCallback+0x54>
				{
					analogmax[i] = analogbuf;
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	499c      	ldr	r1, [pc, #624]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000fd6:	8aba      	ldrh	r2, [r7, #20]
 8000fd8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if(analogmin[i] > analogbuf)
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	4a9b      	ldr	r2, [pc, #620]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe4:	8aba      	ldrh	r2, [r7, #20]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d204      	bcs.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0x6c>
				{
					analogmin[i] = analogbuf;
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	4997      	ldr	r1, [pc, #604]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000fee:	8aba      	ldrh	r2, [r7, #20]
 8000ff0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}

				analograte[i] = ((analog[i] - analogmin[i]) * 1000) / (analogmax[i] - analogmin[i]);
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	4a93      	ldr	r2, [pc, #588]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	4a92      	ldr	r2, [pc, #584]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001006:	1acb      	subs	r3, r1, r3
 8001008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100c:	fb02 f203 	mul.w	r2, r2, r3
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	498d      	ldr	r1, [pc, #564]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001014:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001018:	4618      	mov	r0, r3
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	498b      	ldr	r1, [pc, #556]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800101e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001022:	1ac3      	subs	r3, r0, r3
 8001024:	fb92 f2f3 	sdiv	r2, r2, r3
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	b291      	uxth	r1, r2
 800102c:	4a88      	ldr	r2, [pc, #544]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800102e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if(i % 2 == 0)
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10a      	bne.n	8001054 <HAL_TIM_PeriodElapsedCallback+0xcc>
				{
				  analogl += analograte[i];
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	4a83      	ldr	r2, [pc, #524]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001042:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001046:	4b7d      	ldr	r3, [pc, #500]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b7b      	ldr	r3, [pc, #492]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001050:	801a      	strh	r2, [r3, #0]
 8001052:	e009      	b.n	8001068 <HAL_TIM_PeriodElapsedCallback+0xe0>
				}
				else
				{
				  analogr += analograte[i];
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	4a7e      	ldr	r2, [pc, #504]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001058:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800105c:	4b78      	ldr	r3, [pc, #480]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	4413      	add	r3, r2
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b76      	ldr	r3, [pc, #472]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001066:	801a      	strh	r2, [r3, #0]
			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	3301      	adds	r3, #1
 800106c:	75fb      	strb	r3, [r7, #23]
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	2b0b      	cmp	r3, #11
 8001072:	d9a2      	bls.n	8000fba <HAL_TIM_PeriodElapsedCallback+0x32>
				}
			}
			switch(rotary_value)
 8001074:	4b77      	ldr	r3, [pc, #476]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	2b0d      	cmp	r3, #13
 800107c:	d81e      	bhi.n	80010bc <HAL_TIM_PeriodElapsedCallback+0x134>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	080010c5 	.word	0x080010c5
 8001088:	080010c5 	.word	0x080010c5
 800108c:	080010c5 	.word	0x080010c5
 8001090:	080010bd 	.word	0x080010bd
 8001094:	080010bd 	.word	0x080010bd
 8001098:	080010bd 	.word	0x080010bd
 800109c:	080010bd 	.word	0x080010bd
 80010a0:	080010bd 	.word	0x080010bd
 80010a4:	080010bd 	.word	0x080010bd
 80010a8:	080010bd 	.word	0x080010bd
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	080010bd 	.word	0x080010bd
 80010b4:	080010bd 	.word	0x080010bd
 80010b8:	080010c5 	.word	0x080010c5
#endif
					break;
				case 0xE:
					break;
				default:
					commonspeed = 0;
 80010bc:	4b66      	ldr	r3, [pc, #408]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	801a      	strh	r2, [r3, #0]
					break;
 80010c2:	e000      	b.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x13e>
					break;
 80010c4:	bf00      	nop
			}
			// ( direction > 0 ) is ( analogl > analogr ) i.e. left is black, right is white.
			// When ( direction > 0 ) , must turn right.
			// 白読みで 0 付�?
			// 右が白読みで正
			direction = (analogl - analogr);	// difference
 80010c6:	4b5d      	ldr	r3, [pc, #372]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b5c      	ldr	r3, [pc, #368]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	4a62      	ldr	r2, [pc, #392]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80010d4:	6013      	str	r3, [r2, #0]
#if !VELOCITY_CONTROL_RELATIVE
			// left
			leftmotor = nextspeed_l + (kp * direction / CALIBRATIONSIZE / 2 + kd * (direction - beforedirection));
			rightmotor = nextspeed_r - (kp * direction / CALIBRATIONSIZE / 2 + kd * (direction - beforedirection));
#else	// VELOCITY_CONTROL_RELATIVE
			commonspeed = nextspeed;
 80010d6:	4b62      	ldr	r3, [pc, #392]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80010d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010dc:	4618      	mov	r0, r3
 80010de:	4621      	mov	r1, r4
 80010e0:	f7ff fd3a 	bl	8000b58 <__aeabi_d2iz>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80010ea:	801a      	strh	r2, [r3, #0]
#endif
#endif	// D_VELOCITY_CONTOROL
			leftmotor = commonspeed + (kp * direction / CALIBRATIONSIZE / 2 + kd * (direction - beforedirection));
 80010ec:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa16 	bl	8000524 <__aeabi_i2d>
 80010f8:	4682      	mov	sl, r0
 80010fa:	468b      	mov	fp, r1
 80010fc:	4b57      	ldr	r3, [pc, #348]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa0f 	bl	8000524 <__aeabi_i2d>
 8001106:	4b57      	ldr	r3, [pc, #348]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001108:	e9d3 3400 	ldrd	r3, r4, [r3]
 800110c:	461a      	mov	r2, r3
 800110e:	4623      	mov	r3, r4
 8001110:	f7ff fa72 	bl	80005f8 <__aeabi_dmul>
 8001114:	4603      	mov	r3, r0
 8001116:	460c      	mov	r4, r1
 8001118:	4618      	mov	r0, r3
 800111a:	4621      	mov	r1, r4
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b51      	ldr	r3, [pc, #324]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001122:	f7ff fb93 	bl	800084c <__aeabi_ddiv>
 8001126:	4603      	mov	r3, r0
 8001128:	460c      	mov	r4, r1
 800112a:	4618      	mov	r0, r3
 800112c:	4621      	mov	r1, r4
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001136:	f7ff fb89 	bl	800084c <__aeabi_ddiv>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	e9c7 3400 	strd	r3, r4, [r7]
 8001142:	4b46      	ldr	r3, [pc, #280]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b49      	ldr	r3, [pc, #292]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f9e9 	bl	8000524 <__aeabi_i2d>
 8001152:	4b47      	ldr	r3, [pc, #284]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001154:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001158:	461a      	mov	r2, r3
 800115a:	4623      	mov	r3, r4
 800115c:	f7ff fa4c 	bl	80005f8 <__aeabi_dmul>
 8001160:	4603      	mov	r3, r0
 8001162:	460c      	mov	r4, r1
 8001164:	461a      	mov	r2, r3
 8001166:	4623      	mov	r3, r4
 8001168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800116c:	f7ff f88e 	bl	800028c <__adddf3>
 8001170:	4603      	mov	r3, r0
 8001172:	460c      	mov	r4, r1
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	4650      	mov	r0, sl
 800117a:	4659      	mov	r1, fp
 800117c:	f7ff f886 	bl	800028c <__adddf3>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	4a3b      	ldr	r2, [pc, #236]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001186:	e9c2 3400 	strd	r3, r4, [r2]
			rightmotor = commonspeed - (kp * direction / CALIBRATIONSIZE / 2 + kd * (direction - beforedirection));
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800118c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	4682      	mov	sl, r0
 8001198:	468b      	mov	fp, r1
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9c0 	bl	8000524 <__aeabi_i2d>
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80011a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4623      	mov	r3, r4
 80011ae:	f7ff fa23 	bl	80005f8 <__aeabi_dmul>
 80011b2:	4603      	mov	r3, r0
 80011b4:	460c      	mov	r4, r1
 80011b6:	4618      	mov	r0, r3
 80011b8:	4621      	mov	r1, r4
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80011c0:	f7ff fb44 	bl	800084c <__aeabi_ddiv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	460c      	mov	r4, r1
 80011c8:	4618      	mov	r0, r3
 80011ca:	4621      	mov	r1, r4
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d4:	f7ff fb3a 	bl	800084c <__aeabi_ddiv>
 80011d8:	4603      	mov	r3, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	e9c7 3400 	strd	r3, r4, [r7]
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f99a 	bl	8000524 <__aeabi_i2d>
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80011f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4623      	mov	r3, r4
 80011fa:	f7ff f9fd 	bl	80005f8 <__aeabi_dmul>
 80011fe:	4603      	mov	r3, r0
 8001200:	460c      	mov	r4, r1
 8001202:	461a      	mov	r2, r3
 8001204:	4623      	mov	r3, r4
 8001206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800120a:	f7ff f83f 	bl	800028c <__adddf3>
 800120e:	4603      	mov	r3, r0
 8001210:	460c      	mov	r4, r1
 8001212:	461a      	mov	r2, r3
 8001214:	4623      	mov	r3, r4
 8001216:	4650      	mov	r0, sl
 8001218:	4659      	mov	r1, fp
 800121a:	f7ff f835 	bl	8000288 <__aeabi_dsub>
 800121e:	4603      	mov	r3, r0
 8001220:	460c      	mov	r4, r1
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001224:	e9c2 3400 	strd	r3, r4, [r2]
			leftmotor = nextspeed;
			rightmotor = nextspeed;
#endif
#endif	// !USE_ANALOG
#if USE_ANALOG
			beforedirection = direction;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0f      	ldr	r2, [pc, #60]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e032      	b.n	8001298 <HAL_TIM_PeriodElapsedCallback+0x310>
 8001232:	bf00      	nop
 8001234:	40001000 	.word	0x40001000
 8001238:	20000628 	.word	0x20000628
 800123c:	200003ca 	.word	0x200003ca
 8001240:	2000062a 	.word	0x2000062a
 8001244:	20000210 	.word	0x20000210
 8001248:	20000710 	.word	0x20000710
 800124c:	200003b0 	.word	0x200003b0
 8001250:	200004c8 	.word	0x200004c8
 8001254:	200003c8 	.word	0x200003c8
 8001258:	200003ce 	.word	0x200003ce
 800125c:	20000414 	.word	0x20000414
 8001260:	20000468 	.word	0x20000468
 8001264:	20000728 	.word	0x20000728
 8001268:	40280000 	.word	0x40280000
 800126c:	20000730 	.word	0x20000730
 8001270:	20000238 	.word	0x20000238
 8001274:	200003a8 	.word	0x200003a8
 8001278:	200003a0 	.word	0x200003a0
			leftmotor = COMMONSPEED1;
			rightmotor = COMMONSPEED1;
#endif	// !STATICMOTORPWM
		} else	// if(motorenable)
		{
			leftmotor = 0;
 800127c:	4a85      	ldr	r2, [pc, #532]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	f04f 0400 	mov.w	r4, #0
 8001286:	e9c2 3400 	strd	r3, r4, [r2]
			rightmotor = 0;
 800128a:	4a83      	ldr	r2, [pc, #524]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f04f 0400 	mov.w	r4, #0
 8001294:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if (leftmotor < 0) {
 8001298:	4b7e      	ldr	r3, [pc, #504]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800129a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	f7ff fc19 	bl	8000adc <__aeabi_dcmplt>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00e      	beq.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x346>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2104      	movs	r1, #4
 80012b4:	4879      	ldr	r0, [pc, #484]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x514>)
 80012b6:	f003 fb31 	bl	800491c <HAL_GPIO_WritePin>
			leftmotor = leftmotor * -1;
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80012bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012c0:	4698      	mov	r8, r3
 80012c2:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 80012c6:	4b73      	ldr	r3, [pc, #460]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80012c8:	e9c3 8900 	strd	r8, r9, [r3]
 80012cc:	e004      	b.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0x350>
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2104      	movs	r1, #4
 80012d2:	4872      	ldr	r0, [pc, #456]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x514>)
 80012d4:	f003 fb22 	bl	800491c <HAL_GPIO_WritePin>
		}

		if (rightmotor < 0) {
 80012d8:	4b6f      	ldr	r3, [pc, #444]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80012da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	f7ff fbf9 	bl	8000adc <__aeabi_dcmplt>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00f      	beq.n	8001310 <HAL_TIM_PeriodElapsedCallback+0x388>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f6:	486a      	ldr	r0, [pc, #424]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80012f8:	f003 fb10 	bl	800491c <HAL_GPIO_WritePin>
			rightmotor = rightmotor * -1;
 80012fc:	4b66      	ldr	r3, [pc, #408]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80012fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001302:	461d      	mov	r5, r3
 8001304:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8001308:	4b63      	ldr	r3, [pc, #396]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800130a:	e9c3 5600 	strd	r5, r6, [r3]
 800130e:	e005      	b.n	800131c <HAL_TIM_PeriodElapsedCallback+0x394>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	4862      	ldr	r0, [pc, #392]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8001318:	f003 fb00 	bl	800491c <HAL_GPIO_WritePin>
		}

		leftmotor = leftmotor > PWMMAX ? PWMMAX : leftmotor;
 800131c:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800131e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b5f      	ldr	r3, [pc, #380]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8001328:	f7ff fbf6 	bl	8000b18 <__aeabi_dcmpgt>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_TIM_PeriodElapsedCallback+0x3b2>
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	4c5b      	ldr	r4, [pc, #364]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8001338:	e002      	b.n	8001340 <HAL_TIM_PeriodElapsedCallback+0x3b8>
 800133a:	4b56      	ldr	r3, [pc, #344]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800133c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001340:	4a54      	ldr	r2, [pc, #336]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8001342:	e9c2 3400 	strd	r3, r4, [r2]
		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 8001346:	4b54      	ldr	r3, [pc, #336]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001348:	e9d3 0100 	ldrd	r0, r1, [r3]
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8001352:	f7ff fbe1 	bl	8000b18 <__aeabi_dcmpgt>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_TIM_PeriodElapsedCallback+0x3dc>
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	4c50      	ldr	r4, [pc, #320]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8001362:	e002      	b.n	800136a <HAL_TIM_PeriodElapsedCallback+0x3e2>
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001366:	e9d3 3400 	ldrd	r3, r4, [r3]
 800136a:	4a4b      	ldr	r2, [pc, #300]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800136c:	e9c2 3400 	strd	r3, r4, [r2]
#endif

#if !D_PWM
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8001372:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001376:	4a4c      	ldr	r2, [pc, #304]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8001378:	6815      	ldr	r5, [r2, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	4621      	mov	r1, r4
 800137e:	f7ff fc13 	bl	8000ba8 <__aeabi_d2uiz>
 8001382:	4603      	mov	r3, r0
 8001384:	636b      	str	r3, [r5, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001388:	e9d3 3400 	ldrd	r3, r4, [r3]
 800138c:	4a46      	ldr	r2, [pc, #280]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800138e:	6815      	ldr	r5, [r2, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	4621      	mov	r1, r4
 8001394:	f7ff fc08 	bl	8000ba8 <__aeabi_d2uiz>
 8001398:	4603      	mov	r3, r0
 800139a:	63ab      	str	r3, [r5, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, COMMONSPEED1);
#endif	// STATICPWM
#endif	// D_PWM
#endif	// !     D_LED
	}	// TIM6
	if (htim->Instance == TIM10)	// TIM10 // 1ms
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a42      	ldr	r2, [pc, #264]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x524>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	f040 81a0 	bne.w	80016e8 <HAL_TIM_PeriodElapsedCallback+0x760>
	{
#if USE_SIDESENSOR
		unsigned char subsens, first, second;

		subsens = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0; // right
 80013a8:	2104      	movs	r1, #4
 80013aa:	4841      	ldr	r0, [pc, #260]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80013ac:	f003 fa9e 	bl	80048ec <HAL_GPIO_ReadPin>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf0c      	ite	eq
 80013b6:	2301      	moveq	r3, #1
 80013b8:	2300      	movne	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	74fb      	strb	r3, [r7, #19]
		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 80013be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c2:	483b      	ldr	r0, [pc, #236]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80013c4:	f003 fa92 	bl	80048ec <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x44a>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e000      	b.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x44c>
 80013d2:	2300      	movs	r3, #0
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	7cfb      	ldrb	r3, [r7, #19]
 80013d8:	4413      	add	r3, r2
 80013da:	74fb      	strb	r3, [r7, #19]

		if (subsens != subsensbuf) {
 80013dc:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	7cfa      	ldrb	r2, [r7, #19]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d078      	beq.n	80014d8 <HAL_TIM_PeriodElapsedCallback+0x550>
			subsensbuf = subsens;
 80013e6:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80013e8:	7cfb      	ldrb	r3, [r7, #19]
 80013ea:	7013      	strb	r3, [r2, #0]
			marker += subsens << (2 * sidedeltacount);
 80013ec:	7cfa      	ldrb	r2, [r7, #19]
 80013ee:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x534>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001404:	701a      	strb	r2, [r3, #0]
			if (subsens == 0b00 && sidedeltacount != 0) {
 8001406:	7cfb      	ldrb	r3, [r7, #19]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d15f      	bne.n	80014cc <HAL_TIM_PeriodElapsedCallback+0x544>
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d05b      	beq.n	80014cc <HAL_TIM_PeriodElapsedCallback+0x544>
				first = (marker & 0b0011);
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	74bb      	strb	r3, [r7, #18]
				second = (marker & 0b1100) >> 2;
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	109b      	asrs	r3, r3, #2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	747b      	strb	r3, [r7, #17]
				if (second == 0b00) {
 800142c:	7c7b      	ldrb	r3, [r7, #17]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d123      	bne.n	800147a <HAL_TIM_PeriodElapsedCallback+0x4f2>
					if (first == 0b01) {
 8001432:	7cbb      	ldrb	r3, [r7, #18]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d115      	bne.n	8001464 <HAL_TIM_PeriodElapsedCallback+0x4dc>
						// right -> stop
						markerstate = 0b01;
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
						if (rightmarkercount == 0) {
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <HAL_TIM_PeriodElapsedCallback+0x4cc>
							rightmarkercount++;
 8001446:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e015      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x4f8>
						} else if (rightmarkercount == 1) {
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d111      	bne.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x4f8>
							enter = 0;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e00d      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x4f8>
						}
					} else if (first == 0b10) {
 8001464:	7cbb      	ldrb	r3, [r7, #18]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d103      	bne.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x4ea>
						// left -> curve
						markerstate = 0b10;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800146c:	2202      	movs	r2, #2
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e006      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x4f8>
							motorenable = 0;
						}
#endif
					} else {
						// cross
						markerstate = 0b11;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001474:	2203      	movs	r2, #3
 8001476:	701a      	strb	r2, [r3, #0]
 8001478:	e002      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x4f8>
					}
				} else {
					// cross
					markerstate = 0b11;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800147c:	2203      	movs	r2, #3
 800147e:	701a      	strb	r2, [r3, #0]
				}
				sidedeltacount = 0;
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
				marker = 0;
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
				markerstate = 0;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e021      	b.n	80014d8 <HAL_TIM_PeriodElapsedCallback+0x550>
 8001494:	200003a8 	.word	0x200003a8
 8001498:	200003a0 	.word	0x200003a0
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40020800 	.word	0x40020800
 80014a4:	408f4000 	.word	0x408f4000
 80014a8:	200002c0 	.word	0x200002c0
 80014ac:	40014400 	.word	0x40014400
 80014b0:	40020400 	.word	0x40020400
 80014b4:	200003cc 	.word	0x200003cc
 80014b8:	20000410 	.word	0x20000410
 80014bc:	20000550 	.word	0x20000550
 80014c0:	20000461 	.word	0x20000461
 80014c4:	20000734 	.word	0x20000734
 80014c8:	20000735 	.word	0x20000735
			} else {
				sidedeltacount++;
 80014cc:	4baa      	ldr	r3, [pc, #680]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4ba8      	ldr	r3, [pc, #672]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 80014d6:	701a      	strb	r2, [r3, #0]
		}
#endif	// USE_SIDESENSOR

#if USE_ENCODER
		// 1ms
		encoder_l = TIM1->CNT - ENCODER_MIDDLE;
 80014d8:	4ba8      	ldr	r3, [pc, #672]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4ba6      	ldr	r3, [pc, #664]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 80014e8:	801a      	strh	r2, [r3, #0]
		encoder_r = -(TIM3->CNT - ENCODER_MIDDLE);
 80014ea:	4ba6      	ldr	r3, [pc, #664]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4ba5      	ldr	r3, [pc, #660]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x800>)
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4ba4      	ldr	r3, [pc, #656]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x804>)
 80014fa:	801a      	strh	r2, [r3, #0]

		TIM1->CNT = ENCODER_MIDDLE;
 80014fc:	4b9f      	ldr	r3, [pc, #636]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 80014fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CNT = ENCODER_MIDDLE;
 8001504:	4b9f      	ldr	r3, [pc, #636]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001506:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
		s_velocity_error_r = s_velocity_error_r + velocity_error_r;
		// PI
		velocity_next_r = VKPR * velocity_error_r + VKIR * s_velocity_error_r;
		nextspeed_r = (VELOCITY_TARGET + velocity_next_r) * PWMMAX / VELOCITY_MAX;
#else	// VELOCITY_CONTROL_RELATIVE
		velocity_l_raw = (double)encoder_l * LENGTHPERPULSE;
 800150c:	4b9c      	ldr	r3, [pc, #624]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f806 	bl	8000524 <__aeabi_i2d>
 8001518:	4b9d      	ldr	r3, [pc, #628]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x808>)
 800151a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800151e:	461a      	mov	r2, r3
 8001520:	4623      	mov	r3, r4
 8001522:	f7ff f869 	bl	80005f8 <__aeabi_dmul>
 8001526:	4603      	mov	r3, r0
 8001528:	460c      	mov	r4, r1
 800152a:	4a9a      	ldr	r2, [pc, #616]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 800152c:	e9c2 3400 	strd	r3, r4, [r2]
		velocity_l = low_pass_filter(velocity_l_raw, velocity_l, 0.0f);
 8001530:	4b98      	ldr	r3, [pc, #608]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8001532:	ed93 7b00 	vldr	d7, [r3]
 8001536:	4b98      	ldr	r3, [pc, #608]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8001538:	ed93 6b00 	vldr	d6, [r3]
 800153c:	ed9f 2b88 	vldr	d2, [pc, #544]	; 8001760 <HAL_TIM_PeriodElapsedCallback+0x7d8>
 8001540:	eeb0 1a46 	vmov.f32	s2, s12
 8001544:	eef0 1a66 	vmov.f32	s3, s13
 8001548:	eeb0 0a47 	vmov.f32	s0, s14
 800154c:	eef0 0a67 	vmov.f32	s1, s15
 8001550:	f001 f976 	bl	8002840 <low_pass_filter>
 8001554:	eeb0 7a40 	vmov.f32	s14, s0
 8001558:	eef0 7a60 	vmov.f32	s15, s1
 800155c:	4b8e      	ldr	r3, [pc, #568]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x810>)
 800155e:	ed83 7b00 	vstr	d7, [r3]
		velocity_r_raw = (double)encoder_r * LENGTHPERPULSE;
 8001562:	4b8a      	ldr	r3, [pc, #552]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ffdb 	bl	8000524 <__aeabi_i2d>
 800156e:	4b88      	ldr	r3, [pc, #544]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8001570:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	f7ff f83e 	bl	80005f8 <__aeabi_dmul>
 800157c:	4603      	mov	r3, r0
 800157e:	460c      	mov	r4, r1
 8001580:	4a86      	ldr	r2, [pc, #536]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001582:	e9c2 3400 	strd	r3, r4, [r2]
		velocity_r = low_pass_filter(velocity_r_raw, velocity_r, 0.0f);
 8001586:	4b85      	ldr	r3, [pc, #532]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x814>)
 8001588:	ed93 7b00 	vldr	d7, [r3]
 800158c:	4b84      	ldr	r3, [pc, #528]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x818>)
 800158e:	ed93 6b00 	vldr	d6, [r3]
 8001592:	ed9f 2b73 	vldr	d2, [pc, #460]	; 8001760 <HAL_TIM_PeriodElapsedCallback+0x7d8>
 8001596:	eeb0 1a46 	vmov.f32	s2, s12
 800159a:	eef0 1a66 	vmov.f32	s3, s13
 800159e:	eeb0 0a47 	vmov.f32	s0, s14
 80015a2:	eef0 0a67 	vmov.f32	s1, s15
 80015a6:	f001 f94b 	bl	8002840 <low_pass_filter>
 80015aa:	eeb0 7a40 	vmov.f32	s14, s0
 80015ae:	eef0 7a60 	vmov.f32	s15, s1
 80015b2:	4b7b      	ldr	r3, [pc, #492]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80015b4:	ed83 7b00 	vstr	d7, [r3]
		velocity_error = VELOCITY_TARGET - (velocity_l + velocity_r) / (double)2.0f;
 80015b8:	4b77      	ldr	r3, [pc, #476]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x810>)
 80015ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015be:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x818>)
 80015c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4623      	mov	r3, r4
 80015c8:	f7fe fe60 	bl	800028c <__adddf3>
 80015cc:	4603      	mov	r3, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	4618      	mov	r0, r3
 80015d2:	4621      	mov	r1, r4
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015dc:	f7ff f936 	bl	800084c <__aeabi_ddiv>
 80015e0:	4603      	mov	r3, r0
 80015e2:	460c      	mov	r4, r1
 80015e4:	461a      	mov	r2, r3
 80015e6:	4623      	mov	r3, r4
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	496d      	ldr	r1, [pc, #436]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 80015ee:	f7fe fe4b 	bl	8000288 <__aeabi_dsub>
 80015f2:	4603      	mov	r3, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	4a6c      	ldr	r2, [pc, #432]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x820>)
 80015f8:	e9c2 3400 	strd	r3, r4, [r2]
		s_velocity_error = s_velocity_error + velocity_error;
 80015fc:	4b6b      	ldr	r3, [pc, #428]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x824>)
 80015fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001602:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8001604:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001608:	461a      	mov	r2, r3
 800160a:	4623      	mov	r3, r4
 800160c:	f7fe fe3e 	bl	800028c <__adddf3>
 8001610:	4603      	mov	r3, r0
 8001612:	460c      	mov	r4, r1
 8001614:	4a65      	ldr	r2, [pc, #404]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x824>)
 8001616:	e9c2 3400 	strd	r3, r4, [r2]
		// PI
		velocity_next = VKP * velocity_error + VKI * s_velocity_error;
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x820>)
 800161c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	4b62      	ldr	r3, [pc, #392]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001626:	f7fe ffe7 	bl	80005f8 <__aeabi_dmul>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4625      	mov	r5, r4
 8001630:	461c      	mov	r4, r3
 8001632:	4b5e      	ldr	r3, [pc, #376]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x824>)
 8001634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001638:	a34b      	add	r3, pc, #300	; (adr r3, 8001768 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe ffdb 	bl	80005f8 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fe1f 	bl	800028c <__adddf3>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	4a58      	ldr	r2, [pc, #352]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8001654:	e9c2 3400 	strd	r3, r4, [r2]
		nextspeed = velocity_next * (double)PWMMAX / (double)VELOCITY_MAX;
 8001658:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 800165a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b55      	ldr	r3, [pc, #340]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001664:	f7fe ffc8 	bl	80005f8 <__aeabi_dmul>
 8001668:	4603      	mov	r3, r0
 800166a:	460c      	mov	r4, r1
 800166c:	4618      	mov	r0, r3
 800166e:	4621      	mov	r1, r4
 8001670:	a33f      	add	r3, pc, #252	; (adr r3, 8001770 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7ff f8e9 	bl	800084c <__aeabi_ddiv>
 800167a:	4603      	mov	r3, r0
 800167c:	460c      	mov	r4, r1
 800167e:	4a4f      	ldr	r2, [pc, #316]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001680:	e9c2 3400 	strd	r3, r4, [r2]
		 velocityl = lengthl / ENCODERPERIOD / 1000;
		 velocityr = lengthr / ENCODERPERIOD / 1000;
		 */
#endif	// USE_ENCODER
#if USE_LED
		if(timtim % 1000 == 0)
 8001684:	4b4e      	ldr	r3, [pc, #312]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	4a4e      	ldr	r2, [pc, #312]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 800168a:	fba2 1203 	umull	r1, r2, r2, r3
 800168e:	0992      	lsrs	r2, r2, #6
 8001690:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001694:	fb01 f202 	mul.w	r2, r1, r2
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	b29b      	uxth	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x71e>
		{
			set_led(0b10);
 80016a0:	2002      	movs	r0, #2
 80016a2:	f000 ff2d 	bl	8002500 <set_led>
		}
		if(timtim % 1000 == 500)
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 80016ac:	fba2 1203 	umull	r1, r2, r2, r3
 80016b0:	0992      	lsrs	r2, r2, #6
 80016b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b6:	fb01 f202 	mul.w	r2, r1, r2
 80016ba:	1a9b      	subs	r3, r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016c2:	d102      	bne.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x742>
		{
			set_led(0b00);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 ff1b 	bl	8002500 <set_led>
		}
		timtim = timtim + 1;
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80016d4:	801a      	strh	r2, [r3, #0]
		if(timtim >= 60000)
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80016de:	4293      	cmp	r3, r2
 80016e0:	d902      	bls.n	80016e8 <HAL_TIM_PeriodElapsedCallback+0x760>
		{
			timtim = 0;
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	801a      	strh	r2, [r3, #0]
		}
#endif
	}	// TIM10

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a36      	ldr	r2, [pc, #216]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x840>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	f040 809e 	bne.w	8001830 <HAL_TIM_PeriodElapsedCallback+0x8a8>
	{
		uint8_t rotary_value_row;
		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 80016f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f8:	4834      	ldr	r0, [pc, #208]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x844>)
 80016fa:	f003 f8f7 	bl	80048ec <HAL_GPIO_ReadPin>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	743b      	strb	r3, [r7, #16]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 800170c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001710:	482e      	ldr	r0, [pc, #184]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001712:	f003 f8eb 	bl	80048ec <HAL_GPIO_ReadPin>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_TIM_PeriodElapsedCallback+0x798>
 800171c:	2302      	movs	r3, #2
 800171e:	e000      	b.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x79a>
 8001720:	2300      	movs	r3, #0
 8001722:	b2da      	uxtb	r2, r3
 8001724:	7c3b      	ldrb	r3, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	743b      	strb	r3, [r7, #16]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 800172a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172e:	4828      	ldr	r0, [pc, #160]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8001730:	f003 f8dc 	bl	80048ec <HAL_GPIO_ReadPin>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_TIM_PeriodElapsedCallback+0x7b6>
 800173a:	2304      	movs	r3, #4
 800173c:	e000      	b.n	8001740 <HAL_TIM_PeriodElapsedCallback+0x7b8>
 800173e:	2300      	movs	r3, #0
 8001740:	b2da      	uxtb	r2, r3
 8001742:	7c3b      	ldrb	r3, [r7, #16]
 8001744:	4413      	add	r3, r2
 8001746:	743b      	strb	r3, [r7, #16]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 8001748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174c:	481f      	ldr	r0, [pc, #124]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x844>)
 800174e:	f003 f8cd 	bl	80048ec <HAL_GPIO_ReadPin>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d13d      	bne.n	80017d4 <HAL_TIM_PeriodElapsedCallback+0x84c>
 8001758:	2308      	movs	r3, #8
 800175a:	e03c      	b.n	80017d6 <HAL_TIM_PeriodElapsedCallback+0x84e>
 800175c:	f3af 8000 	nop.w
	...
 8001768:	a0000000 	.word	0xa0000000
 800176c:	3fc99999 	.word	0x3fc99999
 8001770:	00000000 	.word	0x00000000
 8001774:	40e15f60 	.word	0x40e15f60
 8001778:	20000410 	.word	0x20000410
 800177c:	40010000 	.word	0x40010000
 8001780:	200004b8 	.word	0x200004b8
 8001784:	40000400 	.word	0x40000400
 8001788:	ffff8000 	.word	0xffff8000
 800178c:	20000704 	.word	0x20000704
 8001790:	200005e0 	.word	0x200005e0
 8001794:	20000470 	.word	0x20000470
 8001798:	20000230 	.word	0x20000230
 800179c:	20000708 	.word	0x20000708
 80017a0:	20000208 	.word	0x20000208
 80017a4:	403e0000 	.word	0x403e0000
 80017a8:	20000228 	.word	0x20000228
 80017ac:	20000300 	.word	0x20000300
 80017b0:	40340000 	.word	0x40340000
 80017b4:	200005d8 	.word	0x200005d8
 80017b8:	408f4000 	.word	0x408f4000
 80017bc:	20000468 	.word	0x20000468
 80017c0:	200002bc 	.word	0x200002bc
 80017c4:	10624dd3 	.word	0x10624dd3
 80017c8:	40014800 	.word	0x40014800
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	2300      	movs	r3, #0
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	7c3b      	ldrb	r3, [r7, #16]
 80017da:	4413      	add	r3, r2
 80017dc:	743b      	strb	r3, [r7, #16]
		rotary_value = rotary_value_row;
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 80017e0:	7c3b      	ldrb	r3, [r7, #16]
 80017e2:	7013      	strb	r3, [r2, #0]

#if USE_BUZZER
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1406 * rotary_value_row / 16);
#endif

		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 80017e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e8:	4815      	ldr	r0, [pc, #84]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 80017ea:	f003 f87f 	bl	80048ec <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10a      	bne.n	800180a <HAL_TIM_PeriodElapsedCallback+0x882>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 80017f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f8:	4811      	ldr	r0, [pc, #68]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 80017fa:	f003 f877 	bl	80048ec <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <HAL_TIM_PeriodElapsedCallback+0x882>
			enter = 1;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 800180a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180e:	480c      	ldr	r0, [pc, #48]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 8001810:	f003 f86c 	bl	80048ec <HAL_GPIO_ReadPin>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00a      	beq.n	8001830 <HAL_TIM_PeriodElapsedCallback+0x8a8>
				&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 800181a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181e:	4808      	ldr	r0, [pc, #32]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 8001820:	f003 f864 	bl	80048ec <HAL_GPIO_ReadPin>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <HAL_TIM_PeriodElapsedCallback+0x8a8>
			enter = 0;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]

	 if (htim->Instance == TIM7)	// F // 0.1ms
	 {
	 }
	 */
}
 8001830:	bf00      	nop
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800183a:	bf00      	nop
 800183c:	200003c8 	.word	0x200003c8
 8001840:	40020800 	.word	0x40020800
 8001844:	20000735 	.word	0x20000735

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184e:	f001 fcfb 	bl	8003248 <HAL_Init>
  /* USER CODE BEGIN Init */
#if USE_FLASH
	FlashBuffer readrom;
#endif

	enter = 0;
 8001852:	4ba1      	ldr	r3, [pc, #644]	; (8001ad8 <main+0x290>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
	motorenable = 0;
 8001858:	4ba0      	ldr	r3, [pc, #640]	; (8001adc <main+0x294>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
	rotary_value = 0;
 800185e:	4ba0      	ldr	r3, [pc, #640]	; (8001ae0 <main+0x298>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
	LENGTHPERPULSE = PI * TIREDIAMETER / PULSEPERROTATE;
 8001864:	4a9f      	ldr	r2, [pc, #636]	; (8001ae4 <main+0x29c>)
 8001866:	a49a      	add	r4, pc, #616	; (adr r4, 8001ad0 <main+0x288>)
 8001868:	e9d4 3400 	ldrd	r3, r4, [r4]
 800186c:	e9c2 3400 	strd	r3, r4, [r2]
	commonspeed = 0;
 8001870:	4b9d      	ldr	r3, [pc, #628]	; (8001ae8 <main+0x2a0>)
 8001872:	2200      	movs	r2, #0
 8001874:	801a      	strh	r2, [r3, #0]
#if D_PWM
	pwmsteptime = 0;
	pwmstepud = 1;
#endif

	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 8001876:	2300      	movs	r3, #0
 8001878:	71fb      	strb	r3, [r7, #7]
 800187a:	e00d      	b.n	8001898 <main+0x50>
		analogmax[i] = 0;
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4a9b      	ldr	r2, [pc, #620]	; (8001aec <main+0x2a4>)
 8001880:	2100      	movs	r1, #0
 8001882:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmin[i] = 4096;
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	4a99      	ldr	r2, [pc, #612]	; (8001af0 <main+0x2a8>)
 800188a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	3301      	adds	r3, #1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b0b      	cmp	r3, #11
 800189c:	d9ee      	bls.n	800187c <main+0x34>
	}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189e:	f000 f945 	bl	8001b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a2:	f000 fd0d 	bl	80022c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a6:	f000 fceb 	bl	8002280 <MX_DMA_Init>
  MX_ADC1_Init();
 80018aa:	f000 f9a9 	bl	8001c00 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80018ae:	f000 fcbd 	bl	800222c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80018b2:	f000 fc3d 	bl	8002130 <MX_TIM6_Init>
  MX_TIM4_Init();
 80018b6:	f000 fbd7 	bl	8002068 <MX_TIM4_Init>
  MX_TIM1_Init();
 80018ba:	f000 fb29 	bl	8001f10 <MX_TIM1_Init>
  MX_TIM3_Init();
 80018be:	f000 fb7f 	bl	8001fc0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80018c2:	f000 fc6b 	bl	800219c <MX_TIM10_Init>
  MX_TIM11_Init();
 80018c6:	f000 fc8d 	bl	80021e4 <MX_TIM11_Init>
  MX_SPI2_Init();
 80018ca:	f000 faeb 	bl	8001ea4 <MX_SPI2_Init>
  MX_I2C1_Init();
 80018ce:	f000 fabb 	bl	8001e48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 80018d2:	4888      	ldr	r0, [pc, #544]	; (8001af4 <main+0x2ac>)
 80018d4:	f006 f89c 	bl	8007a10 <iprintf>
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 80018d8:	4887      	ldr	r0, [pc, #540]	; (8001af8 <main+0x2b0>)
 80018da:	f006 f90d 	bl	8007af8 <puts>

	printf("Starting Analog Read\r\n");
 80018de:	4887      	ldr	r0, [pc, #540]	; (8001afc <main+0x2b4>)
 80018e0:	f006 f90a 	bl	8007af8 <puts>
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80018e4:	4886      	ldr	r0, [pc, #536]	; (8001b00 <main+0x2b8>)
 80018e6:	f001 fd43 	bl	8003370 <HAL_ADC_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <main+0xac>
		Error_Handler();
 80018f0:	f001 f866 	bl	80029c0 <Error_Handler>
	}

	printf("Starting TIM11\r\n");
 80018f4:	4883      	ldr	r0, [pc, #524]	; (8001b04 <main+0x2bc>)
 80018f6:	f006 f8ff 	bl	8007af8 <puts>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 80018fa:	4883      	ldr	r0, [pc, #524]	; (8001b08 <main+0x2c0>)
 80018fc:	f003 fe4f 	bl	800559e <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if USE_LED
	led_rgb(1, 1, 1);	// White
 8001900:	2201      	movs	r2, #1
 8001902:	2101      	movs	r1, #1
 8001904:	2001      	movs	r0, #1
 8001906:	f000 fdc5 	bl	8002494 <led_rgb>
#if D_LED
		HAL_TIM_Base_Start_IT(&htim6);	// PID
#endif
	while (1) {
#if !D_LED
		printf("///// WHILE /////\n\r");
 800190a:	4880      	ldr	r0, [pc, #512]	; (8001b0c <main+0x2c4>)
 800190c:	f006 f880 	bl	8007a10 <iprintf>
		printf("enter = %d\r\n", enter);
#endif
#if D_ROTARY
		printf("rotary_value = %x\r\n", rotary_value);
#endif
		if (enter) {
 8001910:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <main+0x290>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f8      	beq.n	800190a <main+0xc2>
			switch (rotary_value) {
 8001918:	4b71      	ldr	r3, [pc, #452]	; (8001ae0 <main+0x298>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b0f      	cmp	r3, #15
 800191e:	d8f4      	bhi.n	800190a <main+0xc2>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <main+0xe0>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	08001969 	.word	0x08001969
 800192c:	080019dd 	.word	0x080019dd
 8001930:	08001a29 	.word	0x08001a29
 8001934:	08001a75 	.word	0x08001a75
 8001938:	0800190b 	.word	0x0800190b
 800193c:	0800190b 	.word	0x0800190b
 8001940:	0800190b 	.word	0x0800190b
 8001944:	0800190b 	.word	0x0800190b
 8001948:	0800190b 	.word	0x0800190b
 800194c:	0800190b 	.word	0x0800190b
 8001950:	0800190b 	.word	0x0800190b
 8001954:	0800190b 	.word	0x0800190b
 8001958:	0800190b 	.word	0x0800190b
 800195c:	0800190b 	.word	0x0800190b
 8001960:	0800190b 	.word	0x0800190b
 8001964:	08001ac5 	.word	0x08001ac5
			case 0x0:
#if USE_LED
				led_rgb(1, 1, 0);	// Yellow
 8001968:	2200      	movs	r2, #0
 800196a:	2101      	movs	r1, #1
 800196c:	2001      	movs	r0, #1
 800196e:	f000 fd91 	bl	8002494 <led_rgb>
#endif

				sensor_initialize();
 8001972:	f000 fdef 	bl	8002554 <sensor_initialize>

				while (enter) {
 8001976:	e02a      	b.n	80019ce <main+0x186>
					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 8001978:	2300      	movs	r3, #0
 800197a:	71bb      	strb	r3, [r7, #6]
 800197c:	e021      	b.n	80019c2 <main+0x17a>
						uint16_t analogbuf = analog[j];
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	4a63      	ldr	r2, [pc, #396]	; (8001b10 <main+0x2c8>)
 8001982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001986:	80bb      	strh	r3, [r7, #4]
						analogmax[j] =
								(analogmax[j] < analogbuf) ?
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	4a58      	ldr	r2, [pc, #352]	; (8001aec <main+0x2a4>)
 800198c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
						analogmax[j] =
 8001990:	79bb      	ldrb	r3, [r7, #6]
 8001992:	88b9      	ldrh	r1, [r7, #4]
 8001994:	428a      	cmp	r2, r1
 8001996:	bf38      	it	cc
 8001998:	460a      	movcc	r2, r1
 800199a:	b291      	uxth	r1, r2
 800199c:	4a53      	ldr	r2, [pc, #332]	; (8001aec <main+0x2a4>)
 800199e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
										analogbuf : analogmax[j];
						analogmin[j] =
								(analogmin[j] > analogbuf) ?
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <main+0x2a8>)
 80019a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
						analogmin[j] =
 80019aa:	79bb      	ldrb	r3, [r7, #6]
 80019ac:	88b9      	ldrh	r1, [r7, #4]
 80019ae:	428a      	cmp	r2, r1
 80019b0:	bf28      	it	cs
 80019b2:	460a      	movcs	r2, r1
 80019b4:	b291      	uxth	r1, r2
 80019b6:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <main+0x2a8>)
 80019b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 80019bc:	79bb      	ldrb	r3, [r7, #6]
 80019be:	3301      	adds	r3, #1
 80019c0:	71bb      	strb	r3, [r7, #6]
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	2b0b      	cmp	r3, #11
 80019c6:	d9da      	bls.n	800197e <main+0x136>
						} else {
							printf("\r\n");
						}
#endif
					}
					HAL_Delay(250);
 80019c8:	20fa      	movs	r0, #250	; 0xfa
 80019ca:	f001 fcaf 	bl	800332c <HAL_Delay>
				while (enter) {
 80019ce:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <main+0x290>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1d0      	bne.n	8001978 <main+0x130>
				}
				sensor_finalize();
 80019d6:	f000 fdd9 	bl	800258c <sensor_finalize>
					printf("%4d,", analogmin[i * 2 - 1]);
				}
				printf("\r\n");
				printf(ESC_DEF);
#endif
				break;	// case 0x00:
 80019da:	e078      	b.n	8001ace <main+0x286>
			case 0x1:
				commonspeed = COMMONSPEED1;
 80019dc:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <main+0x2a0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	801a      	strh	r2, [r3, #0]
				kp = KP1;
 80019e2:	4a4c      	ldr	r2, [pc, #304]	; (8001b14 <main+0x2cc>)
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	4c4b      	ldr	r4, [pc, #300]	; (8001b18 <main+0x2d0>)
 80019ea:	e9c2 3400 	strd	r3, r4, [r2]
				kd = KD1;
 80019ee:	4a4b      	ldr	r2, [pc, #300]	; (8001b1c <main+0x2d4>)
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80019f8:	e9c2 3400 	strd	r3, r4, [r2]
				ki = KI1;
 80019fc:	4a48      	ldr	r2, [pc, #288]	; (8001b20 <main+0x2d8>)
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	f04f 0400 	mov.w	r4, #0
 8001a06:	e9c2 3400 	strd	r3, r4, [r2]
				running_initialize();
 8001a0a:	f000 fdc9 	bl	80025a0 <running_initialize>

				while (enter) {
 8001a0e:	e004      	b.n	8001a1a <main+0x1d2>
					d_print();
 8001a10:	f000 fe5e 	bl	80026d0 <d_print>
					HAL_Delay(250);
 8001a14:	20fa      	movs	r0, #250	; 0xfa
 8001a16:	f001 fc89 	bl	800332c <HAL_Delay>
				while (enter) {
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <main+0x290>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f6      	bne.n	8001a10 <main+0x1c8>
				}

				running_finalize();
 8001a22:	f000 fe33 	bl	800268c <running_finalize>
				for (int i = 0; i < ENC_SIZE; i++) {
				}
				writeFlash(start_address, (uint8_t*) &flash_buffer,
						sizeof(FlashBuffer));
#endif
				break;
 8001a26:	e052      	b.n	8001ace <main+0x286>
			case 0x2:
				commonspeed = COMMONSPEED2;
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <main+0x2a0>)
 8001a2a:	2264      	movs	r2, #100	; 0x64
 8001a2c:	801a      	strh	r2, [r3, #0]
				kp = KP2;
 8001a2e:	4a39      	ldr	r2, [pc, #228]	; (8001b14 <main+0x2cc>)
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	4c38      	ldr	r4, [pc, #224]	; (8001b18 <main+0x2d0>)
 8001a36:	e9c2 3400 	strd	r3, r4, [r2]
				kd = KD2;
 8001a3a:	4a38      	ldr	r2, [pc, #224]	; (8001b1c <main+0x2d4>)
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001a44:	e9c2 3400 	strd	r3, r4, [r2]
				ki = KI2;
 8001a48:	4a35      	ldr	r2, [pc, #212]	; (8001b20 <main+0x2d8>)
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	f04f 0400 	mov.w	r4, #0
 8001a52:	e9c2 3400 	strd	r3, r4, [r2]
#if USE_FLASH
				loadFlash(start_address, (uint8_t*) &flash_buffer,
						sizeof(FlashBuffer));
#endif
				running_initialize();
 8001a56:	f000 fda3 	bl	80025a0 <running_initialize>

				while (enter) {
 8001a5a:	e004      	b.n	8001a66 <main+0x21e>
					d_print();
 8001a5c:	f000 fe38 	bl	80026d0 <d_print>
					HAL_Delay(250);
 8001a60:	20fa      	movs	r0, #250	; 0xfa
 8001a62:	f001 fc63 	bl	800332c <HAL_Delay>
				while (enter) {
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <main+0x290>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f6      	bne.n	8001a5c <main+0x214>
				}

				running_finalize();
 8001a6e:	f000 fe0d 	bl	800268c <running_finalize>
				break;
 8001a72:	e02c      	b.n	8001ace <main+0x286>
			case 0x3:
				commonspeed = COMMONSPEED3;
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <main+0x2a0>)
 8001a76:	2264      	movs	r2, #100	; 0x64
 8001a78:	801a      	strh	r2, [r3, #0]
				kp = KP3;
 8001a7a:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <main+0x2cc>)
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	4c28      	ldr	r4, [pc, #160]	; (8001b24 <main+0x2dc>)
 8001a82:	e9c2 3400 	strd	r3, r4, [r2]
				kd = KD3;
 8001a86:	4a25      	ldr	r2, [pc, #148]	; (8001b1c <main+0x2d4>)
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	4c26      	ldr	r4, [pc, #152]	; (8001b28 <main+0x2e0>)
 8001a8e:	e9c2 3400 	strd	r3, r4, [r2]
				ki = KI3;
 8001a92:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <main+0x2d8>)
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	f04f 0400 	mov.w	r4, #0
 8001a9c:	e9c2 3400 	strd	r3, r4, [r2]
				running_initialize();
 8001aa0:	f000 fd7e 	bl	80025a0 <running_initialize>

				while (enter) {
 8001aa4:	e004      	b.n	8001ab0 <main+0x268>
					d_print();
 8001aa6:	f000 fe13 	bl	80026d0 <d_print>
					HAL_Delay(250);
 8001aaa:	20fa      	movs	r0, #250	; 0xfa
 8001aac:	f001 fc3e 	bl	800332c <HAL_Delay>
				while (enter) {
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <main+0x290>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f6      	bne.n	8001aa6 <main+0x25e>
				}

				running_finalize();
 8001ab8:	f000 fde8 	bl	800268c <running_finalize>
				break;
 8001abc:	e007      	b.n	8001ace <main+0x286>
					IMU_printf(&readrom.inertial[i]);
				}
#endif

				while (enter) {
					HAL_Delay(250);
 8001abe:	20fa      	movs	r0, #250	; 0xfa
 8001ac0:	f001 fc34 	bl	800332c <HAL_Delay>
				while (enter) {
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <main+0x290>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f8      	bne.n	8001abe <main+0x276>
				}
				break;
 8001acc:	bf00      	nop
		printf("///// WHILE /////\n\r");
 8001ace:	e71c      	b.n	800190a <main+0xc2>
 8001ad0:	60000000 	.word	0x60000000
 8001ad4:	401921fb 	.word	0x401921fb
 8001ad8:	20000735 	.word	0x20000735
 8001adc:	20000628 	.word	0x20000628
 8001ae0:	200003c8 	.word	0x200003c8
 8001ae4:	200005e0 	.word	0x200005e0
 8001ae8:	200003ce 	.word	0x200003ce
 8001aec:	20000710 	.word	0x20000710
 8001af0:	200003b0 	.word	0x200003b0
 8001af4:	0800b228 	.word	0x0800b228
 8001af8:	0800b230 	.word	0x0800b230
 8001afc:	0800b250 	.word	0x0800b250
 8001b00:	20000418 	.word	0x20000418
 8001b04:	0800b268 	.word	0x0800b268
 8001b08:	20000478 	.word	0x20000478
 8001b0c:	0800b278 	.word	0x0800b278
 8001b10:	20000210 	.word	0x20000210
 8001b14:	20000728 	.word	0x20000728
 8001b18:	40140000 	.word	0x40140000
 8001b1c:	20000238 	.word	0x20000238
 8001b20:	20000548 	.word	0x20000548
 8001b24:	40080000 	.word	0x40080000
 8001b28:	3ff00000 	.word	0x3ff00000

08001b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b094      	sub	sp, #80	; 0x50
 8001b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	2230      	movs	r2, #48	; 0x30
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f005 f922 	bl	8006d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <SystemClock_Config+0xcc>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	4a27      	ldr	r2, [pc, #156]	; (8001bf8 <SystemClock_Config+0xcc>)
 8001b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <SystemClock_Config+0xcc>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <SystemClock_Config+0xd0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <SystemClock_Config+0xd0>)
 8001b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <SystemClock_Config+0xd0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b8c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b92:	2302      	movs	r3, #2
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ba0:	23a8      	movs	r3, #168	; 0xa8
 8001ba2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bac:	f107 0320 	add.w	r3, r7, #32
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 f805 	bl	8004bc0 <HAL_RCC_OscConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bbc:	f000 ff00 	bl	80029c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	2105      	movs	r1, #5
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fa5e 	bl	80050a0 <HAL_RCC_ClockConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bea:	f000 fee9 	bl	80029c0 <Error_Handler>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3750      	adds	r7, #80	; 0x50
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000

08001c00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c06:	463b      	mov	r3, r7
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c12:	4b8a      	ldr	r3, [pc, #552]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c14:	4a8a      	ldr	r2, [pc, #552]	; (8001e40 <MX_ADC1_Init+0x240>)
 8001c16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c18:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c20:	4b86      	ldr	r3, [pc, #536]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c26:	4b85      	ldr	r3, [pc, #532]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c2c:	4b83      	ldr	r3, [pc, #524]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c32:	4b82      	ldr	r3, [pc, #520]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c3a:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c40:	4b7e      	ldr	r3, [pc, #504]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c42:	4a80      	ldr	r2, [pc, #512]	; (8001e44 <MX_ADC1_Init+0x244>)
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c46:	4b7d      	ldr	r3, [pc, #500]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8001c4c:	4b7b      	ldr	r3, [pc, #492]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c4e:	2210      	movs	r2, #16
 8001c50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c52:	4b7a      	ldr	r3, [pc, #488]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c5a:	4b78      	ldr	r3, [pc, #480]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c60:	4876      	ldr	r0, [pc, #472]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c62:	f001 fb85 	bl	8003370 <HAL_ADC_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c6c:	f000 fea8 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001c70:	2309      	movs	r3, #9
 8001c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	4619      	mov	r1, r3
 8001c80:	486e      	ldr	r0, [pc, #440]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c82:	f001 fd09 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c8c:	f000 fe98 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c90:	230a      	movs	r3, #10
 8001c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4867      	ldr	r0, [pc, #412]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001c9e:	f001 fcfb 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ca8:	f000 fe8a 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001cac:	2308      	movs	r3, #8
 8001cae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4860      	ldr	r0, [pc, #384]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001cba:	f001 fced 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001cc4:	f000 fe7c 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001cc8:	230b      	movs	r3, #11
 8001cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4859      	ldr	r0, [pc, #356]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001cd6:	f001 fcdf 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001ce0:	f000 fe6e 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001ce4:	230f      	movs	r3, #15
 8001ce6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001ce8:	2305      	movs	r3, #5
 8001cea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cec:	463b      	mov	r3, r7
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4852      	ldr	r0, [pc, #328]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001cf2:	f001 fcd1 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001cfc:	f000 fe60 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001d00:	230c      	movs	r3, #12
 8001d02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001d04:	2306      	movs	r3, #6
 8001d06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d08:	463b      	mov	r3, r7
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	484b      	ldr	r0, [pc, #300]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001d0e:	f001 fcc3 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001d18:	f000 fe52 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001d1c:	230e      	movs	r3, #14
 8001d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001d20:	2307      	movs	r3, #7
 8001d22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d24:	463b      	mov	r3, r7
 8001d26:	4619      	mov	r1, r3
 8001d28:	4844      	ldr	r0, [pc, #272]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001d2a:	f001 fcb5 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001d34:	f000 fe44 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001d38:	230d      	movs	r3, #13
 8001d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	483d      	ldr	r0, [pc, #244]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001d46:	f001 fca7 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001d50:	f000 fe36 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d54:	2307      	movs	r3, #7
 8001d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001d58:	2309      	movs	r3, #9
 8001d5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4836      	ldr	r0, [pc, #216]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001d62:	f001 fc99 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001d6c:	f000 fe28 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001d74:	230a      	movs	r3, #10
 8001d76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	482f      	ldr	r0, [pc, #188]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001d7e:	f001 fc8b 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001d88:	f000 fe1a 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d8c:	2306      	movs	r3, #6
 8001d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001d90:	230b      	movs	r3, #11
 8001d92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4828      	ldr	r0, [pc, #160]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001d9a:	f001 fc7d 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001da4:	f000 fe0c 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001dac:	230c      	movs	r3, #12
 8001dae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	4821      	ldr	r0, [pc, #132]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001db6:	f001 fc6f 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001dc0:	f000 fdfe 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001dc8:	230d      	movs	r3, #13
 8001dca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4619      	mov	r1, r3
 8001dd0:	481a      	ldr	r0, [pc, #104]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001dd2:	f001 fc61 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001ddc:	f000 fdf0 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001de0:	2302      	movs	r3, #2
 8001de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001de4:	230e      	movs	r3, #14
 8001de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de8:	463b      	mov	r3, r7
 8001dea:	4619      	mov	r1, r3
 8001dec:	4813      	ldr	r0, [pc, #76]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001dee:	f001 fc53 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8001df8:	f000 fde2 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001e00:	230f      	movs	r3, #15
 8001e02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	463b      	mov	r3, r7
 8001e06:	4619      	mov	r1, r3
 8001e08:	480c      	ldr	r0, [pc, #48]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001e0a:	f001 fc45 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001e14:	f000 fdd4 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001e1c:	2310      	movs	r3, #16
 8001e1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e20:	463b      	mov	r3, r7
 8001e22:	4619      	mov	r1, r3
 8001e24:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_ADC1_Init+0x23c>)
 8001e26:	f001 fc37 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8001e30:	f000 fdc6 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000418 	.word	0x20000418
 8001e40:	40012000 	.word	0x40012000
 8001e44:	0f000001 	.word	0x0f000001

08001e48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e4e:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <MX_I2C1_Init+0x54>)
 8001e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_I2C1_Init+0x58>)
 8001e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e86:	f002 fd63 	bl	8004950 <HAL_I2C_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e90:	f000 fd96 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000308 	.word	0x20000308
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	000186a0 	.word	0x000186a0

08001ea4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <MX_SPI2_Init+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ed8:	2220      	movs	r2, #32
 8001eda:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ef0:	220a      	movs	r2, #10
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ef6:	f003 fac3 	bl	8005480 <HAL_SPI_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f00:	f000 fd5e 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000240 	.word	0x20000240
 8001f0c:	40003800 	.word	0x40003800

08001f10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2224      	movs	r2, #36	; 0x24
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 ff30 	bl	8006d84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <MX_TIM1_Init+0xa8>)
 8001f2e:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <MX_TIM1_Init+0xac>)
 8001f30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <MX_TIM1_Init+0xa8>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <MX_TIM1_Init+0xa8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <MX_TIM1_Init+0xa8>)
 8001f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <MX_TIM1_Init+0xa8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <MX_TIM1_Init+0xa8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <MX_TIM1_Init+0xa8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f60:	2301      	movs	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f70:	2301      	movs	r3, #1
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	4619      	mov	r1, r3
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <MX_TIM1_Init+0xa8>)
 8001f84:	f003 fc1c 	bl	80057c0 <HAL_TIM_Encoder_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001f8e:	f000 fd17 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <MX_TIM1_Init+0xa8>)
 8001fa0:	f004 f98a 	bl	80062b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001faa:	f000 fd09 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	3730      	adds	r7, #48	; 0x30
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000594 	.word	0x20000594
 8001fbc:	40010000 	.word	0x40010000

08001fc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	2224      	movs	r2, #36	; 0x24
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 fed8 	bl	8006d84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fdc:	4b20      	ldr	r3, [pc, #128]	; (8002060 <MX_TIM3_Init+0xa0>)
 8001fde:	4a21      	ldr	r2, [pc, #132]	; (8002064 <MX_TIM3_Init+0xa4>)
 8001fe0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <MX_TIM3_Init+0xa0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <MX_TIM3_Init+0xa0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <MX_TIM3_Init+0xa0>)
 8001ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <MX_TIM3_Init+0xa0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <MX_TIM3_Init+0xa0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002002:	2303      	movs	r3, #3
 8002004:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800200a:	2301      	movs	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800201a:	2301      	movs	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	4619      	mov	r1, r3
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <MX_TIM3_Init+0xa0>)
 800202e:	f003 fbc7 	bl	80057c0 <HAL_TIM_Encoder_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002038:	f000 fcc2 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <MX_TIM3_Init+0xa0>)
 800204a:	f004 f935 	bl	80062b8 <HAL_TIMEx_MasterConfigSynchronization>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002054:	f000 fcb4 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002058:	bf00      	nop
 800205a:	3730      	adds	r7, #48	; 0x30
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200003d0 	.word	0x200003d0
 8002064:	40000400 	.word	0x40000400

08002068 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206e:	f107 0320 	add.w	r3, r7, #32
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800208a:	4b27      	ldr	r3, [pc, #156]	; (8002128 <MX_TIM4_Init+0xc0>)
 800208c:	4a27      	ldr	r2, [pc, #156]	; (800212c <MX_TIM4_Init+0xc4>)
 800208e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <MX_TIM4_Init+0xc0>)
 8002092:	2202      	movs	r2, #2
 8002094:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <MX_TIM4_Init+0xc0>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <MX_TIM4_Init+0xc0>)
 800209e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <MX_TIM4_Init+0xc0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <MX_TIM4_Init+0xc0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020b0:	481d      	ldr	r0, [pc, #116]	; (8002128 <MX_TIM4_Init+0xc0>)
 80020b2:	f003 fac3 	bl	800563c <HAL_TIM_PWM_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80020bc:	f000 fc80 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020c8:	f107 0320 	add.w	r3, r7, #32
 80020cc:	4619      	mov	r1, r3
 80020ce:	4816      	ldr	r0, [pc, #88]	; (8002128 <MX_TIM4_Init+0xc0>)
 80020d0:	f004 f8f2 	bl	80062b8 <HAL_TIMEx_MasterConfigSynchronization>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80020da:	f000 fc71 	bl	80029c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020de:	2360      	movs	r3, #96	; 0x60
 80020e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2200      	movs	r2, #0
 80020f2:	4619      	mov	r1, r3
 80020f4:	480c      	ldr	r0, [pc, #48]	; (8002128 <MX_TIM4_Init+0xc0>)
 80020f6:	f003 fd7b 	bl	8005bf0 <HAL_TIM_PWM_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002100:	f000 fc5e 	bl	80029c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2204      	movs	r2, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4807      	ldr	r0, [pc, #28]	; (8002128 <MX_TIM4_Init+0xc0>)
 800210c:	f003 fd70 	bl	8005bf0 <HAL_TIM_PWM_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002116:	f000 fc53 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <MX_TIM4_Init+0xc0>)
 800211c:	f000 fed4 	bl	8002ec8 <HAL_TIM_MspPostInit>

}
 8002120:	bf00      	nop
 8002122:	3728      	adds	r7, #40	; 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200002c0 	.word	0x200002c0
 800212c:	40000800 	.word	0x40000800

08002130 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002136:	463b      	mov	r3, r7
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <MX_TIM6_Init+0x64>)
 8002140:	4a15      	ldr	r2, [pc, #84]	; (8002198 <MX_TIM6_Init+0x68>)
 8002142:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <MX_TIM6_Init+0x64>)
 8002146:	2204      	movs	r2, #4
 8002148:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <MX_TIM6_Init+0x64>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16799;
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <MX_TIM6_Init+0x64>)
 8002152:	f244 129f 	movw	r2, #16799	; 0x419f
 8002156:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_TIM6_Init+0x64>)
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800215e:	480d      	ldr	r0, [pc, #52]	; (8002194 <MX_TIM6_Init+0x64>)
 8002160:	f003 f9f2 	bl	8005548 <HAL_TIM_Base_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800216a:	f000 fc29 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002176:	463b      	mov	r3, r7
 8002178:	4619      	mov	r1, r3
 800217a:	4806      	ldr	r0, [pc, #24]	; (8002194 <MX_TIM6_Init+0x64>)
 800217c:	f004 f89c 	bl	80062b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002186:	f000 fc1b 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000554 	.word	0x20000554
 8002198:	40001000 	.word	0x40001000

0800219c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MX_TIM10_Init+0x40>)
 80021a2:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <MX_TIM10_Init+0x44>)
 80021a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <MX_TIM10_Init+0x40>)
 80021a8:	2204      	movs	r2, #4
 80021aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <MX_TIM10_Init+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <MX_TIM10_Init+0x40>)
 80021b4:	f248 323f 	movw	r2, #33599	; 0x833f
 80021b8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <MX_TIM10_Init+0x40>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_TIM10_Init+0x40>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <MX_TIM10_Init+0x40>)
 80021c8:	f003 f9be 	bl	8005548 <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80021d2:	f000 fbf5 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000035c 	.word	0x2000035c
 80021e0:	40014400 	.word	0x40014400

080021e4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_TIM11_Init+0x40>)
 80021ea:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <MX_TIM11_Init+0x44>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <MX_TIM11_Init+0x40>)
 80021f0:	2204      	movs	r2, #4
 80021f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_TIM11_Init+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <MX_TIM11_Init+0x40>)
 80021fc:	f248 323f 	movw	r2, #33599	; 0x833f
 8002200:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MX_TIM11_Init+0x40>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_TIM11_Init+0x40>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_TIM11_Init+0x40>)
 8002210:	f003 f99a 	bl	8005548 <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800221a:	f000 fbd1 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000478 	.word	0x20000478
 8002228:	40014800 	.word	0x40014800

0800222c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <MX_USART6_UART_Init+0x50>)
 8002234:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002238:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800223c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002252:	220c      	movs	r2, #12
 8002254:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_USART6_UART_Init+0x4c>)
 8002264:	f004 f8b8 	bl	80063d8 <HAL_UART_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800226e:	f000 fba7 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200005e8 	.word	0x200005e8
 800227c:	40011400 	.word	0x40011400

08002280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_DMA_Init+0x3c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <MX_DMA_Init+0x3c>)
 8002290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_DMA_Init+0x3c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	2038      	movs	r0, #56	; 0x38
 80022a8:	f001 fd71 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022ac:	2038      	movs	r0, #56	; 0x38
 80022ae:	f001 fd8a 	bl	8003dc6 <HAL_NVIC_EnableIRQ>

}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b69      	ldr	r3, [pc, #420]	; (8002480 <MX_GPIO_Init+0x1c0>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a68      	ldr	r2, [pc, #416]	; (8002480 <MX_GPIO_Init+0x1c0>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b66      	ldr	r3, [pc, #408]	; (8002480 <MX_GPIO_Init+0x1c0>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b62      	ldr	r3, [pc, #392]	; (8002480 <MX_GPIO_Init+0x1c0>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a61      	ldr	r2, [pc, #388]	; (8002480 <MX_GPIO_Init+0x1c0>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b5f      	ldr	r3, [pc, #380]	; (8002480 <MX_GPIO_Init+0x1c0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b5b      	ldr	r3, [pc, #364]	; (8002480 <MX_GPIO_Init+0x1c0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a5a      	ldr	r2, [pc, #360]	; (8002480 <MX_GPIO_Init+0x1c0>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b58      	ldr	r3, [pc, #352]	; (8002480 <MX_GPIO_Init+0x1c0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	4b54      	ldr	r3, [pc, #336]	; (8002480 <MX_GPIO_Init+0x1c0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a53      	ldr	r2, [pc, #332]	; (8002480 <MX_GPIO_Init+0x1c0>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b51      	ldr	r3, [pc, #324]	; (8002480 <MX_GPIO_Init+0x1c0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4b4d      	ldr	r3, [pc, #308]	; (8002480 <MX_GPIO_Init+0x1c0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a4c      	ldr	r2, [pc, #304]	; (8002480 <MX_GPIO_Init+0x1c0>)
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <MX_GPIO_Init+0x1c0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8002368:	4846      	ldr	r0, [pc, #280]	; (8002484 <MX_GPIO_Init+0x1c4>)
 800236a:	f002 fad7 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002374:	4844      	ldr	r0, [pc, #272]	; (8002488 <MX_GPIO_Init+0x1c8>)
 8002376:	f002 fad1 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002380:	4842      	ldr	r0, [pc, #264]	; (800248c <MX_GPIO_Init+0x1cc>)
 8002382:	f002 facb 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	2104      	movs	r1, #4
 800238a:	4841      	ldr	r0, [pc, #260]	; (8002490 <MX_GPIO_Init+0x1d0>)
 800238c:	f002 fac6 	bl	800491c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8002390:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002396:	2301      	movs	r3, #1
 8002398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	4836      	ldr	r0, [pc, #216]	; (8002484 <MX_GPIO_Init+0x1c4>)
 80023aa:	f002 f905 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 80023ae:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 80023b2:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	4830      	ldr	r0, [pc, #192]	; (8002484 <MX_GPIO_Init+0x1c4>)
 80023c4:	f002 f8f8 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 80023c8:	f640 0304 	movw	r3, #2052	; 0x804
 80023cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	482a      	ldr	r0, [pc, #168]	; (8002488 <MX_GPIO_Init+0x1c8>)
 80023de:	f002 f8eb 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 80023e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e8:	2301      	movs	r3, #1
 80023ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	4823      	ldr	r0, [pc, #140]	; (8002488 <MX_GPIO_Init+0x1c8>)
 80023fc:	f002 f8dc 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8002400:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002406:	2301      	movs	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	481c      	ldr	r0, [pc, #112]	; (800248c <MX_GPIO_Init+0x1cc>)
 800241a:	f002 f8cd 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 800241e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	4816      	ldr	r0, [pc, #88]	; (800248c <MX_GPIO_Init+0x1cc>)
 8002434:	f002 f8c0 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800244a:	2301      	movs	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	480d      	ldr	r0, [pc, #52]	; (800248c <MX_GPIO_Init+0x1cc>)
 8002456:	f002 f8af 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 800245a:	2304      	movs	r3, #4
 800245c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	2301      	movs	r3, #1
 8002460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	4807      	ldr	r0, [pc, #28]	; (8002490 <MX_GPIO_Init+0x1d0>)
 8002472:	f002 f8a1 	bl	80045b8 <HAL_GPIO_Init>

}
 8002476:	bf00      	nop
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40020800 	.word	0x40020800
 8002488:	40020400 	.word	0x40020400
 800248c:	40020000 	.word	0x40020000
 8002490:	40020c00 	.word	0x40020c00

08002494 <led_rgb>:
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 0 : 1;	// Rotary8
	return _rotaryvalue;
}

#if USE_LED
void led_rgb(char r, char g, char b) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
 800249e:	460b      	mov	r3, r1
 80024a0:	71bb      	strb	r3, [r7, #6]
 80024a2:	4613      	mov	r3, r2
 80024a4:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (r) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024b8:	480f      	ldr	r0, [pc, #60]	; (80024f8 <led_rgb+0x64>)
 80024ba:	f002 fa2f 	bl	800491c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 80024be:	79bb      	ldrb	r3, [r7, #6]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024d0:	4809      	ldr	r0, [pc, #36]	; (80024f8 <led_rgb+0x64>)
 80024d2:	f002 fa23 	bl	800491c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 80024d6:	797b      	ldrb	r3, [r7, #5]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024e8:	4804      	ldr	r0, [pc, #16]	; (80024fc <led_rgb+0x68>)
 80024ea:	f002 fa17 	bl	800491c <HAL_GPIO_WritePin>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020800 	.word	0x40020800

08002500 <set_led>:

void set_led(char value)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, (value & 0b01) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// RIGHT
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002520:	480a      	ldr	r0, [pc, #40]	; (800254c <set_led+0x4c>)
 8002522:	f002 f9fb 	bl	800491c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (value & 0b10) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LEFT
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800253c:	4804      	ldr	r0, [pc, #16]	; (8002550 <set_led+0x50>)
 800253e:	f002 f9ed 	bl	800491c <HAL_GPIO_WritePin>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40020800 	.word	0x40020800
 8002550:	40020400 	.word	0x40020400

08002554 <sensor_initialize>:
#endif

void sensor_initialize() {
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
	sensgettime = 0;
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <sensor_initialize+0x2c>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw,
 800255e:	2210      	movs	r2, #16
 8002560:	4908      	ldr	r1, [pc, #32]	; (8002584 <sensor_initialize+0x30>)
 8002562:	4809      	ldr	r0, [pc, #36]	; (8002588 <sensor_initialize+0x34>)
 8002564:	f000 ff48 	bl	80033f8 <HAL_ADC_Start_DMA>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <sensor_initialize+0x1e>
	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
		Error_Handler();
 800256e:	f000 fa27 	bl	80029c0 <Error_Handler>
	}
	HAL_Delay(1000);
 8002572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002576:	f000 fed9 	bl	800332c <HAL_Delay>
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000298 	.word	0x20000298
 8002584:	2000029c 	.word	0x2000029c
 8002588:	20000418 	.word	0x20000418

0800258c <sensor_finalize>:

void sensor_finalize() {
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <sensor_finalize+0x10>)
 8002592:	f001 f823 	bl	80035dc <HAL_ADC_Stop_DMA>
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000418 	.word	0x20000418

080025a0 <running_initialize>:

void running_initialize() {
 80025a0:	b598      	push	{r3, r4, r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	sensor_initialize();
 80025a4:	f7ff ffd6 	bl	8002554 <sensor_initialize>
#if USE_VELOCITY_CONTROL
#if D_VELOCITY_CONTROL_TIMER
	stoptime = 0;
#endif
	encoder_initialize();
 80025a8:	f000 f902 	bl	80027b0 <encoder_initialize>
#endif
	timtim = 0;
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <running_initialize+0xa0>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	801a      	strh	r2, [r3, #0]
	printf("Encoder_Start\r\n");
 80025b2:	4824      	ldr	r0, [pc, #144]	; (8002644 <running_initialize+0xa4>)
 80025b4:	f005 faa0 	bl	8007af8 <puts>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80025b8:	213c      	movs	r1, #60	; 0x3c
 80025ba:	4823      	ldr	r0, [pc, #140]	; (8002648 <running_initialize+0xa8>)
 80025bc:	f003 f992 	bl	80058e4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80025c0:	213c      	movs	r1, #60	; 0x3c
 80025c2:	4822      	ldr	r0, [pc, #136]	; (800264c <running_initialize+0xac>)
 80025c4:	f003 f98e 	bl	80058e4 <HAL_TIM_Encoder_Start>
	subsensbuf = 0;
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <running_initialize+0xb0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
	marker = 0;
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <running_initialize+0xb4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
	sidedeltacount = 0;
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <running_initialize+0xb8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
	markerstate = 0;
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <running_initialize+0xbc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
	rightmarkercount = 0;
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <running_initialize+0xc0>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
#if USE_FLASH
	course_state_time = 0;
#endif
	printf("SIDESENSOR ENCODER\r\n");
 80025e6:	481f      	ldr	r0, [pc, #124]	; (8002664 <running_initialize+0xc4>)
 80025e8:	f005 fa86 	bl	8007af8 <puts>
	HAL_TIM_Base_Start_IT(&htim10);
 80025ec:	481e      	ldr	r0, [pc, #120]	; (8002668 <running_initialize+0xc8>)
 80025ee:	f002 ffd6 	bl	800559e <HAL_TIM_Base_Start_IT>
	leftmotor = 0;
 80025f2:	4a1e      	ldr	r2, [pc, #120]	; (800266c <running_initialize+0xcc>)
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	f04f 0400 	mov.w	r4, #0
 80025fc:	e9c2 3400 	strd	r3, r4, [r2]
	rightmotor = 0;
 8002600:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <running_initialize+0xd0>)
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	f04f 0400 	mov.w	r4, #0
 800260a:	e9c2 3400 	strd	r3, r4, [r2]
	beforedirection = 0;
 800260e:	4b19      	ldr	r3, [pc, #100]	; (8002674 <running_initialize+0xd4>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
	printf("PWM_Start\r\n");
 8002614:	4818      	ldr	r0, [pc, #96]	; (8002678 <running_initialize+0xd8>)
 8002616:	f005 fa6f 	bl	8007af8 <puts>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 800261a:	2100      	movs	r1, #0
 800261c:	4817      	ldr	r0, [pc, #92]	; (800267c <running_initialize+0xdc>)
 800261e:	f003 f839 	bl	8005694 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002622:	2104      	movs	r1, #4
 8002624:	4815      	ldr	r0, [pc, #84]	; (800267c <running_initialize+0xdc>)
 8002626:	f003 f835 	bl	8005694 <HAL_TIM_PWM_Start>
	printf("PID\r\n");
 800262a:	4815      	ldr	r0, [pc, #84]	; (8002680 <running_initialize+0xe0>)
 800262c:	f005 fa64 	bl	8007af8 <puts>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8002630:	4814      	ldr	r0, [pc, #80]	; (8002684 <running_initialize+0xe4>)
 8002632:	f002 ffb4 	bl	800559e <HAL_TIM_Base_Start_IT>
#if PLAY
	motorenable = 1;
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <running_initialize+0xe8>)
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
#endif
}
 800263c:	bf00      	nop
 800263e:	bd98      	pop	{r3, r4, r7, pc}
 8002640:	200002bc 	.word	0x200002bc
 8002644:	0800b28c 	.word	0x0800b28c
 8002648:	20000594 	.word	0x20000594
 800264c:	200003d0 	.word	0x200003d0
 8002650:	200003cc 	.word	0x200003cc
 8002654:	20000550 	.word	0x20000550
 8002658:	20000410 	.word	0x20000410
 800265c:	20000461 	.word	0x20000461
 8002660:	20000734 	.word	0x20000734
 8002664:	0800b29c 	.word	0x0800b29c
 8002668:	2000035c 	.word	0x2000035c
 800266c:	200003a8 	.word	0x200003a8
 8002670:	200003a0 	.word	0x200003a0
 8002674:	20000730 	.word	0x20000730
 8002678:	0800b2b0 	.word	0x0800b2b0
 800267c:	200002c0 	.word	0x200002c0
 8002680:	0800b2bc 	.word	0x0800b2bc
 8002684:	20000554 	.word	0x20000554
 8002688:	20000628 	.word	0x20000628

0800268c <running_finalize>:

void running_finalize() {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	motorenable = 0;
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <running_finalize+0x34>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
	sensor_finalize();
 8002696:	f7ff ff79 	bl	800258c <sensor_finalize>
	HAL_TIM_Base_Stop_IT(&htim6);
 800269a:	480a      	ldr	r0, [pc, #40]	; (80026c4 <running_finalize+0x38>)
 800269c:	f002 ffa3 	bl	80055e6 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80026a0:	2104      	movs	r1, #4
 80026a2:	4809      	ldr	r0, [pc, #36]	; (80026c8 <running_finalize+0x3c>)
 80026a4:	f003 f834 	bl	8005710 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80026a8:	2100      	movs	r1, #0
 80026aa:	4807      	ldr	r0, [pc, #28]	; (80026c8 <running_finalize+0x3c>)
 80026ac:	f003 f830 	bl	8005710 <HAL_TIM_PWM_Stop>
	encoder_finalize();
 80026b0:	f000 f8a4 	bl	80027fc <encoder_finalize>
	HAL_TIM_Base_Stop_IT(&htim10);
 80026b4:	4805      	ldr	r0, [pc, #20]	; (80026cc <running_finalize+0x40>)
 80026b6:	f002 ff96 	bl	80055e6 <HAL_TIM_Base_Stop_IT>
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000628 	.word	0x20000628
 80026c4:	20000554 	.word	0x20000554
 80026c8:	200002c0 	.word	0x200002c0
 80026cc:	2000035c 	.word	0x2000035c

080026d0 <d_print>:

void d_print() {
 80026d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d4:	b08f      	sub	sp, #60	; 0x3c
 80026d6:	af0c      	add	r7, sp, #48	; 0x30
	printf("////////// d_print //////////\r\n");
 80026d8:	482a      	ldr	r0, [pc, #168]	; (8002784 <d_print+0xb4>)
 80026da:	f005 fa0d 	bl	8007af8 <puts>
	printf("nextspeed = %5.3f\r\n", nextspeed_l);
	printf("leftmotor = %5.3f, rightmotor = %5.3f\r\n", leftmotor, rightmotor);
#else
//	printf("LENGTHPERPULSE = %5.3f\r\n", LENGTHPERPULSE);
	printf("encoder = %3.1f\r\nLENGTHPERPULSE = %f\r\nvelocity = %5.3f\r\nvelocity_error = %5.3f, s_velocity_error = %5.3f\r\nvelocity_next = %5.3f\r\nnextspeed = %5.3f\r\n",
			(encoder_l + encoder_r) / (double)2.0f, LENGTHPERPULSE, (velocity_l + velocity_r) / (double)2.0f, velocity_error, s_velocity_error, velocity_next, nextspeed);
 80026de:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <d_print+0xb8>)
 80026e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <d_print+0xbc>)
 80026e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ec:	4413      	add	r3, r2
	printf("encoder = %3.1f\r\nLENGTHPERPULSE = %f\r\nvelocity = %5.3f\r\nvelocity_error = %5.3f, s_velocity_error = %5.3f\r\nvelocity_next = %5.3f\r\nnextspeed = %5.3f\r\n",
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd ff18 	bl	8000524 <__aeabi_i2d>
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026fc:	f7fe f8a6 	bl	800084c <__aeabi_ddiv>
 8002700:	4603      	mov	r3, r0
 8002702:	460c      	mov	r4, r1
 8002704:	e9c7 3400 	strd	r3, r4, [r7]
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <d_print+0xc0>)
 800270a:	e9d3 5600 	ldrd	r5, r6, [r3]
			(encoder_l + encoder_r) / (double)2.0f, LENGTHPERPULSE, (velocity_l + velocity_r) / (double)2.0f, velocity_error, s_velocity_error, velocity_next, nextspeed);
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <d_print+0xc4>)
 8002710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <d_print+0xc8>)
 8002716:	e9d3 3400 	ldrd	r3, r4, [r3]
 800271a:	461a      	mov	r2, r3
 800271c:	4623      	mov	r3, r4
 800271e:	f7fd fdb5 	bl	800028c <__adddf3>
 8002722:	4603      	mov	r3, r0
 8002724:	460c      	mov	r4, r1
 8002726:	4618      	mov	r0, r3
 8002728:	4621      	mov	r1, r4
	printf("encoder = %3.1f\r\nLENGTHPERPULSE = %f\r\nvelocity = %5.3f\r\nvelocity_error = %5.3f, s_velocity_error = %5.3f\r\nvelocity_next = %5.3f\r\nnextspeed = %5.3f\r\n",
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002732:	f7fe f88b 	bl	800084c <__aeabi_ddiv>
 8002736:	4603      	mov	r3, r0
 8002738:	460c      	mov	r4, r1
 800273a:	ec44 3b17 	vmov	d7, r3, r4
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <d_print+0xcc>)
 8002740:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002744:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <d_print+0xd0>)
 8002746:	e9d2 1200 	ldrd	r1, r2, [r2]
 800274a:	4816      	ldr	r0, [pc, #88]	; (80027a4 <d_print+0xd4>)
 800274c:	e9d0 8900 	ldrd	r8, r9, [r0]
 8002750:	4815      	ldr	r0, [pc, #84]	; (80027a8 <d_print+0xd8>)
 8002752:	e9d0 ab00 	ldrd	sl, fp, [r0]
 8002756:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800275a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800275e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8002762:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002766:	ed8d 7b02 	vstr	d7, [sp, #8]
 800276a:	e9cd 5600 	strd	r5, r6, [sp]
 800276e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002772:	480e      	ldr	r0, [pc, #56]	; (80027ac <d_print+0xdc>)
 8002774:	f005 f94c 	bl	8007a10 <iprintf>
#endif	// VELOCITY_CONTROL_RELARIVE
#endif
#if D_MOTOR
	printf("leftmotor = %5.3f, rightmotor = %5.3f\r\n", leftmotor, rightmotor);
#endif
}	// d_print
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002782:	bf00      	nop
 8002784:	0800b2c4 	.word	0x0800b2c4
 8002788:	200004b8 	.word	0x200004b8
 800278c:	20000704 	.word	0x20000704
 8002790:	200005e0 	.word	0x200005e0
 8002794:	20000230 	.word	0x20000230
 8002798:	20000208 	.word	0x20000208
 800279c:	20000228 	.word	0x20000228
 80027a0:	20000300 	.word	0x20000300
 80027a4:	200005d8 	.word	0x200005d8
 80027a8:	20000468 	.word	0x20000468
 80027ac:	0800b2e4 	.word	0x0800b2e4

080027b0 <encoder_initialize>:
	printf("%4d, %4d, %4d\r\n", inertial.gyro.x, inertial.gyro.y,
			inertial.gyro.z);
}
#endif

void encoder_initialize() {
 80027b0:	b598      	push	{r3, r4, r7, lr}
 80027b2:	af00      	add	r7, sp, #0
#if USE_VELOCITY_CONTROL
#if VELOCITY_CONTROL_RELATIVE
	s_velocity_error = 0;
 80027b4:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <encoder_initialize+0x38>)
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	f04f 0400 	mov.w	r4, #0
 80027be:	e9c2 3400 	strd	r3, r4, [r2]
	s_velocity_error_l = 0;
	s_velocity_error_r = 0;
#endif
#endif

	TIM1->CNT = ENCODER_MIDDLE;
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <encoder_initialize+0x3c>)
 80027c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = ENCODER_MIDDLE;
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <encoder_initialize+0x40>)
 80027cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80027d2:	213c      	movs	r1, #60	; 0x3c
 80027d4:	4807      	ldr	r0, [pc, #28]	; (80027f4 <encoder_initialize+0x44>)
 80027d6:	f003 f885 	bl	80058e4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80027da:	213c      	movs	r1, #60	; 0x3c
 80027dc:	4806      	ldr	r0, [pc, #24]	; (80027f8 <encoder_initialize+0x48>)
 80027de:	f003 f881 	bl	80058e4 <HAL_TIM_Encoder_Start>
}
 80027e2:	bf00      	nop
 80027e4:	bd98      	pop	{r3, r4, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000300 	.word	0x20000300
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40000400 	.word	0x40000400
 80027f4:	20000594 	.word	0x20000594
 80027f8:	200003d0 	.word	0x200003d0

080027fc <encoder_finalize>:

void encoder_finalize() {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8002800:	213c      	movs	r1, #60	; 0x3c
 8002802:	4804      	ldr	r0, [pc, #16]	; (8002814 <encoder_finalize+0x18>)
 8002804:	f003 f8a5 	bl	8005952 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8002808:	213c      	movs	r1, #60	; 0x3c
 800280a:	4803      	ldr	r0, [pc, #12]	; (8002818 <encoder_finalize+0x1c>)
 800280c:	f003 f8a1 	bl	8005952 <HAL_TIM_Encoder_Stop>
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000594 	.word	0x20000594
 8002818:	200003d0 	.word	0x200003d0

0800281c <__io_putchar>:

PUTCHAR_PROTOTYPE {
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8002824:	1d39      	adds	r1, r7, #4
 8002826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800282a:	2201      	movs	r2, #1
 800282c:	4803      	ldr	r0, [pc, #12]	; (800283c <__io_putchar+0x20>)
 800282e:	f003 fe20 	bl	8006472 <HAL_UART_Transmit>
	return ch;
 8002832:	687b      	ldr	r3, [r7, #4]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	200005e8 	.word	0x200005e8

08002840 <low_pass_filter>:

double low_pass_filter(double val, double pre_val, double gamma) {
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	ed87 0b04 	vstr	d0, [r7, #16]
 800284a:	ed87 1b02 	vstr	d1, [r7, #8]
 800284e:	ed87 2b00 	vstr	d2, [r7]
	return (double)(gamma * (double)pre_val + (double)(1 - gamma) * (double)val);
 8002852:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800285a:	f7fd fecd 	bl	80005f8 <__aeabi_dmul>
 800285e:	4603      	mov	r3, r0
 8002860:	460c      	mov	r4, r1
 8002862:	4625      	mov	r5, r4
 8002864:	461c      	mov	r4, r3
 8002866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800286a:	f04f 0000 	mov.w	r0, #0
 800286e:	490e      	ldr	r1, [pc, #56]	; (80028a8 <low_pass_filter+0x68>)
 8002870:	f7fd fd0a 	bl	8000288 <__aeabi_dsub>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002880:	f7fd feba 	bl	80005f8 <__aeabi_dmul>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4620      	mov	r0, r4
 800288a:	4629      	mov	r1, r5
 800288c:	f7fd fcfe 	bl	800028c <__adddf3>
 8002890:	4603      	mov	r3, r0
 8002892:	460c      	mov	r4, r1
 8002894:	ec44 3b17 	vmov	d7, r3, r4
}
 8002898:	eeb0 0a47 	vmov.f32	s0, s14
 800289c:	eef0 0a67 	vmov.f32	s1, s15
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bdb0      	pop	{r4, r5, r7, pc}
 80028a6:	bf00      	nop
 80028a8:	3ff00000 	.word	0x3ff00000

080028ac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
 80028ac:	b4b0      	push	{r4, r5, r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	if (sensgettime >= SENSGETCOUNT) {
 80028b4:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <HAL_ADC_ConvCpltCallback+0x104>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d954      	bls.n	8002966 <HAL_ADC_ConvCpltCallback+0xba>
		sensgettime = 0;
 80028bc:	4b3c      	ldr	r3, [pc, #240]	; (80029b0 <HAL_ADC_ConvCpltCallback+0x104>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e04b      	b.n	8002960 <HAL_ADC_ConvCpltCallback+0xb4>
			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 80028c8:	2300      	movs	r3, #0
 80028ca:	73bb      	strb	r3, [r7, #14]
 80028cc:	e039      	b.n	8002942 <HAL_ADC_ConvCpltCallback+0x96>
				for (unsigned char alphaindex = 0; alphaindex > count;
 80028ce:	2300      	movs	r3, #0
 80028d0:	737b      	strb	r3, [r7, #13]
 80028d2:	e02f      	b.n	8002934 <HAL_ADC_ConvCpltCallback+0x88>
						alphaindex--) {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 80028d4:	7b7b      	ldrb	r3, [r7, #13]
 80028d6:	1e5a      	subs	r2, r3, #1
 80028d8:	7bf9      	ldrb	r1, [r7, #15]
 80028da:	4836      	ldr	r0, [pc, #216]	; (80029b4 <HAL_ADC_ConvCpltCallback+0x108>)
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80028ea:	817b      	strh	r3, [r7, #10]
					analogbuffers[alphaindex - 1][index] =
							analogbuffers[alphaindex][index];
 80028ec:	7b79      	ldrb	r1, [r7, #13]
 80028ee:	7bfc      	ldrb	r4, [r7, #15]
					analogbuffers[alphaindex - 1][index] =
 80028f0:	7b7b      	ldrb	r3, [r7, #13]
 80028f2:	1e5a      	subs	r2, r3, #1
 80028f4:	7bf8      	ldrb	r0, [r7, #15]
							analogbuffers[alphaindex][index];
 80028f6:	4d2f      	ldr	r5, [pc, #188]	; (80029b4 <HAL_ADC_ConvCpltCallback+0x108>)
 80028f8:	460b      	mov	r3, r1
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	440b      	add	r3, r1
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4423      	add	r3, r4
 8002902:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
					analogbuffers[alphaindex - 1][index] =
 8002906:	492b      	ldr	r1, [pc, #172]	; (80029b4 <HAL_ADC_ConvCpltCallback+0x108>)
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4403      	add	r3, r0
 8002912:	4622      	mov	r2, r4
 8002914:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8002918:	7b7a      	ldrb	r2, [r7, #13]
 800291a:	7bf9      	ldrb	r1, [r7, #15]
 800291c:	4825      	ldr	r0, [pc, #148]	; (80029b4 <HAL_ADC_ConvCpltCallback+0x108>)
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	897a      	ldrh	r2, [r7, #10]
 800292a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						alphaindex--) {
 800292e:	7b7b      	ldrb	r3, [r7, #13]
 8002930:	3b01      	subs	r3, #1
 8002932:	737b      	strb	r3, [r7, #13]
				for (unsigned char alphaindex = 0; alphaindex > count;
 8002934:	7b7a      	ldrb	r2, [r7, #13]
 8002936:	7bbb      	ldrb	r3, [r7, #14]
 8002938:	429a      	cmp	r2, r3
 800293a:	d8cb      	bhi.n	80028d4 <HAL_ADC_ConvCpltCallback+0x28>
			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 800293c:	7bbb      	ldrb	r3, [r7, #14]
 800293e:	3301      	adds	r3, #1
 8002940:	73bb      	strb	r3, [r7, #14]
 8002942:	7bbb      	ldrb	r3, [r7, #14]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d9c2      	bls.n	80028ce <HAL_ADC_ConvCpltCallback+0x22>
				}
			}
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	4919      	ldr	r1, [pc, #100]	; (80029b4 <HAL_ADC_ConvCpltCallback+0x108>)
 800294e:	3230      	adds	r2, #48	; 0x30
 8002950:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002956:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	3301      	adds	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b0b      	cmp	r3, #11
 8002964:	d9b0      	bls.n	80028c8 <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
 8002966:	2300      	movs	r3, #0
 8002968:	733b      	strb	r3, [r7, #12]
 800296a:	e013      	b.n	8002994 <HAL_ADC_ConvCpltCallback+0xe8>
		analogbuffers[sensgettime][index] = analograw[index];
 800296c:	7b3b      	ldrb	r3, [r7, #12]
 800296e:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <HAL_ADC_ConvCpltCallback+0x104>)
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	4610      	mov	r0, r2
 8002974:	7b3a      	ldrb	r2, [r7, #12]
 8002976:	4911      	ldr	r1, [pc, #68]	; (80029bc <HAL_ADC_ConvCpltCallback+0x110>)
 8002978:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 800297c:	490d      	ldr	r1, [pc, #52]	; (80029b4 <HAL_ADC_ConvCpltCallback+0x108>)
 800297e:	4603      	mov	r3, r0
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4403      	add	r3, r0
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	4622      	mov	r2, r4
 800298a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
 800298e:	7b3b      	ldrb	r3, [r7, #12]
 8002990:	3301      	adds	r3, #1
 8002992:	733b      	strb	r3, [r7, #12]
 8002994:	7b3b      	ldrb	r3, [r7, #12]
 8002996:	2b0b      	cmp	r3, #11
 8002998:	d9e8      	bls.n	800296c <HAL_ADC_ConvCpltCallback+0xc0>
	}
	sensgettime++;
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_ADC_ConvCpltCallback+0x104>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	3301      	adds	r3, #1
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_ADC_ConvCpltCallback+0x104>)
 80029a4:	701a      	strb	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bcb0      	pop	{r4, r5, r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000298 	.word	0x20000298
 80029b4:	2000062c 	.word	0x2000062c
 80029b8:	20000210 	.word	0x20000210
 80029bc:	2000029c 	.word	0x2000029c

080029c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029c6:	e7fe      	b.n	80029c6 <Error_Handler+0x6>

080029c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_MspInit+0x54>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <HAL_MspInit+0x54>)
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_MspInit+0x54>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_MspInit+0x54>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <HAL_MspInit+0x54>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_MspInit+0x54>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	210f      	movs	r1, #15
 8002a0a:	f06f 0003 	mvn.w	r0, #3
 8002a0e:	f001 f9be 	bl	8003d8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800

08002a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	; 0x30
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a49      	ldr	r2, [pc, #292]	; (8002b64 <HAL_ADC_MspInit+0x144>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	f040 808c 	bne.w	8002b5c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	4a46      	ldr	r2, [pc, #280]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a52:	6453      	str	r3, [r2, #68]	; 0x44
 8002a54:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4a3f      	ldr	r2, [pc, #252]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a70:	4b3d      	ldr	r3, [pc, #244]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4a38      	ldr	r2, [pc, #224]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4a31      	ldr	r2, [pc, #196]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002aa2:	f043 0302 	orr.w	r3, r3, #2
 8002aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_ADC_MspInit+0x148>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002ab4:	233f      	movs	r3, #63	; 0x3f
 8002ab6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4829      	ldr	r0, [pc, #164]	; (8002b6c <HAL_ADC_MspInit+0x14c>)
 8002ac8:	f001 fd76 	bl	80045b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002acc:	23ff      	movs	r3, #255	; 0xff
 8002ace:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4619      	mov	r1, r3
 8002ade:	4824      	ldr	r0, [pc, #144]	; (8002b70 <HAL_ADC_MspInit+0x150>)
 8002ae0:	f001 fd6a 	bl	80045b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	f107 031c 	add.w	r3, r7, #28
 8002af4:	4619      	mov	r1, r3
 8002af6:	481f      	ldr	r0, [pc, #124]	; (8002b74 <HAL_ADC_MspInit+0x154>)
 8002af8:	f001 fd5e 	bl	80045b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002afc:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002afe:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <HAL_ADC_MspInit+0x15c>)
 8002b00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b34:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b42:	f001 f95b 	bl	8003dfc <HAL_DMA_Init>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002b4c:	f7ff ff38 	bl	80029c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
 8002b56:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <HAL_ADC_MspInit+0x158>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b5c:	bf00      	nop
 8002b5e:	3730      	adds	r7, #48	; 0x30
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40012000 	.word	0x40012000
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40020000 	.word	0x40020000
 8002b74:	40020400 	.word	0x40020400
 8002b78:	200004e0 	.word	0x200004e0
 8002b7c:	40026410 	.word	0x40026410

08002b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <HAL_I2C_MspInit+0x84>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d12c      	bne.n	8002bfc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_I2C_MspInit+0x88>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a17      	ldr	r2, [pc, #92]	; (8002c08 <HAL_I2C_MspInit+0x88>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_I2C_MspInit+0x88>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc4:	2312      	movs	r3, #18
 8002bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4619      	mov	r1, r3
 8002bda:	480c      	ldr	r0, [pc, #48]	; (8002c0c <HAL_I2C_MspInit+0x8c>)
 8002bdc:	f001 fcec 	bl	80045b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_I2C_MspInit+0x88>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <HAL_I2C_MspInit+0x88>)
 8002bea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_I2C_MspInit+0x88>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bfc:	bf00      	nop
 8002bfe:	3728      	adds	r7, #40	; 0x28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40005400 	.word	0x40005400
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40020400 	.word	0x40020400

08002c10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <HAL_SPI_MspInit+0x84>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d12c      	bne.n	8002c8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_SPI_MspInit+0x88>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_SPI_MspInit+0x88>)
 8002c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_SPI_MspInit+0x88>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_SPI_MspInit+0x88>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_SPI_MspInit+0x88>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_SPI_MspInit+0x88>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002c6a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c7c:	2305      	movs	r3, #5
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	4619      	mov	r1, r3
 8002c86:	4805      	ldr	r0, [pc, #20]	; (8002c9c <HAL_SPI_MspInit+0x8c>)
 8002c88:	f001 fc96 	bl	80045b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c8c:	bf00      	nop
 8002c8e:	3728      	adds	r7, #40	; 0x28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40003800 	.word	0x40003800
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020400 	.word	0x40020400

08002ca0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 031c 	add.w	r3, r7, #28
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a3a      	ldr	r2, [pc, #232]	; (8002da8 <HAL_TIM_Encoder_MspInit+0x108>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d13d      	bne.n	8002d3e <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	4b39      	ldr	r3, [pc, #228]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	4a38      	ldr	r2, [pc, #224]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	4b32      	ldr	r3, [pc, #200]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a31      	ldr	r2, [pc, #196]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8002cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	4619      	mov	r1, r3
 8002d16:	4826      	ldr	r0, [pc, #152]	; (8002db0 <HAL_TIM_Encoder_MspInit+0x110>)
 8002d18:	f001 fc4e 	bl	80045b8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2019      	movs	r0, #25
 8002d22:	f001 f834 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d26:	2019      	movs	r0, #25
 8002d28:	f001 f84d 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	201a      	movs	r0, #26
 8002d32:	f001 f82c 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002d36:	201a      	movs	r0, #26
 8002d38:	f001 f845 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d3c:	e030      	b.n	8002da0 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <HAL_TIM_Encoder_MspInit+0x114>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d12b      	bne.n	8002da0 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	4a16      	ldr	r2, [pc, #88]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	6413      	str	r3, [r2, #64]	; 0x40
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	6313      	str	r3, [r2, #48]	; 0x30
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8002d80:	2330      	movs	r3, #48	; 0x30
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d90:	2302      	movs	r3, #2
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4807      	ldr	r0, [pc, #28]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x118>)
 8002d9c:	f001 fc0c 	bl	80045b8 <HAL_GPIO_Init>
}
 8002da0:	bf00      	nop
 8002da2:	3730      	adds	r7, #48	; 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40020400 	.word	0x40020400

08002dbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10d      	bne.n	8002dea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_TIM_PWM_MspInit+0x40>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <HAL_TIM_PWM_MspInit+0x40>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <HAL_TIM_PWM_MspInit+0x40>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40000800 	.word	0x40000800
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2a      	ldr	r2, [pc, #168]	; (8002eb8 <HAL_TIM_Base_MspInit+0xb8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d116      	bne.n	8002e40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_TIM_Base_MspInit+0xbc>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_TIM_Base_MspInit+0xbc>)
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <HAL_TIM_Base_MspInit+0xbc>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2036      	movs	r0, #54	; 0x36
 8002e34:	f000 ffab 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e38:	2036      	movs	r0, #54	; 0x36
 8002e3a:	f000 ffc4 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002e3e:	e036      	b.n	8002eae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <HAL_TIM_Base_MspInit+0xc0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d116      	bne.n	8002e78 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_TIM_Base_MspInit+0xbc>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <HAL_TIM_Base_MspInit+0xbc>)
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e58:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5a:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <HAL_TIM_Base_MspInit+0xbc>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2019      	movs	r0, #25
 8002e6c:	f000 ff8f 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e70:	2019      	movs	r0, #25
 8002e72:	f000 ffa8 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
}
 8002e76:	e01a      	b.n	8002eae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d115      	bne.n	8002eae <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_TIM_Base_MspInit+0xbc>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <HAL_TIM_Base_MspInit+0xbc>)
 8002e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_TIM_Base_MspInit+0xbc>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	201a      	movs	r0, #26
 8002ea4:	f000 ff73 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ea8:	201a      	movs	r0, #26
 8002eaa:	f000 ff8c 	bl	8003dc6 <HAL_NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40001000 	.word	0x40001000
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800

08002ec8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <HAL_TIM_MspPostInit+0x68>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d11d      	bne.n	8002f26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_TIM_MspPostInit+0x6c>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <HAL_TIM_MspPostInit+0x6c>)
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_TIM_MspPostInit+0x6c>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8002f06:	23c0      	movs	r3, #192	; 0xc0
 8002f08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1a:	f107 030c 	add.w	r3, r7, #12
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4805      	ldr	r0, [pc, #20]	; (8002f38 <HAL_TIM_MspPostInit+0x70>)
 8002f22:	f001 fb49 	bl	80045b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f26:	bf00      	nop
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40020400 	.word	0x40020400

08002f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <HAL_UART_MspInit+0x84>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d12b      	bne.n	8002fb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <HAL_UART_MspInit+0x88>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_UART_MspInit+0x88>)
 8002f68:	f043 0320 	orr.w	r3, r3, #32
 8002f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <HAL_UART_MspInit+0x88>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_UART_MspInit+0x88>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a10      	ldr	r2, [pc, #64]	; (8002fc4 <HAL_UART_MspInit+0x88>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <HAL_UART_MspInit+0x88>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f96:	23c0      	movs	r3, #192	; 0xc0
 8002f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <HAL_UART_MspInit+0x8c>)
 8002fb2:	f001 fb01 	bl	80045b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002fb6:	bf00      	nop
 8002fb8:	3728      	adds	r7, #40	; 0x28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40011400 	.word	0x40011400
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40020800 	.word	0x40020800

08002fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fd0:	e7fe      	b.n	8002fd0 <NMI_Handler+0x4>

08002fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd6:	e7fe      	b.n	8002fd6 <HardFault_Handler+0x4>

08002fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fdc:	e7fe      	b.n	8002fdc <MemManage_Handler+0x4>

08002fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fe2:	e7fe      	b.n	8002fe2 <BusFault_Handler+0x4>

08002fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe8:	e7fe      	b.n	8002fe8 <UsageFault_Handler+0x4>

08002fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003018:	f000 f968 	bl	80032ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	bd80      	pop	{r7, pc}

08003020 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003024:	4803      	ldr	r0, [pc, #12]	; (8003034 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003026:	f002 fcdb 	bl	80059e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800302a:	4803      	ldr	r0, [pc, #12]	; (8003038 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800302c:	f002 fcd8 	bl	80059e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000594 	.word	0x20000594
 8003038:	2000035c 	.word	0x2000035c

0800303c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003040:	4803      	ldr	r0, [pc, #12]	; (8003050 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003042:	f002 fccd 	bl	80059e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003046:	4803      	ldr	r0, [pc, #12]	; (8003054 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003048:	f002 fcca 	bl	80059e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000594 	.word	0x20000594
 8003054:	20000478 	.word	0x20000478

08003058 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800305c:	4802      	ldr	r0, [pc, #8]	; (8003068 <TIM6_DAC_IRQHandler+0x10>)
 800305e:	f002 fcbf 	bl	80059e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000554 	.word	0x20000554

0800306c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <DMA2_Stream0_IRQHandler+0x10>)
 8003072:	f001 f839 	bl	80040e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200004e0 	.word	0x200004e0

08003080 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	e00a      	b.n	80030a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003092:	f3af 8000 	nop.w
 8003096:	4601      	mov	r1, r0
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	60ba      	str	r2, [r7, #8]
 800309e:	b2ca      	uxtb	r2, r1
 80030a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	3301      	adds	r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	dbf0      	blt.n	8003092 <_read+0x12>
	}

return len;
 80030b0:	687b      	ldr	r3, [r7, #4]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e009      	b.n	80030e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	60ba      	str	r2, [r7, #8]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fba1 	bl	800281c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3301      	adds	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dbf1      	blt.n	80030cc <_write+0x12>
	}
	return len;
 80030e8:	687b      	ldr	r3, [r7, #4]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_close>:

int _close(int file)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
	return -1;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800311a:	605a      	str	r2, [r3, #4]
	return 0;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <_isatty>:

int _isatty(int file)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
	return 1;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
	return 0;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <_sbrk+0x5c>)
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <_sbrk+0x60>)
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <_sbrk+0x64>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <_sbrk+0x64>)
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <_sbrk+0x68>)
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <_sbrk+0x64>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	429a      	cmp	r2, r3
 800318a:	d207      	bcs.n	800319c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800318c:	f003 fdd0 	bl	8006d30 <__errno>
 8003190:	4602      	mov	r2, r0
 8003192:	230c      	movs	r3, #12
 8003194:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	e009      	b.n	80031b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <_sbrk+0x64>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <_sbrk+0x64>)
 80031ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20020000 	.word	0x20020000
 80031bc:	00000400 	.word	0x00000400
 80031c0:	200001fc 	.word	0x200001fc
 80031c4:	20000740 	.word	0x20000740

080031c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <SystemInit+0x28>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	4a07      	ldr	r2, [pc, #28]	; (80031f0 <SystemInit+0x28>)
 80031d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <SystemInit+0x28>)
 80031de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031e2:	609a      	str	r2, [r3, #8]
#endif
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800322c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031fa:	e003      	b.n	8003204 <LoopCopyDataInit>

080031fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003200:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003202:	3104      	adds	r1, #4

08003204 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003204:	480b      	ldr	r0, [pc, #44]	; (8003234 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003208:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800320a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800320c:	d3f6      	bcc.n	80031fc <CopyDataInit>
  ldr  r2, =_sbss
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003210:	e002      	b.n	8003218 <LoopFillZerobss>

08003212 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003212:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003214:	f842 3b04 	str.w	r3, [r2], #4

08003218 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800321a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800321c:	d3f9      	bcc.n	8003212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800321e:	f7ff ffd3 	bl	80031c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003222:	f003 fd8b 	bl	8006d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003226:	f7fe fb0f 	bl	8001848 <main>
  bx  lr    
 800322a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800322c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003230:	0800b6d0 	.word	0x0800b6d0
  ldr  r0, =_sdata
 8003234:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003238:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800323c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003240:	20000740 	.word	0x20000740

08003244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003244:	e7fe      	b.n	8003244 <ADC_IRQHandler>
	...

08003248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800324c:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <HAL_Init+0x40>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0d      	ldr	r2, [pc, #52]	; (8003288 <HAL_Init+0x40>)
 8003252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_Init+0x40>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_Init+0x40>)
 800325e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <HAL_Init+0x40>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a07      	ldr	r2, [pc, #28]	; (8003288 <HAL_Init+0x40>)
 800326a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003270:	2003      	movs	r0, #3
 8003272:	f000 fd81 	bl	8003d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003276:	2000      	movs	r0, #0
 8003278:	f000 f808 	bl	800328c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800327c:	f7ff fba4 	bl	80029c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00

0800328c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_InitTick+0x54>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_InitTick+0x58>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fd99 	bl	8003de2 <HAL_SYSTICK_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e00e      	b.n	80032d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b0f      	cmp	r3, #15
 80032be:	d80a      	bhi.n	80032d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c0:	2200      	movs	r2, #0
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	f04f 30ff 	mov.w	r0, #4294967295
 80032c8:	f000 fd61 	bl	8003d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032cc:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <HAL_InitTick+0x5c>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000008 	.word	0x20000008
 80032e8:	20000004 	.word	0x20000004

080032ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_IncTick+0x20>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x24>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_IncTick+0x24>)
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000008 	.word	0x20000008
 8003310:	20000738 	.word	0x20000738

08003314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return uwTick;
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <HAL_GetTick+0x14>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000738 	.word	0x20000738

0800332c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003334:	f7ff ffee 	bl	8003314 <HAL_GetTick>
 8003338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d005      	beq.n	8003352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_Delay+0x40>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003352:	bf00      	nop
 8003354:	f7ff ffde 	bl	8003314 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d8f7      	bhi.n	8003354 <HAL_Delay+0x28>
  {
  }
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000008 	.word	0x20000008

08003370 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e033      	b.n	80033ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fb46 	bl	8002a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d118      	bne.n	80033e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033b6:	f023 0302 	bic.w	r3, r3, #2
 80033ba:	f043 0202 	orr.w	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fa8a 	bl	80038dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
 80033de:	e001      	b.n	80033e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_ADC_Start_DMA+0x1e>
 8003412:	2302      	movs	r3, #2
 8003414:	e0cc      	b.n	80035b0 <HAL_ADC_Start_DMA+0x1b8>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d018      	beq.n	800345e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800343c:	4b5e      	ldr	r3, [pc, #376]	; (80035b8 <HAL_ADC_Start_DMA+0x1c0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a5e      	ldr	r2, [pc, #376]	; (80035bc <HAL_ADC_Start_DMA+0x1c4>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	0c9a      	lsrs	r2, r3, #18
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003450:	e002      	b.n	8003458 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3b01      	subs	r3, #1
 8003456:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f9      	bne.n	8003452 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 80a0 	bne.w	80035ae <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003498:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d106      	bne.n	80034bc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f023 0206 	bic.w	r2, r3, #6
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
 80034ba:	e002      	b.n	80034c2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_ADC_Start_DMA+0x1c8>)
 80034cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	4a3c      	ldr	r2, [pc, #240]	; (80035c4 <HAL_ADC_Start_DMA+0x1cc>)
 80034d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	4a3b      	ldr	r2, [pc, #236]	; (80035c8 <HAL_ADC_Start_DMA+0x1d0>)
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	4a3a      	ldr	r2, [pc, #232]	; (80035cc <HAL_ADC_Start_DMA+0x1d4>)
 80034e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80034fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800350e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	334c      	adds	r3, #76	; 0x4c
 800351a:	4619      	mov	r1, r3
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f000 fd1a 	bl	8003f58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2b00      	cmp	r3, #0
 800352e:	d12a      	bne.n	8003586 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a26      	ldr	r2, [pc, #152]	; (80035d0 <HAL_ADC_Start_DMA+0x1d8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d015      	beq.n	8003566 <HAL_ADC_Start_DMA+0x16e>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <HAL_ADC_Start_DMA+0x1dc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d105      	bne.n	8003550 <HAL_ADC_Start_DMA+0x158>
 8003544:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <HAL_ADC_Start_DMA+0x1c8>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <HAL_ADC_Start_DMA+0x1e0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d129      	bne.n	80035ae <HAL_ADC_Start_DMA+0x1b6>
 800355a:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_ADC_Start_DMA+0x1c8>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d823      	bhi.n	80035ae <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d11c      	bne.n	80035ae <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	e013      	b.n	80035ae <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a11      	ldr	r2, [pc, #68]	; (80035d0 <HAL_ADC_Start_DMA+0x1d8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10e      	bne.n	80035ae <HAL_ADC_Start_DMA+0x1b6>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d107      	bne.n	80035ae <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035ac:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000000 	.word	0x20000000
 80035bc:	431bde83 	.word	0x431bde83
 80035c0:	40012300 	.word	0x40012300
 80035c4:	08003ad5 	.word	0x08003ad5
 80035c8:	08003b8f 	.word	0x08003b8f
 80035cc:	08003bab 	.word	0x08003bab
 80035d0:	40012000 	.word	0x40012000
 80035d4:	40012100 	.word	0x40012100
 80035d8:	40012200 	.word	0x40012200

080035dc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ADC_Stop_DMA+0x1a>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e038      	b.n	8003668 <HAL_ADC_Stop_DMA+0x8c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d120      	bne.n	800365e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800362a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fce9 	bl	8004008 <HAL_DMA_Abort>
 8003636:	4603      	mov	r3, r0
 8003638:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003648:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	f043 0201 	orr.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x1c>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e105      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x228>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b09      	cmp	r3, #9
 80036c2:	d925      	bls.n	8003710 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68d9      	ldr	r1, [r3, #12]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	3b1e      	subs	r3, #30
 80036da:	2207      	movs	r2, #7
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43da      	mvns	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	400a      	ands	r2, r1
 80036e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68d9      	ldr	r1, [r3, #12]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	4618      	mov	r0, r3
 80036fc:	4603      	mov	r3, r0
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4403      	add	r3, r0
 8003702:	3b1e      	subs	r3, #30
 8003704:	409a      	lsls	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	e022      	b.n	8003756 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6919      	ldr	r1, [r3, #16]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	4613      	mov	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4413      	add	r3, r2
 8003724:	2207      	movs	r2, #7
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43da      	mvns	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	400a      	ands	r2, r1
 8003732:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6919      	ldr	r1, [r3, #16]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	b29b      	uxth	r3, r3
 8003744:	4618      	mov	r0, r3
 8003746:	4603      	mov	r3, r0
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4403      	add	r3, r0
 800374c:	409a      	lsls	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b06      	cmp	r3, #6
 800375c:	d824      	bhi.n	80037a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	3b05      	subs	r3, #5
 8003770:	221f      	movs	r2, #31
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	400a      	ands	r2, r1
 800377e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	4618      	mov	r0, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	3b05      	subs	r3, #5
 800379a:	fa00 f203 	lsl.w	r2, r0, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	635a      	str	r2, [r3, #52]	; 0x34
 80037a6:	e04c      	b.n	8003842 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b0c      	cmp	r3, #12
 80037ae:	d824      	bhi.n	80037fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	3b23      	subs	r3, #35	; 0x23
 80037c2:	221f      	movs	r2, #31
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43da      	mvns	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	400a      	ands	r2, r1
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4618      	mov	r0, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	3b23      	subs	r3, #35	; 0x23
 80037ec:	fa00 f203 	lsl.w	r2, r0, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
 80037f8:	e023      	b.n	8003842 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	3b41      	subs	r3, #65	; 0x41
 800380c:	221f      	movs	r2, #31
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	400a      	ands	r2, r1
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	4618      	mov	r0, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	3b41      	subs	r3, #65	; 0x41
 8003836:	fa00 f203 	lsl.w	r2, r0, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003842:	4b22      	ldr	r3, [pc, #136]	; (80038cc <HAL_ADC_ConfigChannel+0x234>)
 8003844:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <HAL_ADC_ConfigChannel+0x238>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d109      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x1cc>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b12      	cmp	r3, #18
 8003856:	d105      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <HAL_ADC_ConfigChannel+0x238>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d123      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x21e>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b10      	cmp	r3, #16
 8003874:	d003      	beq.n	800387e <HAL_ADC_ConfigChannel+0x1e6>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b11      	cmp	r3, #17
 800387c:	d11b      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b10      	cmp	r3, #16
 8003890:	d111      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_ADC_ConfigChannel+0x23c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <HAL_ADC_ConfigChannel+0x240>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	0c9a      	lsrs	r2, r3, #18
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038a8:	e002      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f9      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40012300 	.word	0x40012300
 80038d0:	40012000 	.word	0x40012000
 80038d4:	20000000 	.word	0x20000000
 80038d8:	431bde83 	.word	0x431bde83

080038dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038e4:	4b79      	ldr	r3, [pc, #484]	; (8003acc <ADC_Init+0x1f0>)
 80038e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	021a      	lsls	r2, r3, #8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6899      	ldr	r1, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <ADC_Init+0x1f4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d022      	beq.n	80039ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003982:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6899      	ldr	r1, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	e00f      	b.n	80039da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0202 	bic.w	r2, r2, #2
 80039e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6899      	ldr	r1, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	7e1b      	ldrb	r3, [r3, #24]
 80039f4:	005a      	lsls	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01b      	beq.n	8003a40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6859      	ldr	r1, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	3b01      	subs	r3, #1
 8003a34:	035a      	lsls	r2, r3, #13
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	e007      	b.n	8003a50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	051a      	lsls	r2, r3, #20
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a92:	025a      	lsls	r2, r3, #9
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6899      	ldr	r1, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	029a      	lsls	r2, r3, #10
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40012300 	.word	0x40012300
 8003ad0:	0f000001 	.word	0x0f000001

08003ad4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d13c      	bne.n	8003b68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d12b      	bne.n	8003b60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d127      	bne.n	8003b60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d006      	beq.n	8003b2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d119      	bne.n	8003b60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0220 	bic.w	r2, r2, #32
 8003b3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f043 0201 	orr.w	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7fe fea3 	bl	80028ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b66:	e00e      	b.n	8003b86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff fd85 	bl	8003684 <HAL_ADC_ErrorCallback>
}
 8003b7a:	e004      	b.n	8003b86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff fd67 	bl	8003670 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7ff fd5a 	bl	8003684 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <__NVIC_SetPriorityGrouping+0x44>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c0a:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <__NVIC_SetPriorityGrouping+0x44>)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	60d3      	str	r3, [r2, #12]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <__NVIC_GetPriorityGrouping+0x18>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	f003 0307 	and.w	r3, r3, #7
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	db0b      	blt.n	8003c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	f003 021f 	and.w	r2, r3, #31
 8003c54:	4907      	ldr	r1, [pc, #28]	; (8003c74 <__NVIC_EnableIRQ+0x38>)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	e000e100 	.word	0xe000e100

08003c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	db0a      	blt.n	8003ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	490c      	ldr	r1, [pc, #48]	; (8003cc4 <__NVIC_SetPriority+0x4c>)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	0112      	lsls	r2, r2, #4
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca0:	e00a      	b.n	8003cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	4908      	ldr	r1, [pc, #32]	; (8003cc8 <__NVIC_SetPriority+0x50>)
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	3b04      	subs	r3, #4
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	761a      	strb	r2, [r3, #24]
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000e100 	.word	0xe000e100
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f1c3 0307 	rsb	r3, r3, #7
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	bf28      	it	cs
 8003cea:	2304      	movcs	r3, #4
 8003cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	2b06      	cmp	r3, #6
 8003cf4:	d902      	bls.n	8003cfc <NVIC_EncodePriority+0x30>
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3b03      	subs	r3, #3
 8003cfa:	e000      	b.n	8003cfe <NVIC_EncodePriority+0x32>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d00:	f04f 32ff 	mov.w	r2, #4294967295
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43da      	mvns	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	401a      	ands	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d14:	f04f 31ff 	mov.w	r1, #4294967295
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	43d9      	mvns	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d24:	4313      	orrs	r3, r2
         );
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3724      	adds	r7, #36	; 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d44:	d301      	bcc.n	8003d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00f      	b.n	8003d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <SysTick_Config+0x40>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d52:	210f      	movs	r1, #15
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	f7ff ff8e 	bl	8003c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <SysTick_Config+0x40>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d62:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <SysTick_Config+0x40>)
 8003d64:	2207      	movs	r2, #7
 8003d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000e010 	.word	0xe000e010

08003d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff29 	bl	8003bd8 <__NVIC_SetPriorityGrouping>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da0:	f7ff ff3e 	bl	8003c20 <__NVIC_GetPriorityGrouping>
 8003da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	6978      	ldr	r0, [r7, #20]
 8003dac:	f7ff ff8e 	bl	8003ccc <NVIC_EncodePriority>
 8003db0:	4602      	mov	r2, r0
 8003db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff5d 	bl	8003c78 <__NVIC_SetPriority>
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	4603      	mov	r3, r0
 8003dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff31 	bl	8003c3c <__NVIC_EnableIRQ>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ffa2 	bl	8003d34 <SysTick_Config>
 8003df0:	4603      	mov	r3, r0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e08:	f7ff fa84 	bl	8003314 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e099      	b.n	8003f4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e38:	e00f      	b.n	8003e5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e3a:	f7ff fa6b 	bl	8003314 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d908      	bls.n	8003e5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2203      	movs	r2, #3
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e078      	b.n	8003f4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e8      	bne.n	8003e3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <HAL_DMA_Init+0x158>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d107      	bne.n	8003ec4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0307 	bic.w	r3, r3, #7
 8003eda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d117      	bne.n	8003f1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00e      	beq.n	8003f1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fadf 	bl	80044c4 <DMA_CheckFifoParam>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2240      	movs	r2, #64	; 0x40
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e016      	b.n	8003f4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fa96 	bl	8004458 <DMA_CalcBaseAndBitshift>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	223f      	movs	r2, #63	; 0x3f
 8003f36:	409a      	lsls	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	f010803f 	.word	0xf010803f

08003f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_DMA_Start_IT+0x26>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e040      	b.n	8004000 <HAL_DMA_Start_IT+0xa8>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d12f      	bne.n	8003ff2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2202      	movs	r2, #2
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fa28 	bl	80043fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	223f      	movs	r2, #63	; 0x3f
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0216 	orr.w	r2, r2, #22
 8003fc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0208 	orr.w	r2, r2, #8
 8003fde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e005      	b.n	8003ffe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004016:	f7ff f97d 	bl	8003314 <HAL_GetTick>
 800401a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d008      	beq.n	800403a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e052      	b.n	80040e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0216 	bic.w	r2, r2, #22
 8004048:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004058:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <HAL_DMA_Abort+0x62>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0208 	bic.w	r2, r2, #8
 8004078:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800408a:	e013      	b.n	80040b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800408c:	f7ff f942 	bl	8003314 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b05      	cmp	r3, #5
 8004098:	d90c      	bls.n	80040b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2203      	movs	r2, #3
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e015      	b.n	80040e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e4      	bne.n	800408c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	223f      	movs	r2, #63	; 0x3f
 80040c8:	409a      	lsls	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040f4:	4b92      	ldr	r3, [pc, #584]	; (8004340 <HAL_DMA_IRQHandler+0x258>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a92      	ldr	r2, [pc, #584]	; (8004344 <HAL_DMA_IRQHandler+0x25c>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0a9b      	lsrs	r3, r3, #10
 8004100:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	2208      	movs	r2, #8
 8004114:	409a      	lsls	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4013      	ands	r3, r2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01a      	beq.n	8004154 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d013      	beq.n	8004154 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0204 	bic.w	r2, r2, #4
 800413a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	2208      	movs	r2, #8
 8004142:	409a      	lsls	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f043 0201 	orr.w	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	2201      	movs	r2, #1
 800415a:	409a      	lsls	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d012      	beq.n	800418a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004176:	2201      	movs	r2, #1
 8004178:	409a      	lsls	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	f043 0202 	orr.w	r2, r3, #2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	2204      	movs	r2, #4
 8004190:	409a      	lsls	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d012      	beq.n	80041c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	2204      	movs	r2, #4
 80041ae:	409a      	lsls	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0204 	orr.w	r2, r3, #4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2210      	movs	r2, #16
 80041c6:	409a      	lsls	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d043      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d03c      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	2210      	movs	r2, #16
 80041e4:	409a      	lsls	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d018      	beq.n	800422a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d108      	bne.n	8004218 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d024      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4798      	blx	r3
 8004216:	e01f      	b.n	8004258 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
 8004228:	e016      	b.n	8004258 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0208 	bic.w	r2, r2, #8
 8004246:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	2220      	movs	r2, #32
 800425e:	409a      	lsls	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 808e 	beq.w	8004386 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8086 	beq.w	8004386 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	2220      	movs	r2, #32
 8004280:	409a      	lsls	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b05      	cmp	r3, #5
 8004290:	d136      	bne.n	8004300 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0216 	bic.w	r2, r2, #22
 80042a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x1da>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0208 	bic.w	r2, r2, #8
 80042d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d6:	223f      	movs	r2, #63	; 0x3f
 80042d8:	409a      	lsls	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d07d      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
        }
        return;
 80042fe:	e078      	b.n	80043f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01c      	beq.n	8004348 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d108      	bne.n	800432e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	2b00      	cmp	r3, #0
 8004322:	d030      	beq.n	8004386 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
 800432c:	e02b      	b.n	8004386 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d027      	beq.n	8004386 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
 800433e:	e022      	b.n	8004386 <HAL_DMA_IRQHandler+0x29e>
 8004340:	20000000 	.word	0x20000000
 8004344:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10f      	bne.n	8004376 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0210 	bic.w	r2, r2, #16
 8004364:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	2b00      	cmp	r3, #0
 800438c:	d032      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d022      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2205      	movs	r2, #5
 800439e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0201 	bic.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60bb      	str	r3, [r7, #8]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d307      	bcc.n	80043ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f2      	bne.n	80043b2 <HAL_DMA_IRQHandler+0x2ca>
 80043cc:	e000      	b.n	80043d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80043ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	4798      	blx	r3
 80043f0:	e000      	b.n	80043f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80043f2:	bf00      	nop
    }
  }
}
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop

080043fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004418:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d108      	bne.n	800443c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800443a:	e007      	b.n	800444c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	3b10      	subs	r3, #16
 8004468:	4a14      	ldr	r2, [pc, #80]	; (80044bc <DMA_CalcBaseAndBitshift+0x64>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004472:	4a13      	ldr	r2, [pc, #76]	; (80044c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b03      	cmp	r3, #3
 8004484:	d909      	bls.n	800449a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800448e:	f023 0303 	bic.w	r3, r3, #3
 8004492:	1d1a      	adds	r2, r3, #4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	659a      	str	r2, [r3, #88]	; 0x58
 8004498:	e007      	b.n	80044aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	aaaaaaab 	.word	0xaaaaaaab
 80044c0:	0800b394 	.word	0x0800b394

080044c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11f      	bne.n	800451e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d855      	bhi.n	8004590 <DMA_CheckFifoParam+0xcc>
 80044e4:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <DMA_CheckFifoParam+0x28>)
 80044e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ea:	bf00      	nop
 80044ec:	080044fd 	.word	0x080044fd
 80044f0:	0800450f 	.word	0x0800450f
 80044f4:	080044fd 	.word	0x080044fd
 80044f8:	08004591 	.word	0x08004591
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d045      	beq.n	8004594 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450c:	e042      	b.n	8004594 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004512:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004516:	d13f      	bne.n	8004598 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451c:	e03c      	b.n	8004598 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004526:	d121      	bne.n	800456c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b03      	cmp	r3, #3
 800452c:	d836      	bhi.n	800459c <DMA_CheckFifoParam+0xd8>
 800452e:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <DMA_CheckFifoParam+0x70>)
 8004530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004534:	08004545 	.word	0x08004545
 8004538:	0800454b 	.word	0x0800454b
 800453c:	08004545 	.word	0x08004545
 8004540:	0800455d 	.word	0x0800455d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      break;
 8004548:	e02f      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d024      	beq.n	80045a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800455a:	e021      	b.n	80045a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004564:	d11e      	bne.n	80045a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800456a:	e01b      	b.n	80045a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d902      	bls.n	8004578 <DMA_CheckFifoParam+0xb4>
 8004572:	2b03      	cmp	r3, #3
 8004574:	d003      	beq.n	800457e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004576:	e018      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
      break;
 800457c:	e015      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00e      	beq.n	80045a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
      break;
 800458e:	e00b      	b.n	80045a8 <DMA_CheckFifoParam+0xe4>
      break;
 8004590:	bf00      	nop
 8004592:	e00a      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
      break;
 8004594:	bf00      	nop
 8004596:	e008      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
      break;
 8004598:	bf00      	nop
 800459a:	e006      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
      break;
 800459c:	bf00      	nop
 800459e:	e004      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
      break;
 80045a0:	bf00      	nop
 80045a2:	e002      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
      break;   
 80045a4:	bf00      	nop
 80045a6:	e000      	b.n	80045aa <DMA_CheckFifoParam+0xe6>
      break;
 80045a8:	bf00      	nop
    }
  } 
  
  return status; 
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	; 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	e16b      	b.n	80048ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045d4:	2201      	movs	r2, #1
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	f040 815a 	bne.w	80048a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d00b      	beq.n	8004612 <HAL_GPIO_Init+0x5a>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d007      	beq.n	8004612 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004606:	2b11      	cmp	r3, #17
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b12      	cmp	r3, #18
 8004610:	d130      	bne.n	8004674 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2203      	movs	r2, #3
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4013      	ands	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004648:	2201      	movs	r2, #1
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 0201 	and.w	r2, r3, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	2203      	movs	r2, #3
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	43db      	mvns	r3, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4013      	ands	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d003      	beq.n	80046b4 <HAL_GPIO_Init+0xfc>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b12      	cmp	r3, #18
 80046b2:	d123      	bne.n	80046fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	08da      	lsrs	r2, r3, #3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3208      	adds	r2, #8
 80046bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	220f      	movs	r2, #15
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4013      	ands	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	08da      	lsrs	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3208      	adds	r2, #8
 80046f6:	69b9      	ldr	r1, [r7, #24]
 80046f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	2203      	movs	r2, #3
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0203 	and.w	r2, r3, #3
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80b4 	beq.w	80048a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <HAL_GPIO_Init+0x308>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	4a5e      	ldr	r2, [pc, #376]	; (80048c0 <HAL_GPIO_Init+0x308>)
 8004748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800474c:	6453      	str	r3, [r2, #68]	; 0x44
 800474e:	4b5c      	ldr	r3, [pc, #368]	; (80048c0 <HAL_GPIO_Init+0x308>)
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800475a:	4a5a      	ldr	r2, [pc, #360]	; (80048c4 <HAL_GPIO_Init+0x30c>)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	3302      	adds	r3, #2
 8004762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	220f      	movs	r2, #15
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4013      	ands	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a51      	ldr	r2, [pc, #324]	; (80048c8 <HAL_GPIO_Init+0x310>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d02b      	beq.n	80047de <HAL_GPIO_Init+0x226>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a50      	ldr	r2, [pc, #320]	; (80048cc <HAL_GPIO_Init+0x314>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d025      	beq.n	80047da <HAL_GPIO_Init+0x222>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a4f      	ldr	r2, [pc, #316]	; (80048d0 <HAL_GPIO_Init+0x318>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01f      	beq.n	80047d6 <HAL_GPIO_Init+0x21e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a4e      	ldr	r2, [pc, #312]	; (80048d4 <HAL_GPIO_Init+0x31c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d019      	beq.n	80047d2 <HAL_GPIO_Init+0x21a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a4d      	ldr	r2, [pc, #308]	; (80048d8 <HAL_GPIO_Init+0x320>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <HAL_GPIO_Init+0x216>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a4c      	ldr	r2, [pc, #304]	; (80048dc <HAL_GPIO_Init+0x324>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00d      	beq.n	80047ca <HAL_GPIO_Init+0x212>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a4b      	ldr	r2, [pc, #300]	; (80048e0 <HAL_GPIO_Init+0x328>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d007      	beq.n	80047c6 <HAL_GPIO_Init+0x20e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a4a      	ldr	r2, [pc, #296]	; (80048e4 <HAL_GPIO_Init+0x32c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <HAL_GPIO_Init+0x20a>
 80047be:	2307      	movs	r3, #7
 80047c0:	e00e      	b.n	80047e0 <HAL_GPIO_Init+0x228>
 80047c2:	2308      	movs	r3, #8
 80047c4:	e00c      	b.n	80047e0 <HAL_GPIO_Init+0x228>
 80047c6:	2306      	movs	r3, #6
 80047c8:	e00a      	b.n	80047e0 <HAL_GPIO_Init+0x228>
 80047ca:	2305      	movs	r3, #5
 80047cc:	e008      	b.n	80047e0 <HAL_GPIO_Init+0x228>
 80047ce:	2304      	movs	r3, #4
 80047d0:	e006      	b.n	80047e0 <HAL_GPIO_Init+0x228>
 80047d2:	2303      	movs	r3, #3
 80047d4:	e004      	b.n	80047e0 <HAL_GPIO_Init+0x228>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e002      	b.n	80047e0 <HAL_GPIO_Init+0x228>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_GPIO_Init+0x228>
 80047de:	2300      	movs	r3, #0
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	f002 0203 	and.w	r2, r2, #3
 80047e6:	0092      	lsls	r2, r2, #2
 80047e8:	4093      	lsls	r3, r2
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f0:	4934      	ldr	r1, [pc, #208]	; (80048c4 <HAL_GPIO_Init+0x30c>)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	3302      	adds	r3, #2
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047fe:	4b3a      	ldr	r3, [pc, #232]	; (80048e8 <HAL_GPIO_Init+0x330>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	43db      	mvns	r3, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4013      	ands	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004822:	4a31      	ldr	r2, [pc, #196]	; (80048e8 <HAL_GPIO_Init+0x330>)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004828:	4b2f      	ldr	r3, [pc, #188]	; (80048e8 <HAL_GPIO_Init+0x330>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	43db      	mvns	r3, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4013      	ands	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800484c:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <HAL_GPIO_Init+0x330>)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004852:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <HAL_GPIO_Init+0x330>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	43db      	mvns	r3, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4013      	ands	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004876:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <HAL_GPIO_Init+0x330>)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800487c:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <HAL_GPIO_Init+0x330>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048a0:	4a11      	ldr	r2, [pc, #68]	; (80048e8 <HAL_GPIO_Init+0x330>)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	3301      	adds	r3, #1
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b0f      	cmp	r3, #15
 80048b0:	f67f ae90 	bls.w	80045d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048b4:	bf00      	nop
 80048b6:	3724      	adds	r7, #36	; 0x24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40013800 	.word	0x40013800
 80048c8:	40020000 	.word	0x40020000
 80048cc:	40020400 	.word	0x40020400
 80048d0:	40020800 	.word	0x40020800
 80048d4:	40020c00 	.word	0x40020c00
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40021400 	.word	0x40021400
 80048e0:	40021800 	.word	0x40021800
 80048e4:	40021c00 	.word	0x40021c00
 80048e8:	40013c00 	.word	0x40013c00

080048ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	887b      	ldrh	r3, [r7, #2]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	e001      	b.n	800490e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	807b      	strh	r3, [r7, #2]
 8004928:	4613      	mov	r3, r2
 800492a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800492c:	787b      	ldrb	r3, [r7, #1]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004938:	e003      	b.n	8004942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800493a:	887b      	ldrh	r3, [r7, #2]
 800493c:	041a      	lsls	r2, r3, #16
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	619a      	str	r2, [r3, #24]
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e11f      	b.n	8004ba2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fe f902 	bl	8002b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2224      	movs	r2, #36	; 0x24
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049b4:	f000 fd3c 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 80049b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	4a7b      	ldr	r2, [pc, #492]	; (8004bac <HAL_I2C_Init+0x25c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d807      	bhi.n	80049d4 <HAL_I2C_Init+0x84>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a7a      	ldr	r2, [pc, #488]	; (8004bb0 <HAL_I2C_Init+0x260>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	bf94      	ite	ls
 80049cc:	2301      	movls	r3, #1
 80049ce:	2300      	movhi	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e006      	b.n	80049e2 <HAL_I2C_Init+0x92>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a77      	ldr	r2, [pc, #476]	; (8004bb4 <HAL_I2C_Init+0x264>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	bf94      	ite	ls
 80049dc:	2301      	movls	r3, #1
 80049de:	2300      	movhi	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e0db      	b.n	8004ba2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a72      	ldr	r2, [pc, #456]	; (8004bb8 <HAL_I2C_Init+0x268>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	0c9b      	lsrs	r3, r3, #18
 80049f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a64      	ldr	r2, [pc, #400]	; (8004bac <HAL_I2C_Init+0x25c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d802      	bhi.n	8004a24 <HAL_I2C_Init+0xd4>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	3301      	adds	r3, #1
 8004a22:	e009      	b.n	8004a38 <HAL_I2C_Init+0xe8>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	4a63      	ldr	r2, [pc, #396]	; (8004bbc <HAL_I2C_Init+0x26c>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	099b      	lsrs	r3, r3, #6
 8004a36:	3301      	adds	r3, #1
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4956      	ldr	r1, [pc, #344]	; (8004bac <HAL_I2C_Init+0x25c>)
 8004a54:	428b      	cmp	r3, r1
 8004a56:	d80d      	bhi.n	8004a74 <HAL_I2C_Init+0x124>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1e59      	subs	r1, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	bf38      	it	cc
 8004a70:	2304      	movcc	r3, #4
 8004a72:	e04f      	b.n	8004b14 <HAL_I2C_Init+0x1c4>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d111      	bne.n	8004aa0 <HAL_I2C_Init+0x150>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1e58      	subs	r0, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	440b      	add	r3, r1
 8004a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	e012      	b.n	8004ac6 <HAL_I2C_Init+0x176>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1e58      	subs	r0, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	0099      	lsls	r1, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_I2C_Init+0x17e>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e022      	b.n	8004b14 <HAL_I2C_Init+0x1c4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10e      	bne.n	8004af4 <HAL_I2C_Init+0x1a4>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1e58      	subs	r0, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6859      	ldr	r1, [r3, #4]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	440b      	add	r3, r1
 8004ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ae8:	3301      	adds	r3, #1
 8004aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af2:	e00f      	b.n	8004b14 <HAL_I2C_Init+0x1c4>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	1e58      	subs	r0, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6859      	ldr	r1, [r3, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	0099      	lsls	r1, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	6809      	ldr	r1, [r1, #0]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69da      	ldr	r2, [r3, #28]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6911      	ldr	r1, [r2, #16]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68d2      	ldr	r2, [r2, #12]
 8004b4e:	4311      	orrs	r1, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	000186a0 	.word	0x000186a0
 8004bb0:	001e847f 	.word	0x001e847f
 8004bb4:	003d08ff 	.word	0x003d08ff
 8004bb8:	431bde83 	.word	0x431bde83
 8004bbc:	10624dd3 	.word	0x10624dd3

08004bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e25b      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d075      	beq.n	8004cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bde:	4ba3      	ldr	r3, [pc, #652]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d00c      	beq.n	8004c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bea:	4ba0      	ldr	r3, [pc, #640]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d112      	bne.n	8004c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf6:	4b9d      	ldr	r3, [pc, #628]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c02:	d10b      	bne.n	8004c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c04:	4b99      	ldr	r3, [pc, #612]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d05b      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x108>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d157      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e236      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c24:	d106      	bne.n	8004c34 <HAL_RCC_OscConfig+0x74>
 8004c26:	4b91      	ldr	r3, [pc, #580]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a90      	ldr	r2, [pc, #576]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e01d      	b.n	8004c70 <HAL_RCC_OscConfig+0xb0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCC_OscConfig+0x98>
 8004c3e:	4b8b      	ldr	r3, [pc, #556]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a8a      	ldr	r2, [pc, #552]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a87      	ldr	r2, [pc, #540]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e00b      	b.n	8004c70 <HAL_RCC_OscConfig+0xb0>
 8004c58:	4b84      	ldr	r3, [pc, #528]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a83      	ldr	r2, [pc, #524]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4b81      	ldr	r3, [pc, #516]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a80      	ldr	r2, [pc, #512]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d013      	beq.n	8004ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fe fb4c 	bl	8003314 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c80:	f7fe fb48 	bl	8003314 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	; 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e1fb      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0xc0>
 8004c9e:	e014      	b.n	8004cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fb38 	bl	8003314 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fe fb34 	bl	8003314 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e1e7      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cba:	4b6c      	ldr	r3, [pc, #432]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0xe8>
 8004cc6:	e000      	b.n	8004cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d063      	beq.n	8004d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cd6:	4b65      	ldr	r3, [pc, #404]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce2:	4b62      	ldr	r3, [pc, #392]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d11c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cee:	4b5f      	ldr	r3, [pc, #380]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d116      	bne.n	8004d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfa:	4b5c      	ldr	r3, [pc, #368]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_RCC_OscConfig+0x152>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d001      	beq.n	8004d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e1bb      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d12:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4952      	ldr	r1, [pc, #328]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d26:	e03a      	b.n	8004d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d020      	beq.n	8004d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d30:	4b4f      	ldr	r3, [pc, #316]	; (8004e70 <HAL_RCC_OscConfig+0x2b0>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d36:	f7fe faed 	bl	8003314 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d3e:	f7fe fae9 	bl	8003314 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e19c      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d50:	4b46      	ldr	r3, [pc, #280]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5c:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4940      	ldr	r1, [pc, #256]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]
 8004d70:	e015      	b.n	8004d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d72:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <HAL_RCC_OscConfig+0x2b0>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fe facc 	bl	8003314 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d80:	f7fe fac8 	bl	8003314 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e17b      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d92:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d030      	beq.n	8004e0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db2:	4b30      	ldr	r3, [pc, #192]	; (8004e74 <HAL_RCC_OscConfig+0x2b4>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fe faac 	bl	8003314 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc0:	f7fe faa8 	bl	8003314 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e15b      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd2:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x200>
 8004dde:	e015      	b.n	8004e0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de0:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <HAL_RCC_OscConfig+0x2b4>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de6:	f7fe fa95 	bl	8003314 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dee:	f7fe fa91 	bl	8003314 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e144      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e00:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f0      	bne.n	8004dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80a0 	beq.w	8004f5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10f      	bne.n	8004e4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e38:	6413      	str	r3, [r2, #64]	; 0x40
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e46:	2301      	movs	r3, #1
 8004e48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_OscConfig+0x2b8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d121      	bne.n	8004e9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_RCC_OscConfig+0x2b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a07      	ldr	r2, [pc, #28]	; (8004e78 <HAL_RCC_OscConfig+0x2b8>)
 8004e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e62:	f7fe fa57 	bl	8003314 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e68:	e011      	b.n	8004e8e <HAL_RCC_OscConfig+0x2ce>
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	42470000 	.word	0x42470000
 8004e74:	42470e80 	.word	0x42470e80
 8004e78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7c:	f7fe fa4a 	bl	8003314 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e0fd      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8e:	4b81      	ldr	r3, [pc, #516]	; (8005094 <HAL_RCC_OscConfig+0x4d4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d106      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x2f0>
 8004ea2:	4b7d      	ldr	r3, [pc, #500]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	4a7c      	ldr	r2, [pc, #496]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70
 8004eae:	e01c      	b.n	8004eea <HAL_RCC_OscConfig+0x32a>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b05      	cmp	r3, #5
 8004eb6:	d10c      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x312>
 8004eb8:	4b77      	ldr	r3, [pc, #476]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	4a76      	ldr	r2, [pc, #472]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004ebe:	f043 0304 	orr.w	r3, r3, #4
 8004ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec4:	4b74      	ldr	r3, [pc, #464]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a73      	ldr	r2, [pc, #460]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed0:	e00b      	b.n	8004eea <HAL_RCC_OscConfig+0x32a>
 8004ed2:	4b71      	ldr	r3, [pc, #452]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	4a70      	ldr	r2, [pc, #448]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ede:	4b6e      	ldr	r3, [pc, #440]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	4a6d      	ldr	r2, [pc, #436]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004ee4:	f023 0304 	bic.w	r3, r3, #4
 8004ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d015      	beq.n	8004f1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef2:	f7fe fa0f 	bl	8003314 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef8:	e00a      	b.n	8004f10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efa:	f7fe fa0b 	bl	8003314 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e0bc      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f10:	4b61      	ldr	r3, [pc, #388]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0ee      	beq.n	8004efa <HAL_RCC_OscConfig+0x33a>
 8004f1c:	e014      	b.n	8004f48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1e:	f7fe f9f9 	bl	8003314 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f24:	e00a      	b.n	8004f3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7fe f9f5 	bl	8003314 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e0a6      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3c:	4b56      	ldr	r3, [pc, #344]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ee      	bne.n	8004f26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4e:	4b52      	ldr	r3, [pc, #328]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	4a51      	ldr	r2, [pc, #324]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8092 	beq.w	8005088 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f64:	4b4c      	ldr	r3, [pc, #304]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 030c 	and.w	r3, r3, #12
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d05c      	beq.n	800502a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d141      	bne.n	8004ffc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f78:	4b48      	ldr	r3, [pc, #288]	; (800509c <HAL_RCC_OscConfig+0x4dc>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7e:	f7fe f9c9 	bl	8003314 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f86:	f7fe f9c5 	bl	8003314 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e078      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f98:	4b3f      	ldr	r3, [pc, #252]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1f0      	bne.n	8004f86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	019b      	lsls	r3, r3, #6
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	041b      	lsls	r3, r3, #16
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	061b      	lsls	r3, r3, #24
 8004fc8:	4933      	ldr	r1, [pc, #204]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fce:	4b33      	ldr	r3, [pc, #204]	; (800509c <HAL_RCC_OscConfig+0x4dc>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fe f99e 	bl	8003314 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fe f99a 	bl	8003314 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e04d      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	4b2a      	ldr	r3, [pc, #168]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x41c>
 8004ffa:	e045      	b.n	8005088 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffc:	4b27      	ldr	r3, [pc, #156]	; (800509c <HAL_RCC_OscConfig+0x4dc>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005002:	f7fe f987 	bl	8003314 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500a:	f7fe f983 	bl	8003314 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e036      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501c:	4b1e      	ldr	r3, [pc, #120]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f0      	bne.n	800500a <HAL_RCC_OscConfig+0x44a>
 8005028:	e02e      	b.n	8005088 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e029      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005036:	4b18      	ldr	r3, [pc, #96]	; (8005098 <HAL_RCC_OscConfig+0x4d8>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	429a      	cmp	r2, r3
 8005048:	d11c      	bne.n	8005084 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d115      	bne.n	8005084 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800505e:	4013      	ands	r3, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005064:	4293      	cmp	r3, r2
 8005066:	d10d      	bne.n	8005084 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d106      	bne.n	8005084 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40007000 	.word	0x40007000
 8005098:	40023800 	.word	0x40023800
 800509c:	42470060 	.word	0x42470060

080050a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0cc      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b4:	4b68      	ldr	r3, [pc, #416]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d90c      	bls.n	80050dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c2:	4b65      	ldr	r3, [pc, #404]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ca:	4b63      	ldr	r3, [pc, #396]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0b8      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f4:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4a58      	ldr	r2, [pc, #352]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800510c:	4b53      	ldr	r3, [pc, #332]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4a52      	ldr	r2, [pc, #328]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005118:	4b50      	ldr	r3, [pc, #320]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	494d      	ldr	r1, [pc, #308]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d044      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d107      	bne.n	800514e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513e:	4b47      	ldr	r3, [pc, #284]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d119      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e07f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d003      	beq.n	800515e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515a:	2b03      	cmp	r3, #3
 800515c:	d107      	bne.n	800516e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515e:	4b3f      	ldr	r3, [pc, #252]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e06f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516e:	4b3b      	ldr	r3, [pc, #236]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e067      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517e:	4b37      	ldr	r3, [pc, #220]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f023 0203 	bic.w	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	4934      	ldr	r1, [pc, #208]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	4313      	orrs	r3, r2
 800518e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005190:	f7fe f8c0 	bl	8003314 <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005196:	e00a      	b.n	80051ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005198:	f7fe f8bc 	bl	8003314 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e04f      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	4b2b      	ldr	r3, [pc, #172]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 020c 	and.w	r2, r3, #12
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	429a      	cmp	r2, r3
 80051be:	d1eb      	bne.n	8005198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051c0:	4b25      	ldr	r3, [pc, #148]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d20c      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ce:	4b22      	ldr	r3, [pc, #136]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d6:	4b20      	ldr	r3, [pc, #128]	; (8005258 <HAL_RCC_ClockConfig+0x1b8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d001      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e032      	b.n	800524e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4916      	ldr	r1, [pc, #88]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	490e      	ldr	r1, [pc, #56]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005226:	f000 f821 	bl	800526c <HAL_RCC_GetSysClockFreq>
 800522a:	4601      	mov	r1, r0
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	091b      	lsrs	r3, r3, #4
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	4a0a      	ldr	r2, [pc, #40]	; (8005260 <HAL_RCC_ClockConfig+0x1c0>)
 8005238:	5cd3      	ldrb	r3, [r2, r3]
 800523a:	fa21 f303 	lsr.w	r3, r1, r3
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <HAL_RCC_ClockConfig+0x1c4>)
 8005240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <HAL_RCC_ClockConfig+0x1c8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe f820 	bl	800328c <HAL_InitTick>

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40023c00 	.word	0x40023c00
 800525c:	40023800 	.word	0x40023800
 8005260:	0800b37c 	.word	0x0800b37c
 8005264:	20000000 	.word	0x20000000
 8005268:	20000004 	.word	0x20000004

0800526c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800526c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	607b      	str	r3, [r7, #4]
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	2300      	movs	r3, #0
 800527c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005282:	4b63      	ldr	r3, [pc, #396]	; (8005410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 030c 	and.w	r3, r3, #12
 800528a:	2b04      	cmp	r3, #4
 800528c:	d007      	beq.n	800529e <HAL_RCC_GetSysClockFreq+0x32>
 800528e:	2b08      	cmp	r3, #8
 8005290:	d008      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x38>
 8005292:	2b00      	cmp	r3, #0
 8005294:	f040 80b4 	bne.w	8005400 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005298:	4b5e      	ldr	r3, [pc, #376]	; (8005414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800529a:	60bb      	str	r3, [r7, #8]
       break;
 800529c:	e0b3      	b.n	8005406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800529e:	4b5d      	ldr	r3, [pc, #372]	; (8005414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052a0:	60bb      	str	r3, [r7, #8]
      break;
 80052a2:	e0b0      	b.n	8005406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a4:	4b5a      	ldr	r3, [pc, #360]	; (8005410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ae:	4b58      	ldr	r3, [pc, #352]	; (8005410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d04a      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ba:	4b55      	ldr	r3, [pc, #340]	; (8005410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	099b      	lsrs	r3, r3, #6
 80052c0:	f04f 0400 	mov.w	r4, #0
 80052c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	ea03 0501 	and.w	r5, r3, r1
 80052d0:	ea04 0602 	and.w	r6, r4, r2
 80052d4:	4629      	mov	r1, r5
 80052d6:	4632      	mov	r2, r6
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	0154      	lsls	r4, r2, #5
 80052e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052e6:	014b      	lsls	r3, r1, #5
 80052e8:	4619      	mov	r1, r3
 80052ea:	4622      	mov	r2, r4
 80052ec:	1b49      	subs	r1, r1, r5
 80052ee:	eb62 0206 	sbc.w	r2, r2, r6
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	f04f 0400 	mov.w	r4, #0
 80052fa:	0194      	lsls	r4, r2, #6
 80052fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005300:	018b      	lsls	r3, r1, #6
 8005302:	1a5b      	subs	r3, r3, r1
 8005304:	eb64 0402 	sbc.w	r4, r4, r2
 8005308:	f04f 0100 	mov.w	r1, #0
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	00e2      	lsls	r2, r4, #3
 8005312:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005316:	00d9      	lsls	r1, r3, #3
 8005318:	460b      	mov	r3, r1
 800531a:	4614      	mov	r4, r2
 800531c:	195b      	adds	r3, r3, r5
 800531e:	eb44 0406 	adc.w	r4, r4, r6
 8005322:	f04f 0100 	mov.w	r1, #0
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	02a2      	lsls	r2, r4, #10
 800532c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005330:	0299      	lsls	r1, r3, #10
 8005332:	460b      	mov	r3, r1
 8005334:	4614      	mov	r4, r2
 8005336:	4618      	mov	r0, r3
 8005338:	4621      	mov	r1, r4
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f04f 0400 	mov.w	r4, #0
 8005340:	461a      	mov	r2, r3
 8005342:	4623      	mov	r3, r4
 8005344:	f7fb fca0 	bl	8000c88 <__aeabi_uldivmod>
 8005348:	4603      	mov	r3, r0
 800534a:	460c      	mov	r4, r1
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e049      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005350:	4b2f      	ldr	r3, [pc, #188]	; (8005410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	f04f 0400 	mov.w	r4, #0
 800535a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	ea03 0501 	and.w	r5, r3, r1
 8005366:	ea04 0602 	and.w	r6, r4, r2
 800536a:	4629      	mov	r1, r5
 800536c:	4632      	mov	r2, r6
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	f04f 0400 	mov.w	r4, #0
 8005376:	0154      	lsls	r4, r2, #5
 8005378:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800537c:	014b      	lsls	r3, r1, #5
 800537e:	4619      	mov	r1, r3
 8005380:	4622      	mov	r2, r4
 8005382:	1b49      	subs	r1, r1, r5
 8005384:	eb62 0206 	sbc.w	r2, r2, r6
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	f04f 0400 	mov.w	r4, #0
 8005390:	0194      	lsls	r4, r2, #6
 8005392:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005396:	018b      	lsls	r3, r1, #6
 8005398:	1a5b      	subs	r3, r3, r1
 800539a:	eb64 0402 	sbc.w	r4, r4, r2
 800539e:	f04f 0100 	mov.w	r1, #0
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	00e2      	lsls	r2, r4, #3
 80053a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053ac:	00d9      	lsls	r1, r3, #3
 80053ae:	460b      	mov	r3, r1
 80053b0:	4614      	mov	r4, r2
 80053b2:	195b      	adds	r3, r3, r5
 80053b4:	eb44 0406 	adc.w	r4, r4, r6
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	02a2      	lsls	r2, r4, #10
 80053c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053c6:	0299      	lsls	r1, r3, #10
 80053c8:	460b      	mov	r3, r1
 80053ca:	4614      	mov	r4, r2
 80053cc:	4618      	mov	r0, r3
 80053ce:	4621      	mov	r1, r4
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f04f 0400 	mov.w	r4, #0
 80053d6:	461a      	mov	r2, r3
 80053d8:	4623      	mov	r3, r4
 80053da:	f7fb fc55 	bl	8000c88 <__aeabi_uldivmod>
 80053de:	4603      	mov	r3, r0
 80053e0:	460c      	mov	r4, r1
 80053e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	0c1b      	lsrs	r3, r3, #16
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	3301      	adds	r3, #1
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fc:	60bb      	str	r3, [r7, #8]
      break;
 80053fe:	e002      	b.n	8005406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005400:	4b04      	ldr	r3, [pc, #16]	; (8005414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005402:	60bb      	str	r3, [r7, #8]
      break;
 8005404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005406:	68bb      	ldr	r3, [r7, #8]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005410:	40023800 	.word	0x40023800
 8005414:	00f42400 	.word	0x00f42400

08005418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <HAL_RCC_GetHCLKFreq+0x14>)
 800541e:	681b      	ldr	r3, [r3, #0]
}
 8005420:	4618      	mov	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	20000000 	.word	0x20000000

08005430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005434:	f7ff fff0 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 8005438:	4601      	mov	r1, r0
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	0a9b      	lsrs	r3, r3, #10
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	4a03      	ldr	r2, [pc, #12]	; (8005454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005446:	5cd3      	ldrb	r3, [r2, r3]
 8005448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800544c:	4618      	mov	r0, r3
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40023800 	.word	0x40023800
 8005454:	0800b38c 	.word	0x0800b38c

08005458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800545c:	f7ff ffdc 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 8005460:	4601      	mov	r1, r0
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	0b5b      	lsrs	r3, r3, #13
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	4a03      	ldr	r2, [pc, #12]	; (800547c <HAL_RCC_GetPCLK2Freq+0x24>)
 800546e:	5cd3      	ldrb	r3, [r2, r3]
 8005470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40023800 	.word	0x40023800
 800547c:	0800b38c 	.word	0x0800b38c

08005480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e056      	b.n	8005540 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fd fbaf 	bl	8002c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	ea42 0103 	orr.w	r1, r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	f003 0104 	and.w	r1, r3, #4
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69da      	ldr	r2, [r3, #28]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800552e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e01d      	b.n	8005596 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fd fc46 	bl	8002e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f000 fc20 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0201 	orr.w	r2, r2, #1
 80055b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b06      	cmp	r3, #6
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6a1a      	ldr	r2, [r3, #32]
 8005604:	f241 1311 	movw	r3, #4369	; 0x1111
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10f      	bne.n	800562e <HAL_TIM_Base_Stop_IT+0x48>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6a1a      	ldr	r2, [r3, #32]
 8005614:	f240 4344 	movw	r3, #1092	; 0x444
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <HAL_TIM_Base_Stop_IT+0x48>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e01d      	b.n	800568a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fd fbaa 	bl	8002dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f000 fba6 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fde0 	bl	800626c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a15      	ldr	r2, [pc, #84]	; (8005708 <HAL_TIM_PWM_Start+0x74>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x2c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a14      	ldr	r2, [pc, #80]	; (800570c <HAL_TIM_PWM_Start+0x78>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d101      	bne.n	80056c4 <HAL_TIM_PWM_Start+0x30>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <HAL_TIM_PWM_Start+0x32>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b06      	cmp	r3, #6
 80056ea:	d007      	beq.n	80056fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40010000 	.word	0x40010000
 800570c:	40010400 	.word	0x40010400

08005710 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fda2 	bl	800626c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a22      	ldr	r2, [pc, #136]	; (80057b8 <HAL_TIM_PWM_Stop+0xa8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIM_PWM_Stop+0x2c>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a21      	ldr	r2, [pc, #132]	; (80057bc <HAL_TIM_PWM_Stop+0xac>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d101      	bne.n	8005740 <HAL_TIM_PWM_Stop+0x30>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HAL_TIM_PWM_Stop+0x32>
 8005740:	2300      	movs	r3, #0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d017      	beq.n	8005776 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10f      	bne.n	8005776 <HAL_TIM_PWM_Stop+0x66>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a1a      	ldr	r2, [r3, #32]
 800575c:	f240 4344 	movw	r3, #1092	; 0x444
 8005760:	4013      	ands	r3, r2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d107      	bne.n	8005776 <HAL_TIM_PWM_Stop+0x66>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005774:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10f      	bne.n	80057a6 <HAL_TIM_PWM_Stop+0x96>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	f240 4344 	movw	r3, #1092	; 0x444
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_PWM_Stop+0x96>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40010400 	.word	0x40010400

080057c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e083      	b.n	80058dc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7fd fa59 	bl	8002ca0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2202      	movs	r2, #2
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005804:	f023 0307 	bic.w	r3, r3, #7
 8005808:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 fad9 	bl	8005dcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005842:	f023 0303 	bic.w	r3, r3, #3
 8005846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	4313      	orrs	r3, r2
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005860:	f023 030c 	bic.w	r3, r3, #12
 8005864:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800586c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	4313      	orrs	r3, r2
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	011a      	lsls	r2, r3, #4
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	031b      	lsls	r3, r3, #12
 8005890:	4313      	orrs	r3, r2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80058a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	4313      	orrs	r3, r2
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_TIM_Encoder_Start+0x16>
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d008      	beq.n	800590a <HAL_TIM_Encoder_Start+0x26>
 80058f8:	e00f      	b.n	800591a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2201      	movs	r2, #1
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fcb2 	bl	800626c <TIM_CCxChannelCmd>
      break;
 8005908:	e016      	b.n	8005938 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2201      	movs	r2, #1
 8005910:	2104      	movs	r1, #4
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fcaa 	bl	800626c <TIM_CCxChannelCmd>
      break;
 8005918:	e00e      	b.n	8005938 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2201      	movs	r2, #1
 8005920:	2100      	movs	r1, #0
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fca2 	bl	800626c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2201      	movs	r2, #1
 800592e:	2104      	movs	r1, #4
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fc9b 	bl	800626c <TIM_CCxChannelCmd>
      break;
 8005936:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_TIM_Encoder_Stop+0x16>
 8005962:	2b04      	cmp	r3, #4
 8005964:	d008      	beq.n	8005978 <HAL_TIM_Encoder_Stop+0x26>
 8005966:	e00f      	b.n	8005988 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2200      	movs	r2, #0
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fc7b 	bl	800626c <TIM_CCxChannelCmd>
      break;
 8005976:	e016      	b.n	80059a6 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2200      	movs	r2, #0
 800597e:	2104      	movs	r1, #4
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fc73 	bl	800626c <TIM_CCxChannelCmd>
      break;
 8005986:	e00e      	b.n	80059a6 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2200      	movs	r2, #0
 800598e:	2100      	movs	r1, #0
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fc6b 	bl	800626c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	2104      	movs	r1, #4
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fc64 	bl	800626c <TIM_CCxChannelCmd>
      break;
 80059a4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <HAL_TIM_Encoder_Stop+0x84>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	f240 4344 	movw	r3, #1092	; 0x444
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d107      	bne.n	80059d6 <HAL_TIM_Encoder_Stop+0x84>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0202 	mvn.w	r2, #2
 8005a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f9b4 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f9a6 	bl	8005d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f9b7 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d122      	bne.n	8005a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d11b      	bne.n	8005a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0204 	mvn.w	r2, #4
 8005a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2202      	movs	r2, #2
 8005a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f98a 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f97c 	bl	8005d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f98d 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d122      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d11b      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0208 	mvn.w	r2, #8
 8005ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2204      	movs	r2, #4
 8005aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f960 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f952 	bl	8005d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f963 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	d122      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d11b      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0210 	mvn.w	r2, #16
 8005b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f936 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 8005b24:	e005      	b.n	8005b32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f928 	bl	8005d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f939 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d10e      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d107      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0201 	mvn.w	r2, #1
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fb fa12 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b80      	cmp	r3, #128	; 0x80
 8005b70:	d10e      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7c:	2b80      	cmp	r3, #128	; 0x80
 8005b7e:	d107      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fc1a 	bl	80063c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d10e      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d107      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f8fe 	bl	8005db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d10e      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d107      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0220 	mvn.w	r2, #32
 8005be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fbe4 	bl	80063b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e0b4      	b.n	8005d74 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b0c      	cmp	r3, #12
 8005c1e:	f200 809f 	bhi.w	8005d60 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c5d 	.word	0x08005c5d
 8005c2c:	08005d61 	.word	0x08005d61
 8005c30:	08005d61 	.word	0x08005d61
 8005c34:	08005d61 	.word	0x08005d61
 8005c38:	08005c9d 	.word	0x08005c9d
 8005c3c:	08005d61 	.word	0x08005d61
 8005c40:	08005d61 	.word	0x08005d61
 8005c44:	08005d61 	.word	0x08005d61
 8005c48:	08005cdf 	.word	0x08005cdf
 8005c4c:	08005d61 	.word	0x08005d61
 8005c50:	08005d61 	.word	0x08005d61
 8005c54:	08005d61 	.word	0x08005d61
 8005c58:	08005d1f 	.word	0x08005d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f952 	bl	8005f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0208 	orr.w	r2, r2, #8
 8005c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0204 	bic.w	r2, r2, #4
 8005c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6999      	ldr	r1, [r3, #24]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	619a      	str	r2, [r3, #24]
      break;
 8005c9a:	e062      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 f9a2 	bl	8005fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6999      	ldr	r1, [r3, #24]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	021a      	lsls	r2, r3, #8
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	619a      	str	r2, [r3, #24]
      break;
 8005cdc:	e041      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 f9f7 	bl	80060d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0208 	orr.w	r2, r2, #8
 8005cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0204 	bic.w	r2, r2, #4
 8005d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69d9      	ldr	r1, [r3, #28]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	61da      	str	r2, [r3, #28]
      break;
 8005d1c:	e021      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fa4b 	bl	80061c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69d9      	ldr	r1, [r3, #28]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	021a      	lsls	r2, r3, #8
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	61da      	str	r2, [r3, #28]
      break;
 8005d5e:	e000      	b.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005d60:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a40      	ldr	r2, [pc, #256]	; (8005ee0 <TIM_Base_SetConfig+0x114>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dea:	d00f      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3d      	ldr	r2, [pc, #244]	; (8005ee4 <TIM_Base_SetConfig+0x118>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3c      	ldr	r2, [pc, #240]	; (8005ee8 <TIM_Base_SetConfig+0x11c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3b      	ldr	r2, [pc, #236]	; (8005eec <TIM_Base_SetConfig+0x120>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a3a      	ldr	r2, [pc, #232]	; (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d108      	bne.n	8005e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a2f      	ldr	r2, [pc, #188]	; (8005ee0 <TIM_Base_SetConfig+0x114>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d02b      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2c:	d027      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2c      	ldr	r2, [pc, #176]	; (8005ee4 <TIM_Base_SetConfig+0x118>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d023      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2b      	ldr	r2, [pc, #172]	; (8005ee8 <TIM_Base_SetConfig+0x11c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01f      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <TIM_Base_SetConfig+0x120>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01b      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a29      	ldr	r2, [pc, #164]	; (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d017      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a28      	ldr	r2, [pc, #160]	; (8005ef4 <TIM_Base_SetConfig+0x128>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d013      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <TIM_Base_SetConfig+0x12c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00f      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a26      	ldr	r2, [pc, #152]	; (8005efc <TIM_Base_SetConfig+0x130>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00b      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a25      	ldr	r2, [pc, #148]	; (8005f00 <TIM_Base_SetConfig+0x134>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a24      	ldr	r2, [pc, #144]	; (8005f04 <TIM_Base_SetConfig+0x138>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a23      	ldr	r2, [pc, #140]	; (8005f08 <TIM_Base_SetConfig+0x13c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d108      	bne.n	8005e90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <TIM_Base_SetConfig+0x114>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_Base_SetConfig+0xf8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a0c      	ldr	r2, [pc, #48]	; (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d103      	bne.n	8005ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	615a      	str	r2, [r3, #20]
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40010400 	.word	0x40010400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400
 8005efc:	40014800 	.word	0x40014800
 8005f00:	40001800 	.word	0x40001800
 8005f04:	40001c00 	.word	0x40001c00
 8005f08:	40002000 	.word	0x40002000

08005f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f023 0201 	bic.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f023 0302 	bic.w	r3, r3, #2
 8005f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a20      	ldr	r2, [pc, #128]	; (8005fe4 <TIM_OC1_SetConfig+0xd8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC1_SetConfig+0x64>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a1f      	ldr	r2, [pc, #124]	; (8005fe8 <TIM_OC1_SetConfig+0xdc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10c      	bne.n	8005f8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0308 	bic.w	r3, r3, #8
 8005f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 0304 	bic.w	r3, r3, #4
 8005f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a15      	ldr	r2, [pc, #84]	; (8005fe4 <TIM_OC1_SetConfig+0xd8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d003      	beq.n	8005f9a <TIM_OC1_SetConfig+0x8e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a14      	ldr	r2, [pc, #80]	; (8005fe8 <TIM_OC1_SetConfig+0xdc>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d111      	bne.n	8005fbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	621a      	str	r2, [r3, #32]
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	40010000 	.word	0x40010000
 8005fe8:	40010400 	.word	0x40010400

08005fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f023 0210 	bic.w	r2, r3, #16
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0320 	bic.w	r3, r3, #32
 8006036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a22      	ldr	r2, [pc, #136]	; (80060d0 <TIM_OC2_SetConfig+0xe4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d003      	beq.n	8006054 <TIM_OC2_SetConfig+0x68>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a21      	ldr	r2, [pc, #132]	; (80060d4 <TIM_OC2_SetConfig+0xe8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d10d      	bne.n	8006070 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800605a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800606e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a17      	ldr	r2, [pc, #92]	; (80060d0 <TIM_OC2_SetConfig+0xe4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_OC2_SetConfig+0x94>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a16      	ldr	r2, [pc, #88]	; (80060d4 <TIM_OC2_SetConfig+0xe8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d113      	bne.n	80060a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800608e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40010400 	.word	0x40010400

080060d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a21      	ldr	r2, [pc, #132]	; (80061b8 <TIM_OC3_SetConfig+0xe0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_OC3_SetConfig+0x66>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a20      	ldr	r2, [pc, #128]	; (80061bc <TIM_OC3_SetConfig+0xe4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d10d      	bne.n	800615a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006144:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <TIM_OC3_SetConfig+0xe0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_OC3_SetConfig+0x92>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a15      	ldr	r2, [pc, #84]	; (80061bc <TIM_OC3_SetConfig+0xe4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d113      	bne.n	8006192 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	621a      	str	r2, [r3, #32]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40010400 	.word	0x40010400

080061c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800620a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	031b      	lsls	r3, r3, #12
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a12      	ldr	r2, [pc, #72]	; (8006264 <TIM_OC4_SetConfig+0xa4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_OC4_SetConfig+0x68>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a11      	ldr	r2, [pc, #68]	; (8006268 <TIM_OC4_SetConfig+0xa8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d109      	bne.n	800623c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800622e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	019b      	lsls	r3, r3, #6
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40010000 	.word	0x40010000
 8006268:	40010400 	.word	0x40010400

0800626c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2201      	movs	r2, #1
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a1a      	ldr	r2, [r3, #32]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	43db      	mvns	r3, r3
 800628e:	401a      	ands	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a1a      	ldr	r2, [r3, #32]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	fa01 f303 	lsl.w	r3, r1, r3
 80062a4:	431a      	orrs	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
	...

080062b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e05a      	b.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a21      	ldr	r2, [pc, #132]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d022      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631c:	d01d      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d018      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1b      	ldr	r2, [pc, #108]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1a      	ldr	r2, [pc, #104]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a15      	ldr	r2, [pc, #84]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10c      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4313      	orrs	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40010000 	.word	0x40010000
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800
 80063a0:	40000c00 	.word	0x40000c00
 80063a4:	40010400 	.word	0x40010400
 80063a8:	40014000 	.word	0x40014000
 80063ac:	40001800 	.word	0x40001800

080063b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e03f      	b.n	800646a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fc fd9c 	bl	8002f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2224      	movs	r2, #36	; 0x24
 8006408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800641a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f90b 	bl	8006638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695a      	ldr	r2, [r3, #20]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b088      	sub	sp, #32
 8006476:	af02      	add	r7, sp, #8
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	603b      	str	r3, [r7, #0]
 800647e:	4613      	mov	r3, r2
 8006480:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b20      	cmp	r3, #32
 8006490:	f040 8083 	bne.w	800659a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <HAL_UART_Transmit+0x2e>
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e07b      	b.n	800659c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_UART_Transmit+0x40>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e074      	b.n	800659c <HAL_UART_Transmit+0x12a>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2221      	movs	r2, #33	; 0x21
 80064c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80064c8:	f7fc ff24 	bl	8003314 <HAL_GetTick>
 80064cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	88fa      	ldrh	r2, [r7, #6]
 80064d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	88fa      	ldrh	r2, [r7, #6]
 80064d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80064e2:	e042      	b.n	800656a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fa:	d122      	bne.n	8006542 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2200      	movs	r2, #0
 8006504:	2180      	movs	r1, #128	; 0x80
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f84c 	bl	80065a4 <UART_WaitOnFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e042      	b.n	800659c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006528:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d103      	bne.n	800653a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	3302      	adds	r3, #2
 8006536:	60bb      	str	r3, [r7, #8]
 8006538:	e017      	b.n	800656a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	3301      	adds	r3, #1
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	e013      	b.n	800656a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2200      	movs	r2, #0
 800654a:	2180      	movs	r1, #128	; 0x80
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f829 	bl	80065a4 <UART_WaitOnFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e01f      	b.n	800659c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	60ba      	str	r2, [r7, #8]
 8006562:	781a      	ldrb	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1b7      	bne.n	80064e4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2200      	movs	r2, #0
 800657c:	2140      	movs	r1, #64	; 0x40
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f810 	bl	80065a4 <UART_WaitOnFlagUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e006      	b.n	800659c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	e000      	b.n	800659c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800659a:	2302      	movs	r3, #2
  }
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b4:	e02c      	b.n	8006610 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d028      	beq.n	8006610 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065c4:	f7fc fea6 	bl	8003314 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d21d      	bcs.n	8006610 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0201 	bic.w	r2, r2, #1
 80065f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e00f      	b.n	8006630 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4013      	ands	r3, r2
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	429a      	cmp	r2, r3
 800662c:	d0c3      	beq.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	431a      	orrs	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800667a:	f023 030c 	bic.w	r3, r3, #12
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	430b      	orrs	r3, r1
 8006686:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a6:	f040 818b 	bne.w	80069c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4ac1      	ldr	r2, [pc, #772]	; (80069b4 <UART_SetConfig+0x37c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d005      	beq.n	80066c0 <UART_SetConfig+0x88>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4abf      	ldr	r2, [pc, #764]	; (80069b8 <UART_SetConfig+0x380>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	f040 80bd 	bne.w	800683a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066c0:	f7fe feca 	bl	8005458 <HAL_RCC_GetPCLK2Freq>
 80066c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	461d      	mov	r5, r3
 80066ca:	f04f 0600 	mov.w	r6, #0
 80066ce:	46a8      	mov	r8, r5
 80066d0:	46b1      	mov	r9, r6
 80066d2:	eb18 0308 	adds.w	r3, r8, r8
 80066d6:	eb49 0409 	adc.w	r4, r9, r9
 80066da:	4698      	mov	r8, r3
 80066dc:	46a1      	mov	r9, r4
 80066de:	eb18 0805 	adds.w	r8, r8, r5
 80066e2:	eb49 0906 	adc.w	r9, r9, r6
 80066e6:	f04f 0100 	mov.w	r1, #0
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066fa:	4688      	mov	r8, r1
 80066fc:	4691      	mov	r9, r2
 80066fe:	eb18 0005 	adds.w	r0, r8, r5
 8006702:	eb49 0106 	adc.w	r1, r9, r6
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	461d      	mov	r5, r3
 800670c:	f04f 0600 	mov.w	r6, #0
 8006710:	196b      	adds	r3, r5, r5
 8006712:	eb46 0406 	adc.w	r4, r6, r6
 8006716:	461a      	mov	r2, r3
 8006718:	4623      	mov	r3, r4
 800671a:	f7fa fab5 	bl	8000c88 <__aeabi_uldivmod>
 800671e:	4603      	mov	r3, r0
 8006720:	460c      	mov	r4, r1
 8006722:	461a      	mov	r2, r3
 8006724:	4ba5      	ldr	r3, [pc, #660]	; (80069bc <UART_SetConfig+0x384>)
 8006726:	fba3 2302 	umull	r2, r3, r3, r2
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	461d      	mov	r5, r3
 8006734:	f04f 0600 	mov.w	r6, #0
 8006738:	46a9      	mov	r9, r5
 800673a:	46b2      	mov	sl, r6
 800673c:	eb19 0309 	adds.w	r3, r9, r9
 8006740:	eb4a 040a 	adc.w	r4, sl, sl
 8006744:	4699      	mov	r9, r3
 8006746:	46a2      	mov	sl, r4
 8006748:	eb19 0905 	adds.w	r9, r9, r5
 800674c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006750:	f04f 0100 	mov.w	r1, #0
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800675c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006764:	4689      	mov	r9, r1
 8006766:	4692      	mov	sl, r2
 8006768:	eb19 0005 	adds.w	r0, r9, r5
 800676c:	eb4a 0106 	adc.w	r1, sl, r6
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	461d      	mov	r5, r3
 8006776:	f04f 0600 	mov.w	r6, #0
 800677a:	196b      	adds	r3, r5, r5
 800677c:	eb46 0406 	adc.w	r4, r6, r6
 8006780:	461a      	mov	r2, r3
 8006782:	4623      	mov	r3, r4
 8006784:	f7fa fa80 	bl	8000c88 <__aeabi_uldivmod>
 8006788:	4603      	mov	r3, r0
 800678a:	460c      	mov	r4, r1
 800678c:	461a      	mov	r2, r3
 800678e:	4b8b      	ldr	r3, [pc, #556]	; (80069bc <UART_SetConfig+0x384>)
 8006790:	fba3 1302 	umull	r1, r3, r3, r2
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	2164      	movs	r1, #100	; 0x64
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	3332      	adds	r3, #50	; 0x32
 80067a2:	4a86      	ldr	r2, [pc, #536]	; (80069bc <UART_SetConfig+0x384>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067b0:	4498      	add	r8, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	461d      	mov	r5, r3
 80067b6:	f04f 0600 	mov.w	r6, #0
 80067ba:	46a9      	mov	r9, r5
 80067bc:	46b2      	mov	sl, r6
 80067be:	eb19 0309 	adds.w	r3, r9, r9
 80067c2:	eb4a 040a 	adc.w	r4, sl, sl
 80067c6:	4699      	mov	r9, r3
 80067c8:	46a2      	mov	sl, r4
 80067ca:	eb19 0905 	adds.w	r9, r9, r5
 80067ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80067d2:	f04f 0100 	mov.w	r1, #0
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067e6:	4689      	mov	r9, r1
 80067e8:	4692      	mov	sl, r2
 80067ea:	eb19 0005 	adds.w	r0, r9, r5
 80067ee:	eb4a 0106 	adc.w	r1, sl, r6
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	461d      	mov	r5, r3
 80067f8:	f04f 0600 	mov.w	r6, #0
 80067fc:	196b      	adds	r3, r5, r5
 80067fe:	eb46 0406 	adc.w	r4, r6, r6
 8006802:	461a      	mov	r2, r3
 8006804:	4623      	mov	r3, r4
 8006806:	f7fa fa3f 	bl	8000c88 <__aeabi_uldivmod>
 800680a:	4603      	mov	r3, r0
 800680c:	460c      	mov	r4, r1
 800680e:	461a      	mov	r2, r3
 8006810:	4b6a      	ldr	r3, [pc, #424]	; (80069bc <UART_SetConfig+0x384>)
 8006812:	fba3 1302 	umull	r1, r3, r3, r2
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	2164      	movs	r1, #100	; 0x64
 800681a:	fb01 f303 	mul.w	r3, r1, r3
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	3332      	adds	r3, #50	; 0x32
 8006824:	4a65      	ldr	r2, [pc, #404]	; (80069bc <UART_SetConfig+0x384>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	f003 0207 	and.w	r2, r3, #7
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4442      	add	r2, r8
 8006836:	609a      	str	r2, [r3, #8]
 8006838:	e26f      	b.n	8006d1a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800683a:	f7fe fdf9 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 800683e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	461d      	mov	r5, r3
 8006844:	f04f 0600 	mov.w	r6, #0
 8006848:	46a8      	mov	r8, r5
 800684a:	46b1      	mov	r9, r6
 800684c:	eb18 0308 	adds.w	r3, r8, r8
 8006850:	eb49 0409 	adc.w	r4, r9, r9
 8006854:	4698      	mov	r8, r3
 8006856:	46a1      	mov	r9, r4
 8006858:	eb18 0805 	adds.w	r8, r8, r5
 800685c:	eb49 0906 	adc.w	r9, r9, r6
 8006860:	f04f 0100 	mov.w	r1, #0
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800686c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006870:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006874:	4688      	mov	r8, r1
 8006876:	4691      	mov	r9, r2
 8006878:	eb18 0005 	adds.w	r0, r8, r5
 800687c:	eb49 0106 	adc.w	r1, r9, r6
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	461d      	mov	r5, r3
 8006886:	f04f 0600 	mov.w	r6, #0
 800688a:	196b      	adds	r3, r5, r5
 800688c:	eb46 0406 	adc.w	r4, r6, r6
 8006890:	461a      	mov	r2, r3
 8006892:	4623      	mov	r3, r4
 8006894:	f7fa f9f8 	bl	8000c88 <__aeabi_uldivmod>
 8006898:	4603      	mov	r3, r0
 800689a:	460c      	mov	r4, r1
 800689c:	461a      	mov	r2, r3
 800689e:	4b47      	ldr	r3, [pc, #284]	; (80069bc <UART_SetConfig+0x384>)
 80068a0:	fba3 2302 	umull	r2, r3, r3, r2
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	461d      	mov	r5, r3
 80068ae:	f04f 0600 	mov.w	r6, #0
 80068b2:	46a9      	mov	r9, r5
 80068b4:	46b2      	mov	sl, r6
 80068b6:	eb19 0309 	adds.w	r3, r9, r9
 80068ba:	eb4a 040a 	adc.w	r4, sl, sl
 80068be:	4699      	mov	r9, r3
 80068c0:	46a2      	mov	sl, r4
 80068c2:	eb19 0905 	adds.w	r9, r9, r5
 80068c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80068ca:	f04f 0100 	mov.w	r1, #0
 80068ce:	f04f 0200 	mov.w	r2, #0
 80068d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068de:	4689      	mov	r9, r1
 80068e0:	4692      	mov	sl, r2
 80068e2:	eb19 0005 	adds.w	r0, r9, r5
 80068e6:	eb4a 0106 	adc.w	r1, sl, r6
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	461d      	mov	r5, r3
 80068f0:	f04f 0600 	mov.w	r6, #0
 80068f4:	196b      	adds	r3, r5, r5
 80068f6:	eb46 0406 	adc.w	r4, r6, r6
 80068fa:	461a      	mov	r2, r3
 80068fc:	4623      	mov	r3, r4
 80068fe:	f7fa f9c3 	bl	8000c88 <__aeabi_uldivmod>
 8006902:	4603      	mov	r3, r0
 8006904:	460c      	mov	r4, r1
 8006906:	461a      	mov	r2, r3
 8006908:	4b2c      	ldr	r3, [pc, #176]	; (80069bc <UART_SetConfig+0x384>)
 800690a:	fba3 1302 	umull	r1, r3, r3, r2
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	2164      	movs	r1, #100	; 0x64
 8006912:	fb01 f303 	mul.w	r3, r1, r3
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	3332      	adds	r3, #50	; 0x32
 800691c:	4a27      	ldr	r2, [pc, #156]	; (80069bc <UART_SetConfig+0x384>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800692a:	4498      	add	r8, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	461d      	mov	r5, r3
 8006930:	f04f 0600 	mov.w	r6, #0
 8006934:	46a9      	mov	r9, r5
 8006936:	46b2      	mov	sl, r6
 8006938:	eb19 0309 	adds.w	r3, r9, r9
 800693c:	eb4a 040a 	adc.w	r4, sl, sl
 8006940:	4699      	mov	r9, r3
 8006942:	46a2      	mov	sl, r4
 8006944:	eb19 0905 	adds.w	r9, r9, r5
 8006948:	eb4a 0a06 	adc.w	sl, sl, r6
 800694c:	f04f 0100 	mov.w	r1, #0
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006958:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800695c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006960:	4689      	mov	r9, r1
 8006962:	4692      	mov	sl, r2
 8006964:	eb19 0005 	adds.w	r0, r9, r5
 8006968:	eb4a 0106 	adc.w	r1, sl, r6
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	461d      	mov	r5, r3
 8006972:	f04f 0600 	mov.w	r6, #0
 8006976:	196b      	adds	r3, r5, r5
 8006978:	eb46 0406 	adc.w	r4, r6, r6
 800697c:	461a      	mov	r2, r3
 800697e:	4623      	mov	r3, r4
 8006980:	f7fa f982 	bl	8000c88 <__aeabi_uldivmod>
 8006984:	4603      	mov	r3, r0
 8006986:	460c      	mov	r4, r1
 8006988:	461a      	mov	r2, r3
 800698a:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <UART_SetConfig+0x384>)
 800698c:	fba3 1302 	umull	r1, r3, r3, r2
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	2164      	movs	r1, #100	; 0x64
 8006994:	fb01 f303 	mul.w	r3, r1, r3
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	3332      	adds	r3, #50	; 0x32
 800699e:	4a07      	ldr	r2, [pc, #28]	; (80069bc <UART_SetConfig+0x384>)
 80069a0:	fba2 2303 	umull	r2, r3, r2, r3
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	f003 0207 	and.w	r2, r3, #7
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4442      	add	r2, r8
 80069b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069b2:	e1b2      	b.n	8006d1a <UART_SetConfig+0x6e2>
 80069b4:	40011000 	.word	0x40011000
 80069b8:	40011400 	.word	0x40011400
 80069bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4ad7      	ldr	r2, [pc, #860]	; (8006d24 <UART_SetConfig+0x6ec>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d005      	beq.n	80069d6 <UART_SetConfig+0x39e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4ad6      	ldr	r2, [pc, #856]	; (8006d28 <UART_SetConfig+0x6f0>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	f040 80d1 	bne.w	8006b78 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80069d6:	f7fe fd3f 	bl	8005458 <HAL_RCC_GetPCLK2Freq>
 80069da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	469a      	mov	sl, r3
 80069e0:	f04f 0b00 	mov.w	fp, #0
 80069e4:	46d0      	mov	r8, sl
 80069e6:	46d9      	mov	r9, fp
 80069e8:	eb18 0308 	adds.w	r3, r8, r8
 80069ec:	eb49 0409 	adc.w	r4, r9, r9
 80069f0:	4698      	mov	r8, r3
 80069f2:	46a1      	mov	r9, r4
 80069f4:	eb18 080a 	adds.w	r8, r8, sl
 80069f8:	eb49 090b 	adc.w	r9, r9, fp
 80069fc:	f04f 0100 	mov.w	r1, #0
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a10:	4688      	mov	r8, r1
 8006a12:	4691      	mov	r9, r2
 8006a14:	eb1a 0508 	adds.w	r5, sl, r8
 8006a18:	eb4b 0609 	adc.w	r6, fp, r9
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	4619      	mov	r1, r3
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	f04f 0400 	mov.w	r4, #0
 8006a2e:	0094      	lsls	r4, r2, #2
 8006a30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a34:	008b      	lsls	r3, r1, #2
 8006a36:	461a      	mov	r2, r3
 8006a38:	4623      	mov	r3, r4
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	f7fa f923 	bl	8000c88 <__aeabi_uldivmod>
 8006a42:	4603      	mov	r3, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	461a      	mov	r2, r3
 8006a48:	4bb8      	ldr	r3, [pc, #736]	; (8006d2c <UART_SetConfig+0x6f4>)
 8006a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	469b      	mov	fp, r3
 8006a58:	f04f 0c00 	mov.w	ip, #0
 8006a5c:	46d9      	mov	r9, fp
 8006a5e:	46e2      	mov	sl, ip
 8006a60:	eb19 0309 	adds.w	r3, r9, r9
 8006a64:	eb4a 040a 	adc.w	r4, sl, sl
 8006a68:	4699      	mov	r9, r3
 8006a6a:	46a2      	mov	sl, r4
 8006a6c:	eb19 090b 	adds.w	r9, r9, fp
 8006a70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a74:	f04f 0100 	mov.w	r1, #0
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a88:	4689      	mov	r9, r1
 8006a8a:	4692      	mov	sl, r2
 8006a8c:	eb1b 0509 	adds.w	r5, fp, r9
 8006a90:	eb4c 060a 	adc.w	r6, ip, sl
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	f04f 0400 	mov.w	r4, #0
 8006aa6:	0094      	lsls	r4, r2, #2
 8006aa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006aac:	008b      	lsls	r3, r1, #2
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4623      	mov	r3, r4
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	f7fa f8e7 	bl	8000c88 <__aeabi_uldivmod>
 8006aba:	4603      	mov	r3, r0
 8006abc:	460c      	mov	r4, r1
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4b9a      	ldr	r3, [pc, #616]	; (8006d2c <UART_SetConfig+0x6f4>)
 8006ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ac6:	095b      	lsrs	r3, r3, #5
 8006ac8:	2164      	movs	r1, #100	; 0x64
 8006aca:	fb01 f303 	mul.w	r3, r1, r3
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	3332      	adds	r3, #50	; 0x32
 8006ad4:	4a95      	ldr	r2, [pc, #596]	; (8006d2c <UART_SetConfig+0x6f4>)
 8006ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ae0:	4498      	add	r8, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	469b      	mov	fp, r3
 8006ae6:	f04f 0c00 	mov.w	ip, #0
 8006aea:	46d9      	mov	r9, fp
 8006aec:	46e2      	mov	sl, ip
 8006aee:	eb19 0309 	adds.w	r3, r9, r9
 8006af2:	eb4a 040a 	adc.w	r4, sl, sl
 8006af6:	4699      	mov	r9, r3
 8006af8:	46a2      	mov	sl, r4
 8006afa:	eb19 090b 	adds.w	r9, r9, fp
 8006afe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b02:	f04f 0100 	mov.w	r1, #0
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b16:	4689      	mov	r9, r1
 8006b18:	4692      	mov	sl, r2
 8006b1a:	eb1b 0509 	adds.w	r5, fp, r9
 8006b1e:	eb4c 060a 	adc.w	r6, ip, sl
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	4619      	mov	r1, r3
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	f04f 0400 	mov.w	r4, #0
 8006b34:	0094      	lsls	r4, r2, #2
 8006b36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b3a:	008b      	lsls	r3, r1, #2
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4623      	mov	r3, r4
 8006b40:	4628      	mov	r0, r5
 8006b42:	4631      	mov	r1, r6
 8006b44:	f7fa f8a0 	bl	8000c88 <__aeabi_uldivmod>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4b77      	ldr	r3, [pc, #476]	; (8006d2c <UART_SetConfig+0x6f4>)
 8006b50:	fba3 1302 	umull	r1, r3, r3, r2
 8006b54:	095b      	lsrs	r3, r3, #5
 8006b56:	2164      	movs	r1, #100	; 0x64
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	3332      	adds	r3, #50	; 0x32
 8006b62:	4a72      	ldr	r2, [pc, #456]	; (8006d2c <UART_SetConfig+0x6f4>)
 8006b64:	fba2 2303 	umull	r2, r3, r2, r3
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	f003 020f 	and.w	r2, r3, #15
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4442      	add	r2, r8
 8006b74:	609a      	str	r2, [r3, #8]
 8006b76:	e0d0      	b.n	8006d1a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b78:	f7fe fc5a 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 8006b7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	469a      	mov	sl, r3
 8006b82:	f04f 0b00 	mov.w	fp, #0
 8006b86:	46d0      	mov	r8, sl
 8006b88:	46d9      	mov	r9, fp
 8006b8a:	eb18 0308 	adds.w	r3, r8, r8
 8006b8e:	eb49 0409 	adc.w	r4, r9, r9
 8006b92:	4698      	mov	r8, r3
 8006b94:	46a1      	mov	r9, r4
 8006b96:	eb18 080a 	adds.w	r8, r8, sl
 8006b9a:	eb49 090b 	adc.w	r9, r9, fp
 8006b9e:	f04f 0100 	mov.w	r1, #0
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006baa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bb2:	4688      	mov	r8, r1
 8006bb4:	4691      	mov	r9, r2
 8006bb6:	eb1a 0508 	adds.w	r5, sl, r8
 8006bba:	eb4b 0609 	adc.w	r6, fp, r9
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	f04f 0400 	mov.w	r4, #0
 8006bd0:	0094      	lsls	r4, r2, #2
 8006bd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bd6:	008b      	lsls	r3, r1, #2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4623      	mov	r3, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	4631      	mov	r1, r6
 8006be0:	f7fa f852 	bl	8000c88 <__aeabi_uldivmod>
 8006be4:	4603      	mov	r3, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	461a      	mov	r2, r3
 8006bea:	4b50      	ldr	r3, [pc, #320]	; (8006d2c <UART_SetConfig+0x6f4>)
 8006bec:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	469b      	mov	fp, r3
 8006bfa:	f04f 0c00 	mov.w	ip, #0
 8006bfe:	46d9      	mov	r9, fp
 8006c00:	46e2      	mov	sl, ip
 8006c02:	eb19 0309 	adds.w	r3, r9, r9
 8006c06:	eb4a 040a 	adc.w	r4, sl, sl
 8006c0a:	4699      	mov	r9, r3
 8006c0c:	46a2      	mov	sl, r4
 8006c0e:	eb19 090b 	adds.w	r9, r9, fp
 8006c12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c16:	f04f 0100 	mov.w	r1, #0
 8006c1a:	f04f 0200 	mov.w	r2, #0
 8006c1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c2a:	4689      	mov	r9, r1
 8006c2c:	4692      	mov	sl, r2
 8006c2e:	eb1b 0509 	adds.w	r5, fp, r9
 8006c32:	eb4c 060a 	adc.w	r6, ip, sl
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	f04f 0400 	mov.w	r4, #0
 8006c48:	0094      	lsls	r4, r2, #2
 8006c4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c4e:	008b      	lsls	r3, r1, #2
 8006c50:	461a      	mov	r2, r3
 8006c52:	4623      	mov	r3, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	4631      	mov	r1, r6
 8006c58:	f7fa f816 	bl	8000c88 <__aeabi_uldivmod>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	461a      	mov	r2, r3
 8006c62:	4b32      	ldr	r3, [pc, #200]	; (8006d2c <UART_SetConfig+0x6f4>)
 8006c64:	fba3 1302 	umull	r1, r3, r3, r2
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	2164      	movs	r1, #100	; 0x64
 8006c6c:	fb01 f303 	mul.w	r3, r1, r3
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	3332      	adds	r3, #50	; 0x32
 8006c76:	4a2d      	ldr	r2, [pc, #180]	; (8006d2c <UART_SetConfig+0x6f4>)
 8006c78:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c82:	4498      	add	r8, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	469b      	mov	fp, r3
 8006c88:	f04f 0c00 	mov.w	ip, #0
 8006c8c:	46d9      	mov	r9, fp
 8006c8e:	46e2      	mov	sl, ip
 8006c90:	eb19 0309 	adds.w	r3, r9, r9
 8006c94:	eb4a 040a 	adc.w	r4, sl, sl
 8006c98:	4699      	mov	r9, r3
 8006c9a:	46a2      	mov	sl, r4
 8006c9c:	eb19 090b 	adds.w	r9, r9, fp
 8006ca0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ca4:	f04f 0100 	mov.w	r1, #0
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cb8:	4689      	mov	r9, r1
 8006cba:	4692      	mov	sl, r2
 8006cbc:	eb1b 0509 	adds.w	r5, fp, r9
 8006cc0:	eb4c 060a 	adc.w	r6, ip, sl
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	f04f 0400 	mov.w	r4, #0
 8006cd6:	0094      	lsls	r4, r2, #2
 8006cd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cdc:	008b      	lsls	r3, r1, #2
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4623      	mov	r3, r4
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	f7f9 ffcf 	bl	8000c88 <__aeabi_uldivmod>
 8006cea:	4603      	mov	r3, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	461a      	mov	r2, r3
 8006cf0:	4b0e      	ldr	r3, [pc, #56]	; (8006d2c <UART_SetConfig+0x6f4>)
 8006cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	2164      	movs	r1, #100	; 0x64
 8006cfa:	fb01 f303 	mul.w	r3, r1, r3
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	3332      	adds	r3, #50	; 0x32
 8006d04:	4a09      	ldr	r2, [pc, #36]	; (8006d2c <UART_SetConfig+0x6f4>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	f003 020f 	and.w	r2, r3, #15
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4442      	add	r2, r8
 8006d16:	609a      	str	r2, [r3, #8]
}
 8006d18:	e7ff      	b.n	8006d1a <UART_SetConfig+0x6e2>
 8006d1a:	bf00      	nop
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d24:	40011000 	.word	0x40011000
 8006d28:	40011400 	.word	0x40011400
 8006d2c:	51eb851f 	.word	0x51eb851f

08006d30 <__errno>:
 8006d30:	4b01      	ldr	r3, [pc, #4]	; (8006d38 <__errno+0x8>)
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	2000000c 	.word	0x2000000c

08006d3c <__libc_init_array>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	4e0d      	ldr	r6, [pc, #52]	; (8006d74 <__libc_init_array+0x38>)
 8006d40:	4c0d      	ldr	r4, [pc, #52]	; (8006d78 <__libc_init_array+0x3c>)
 8006d42:	1ba4      	subs	r4, r4, r6
 8006d44:	10a4      	asrs	r4, r4, #2
 8006d46:	2500      	movs	r5, #0
 8006d48:	42a5      	cmp	r5, r4
 8006d4a:	d109      	bne.n	8006d60 <__libc_init_array+0x24>
 8006d4c:	4e0b      	ldr	r6, [pc, #44]	; (8006d7c <__libc_init_array+0x40>)
 8006d4e:	4c0c      	ldr	r4, [pc, #48]	; (8006d80 <__libc_init_array+0x44>)
 8006d50:	f004 fa5e 	bl	800b210 <_init>
 8006d54:	1ba4      	subs	r4, r4, r6
 8006d56:	10a4      	asrs	r4, r4, #2
 8006d58:	2500      	movs	r5, #0
 8006d5a:	42a5      	cmp	r5, r4
 8006d5c:	d105      	bne.n	8006d6a <__libc_init_array+0x2e>
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d64:	4798      	blx	r3
 8006d66:	3501      	adds	r5, #1
 8006d68:	e7ee      	b.n	8006d48 <__libc_init_array+0xc>
 8006d6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d6e:	4798      	blx	r3
 8006d70:	3501      	adds	r5, #1
 8006d72:	e7f2      	b.n	8006d5a <__libc_init_array+0x1e>
 8006d74:	0800b6c8 	.word	0x0800b6c8
 8006d78:	0800b6c8 	.word	0x0800b6c8
 8006d7c:	0800b6c8 	.word	0x0800b6c8
 8006d80:	0800b6cc 	.word	0x0800b6cc

08006d84 <memset>:
 8006d84:	4402      	add	r2, r0
 8006d86:	4603      	mov	r3, r0
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d100      	bne.n	8006d8e <memset+0xa>
 8006d8c:	4770      	bx	lr
 8006d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d92:	e7f9      	b.n	8006d88 <memset+0x4>

08006d94 <__cvt>:
 8006d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d98:	ec55 4b10 	vmov	r4, r5, d0
 8006d9c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006d9e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006da2:	2d00      	cmp	r5, #0
 8006da4:	460e      	mov	r6, r1
 8006da6:	4691      	mov	r9, r2
 8006da8:	4619      	mov	r1, r3
 8006daa:	bfb8      	it	lt
 8006dac:	4622      	movlt	r2, r4
 8006dae:	462b      	mov	r3, r5
 8006db0:	f027 0720 	bic.w	r7, r7, #32
 8006db4:	bfbb      	ittet	lt
 8006db6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006dba:	461d      	movlt	r5, r3
 8006dbc:	2300      	movge	r3, #0
 8006dbe:	232d      	movlt	r3, #45	; 0x2d
 8006dc0:	bfb8      	it	lt
 8006dc2:	4614      	movlt	r4, r2
 8006dc4:	2f46      	cmp	r7, #70	; 0x46
 8006dc6:	700b      	strb	r3, [r1, #0]
 8006dc8:	d004      	beq.n	8006dd4 <__cvt+0x40>
 8006dca:	2f45      	cmp	r7, #69	; 0x45
 8006dcc:	d100      	bne.n	8006dd0 <__cvt+0x3c>
 8006dce:	3601      	adds	r6, #1
 8006dd0:	2102      	movs	r1, #2
 8006dd2:	e000      	b.n	8006dd6 <__cvt+0x42>
 8006dd4:	2103      	movs	r1, #3
 8006dd6:	ab03      	add	r3, sp, #12
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	ab02      	add	r3, sp, #8
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	4632      	mov	r2, r6
 8006de0:	4653      	mov	r3, sl
 8006de2:	ec45 4b10 	vmov	d0, r4, r5
 8006de6:	f001 feb3 	bl	8008b50 <_dtoa_r>
 8006dea:	2f47      	cmp	r7, #71	; 0x47
 8006dec:	4680      	mov	r8, r0
 8006dee:	d102      	bne.n	8006df6 <__cvt+0x62>
 8006df0:	f019 0f01 	tst.w	r9, #1
 8006df4:	d026      	beq.n	8006e44 <__cvt+0xb0>
 8006df6:	2f46      	cmp	r7, #70	; 0x46
 8006df8:	eb08 0906 	add.w	r9, r8, r6
 8006dfc:	d111      	bne.n	8006e22 <__cvt+0x8e>
 8006dfe:	f898 3000 	ldrb.w	r3, [r8]
 8006e02:	2b30      	cmp	r3, #48	; 0x30
 8006e04:	d10a      	bne.n	8006e1c <__cvt+0x88>
 8006e06:	2200      	movs	r2, #0
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	f7f9 fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e12:	b918      	cbnz	r0, 8006e1c <__cvt+0x88>
 8006e14:	f1c6 0601 	rsb	r6, r6, #1
 8006e18:	f8ca 6000 	str.w	r6, [sl]
 8006e1c:	f8da 3000 	ldr.w	r3, [sl]
 8006e20:	4499      	add	r9, r3
 8006e22:	2200      	movs	r2, #0
 8006e24:	2300      	movs	r3, #0
 8006e26:	4620      	mov	r0, r4
 8006e28:	4629      	mov	r1, r5
 8006e2a:	f7f9 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e2e:	b938      	cbnz	r0, 8006e40 <__cvt+0xac>
 8006e30:	2230      	movs	r2, #48	; 0x30
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	454b      	cmp	r3, r9
 8006e36:	d205      	bcs.n	8006e44 <__cvt+0xb0>
 8006e38:	1c59      	adds	r1, r3, #1
 8006e3a:	9103      	str	r1, [sp, #12]
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e7f8      	b.n	8006e32 <__cvt+0x9e>
 8006e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e48:	eba3 0308 	sub.w	r3, r3, r8
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	b004      	add	sp, #16
 8006e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e56 <__exponent>:
 8006e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	bfba      	itte	lt
 8006e5e:	4249      	neglt	r1, r1
 8006e60:	232d      	movlt	r3, #45	; 0x2d
 8006e62:	232b      	movge	r3, #43	; 0x2b
 8006e64:	2909      	cmp	r1, #9
 8006e66:	f804 2b02 	strb.w	r2, [r4], #2
 8006e6a:	7043      	strb	r3, [r0, #1]
 8006e6c:	dd20      	ble.n	8006eb0 <__exponent+0x5a>
 8006e6e:	f10d 0307 	add.w	r3, sp, #7
 8006e72:	461f      	mov	r7, r3
 8006e74:	260a      	movs	r6, #10
 8006e76:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e7a:	fb06 1115 	mls	r1, r6, r5, r1
 8006e7e:	3130      	adds	r1, #48	; 0x30
 8006e80:	2d09      	cmp	r5, #9
 8006e82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e86:	f103 32ff 	add.w	r2, r3, #4294967295
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	dc09      	bgt.n	8006ea2 <__exponent+0x4c>
 8006e8e:	3130      	adds	r1, #48	; 0x30
 8006e90:	3b02      	subs	r3, #2
 8006e92:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e96:	42bb      	cmp	r3, r7
 8006e98:	4622      	mov	r2, r4
 8006e9a:	d304      	bcc.n	8006ea6 <__exponent+0x50>
 8006e9c:	1a10      	subs	r0, r2, r0
 8006e9e:	b003      	add	sp, #12
 8006ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	e7e7      	b.n	8006e76 <__exponent+0x20>
 8006ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eaa:	f804 2b01 	strb.w	r2, [r4], #1
 8006eae:	e7f2      	b.n	8006e96 <__exponent+0x40>
 8006eb0:	2330      	movs	r3, #48	; 0x30
 8006eb2:	4419      	add	r1, r3
 8006eb4:	7083      	strb	r3, [r0, #2]
 8006eb6:	1d02      	adds	r2, r0, #4
 8006eb8:	70c1      	strb	r1, [r0, #3]
 8006eba:	e7ef      	b.n	8006e9c <__exponent+0x46>

08006ebc <_printf_float>:
 8006ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec0:	b08d      	sub	sp, #52	; 0x34
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006ec8:	4616      	mov	r6, r2
 8006eca:	461f      	mov	r7, r3
 8006ecc:	4605      	mov	r5, r0
 8006ece:	f003 f89d 	bl	800a00c <_localeconv_r>
 8006ed2:	6803      	ldr	r3, [r0, #0]
 8006ed4:	9304      	str	r3, [sp, #16]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7f9 f97a 	bl	80001d0 <strlen>
 8006edc:	2300      	movs	r3, #0
 8006ede:	930a      	str	r3, [sp, #40]	; 0x28
 8006ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee4:	9005      	str	r0, [sp, #20]
 8006ee6:	3307      	adds	r3, #7
 8006ee8:	f023 0307 	bic.w	r3, r3, #7
 8006eec:	f103 0208 	add.w	r2, r3, #8
 8006ef0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ef4:	f8d4 b000 	ldr.w	fp, [r4]
 8006ef8:	f8c8 2000 	str.w	r2, [r8]
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f04:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f0c:	9307      	str	r3, [sp, #28]
 8006f0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f12:	f04f 32ff 	mov.w	r2, #4294967295
 8006f16:	4ba7      	ldr	r3, [pc, #668]	; (80071b4 <_printf_float+0x2f8>)
 8006f18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f1c:	f7f9 fe06 	bl	8000b2c <__aeabi_dcmpun>
 8006f20:	bb70      	cbnz	r0, 8006f80 <_printf_float+0xc4>
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295
 8006f26:	4ba3      	ldr	r3, [pc, #652]	; (80071b4 <_printf_float+0x2f8>)
 8006f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f2c:	f7f9 fde0 	bl	8000af0 <__aeabi_dcmple>
 8006f30:	bb30      	cbnz	r0, 8006f80 <_printf_float+0xc4>
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	4640      	mov	r0, r8
 8006f38:	4649      	mov	r1, r9
 8006f3a:	f7f9 fdcf 	bl	8000adc <__aeabi_dcmplt>
 8006f3e:	b110      	cbz	r0, 8006f46 <_printf_float+0x8a>
 8006f40:	232d      	movs	r3, #45	; 0x2d
 8006f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f46:	4a9c      	ldr	r2, [pc, #624]	; (80071b8 <_printf_float+0x2fc>)
 8006f48:	4b9c      	ldr	r3, [pc, #624]	; (80071bc <_printf_float+0x300>)
 8006f4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006f4e:	bf8c      	ite	hi
 8006f50:	4690      	movhi	r8, r2
 8006f52:	4698      	movls	r8, r3
 8006f54:	2303      	movs	r3, #3
 8006f56:	f02b 0204 	bic.w	r2, fp, #4
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	6022      	str	r2, [r4, #0]
 8006f5e:	f04f 0900 	mov.w	r9, #0
 8006f62:	9700      	str	r7, [sp, #0]
 8006f64:	4633      	mov	r3, r6
 8006f66:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 f9e6 	bl	800733c <_printf_common>
 8006f70:	3001      	adds	r0, #1
 8006f72:	f040 808d 	bne.w	8007090 <_printf_float+0x1d4>
 8006f76:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7a:	b00d      	add	sp, #52	; 0x34
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	4649      	mov	r1, r9
 8006f88:	f7f9 fdd0 	bl	8000b2c <__aeabi_dcmpun>
 8006f8c:	b110      	cbz	r0, 8006f94 <_printf_float+0xd8>
 8006f8e:	4a8c      	ldr	r2, [pc, #560]	; (80071c0 <_printf_float+0x304>)
 8006f90:	4b8c      	ldr	r3, [pc, #560]	; (80071c4 <_printf_float+0x308>)
 8006f92:	e7da      	b.n	8006f4a <_printf_float+0x8e>
 8006f94:	6861      	ldr	r1, [r4, #4]
 8006f96:	1c4b      	adds	r3, r1, #1
 8006f98:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006f9c:	a80a      	add	r0, sp, #40	; 0x28
 8006f9e:	d13e      	bne.n	800701e <_printf_float+0x162>
 8006fa0:	2306      	movs	r3, #6
 8006fa2:	6063      	str	r3, [r4, #4]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006faa:	ab09      	add	r3, sp, #36	; 0x24
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	ec49 8b10 	vmov	d0, r8, r9
 8006fb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fb6:	6022      	str	r2, [r4, #0]
 8006fb8:	f8cd a004 	str.w	sl, [sp, #4]
 8006fbc:	6861      	ldr	r1, [r4, #4]
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f7ff fee8 	bl	8006d94 <__cvt>
 8006fc4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006fc8:	2b47      	cmp	r3, #71	; 0x47
 8006fca:	4680      	mov	r8, r0
 8006fcc:	d109      	bne.n	8006fe2 <_printf_float+0x126>
 8006fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd0:	1cd8      	adds	r0, r3, #3
 8006fd2:	db02      	blt.n	8006fda <_printf_float+0x11e>
 8006fd4:	6862      	ldr	r2, [r4, #4]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	dd47      	ble.n	800706a <_printf_float+0x1ae>
 8006fda:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fde:	fa5f fa8a 	uxtb.w	sl, sl
 8006fe2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fe8:	d824      	bhi.n	8007034 <_printf_float+0x178>
 8006fea:	3901      	subs	r1, #1
 8006fec:	4652      	mov	r2, sl
 8006fee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ff2:	9109      	str	r1, [sp, #36]	; 0x24
 8006ff4:	f7ff ff2f 	bl	8006e56 <__exponent>
 8006ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ffa:	1813      	adds	r3, r2, r0
 8006ffc:	2a01      	cmp	r2, #1
 8006ffe:	4681      	mov	r9, r0
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	dc02      	bgt.n	800700a <_printf_float+0x14e>
 8007004:	6822      	ldr	r2, [r4, #0]
 8007006:	07d1      	lsls	r1, r2, #31
 8007008:	d501      	bpl.n	800700e <_printf_float+0x152>
 800700a:	3301      	adds	r3, #1
 800700c:	6123      	str	r3, [r4, #16]
 800700e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0a5      	beq.n	8006f62 <_printf_float+0xa6>
 8007016:	232d      	movs	r3, #45	; 0x2d
 8007018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800701c:	e7a1      	b.n	8006f62 <_printf_float+0xa6>
 800701e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007022:	f000 8177 	beq.w	8007314 <_printf_float+0x458>
 8007026:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800702a:	d1bb      	bne.n	8006fa4 <_printf_float+0xe8>
 800702c:	2900      	cmp	r1, #0
 800702e:	d1b9      	bne.n	8006fa4 <_printf_float+0xe8>
 8007030:	2301      	movs	r3, #1
 8007032:	e7b6      	b.n	8006fa2 <_printf_float+0xe6>
 8007034:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007038:	d119      	bne.n	800706e <_printf_float+0x1b2>
 800703a:	2900      	cmp	r1, #0
 800703c:	6863      	ldr	r3, [r4, #4]
 800703e:	dd0c      	ble.n	800705a <_printf_float+0x19e>
 8007040:	6121      	str	r1, [r4, #16]
 8007042:	b913      	cbnz	r3, 800704a <_printf_float+0x18e>
 8007044:	6822      	ldr	r2, [r4, #0]
 8007046:	07d2      	lsls	r2, r2, #31
 8007048:	d502      	bpl.n	8007050 <_printf_float+0x194>
 800704a:	3301      	adds	r3, #1
 800704c:	440b      	add	r3, r1
 800704e:	6123      	str	r3, [r4, #16]
 8007050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007052:	65a3      	str	r3, [r4, #88]	; 0x58
 8007054:	f04f 0900 	mov.w	r9, #0
 8007058:	e7d9      	b.n	800700e <_printf_float+0x152>
 800705a:	b913      	cbnz	r3, 8007062 <_printf_float+0x1a6>
 800705c:	6822      	ldr	r2, [r4, #0]
 800705e:	07d0      	lsls	r0, r2, #31
 8007060:	d501      	bpl.n	8007066 <_printf_float+0x1aa>
 8007062:	3302      	adds	r3, #2
 8007064:	e7f3      	b.n	800704e <_printf_float+0x192>
 8007066:	2301      	movs	r3, #1
 8007068:	e7f1      	b.n	800704e <_printf_float+0x192>
 800706a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800706e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007072:	4293      	cmp	r3, r2
 8007074:	db05      	blt.n	8007082 <_printf_float+0x1c6>
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	07d1      	lsls	r1, r2, #31
 800707c:	d5e8      	bpl.n	8007050 <_printf_float+0x194>
 800707e:	3301      	adds	r3, #1
 8007080:	e7e5      	b.n	800704e <_printf_float+0x192>
 8007082:	2b00      	cmp	r3, #0
 8007084:	bfd4      	ite	le
 8007086:	f1c3 0302 	rsble	r3, r3, #2
 800708a:	2301      	movgt	r3, #1
 800708c:	4413      	add	r3, r2
 800708e:	e7de      	b.n	800704e <_printf_float+0x192>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	055a      	lsls	r2, r3, #21
 8007094:	d407      	bmi.n	80070a6 <_printf_float+0x1ea>
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	4642      	mov	r2, r8
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	d12b      	bne.n	80070fc <_printf_float+0x240>
 80070a4:	e767      	b.n	8006f76 <_printf_float+0xba>
 80070a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80070aa:	f240 80dc 	bls.w	8007266 <_printf_float+0x3aa>
 80070ae:	2200      	movs	r2, #0
 80070b0:	2300      	movs	r3, #0
 80070b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070b6:	f7f9 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d033      	beq.n	8007126 <_printf_float+0x26a>
 80070be:	2301      	movs	r3, #1
 80070c0:	4a41      	ldr	r2, [pc, #260]	; (80071c8 <_printf_float+0x30c>)
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	f43f af54 	beq.w	8006f76 <_printf_float+0xba>
 80070ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070d2:	429a      	cmp	r2, r3
 80070d4:	db02      	blt.n	80070dc <_printf_float+0x220>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	07d8      	lsls	r0, r3, #31
 80070da:	d50f      	bpl.n	80070fc <_printf_float+0x240>
 80070dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070e0:	4631      	mov	r1, r6
 80070e2:	4628      	mov	r0, r5
 80070e4:	47b8      	blx	r7
 80070e6:	3001      	adds	r0, #1
 80070e8:	f43f af45 	beq.w	8006f76 <_printf_float+0xba>
 80070ec:	f04f 0800 	mov.w	r8, #0
 80070f0:	f104 091a 	add.w	r9, r4, #26
 80070f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f6:	3b01      	subs	r3, #1
 80070f8:	4543      	cmp	r3, r8
 80070fa:	dc09      	bgt.n	8007110 <_printf_float+0x254>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	079b      	lsls	r3, r3, #30
 8007100:	f100 8103 	bmi.w	800730a <_printf_float+0x44e>
 8007104:	68e0      	ldr	r0, [r4, #12]
 8007106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007108:	4298      	cmp	r0, r3
 800710a:	bfb8      	it	lt
 800710c:	4618      	movlt	r0, r3
 800710e:	e734      	b.n	8006f7a <_printf_float+0xbe>
 8007110:	2301      	movs	r3, #1
 8007112:	464a      	mov	r2, r9
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f af2b 	beq.w	8006f76 <_printf_float+0xba>
 8007120:	f108 0801 	add.w	r8, r8, #1
 8007124:	e7e6      	b.n	80070f4 <_printf_float+0x238>
 8007126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	dc2b      	bgt.n	8007184 <_printf_float+0x2c8>
 800712c:	2301      	movs	r3, #1
 800712e:	4a26      	ldr	r2, [pc, #152]	; (80071c8 <_printf_float+0x30c>)
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f af1d 	beq.w	8006f76 <_printf_float+0xba>
 800713c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713e:	b923      	cbnz	r3, 800714a <_printf_float+0x28e>
 8007140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007142:	b913      	cbnz	r3, 800714a <_printf_float+0x28e>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	07d9      	lsls	r1, r3, #31
 8007148:	d5d8      	bpl.n	80070fc <_printf_float+0x240>
 800714a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800714e:	4631      	mov	r1, r6
 8007150:	4628      	mov	r0, r5
 8007152:	47b8      	blx	r7
 8007154:	3001      	adds	r0, #1
 8007156:	f43f af0e 	beq.w	8006f76 <_printf_float+0xba>
 800715a:	f04f 0900 	mov.w	r9, #0
 800715e:	f104 0a1a 	add.w	sl, r4, #26
 8007162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007164:	425b      	negs	r3, r3
 8007166:	454b      	cmp	r3, r9
 8007168:	dc01      	bgt.n	800716e <_printf_float+0x2b2>
 800716a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716c:	e794      	b.n	8007098 <_printf_float+0x1dc>
 800716e:	2301      	movs	r3, #1
 8007170:	4652      	mov	r2, sl
 8007172:	4631      	mov	r1, r6
 8007174:	4628      	mov	r0, r5
 8007176:	47b8      	blx	r7
 8007178:	3001      	adds	r0, #1
 800717a:	f43f aefc 	beq.w	8006f76 <_printf_float+0xba>
 800717e:	f109 0901 	add.w	r9, r9, #1
 8007182:	e7ee      	b.n	8007162 <_printf_float+0x2a6>
 8007184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007188:	429a      	cmp	r2, r3
 800718a:	bfa8      	it	ge
 800718c:	461a      	movge	r2, r3
 800718e:	2a00      	cmp	r2, #0
 8007190:	4691      	mov	r9, r2
 8007192:	dd07      	ble.n	80071a4 <_printf_float+0x2e8>
 8007194:	4613      	mov	r3, r2
 8007196:	4631      	mov	r1, r6
 8007198:	4642      	mov	r2, r8
 800719a:	4628      	mov	r0, r5
 800719c:	47b8      	blx	r7
 800719e:	3001      	adds	r0, #1
 80071a0:	f43f aee9 	beq.w	8006f76 <_printf_float+0xba>
 80071a4:	f104 031a 	add.w	r3, r4, #26
 80071a8:	f04f 0b00 	mov.w	fp, #0
 80071ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071b0:	9306      	str	r3, [sp, #24]
 80071b2:	e015      	b.n	80071e0 <_printf_float+0x324>
 80071b4:	7fefffff 	.word	0x7fefffff
 80071b8:	0800b3a4 	.word	0x0800b3a4
 80071bc:	0800b3a0 	.word	0x0800b3a0
 80071c0:	0800b3ac 	.word	0x0800b3ac
 80071c4:	0800b3a8 	.word	0x0800b3a8
 80071c8:	0800b3b0 	.word	0x0800b3b0
 80071cc:	2301      	movs	r3, #1
 80071ce:	9a06      	ldr	r2, [sp, #24]
 80071d0:	4631      	mov	r1, r6
 80071d2:	4628      	mov	r0, r5
 80071d4:	47b8      	blx	r7
 80071d6:	3001      	adds	r0, #1
 80071d8:	f43f aecd 	beq.w	8006f76 <_printf_float+0xba>
 80071dc:	f10b 0b01 	add.w	fp, fp, #1
 80071e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071e4:	ebaa 0309 	sub.w	r3, sl, r9
 80071e8:	455b      	cmp	r3, fp
 80071ea:	dcef      	bgt.n	80071cc <_printf_float+0x310>
 80071ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071f0:	429a      	cmp	r2, r3
 80071f2:	44d0      	add	r8, sl
 80071f4:	db15      	blt.n	8007222 <_printf_float+0x366>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	07da      	lsls	r2, r3, #31
 80071fa:	d412      	bmi.n	8007222 <_printf_float+0x366>
 80071fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007200:	eba3 020a 	sub.w	r2, r3, sl
 8007204:	eba3 0a01 	sub.w	sl, r3, r1
 8007208:	4592      	cmp	sl, r2
 800720a:	bfa8      	it	ge
 800720c:	4692      	movge	sl, r2
 800720e:	f1ba 0f00 	cmp.w	sl, #0
 8007212:	dc0e      	bgt.n	8007232 <_printf_float+0x376>
 8007214:	f04f 0800 	mov.w	r8, #0
 8007218:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800721c:	f104 091a 	add.w	r9, r4, #26
 8007220:	e019      	b.n	8007256 <_printf_float+0x39a>
 8007222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007226:	4631      	mov	r1, r6
 8007228:	4628      	mov	r0, r5
 800722a:	47b8      	blx	r7
 800722c:	3001      	adds	r0, #1
 800722e:	d1e5      	bne.n	80071fc <_printf_float+0x340>
 8007230:	e6a1      	b.n	8006f76 <_printf_float+0xba>
 8007232:	4653      	mov	r3, sl
 8007234:	4642      	mov	r2, r8
 8007236:	4631      	mov	r1, r6
 8007238:	4628      	mov	r0, r5
 800723a:	47b8      	blx	r7
 800723c:	3001      	adds	r0, #1
 800723e:	d1e9      	bne.n	8007214 <_printf_float+0x358>
 8007240:	e699      	b.n	8006f76 <_printf_float+0xba>
 8007242:	2301      	movs	r3, #1
 8007244:	464a      	mov	r2, r9
 8007246:	4631      	mov	r1, r6
 8007248:	4628      	mov	r0, r5
 800724a:	47b8      	blx	r7
 800724c:	3001      	adds	r0, #1
 800724e:	f43f ae92 	beq.w	8006f76 <_printf_float+0xba>
 8007252:	f108 0801 	add.w	r8, r8, #1
 8007256:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	eba3 030a 	sub.w	r3, r3, sl
 8007260:	4543      	cmp	r3, r8
 8007262:	dcee      	bgt.n	8007242 <_printf_float+0x386>
 8007264:	e74a      	b.n	80070fc <_printf_float+0x240>
 8007266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007268:	2a01      	cmp	r2, #1
 800726a:	dc01      	bgt.n	8007270 <_printf_float+0x3b4>
 800726c:	07db      	lsls	r3, r3, #31
 800726e:	d53a      	bpl.n	80072e6 <_printf_float+0x42a>
 8007270:	2301      	movs	r3, #1
 8007272:	4642      	mov	r2, r8
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	f43f ae7b 	beq.w	8006f76 <_printf_float+0xba>
 8007280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	f108 0801 	add.w	r8, r8, #1
 8007290:	f43f ae71 	beq.w	8006f76 <_printf_float+0xba>
 8007294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007296:	2200      	movs	r2, #0
 8007298:	f103 3aff 	add.w	sl, r3, #4294967295
 800729c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072a0:	2300      	movs	r3, #0
 80072a2:	f7f9 fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 80072a6:	b9c8      	cbnz	r0, 80072dc <_printf_float+0x420>
 80072a8:	4653      	mov	r3, sl
 80072aa:	4642      	mov	r2, r8
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	d10e      	bne.n	80072d4 <_printf_float+0x418>
 80072b6:	e65e      	b.n	8006f76 <_printf_float+0xba>
 80072b8:	2301      	movs	r3, #1
 80072ba:	4652      	mov	r2, sl
 80072bc:	4631      	mov	r1, r6
 80072be:	4628      	mov	r0, r5
 80072c0:	47b8      	blx	r7
 80072c2:	3001      	adds	r0, #1
 80072c4:	f43f ae57 	beq.w	8006f76 <_printf_float+0xba>
 80072c8:	f108 0801 	add.w	r8, r8, #1
 80072cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ce:	3b01      	subs	r3, #1
 80072d0:	4543      	cmp	r3, r8
 80072d2:	dcf1      	bgt.n	80072b8 <_printf_float+0x3fc>
 80072d4:	464b      	mov	r3, r9
 80072d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072da:	e6de      	b.n	800709a <_printf_float+0x1de>
 80072dc:	f04f 0800 	mov.w	r8, #0
 80072e0:	f104 0a1a 	add.w	sl, r4, #26
 80072e4:	e7f2      	b.n	80072cc <_printf_float+0x410>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e7df      	b.n	80072aa <_printf_float+0x3ee>
 80072ea:	2301      	movs	r3, #1
 80072ec:	464a      	mov	r2, r9
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	f43f ae3e 	beq.w	8006f76 <_printf_float+0xba>
 80072fa:	f108 0801 	add.w	r8, r8, #1
 80072fe:	68e3      	ldr	r3, [r4, #12]
 8007300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	4543      	cmp	r3, r8
 8007306:	dcf0      	bgt.n	80072ea <_printf_float+0x42e>
 8007308:	e6fc      	b.n	8007104 <_printf_float+0x248>
 800730a:	f04f 0800 	mov.w	r8, #0
 800730e:	f104 0919 	add.w	r9, r4, #25
 8007312:	e7f4      	b.n	80072fe <_printf_float+0x442>
 8007314:	2900      	cmp	r1, #0
 8007316:	f43f ae8b 	beq.w	8007030 <_printf_float+0x174>
 800731a:	2300      	movs	r3, #0
 800731c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007320:	ab09      	add	r3, sp, #36	; 0x24
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	ec49 8b10 	vmov	d0, r8, r9
 8007328:	6022      	str	r2, [r4, #0]
 800732a:	f8cd a004 	str.w	sl, [sp, #4]
 800732e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007332:	4628      	mov	r0, r5
 8007334:	f7ff fd2e 	bl	8006d94 <__cvt>
 8007338:	4680      	mov	r8, r0
 800733a:	e648      	b.n	8006fce <_printf_float+0x112>

0800733c <_printf_common>:
 800733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	4691      	mov	r9, r2
 8007342:	461f      	mov	r7, r3
 8007344:	688a      	ldr	r2, [r1, #8]
 8007346:	690b      	ldr	r3, [r1, #16]
 8007348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800734c:	4293      	cmp	r3, r2
 800734e:	bfb8      	it	lt
 8007350:	4613      	movlt	r3, r2
 8007352:	f8c9 3000 	str.w	r3, [r9]
 8007356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	b112      	cbz	r2, 8007366 <_printf_common+0x2a>
 8007360:	3301      	adds	r3, #1
 8007362:	f8c9 3000 	str.w	r3, [r9]
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	0699      	lsls	r1, r3, #26
 800736a:	bf42      	ittt	mi
 800736c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007370:	3302      	addmi	r3, #2
 8007372:	f8c9 3000 	strmi.w	r3, [r9]
 8007376:	6825      	ldr	r5, [r4, #0]
 8007378:	f015 0506 	ands.w	r5, r5, #6
 800737c:	d107      	bne.n	800738e <_printf_common+0x52>
 800737e:	f104 0a19 	add.w	sl, r4, #25
 8007382:	68e3      	ldr	r3, [r4, #12]
 8007384:	f8d9 2000 	ldr.w	r2, [r9]
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	42ab      	cmp	r3, r5
 800738c:	dc28      	bgt.n	80073e0 <_printf_common+0xa4>
 800738e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007392:	6822      	ldr	r2, [r4, #0]
 8007394:	3300      	adds	r3, #0
 8007396:	bf18      	it	ne
 8007398:	2301      	movne	r3, #1
 800739a:	0692      	lsls	r2, r2, #26
 800739c:	d42d      	bmi.n	80073fa <_printf_common+0xbe>
 800739e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a2:	4639      	mov	r1, r7
 80073a4:	4630      	mov	r0, r6
 80073a6:	47c0      	blx	r8
 80073a8:	3001      	adds	r0, #1
 80073aa:	d020      	beq.n	80073ee <_printf_common+0xb2>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	68e5      	ldr	r5, [r4, #12]
 80073b0:	f8d9 2000 	ldr.w	r2, [r9]
 80073b4:	f003 0306 	and.w	r3, r3, #6
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	bf08      	it	eq
 80073bc:	1aad      	subeq	r5, r5, r2
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	bf0c      	ite	eq
 80073c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073c8:	2500      	movne	r5, #0
 80073ca:	4293      	cmp	r3, r2
 80073cc:	bfc4      	itt	gt
 80073ce:	1a9b      	subgt	r3, r3, r2
 80073d0:	18ed      	addgt	r5, r5, r3
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	341a      	adds	r4, #26
 80073d8:	454d      	cmp	r5, r9
 80073da:	d11a      	bne.n	8007412 <_printf_common+0xd6>
 80073dc:	2000      	movs	r0, #0
 80073de:	e008      	b.n	80073f2 <_printf_common+0xb6>
 80073e0:	2301      	movs	r3, #1
 80073e2:	4652      	mov	r2, sl
 80073e4:	4639      	mov	r1, r7
 80073e6:	4630      	mov	r0, r6
 80073e8:	47c0      	blx	r8
 80073ea:	3001      	adds	r0, #1
 80073ec:	d103      	bne.n	80073f6 <_printf_common+0xba>
 80073ee:	f04f 30ff 	mov.w	r0, #4294967295
 80073f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f6:	3501      	adds	r5, #1
 80073f8:	e7c3      	b.n	8007382 <_printf_common+0x46>
 80073fa:	18e1      	adds	r1, r4, r3
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	2030      	movs	r0, #48	; 0x30
 8007400:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007404:	4422      	add	r2, r4
 8007406:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800740a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800740e:	3302      	adds	r3, #2
 8007410:	e7c5      	b.n	800739e <_printf_common+0x62>
 8007412:	2301      	movs	r3, #1
 8007414:	4622      	mov	r2, r4
 8007416:	4639      	mov	r1, r7
 8007418:	4630      	mov	r0, r6
 800741a:	47c0      	blx	r8
 800741c:	3001      	adds	r0, #1
 800741e:	d0e6      	beq.n	80073ee <_printf_common+0xb2>
 8007420:	f109 0901 	add.w	r9, r9, #1
 8007424:	e7d8      	b.n	80073d8 <_printf_common+0x9c>
	...

08007428 <_printf_i>:
 8007428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800742c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007430:	460c      	mov	r4, r1
 8007432:	7e09      	ldrb	r1, [r1, #24]
 8007434:	b085      	sub	sp, #20
 8007436:	296e      	cmp	r1, #110	; 0x6e
 8007438:	4617      	mov	r7, r2
 800743a:	4606      	mov	r6, r0
 800743c:	4698      	mov	r8, r3
 800743e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007440:	f000 80b3 	beq.w	80075aa <_printf_i+0x182>
 8007444:	d822      	bhi.n	800748c <_printf_i+0x64>
 8007446:	2963      	cmp	r1, #99	; 0x63
 8007448:	d036      	beq.n	80074b8 <_printf_i+0x90>
 800744a:	d80a      	bhi.n	8007462 <_printf_i+0x3a>
 800744c:	2900      	cmp	r1, #0
 800744e:	f000 80b9 	beq.w	80075c4 <_printf_i+0x19c>
 8007452:	2958      	cmp	r1, #88	; 0x58
 8007454:	f000 8083 	beq.w	800755e <_printf_i+0x136>
 8007458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800745c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007460:	e032      	b.n	80074c8 <_printf_i+0xa0>
 8007462:	2964      	cmp	r1, #100	; 0x64
 8007464:	d001      	beq.n	800746a <_printf_i+0x42>
 8007466:	2969      	cmp	r1, #105	; 0x69
 8007468:	d1f6      	bne.n	8007458 <_printf_i+0x30>
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	6813      	ldr	r3, [r2, #0]
 800746e:	0605      	lsls	r5, r0, #24
 8007470:	f103 0104 	add.w	r1, r3, #4
 8007474:	d52a      	bpl.n	80074cc <_printf_i+0xa4>
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6011      	str	r1, [r2, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	da03      	bge.n	8007486 <_printf_i+0x5e>
 800747e:	222d      	movs	r2, #45	; 0x2d
 8007480:	425b      	negs	r3, r3
 8007482:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007486:	486f      	ldr	r0, [pc, #444]	; (8007644 <_printf_i+0x21c>)
 8007488:	220a      	movs	r2, #10
 800748a:	e039      	b.n	8007500 <_printf_i+0xd8>
 800748c:	2973      	cmp	r1, #115	; 0x73
 800748e:	f000 809d 	beq.w	80075cc <_printf_i+0x1a4>
 8007492:	d808      	bhi.n	80074a6 <_printf_i+0x7e>
 8007494:	296f      	cmp	r1, #111	; 0x6f
 8007496:	d020      	beq.n	80074da <_printf_i+0xb2>
 8007498:	2970      	cmp	r1, #112	; 0x70
 800749a:	d1dd      	bne.n	8007458 <_printf_i+0x30>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	f043 0320 	orr.w	r3, r3, #32
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	e003      	b.n	80074ae <_printf_i+0x86>
 80074a6:	2975      	cmp	r1, #117	; 0x75
 80074a8:	d017      	beq.n	80074da <_printf_i+0xb2>
 80074aa:	2978      	cmp	r1, #120	; 0x78
 80074ac:	d1d4      	bne.n	8007458 <_printf_i+0x30>
 80074ae:	2378      	movs	r3, #120	; 0x78
 80074b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074b4:	4864      	ldr	r0, [pc, #400]	; (8007648 <_printf_i+0x220>)
 80074b6:	e055      	b.n	8007564 <_printf_i+0x13c>
 80074b8:	6813      	ldr	r3, [r2, #0]
 80074ba:	1d19      	adds	r1, r3, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6011      	str	r1, [r2, #0]
 80074c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074c8:	2301      	movs	r3, #1
 80074ca:	e08c      	b.n	80075e6 <_printf_i+0x1be>
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6011      	str	r1, [r2, #0]
 80074d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074d4:	bf18      	it	ne
 80074d6:	b21b      	sxthne	r3, r3
 80074d8:	e7cf      	b.n	800747a <_printf_i+0x52>
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	6825      	ldr	r5, [r4, #0]
 80074de:	1d18      	adds	r0, r3, #4
 80074e0:	6010      	str	r0, [r2, #0]
 80074e2:	0628      	lsls	r0, r5, #24
 80074e4:	d501      	bpl.n	80074ea <_printf_i+0xc2>
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	e002      	b.n	80074f0 <_printf_i+0xc8>
 80074ea:	0668      	lsls	r0, r5, #25
 80074ec:	d5fb      	bpl.n	80074e6 <_printf_i+0xbe>
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	4854      	ldr	r0, [pc, #336]	; (8007644 <_printf_i+0x21c>)
 80074f2:	296f      	cmp	r1, #111	; 0x6f
 80074f4:	bf14      	ite	ne
 80074f6:	220a      	movne	r2, #10
 80074f8:	2208      	moveq	r2, #8
 80074fa:	2100      	movs	r1, #0
 80074fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007500:	6865      	ldr	r5, [r4, #4]
 8007502:	60a5      	str	r5, [r4, #8]
 8007504:	2d00      	cmp	r5, #0
 8007506:	f2c0 8095 	blt.w	8007634 <_printf_i+0x20c>
 800750a:	6821      	ldr	r1, [r4, #0]
 800750c:	f021 0104 	bic.w	r1, r1, #4
 8007510:	6021      	str	r1, [r4, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d13d      	bne.n	8007592 <_printf_i+0x16a>
 8007516:	2d00      	cmp	r5, #0
 8007518:	f040 808e 	bne.w	8007638 <_printf_i+0x210>
 800751c:	4665      	mov	r5, ip
 800751e:	2a08      	cmp	r2, #8
 8007520:	d10b      	bne.n	800753a <_printf_i+0x112>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	07db      	lsls	r3, r3, #31
 8007526:	d508      	bpl.n	800753a <_printf_i+0x112>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	6862      	ldr	r2, [r4, #4]
 800752c:	429a      	cmp	r2, r3
 800752e:	bfde      	ittt	le
 8007530:	2330      	movle	r3, #48	; 0x30
 8007532:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007536:	f105 35ff 	addle.w	r5, r5, #4294967295
 800753a:	ebac 0305 	sub.w	r3, ip, r5
 800753e:	6123      	str	r3, [r4, #16]
 8007540:	f8cd 8000 	str.w	r8, [sp]
 8007544:	463b      	mov	r3, r7
 8007546:	aa03      	add	r2, sp, #12
 8007548:	4621      	mov	r1, r4
 800754a:	4630      	mov	r0, r6
 800754c:	f7ff fef6 	bl	800733c <_printf_common>
 8007550:	3001      	adds	r0, #1
 8007552:	d14d      	bne.n	80075f0 <_printf_i+0x1c8>
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	b005      	add	sp, #20
 800755a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800755e:	4839      	ldr	r0, [pc, #228]	; (8007644 <_printf_i+0x21c>)
 8007560:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007564:	6813      	ldr	r3, [r2, #0]
 8007566:	6821      	ldr	r1, [r4, #0]
 8007568:	1d1d      	adds	r5, r3, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6015      	str	r5, [r2, #0]
 800756e:	060a      	lsls	r2, r1, #24
 8007570:	d50b      	bpl.n	800758a <_printf_i+0x162>
 8007572:	07ca      	lsls	r2, r1, #31
 8007574:	bf44      	itt	mi
 8007576:	f041 0120 	orrmi.w	r1, r1, #32
 800757a:	6021      	strmi	r1, [r4, #0]
 800757c:	b91b      	cbnz	r3, 8007586 <_printf_i+0x15e>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	f022 0220 	bic.w	r2, r2, #32
 8007584:	6022      	str	r2, [r4, #0]
 8007586:	2210      	movs	r2, #16
 8007588:	e7b7      	b.n	80074fa <_printf_i+0xd2>
 800758a:	064d      	lsls	r5, r1, #25
 800758c:	bf48      	it	mi
 800758e:	b29b      	uxthmi	r3, r3
 8007590:	e7ef      	b.n	8007572 <_printf_i+0x14a>
 8007592:	4665      	mov	r5, ip
 8007594:	fbb3 f1f2 	udiv	r1, r3, r2
 8007598:	fb02 3311 	mls	r3, r2, r1, r3
 800759c:	5cc3      	ldrb	r3, [r0, r3]
 800759e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80075a2:	460b      	mov	r3, r1
 80075a4:	2900      	cmp	r1, #0
 80075a6:	d1f5      	bne.n	8007594 <_printf_i+0x16c>
 80075a8:	e7b9      	b.n	800751e <_printf_i+0xf6>
 80075aa:	6813      	ldr	r3, [r2, #0]
 80075ac:	6825      	ldr	r5, [r4, #0]
 80075ae:	6961      	ldr	r1, [r4, #20]
 80075b0:	1d18      	adds	r0, r3, #4
 80075b2:	6010      	str	r0, [r2, #0]
 80075b4:	0628      	lsls	r0, r5, #24
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	d501      	bpl.n	80075be <_printf_i+0x196>
 80075ba:	6019      	str	r1, [r3, #0]
 80075bc:	e002      	b.n	80075c4 <_printf_i+0x19c>
 80075be:	066a      	lsls	r2, r5, #25
 80075c0:	d5fb      	bpl.n	80075ba <_printf_i+0x192>
 80075c2:	8019      	strh	r1, [r3, #0]
 80075c4:	2300      	movs	r3, #0
 80075c6:	6123      	str	r3, [r4, #16]
 80075c8:	4665      	mov	r5, ip
 80075ca:	e7b9      	b.n	8007540 <_printf_i+0x118>
 80075cc:	6813      	ldr	r3, [r2, #0]
 80075ce:	1d19      	adds	r1, r3, #4
 80075d0:	6011      	str	r1, [r2, #0]
 80075d2:	681d      	ldr	r5, [r3, #0]
 80075d4:	6862      	ldr	r2, [r4, #4]
 80075d6:	2100      	movs	r1, #0
 80075d8:	4628      	mov	r0, r5
 80075da:	f7f8 fe01 	bl	80001e0 <memchr>
 80075de:	b108      	cbz	r0, 80075e4 <_printf_i+0x1bc>
 80075e0:	1b40      	subs	r0, r0, r5
 80075e2:	6060      	str	r0, [r4, #4]
 80075e4:	6863      	ldr	r3, [r4, #4]
 80075e6:	6123      	str	r3, [r4, #16]
 80075e8:	2300      	movs	r3, #0
 80075ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ee:	e7a7      	b.n	8007540 <_printf_i+0x118>
 80075f0:	6923      	ldr	r3, [r4, #16]
 80075f2:	462a      	mov	r2, r5
 80075f4:	4639      	mov	r1, r7
 80075f6:	4630      	mov	r0, r6
 80075f8:	47c0      	blx	r8
 80075fa:	3001      	adds	r0, #1
 80075fc:	d0aa      	beq.n	8007554 <_printf_i+0x12c>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	079b      	lsls	r3, r3, #30
 8007602:	d413      	bmi.n	800762c <_printf_i+0x204>
 8007604:	68e0      	ldr	r0, [r4, #12]
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	4298      	cmp	r0, r3
 800760a:	bfb8      	it	lt
 800760c:	4618      	movlt	r0, r3
 800760e:	e7a3      	b.n	8007558 <_printf_i+0x130>
 8007610:	2301      	movs	r3, #1
 8007612:	464a      	mov	r2, r9
 8007614:	4639      	mov	r1, r7
 8007616:	4630      	mov	r0, r6
 8007618:	47c0      	blx	r8
 800761a:	3001      	adds	r0, #1
 800761c:	d09a      	beq.n	8007554 <_printf_i+0x12c>
 800761e:	3501      	adds	r5, #1
 8007620:	68e3      	ldr	r3, [r4, #12]
 8007622:	9a03      	ldr	r2, [sp, #12]
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	42ab      	cmp	r3, r5
 8007628:	dcf2      	bgt.n	8007610 <_printf_i+0x1e8>
 800762a:	e7eb      	b.n	8007604 <_printf_i+0x1dc>
 800762c:	2500      	movs	r5, #0
 800762e:	f104 0919 	add.w	r9, r4, #25
 8007632:	e7f5      	b.n	8007620 <_printf_i+0x1f8>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1ac      	bne.n	8007592 <_printf_i+0x16a>
 8007638:	7803      	ldrb	r3, [r0, #0]
 800763a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800763e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007642:	e76c      	b.n	800751e <_printf_i+0xf6>
 8007644:	0800b3b2 	.word	0x0800b3b2
 8007648:	0800b3c3 	.word	0x0800b3c3

0800764c <_scanf_float>:
 800764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	469a      	mov	sl, r3
 8007652:	688b      	ldr	r3, [r1, #8]
 8007654:	4616      	mov	r6, r2
 8007656:	1e5a      	subs	r2, r3, #1
 8007658:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800765c:	b087      	sub	sp, #28
 800765e:	bf83      	ittte	hi
 8007660:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007664:	189b      	addhi	r3, r3, r2
 8007666:	9301      	strhi	r3, [sp, #4]
 8007668:	2300      	movls	r3, #0
 800766a:	bf86      	itte	hi
 800766c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007670:	608b      	strhi	r3, [r1, #8]
 8007672:	9301      	strls	r3, [sp, #4]
 8007674:	680b      	ldr	r3, [r1, #0]
 8007676:	4688      	mov	r8, r1
 8007678:	f04f 0b00 	mov.w	fp, #0
 800767c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007680:	f848 3b1c 	str.w	r3, [r8], #28
 8007684:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007688:	4607      	mov	r7, r0
 800768a:	460c      	mov	r4, r1
 800768c:	4645      	mov	r5, r8
 800768e:	465a      	mov	r2, fp
 8007690:	46d9      	mov	r9, fp
 8007692:	f8cd b008 	str.w	fp, [sp, #8]
 8007696:	68a1      	ldr	r1, [r4, #8]
 8007698:	b181      	cbz	r1, 80076bc <_scanf_float+0x70>
 800769a:	6833      	ldr	r3, [r6, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b49      	cmp	r3, #73	; 0x49
 80076a0:	d071      	beq.n	8007786 <_scanf_float+0x13a>
 80076a2:	d84d      	bhi.n	8007740 <_scanf_float+0xf4>
 80076a4:	2b39      	cmp	r3, #57	; 0x39
 80076a6:	d840      	bhi.n	800772a <_scanf_float+0xde>
 80076a8:	2b31      	cmp	r3, #49	; 0x31
 80076aa:	f080 8088 	bcs.w	80077be <_scanf_float+0x172>
 80076ae:	2b2d      	cmp	r3, #45	; 0x2d
 80076b0:	f000 8090 	beq.w	80077d4 <_scanf_float+0x188>
 80076b4:	d815      	bhi.n	80076e2 <_scanf_float+0x96>
 80076b6:	2b2b      	cmp	r3, #43	; 0x2b
 80076b8:	f000 808c 	beq.w	80077d4 <_scanf_float+0x188>
 80076bc:	f1b9 0f00 	cmp.w	r9, #0
 80076c0:	d003      	beq.n	80076ca <_scanf_float+0x7e>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	3a01      	subs	r2, #1
 80076cc:	2a01      	cmp	r2, #1
 80076ce:	f200 80ea 	bhi.w	80078a6 <_scanf_float+0x25a>
 80076d2:	4545      	cmp	r5, r8
 80076d4:	f200 80dc 	bhi.w	8007890 <_scanf_float+0x244>
 80076d8:	2601      	movs	r6, #1
 80076da:	4630      	mov	r0, r6
 80076dc:	b007      	add	sp, #28
 80076de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e2:	2b2e      	cmp	r3, #46	; 0x2e
 80076e4:	f000 809f 	beq.w	8007826 <_scanf_float+0x1da>
 80076e8:	2b30      	cmp	r3, #48	; 0x30
 80076ea:	d1e7      	bne.n	80076bc <_scanf_float+0x70>
 80076ec:	6820      	ldr	r0, [r4, #0]
 80076ee:	f410 7f80 	tst.w	r0, #256	; 0x100
 80076f2:	d064      	beq.n	80077be <_scanf_float+0x172>
 80076f4:	9b01      	ldr	r3, [sp, #4]
 80076f6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80076fa:	6020      	str	r0, [r4, #0]
 80076fc:	f109 0901 	add.w	r9, r9, #1
 8007700:	b11b      	cbz	r3, 800770a <_scanf_float+0xbe>
 8007702:	3b01      	subs	r3, #1
 8007704:	3101      	adds	r1, #1
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	60a1      	str	r1, [r4, #8]
 800770a:	68a3      	ldr	r3, [r4, #8]
 800770c:	3b01      	subs	r3, #1
 800770e:	60a3      	str	r3, [r4, #8]
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	3301      	adds	r3, #1
 8007714:	6123      	str	r3, [r4, #16]
 8007716:	6873      	ldr	r3, [r6, #4]
 8007718:	3b01      	subs	r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	6073      	str	r3, [r6, #4]
 800771e:	f340 80ac 	ble.w	800787a <_scanf_float+0x22e>
 8007722:	6833      	ldr	r3, [r6, #0]
 8007724:	3301      	adds	r3, #1
 8007726:	6033      	str	r3, [r6, #0]
 8007728:	e7b5      	b.n	8007696 <_scanf_float+0x4a>
 800772a:	2b45      	cmp	r3, #69	; 0x45
 800772c:	f000 8085 	beq.w	800783a <_scanf_float+0x1ee>
 8007730:	2b46      	cmp	r3, #70	; 0x46
 8007732:	d06a      	beq.n	800780a <_scanf_float+0x1be>
 8007734:	2b41      	cmp	r3, #65	; 0x41
 8007736:	d1c1      	bne.n	80076bc <_scanf_float+0x70>
 8007738:	2a01      	cmp	r2, #1
 800773a:	d1bf      	bne.n	80076bc <_scanf_float+0x70>
 800773c:	2202      	movs	r2, #2
 800773e:	e046      	b.n	80077ce <_scanf_float+0x182>
 8007740:	2b65      	cmp	r3, #101	; 0x65
 8007742:	d07a      	beq.n	800783a <_scanf_float+0x1ee>
 8007744:	d818      	bhi.n	8007778 <_scanf_float+0x12c>
 8007746:	2b54      	cmp	r3, #84	; 0x54
 8007748:	d066      	beq.n	8007818 <_scanf_float+0x1cc>
 800774a:	d811      	bhi.n	8007770 <_scanf_float+0x124>
 800774c:	2b4e      	cmp	r3, #78	; 0x4e
 800774e:	d1b5      	bne.n	80076bc <_scanf_float+0x70>
 8007750:	2a00      	cmp	r2, #0
 8007752:	d146      	bne.n	80077e2 <_scanf_float+0x196>
 8007754:	f1b9 0f00 	cmp.w	r9, #0
 8007758:	d145      	bne.n	80077e6 <_scanf_float+0x19a>
 800775a:	6821      	ldr	r1, [r4, #0]
 800775c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007760:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007764:	d13f      	bne.n	80077e6 <_scanf_float+0x19a>
 8007766:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800776a:	6021      	str	r1, [r4, #0]
 800776c:	2201      	movs	r2, #1
 800776e:	e02e      	b.n	80077ce <_scanf_float+0x182>
 8007770:	2b59      	cmp	r3, #89	; 0x59
 8007772:	d01e      	beq.n	80077b2 <_scanf_float+0x166>
 8007774:	2b61      	cmp	r3, #97	; 0x61
 8007776:	e7de      	b.n	8007736 <_scanf_float+0xea>
 8007778:	2b6e      	cmp	r3, #110	; 0x6e
 800777a:	d0e9      	beq.n	8007750 <_scanf_float+0x104>
 800777c:	d815      	bhi.n	80077aa <_scanf_float+0x15e>
 800777e:	2b66      	cmp	r3, #102	; 0x66
 8007780:	d043      	beq.n	800780a <_scanf_float+0x1be>
 8007782:	2b69      	cmp	r3, #105	; 0x69
 8007784:	d19a      	bne.n	80076bc <_scanf_float+0x70>
 8007786:	f1bb 0f00 	cmp.w	fp, #0
 800778a:	d138      	bne.n	80077fe <_scanf_float+0x1b2>
 800778c:	f1b9 0f00 	cmp.w	r9, #0
 8007790:	d197      	bne.n	80076c2 <_scanf_float+0x76>
 8007792:	6821      	ldr	r1, [r4, #0]
 8007794:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007798:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800779c:	d195      	bne.n	80076ca <_scanf_float+0x7e>
 800779e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80077a2:	6021      	str	r1, [r4, #0]
 80077a4:	f04f 0b01 	mov.w	fp, #1
 80077a8:	e011      	b.n	80077ce <_scanf_float+0x182>
 80077aa:	2b74      	cmp	r3, #116	; 0x74
 80077ac:	d034      	beq.n	8007818 <_scanf_float+0x1cc>
 80077ae:	2b79      	cmp	r3, #121	; 0x79
 80077b0:	d184      	bne.n	80076bc <_scanf_float+0x70>
 80077b2:	f1bb 0f07 	cmp.w	fp, #7
 80077b6:	d181      	bne.n	80076bc <_scanf_float+0x70>
 80077b8:	f04f 0b08 	mov.w	fp, #8
 80077bc:	e007      	b.n	80077ce <_scanf_float+0x182>
 80077be:	eb12 0f0b 	cmn.w	r2, fp
 80077c2:	f47f af7b 	bne.w	80076bc <_scanf_float+0x70>
 80077c6:	6821      	ldr	r1, [r4, #0]
 80077c8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80077cc:	6021      	str	r1, [r4, #0]
 80077ce:	702b      	strb	r3, [r5, #0]
 80077d0:	3501      	adds	r5, #1
 80077d2:	e79a      	b.n	800770a <_scanf_float+0xbe>
 80077d4:	6821      	ldr	r1, [r4, #0]
 80077d6:	0608      	lsls	r0, r1, #24
 80077d8:	f57f af70 	bpl.w	80076bc <_scanf_float+0x70>
 80077dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80077e0:	e7f4      	b.n	80077cc <_scanf_float+0x180>
 80077e2:	2a02      	cmp	r2, #2
 80077e4:	d047      	beq.n	8007876 <_scanf_float+0x22a>
 80077e6:	f1bb 0f01 	cmp.w	fp, #1
 80077ea:	d003      	beq.n	80077f4 <_scanf_float+0x1a8>
 80077ec:	f1bb 0f04 	cmp.w	fp, #4
 80077f0:	f47f af64 	bne.w	80076bc <_scanf_float+0x70>
 80077f4:	f10b 0b01 	add.w	fp, fp, #1
 80077f8:	fa5f fb8b 	uxtb.w	fp, fp
 80077fc:	e7e7      	b.n	80077ce <_scanf_float+0x182>
 80077fe:	f1bb 0f03 	cmp.w	fp, #3
 8007802:	d0f7      	beq.n	80077f4 <_scanf_float+0x1a8>
 8007804:	f1bb 0f05 	cmp.w	fp, #5
 8007808:	e7f2      	b.n	80077f0 <_scanf_float+0x1a4>
 800780a:	f1bb 0f02 	cmp.w	fp, #2
 800780e:	f47f af55 	bne.w	80076bc <_scanf_float+0x70>
 8007812:	f04f 0b03 	mov.w	fp, #3
 8007816:	e7da      	b.n	80077ce <_scanf_float+0x182>
 8007818:	f1bb 0f06 	cmp.w	fp, #6
 800781c:	f47f af4e 	bne.w	80076bc <_scanf_float+0x70>
 8007820:	f04f 0b07 	mov.w	fp, #7
 8007824:	e7d3      	b.n	80077ce <_scanf_float+0x182>
 8007826:	6821      	ldr	r1, [r4, #0]
 8007828:	0588      	lsls	r0, r1, #22
 800782a:	f57f af47 	bpl.w	80076bc <_scanf_float+0x70>
 800782e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007832:	6021      	str	r1, [r4, #0]
 8007834:	f8cd 9008 	str.w	r9, [sp, #8]
 8007838:	e7c9      	b.n	80077ce <_scanf_float+0x182>
 800783a:	6821      	ldr	r1, [r4, #0]
 800783c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007840:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007844:	d006      	beq.n	8007854 <_scanf_float+0x208>
 8007846:	0548      	lsls	r0, r1, #21
 8007848:	f57f af38 	bpl.w	80076bc <_scanf_float+0x70>
 800784c:	f1b9 0f00 	cmp.w	r9, #0
 8007850:	f43f af3b 	beq.w	80076ca <_scanf_float+0x7e>
 8007854:	0588      	lsls	r0, r1, #22
 8007856:	bf58      	it	pl
 8007858:	9802      	ldrpl	r0, [sp, #8]
 800785a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800785e:	bf58      	it	pl
 8007860:	eba9 0000 	subpl.w	r0, r9, r0
 8007864:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007868:	bf58      	it	pl
 800786a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800786e:	6021      	str	r1, [r4, #0]
 8007870:	f04f 0900 	mov.w	r9, #0
 8007874:	e7ab      	b.n	80077ce <_scanf_float+0x182>
 8007876:	2203      	movs	r2, #3
 8007878:	e7a9      	b.n	80077ce <_scanf_float+0x182>
 800787a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800787e:	9205      	str	r2, [sp, #20]
 8007880:	4631      	mov	r1, r6
 8007882:	4638      	mov	r0, r7
 8007884:	4798      	blx	r3
 8007886:	9a05      	ldr	r2, [sp, #20]
 8007888:	2800      	cmp	r0, #0
 800788a:	f43f af04 	beq.w	8007696 <_scanf_float+0x4a>
 800788e:	e715      	b.n	80076bc <_scanf_float+0x70>
 8007890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007894:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007898:	4632      	mov	r2, r6
 800789a:	4638      	mov	r0, r7
 800789c:	4798      	blx	r3
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	6123      	str	r3, [r4, #16]
 80078a4:	e715      	b.n	80076d2 <_scanf_float+0x86>
 80078a6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80078aa:	2b06      	cmp	r3, #6
 80078ac:	d80a      	bhi.n	80078c4 <_scanf_float+0x278>
 80078ae:	f1bb 0f02 	cmp.w	fp, #2
 80078b2:	d968      	bls.n	8007986 <_scanf_float+0x33a>
 80078b4:	f1ab 0b03 	sub.w	fp, fp, #3
 80078b8:	fa5f fb8b 	uxtb.w	fp, fp
 80078bc:	eba5 0b0b 	sub.w	fp, r5, fp
 80078c0:	455d      	cmp	r5, fp
 80078c2:	d14b      	bne.n	800795c <_scanf_float+0x310>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	05da      	lsls	r2, r3, #23
 80078c8:	d51f      	bpl.n	800790a <_scanf_float+0x2be>
 80078ca:	055b      	lsls	r3, r3, #21
 80078cc:	d468      	bmi.n	80079a0 <_scanf_float+0x354>
 80078ce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80078d2:	6923      	ldr	r3, [r4, #16]
 80078d4:	2965      	cmp	r1, #101	; 0x65
 80078d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80078da:	f105 3bff 	add.w	fp, r5, #4294967295
 80078de:	6123      	str	r3, [r4, #16]
 80078e0:	d00d      	beq.n	80078fe <_scanf_float+0x2b2>
 80078e2:	2945      	cmp	r1, #69	; 0x45
 80078e4:	d00b      	beq.n	80078fe <_scanf_float+0x2b2>
 80078e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078ea:	4632      	mov	r2, r6
 80078ec:	4638      	mov	r0, r7
 80078ee:	4798      	blx	r3
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	f1a5 0b02 	sub.w	fp, r5, #2
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007902:	4632      	mov	r2, r6
 8007904:	4638      	mov	r0, r7
 8007906:	4798      	blx	r3
 8007908:	465d      	mov	r5, fp
 800790a:	6826      	ldr	r6, [r4, #0]
 800790c:	f016 0610 	ands.w	r6, r6, #16
 8007910:	d17a      	bne.n	8007a08 <_scanf_float+0x3bc>
 8007912:	702e      	strb	r6, [r5, #0]
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800791a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800791e:	d142      	bne.n	80079a6 <_scanf_float+0x35a>
 8007920:	9b02      	ldr	r3, [sp, #8]
 8007922:	eba9 0303 	sub.w	r3, r9, r3
 8007926:	425a      	negs	r2, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d149      	bne.n	80079c0 <_scanf_float+0x374>
 800792c:	2200      	movs	r2, #0
 800792e:	4641      	mov	r1, r8
 8007930:	4638      	mov	r0, r7
 8007932:	f000 ff21 	bl	8008778 <_strtod_r>
 8007936:	6825      	ldr	r5, [r4, #0]
 8007938:	f8da 3000 	ldr.w	r3, [sl]
 800793c:	f015 0f02 	tst.w	r5, #2
 8007940:	f103 0204 	add.w	r2, r3, #4
 8007944:	ec59 8b10 	vmov	r8, r9, d0
 8007948:	f8ca 2000 	str.w	r2, [sl]
 800794c:	d043      	beq.n	80079d6 <_scanf_float+0x38a>
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	e9c3 8900 	strd	r8, r9, [r3]
 8007954:	68e3      	ldr	r3, [r4, #12]
 8007956:	3301      	adds	r3, #1
 8007958:	60e3      	str	r3, [r4, #12]
 800795a:	e6be      	b.n	80076da <_scanf_float+0x8e>
 800795c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007960:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007964:	4632      	mov	r2, r6
 8007966:	4638      	mov	r0, r7
 8007968:	4798      	blx	r3
 800796a:	6923      	ldr	r3, [r4, #16]
 800796c:	3b01      	subs	r3, #1
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	e7a6      	b.n	80078c0 <_scanf_float+0x274>
 8007972:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007976:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800797a:	4632      	mov	r2, r6
 800797c:	4638      	mov	r0, r7
 800797e:	4798      	blx	r3
 8007980:	6923      	ldr	r3, [r4, #16]
 8007982:	3b01      	subs	r3, #1
 8007984:	6123      	str	r3, [r4, #16]
 8007986:	4545      	cmp	r5, r8
 8007988:	d8f3      	bhi.n	8007972 <_scanf_float+0x326>
 800798a:	e6a5      	b.n	80076d8 <_scanf_float+0x8c>
 800798c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007990:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007994:	4632      	mov	r2, r6
 8007996:	4638      	mov	r0, r7
 8007998:	4798      	blx	r3
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	3b01      	subs	r3, #1
 800799e:	6123      	str	r3, [r4, #16]
 80079a0:	4545      	cmp	r5, r8
 80079a2:	d8f3      	bhi.n	800798c <_scanf_float+0x340>
 80079a4:	e698      	b.n	80076d8 <_scanf_float+0x8c>
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0bf      	beq.n	800792c <_scanf_float+0x2e0>
 80079ac:	9904      	ldr	r1, [sp, #16]
 80079ae:	230a      	movs	r3, #10
 80079b0:	4632      	mov	r2, r6
 80079b2:	3101      	adds	r1, #1
 80079b4:	4638      	mov	r0, r7
 80079b6:	f000 ff6b 	bl	8008890 <_strtol_r>
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	9d04      	ldr	r5, [sp, #16]
 80079be:	1ac2      	subs	r2, r0, r3
 80079c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80079c4:	429d      	cmp	r5, r3
 80079c6:	bf28      	it	cs
 80079c8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80079cc:	490f      	ldr	r1, [pc, #60]	; (8007a0c <_scanf_float+0x3c0>)
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 f8a0 	bl	8007b14 <siprintf>
 80079d4:	e7aa      	b.n	800792c <_scanf_float+0x2e0>
 80079d6:	f015 0504 	ands.w	r5, r5, #4
 80079da:	d1b8      	bne.n	800794e <_scanf_float+0x302>
 80079dc:	681f      	ldr	r7, [r3, #0]
 80079de:	ee10 2a10 	vmov	r2, s0
 80079e2:	464b      	mov	r3, r9
 80079e4:	ee10 0a10 	vmov	r0, s0
 80079e8:	4649      	mov	r1, r9
 80079ea:	f7f9 f89f 	bl	8000b2c <__aeabi_dcmpun>
 80079ee:	b128      	cbz	r0, 80079fc <_scanf_float+0x3b0>
 80079f0:	4628      	mov	r0, r5
 80079f2:	f000 f889 	bl	8007b08 <nanf>
 80079f6:	ed87 0a00 	vstr	s0, [r7]
 80079fa:	e7ab      	b.n	8007954 <_scanf_float+0x308>
 80079fc:	4640      	mov	r0, r8
 80079fe:	4649      	mov	r1, r9
 8007a00:	f7f9 f8f2 	bl	8000be8 <__aeabi_d2f>
 8007a04:	6038      	str	r0, [r7, #0]
 8007a06:	e7a5      	b.n	8007954 <_scanf_float+0x308>
 8007a08:	2600      	movs	r6, #0
 8007a0a:	e666      	b.n	80076da <_scanf_float+0x8e>
 8007a0c:	0800b3d4 	.word	0x0800b3d4

08007a10 <iprintf>:
 8007a10:	b40f      	push	{r0, r1, r2, r3}
 8007a12:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <iprintf+0x2c>)
 8007a14:	b513      	push	{r0, r1, r4, lr}
 8007a16:	681c      	ldr	r4, [r3, #0]
 8007a18:	b124      	cbz	r4, 8007a24 <iprintf+0x14>
 8007a1a:	69a3      	ldr	r3, [r4, #24]
 8007a1c:	b913      	cbnz	r3, 8007a24 <iprintf+0x14>
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f001 ff3e 	bl	80098a0 <__sinit>
 8007a24:	ab05      	add	r3, sp, #20
 8007a26:	9a04      	ldr	r2, [sp, #16]
 8007a28:	68a1      	ldr	r1, [r4, #8]
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f003 f9b5 	bl	800ad9c <_vfiprintf_r>
 8007a32:	b002      	add	sp, #8
 8007a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a38:	b004      	add	sp, #16
 8007a3a:	4770      	bx	lr
 8007a3c:	2000000c 	.word	0x2000000c

08007a40 <_puts_r>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	460e      	mov	r6, r1
 8007a44:	4605      	mov	r5, r0
 8007a46:	b118      	cbz	r0, 8007a50 <_puts_r+0x10>
 8007a48:	6983      	ldr	r3, [r0, #24]
 8007a4a:	b90b      	cbnz	r3, 8007a50 <_puts_r+0x10>
 8007a4c:	f001 ff28 	bl	80098a0 <__sinit>
 8007a50:	69ab      	ldr	r3, [r5, #24]
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	b913      	cbnz	r3, 8007a5c <_puts_r+0x1c>
 8007a56:	4628      	mov	r0, r5
 8007a58:	f001 ff22 	bl	80098a0 <__sinit>
 8007a5c:	4b23      	ldr	r3, [pc, #140]	; (8007aec <_puts_r+0xac>)
 8007a5e:	429c      	cmp	r4, r3
 8007a60:	d117      	bne.n	8007a92 <_puts_r+0x52>
 8007a62:	686c      	ldr	r4, [r5, #4]
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	071b      	lsls	r3, r3, #28
 8007a68:	d51d      	bpl.n	8007aa6 <_puts_r+0x66>
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	b1db      	cbz	r3, 8007aa6 <_puts_r+0x66>
 8007a6e:	3e01      	subs	r6, #1
 8007a70:	68a3      	ldr	r3, [r4, #8]
 8007a72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a76:	3b01      	subs	r3, #1
 8007a78:	60a3      	str	r3, [r4, #8]
 8007a7a:	b9e9      	cbnz	r1, 8007ab8 <_puts_r+0x78>
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	da2e      	bge.n	8007ade <_puts_r+0x9e>
 8007a80:	4622      	mov	r2, r4
 8007a82:	210a      	movs	r1, #10
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 ff15 	bl	80088b4 <__swbuf_r>
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d011      	beq.n	8007ab2 <_puts_r+0x72>
 8007a8e:	200a      	movs	r0, #10
 8007a90:	e011      	b.n	8007ab6 <_puts_r+0x76>
 8007a92:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <_puts_r+0xb0>)
 8007a94:	429c      	cmp	r4, r3
 8007a96:	d101      	bne.n	8007a9c <_puts_r+0x5c>
 8007a98:	68ac      	ldr	r4, [r5, #8]
 8007a9a:	e7e3      	b.n	8007a64 <_puts_r+0x24>
 8007a9c:	4b15      	ldr	r3, [pc, #84]	; (8007af4 <_puts_r+0xb4>)
 8007a9e:	429c      	cmp	r4, r3
 8007aa0:	bf08      	it	eq
 8007aa2:	68ec      	ldreq	r4, [r5, #12]
 8007aa4:	e7de      	b.n	8007a64 <_puts_r+0x24>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f000 ff55 	bl	8008958 <__swsetup_r>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d0dd      	beq.n	8007a6e <_puts_r+0x2e>
 8007ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	da04      	bge.n	8007ac6 <_puts_r+0x86>
 8007abc:	69a2      	ldr	r2, [r4, #24]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	dc06      	bgt.n	8007ad0 <_puts_r+0x90>
 8007ac2:	290a      	cmp	r1, #10
 8007ac4:	d004      	beq.n	8007ad0 <_puts_r+0x90>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	6022      	str	r2, [r4, #0]
 8007acc:	7019      	strb	r1, [r3, #0]
 8007ace:	e7cf      	b.n	8007a70 <_puts_r+0x30>
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 feee 	bl	80088b4 <__swbuf_r>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d1c9      	bne.n	8007a70 <_puts_r+0x30>
 8007adc:	e7e9      	b.n	8007ab2 <_puts_r+0x72>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	200a      	movs	r0, #10
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	6022      	str	r2, [r4, #0]
 8007ae6:	7018      	strb	r0, [r3, #0]
 8007ae8:	e7e5      	b.n	8007ab6 <_puts_r+0x76>
 8007aea:	bf00      	nop
 8007aec:	0800b460 	.word	0x0800b460
 8007af0:	0800b480 	.word	0x0800b480
 8007af4:	0800b440 	.word	0x0800b440

08007af8 <puts>:
 8007af8:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <puts+0xc>)
 8007afa:	4601      	mov	r1, r0
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	f7ff bf9f 	b.w	8007a40 <_puts_r>
 8007b02:	bf00      	nop
 8007b04:	2000000c 	.word	0x2000000c

08007b08 <nanf>:
 8007b08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b10 <nanf+0x8>
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	7fc00000 	.word	0x7fc00000

08007b14 <siprintf>:
 8007b14:	b40e      	push	{r1, r2, r3}
 8007b16:	b500      	push	{lr}
 8007b18:	b09c      	sub	sp, #112	; 0x70
 8007b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8007b1c:	9002      	str	r0, [sp, #8]
 8007b1e:	9006      	str	r0, [sp, #24]
 8007b20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b24:	4809      	ldr	r0, [pc, #36]	; (8007b4c <siprintf+0x38>)
 8007b26:	9107      	str	r1, [sp, #28]
 8007b28:	9104      	str	r1, [sp, #16]
 8007b2a:	4909      	ldr	r1, [pc, #36]	; (8007b50 <siprintf+0x3c>)
 8007b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b30:	9105      	str	r1, [sp, #20]
 8007b32:	6800      	ldr	r0, [r0, #0]
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	a902      	add	r1, sp, #8
 8007b38:	f003 f80e 	bl	800ab58 <_svfiprintf_r>
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	b01c      	add	sp, #112	; 0x70
 8007b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b48:	b003      	add	sp, #12
 8007b4a:	4770      	bx	lr
 8007b4c:	2000000c 	.word	0x2000000c
 8007b50:	ffff0208 	.word	0xffff0208

08007b54 <sulp>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	4604      	mov	r4, r0
 8007b58:	460d      	mov	r5, r1
 8007b5a:	ec45 4b10 	vmov	d0, r4, r5
 8007b5e:	4616      	mov	r6, r2
 8007b60:	f002 fdb6 	bl	800a6d0 <__ulp>
 8007b64:	ec51 0b10 	vmov	r0, r1, d0
 8007b68:	b17e      	cbz	r6, 8007b8a <sulp+0x36>
 8007b6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dd09      	ble.n	8007b8a <sulp+0x36>
 8007b76:	051b      	lsls	r3, r3, #20
 8007b78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b7c:	2400      	movs	r4, #0
 8007b7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b82:	4622      	mov	r2, r4
 8007b84:	462b      	mov	r3, r5
 8007b86:	f7f8 fd37 	bl	80005f8 <__aeabi_dmul>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	0000      	movs	r0, r0
	...

08007b90 <_strtod_l>:
 8007b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	461f      	mov	r7, r3
 8007b96:	b0a1      	sub	sp, #132	; 0x84
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4681      	mov	r9, r0
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	460e      	mov	r6, r1
 8007ba0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ba2:	931c      	str	r3, [sp, #112]	; 0x70
 8007ba4:	f002 fa2f 	bl	800a006 <__localeconv_l>
 8007ba8:	4680      	mov	r8, r0
 8007baa:	6800      	ldr	r0, [r0, #0]
 8007bac:	f7f8 fb10 	bl	80001d0 <strlen>
 8007bb0:	f04f 0a00 	mov.w	sl, #0
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	f04f 0b00 	mov.w	fp, #0
 8007bba:	961b      	str	r6, [sp, #108]	; 0x6c
 8007bbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bbe:	781a      	ldrb	r2, [r3, #0]
 8007bc0:	2a0d      	cmp	r2, #13
 8007bc2:	d832      	bhi.n	8007c2a <_strtod_l+0x9a>
 8007bc4:	2a09      	cmp	r2, #9
 8007bc6:	d236      	bcs.n	8007c36 <_strtod_l+0xa6>
 8007bc8:	2a00      	cmp	r2, #0
 8007bca:	d03e      	beq.n	8007c4a <_strtod_l+0xba>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	930d      	str	r3, [sp, #52]	; 0x34
 8007bd0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007bd2:	782b      	ldrb	r3, [r5, #0]
 8007bd4:	2b30      	cmp	r3, #48	; 0x30
 8007bd6:	f040 80ac 	bne.w	8007d32 <_strtod_l+0x1a2>
 8007bda:	786b      	ldrb	r3, [r5, #1]
 8007bdc:	2b58      	cmp	r3, #88	; 0x58
 8007bde:	d001      	beq.n	8007be4 <_strtod_l+0x54>
 8007be0:	2b78      	cmp	r3, #120	; 0x78
 8007be2:	d167      	bne.n	8007cb4 <_strtod_l+0x124>
 8007be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	ab1c      	add	r3, sp, #112	; 0x70
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	9702      	str	r7, [sp, #8]
 8007bee:	ab1d      	add	r3, sp, #116	; 0x74
 8007bf0:	4a88      	ldr	r2, [pc, #544]	; (8007e14 <_strtod_l+0x284>)
 8007bf2:	a91b      	add	r1, sp, #108	; 0x6c
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	f001 ff2c 	bl	8009a52 <__gethex>
 8007bfa:	f010 0407 	ands.w	r4, r0, #7
 8007bfe:	4606      	mov	r6, r0
 8007c00:	d005      	beq.n	8007c0e <_strtod_l+0x7e>
 8007c02:	2c06      	cmp	r4, #6
 8007c04:	d12b      	bne.n	8007c5e <_strtod_l+0xce>
 8007c06:	3501      	adds	r5, #1
 8007c08:	2300      	movs	r3, #0
 8007c0a:	951b      	str	r5, [sp, #108]	; 0x6c
 8007c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007c0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f040 859a 	bne.w	800874a <_strtod_l+0xbba>
 8007c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c18:	b1e3      	cbz	r3, 8007c54 <_strtod_l+0xc4>
 8007c1a:	4652      	mov	r2, sl
 8007c1c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c20:	ec43 2b10 	vmov	d0, r2, r3
 8007c24:	b021      	add	sp, #132	; 0x84
 8007c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2a:	2a2b      	cmp	r2, #43	; 0x2b
 8007c2c:	d015      	beq.n	8007c5a <_strtod_l+0xca>
 8007c2e:	2a2d      	cmp	r2, #45	; 0x2d
 8007c30:	d004      	beq.n	8007c3c <_strtod_l+0xac>
 8007c32:	2a20      	cmp	r2, #32
 8007c34:	d1ca      	bne.n	8007bcc <_strtod_l+0x3c>
 8007c36:	3301      	adds	r3, #1
 8007c38:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c3a:	e7bf      	b.n	8007bbc <_strtod_l+0x2c>
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	920d      	str	r2, [sp, #52]	; 0x34
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1c2      	bne.n	8007bd0 <_strtod_l+0x40>
 8007c4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f040 8579 	bne.w	8008746 <_strtod_l+0xbb6>
 8007c54:	4652      	mov	r2, sl
 8007c56:	465b      	mov	r3, fp
 8007c58:	e7e2      	b.n	8007c20 <_strtod_l+0x90>
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	e7ef      	b.n	8007c3e <_strtod_l+0xae>
 8007c5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c60:	b13a      	cbz	r2, 8007c72 <_strtod_l+0xe2>
 8007c62:	2135      	movs	r1, #53	; 0x35
 8007c64:	a81e      	add	r0, sp, #120	; 0x78
 8007c66:	f002 fe2b 	bl	800a8c0 <__copybits>
 8007c6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f002 fa98 	bl	800a1a2 <_Bfree>
 8007c72:	3c01      	subs	r4, #1
 8007c74:	2c04      	cmp	r4, #4
 8007c76:	d806      	bhi.n	8007c86 <_strtod_l+0xf6>
 8007c78:	e8df f004 	tbb	[pc, r4]
 8007c7c:	1714030a 	.word	0x1714030a
 8007c80:	0a          	.byte	0x0a
 8007c81:	00          	.byte	0x00
 8007c82:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007c86:	0730      	lsls	r0, r6, #28
 8007c88:	d5c1      	bpl.n	8007c0e <_strtod_l+0x7e>
 8007c8a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007c8e:	e7be      	b.n	8007c0e <_strtod_l+0x7e>
 8007c90:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007c94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007c96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c9a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c9e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ca2:	e7f0      	b.n	8007c86 <_strtod_l+0xf6>
 8007ca4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007e18 <_strtod_l+0x288>
 8007ca8:	e7ed      	b.n	8007c86 <_strtod_l+0xf6>
 8007caa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007cae:	f04f 3aff 	mov.w	sl, #4294967295
 8007cb2:	e7e8      	b.n	8007c86 <_strtod_l+0xf6>
 8007cb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	921b      	str	r2, [sp, #108]	; 0x6c
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b30      	cmp	r3, #48	; 0x30
 8007cbe:	d0f9      	beq.n	8007cb4 <_strtod_l+0x124>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0a4      	beq.n	8007c0e <_strtod_l+0x7e>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	2500      	movs	r5, #0
 8007cc8:	9306      	str	r3, [sp, #24]
 8007cca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ccc:	9308      	str	r3, [sp, #32]
 8007cce:	9507      	str	r5, [sp, #28]
 8007cd0:	9505      	str	r5, [sp, #20]
 8007cd2:	220a      	movs	r2, #10
 8007cd4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007cd6:	7807      	ldrb	r7, [r0, #0]
 8007cd8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007cdc:	b2d9      	uxtb	r1, r3
 8007cde:	2909      	cmp	r1, #9
 8007ce0:	d929      	bls.n	8007d36 <_strtod_l+0x1a6>
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	f8d8 1000 	ldr.w	r1, [r8]
 8007ce8:	f003 f9c1 	bl	800b06e <strncmp>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d031      	beq.n	8007d54 <_strtod_l+0x1c4>
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	9c05      	ldr	r4, [sp, #20]
 8007cf4:	9004      	str	r0, [sp, #16]
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	2b65      	cmp	r3, #101	; 0x65
 8007cfc:	d001      	beq.n	8007d02 <_strtod_l+0x172>
 8007cfe:	2b45      	cmp	r3, #69	; 0x45
 8007d00:	d114      	bne.n	8007d2c <_strtod_l+0x19c>
 8007d02:	b924      	cbnz	r4, 8007d0e <_strtod_l+0x17e>
 8007d04:	b910      	cbnz	r0, 8007d0c <_strtod_l+0x17c>
 8007d06:	9b06      	ldr	r3, [sp, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d09e      	beq.n	8007c4a <_strtod_l+0xba>
 8007d0c:	2400      	movs	r4, #0
 8007d0e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007d10:	1c73      	adds	r3, r6, #1
 8007d12:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d14:	7873      	ldrb	r3, [r6, #1]
 8007d16:	2b2b      	cmp	r3, #43	; 0x2b
 8007d18:	d078      	beq.n	8007e0c <_strtod_l+0x27c>
 8007d1a:	2b2d      	cmp	r3, #45	; 0x2d
 8007d1c:	d070      	beq.n	8007e00 <_strtod_l+0x270>
 8007d1e:	f04f 0c00 	mov.w	ip, #0
 8007d22:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007d26:	2f09      	cmp	r7, #9
 8007d28:	d97c      	bls.n	8007e24 <_strtod_l+0x294>
 8007d2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8007d2c:	f04f 0e00 	mov.w	lr, #0
 8007d30:	e09a      	b.n	8007e68 <_strtod_l+0x2d8>
 8007d32:	2300      	movs	r3, #0
 8007d34:	e7c7      	b.n	8007cc6 <_strtod_l+0x136>
 8007d36:	9905      	ldr	r1, [sp, #20]
 8007d38:	2908      	cmp	r1, #8
 8007d3a:	bfdd      	ittte	le
 8007d3c:	9907      	ldrle	r1, [sp, #28]
 8007d3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d42:	9307      	strle	r3, [sp, #28]
 8007d44:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007d48:	9b05      	ldr	r3, [sp, #20]
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	9305      	str	r3, [sp, #20]
 8007d50:	901b      	str	r0, [sp, #108]	; 0x6c
 8007d52:	e7bf      	b.n	8007cd4 <_strtod_l+0x144>
 8007d54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d56:	191a      	adds	r2, r3, r4
 8007d58:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d5a:	9a05      	ldr	r2, [sp, #20]
 8007d5c:	5d1b      	ldrb	r3, [r3, r4]
 8007d5e:	2a00      	cmp	r2, #0
 8007d60:	d037      	beq.n	8007dd2 <_strtod_l+0x242>
 8007d62:	9c05      	ldr	r4, [sp, #20]
 8007d64:	4602      	mov	r2, r0
 8007d66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007d6a:	2909      	cmp	r1, #9
 8007d6c:	d913      	bls.n	8007d96 <_strtod_l+0x206>
 8007d6e:	2101      	movs	r1, #1
 8007d70:	9104      	str	r1, [sp, #16]
 8007d72:	e7c2      	b.n	8007cfa <_strtod_l+0x16a>
 8007d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	2b30      	cmp	r3, #48	; 0x30
 8007d80:	d0f8      	beq.n	8007d74 <_strtod_l+0x1e4>
 8007d82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007d86:	2a08      	cmp	r2, #8
 8007d88:	f200 84e4 	bhi.w	8008754 <_strtod_l+0xbc4>
 8007d8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007d8e:	9208      	str	r2, [sp, #32]
 8007d90:	4602      	mov	r2, r0
 8007d92:	2000      	movs	r0, #0
 8007d94:	4604      	mov	r4, r0
 8007d96:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007d9a:	f100 0101 	add.w	r1, r0, #1
 8007d9e:	d012      	beq.n	8007dc6 <_strtod_l+0x236>
 8007da0:	440a      	add	r2, r1
 8007da2:	eb00 0c04 	add.w	ip, r0, r4
 8007da6:	4621      	mov	r1, r4
 8007da8:	270a      	movs	r7, #10
 8007daa:	458c      	cmp	ip, r1
 8007dac:	d113      	bne.n	8007dd6 <_strtod_l+0x246>
 8007dae:	1821      	adds	r1, r4, r0
 8007db0:	2908      	cmp	r1, #8
 8007db2:	f104 0401 	add.w	r4, r4, #1
 8007db6:	4404      	add	r4, r0
 8007db8:	dc19      	bgt.n	8007dee <_strtod_l+0x25e>
 8007dba:	9b07      	ldr	r3, [sp, #28]
 8007dbc:	210a      	movs	r1, #10
 8007dbe:	fb01 e303 	mla	r3, r1, r3, lr
 8007dc2:	9307      	str	r3, [sp, #28]
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dc8:	1c58      	adds	r0, r3, #1
 8007dca:	901b      	str	r0, [sp, #108]	; 0x6c
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	4608      	mov	r0, r1
 8007dd0:	e7c9      	b.n	8007d66 <_strtod_l+0x1d6>
 8007dd2:	9805      	ldr	r0, [sp, #20]
 8007dd4:	e7d3      	b.n	8007d7e <_strtod_l+0x1ee>
 8007dd6:	2908      	cmp	r1, #8
 8007dd8:	f101 0101 	add.w	r1, r1, #1
 8007ddc:	dc03      	bgt.n	8007de6 <_strtod_l+0x256>
 8007dde:	9b07      	ldr	r3, [sp, #28]
 8007de0:	437b      	muls	r3, r7
 8007de2:	9307      	str	r3, [sp, #28]
 8007de4:	e7e1      	b.n	8007daa <_strtod_l+0x21a>
 8007de6:	2910      	cmp	r1, #16
 8007de8:	bfd8      	it	le
 8007dea:	437d      	mulle	r5, r7
 8007dec:	e7dd      	b.n	8007daa <_strtod_l+0x21a>
 8007dee:	2c10      	cmp	r4, #16
 8007df0:	bfdc      	itt	le
 8007df2:	210a      	movle	r1, #10
 8007df4:	fb01 e505 	mlale	r5, r1, r5, lr
 8007df8:	e7e4      	b.n	8007dc4 <_strtod_l+0x234>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	9304      	str	r3, [sp, #16]
 8007dfe:	e781      	b.n	8007d04 <_strtod_l+0x174>
 8007e00:	f04f 0c01 	mov.w	ip, #1
 8007e04:	1cb3      	adds	r3, r6, #2
 8007e06:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e08:	78b3      	ldrb	r3, [r6, #2]
 8007e0a:	e78a      	b.n	8007d22 <_strtod_l+0x192>
 8007e0c:	f04f 0c00 	mov.w	ip, #0
 8007e10:	e7f8      	b.n	8007e04 <_strtod_l+0x274>
 8007e12:	bf00      	nop
 8007e14:	0800b3dc 	.word	0x0800b3dc
 8007e18:	7ff00000 	.word	0x7ff00000
 8007e1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e1e:	1c5f      	adds	r7, r3, #1
 8007e20:	971b      	str	r7, [sp, #108]	; 0x6c
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	2b30      	cmp	r3, #48	; 0x30
 8007e26:	d0f9      	beq.n	8007e1c <_strtod_l+0x28c>
 8007e28:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007e2c:	2f08      	cmp	r7, #8
 8007e2e:	f63f af7d 	bhi.w	8007d2c <_strtod_l+0x19c>
 8007e32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007e36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e38:	930a      	str	r3, [sp, #40]	; 0x28
 8007e3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e3c:	1c5f      	adds	r7, r3, #1
 8007e3e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007e40:	785b      	ldrb	r3, [r3, #1]
 8007e42:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007e46:	f1b8 0f09 	cmp.w	r8, #9
 8007e4a:	d937      	bls.n	8007ebc <_strtod_l+0x32c>
 8007e4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e4e:	1a7f      	subs	r7, r7, r1
 8007e50:	2f08      	cmp	r7, #8
 8007e52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007e56:	dc37      	bgt.n	8007ec8 <_strtod_l+0x338>
 8007e58:	45be      	cmp	lr, r7
 8007e5a:	bfa8      	it	ge
 8007e5c:	46be      	movge	lr, r7
 8007e5e:	f1bc 0f00 	cmp.w	ip, #0
 8007e62:	d001      	beq.n	8007e68 <_strtod_l+0x2d8>
 8007e64:	f1ce 0e00 	rsb	lr, lr, #0
 8007e68:	2c00      	cmp	r4, #0
 8007e6a:	d151      	bne.n	8007f10 <_strtod_l+0x380>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f47f aece 	bne.w	8007c0e <_strtod_l+0x7e>
 8007e72:	9a06      	ldr	r2, [sp, #24]
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	f47f aeca 	bne.w	8007c0e <_strtod_l+0x7e>
 8007e7a:	9a04      	ldr	r2, [sp, #16]
 8007e7c:	2a00      	cmp	r2, #0
 8007e7e:	f47f aee4 	bne.w	8007c4a <_strtod_l+0xba>
 8007e82:	2b4e      	cmp	r3, #78	; 0x4e
 8007e84:	d027      	beq.n	8007ed6 <_strtod_l+0x346>
 8007e86:	dc21      	bgt.n	8007ecc <_strtod_l+0x33c>
 8007e88:	2b49      	cmp	r3, #73	; 0x49
 8007e8a:	f47f aede 	bne.w	8007c4a <_strtod_l+0xba>
 8007e8e:	49a0      	ldr	r1, [pc, #640]	; (8008110 <_strtod_l+0x580>)
 8007e90:	a81b      	add	r0, sp, #108	; 0x6c
 8007e92:	f002 f811 	bl	8009eb8 <__match>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f43f aed7 	beq.w	8007c4a <_strtod_l+0xba>
 8007e9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e9e:	499d      	ldr	r1, [pc, #628]	; (8008114 <_strtod_l+0x584>)
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	a81b      	add	r0, sp, #108	; 0x6c
 8007ea4:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ea6:	f002 f807 	bl	8009eb8 <__match>
 8007eaa:	b910      	cbnz	r0, 8007eb2 <_strtod_l+0x322>
 8007eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007eae:	3301      	adds	r3, #1
 8007eb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8007eb2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008128 <_strtod_l+0x598>
 8007eb6:	f04f 0a00 	mov.w	sl, #0
 8007eba:	e6a8      	b.n	8007c0e <_strtod_l+0x7e>
 8007ebc:	210a      	movs	r1, #10
 8007ebe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007ec2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007ec6:	e7b8      	b.n	8007e3a <_strtod_l+0x2aa>
 8007ec8:	46be      	mov	lr, r7
 8007eca:	e7c8      	b.n	8007e5e <_strtod_l+0x2ce>
 8007ecc:	2b69      	cmp	r3, #105	; 0x69
 8007ece:	d0de      	beq.n	8007e8e <_strtod_l+0x2fe>
 8007ed0:	2b6e      	cmp	r3, #110	; 0x6e
 8007ed2:	f47f aeba 	bne.w	8007c4a <_strtod_l+0xba>
 8007ed6:	4990      	ldr	r1, [pc, #576]	; (8008118 <_strtod_l+0x588>)
 8007ed8:	a81b      	add	r0, sp, #108	; 0x6c
 8007eda:	f001 ffed 	bl	8009eb8 <__match>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f43f aeb3 	beq.w	8007c4a <_strtod_l+0xba>
 8007ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b28      	cmp	r3, #40	; 0x28
 8007eea:	d10e      	bne.n	8007f0a <_strtod_l+0x37a>
 8007eec:	aa1e      	add	r2, sp, #120	; 0x78
 8007eee:	498b      	ldr	r1, [pc, #556]	; (800811c <_strtod_l+0x58c>)
 8007ef0:	a81b      	add	r0, sp, #108	; 0x6c
 8007ef2:	f001 fff5 	bl	8009ee0 <__hexnan>
 8007ef6:	2805      	cmp	r0, #5
 8007ef8:	d107      	bne.n	8007f0a <_strtod_l+0x37a>
 8007efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007efc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007f00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007f04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007f08:	e681      	b.n	8007c0e <_strtod_l+0x7e>
 8007f0a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008130 <_strtod_l+0x5a0>
 8007f0e:	e7d2      	b.n	8007eb6 <_strtod_l+0x326>
 8007f10:	ebae 0302 	sub.w	r3, lr, r2
 8007f14:	9306      	str	r3, [sp, #24]
 8007f16:	9b05      	ldr	r3, [sp, #20]
 8007f18:	9807      	ldr	r0, [sp, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	bf08      	it	eq
 8007f1e:	4623      	moveq	r3, r4
 8007f20:	2c10      	cmp	r4, #16
 8007f22:	9305      	str	r3, [sp, #20]
 8007f24:	46a0      	mov	r8, r4
 8007f26:	bfa8      	it	ge
 8007f28:	f04f 0810 	movge.w	r8, #16
 8007f2c:	f7f8 faea 	bl	8000504 <__aeabi_ui2d>
 8007f30:	2c09      	cmp	r4, #9
 8007f32:	4682      	mov	sl, r0
 8007f34:	468b      	mov	fp, r1
 8007f36:	dc13      	bgt.n	8007f60 <_strtod_l+0x3d0>
 8007f38:	9b06      	ldr	r3, [sp, #24]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f43f ae67 	beq.w	8007c0e <_strtod_l+0x7e>
 8007f40:	9b06      	ldr	r3, [sp, #24]
 8007f42:	dd7a      	ble.n	800803a <_strtod_l+0x4aa>
 8007f44:	2b16      	cmp	r3, #22
 8007f46:	dc61      	bgt.n	800800c <_strtod_l+0x47c>
 8007f48:	4a75      	ldr	r2, [pc, #468]	; (8008120 <_strtod_l+0x590>)
 8007f4a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007f4e:	e9de 0100 	ldrd	r0, r1, [lr]
 8007f52:	4652      	mov	r2, sl
 8007f54:	465b      	mov	r3, fp
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	4682      	mov	sl, r0
 8007f5c:	468b      	mov	fp, r1
 8007f5e:	e656      	b.n	8007c0e <_strtod_l+0x7e>
 8007f60:	4b6f      	ldr	r3, [pc, #444]	; (8008120 <_strtod_l+0x590>)
 8007f62:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007f66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007f6a:	f7f8 fb45 	bl	80005f8 <__aeabi_dmul>
 8007f6e:	4606      	mov	r6, r0
 8007f70:	4628      	mov	r0, r5
 8007f72:	460f      	mov	r7, r1
 8007f74:	f7f8 fac6 	bl	8000504 <__aeabi_ui2d>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	4639      	mov	r1, r7
 8007f80:	f7f8 f984 	bl	800028c <__adddf3>
 8007f84:	2c0f      	cmp	r4, #15
 8007f86:	4682      	mov	sl, r0
 8007f88:	468b      	mov	fp, r1
 8007f8a:	ddd5      	ble.n	8007f38 <_strtod_l+0x3a8>
 8007f8c:	9b06      	ldr	r3, [sp, #24]
 8007f8e:	eba4 0808 	sub.w	r8, r4, r8
 8007f92:	4498      	add	r8, r3
 8007f94:	f1b8 0f00 	cmp.w	r8, #0
 8007f98:	f340 8096 	ble.w	80080c8 <_strtod_l+0x538>
 8007f9c:	f018 030f 	ands.w	r3, r8, #15
 8007fa0:	d00a      	beq.n	8007fb8 <_strtod_l+0x428>
 8007fa2:	495f      	ldr	r1, [pc, #380]	; (8008120 <_strtod_l+0x590>)
 8007fa4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fa8:	4652      	mov	r2, sl
 8007faa:	465b      	mov	r3, fp
 8007fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb0:	f7f8 fb22 	bl	80005f8 <__aeabi_dmul>
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	468b      	mov	fp, r1
 8007fb8:	f038 080f 	bics.w	r8, r8, #15
 8007fbc:	d073      	beq.n	80080a6 <_strtod_l+0x516>
 8007fbe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007fc2:	dd47      	ble.n	8008054 <_strtod_l+0x4c4>
 8007fc4:	2400      	movs	r4, #0
 8007fc6:	46a0      	mov	r8, r4
 8007fc8:	9407      	str	r4, [sp, #28]
 8007fca:	9405      	str	r4, [sp, #20]
 8007fcc:	2322      	movs	r3, #34	; 0x22
 8007fce:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008128 <_strtod_l+0x598>
 8007fd2:	f8c9 3000 	str.w	r3, [r9]
 8007fd6:	f04f 0a00 	mov.w	sl, #0
 8007fda:	9b07      	ldr	r3, [sp, #28]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f43f ae16 	beq.w	8007c0e <_strtod_l+0x7e>
 8007fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007fe4:	4648      	mov	r0, r9
 8007fe6:	f002 f8dc 	bl	800a1a2 <_Bfree>
 8007fea:	9905      	ldr	r1, [sp, #20]
 8007fec:	4648      	mov	r0, r9
 8007fee:	f002 f8d8 	bl	800a1a2 <_Bfree>
 8007ff2:	4641      	mov	r1, r8
 8007ff4:	4648      	mov	r0, r9
 8007ff6:	f002 f8d4 	bl	800a1a2 <_Bfree>
 8007ffa:	9907      	ldr	r1, [sp, #28]
 8007ffc:	4648      	mov	r0, r9
 8007ffe:	f002 f8d0 	bl	800a1a2 <_Bfree>
 8008002:	4621      	mov	r1, r4
 8008004:	4648      	mov	r0, r9
 8008006:	f002 f8cc 	bl	800a1a2 <_Bfree>
 800800a:	e600      	b.n	8007c0e <_strtod_l+0x7e>
 800800c:	9a06      	ldr	r2, [sp, #24]
 800800e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008012:	4293      	cmp	r3, r2
 8008014:	dbba      	blt.n	8007f8c <_strtod_l+0x3fc>
 8008016:	4d42      	ldr	r5, [pc, #264]	; (8008120 <_strtod_l+0x590>)
 8008018:	f1c4 040f 	rsb	r4, r4, #15
 800801c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008020:	4652      	mov	r2, sl
 8008022:	465b      	mov	r3, fp
 8008024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008028:	f7f8 fae6 	bl	80005f8 <__aeabi_dmul>
 800802c:	9b06      	ldr	r3, [sp, #24]
 800802e:	1b1c      	subs	r4, r3, r4
 8008030:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008034:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008038:	e78d      	b.n	8007f56 <_strtod_l+0x3c6>
 800803a:	f113 0f16 	cmn.w	r3, #22
 800803e:	dba5      	blt.n	8007f8c <_strtod_l+0x3fc>
 8008040:	4a37      	ldr	r2, [pc, #220]	; (8008120 <_strtod_l+0x590>)
 8008042:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008046:	e9d2 2300 	ldrd	r2, r3, [r2]
 800804a:	4650      	mov	r0, sl
 800804c:	4659      	mov	r1, fp
 800804e:	f7f8 fbfd 	bl	800084c <__aeabi_ddiv>
 8008052:	e782      	b.n	8007f5a <_strtod_l+0x3ca>
 8008054:	2300      	movs	r3, #0
 8008056:	4e33      	ldr	r6, [pc, #204]	; (8008124 <_strtod_l+0x594>)
 8008058:	ea4f 1828 	mov.w	r8, r8, asr #4
 800805c:	4650      	mov	r0, sl
 800805e:	4659      	mov	r1, fp
 8008060:	461d      	mov	r5, r3
 8008062:	f1b8 0f01 	cmp.w	r8, #1
 8008066:	dc21      	bgt.n	80080ac <_strtod_l+0x51c>
 8008068:	b10b      	cbz	r3, 800806e <_strtod_l+0x4de>
 800806a:	4682      	mov	sl, r0
 800806c:	468b      	mov	fp, r1
 800806e:	4b2d      	ldr	r3, [pc, #180]	; (8008124 <_strtod_l+0x594>)
 8008070:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008074:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008078:	4652      	mov	r2, sl
 800807a:	465b      	mov	r3, fp
 800807c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008080:	f7f8 faba 	bl	80005f8 <__aeabi_dmul>
 8008084:	4b28      	ldr	r3, [pc, #160]	; (8008128 <_strtod_l+0x598>)
 8008086:	460a      	mov	r2, r1
 8008088:	400b      	ands	r3, r1
 800808a:	4928      	ldr	r1, [pc, #160]	; (800812c <_strtod_l+0x59c>)
 800808c:	428b      	cmp	r3, r1
 800808e:	4682      	mov	sl, r0
 8008090:	d898      	bhi.n	8007fc4 <_strtod_l+0x434>
 8008092:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008096:	428b      	cmp	r3, r1
 8008098:	bf86      	itte	hi
 800809a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008134 <_strtod_l+0x5a4>
 800809e:	f04f 3aff 	movhi.w	sl, #4294967295
 80080a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80080a6:	2300      	movs	r3, #0
 80080a8:	9304      	str	r3, [sp, #16]
 80080aa:	e077      	b.n	800819c <_strtod_l+0x60c>
 80080ac:	f018 0f01 	tst.w	r8, #1
 80080b0:	d006      	beq.n	80080c0 <_strtod_l+0x530>
 80080b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	f7f8 fa9d 	bl	80005f8 <__aeabi_dmul>
 80080be:	2301      	movs	r3, #1
 80080c0:	3501      	adds	r5, #1
 80080c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80080c6:	e7cc      	b.n	8008062 <_strtod_l+0x4d2>
 80080c8:	d0ed      	beq.n	80080a6 <_strtod_l+0x516>
 80080ca:	f1c8 0800 	rsb	r8, r8, #0
 80080ce:	f018 020f 	ands.w	r2, r8, #15
 80080d2:	d00a      	beq.n	80080ea <_strtod_l+0x55a>
 80080d4:	4b12      	ldr	r3, [pc, #72]	; (8008120 <_strtod_l+0x590>)
 80080d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080da:	4650      	mov	r0, sl
 80080dc:	4659      	mov	r1, fp
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f7f8 fbb3 	bl	800084c <__aeabi_ddiv>
 80080e6:	4682      	mov	sl, r0
 80080e8:	468b      	mov	fp, r1
 80080ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 80080ee:	d0da      	beq.n	80080a6 <_strtod_l+0x516>
 80080f0:	f1b8 0f1f 	cmp.w	r8, #31
 80080f4:	dd20      	ble.n	8008138 <_strtod_l+0x5a8>
 80080f6:	2400      	movs	r4, #0
 80080f8:	46a0      	mov	r8, r4
 80080fa:	9407      	str	r4, [sp, #28]
 80080fc:	9405      	str	r4, [sp, #20]
 80080fe:	2322      	movs	r3, #34	; 0x22
 8008100:	f04f 0a00 	mov.w	sl, #0
 8008104:	f04f 0b00 	mov.w	fp, #0
 8008108:	f8c9 3000 	str.w	r3, [r9]
 800810c:	e765      	b.n	8007fda <_strtod_l+0x44a>
 800810e:	bf00      	nop
 8008110:	0800b3a5 	.word	0x0800b3a5
 8008114:	0800b433 	.word	0x0800b433
 8008118:	0800b3ad 	.word	0x0800b3ad
 800811c:	0800b3f0 	.word	0x0800b3f0
 8008120:	0800b4d8 	.word	0x0800b4d8
 8008124:	0800b4b0 	.word	0x0800b4b0
 8008128:	7ff00000 	.word	0x7ff00000
 800812c:	7ca00000 	.word	0x7ca00000
 8008130:	fff80000 	.word	0xfff80000
 8008134:	7fefffff 	.word	0x7fefffff
 8008138:	f018 0310 	ands.w	r3, r8, #16
 800813c:	bf18      	it	ne
 800813e:	236a      	movne	r3, #106	; 0x6a
 8008140:	4da0      	ldr	r5, [pc, #640]	; (80083c4 <_strtod_l+0x834>)
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	4650      	mov	r0, sl
 8008146:	4659      	mov	r1, fp
 8008148:	2300      	movs	r3, #0
 800814a:	f1b8 0f00 	cmp.w	r8, #0
 800814e:	f300 810a 	bgt.w	8008366 <_strtod_l+0x7d6>
 8008152:	b10b      	cbz	r3, 8008158 <_strtod_l+0x5c8>
 8008154:	4682      	mov	sl, r0
 8008156:	468b      	mov	fp, r1
 8008158:	9b04      	ldr	r3, [sp, #16]
 800815a:	b1bb      	cbz	r3, 800818c <_strtod_l+0x5fc>
 800815c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008160:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008164:	2b00      	cmp	r3, #0
 8008166:	4659      	mov	r1, fp
 8008168:	dd10      	ble.n	800818c <_strtod_l+0x5fc>
 800816a:	2b1f      	cmp	r3, #31
 800816c:	f340 8107 	ble.w	800837e <_strtod_l+0x7ee>
 8008170:	2b34      	cmp	r3, #52	; 0x34
 8008172:	bfde      	ittt	le
 8008174:	3b20      	suble	r3, #32
 8008176:	f04f 32ff 	movle.w	r2, #4294967295
 800817a:	fa02 f303 	lslle.w	r3, r2, r3
 800817e:	f04f 0a00 	mov.w	sl, #0
 8008182:	bfcc      	ite	gt
 8008184:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008188:	ea03 0b01 	andle.w	fp, r3, r1
 800818c:	2200      	movs	r2, #0
 800818e:	2300      	movs	r3, #0
 8008190:	4650      	mov	r0, sl
 8008192:	4659      	mov	r1, fp
 8008194:	f7f8 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 8008198:	2800      	cmp	r0, #0
 800819a:	d1ac      	bne.n	80080f6 <_strtod_l+0x566>
 800819c:	9b07      	ldr	r3, [sp, #28]
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	9a05      	ldr	r2, [sp, #20]
 80081a2:	9908      	ldr	r1, [sp, #32]
 80081a4:	4623      	mov	r3, r4
 80081a6:	4648      	mov	r0, r9
 80081a8:	f002 f84d 	bl	800a246 <__s2b>
 80081ac:	9007      	str	r0, [sp, #28]
 80081ae:	2800      	cmp	r0, #0
 80081b0:	f43f af08 	beq.w	8007fc4 <_strtod_l+0x434>
 80081b4:	9a06      	ldr	r2, [sp, #24]
 80081b6:	9b06      	ldr	r3, [sp, #24]
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	f1c3 0300 	rsb	r3, r3, #0
 80081be:	bfa8      	it	ge
 80081c0:	2300      	movge	r3, #0
 80081c2:	930e      	str	r3, [sp, #56]	; 0x38
 80081c4:	2400      	movs	r4, #0
 80081c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80081ca:	9316      	str	r3, [sp, #88]	; 0x58
 80081cc:	46a0      	mov	r8, r4
 80081ce:	9b07      	ldr	r3, [sp, #28]
 80081d0:	4648      	mov	r0, r9
 80081d2:	6859      	ldr	r1, [r3, #4]
 80081d4:	f001 ffb1 	bl	800a13a <_Balloc>
 80081d8:	9005      	str	r0, [sp, #20]
 80081da:	2800      	cmp	r0, #0
 80081dc:	f43f aef6 	beq.w	8007fcc <_strtod_l+0x43c>
 80081e0:	9b07      	ldr	r3, [sp, #28]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	3202      	adds	r2, #2
 80081e6:	f103 010c 	add.w	r1, r3, #12
 80081ea:	0092      	lsls	r2, r2, #2
 80081ec:	300c      	adds	r0, #12
 80081ee:	f001 ff99 	bl	800a124 <memcpy>
 80081f2:	aa1e      	add	r2, sp, #120	; 0x78
 80081f4:	a91d      	add	r1, sp, #116	; 0x74
 80081f6:	ec4b ab10 	vmov	d0, sl, fp
 80081fa:	4648      	mov	r0, r9
 80081fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008200:	f002 fadc 	bl	800a7bc <__d2b>
 8008204:	901c      	str	r0, [sp, #112]	; 0x70
 8008206:	2800      	cmp	r0, #0
 8008208:	f43f aee0 	beq.w	8007fcc <_strtod_l+0x43c>
 800820c:	2101      	movs	r1, #1
 800820e:	4648      	mov	r0, r9
 8008210:	f002 f8a5 	bl	800a35e <__i2b>
 8008214:	4680      	mov	r8, r0
 8008216:	2800      	cmp	r0, #0
 8008218:	f43f aed8 	beq.w	8007fcc <_strtod_l+0x43c>
 800821c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800821e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008220:	2e00      	cmp	r6, #0
 8008222:	bfab      	itete	ge
 8008224:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008226:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008228:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800822a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800822c:	bfac      	ite	ge
 800822e:	18f7      	addge	r7, r6, r3
 8008230:	1b9d      	sublt	r5, r3, r6
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	1af6      	subs	r6, r6, r3
 8008236:	4416      	add	r6, r2
 8008238:	4b63      	ldr	r3, [pc, #396]	; (80083c8 <_strtod_l+0x838>)
 800823a:	3e01      	subs	r6, #1
 800823c:	429e      	cmp	r6, r3
 800823e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008242:	f280 80af 	bge.w	80083a4 <_strtod_l+0x814>
 8008246:	1b9b      	subs	r3, r3, r6
 8008248:	2b1f      	cmp	r3, #31
 800824a:	eba2 0203 	sub.w	r2, r2, r3
 800824e:	f04f 0101 	mov.w	r1, #1
 8008252:	f300 809b 	bgt.w	800838c <_strtod_l+0x7fc>
 8008256:	fa01 f303 	lsl.w	r3, r1, r3
 800825a:	930f      	str	r3, [sp, #60]	; 0x3c
 800825c:	2300      	movs	r3, #0
 800825e:	930a      	str	r3, [sp, #40]	; 0x28
 8008260:	18be      	adds	r6, r7, r2
 8008262:	9b04      	ldr	r3, [sp, #16]
 8008264:	42b7      	cmp	r7, r6
 8008266:	4415      	add	r5, r2
 8008268:	441d      	add	r5, r3
 800826a:	463b      	mov	r3, r7
 800826c:	bfa8      	it	ge
 800826e:	4633      	movge	r3, r6
 8008270:	42ab      	cmp	r3, r5
 8008272:	bfa8      	it	ge
 8008274:	462b      	movge	r3, r5
 8008276:	2b00      	cmp	r3, #0
 8008278:	bfc2      	ittt	gt
 800827a:	1af6      	subgt	r6, r6, r3
 800827c:	1aed      	subgt	r5, r5, r3
 800827e:	1aff      	subgt	r7, r7, r3
 8008280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008282:	b1bb      	cbz	r3, 80082b4 <_strtod_l+0x724>
 8008284:	4641      	mov	r1, r8
 8008286:	461a      	mov	r2, r3
 8008288:	4648      	mov	r0, r9
 800828a:	f002 f907 	bl	800a49c <__pow5mult>
 800828e:	4680      	mov	r8, r0
 8008290:	2800      	cmp	r0, #0
 8008292:	f43f ae9b 	beq.w	8007fcc <_strtod_l+0x43c>
 8008296:	4601      	mov	r1, r0
 8008298:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800829a:	4648      	mov	r0, r9
 800829c:	f002 f868 	bl	800a370 <__multiply>
 80082a0:	900c      	str	r0, [sp, #48]	; 0x30
 80082a2:	2800      	cmp	r0, #0
 80082a4:	f43f ae92 	beq.w	8007fcc <_strtod_l+0x43c>
 80082a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80082aa:	4648      	mov	r0, r9
 80082ac:	f001 ff79 	bl	800a1a2 <_Bfree>
 80082b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082b2:	931c      	str	r3, [sp, #112]	; 0x70
 80082b4:	2e00      	cmp	r6, #0
 80082b6:	dc7a      	bgt.n	80083ae <_strtod_l+0x81e>
 80082b8:	9b06      	ldr	r3, [sp, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dd08      	ble.n	80082d0 <_strtod_l+0x740>
 80082be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80082c0:	9905      	ldr	r1, [sp, #20]
 80082c2:	4648      	mov	r0, r9
 80082c4:	f002 f8ea 	bl	800a49c <__pow5mult>
 80082c8:	9005      	str	r0, [sp, #20]
 80082ca:	2800      	cmp	r0, #0
 80082cc:	f43f ae7e 	beq.w	8007fcc <_strtod_l+0x43c>
 80082d0:	2d00      	cmp	r5, #0
 80082d2:	dd08      	ble.n	80082e6 <_strtod_l+0x756>
 80082d4:	462a      	mov	r2, r5
 80082d6:	9905      	ldr	r1, [sp, #20]
 80082d8:	4648      	mov	r0, r9
 80082da:	f002 f92d 	bl	800a538 <__lshift>
 80082de:	9005      	str	r0, [sp, #20]
 80082e0:	2800      	cmp	r0, #0
 80082e2:	f43f ae73 	beq.w	8007fcc <_strtod_l+0x43c>
 80082e6:	2f00      	cmp	r7, #0
 80082e8:	dd08      	ble.n	80082fc <_strtod_l+0x76c>
 80082ea:	4641      	mov	r1, r8
 80082ec:	463a      	mov	r2, r7
 80082ee:	4648      	mov	r0, r9
 80082f0:	f002 f922 	bl	800a538 <__lshift>
 80082f4:	4680      	mov	r8, r0
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f43f ae68 	beq.w	8007fcc <_strtod_l+0x43c>
 80082fc:	9a05      	ldr	r2, [sp, #20]
 80082fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008300:	4648      	mov	r0, r9
 8008302:	f002 f987 	bl	800a614 <__mdiff>
 8008306:	4604      	mov	r4, r0
 8008308:	2800      	cmp	r0, #0
 800830a:	f43f ae5f 	beq.w	8007fcc <_strtod_l+0x43c>
 800830e:	68c3      	ldr	r3, [r0, #12]
 8008310:	930c      	str	r3, [sp, #48]	; 0x30
 8008312:	2300      	movs	r3, #0
 8008314:	60c3      	str	r3, [r0, #12]
 8008316:	4641      	mov	r1, r8
 8008318:	f002 f962 	bl	800a5e0 <__mcmp>
 800831c:	2800      	cmp	r0, #0
 800831e:	da55      	bge.n	80083cc <_strtod_l+0x83c>
 8008320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008322:	b9e3      	cbnz	r3, 800835e <_strtod_l+0x7ce>
 8008324:	f1ba 0f00 	cmp.w	sl, #0
 8008328:	d119      	bne.n	800835e <_strtod_l+0x7ce>
 800832a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800832e:	b9b3      	cbnz	r3, 800835e <_strtod_l+0x7ce>
 8008330:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008334:	0d1b      	lsrs	r3, r3, #20
 8008336:	051b      	lsls	r3, r3, #20
 8008338:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800833c:	d90f      	bls.n	800835e <_strtod_l+0x7ce>
 800833e:	6963      	ldr	r3, [r4, #20]
 8008340:	b913      	cbnz	r3, 8008348 <_strtod_l+0x7b8>
 8008342:	6923      	ldr	r3, [r4, #16]
 8008344:	2b01      	cmp	r3, #1
 8008346:	dd0a      	ble.n	800835e <_strtod_l+0x7ce>
 8008348:	4621      	mov	r1, r4
 800834a:	2201      	movs	r2, #1
 800834c:	4648      	mov	r0, r9
 800834e:	f002 f8f3 	bl	800a538 <__lshift>
 8008352:	4641      	mov	r1, r8
 8008354:	4604      	mov	r4, r0
 8008356:	f002 f943 	bl	800a5e0 <__mcmp>
 800835a:	2800      	cmp	r0, #0
 800835c:	dc67      	bgt.n	800842e <_strtod_l+0x89e>
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d171      	bne.n	8008448 <_strtod_l+0x8b8>
 8008364:	e63d      	b.n	8007fe2 <_strtod_l+0x452>
 8008366:	f018 0f01 	tst.w	r8, #1
 800836a:	d004      	beq.n	8008376 <_strtod_l+0x7e6>
 800836c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008370:	f7f8 f942 	bl	80005f8 <__aeabi_dmul>
 8008374:	2301      	movs	r3, #1
 8008376:	ea4f 0868 	mov.w	r8, r8, asr #1
 800837a:	3508      	adds	r5, #8
 800837c:	e6e5      	b.n	800814a <_strtod_l+0x5ba>
 800837e:	f04f 32ff 	mov.w	r2, #4294967295
 8008382:	fa02 f303 	lsl.w	r3, r2, r3
 8008386:	ea03 0a0a 	and.w	sl, r3, sl
 800838a:	e6ff      	b.n	800818c <_strtod_l+0x5fc>
 800838c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008390:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008394:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008398:	36e2      	adds	r6, #226	; 0xe2
 800839a:	fa01 f306 	lsl.w	r3, r1, r6
 800839e:	930a      	str	r3, [sp, #40]	; 0x28
 80083a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80083a2:	e75d      	b.n	8008260 <_strtod_l+0x6d0>
 80083a4:	2300      	movs	r3, #0
 80083a6:	930a      	str	r3, [sp, #40]	; 0x28
 80083a8:	2301      	movs	r3, #1
 80083aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80083ac:	e758      	b.n	8008260 <_strtod_l+0x6d0>
 80083ae:	4632      	mov	r2, r6
 80083b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083b2:	4648      	mov	r0, r9
 80083b4:	f002 f8c0 	bl	800a538 <__lshift>
 80083b8:	901c      	str	r0, [sp, #112]	; 0x70
 80083ba:	2800      	cmp	r0, #0
 80083bc:	f47f af7c 	bne.w	80082b8 <_strtod_l+0x728>
 80083c0:	e604      	b.n	8007fcc <_strtod_l+0x43c>
 80083c2:	bf00      	nop
 80083c4:	0800b408 	.word	0x0800b408
 80083c8:	fffffc02 	.word	0xfffffc02
 80083cc:	465d      	mov	r5, fp
 80083ce:	f040 8086 	bne.w	80084de <_strtod_l+0x94e>
 80083d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083d8:	b32a      	cbz	r2, 8008426 <_strtod_l+0x896>
 80083da:	4aaf      	ldr	r2, [pc, #700]	; (8008698 <_strtod_l+0xb08>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d153      	bne.n	8008488 <_strtod_l+0x8f8>
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	4650      	mov	r0, sl
 80083e4:	b1d3      	cbz	r3, 800841c <_strtod_l+0x88c>
 80083e6:	4aad      	ldr	r2, [pc, #692]	; (800869c <_strtod_l+0xb0c>)
 80083e8:	402a      	ands	r2, r5
 80083ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80083ee:	f04f 31ff 	mov.w	r1, #4294967295
 80083f2:	d816      	bhi.n	8008422 <_strtod_l+0x892>
 80083f4:	0d12      	lsrs	r2, r2, #20
 80083f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80083fa:	fa01 f303 	lsl.w	r3, r1, r3
 80083fe:	4298      	cmp	r0, r3
 8008400:	d142      	bne.n	8008488 <_strtod_l+0x8f8>
 8008402:	4ba7      	ldr	r3, [pc, #668]	; (80086a0 <_strtod_l+0xb10>)
 8008404:	429d      	cmp	r5, r3
 8008406:	d102      	bne.n	800840e <_strtod_l+0x87e>
 8008408:	3001      	adds	r0, #1
 800840a:	f43f addf 	beq.w	8007fcc <_strtod_l+0x43c>
 800840e:	4ba3      	ldr	r3, [pc, #652]	; (800869c <_strtod_l+0xb0c>)
 8008410:	402b      	ands	r3, r5
 8008412:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008416:	f04f 0a00 	mov.w	sl, #0
 800841a:	e7a0      	b.n	800835e <_strtod_l+0x7ce>
 800841c:	f04f 33ff 	mov.w	r3, #4294967295
 8008420:	e7ed      	b.n	80083fe <_strtod_l+0x86e>
 8008422:	460b      	mov	r3, r1
 8008424:	e7eb      	b.n	80083fe <_strtod_l+0x86e>
 8008426:	bb7b      	cbnz	r3, 8008488 <_strtod_l+0x8f8>
 8008428:	f1ba 0f00 	cmp.w	sl, #0
 800842c:	d12c      	bne.n	8008488 <_strtod_l+0x8f8>
 800842e:	9904      	ldr	r1, [sp, #16]
 8008430:	4a9a      	ldr	r2, [pc, #616]	; (800869c <_strtod_l+0xb0c>)
 8008432:	465b      	mov	r3, fp
 8008434:	b1f1      	cbz	r1, 8008474 <_strtod_l+0x8e4>
 8008436:	ea02 010b 	and.w	r1, r2, fp
 800843a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800843e:	dc19      	bgt.n	8008474 <_strtod_l+0x8e4>
 8008440:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008444:	f77f ae5b 	ble.w	80080fe <_strtod_l+0x56e>
 8008448:	4a96      	ldr	r2, [pc, #600]	; (80086a4 <_strtod_l+0xb14>)
 800844a:	2300      	movs	r3, #0
 800844c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008450:	4650      	mov	r0, sl
 8008452:	4659      	mov	r1, fp
 8008454:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008458:	f7f8 f8ce 	bl	80005f8 <__aeabi_dmul>
 800845c:	4682      	mov	sl, r0
 800845e:	468b      	mov	fp, r1
 8008460:	2900      	cmp	r1, #0
 8008462:	f47f adbe 	bne.w	8007fe2 <_strtod_l+0x452>
 8008466:	2800      	cmp	r0, #0
 8008468:	f47f adbb 	bne.w	8007fe2 <_strtod_l+0x452>
 800846c:	2322      	movs	r3, #34	; 0x22
 800846e:	f8c9 3000 	str.w	r3, [r9]
 8008472:	e5b6      	b.n	8007fe2 <_strtod_l+0x452>
 8008474:	4013      	ands	r3, r2
 8008476:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800847a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800847e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008482:	f04f 3aff 	mov.w	sl, #4294967295
 8008486:	e76a      	b.n	800835e <_strtod_l+0x7ce>
 8008488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848a:	b193      	cbz	r3, 80084b2 <_strtod_l+0x922>
 800848c:	422b      	tst	r3, r5
 800848e:	f43f af66 	beq.w	800835e <_strtod_l+0x7ce>
 8008492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008494:	9a04      	ldr	r2, [sp, #16]
 8008496:	4650      	mov	r0, sl
 8008498:	4659      	mov	r1, fp
 800849a:	b173      	cbz	r3, 80084ba <_strtod_l+0x92a>
 800849c:	f7ff fb5a 	bl	8007b54 <sulp>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084a8:	f7f7 fef0 	bl	800028c <__adddf3>
 80084ac:	4682      	mov	sl, r0
 80084ae:	468b      	mov	fp, r1
 80084b0:	e755      	b.n	800835e <_strtod_l+0x7ce>
 80084b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084b4:	ea13 0f0a 	tst.w	r3, sl
 80084b8:	e7e9      	b.n	800848e <_strtod_l+0x8fe>
 80084ba:	f7ff fb4b 	bl	8007b54 <sulp>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084c6:	f7f7 fedf 	bl	8000288 <__aeabi_dsub>
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	4682      	mov	sl, r0
 80084d0:	468b      	mov	fp, r1
 80084d2:	f7f8 faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	f47f ae11 	bne.w	80080fe <_strtod_l+0x56e>
 80084dc:	e73f      	b.n	800835e <_strtod_l+0x7ce>
 80084de:	4641      	mov	r1, r8
 80084e0:	4620      	mov	r0, r4
 80084e2:	f002 f9ba 	bl	800a85a <__ratio>
 80084e6:	ec57 6b10 	vmov	r6, r7, d0
 80084ea:	2200      	movs	r2, #0
 80084ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084f0:	ee10 0a10 	vmov	r0, s0
 80084f4:	4639      	mov	r1, r7
 80084f6:	f7f8 fafb 	bl	8000af0 <__aeabi_dcmple>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d077      	beq.n	80085ee <_strtod_l+0xa5e>
 80084fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008500:	2b00      	cmp	r3, #0
 8008502:	d04a      	beq.n	800859a <_strtod_l+0xa0a>
 8008504:	4b68      	ldr	r3, [pc, #416]	; (80086a8 <_strtod_l+0xb18>)
 8008506:	2200      	movs	r2, #0
 8008508:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800850c:	4f66      	ldr	r7, [pc, #408]	; (80086a8 <_strtod_l+0xb18>)
 800850e:	2600      	movs	r6, #0
 8008510:	4b62      	ldr	r3, [pc, #392]	; (800869c <_strtod_l+0xb0c>)
 8008512:	402b      	ands	r3, r5
 8008514:	930f      	str	r3, [sp, #60]	; 0x3c
 8008516:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008518:	4b64      	ldr	r3, [pc, #400]	; (80086ac <_strtod_l+0xb1c>)
 800851a:	429a      	cmp	r2, r3
 800851c:	f040 80ce 	bne.w	80086bc <_strtod_l+0xb2c>
 8008520:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008524:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008528:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800852c:	ec4b ab10 	vmov	d0, sl, fp
 8008530:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008534:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008538:	f002 f8ca 	bl	800a6d0 <__ulp>
 800853c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008540:	ec53 2b10 	vmov	r2, r3, d0
 8008544:	f7f8 f858 	bl	80005f8 <__aeabi_dmul>
 8008548:	4652      	mov	r2, sl
 800854a:	465b      	mov	r3, fp
 800854c:	f7f7 fe9e 	bl	800028c <__adddf3>
 8008550:	460b      	mov	r3, r1
 8008552:	4952      	ldr	r1, [pc, #328]	; (800869c <_strtod_l+0xb0c>)
 8008554:	4a56      	ldr	r2, [pc, #344]	; (80086b0 <_strtod_l+0xb20>)
 8008556:	4019      	ands	r1, r3
 8008558:	4291      	cmp	r1, r2
 800855a:	4682      	mov	sl, r0
 800855c:	d95b      	bls.n	8008616 <_strtod_l+0xa86>
 800855e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008560:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008564:	4293      	cmp	r3, r2
 8008566:	d103      	bne.n	8008570 <_strtod_l+0x9e0>
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	3301      	adds	r3, #1
 800856c:	f43f ad2e 	beq.w	8007fcc <_strtod_l+0x43c>
 8008570:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80086a0 <_strtod_l+0xb10>
 8008574:	f04f 3aff 	mov.w	sl, #4294967295
 8008578:	991c      	ldr	r1, [sp, #112]	; 0x70
 800857a:	4648      	mov	r0, r9
 800857c:	f001 fe11 	bl	800a1a2 <_Bfree>
 8008580:	9905      	ldr	r1, [sp, #20]
 8008582:	4648      	mov	r0, r9
 8008584:	f001 fe0d 	bl	800a1a2 <_Bfree>
 8008588:	4641      	mov	r1, r8
 800858a:	4648      	mov	r0, r9
 800858c:	f001 fe09 	bl	800a1a2 <_Bfree>
 8008590:	4621      	mov	r1, r4
 8008592:	4648      	mov	r0, r9
 8008594:	f001 fe05 	bl	800a1a2 <_Bfree>
 8008598:	e619      	b.n	80081ce <_strtod_l+0x63e>
 800859a:	f1ba 0f00 	cmp.w	sl, #0
 800859e:	d11a      	bne.n	80085d6 <_strtod_l+0xa46>
 80085a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085a4:	b9eb      	cbnz	r3, 80085e2 <_strtod_l+0xa52>
 80085a6:	2200      	movs	r2, #0
 80085a8:	4b3f      	ldr	r3, [pc, #252]	; (80086a8 <_strtod_l+0xb18>)
 80085aa:	4630      	mov	r0, r6
 80085ac:	4639      	mov	r1, r7
 80085ae:	f7f8 fa95 	bl	8000adc <__aeabi_dcmplt>
 80085b2:	b9c8      	cbnz	r0, 80085e8 <_strtod_l+0xa58>
 80085b4:	4630      	mov	r0, r6
 80085b6:	4639      	mov	r1, r7
 80085b8:	2200      	movs	r2, #0
 80085ba:	4b3e      	ldr	r3, [pc, #248]	; (80086b4 <_strtod_l+0xb24>)
 80085bc:	f7f8 f81c 	bl	80005f8 <__aeabi_dmul>
 80085c0:	4606      	mov	r6, r0
 80085c2:	460f      	mov	r7, r1
 80085c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80085c8:	9618      	str	r6, [sp, #96]	; 0x60
 80085ca:	9319      	str	r3, [sp, #100]	; 0x64
 80085cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80085d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80085d4:	e79c      	b.n	8008510 <_strtod_l+0x980>
 80085d6:	f1ba 0f01 	cmp.w	sl, #1
 80085da:	d102      	bne.n	80085e2 <_strtod_l+0xa52>
 80085dc:	2d00      	cmp	r5, #0
 80085de:	f43f ad8e 	beq.w	80080fe <_strtod_l+0x56e>
 80085e2:	2200      	movs	r2, #0
 80085e4:	4b34      	ldr	r3, [pc, #208]	; (80086b8 <_strtod_l+0xb28>)
 80085e6:	e78f      	b.n	8008508 <_strtod_l+0x978>
 80085e8:	2600      	movs	r6, #0
 80085ea:	4f32      	ldr	r7, [pc, #200]	; (80086b4 <_strtod_l+0xb24>)
 80085ec:	e7ea      	b.n	80085c4 <_strtod_l+0xa34>
 80085ee:	4b31      	ldr	r3, [pc, #196]	; (80086b4 <_strtod_l+0xb24>)
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	2200      	movs	r2, #0
 80085f6:	f7f7 ffff 	bl	80005f8 <__aeabi_dmul>
 80085fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085fc:	4606      	mov	r6, r0
 80085fe:	460f      	mov	r7, r1
 8008600:	b933      	cbnz	r3, 8008610 <_strtod_l+0xa80>
 8008602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008606:	9010      	str	r0, [sp, #64]	; 0x40
 8008608:	9311      	str	r3, [sp, #68]	; 0x44
 800860a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800860e:	e7df      	b.n	80085d0 <_strtod_l+0xa40>
 8008610:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008614:	e7f9      	b.n	800860a <_strtod_l+0xa7a>
 8008616:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1ab      	bne.n	8008578 <_strtod_l+0x9e8>
 8008620:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008624:	0d1b      	lsrs	r3, r3, #20
 8008626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008628:	051b      	lsls	r3, r3, #20
 800862a:	429a      	cmp	r2, r3
 800862c:	465d      	mov	r5, fp
 800862e:	d1a3      	bne.n	8008578 <_strtod_l+0x9e8>
 8008630:	4639      	mov	r1, r7
 8008632:	4630      	mov	r0, r6
 8008634:	f7f8 fa90 	bl	8000b58 <__aeabi_d2iz>
 8008638:	f7f7 ff74 	bl	8000524 <__aeabi_i2d>
 800863c:	460b      	mov	r3, r1
 800863e:	4602      	mov	r2, r0
 8008640:	4639      	mov	r1, r7
 8008642:	4630      	mov	r0, r6
 8008644:	f7f7 fe20 	bl	8000288 <__aeabi_dsub>
 8008648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800864a:	4606      	mov	r6, r0
 800864c:	460f      	mov	r7, r1
 800864e:	b933      	cbnz	r3, 800865e <_strtod_l+0xace>
 8008650:	f1ba 0f00 	cmp.w	sl, #0
 8008654:	d103      	bne.n	800865e <_strtod_l+0xace>
 8008656:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800865a:	2d00      	cmp	r5, #0
 800865c:	d06d      	beq.n	800873a <_strtod_l+0xbaa>
 800865e:	a30a      	add	r3, pc, #40	; (adr r3, 8008688 <_strtod_l+0xaf8>)
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	4630      	mov	r0, r6
 8008666:	4639      	mov	r1, r7
 8008668:	f7f8 fa38 	bl	8000adc <__aeabi_dcmplt>
 800866c:	2800      	cmp	r0, #0
 800866e:	f47f acb8 	bne.w	8007fe2 <_strtod_l+0x452>
 8008672:	a307      	add	r3, pc, #28	; (adr r3, 8008690 <_strtod_l+0xb00>)
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	4630      	mov	r0, r6
 800867a:	4639      	mov	r1, r7
 800867c:	f7f8 fa4c 	bl	8000b18 <__aeabi_dcmpgt>
 8008680:	2800      	cmp	r0, #0
 8008682:	f43f af79 	beq.w	8008578 <_strtod_l+0x9e8>
 8008686:	e4ac      	b.n	8007fe2 <_strtod_l+0x452>
 8008688:	94a03595 	.word	0x94a03595
 800868c:	3fdfffff 	.word	0x3fdfffff
 8008690:	35afe535 	.word	0x35afe535
 8008694:	3fe00000 	.word	0x3fe00000
 8008698:	000fffff 	.word	0x000fffff
 800869c:	7ff00000 	.word	0x7ff00000
 80086a0:	7fefffff 	.word	0x7fefffff
 80086a4:	39500000 	.word	0x39500000
 80086a8:	3ff00000 	.word	0x3ff00000
 80086ac:	7fe00000 	.word	0x7fe00000
 80086b0:	7c9fffff 	.word	0x7c9fffff
 80086b4:	3fe00000 	.word	0x3fe00000
 80086b8:	bff00000 	.word	0xbff00000
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	b333      	cbz	r3, 800870e <_strtod_l+0xb7e>
 80086c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086c6:	d822      	bhi.n	800870e <_strtod_l+0xb7e>
 80086c8:	a327      	add	r3, pc, #156	; (adr r3, 8008768 <_strtod_l+0xbd8>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	4630      	mov	r0, r6
 80086d0:	4639      	mov	r1, r7
 80086d2:	f7f8 fa0d 	bl	8000af0 <__aeabi_dcmple>
 80086d6:	b1a0      	cbz	r0, 8008702 <_strtod_l+0xb72>
 80086d8:	4639      	mov	r1, r7
 80086da:	4630      	mov	r0, r6
 80086dc:	f7f8 fa64 	bl	8000ba8 <__aeabi_d2uiz>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	bf08      	it	eq
 80086e4:	2001      	moveq	r0, #1
 80086e6:	f7f7 ff0d 	bl	8000504 <__aeabi_ui2d>
 80086ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086ec:	4606      	mov	r6, r0
 80086ee:	460f      	mov	r7, r1
 80086f0:	bb03      	cbnz	r3, 8008734 <_strtod_l+0xba4>
 80086f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086f6:	9012      	str	r0, [sp, #72]	; 0x48
 80086f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80086fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80086fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008704:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008706:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800870a:	1a9b      	subs	r3, r3, r2
 800870c:	930b      	str	r3, [sp, #44]	; 0x2c
 800870e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008712:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008716:	f001 ffdb 	bl	800a6d0 <__ulp>
 800871a:	4650      	mov	r0, sl
 800871c:	ec53 2b10 	vmov	r2, r3, d0
 8008720:	4659      	mov	r1, fp
 8008722:	f7f7 ff69 	bl	80005f8 <__aeabi_dmul>
 8008726:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800872a:	f7f7 fdaf 	bl	800028c <__adddf3>
 800872e:	4682      	mov	sl, r0
 8008730:	468b      	mov	fp, r1
 8008732:	e772      	b.n	800861a <_strtod_l+0xa8a>
 8008734:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008738:	e7df      	b.n	80086fa <_strtod_l+0xb6a>
 800873a:	a30d      	add	r3, pc, #52	; (adr r3, 8008770 <_strtod_l+0xbe0>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f8 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8008744:	e79c      	b.n	8008680 <_strtod_l+0xaf0>
 8008746:	2300      	movs	r3, #0
 8008748:	930d      	str	r3, [sp, #52]	; 0x34
 800874a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800874c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	f7ff ba61 	b.w	8007c16 <_strtod_l+0x86>
 8008754:	2b65      	cmp	r3, #101	; 0x65
 8008756:	f04f 0200 	mov.w	r2, #0
 800875a:	f43f ab4e 	beq.w	8007dfa <_strtod_l+0x26a>
 800875e:	2101      	movs	r1, #1
 8008760:	4614      	mov	r4, r2
 8008762:	9104      	str	r1, [sp, #16]
 8008764:	f7ff bacb 	b.w	8007cfe <_strtod_l+0x16e>
 8008768:	ffc00000 	.word	0xffc00000
 800876c:	41dfffff 	.word	0x41dfffff
 8008770:	94a03595 	.word	0x94a03595
 8008774:	3fcfffff 	.word	0x3fcfffff

08008778 <_strtod_r>:
 8008778:	4b05      	ldr	r3, [pc, #20]	; (8008790 <_strtod_r+0x18>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	b410      	push	{r4}
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	4c04      	ldr	r4, [pc, #16]	; (8008794 <_strtod_r+0x1c>)
 8008782:	2b00      	cmp	r3, #0
 8008784:	bf08      	it	eq
 8008786:	4623      	moveq	r3, r4
 8008788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800878c:	f7ff ba00 	b.w	8007b90 <_strtod_l>
 8008790:	2000000c 	.word	0x2000000c
 8008794:	20000070 	.word	0x20000070

08008798 <_strtol_l.isra.0>:
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	4680      	mov	r8, r0
 800879e:	4689      	mov	r9, r1
 80087a0:	4692      	mov	sl, r2
 80087a2:	461e      	mov	r6, r3
 80087a4:	460f      	mov	r7, r1
 80087a6:	463d      	mov	r5, r7
 80087a8:	9808      	ldr	r0, [sp, #32]
 80087aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087ae:	f001 fc27 	bl	800a000 <__locale_ctype_ptr_l>
 80087b2:	4420      	add	r0, r4
 80087b4:	7843      	ldrb	r3, [r0, #1]
 80087b6:	f013 0308 	ands.w	r3, r3, #8
 80087ba:	d132      	bne.n	8008822 <_strtol_l.isra.0+0x8a>
 80087bc:	2c2d      	cmp	r4, #45	; 0x2d
 80087be:	d132      	bne.n	8008826 <_strtol_l.isra.0+0x8e>
 80087c0:	787c      	ldrb	r4, [r7, #1]
 80087c2:	1cbd      	adds	r5, r7, #2
 80087c4:	2201      	movs	r2, #1
 80087c6:	2e00      	cmp	r6, #0
 80087c8:	d05d      	beq.n	8008886 <_strtol_l.isra.0+0xee>
 80087ca:	2e10      	cmp	r6, #16
 80087cc:	d109      	bne.n	80087e2 <_strtol_l.isra.0+0x4a>
 80087ce:	2c30      	cmp	r4, #48	; 0x30
 80087d0:	d107      	bne.n	80087e2 <_strtol_l.isra.0+0x4a>
 80087d2:	782b      	ldrb	r3, [r5, #0]
 80087d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087d8:	2b58      	cmp	r3, #88	; 0x58
 80087da:	d14f      	bne.n	800887c <_strtol_l.isra.0+0xe4>
 80087dc:	786c      	ldrb	r4, [r5, #1]
 80087de:	2610      	movs	r6, #16
 80087e0:	3502      	adds	r5, #2
 80087e2:	2a00      	cmp	r2, #0
 80087e4:	bf14      	ite	ne
 80087e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80087ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80087ee:	2700      	movs	r7, #0
 80087f0:	fbb1 fcf6 	udiv	ip, r1, r6
 80087f4:	4638      	mov	r0, r7
 80087f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80087fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80087fe:	2b09      	cmp	r3, #9
 8008800:	d817      	bhi.n	8008832 <_strtol_l.isra.0+0x9a>
 8008802:	461c      	mov	r4, r3
 8008804:	42a6      	cmp	r6, r4
 8008806:	dd23      	ble.n	8008850 <_strtol_l.isra.0+0xb8>
 8008808:	1c7b      	adds	r3, r7, #1
 800880a:	d007      	beq.n	800881c <_strtol_l.isra.0+0x84>
 800880c:	4584      	cmp	ip, r0
 800880e:	d31c      	bcc.n	800884a <_strtol_l.isra.0+0xb2>
 8008810:	d101      	bne.n	8008816 <_strtol_l.isra.0+0x7e>
 8008812:	45a6      	cmp	lr, r4
 8008814:	db19      	blt.n	800884a <_strtol_l.isra.0+0xb2>
 8008816:	fb00 4006 	mla	r0, r0, r6, r4
 800881a:	2701      	movs	r7, #1
 800881c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008820:	e7eb      	b.n	80087fa <_strtol_l.isra.0+0x62>
 8008822:	462f      	mov	r7, r5
 8008824:	e7bf      	b.n	80087a6 <_strtol_l.isra.0+0xe>
 8008826:	2c2b      	cmp	r4, #43	; 0x2b
 8008828:	bf04      	itt	eq
 800882a:	1cbd      	addeq	r5, r7, #2
 800882c:	787c      	ldrbeq	r4, [r7, #1]
 800882e:	461a      	mov	r2, r3
 8008830:	e7c9      	b.n	80087c6 <_strtol_l.isra.0+0x2e>
 8008832:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008836:	2b19      	cmp	r3, #25
 8008838:	d801      	bhi.n	800883e <_strtol_l.isra.0+0xa6>
 800883a:	3c37      	subs	r4, #55	; 0x37
 800883c:	e7e2      	b.n	8008804 <_strtol_l.isra.0+0x6c>
 800883e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008842:	2b19      	cmp	r3, #25
 8008844:	d804      	bhi.n	8008850 <_strtol_l.isra.0+0xb8>
 8008846:	3c57      	subs	r4, #87	; 0x57
 8008848:	e7dc      	b.n	8008804 <_strtol_l.isra.0+0x6c>
 800884a:	f04f 37ff 	mov.w	r7, #4294967295
 800884e:	e7e5      	b.n	800881c <_strtol_l.isra.0+0x84>
 8008850:	1c7b      	adds	r3, r7, #1
 8008852:	d108      	bne.n	8008866 <_strtol_l.isra.0+0xce>
 8008854:	2322      	movs	r3, #34	; 0x22
 8008856:	f8c8 3000 	str.w	r3, [r8]
 800885a:	4608      	mov	r0, r1
 800885c:	f1ba 0f00 	cmp.w	sl, #0
 8008860:	d107      	bne.n	8008872 <_strtol_l.isra.0+0xda>
 8008862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008866:	b102      	cbz	r2, 800886a <_strtol_l.isra.0+0xd2>
 8008868:	4240      	negs	r0, r0
 800886a:	f1ba 0f00 	cmp.w	sl, #0
 800886e:	d0f8      	beq.n	8008862 <_strtol_l.isra.0+0xca>
 8008870:	b10f      	cbz	r7, 8008876 <_strtol_l.isra.0+0xde>
 8008872:	f105 39ff 	add.w	r9, r5, #4294967295
 8008876:	f8ca 9000 	str.w	r9, [sl]
 800887a:	e7f2      	b.n	8008862 <_strtol_l.isra.0+0xca>
 800887c:	2430      	movs	r4, #48	; 0x30
 800887e:	2e00      	cmp	r6, #0
 8008880:	d1af      	bne.n	80087e2 <_strtol_l.isra.0+0x4a>
 8008882:	2608      	movs	r6, #8
 8008884:	e7ad      	b.n	80087e2 <_strtol_l.isra.0+0x4a>
 8008886:	2c30      	cmp	r4, #48	; 0x30
 8008888:	d0a3      	beq.n	80087d2 <_strtol_l.isra.0+0x3a>
 800888a:	260a      	movs	r6, #10
 800888c:	e7a9      	b.n	80087e2 <_strtol_l.isra.0+0x4a>
	...

08008890 <_strtol_r>:
 8008890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008892:	4c06      	ldr	r4, [pc, #24]	; (80088ac <_strtol_r+0x1c>)
 8008894:	4d06      	ldr	r5, [pc, #24]	; (80088b0 <_strtol_r+0x20>)
 8008896:	6824      	ldr	r4, [r4, #0]
 8008898:	6a24      	ldr	r4, [r4, #32]
 800889a:	2c00      	cmp	r4, #0
 800889c:	bf08      	it	eq
 800889e:	462c      	moveq	r4, r5
 80088a0:	9400      	str	r4, [sp, #0]
 80088a2:	f7ff ff79 	bl	8008798 <_strtol_l.isra.0>
 80088a6:	b003      	add	sp, #12
 80088a8:	bd30      	pop	{r4, r5, pc}
 80088aa:	bf00      	nop
 80088ac:	2000000c 	.word	0x2000000c
 80088b0:	20000070 	.word	0x20000070

080088b4 <__swbuf_r>:
 80088b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b6:	460e      	mov	r6, r1
 80088b8:	4614      	mov	r4, r2
 80088ba:	4605      	mov	r5, r0
 80088bc:	b118      	cbz	r0, 80088c6 <__swbuf_r+0x12>
 80088be:	6983      	ldr	r3, [r0, #24]
 80088c0:	b90b      	cbnz	r3, 80088c6 <__swbuf_r+0x12>
 80088c2:	f000 ffed 	bl	80098a0 <__sinit>
 80088c6:	4b21      	ldr	r3, [pc, #132]	; (800894c <__swbuf_r+0x98>)
 80088c8:	429c      	cmp	r4, r3
 80088ca:	d12a      	bne.n	8008922 <__swbuf_r+0x6e>
 80088cc:	686c      	ldr	r4, [r5, #4]
 80088ce:	69a3      	ldr	r3, [r4, #24]
 80088d0:	60a3      	str	r3, [r4, #8]
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	071a      	lsls	r2, r3, #28
 80088d6:	d52e      	bpl.n	8008936 <__swbuf_r+0x82>
 80088d8:	6923      	ldr	r3, [r4, #16]
 80088da:	b363      	cbz	r3, 8008936 <__swbuf_r+0x82>
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	6820      	ldr	r0, [r4, #0]
 80088e0:	1ac0      	subs	r0, r0, r3
 80088e2:	6963      	ldr	r3, [r4, #20]
 80088e4:	b2f6      	uxtb	r6, r6
 80088e6:	4283      	cmp	r3, r0
 80088e8:	4637      	mov	r7, r6
 80088ea:	dc04      	bgt.n	80088f6 <__swbuf_r+0x42>
 80088ec:	4621      	mov	r1, r4
 80088ee:	4628      	mov	r0, r5
 80088f0:	f000 ff6c 	bl	80097cc <_fflush_r>
 80088f4:	bb28      	cbnz	r0, 8008942 <__swbuf_r+0x8e>
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	60a3      	str	r3, [r4, #8]
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	6022      	str	r2, [r4, #0]
 8008902:	701e      	strb	r6, [r3, #0]
 8008904:	6963      	ldr	r3, [r4, #20]
 8008906:	3001      	adds	r0, #1
 8008908:	4283      	cmp	r3, r0
 800890a:	d004      	beq.n	8008916 <__swbuf_r+0x62>
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	07db      	lsls	r3, r3, #31
 8008910:	d519      	bpl.n	8008946 <__swbuf_r+0x92>
 8008912:	2e0a      	cmp	r6, #10
 8008914:	d117      	bne.n	8008946 <__swbuf_r+0x92>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 ff57 	bl	80097cc <_fflush_r>
 800891e:	b190      	cbz	r0, 8008946 <__swbuf_r+0x92>
 8008920:	e00f      	b.n	8008942 <__swbuf_r+0x8e>
 8008922:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <__swbuf_r+0x9c>)
 8008924:	429c      	cmp	r4, r3
 8008926:	d101      	bne.n	800892c <__swbuf_r+0x78>
 8008928:	68ac      	ldr	r4, [r5, #8]
 800892a:	e7d0      	b.n	80088ce <__swbuf_r+0x1a>
 800892c:	4b09      	ldr	r3, [pc, #36]	; (8008954 <__swbuf_r+0xa0>)
 800892e:	429c      	cmp	r4, r3
 8008930:	bf08      	it	eq
 8008932:	68ec      	ldreq	r4, [r5, #12]
 8008934:	e7cb      	b.n	80088ce <__swbuf_r+0x1a>
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f000 f80d 	bl	8008958 <__swsetup_r>
 800893e:	2800      	cmp	r0, #0
 8008940:	d0cc      	beq.n	80088dc <__swbuf_r+0x28>
 8008942:	f04f 37ff 	mov.w	r7, #4294967295
 8008946:	4638      	mov	r0, r7
 8008948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800894a:	bf00      	nop
 800894c:	0800b460 	.word	0x0800b460
 8008950:	0800b480 	.word	0x0800b480
 8008954:	0800b440 	.word	0x0800b440

08008958 <__swsetup_r>:
 8008958:	4b32      	ldr	r3, [pc, #200]	; (8008a24 <__swsetup_r+0xcc>)
 800895a:	b570      	push	{r4, r5, r6, lr}
 800895c:	681d      	ldr	r5, [r3, #0]
 800895e:	4606      	mov	r6, r0
 8008960:	460c      	mov	r4, r1
 8008962:	b125      	cbz	r5, 800896e <__swsetup_r+0x16>
 8008964:	69ab      	ldr	r3, [r5, #24]
 8008966:	b913      	cbnz	r3, 800896e <__swsetup_r+0x16>
 8008968:	4628      	mov	r0, r5
 800896a:	f000 ff99 	bl	80098a0 <__sinit>
 800896e:	4b2e      	ldr	r3, [pc, #184]	; (8008a28 <__swsetup_r+0xd0>)
 8008970:	429c      	cmp	r4, r3
 8008972:	d10f      	bne.n	8008994 <__swsetup_r+0x3c>
 8008974:	686c      	ldr	r4, [r5, #4]
 8008976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897a:	b29a      	uxth	r2, r3
 800897c:	0715      	lsls	r5, r2, #28
 800897e:	d42c      	bmi.n	80089da <__swsetup_r+0x82>
 8008980:	06d0      	lsls	r0, r2, #27
 8008982:	d411      	bmi.n	80089a8 <__swsetup_r+0x50>
 8008984:	2209      	movs	r2, #9
 8008986:	6032      	str	r2, [r6, #0]
 8008988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800898c:	81a3      	strh	r3, [r4, #12]
 800898e:	f04f 30ff 	mov.w	r0, #4294967295
 8008992:	e03e      	b.n	8008a12 <__swsetup_r+0xba>
 8008994:	4b25      	ldr	r3, [pc, #148]	; (8008a2c <__swsetup_r+0xd4>)
 8008996:	429c      	cmp	r4, r3
 8008998:	d101      	bne.n	800899e <__swsetup_r+0x46>
 800899a:	68ac      	ldr	r4, [r5, #8]
 800899c:	e7eb      	b.n	8008976 <__swsetup_r+0x1e>
 800899e:	4b24      	ldr	r3, [pc, #144]	; (8008a30 <__swsetup_r+0xd8>)
 80089a0:	429c      	cmp	r4, r3
 80089a2:	bf08      	it	eq
 80089a4:	68ec      	ldreq	r4, [r5, #12]
 80089a6:	e7e6      	b.n	8008976 <__swsetup_r+0x1e>
 80089a8:	0751      	lsls	r1, r2, #29
 80089aa:	d512      	bpl.n	80089d2 <__swsetup_r+0x7a>
 80089ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089ae:	b141      	cbz	r1, 80089c2 <__swsetup_r+0x6a>
 80089b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089b4:	4299      	cmp	r1, r3
 80089b6:	d002      	beq.n	80089be <__swsetup_r+0x66>
 80089b8:	4630      	mov	r0, r6
 80089ba:	f001 ffcb 	bl	800a954 <_free_r>
 80089be:	2300      	movs	r3, #0
 80089c0:	6363      	str	r3, [r4, #52]	; 0x34
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089c8:	81a3      	strh	r3, [r4, #12]
 80089ca:	2300      	movs	r3, #0
 80089cc:	6063      	str	r3, [r4, #4]
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f043 0308 	orr.w	r3, r3, #8
 80089d8:	81a3      	strh	r3, [r4, #12]
 80089da:	6923      	ldr	r3, [r4, #16]
 80089dc:	b94b      	cbnz	r3, 80089f2 <__swsetup_r+0x9a>
 80089de:	89a3      	ldrh	r3, [r4, #12]
 80089e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089e8:	d003      	beq.n	80089f2 <__swsetup_r+0x9a>
 80089ea:	4621      	mov	r1, r4
 80089ec:	4630      	mov	r0, r6
 80089ee:	f001 fb3f 	bl	800a070 <__smakebuf_r>
 80089f2:	89a2      	ldrh	r2, [r4, #12]
 80089f4:	f012 0301 	ands.w	r3, r2, #1
 80089f8:	d00c      	beq.n	8008a14 <__swsetup_r+0xbc>
 80089fa:	2300      	movs	r3, #0
 80089fc:	60a3      	str	r3, [r4, #8]
 80089fe:	6963      	ldr	r3, [r4, #20]
 8008a00:	425b      	negs	r3, r3
 8008a02:	61a3      	str	r3, [r4, #24]
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	b953      	cbnz	r3, 8008a1e <__swsetup_r+0xc6>
 8008a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008a10:	d1ba      	bne.n	8008988 <__swsetup_r+0x30>
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	0792      	lsls	r2, r2, #30
 8008a16:	bf58      	it	pl
 8008a18:	6963      	ldrpl	r3, [r4, #20]
 8008a1a:	60a3      	str	r3, [r4, #8]
 8008a1c:	e7f2      	b.n	8008a04 <__swsetup_r+0xac>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	e7f7      	b.n	8008a12 <__swsetup_r+0xba>
 8008a22:	bf00      	nop
 8008a24:	2000000c 	.word	0x2000000c
 8008a28:	0800b460 	.word	0x0800b460
 8008a2c:	0800b480 	.word	0x0800b480
 8008a30:	0800b440 	.word	0x0800b440

08008a34 <quorem>:
 8008a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a38:	6903      	ldr	r3, [r0, #16]
 8008a3a:	690c      	ldr	r4, [r1, #16]
 8008a3c:	42a3      	cmp	r3, r4
 8008a3e:	4680      	mov	r8, r0
 8008a40:	f2c0 8082 	blt.w	8008b48 <quorem+0x114>
 8008a44:	3c01      	subs	r4, #1
 8008a46:	f101 0714 	add.w	r7, r1, #20
 8008a4a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008a4e:	f100 0614 	add.w	r6, r0, #20
 8008a52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008a56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008a5a:	eb06 030c 	add.w	r3, r6, ip
 8008a5e:	3501      	adds	r5, #1
 8008a60:	eb07 090c 	add.w	r9, r7, ip
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	fbb0 f5f5 	udiv	r5, r0, r5
 8008a6a:	b395      	cbz	r5, 8008ad2 <quorem+0x9e>
 8008a6c:	f04f 0a00 	mov.w	sl, #0
 8008a70:	4638      	mov	r0, r7
 8008a72:	46b6      	mov	lr, r6
 8008a74:	46d3      	mov	fp, sl
 8008a76:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a7a:	b293      	uxth	r3, r2
 8008a7c:	fb05 a303 	mla	r3, r5, r3, sl
 8008a80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	ebab 0303 	sub.w	r3, fp, r3
 8008a8a:	0c12      	lsrs	r2, r2, #16
 8008a8c:	f8de b000 	ldr.w	fp, [lr]
 8008a90:	fb05 a202 	mla	r2, r5, r2, sl
 8008a94:	fa13 f38b 	uxtah	r3, r3, fp
 8008a98:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008a9c:	fa1f fb82 	uxth.w	fp, r2
 8008aa0:	f8de 2000 	ldr.w	r2, [lr]
 8008aa4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008aa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ab2:	4581      	cmp	r9, r0
 8008ab4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008ab8:	f84e 3b04 	str.w	r3, [lr], #4
 8008abc:	d2db      	bcs.n	8008a76 <quorem+0x42>
 8008abe:	f856 300c 	ldr.w	r3, [r6, ip]
 8008ac2:	b933      	cbnz	r3, 8008ad2 <quorem+0x9e>
 8008ac4:	9b01      	ldr	r3, [sp, #4]
 8008ac6:	3b04      	subs	r3, #4
 8008ac8:	429e      	cmp	r6, r3
 8008aca:	461a      	mov	r2, r3
 8008acc:	d330      	bcc.n	8008b30 <quorem+0xfc>
 8008ace:	f8c8 4010 	str.w	r4, [r8, #16]
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	f001 fd84 	bl	800a5e0 <__mcmp>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	db25      	blt.n	8008b28 <quorem+0xf4>
 8008adc:	3501      	adds	r5, #1
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f04f 0c00 	mov.w	ip, #0
 8008ae4:	f857 2b04 	ldr.w	r2, [r7], #4
 8008ae8:	f8d0 e000 	ldr.w	lr, [r0]
 8008aec:	b293      	uxth	r3, r2
 8008aee:	ebac 0303 	sub.w	r3, ip, r3
 8008af2:	0c12      	lsrs	r2, r2, #16
 8008af4:	fa13 f38e 	uxtah	r3, r3, lr
 8008af8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008afc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b06:	45b9      	cmp	r9, r7
 8008b08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b0c:	f840 3b04 	str.w	r3, [r0], #4
 8008b10:	d2e8      	bcs.n	8008ae4 <quorem+0xb0>
 8008b12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008b16:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008b1a:	b92a      	cbnz	r2, 8008b28 <quorem+0xf4>
 8008b1c:	3b04      	subs	r3, #4
 8008b1e:	429e      	cmp	r6, r3
 8008b20:	461a      	mov	r2, r3
 8008b22:	d30b      	bcc.n	8008b3c <quorem+0x108>
 8008b24:	f8c8 4010 	str.w	r4, [r8, #16]
 8008b28:	4628      	mov	r0, r5
 8008b2a:	b003      	add	sp, #12
 8008b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	3b04      	subs	r3, #4
 8008b34:	2a00      	cmp	r2, #0
 8008b36:	d1ca      	bne.n	8008ace <quorem+0x9a>
 8008b38:	3c01      	subs	r4, #1
 8008b3a:	e7c5      	b.n	8008ac8 <quorem+0x94>
 8008b3c:	6812      	ldr	r2, [r2, #0]
 8008b3e:	3b04      	subs	r3, #4
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	d1ef      	bne.n	8008b24 <quorem+0xf0>
 8008b44:	3c01      	subs	r4, #1
 8008b46:	e7ea      	b.n	8008b1e <quorem+0xea>
 8008b48:	2000      	movs	r0, #0
 8008b4a:	e7ee      	b.n	8008b2a <quorem+0xf6>
 8008b4c:	0000      	movs	r0, r0
	...

08008b50 <_dtoa_r>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	ec57 6b10 	vmov	r6, r7, d0
 8008b58:	b097      	sub	sp, #92	; 0x5c
 8008b5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b5c:	9106      	str	r1, [sp, #24]
 8008b5e:	4604      	mov	r4, r0
 8008b60:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b62:	9312      	str	r3, [sp, #72]	; 0x48
 8008b64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b68:	e9cd 6700 	strd	r6, r7, [sp]
 8008b6c:	b93d      	cbnz	r5, 8008b7e <_dtoa_r+0x2e>
 8008b6e:	2010      	movs	r0, #16
 8008b70:	f001 fabe 	bl	800a0f0 <malloc>
 8008b74:	6260      	str	r0, [r4, #36]	; 0x24
 8008b76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b7a:	6005      	str	r5, [r0, #0]
 8008b7c:	60c5      	str	r5, [r0, #12]
 8008b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b80:	6819      	ldr	r1, [r3, #0]
 8008b82:	b151      	cbz	r1, 8008b9a <_dtoa_r+0x4a>
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	604a      	str	r2, [r1, #4]
 8008b88:	2301      	movs	r3, #1
 8008b8a:	4093      	lsls	r3, r2
 8008b8c:	608b      	str	r3, [r1, #8]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f001 fb07 	bl	800a1a2 <_Bfree>
 8008b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	1e3b      	subs	r3, r7, #0
 8008b9c:	bfbb      	ittet	lt
 8008b9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008ba2:	9301      	strlt	r3, [sp, #4]
 8008ba4:	2300      	movge	r3, #0
 8008ba6:	2201      	movlt	r2, #1
 8008ba8:	bfac      	ite	ge
 8008baa:	f8c8 3000 	strge.w	r3, [r8]
 8008bae:	f8c8 2000 	strlt.w	r2, [r8]
 8008bb2:	4baf      	ldr	r3, [pc, #700]	; (8008e70 <_dtoa_r+0x320>)
 8008bb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008bb8:	ea33 0308 	bics.w	r3, r3, r8
 8008bbc:	d114      	bne.n	8008be8 <_dtoa_r+0x98>
 8008bbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	9b00      	ldr	r3, [sp, #0]
 8008bc8:	b923      	cbnz	r3, 8008bd4 <_dtoa_r+0x84>
 8008bca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	f000 8542 	beq.w	8009658 <_dtoa_r+0xb08>
 8008bd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bd6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008e84 <_dtoa_r+0x334>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 8544 	beq.w	8009668 <_dtoa_r+0xb18>
 8008be0:	f10b 0303 	add.w	r3, fp, #3
 8008be4:	f000 bd3e 	b.w	8009664 <_dtoa_r+0xb14>
 8008be8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f7 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bf8:	4681      	mov	r9, r0
 8008bfa:	b168      	cbz	r0, 8008c18 <_dtoa_r+0xc8>
 8008bfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bfe:	2301      	movs	r3, #1
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 8524 	beq.w	8009652 <_dtoa_r+0xb02>
 8008c0a:	4b9a      	ldr	r3, [pc, #616]	; (8008e74 <_dtoa_r+0x324>)
 8008c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c0e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	f000 bd28 	b.w	8009668 <_dtoa_r+0xb18>
 8008c18:	aa14      	add	r2, sp, #80	; 0x50
 8008c1a:	a915      	add	r1, sp, #84	; 0x54
 8008c1c:	ec47 6b10 	vmov	d0, r6, r7
 8008c20:	4620      	mov	r0, r4
 8008c22:	f001 fdcb 	bl	800a7bc <__d2b>
 8008c26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008c2a:	9004      	str	r0, [sp, #16]
 8008c2c:	2d00      	cmp	r5, #0
 8008c2e:	d07c      	beq.n	8008d2a <_dtoa_r+0x1da>
 8008c30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008c38:	46b2      	mov	sl, r6
 8008c3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008c3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008c46:	2200      	movs	r2, #0
 8008c48:	4b8b      	ldr	r3, [pc, #556]	; (8008e78 <_dtoa_r+0x328>)
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	4659      	mov	r1, fp
 8008c4e:	f7f7 fb1b 	bl	8000288 <__aeabi_dsub>
 8008c52:	a381      	add	r3, pc, #516	; (adr r3, 8008e58 <_dtoa_r+0x308>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f7f7 fcce 	bl	80005f8 <__aeabi_dmul>
 8008c5c:	a380      	add	r3, pc, #512	; (adr r3, 8008e60 <_dtoa_r+0x310>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f7f7 fb13 	bl	800028c <__adddf3>
 8008c66:	4606      	mov	r6, r0
 8008c68:	4628      	mov	r0, r5
 8008c6a:	460f      	mov	r7, r1
 8008c6c:	f7f7 fc5a 	bl	8000524 <__aeabi_i2d>
 8008c70:	a37d      	add	r3, pc, #500	; (adr r3, 8008e68 <_dtoa_r+0x318>)
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	f7f7 fcbf 	bl	80005f8 <__aeabi_dmul>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4630      	mov	r0, r6
 8008c80:	4639      	mov	r1, r7
 8008c82:	f7f7 fb03 	bl	800028c <__adddf3>
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	f7f7 ff65 	bl	8000b58 <__aeabi_d2iz>
 8008c8e:	2200      	movs	r2, #0
 8008c90:	4682      	mov	sl, r0
 8008c92:	2300      	movs	r3, #0
 8008c94:	4630      	mov	r0, r6
 8008c96:	4639      	mov	r1, r7
 8008c98:	f7f7 ff20 	bl	8000adc <__aeabi_dcmplt>
 8008c9c:	b148      	cbz	r0, 8008cb2 <_dtoa_r+0x162>
 8008c9e:	4650      	mov	r0, sl
 8008ca0:	f7f7 fc40 	bl	8000524 <__aeabi_i2d>
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	f7f7 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cac:	b908      	cbnz	r0, 8008cb2 <_dtoa_r+0x162>
 8008cae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cb2:	f1ba 0f16 	cmp.w	sl, #22
 8008cb6:	d859      	bhi.n	8008d6c <_dtoa_r+0x21c>
 8008cb8:	4970      	ldr	r1, [pc, #448]	; (8008e7c <_dtoa_r+0x32c>)
 8008cba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cc6:	f7f7 ff27 	bl	8000b18 <__aeabi_dcmpgt>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d050      	beq.n	8008d70 <_dtoa_r+0x220>
 8008cce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cd8:	1b5d      	subs	r5, r3, r5
 8008cda:	f1b5 0801 	subs.w	r8, r5, #1
 8008cde:	bf49      	itett	mi
 8008ce0:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ce4:	2300      	movpl	r3, #0
 8008ce6:	9305      	strmi	r3, [sp, #20]
 8008ce8:	f04f 0800 	movmi.w	r8, #0
 8008cec:	bf58      	it	pl
 8008cee:	9305      	strpl	r3, [sp, #20]
 8008cf0:	f1ba 0f00 	cmp.w	sl, #0
 8008cf4:	db3e      	blt.n	8008d74 <_dtoa_r+0x224>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	44d0      	add	r8, sl
 8008cfa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008cfe:	9307      	str	r3, [sp, #28]
 8008d00:	9b06      	ldr	r3, [sp, #24]
 8008d02:	2b09      	cmp	r3, #9
 8008d04:	f200 8090 	bhi.w	8008e28 <_dtoa_r+0x2d8>
 8008d08:	2b05      	cmp	r3, #5
 8008d0a:	bfc4      	itt	gt
 8008d0c:	3b04      	subgt	r3, #4
 8008d0e:	9306      	strgt	r3, [sp, #24]
 8008d10:	9b06      	ldr	r3, [sp, #24]
 8008d12:	f1a3 0302 	sub.w	r3, r3, #2
 8008d16:	bfcc      	ite	gt
 8008d18:	2500      	movgt	r5, #0
 8008d1a:	2501      	movle	r5, #1
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	f200 808f 	bhi.w	8008e40 <_dtoa_r+0x2f0>
 8008d22:	e8df f003 	tbb	[pc, r3]
 8008d26:	7f7d      	.short	0x7f7d
 8008d28:	7131      	.short	0x7131
 8008d2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008d2e:	441d      	add	r5, r3
 8008d30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008d34:	2820      	cmp	r0, #32
 8008d36:	dd13      	ble.n	8008d60 <_dtoa_r+0x210>
 8008d38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	fa08 f800 	lsl.w	r8, r8, r0
 8008d42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008d46:	fa23 f000 	lsr.w	r0, r3, r0
 8008d4a:	ea48 0000 	orr.w	r0, r8, r0
 8008d4e:	f7f7 fbd9 	bl	8000504 <__aeabi_ui2d>
 8008d52:	2301      	movs	r3, #1
 8008d54:	4682      	mov	sl, r0
 8008d56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008d5a:	3d01      	subs	r5, #1
 8008d5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d5e:	e772      	b.n	8008c46 <_dtoa_r+0xf6>
 8008d60:	9b00      	ldr	r3, [sp, #0]
 8008d62:	f1c0 0020 	rsb	r0, r0, #32
 8008d66:	fa03 f000 	lsl.w	r0, r3, r0
 8008d6a:	e7f0      	b.n	8008d4e <_dtoa_r+0x1fe>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e7b1      	b.n	8008cd4 <_dtoa_r+0x184>
 8008d70:	900f      	str	r0, [sp, #60]	; 0x3c
 8008d72:	e7b0      	b.n	8008cd6 <_dtoa_r+0x186>
 8008d74:	9b05      	ldr	r3, [sp, #20]
 8008d76:	eba3 030a 	sub.w	r3, r3, sl
 8008d7a:	9305      	str	r3, [sp, #20]
 8008d7c:	f1ca 0300 	rsb	r3, sl, #0
 8008d80:	9307      	str	r3, [sp, #28]
 8008d82:	2300      	movs	r3, #0
 8008d84:	930e      	str	r3, [sp, #56]	; 0x38
 8008d86:	e7bb      	b.n	8008d00 <_dtoa_r+0x1b0>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	dd59      	ble.n	8008e46 <_dtoa_r+0x2f6>
 8008d92:	9302      	str	r3, [sp, #8]
 8008d94:	4699      	mov	r9, r3
 8008d96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d98:	2200      	movs	r2, #0
 8008d9a:	6072      	str	r2, [r6, #4]
 8008d9c:	2204      	movs	r2, #4
 8008d9e:	f102 0014 	add.w	r0, r2, #20
 8008da2:	4298      	cmp	r0, r3
 8008da4:	6871      	ldr	r1, [r6, #4]
 8008da6:	d953      	bls.n	8008e50 <_dtoa_r+0x300>
 8008da8:	4620      	mov	r0, r4
 8008daa:	f001 f9c6 	bl	800a13a <_Balloc>
 8008dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db0:	6030      	str	r0, [r6, #0]
 8008db2:	f1b9 0f0e 	cmp.w	r9, #14
 8008db6:	f8d3 b000 	ldr.w	fp, [r3]
 8008dba:	f200 80e6 	bhi.w	8008f8a <_dtoa_r+0x43a>
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	f000 80e3 	beq.w	8008f8a <_dtoa_r+0x43a>
 8008dc4:	ed9d 7b00 	vldr	d7, [sp]
 8008dc8:	f1ba 0f00 	cmp.w	sl, #0
 8008dcc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008dd0:	dd74      	ble.n	8008ebc <_dtoa_r+0x36c>
 8008dd2:	4a2a      	ldr	r2, [pc, #168]	; (8008e7c <_dtoa_r+0x32c>)
 8008dd4:	f00a 030f 	and.w	r3, sl, #15
 8008dd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ddc:	ed93 7b00 	vldr	d7, [r3]
 8008de0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008de4:	06f0      	lsls	r0, r6, #27
 8008de6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008dea:	d565      	bpl.n	8008eb8 <_dtoa_r+0x368>
 8008dec:	4b24      	ldr	r3, [pc, #144]	; (8008e80 <_dtoa_r+0x330>)
 8008dee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008df2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008df6:	f7f7 fd29 	bl	800084c <__aeabi_ddiv>
 8008dfa:	e9cd 0100 	strd	r0, r1, [sp]
 8008dfe:	f006 060f 	and.w	r6, r6, #15
 8008e02:	2503      	movs	r5, #3
 8008e04:	4f1e      	ldr	r7, [pc, #120]	; (8008e80 <_dtoa_r+0x330>)
 8008e06:	e04c      	b.n	8008ea2 <_dtoa_r+0x352>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e0e:	4453      	add	r3, sl
 8008e10:	f103 0901 	add.w	r9, r3, #1
 8008e14:	9302      	str	r3, [sp, #8]
 8008e16:	464b      	mov	r3, r9
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	bfb8      	it	lt
 8008e1c:	2301      	movlt	r3, #1
 8008e1e:	e7ba      	b.n	8008d96 <_dtoa_r+0x246>
 8008e20:	2300      	movs	r3, #0
 8008e22:	e7b2      	b.n	8008d8a <_dtoa_r+0x23a>
 8008e24:	2300      	movs	r3, #0
 8008e26:	e7f0      	b.n	8008e0a <_dtoa_r+0x2ba>
 8008e28:	2501      	movs	r5, #1
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9306      	str	r3, [sp, #24]
 8008e2e:	950a      	str	r5, [sp, #40]	; 0x28
 8008e30:	f04f 33ff 	mov.w	r3, #4294967295
 8008e34:	9302      	str	r3, [sp, #8]
 8008e36:	4699      	mov	r9, r3
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2312      	movs	r3, #18
 8008e3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e3e:	e7aa      	b.n	8008d96 <_dtoa_r+0x246>
 8008e40:	2301      	movs	r3, #1
 8008e42:	930a      	str	r3, [sp, #40]	; 0x28
 8008e44:	e7f4      	b.n	8008e30 <_dtoa_r+0x2e0>
 8008e46:	2301      	movs	r3, #1
 8008e48:	9302      	str	r3, [sp, #8]
 8008e4a:	4699      	mov	r9, r3
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	e7f5      	b.n	8008e3c <_dtoa_r+0x2ec>
 8008e50:	3101      	adds	r1, #1
 8008e52:	6071      	str	r1, [r6, #4]
 8008e54:	0052      	lsls	r2, r2, #1
 8008e56:	e7a2      	b.n	8008d9e <_dtoa_r+0x24e>
 8008e58:	636f4361 	.word	0x636f4361
 8008e5c:	3fd287a7 	.word	0x3fd287a7
 8008e60:	8b60c8b3 	.word	0x8b60c8b3
 8008e64:	3fc68a28 	.word	0x3fc68a28
 8008e68:	509f79fb 	.word	0x509f79fb
 8008e6c:	3fd34413 	.word	0x3fd34413
 8008e70:	7ff00000 	.word	0x7ff00000
 8008e74:	0800b3b1 	.word	0x0800b3b1
 8008e78:	3ff80000 	.word	0x3ff80000
 8008e7c:	0800b4d8 	.word	0x0800b4d8
 8008e80:	0800b4b0 	.word	0x0800b4b0
 8008e84:	0800b439 	.word	0x0800b439
 8008e88:	07f1      	lsls	r1, r6, #31
 8008e8a:	d508      	bpl.n	8008e9e <_dtoa_r+0x34e>
 8008e8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e94:	f7f7 fbb0 	bl	80005f8 <__aeabi_dmul>
 8008e98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	1076      	asrs	r6, r6, #1
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	d1f0      	bne.n	8008e88 <_dtoa_r+0x338>
 8008ea6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008eaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eae:	f7f7 fccd 	bl	800084c <__aeabi_ddiv>
 8008eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8008eb6:	e01a      	b.n	8008eee <_dtoa_r+0x39e>
 8008eb8:	2502      	movs	r5, #2
 8008eba:	e7a3      	b.n	8008e04 <_dtoa_r+0x2b4>
 8008ebc:	f000 80a0 	beq.w	8009000 <_dtoa_r+0x4b0>
 8008ec0:	f1ca 0600 	rsb	r6, sl, #0
 8008ec4:	4b9f      	ldr	r3, [pc, #636]	; (8009144 <_dtoa_r+0x5f4>)
 8008ec6:	4fa0      	ldr	r7, [pc, #640]	; (8009148 <_dtoa_r+0x5f8>)
 8008ec8:	f006 020f 	and.w	r2, r6, #15
 8008ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ed8:	f7f7 fb8e 	bl	80005f8 <__aeabi_dmul>
 8008edc:	e9cd 0100 	strd	r0, r1, [sp]
 8008ee0:	1136      	asrs	r6, r6, #4
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2502      	movs	r5, #2
 8008ee6:	2e00      	cmp	r6, #0
 8008ee8:	d17f      	bne.n	8008fea <_dtoa_r+0x49a>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1e1      	bne.n	8008eb2 <_dtoa_r+0x362>
 8008eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 8087 	beq.w	8009004 <_dtoa_r+0x4b4>
 8008ef6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008efa:	2200      	movs	r2, #0
 8008efc:	4b93      	ldr	r3, [pc, #588]	; (800914c <_dtoa_r+0x5fc>)
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	f7f7 fdeb 	bl	8000adc <__aeabi_dcmplt>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d07c      	beq.n	8009004 <_dtoa_r+0x4b4>
 8008f0a:	f1b9 0f00 	cmp.w	r9, #0
 8008f0e:	d079      	beq.n	8009004 <_dtoa_r+0x4b4>
 8008f10:	9b02      	ldr	r3, [sp, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	dd35      	ble.n	8008f82 <_dtoa_r+0x432>
 8008f16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008f1a:	9308      	str	r3, [sp, #32]
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	2200      	movs	r2, #0
 8008f20:	4b8b      	ldr	r3, [pc, #556]	; (8009150 <_dtoa_r+0x600>)
 8008f22:	4630      	mov	r0, r6
 8008f24:	f7f7 fb68 	bl	80005f8 <__aeabi_dmul>
 8008f28:	e9cd 0100 	strd	r0, r1, [sp]
 8008f2c:	9f02      	ldr	r7, [sp, #8]
 8008f2e:	3501      	adds	r5, #1
 8008f30:	4628      	mov	r0, r5
 8008f32:	f7f7 faf7 	bl	8000524 <__aeabi_i2d>
 8008f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f3a:	f7f7 fb5d 	bl	80005f8 <__aeabi_dmul>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4b84      	ldr	r3, [pc, #528]	; (8009154 <_dtoa_r+0x604>)
 8008f42:	f7f7 f9a3 	bl	800028c <__adddf3>
 8008f46:	4605      	mov	r5, r0
 8008f48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008f4c:	2f00      	cmp	r7, #0
 8008f4e:	d15d      	bne.n	800900c <_dtoa_r+0x4bc>
 8008f50:	2200      	movs	r2, #0
 8008f52:	4b81      	ldr	r3, [pc, #516]	; (8009158 <_dtoa_r+0x608>)
 8008f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f58:	f7f7 f996 	bl	8000288 <__aeabi_dsub>
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4633      	mov	r3, r6
 8008f60:	e9cd 0100 	strd	r0, r1, [sp]
 8008f64:	f7f7 fdd8 	bl	8000b18 <__aeabi_dcmpgt>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	f040 8288 	bne.w	800947e <_dtoa_r+0x92e>
 8008f6e:	462a      	mov	r2, r5
 8008f70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f78:	f7f7 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f040 827c 	bne.w	800947a <_dtoa_r+0x92a>
 8008f82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f86:	e9cd 2300 	strd	r2, r3, [sp]
 8008f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f2c0 8150 	blt.w	8009232 <_dtoa_r+0x6e2>
 8008f92:	f1ba 0f0e 	cmp.w	sl, #14
 8008f96:	f300 814c 	bgt.w	8009232 <_dtoa_r+0x6e2>
 8008f9a:	4b6a      	ldr	r3, [pc, #424]	; (8009144 <_dtoa_r+0x5f4>)
 8008f9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008fa0:	ed93 7b00 	vldr	d7, [r3]
 8008fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008fac:	f280 80d8 	bge.w	8009160 <_dtoa_r+0x610>
 8008fb0:	f1b9 0f00 	cmp.w	r9, #0
 8008fb4:	f300 80d4 	bgt.w	8009160 <_dtoa_r+0x610>
 8008fb8:	f040 825e 	bne.w	8009478 <_dtoa_r+0x928>
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4b66      	ldr	r3, [pc, #408]	; (8009158 <_dtoa_r+0x608>)
 8008fc0:	ec51 0b17 	vmov	r0, r1, d7
 8008fc4:	f7f7 fb18 	bl	80005f8 <__aeabi_dmul>
 8008fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fcc:	f7f7 fd9a 	bl	8000b04 <__aeabi_dcmpge>
 8008fd0:	464f      	mov	r7, r9
 8008fd2:	464e      	mov	r6, r9
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	f040 8234 	bne.w	8009442 <_dtoa_r+0x8f2>
 8008fda:	2331      	movs	r3, #49	; 0x31
 8008fdc:	f10b 0501 	add.w	r5, fp, #1
 8008fe0:	f88b 3000 	strb.w	r3, [fp]
 8008fe4:	f10a 0a01 	add.w	sl, sl, #1
 8008fe8:	e22f      	b.n	800944a <_dtoa_r+0x8fa>
 8008fea:	07f2      	lsls	r2, r6, #31
 8008fec:	d505      	bpl.n	8008ffa <_dtoa_r+0x4aa>
 8008fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff2:	f7f7 fb01 	bl	80005f8 <__aeabi_dmul>
 8008ff6:	3501      	adds	r5, #1
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	1076      	asrs	r6, r6, #1
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	e772      	b.n	8008ee6 <_dtoa_r+0x396>
 8009000:	2502      	movs	r5, #2
 8009002:	e774      	b.n	8008eee <_dtoa_r+0x39e>
 8009004:	f8cd a020 	str.w	sl, [sp, #32]
 8009008:	464f      	mov	r7, r9
 800900a:	e791      	b.n	8008f30 <_dtoa_r+0x3e0>
 800900c:	4b4d      	ldr	r3, [pc, #308]	; (8009144 <_dtoa_r+0x5f4>)
 800900e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009012:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009018:	2b00      	cmp	r3, #0
 800901a:	d047      	beq.n	80090ac <_dtoa_r+0x55c>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	2000      	movs	r0, #0
 8009022:	494e      	ldr	r1, [pc, #312]	; (800915c <_dtoa_r+0x60c>)
 8009024:	f7f7 fc12 	bl	800084c <__aeabi_ddiv>
 8009028:	462a      	mov	r2, r5
 800902a:	4633      	mov	r3, r6
 800902c:	f7f7 f92c 	bl	8000288 <__aeabi_dsub>
 8009030:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009034:	465d      	mov	r5, fp
 8009036:	e9dd 0100 	ldrd	r0, r1, [sp]
 800903a:	f7f7 fd8d 	bl	8000b58 <__aeabi_d2iz>
 800903e:	4606      	mov	r6, r0
 8009040:	f7f7 fa70 	bl	8000524 <__aeabi_i2d>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	e9dd 0100 	ldrd	r0, r1, [sp]
 800904c:	f7f7 f91c 	bl	8000288 <__aeabi_dsub>
 8009050:	3630      	adds	r6, #48	; 0x30
 8009052:	f805 6b01 	strb.w	r6, [r5], #1
 8009056:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800905a:	e9cd 0100 	strd	r0, r1, [sp]
 800905e:	f7f7 fd3d 	bl	8000adc <__aeabi_dcmplt>
 8009062:	2800      	cmp	r0, #0
 8009064:	d163      	bne.n	800912e <_dtoa_r+0x5de>
 8009066:	e9dd 2300 	ldrd	r2, r3, [sp]
 800906a:	2000      	movs	r0, #0
 800906c:	4937      	ldr	r1, [pc, #220]	; (800914c <_dtoa_r+0x5fc>)
 800906e:	f7f7 f90b 	bl	8000288 <__aeabi_dsub>
 8009072:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009076:	f7f7 fd31 	bl	8000adc <__aeabi_dcmplt>
 800907a:	2800      	cmp	r0, #0
 800907c:	f040 80b7 	bne.w	80091ee <_dtoa_r+0x69e>
 8009080:	eba5 030b 	sub.w	r3, r5, fp
 8009084:	429f      	cmp	r7, r3
 8009086:	f77f af7c 	ble.w	8008f82 <_dtoa_r+0x432>
 800908a:	2200      	movs	r2, #0
 800908c:	4b30      	ldr	r3, [pc, #192]	; (8009150 <_dtoa_r+0x600>)
 800908e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009092:	f7f7 fab1 	bl	80005f8 <__aeabi_dmul>
 8009096:	2200      	movs	r2, #0
 8009098:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800909c:	4b2c      	ldr	r3, [pc, #176]	; (8009150 <_dtoa_r+0x600>)
 800909e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090a2:	f7f7 faa9 	bl	80005f8 <__aeabi_dmul>
 80090a6:	e9cd 0100 	strd	r0, r1, [sp]
 80090aa:	e7c4      	b.n	8009036 <_dtoa_r+0x4e6>
 80090ac:	462a      	mov	r2, r5
 80090ae:	4633      	mov	r3, r6
 80090b0:	f7f7 faa2 	bl	80005f8 <__aeabi_dmul>
 80090b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80090b8:	eb0b 0507 	add.w	r5, fp, r7
 80090bc:	465e      	mov	r6, fp
 80090be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090c2:	f7f7 fd49 	bl	8000b58 <__aeabi_d2iz>
 80090c6:	4607      	mov	r7, r0
 80090c8:	f7f7 fa2c 	bl	8000524 <__aeabi_i2d>
 80090cc:	3730      	adds	r7, #48	; 0x30
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090d6:	f7f7 f8d7 	bl	8000288 <__aeabi_dsub>
 80090da:	f806 7b01 	strb.w	r7, [r6], #1
 80090de:	42ae      	cmp	r6, r5
 80090e0:	e9cd 0100 	strd	r0, r1, [sp]
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	d126      	bne.n	8009138 <_dtoa_r+0x5e8>
 80090ea:	4b1c      	ldr	r3, [pc, #112]	; (800915c <_dtoa_r+0x60c>)
 80090ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090f0:	f7f7 f8cc 	bl	800028c <__adddf3>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090fc:	f7f7 fd0c 	bl	8000b18 <__aeabi_dcmpgt>
 8009100:	2800      	cmp	r0, #0
 8009102:	d174      	bne.n	80091ee <_dtoa_r+0x69e>
 8009104:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009108:	2000      	movs	r0, #0
 800910a:	4914      	ldr	r1, [pc, #80]	; (800915c <_dtoa_r+0x60c>)
 800910c:	f7f7 f8bc 	bl	8000288 <__aeabi_dsub>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009118:	f7f7 fce0 	bl	8000adc <__aeabi_dcmplt>
 800911c:	2800      	cmp	r0, #0
 800911e:	f43f af30 	beq.w	8008f82 <_dtoa_r+0x432>
 8009122:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009126:	2b30      	cmp	r3, #48	; 0x30
 8009128:	f105 32ff 	add.w	r2, r5, #4294967295
 800912c:	d002      	beq.n	8009134 <_dtoa_r+0x5e4>
 800912e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009132:	e04a      	b.n	80091ca <_dtoa_r+0x67a>
 8009134:	4615      	mov	r5, r2
 8009136:	e7f4      	b.n	8009122 <_dtoa_r+0x5d2>
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <_dtoa_r+0x600>)
 800913a:	f7f7 fa5d 	bl	80005f8 <__aeabi_dmul>
 800913e:	e9cd 0100 	strd	r0, r1, [sp]
 8009142:	e7bc      	b.n	80090be <_dtoa_r+0x56e>
 8009144:	0800b4d8 	.word	0x0800b4d8
 8009148:	0800b4b0 	.word	0x0800b4b0
 800914c:	3ff00000 	.word	0x3ff00000
 8009150:	40240000 	.word	0x40240000
 8009154:	401c0000 	.word	0x401c0000
 8009158:	40140000 	.word	0x40140000
 800915c:	3fe00000 	.word	0x3fe00000
 8009160:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009164:	465d      	mov	r5, fp
 8009166:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800916a:	4630      	mov	r0, r6
 800916c:	4639      	mov	r1, r7
 800916e:	f7f7 fb6d 	bl	800084c <__aeabi_ddiv>
 8009172:	f7f7 fcf1 	bl	8000b58 <__aeabi_d2iz>
 8009176:	4680      	mov	r8, r0
 8009178:	f7f7 f9d4 	bl	8000524 <__aeabi_i2d>
 800917c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009180:	f7f7 fa3a 	bl	80005f8 <__aeabi_dmul>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4630      	mov	r0, r6
 800918a:	4639      	mov	r1, r7
 800918c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009190:	f7f7 f87a 	bl	8000288 <__aeabi_dsub>
 8009194:	f805 6b01 	strb.w	r6, [r5], #1
 8009198:	eba5 060b 	sub.w	r6, r5, fp
 800919c:	45b1      	cmp	r9, r6
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	d139      	bne.n	8009218 <_dtoa_r+0x6c8>
 80091a4:	f7f7 f872 	bl	800028c <__adddf3>
 80091a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091ac:	4606      	mov	r6, r0
 80091ae:	460f      	mov	r7, r1
 80091b0:	f7f7 fcb2 	bl	8000b18 <__aeabi_dcmpgt>
 80091b4:	b9c8      	cbnz	r0, 80091ea <_dtoa_r+0x69a>
 80091b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	f7f7 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 80091c2:	b110      	cbz	r0, 80091ca <_dtoa_r+0x67a>
 80091c4:	f018 0f01 	tst.w	r8, #1
 80091c8:	d10f      	bne.n	80091ea <_dtoa_r+0x69a>
 80091ca:	9904      	ldr	r1, [sp, #16]
 80091cc:	4620      	mov	r0, r4
 80091ce:	f000 ffe8 	bl	800a1a2 <_Bfree>
 80091d2:	2300      	movs	r3, #0
 80091d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091d6:	702b      	strb	r3, [r5, #0]
 80091d8:	f10a 0301 	add.w	r3, sl, #1
 80091dc:	6013      	str	r3, [r2, #0]
 80091de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 8241 	beq.w	8009668 <_dtoa_r+0xb18>
 80091e6:	601d      	str	r5, [r3, #0]
 80091e8:	e23e      	b.n	8009668 <_dtoa_r+0xb18>
 80091ea:	f8cd a020 	str.w	sl, [sp, #32]
 80091ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091f2:	2a39      	cmp	r2, #57	; 0x39
 80091f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80091f8:	d108      	bne.n	800920c <_dtoa_r+0x6bc>
 80091fa:	459b      	cmp	fp, r3
 80091fc:	d10a      	bne.n	8009214 <_dtoa_r+0x6c4>
 80091fe:	9b08      	ldr	r3, [sp, #32]
 8009200:	3301      	adds	r3, #1
 8009202:	9308      	str	r3, [sp, #32]
 8009204:	2330      	movs	r3, #48	; 0x30
 8009206:	f88b 3000 	strb.w	r3, [fp]
 800920a:	465b      	mov	r3, fp
 800920c:	781a      	ldrb	r2, [r3, #0]
 800920e:	3201      	adds	r2, #1
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	e78c      	b.n	800912e <_dtoa_r+0x5de>
 8009214:	461d      	mov	r5, r3
 8009216:	e7ea      	b.n	80091ee <_dtoa_r+0x69e>
 8009218:	2200      	movs	r2, #0
 800921a:	4b9b      	ldr	r3, [pc, #620]	; (8009488 <_dtoa_r+0x938>)
 800921c:	f7f7 f9ec 	bl	80005f8 <__aeabi_dmul>
 8009220:	2200      	movs	r2, #0
 8009222:	2300      	movs	r3, #0
 8009224:	4606      	mov	r6, r0
 8009226:	460f      	mov	r7, r1
 8009228:	f7f7 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800922c:	2800      	cmp	r0, #0
 800922e:	d09a      	beq.n	8009166 <_dtoa_r+0x616>
 8009230:	e7cb      	b.n	80091ca <_dtoa_r+0x67a>
 8009232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009234:	2a00      	cmp	r2, #0
 8009236:	f000 808b 	beq.w	8009350 <_dtoa_r+0x800>
 800923a:	9a06      	ldr	r2, [sp, #24]
 800923c:	2a01      	cmp	r2, #1
 800923e:	dc6e      	bgt.n	800931e <_dtoa_r+0x7ce>
 8009240:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009242:	2a00      	cmp	r2, #0
 8009244:	d067      	beq.n	8009316 <_dtoa_r+0x7c6>
 8009246:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800924a:	9f07      	ldr	r7, [sp, #28]
 800924c:	9d05      	ldr	r5, [sp, #20]
 800924e:	9a05      	ldr	r2, [sp, #20]
 8009250:	2101      	movs	r1, #1
 8009252:	441a      	add	r2, r3
 8009254:	4620      	mov	r0, r4
 8009256:	9205      	str	r2, [sp, #20]
 8009258:	4498      	add	r8, r3
 800925a:	f001 f880 	bl	800a35e <__i2b>
 800925e:	4606      	mov	r6, r0
 8009260:	2d00      	cmp	r5, #0
 8009262:	dd0c      	ble.n	800927e <_dtoa_r+0x72e>
 8009264:	f1b8 0f00 	cmp.w	r8, #0
 8009268:	dd09      	ble.n	800927e <_dtoa_r+0x72e>
 800926a:	4545      	cmp	r5, r8
 800926c:	9a05      	ldr	r2, [sp, #20]
 800926e:	462b      	mov	r3, r5
 8009270:	bfa8      	it	ge
 8009272:	4643      	movge	r3, r8
 8009274:	1ad2      	subs	r2, r2, r3
 8009276:	9205      	str	r2, [sp, #20]
 8009278:	1aed      	subs	r5, r5, r3
 800927a:	eba8 0803 	sub.w	r8, r8, r3
 800927e:	9b07      	ldr	r3, [sp, #28]
 8009280:	b1eb      	cbz	r3, 80092be <_dtoa_r+0x76e>
 8009282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009284:	2b00      	cmp	r3, #0
 8009286:	d067      	beq.n	8009358 <_dtoa_r+0x808>
 8009288:	b18f      	cbz	r7, 80092ae <_dtoa_r+0x75e>
 800928a:	4631      	mov	r1, r6
 800928c:	463a      	mov	r2, r7
 800928e:	4620      	mov	r0, r4
 8009290:	f001 f904 	bl	800a49c <__pow5mult>
 8009294:	9a04      	ldr	r2, [sp, #16]
 8009296:	4601      	mov	r1, r0
 8009298:	4606      	mov	r6, r0
 800929a:	4620      	mov	r0, r4
 800929c:	f001 f868 	bl	800a370 <__multiply>
 80092a0:	9904      	ldr	r1, [sp, #16]
 80092a2:	9008      	str	r0, [sp, #32]
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 ff7c 	bl	800a1a2 <_Bfree>
 80092aa:	9b08      	ldr	r3, [sp, #32]
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	9b07      	ldr	r3, [sp, #28]
 80092b0:	1bda      	subs	r2, r3, r7
 80092b2:	d004      	beq.n	80092be <_dtoa_r+0x76e>
 80092b4:	9904      	ldr	r1, [sp, #16]
 80092b6:	4620      	mov	r0, r4
 80092b8:	f001 f8f0 	bl	800a49c <__pow5mult>
 80092bc:	9004      	str	r0, [sp, #16]
 80092be:	2101      	movs	r1, #1
 80092c0:	4620      	mov	r0, r4
 80092c2:	f001 f84c 	bl	800a35e <__i2b>
 80092c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092c8:	4607      	mov	r7, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 81d0 	beq.w	8009670 <_dtoa_r+0xb20>
 80092d0:	461a      	mov	r2, r3
 80092d2:	4601      	mov	r1, r0
 80092d4:	4620      	mov	r0, r4
 80092d6:	f001 f8e1 	bl	800a49c <__pow5mult>
 80092da:	9b06      	ldr	r3, [sp, #24]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	4607      	mov	r7, r0
 80092e0:	dc40      	bgt.n	8009364 <_dtoa_r+0x814>
 80092e2:	9b00      	ldr	r3, [sp, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d139      	bne.n	800935c <_dtoa_r+0x80c>
 80092e8:	9b01      	ldr	r3, [sp, #4]
 80092ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d136      	bne.n	8009360 <_dtoa_r+0x810>
 80092f2:	9b01      	ldr	r3, [sp, #4]
 80092f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092f8:	0d1b      	lsrs	r3, r3, #20
 80092fa:	051b      	lsls	r3, r3, #20
 80092fc:	b12b      	cbz	r3, 800930a <_dtoa_r+0x7ba>
 80092fe:	9b05      	ldr	r3, [sp, #20]
 8009300:	3301      	adds	r3, #1
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	f108 0801 	add.w	r8, r8, #1
 8009308:	2301      	movs	r3, #1
 800930a:	9307      	str	r3, [sp, #28]
 800930c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800930e:	2b00      	cmp	r3, #0
 8009310:	d12a      	bne.n	8009368 <_dtoa_r+0x818>
 8009312:	2001      	movs	r0, #1
 8009314:	e030      	b.n	8009378 <_dtoa_r+0x828>
 8009316:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009318:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800931c:	e795      	b.n	800924a <_dtoa_r+0x6fa>
 800931e:	9b07      	ldr	r3, [sp, #28]
 8009320:	f109 37ff 	add.w	r7, r9, #4294967295
 8009324:	42bb      	cmp	r3, r7
 8009326:	bfbf      	itttt	lt
 8009328:	9b07      	ldrlt	r3, [sp, #28]
 800932a:	9707      	strlt	r7, [sp, #28]
 800932c:	1afa      	sublt	r2, r7, r3
 800932e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009330:	bfbb      	ittet	lt
 8009332:	189b      	addlt	r3, r3, r2
 8009334:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009336:	1bdf      	subge	r7, r3, r7
 8009338:	2700      	movlt	r7, #0
 800933a:	f1b9 0f00 	cmp.w	r9, #0
 800933e:	bfb5      	itete	lt
 8009340:	9b05      	ldrlt	r3, [sp, #20]
 8009342:	9d05      	ldrge	r5, [sp, #20]
 8009344:	eba3 0509 	sublt.w	r5, r3, r9
 8009348:	464b      	movge	r3, r9
 800934a:	bfb8      	it	lt
 800934c:	2300      	movlt	r3, #0
 800934e:	e77e      	b.n	800924e <_dtoa_r+0x6fe>
 8009350:	9f07      	ldr	r7, [sp, #28]
 8009352:	9d05      	ldr	r5, [sp, #20]
 8009354:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009356:	e783      	b.n	8009260 <_dtoa_r+0x710>
 8009358:	9a07      	ldr	r2, [sp, #28]
 800935a:	e7ab      	b.n	80092b4 <_dtoa_r+0x764>
 800935c:	2300      	movs	r3, #0
 800935e:	e7d4      	b.n	800930a <_dtoa_r+0x7ba>
 8009360:	9b00      	ldr	r3, [sp, #0]
 8009362:	e7d2      	b.n	800930a <_dtoa_r+0x7ba>
 8009364:	2300      	movs	r3, #0
 8009366:	9307      	str	r3, [sp, #28]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800936e:	6918      	ldr	r0, [r3, #16]
 8009370:	f000 ffa7 	bl	800a2c2 <__hi0bits>
 8009374:	f1c0 0020 	rsb	r0, r0, #32
 8009378:	4440      	add	r0, r8
 800937a:	f010 001f 	ands.w	r0, r0, #31
 800937e:	d047      	beq.n	8009410 <_dtoa_r+0x8c0>
 8009380:	f1c0 0320 	rsb	r3, r0, #32
 8009384:	2b04      	cmp	r3, #4
 8009386:	dd3b      	ble.n	8009400 <_dtoa_r+0x8b0>
 8009388:	9b05      	ldr	r3, [sp, #20]
 800938a:	f1c0 001c 	rsb	r0, r0, #28
 800938e:	4403      	add	r3, r0
 8009390:	9305      	str	r3, [sp, #20]
 8009392:	4405      	add	r5, r0
 8009394:	4480      	add	r8, r0
 8009396:	9b05      	ldr	r3, [sp, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	dd05      	ble.n	80093a8 <_dtoa_r+0x858>
 800939c:	461a      	mov	r2, r3
 800939e:	9904      	ldr	r1, [sp, #16]
 80093a0:	4620      	mov	r0, r4
 80093a2:	f001 f8c9 	bl	800a538 <__lshift>
 80093a6:	9004      	str	r0, [sp, #16]
 80093a8:	f1b8 0f00 	cmp.w	r8, #0
 80093ac:	dd05      	ble.n	80093ba <_dtoa_r+0x86a>
 80093ae:	4639      	mov	r1, r7
 80093b0:	4642      	mov	r2, r8
 80093b2:	4620      	mov	r0, r4
 80093b4:	f001 f8c0 	bl	800a538 <__lshift>
 80093b8:	4607      	mov	r7, r0
 80093ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093bc:	b353      	cbz	r3, 8009414 <_dtoa_r+0x8c4>
 80093be:	4639      	mov	r1, r7
 80093c0:	9804      	ldr	r0, [sp, #16]
 80093c2:	f001 f90d 	bl	800a5e0 <__mcmp>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	da24      	bge.n	8009414 <_dtoa_r+0x8c4>
 80093ca:	2300      	movs	r3, #0
 80093cc:	220a      	movs	r2, #10
 80093ce:	9904      	ldr	r1, [sp, #16]
 80093d0:	4620      	mov	r0, r4
 80093d2:	f000 fefd 	bl	800a1d0 <__multadd>
 80093d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d8:	9004      	str	r0, [sp, #16]
 80093da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 814d 	beq.w	800967e <_dtoa_r+0xb2e>
 80093e4:	2300      	movs	r3, #0
 80093e6:	4631      	mov	r1, r6
 80093e8:	220a      	movs	r2, #10
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 fef0 	bl	800a1d0 <__multadd>
 80093f0:	9b02      	ldr	r3, [sp, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	4606      	mov	r6, r0
 80093f6:	dc4f      	bgt.n	8009498 <_dtoa_r+0x948>
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	dd4c      	ble.n	8009498 <_dtoa_r+0x948>
 80093fe:	e011      	b.n	8009424 <_dtoa_r+0x8d4>
 8009400:	d0c9      	beq.n	8009396 <_dtoa_r+0x846>
 8009402:	9a05      	ldr	r2, [sp, #20]
 8009404:	331c      	adds	r3, #28
 8009406:	441a      	add	r2, r3
 8009408:	9205      	str	r2, [sp, #20]
 800940a:	441d      	add	r5, r3
 800940c:	4498      	add	r8, r3
 800940e:	e7c2      	b.n	8009396 <_dtoa_r+0x846>
 8009410:	4603      	mov	r3, r0
 8009412:	e7f6      	b.n	8009402 <_dtoa_r+0x8b2>
 8009414:	f1b9 0f00 	cmp.w	r9, #0
 8009418:	dc38      	bgt.n	800948c <_dtoa_r+0x93c>
 800941a:	9b06      	ldr	r3, [sp, #24]
 800941c:	2b02      	cmp	r3, #2
 800941e:	dd35      	ble.n	800948c <_dtoa_r+0x93c>
 8009420:	f8cd 9008 	str.w	r9, [sp, #8]
 8009424:	9b02      	ldr	r3, [sp, #8]
 8009426:	b963      	cbnz	r3, 8009442 <_dtoa_r+0x8f2>
 8009428:	4639      	mov	r1, r7
 800942a:	2205      	movs	r2, #5
 800942c:	4620      	mov	r0, r4
 800942e:	f000 fecf 	bl	800a1d0 <__multadd>
 8009432:	4601      	mov	r1, r0
 8009434:	4607      	mov	r7, r0
 8009436:	9804      	ldr	r0, [sp, #16]
 8009438:	f001 f8d2 	bl	800a5e0 <__mcmp>
 800943c:	2800      	cmp	r0, #0
 800943e:	f73f adcc 	bgt.w	8008fda <_dtoa_r+0x48a>
 8009442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009444:	465d      	mov	r5, fp
 8009446:	ea6f 0a03 	mvn.w	sl, r3
 800944a:	f04f 0900 	mov.w	r9, #0
 800944e:	4639      	mov	r1, r7
 8009450:	4620      	mov	r0, r4
 8009452:	f000 fea6 	bl	800a1a2 <_Bfree>
 8009456:	2e00      	cmp	r6, #0
 8009458:	f43f aeb7 	beq.w	80091ca <_dtoa_r+0x67a>
 800945c:	f1b9 0f00 	cmp.w	r9, #0
 8009460:	d005      	beq.n	800946e <_dtoa_r+0x91e>
 8009462:	45b1      	cmp	r9, r6
 8009464:	d003      	beq.n	800946e <_dtoa_r+0x91e>
 8009466:	4649      	mov	r1, r9
 8009468:	4620      	mov	r0, r4
 800946a:	f000 fe9a 	bl	800a1a2 <_Bfree>
 800946e:	4631      	mov	r1, r6
 8009470:	4620      	mov	r0, r4
 8009472:	f000 fe96 	bl	800a1a2 <_Bfree>
 8009476:	e6a8      	b.n	80091ca <_dtoa_r+0x67a>
 8009478:	2700      	movs	r7, #0
 800947a:	463e      	mov	r6, r7
 800947c:	e7e1      	b.n	8009442 <_dtoa_r+0x8f2>
 800947e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009482:	463e      	mov	r6, r7
 8009484:	e5a9      	b.n	8008fda <_dtoa_r+0x48a>
 8009486:	bf00      	nop
 8009488:	40240000 	.word	0x40240000
 800948c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800948e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 80fa 	beq.w	800968c <_dtoa_r+0xb3c>
 8009498:	2d00      	cmp	r5, #0
 800949a:	dd05      	ble.n	80094a8 <_dtoa_r+0x958>
 800949c:	4631      	mov	r1, r6
 800949e:	462a      	mov	r2, r5
 80094a0:	4620      	mov	r0, r4
 80094a2:	f001 f849 	bl	800a538 <__lshift>
 80094a6:	4606      	mov	r6, r0
 80094a8:	9b07      	ldr	r3, [sp, #28]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d04c      	beq.n	8009548 <_dtoa_r+0x9f8>
 80094ae:	6871      	ldr	r1, [r6, #4]
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 fe42 	bl	800a13a <_Balloc>
 80094b6:	6932      	ldr	r2, [r6, #16]
 80094b8:	3202      	adds	r2, #2
 80094ba:	4605      	mov	r5, r0
 80094bc:	0092      	lsls	r2, r2, #2
 80094be:	f106 010c 	add.w	r1, r6, #12
 80094c2:	300c      	adds	r0, #12
 80094c4:	f000 fe2e 	bl	800a124 <memcpy>
 80094c8:	2201      	movs	r2, #1
 80094ca:	4629      	mov	r1, r5
 80094cc:	4620      	mov	r0, r4
 80094ce:	f001 f833 	bl	800a538 <__lshift>
 80094d2:	9b00      	ldr	r3, [sp, #0]
 80094d4:	f8cd b014 	str.w	fp, [sp, #20]
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	46b1      	mov	r9, r6
 80094de:	9307      	str	r3, [sp, #28]
 80094e0:	4606      	mov	r6, r0
 80094e2:	4639      	mov	r1, r7
 80094e4:	9804      	ldr	r0, [sp, #16]
 80094e6:	f7ff faa5 	bl	8008a34 <quorem>
 80094ea:	4649      	mov	r1, r9
 80094ec:	4605      	mov	r5, r0
 80094ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80094f2:	9804      	ldr	r0, [sp, #16]
 80094f4:	f001 f874 	bl	800a5e0 <__mcmp>
 80094f8:	4632      	mov	r2, r6
 80094fa:	9000      	str	r0, [sp, #0]
 80094fc:	4639      	mov	r1, r7
 80094fe:	4620      	mov	r0, r4
 8009500:	f001 f888 	bl	800a614 <__mdiff>
 8009504:	68c3      	ldr	r3, [r0, #12]
 8009506:	4602      	mov	r2, r0
 8009508:	bb03      	cbnz	r3, 800954c <_dtoa_r+0x9fc>
 800950a:	4601      	mov	r1, r0
 800950c:	9008      	str	r0, [sp, #32]
 800950e:	9804      	ldr	r0, [sp, #16]
 8009510:	f001 f866 	bl	800a5e0 <__mcmp>
 8009514:	9a08      	ldr	r2, [sp, #32]
 8009516:	4603      	mov	r3, r0
 8009518:	4611      	mov	r1, r2
 800951a:	4620      	mov	r0, r4
 800951c:	9308      	str	r3, [sp, #32]
 800951e:	f000 fe40 	bl	800a1a2 <_Bfree>
 8009522:	9b08      	ldr	r3, [sp, #32]
 8009524:	b9a3      	cbnz	r3, 8009550 <_dtoa_r+0xa00>
 8009526:	9a06      	ldr	r2, [sp, #24]
 8009528:	b992      	cbnz	r2, 8009550 <_dtoa_r+0xa00>
 800952a:	9a07      	ldr	r2, [sp, #28]
 800952c:	b982      	cbnz	r2, 8009550 <_dtoa_r+0xa00>
 800952e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009532:	d029      	beq.n	8009588 <_dtoa_r+0xa38>
 8009534:	9b00      	ldr	r3, [sp, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	dd01      	ble.n	800953e <_dtoa_r+0x9ee>
 800953a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800953e:	9b05      	ldr	r3, [sp, #20]
 8009540:	1c5d      	adds	r5, r3, #1
 8009542:	f883 8000 	strb.w	r8, [r3]
 8009546:	e782      	b.n	800944e <_dtoa_r+0x8fe>
 8009548:	4630      	mov	r0, r6
 800954a:	e7c2      	b.n	80094d2 <_dtoa_r+0x982>
 800954c:	2301      	movs	r3, #1
 800954e:	e7e3      	b.n	8009518 <_dtoa_r+0x9c8>
 8009550:	9a00      	ldr	r2, [sp, #0]
 8009552:	2a00      	cmp	r2, #0
 8009554:	db04      	blt.n	8009560 <_dtoa_r+0xa10>
 8009556:	d125      	bne.n	80095a4 <_dtoa_r+0xa54>
 8009558:	9a06      	ldr	r2, [sp, #24]
 800955a:	bb1a      	cbnz	r2, 80095a4 <_dtoa_r+0xa54>
 800955c:	9a07      	ldr	r2, [sp, #28]
 800955e:	bb0a      	cbnz	r2, 80095a4 <_dtoa_r+0xa54>
 8009560:	2b00      	cmp	r3, #0
 8009562:	ddec      	ble.n	800953e <_dtoa_r+0x9ee>
 8009564:	2201      	movs	r2, #1
 8009566:	9904      	ldr	r1, [sp, #16]
 8009568:	4620      	mov	r0, r4
 800956a:	f000 ffe5 	bl	800a538 <__lshift>
 800956e:	4639      	mov	r1, r7
 8009570:	9004      	str	r0, [sp, #16]
 8009572:	f001 f835 	bl	800a5e0 <__mcmp>
 8009576:	2800      	cmp	r0, #0
 8009578:	dc03      	bgt.n	8009582 <_dtoa_r+0xa32>
 800957a:	d1e0      	bne.n	800953e <_dtoa_r+0x9ee>
 800957c:	f018 0f01 	tst.w	r8, #1
 8009580:	d0dd      	beq.n	800953e <_dtoa_r+0x9ee>
 8009582:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009586:	d1d8      	bne.n	800953a <_dtoa_r+0x9ea>
 8009588:	9b05      	ldr	r3, [sp, #20]
 800958a:	9a05      	ldr	r2, [sp, #20]
 800958c:	1c5d      	adds	r5, r3, #1
 800958e:	2339      	movs	r3, #57	; 0x39
 8009590:	7013      	strb	r3, [r2, #0]
 8009592:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009596:	2b39      	cmp	r3, #57	; 0x39
 8009598:	f105 32ff 	add.w	r2, r5, #4294967295
 800959c:	d04f      	beq.n	800963e <_dtoa_r+0xaee>
 800959e:	3301      	adds	r3, #1
 80095a0:	7013      	strb	r3, [r2, #0]
 80095a2:	e754      	b.n	800944e <_dtoa_r+0x8fe>
 80095a4:	9a05      	ldr	r2, [sp, #20]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f102 0501 	add.w	r5, r2, #1
 80095ac:	dd06      	ble.n	80095bc <_dtoa_r+0xa6c>
 80095ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80095b2:	d0e9      	beq.n	8009588 <_dtoa_r+0xa38>
 80095b4:	f108 0801 	add.w	r8, r8, #1
 80095b8:	9b05      	ldr	r3, [sp, #20]
 80095ba:	e7c2      	b.n	8009542 <_dtoa_r+0x9f2>
 80095bc:	9a02      	ldr	r2, [sp, #8]
 80095be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80095c2:	eba5 030b 	sub.w	r3, r5, fp
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d021      	beq.n	800960e <_dtoa_r+0xabe>
 80095ca:	2300      	movs	r3, #0
 80095cc:	220a      	movs	r2, #10
 80095ce:	9904      	ldr	r1, [sp, #16]
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 fdfd 	bl	800a1d0 <__multadd>
 80095d6:	45b1      	cmp	r9, r6
 80095d8:	9004      	str	r0, [sp, #16]
 80095da:	f04f 0300 	mov.w	r3, #0
 80095de:	f04f 020a 	mov.w	r2, #10
 80095e2:	4649      	mov	r1, r9
 80095e4:	4620      	mov	r0, r4
 80095e6:	d105      	bne.n	80095f4 <_dtoa_r+0xaa4>
 80095e8:	f000 fdf2 	bl	800a1d0 <__multadd>
 80095ec:	4681      	mov	r9, r0
 80095ee:	4606      	mov	r6, r0
 80095f0:	9505      	str	r5, [sp, #20]
 80095f2:	e776      	b.n	80094e2 <_dtoa_r+0x992>
 80095f4:	f000 fdec 	bl	800a1d0 <__multadd>
 80095f8:	4631      	mov	r1, r6
 80095fa:	4681      	mov	r9, r0
 80095fc:	2300      	movs	r3, #0
 80095fe:	220a      	movs	r2, #10
 8009600:	4620      	mov	r0, r4
 8009602:	f000 fde5 	bl	800a1d0 <__multadd>
 8009606:	4606      	mov	r6, r0
 8009608:	e7f2      	b.n	80095f0 <_dtoa_r+0xaa0>
 800960a:	f04f 0900 	mov.w	r9, #0
 800960e:	2201      	movs	r2, #1
 8009610:	9904      	ldr	r1, [sp, #16]
 8009612:	4620      	mov	r0, r4
 8009614:	f000 ff90 	bl	800a538 <__lshift>
 8009618:	4639      	mov	r1, r7
 800961a:	9004      	str	r0, [sp, #16]
 800961c:	f000 ffe0 	bl	800a5e0 <__mcmp>
 8009620:	2800      	cmp	r0, #0
 8009622:	dcb6      	bgt.n	8009592 <_dtoa_r+0xa42>
 8009624:	d102      	bne.n	800962c <_dtoa_r+0xadc>
 8009626:	f018 0f01 	tst.w	r8, #1
 800962a:	d1b2      	bne.n	8009592 <_dtoa_r+0xa42>
 800962c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009630:	2b30      	cmp	r3, #48	; 0x30
 8009632:	f105 32ff 	add.w	r2, r5, #4294967295
 8009636:	f47f af0a 	bne.w	800944e <_dtoa_r+0x8fe>
 800963a:	4615      	mov	r5, r2
 800963c:	e7f6      	b.n	800962c <_dtoa_r+0xadc>
 800963e:	4593      	cmp	fp, r2
 8009640:	d105      	bne.n	800964e <_dtoa_r+0xafe>
 8009642:	2331      	movs	r3, #49	; 0x31
 8009644:	f10a 0a01 	add.w	sl, sl, #1
 8009648:	f88b 3000 	strb.w	r3, [fp]
 800964c:	e6ff      	b.n	800944e <_dtoa_r+0x8fe>
 800964e:	4615      	mov	r5, r2
 8009650:	e79f      	b.n	8009592 <_dtoa_r+0xa42>
 8009652:	f8df b064 	ldr.w	fp, [pc, #100]	; 80096b8 <_dtoa_r+0xb68>
 8009656:	e007      	b.n	8009668 <_dtoa_r+0xb18>
 8009658:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800965a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80096bc <_dtoa_r+0xb6c>
 800965e:	b11b      	cbz	r3, 8009668 <_dtoa_r+0xb18>
 8009660:	f10b 0308 	add.w	r3, fp, #8
 8009664:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	4658      	mov	r0, fp
 800966a:	b017      	add	sp, #92	; 0x5c
 800966c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009670:	9b06      	ldr	r3, [sp, #24]
 8009672:	2b01      	cmp	r3, #1
 8009674:	f77f ae35 	ble.w	80092e2 <_dtoa_r+0x792>
 8009678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800967a:	9307      	str	r3, [sp, #28]
 800967c:	e649      	b.n	8009312 <_dtoa_r+0x7c2>
 800967e:	9b02      	ldr	r3, [sp, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc03      	bgt.n	800968c <_dtoa_r+0xb3c>
 8009684:	9b06      	ldr	r3, [sp, #24]
 8009686:	2b02      	cmp	r3, #2
 8009688:	f73f aecc 	bgt.w	8009424 <_dtoa_r+0x8d4>
 800968c:	465d      	mov	r5, fp
 800968e:	4639      	mov	r1, r7
 8009690:	9804      	ldr	r0, [sp, #16]
 8009692:	f7ff f9cf 	bl	8008a34 <quorem>
 8009696:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800969a:	f805 8b01 	strb.w	r8, [r5], #1
 800969e:	9a02      	ldr	r2, [sp, #8]
 80096a0:	eba5 030b 	sub.w	r3, r5, fp
 80096a4:	429a      	cmp	r2, r3
 80096a6:	ddb0      	ble.n	800960a <_dtoa_r+0xaba>
 80096a8:	2300      	movs	r3, #0
 80096aa:	220a      	movs	r2, #10
 80096ac:	9904      	ldr	r1, [sp, #16]
 80096ae:	4620      	mov	r0, r4
 80096b0:	f000 fd8e 	bl	800a1d0 <__multadd>
 80096b4:	9004      	str	r0, [sp, #16]
 80096b6:	e7ea      	b.n	800968e <_dtoa_r+0xb3e>
 80096b8:	0800b3b0 	.word	0x0800b3b0
 80096bc:	0800b430 	.word	0x0800b430

080096c0 <__sflush_r>:
 80096c0:	898a      	ldrh	r2, [r1, #12]
 80096c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c6:	4605      	mov	r5, r0
 80096c8:	0710      	lsls	r0, r2, #28
 80096ca:	460c      	mov	r4, r1
 80096cc:	d458      	bmi.n	8009780 <__sflush_r+0xc0>
 80096ce:	684b      	ldr	r3, [r1, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dc05      	bgt.n	80096e0 <__sflush_r+0x20>
 80096d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	dc02      	bgt.n	80096e0 <__sflush_r+0x20>
 80096da:	2000      	movs	r0, #0
 80096dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096e2:	2e00      	cmp	r6, #0
 80096e4:	d0f9      	beq.n	80096da <__sflush_r+0x1a>
 80096e6:	2300      	movs	r3, #0
 80096e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096ec:	682f      	ldr	r7, [r5, #0]
 80096ee:	6a21      	ldr	r1, [r4, #32]
 80096f0:	602b      	str	r3, [r5, #0]
 80096f2:	d032      	beq.n	800975a <__sflush_r+0x9a>
 80096f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	075a      	lsls	r2, r3, #29
 80096fa:	d505      	bpl.n	8009708 <__sflush_r+0x48>
 80096fc:	6863      	ldr	r3, [r4, #4]
 80096fe:	1ac0      	subs	r0, r0, r3
 8009700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009702:	b10b      	cbz	r3, 8009708 <__sflush_r+0x48>
 8009704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009706:	1ac0      	subs	r0, r0, r3
 8009708:	2300      	movs	r3, #0
 800970a:	4602      	mov	r2, r0
 800970c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800970e:	6a21      	ldr	r1, [r4, #32]
 8009710:	4628      	mov	r0, r5
 8009712:	47b0      	blx	r6
 8009714:	1c43      	adds	r3, r0, #1
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	d106      	bne.n	8009728 <__sflush_r+0x68>
 800971a:	6829      	ldr	r1, [r5, #0]
 800971c:	291d      	cmp	r1, #29
 800971e:	d848      	bhi.n	80097b2 <__sflush_r+0xf2>
 8009720:	4a29      	ldr	r2, [pc, #164]	; (80097c8 <__sflush_r+0x108>)
 8009722:	40ca      	lsrs	r2, r1
 8009724:	07d6      	lsls	r6, r2, #31
 8009726:	d544      	bpl.n	80097b2 <__sflush_r+0xf2>
 8009728:	2200      	movs	r2, #0
 800972a:	6062      	str	r2, [r4, #4]
 800972c:	04d9      	lsls	r1, r3, #19
 800972e:	6922      	ldr	r2, [r4, #16]
 8009730:	6022      	str	r2, [r4, #0]
 8009732:	d504      	bpl.n	800973e <__sflush_r+0x7e>
 8009734:	1c42      	adds	r2, r0, #1
 8009736:	d101      	bne.n	800973c <__sflush_r+0x7c>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	b903      	cbnz	r3, 800973e <__sflush_r+0x7e>
 800973c:	6560      	str	r0, [r4, #84]	; 0x54
 800973e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009740:	602f      	str	r7, [r5, #0]
 8009742:	2900      	cmp	r1, #0
 8009744:	d0c9      	beq.n	80096da <__sflush_r+0x1a>
 8009746:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800974a:	4299      	cmp	r1, r3
 800974c:	d002      	beq.n	8009754 <__sflush_r+0x94>
 800974e:	4628      	mov	r0, r5
 8009750:	f001 f900 	bl	800a954 <_free_r>
 8009754:	2000      	movs	r0, #0
 8009756:	6360      	str	r0, [r4, #52]	; 0x34
 8009758:	e7c0      	b.n	80096dc <__sflush_r+0x1c>
 800975a:	2301      	movs	r3, #1
 800975c:	4628      	mov	r0, r5
 800975e:	47b0      	blx	r6
 8009760:	1c41      	adds	r1, r0, #1
 8009762:	d1c8      	bne.n	80096f6 <__sflush_r+0x36>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d0c5      	beq.n	80096f6 <__sflush_r+0x36>
 800976a:	2b1d      	cmp	r3, #29
 800976c:	d001      	beq.n	8009772 <__sflush_r+0xb2>
 800976e:	2b16      	cmp	r3, #22
 8009770:	d101      	bne.n	8009776 <__sflush_r+0xb6>
 8009772:	602f      	str	r7, [r5, #0]
 8009774:	e7b1      	b.n	80096da <__sflush_r+0x1a>
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	e7ad      	b.n	80096dc <__sflush_r+0x1c>
 8009780:	690f      	ldr	r7, [r1, #16]
 8009782:	2f00      	cmp	r7, #0
 8009784:	d0a9      	beq.n	80096da <__sflush_r+0x1a>
 8009786:	0793      	lsls	r3, r2, #30
 8009788:	680e      	ldr	r6, [r1, #0]
 800978a:	bf08      	it	eq
 800978c:	694b      	ldreq	r3, [r1, #20]
 800978e:	600f      	str	r7, [r1, #0]
 8009790:	bf18      	it	ne
 8009792:	2300      	movne	r3, #0
 8009794:	eba6 0807 	sub.w	r8, r6, r7
 8009798:	608b      	str	r3, [r1, #8]
 800979a:	f1b8 0f00 	cmp.w	r8, #0
 800979e:	dd9c      	ble.n	80096da <__sflush_r+0x1a>
 80097a0:	4643      	mov	r3, r8
 80097a2:	463a      	mov	r2, r7
 80097a4:	6a21      	ldr	r1, [r4, #32]
 80097a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097a8:	4628      	mov	r0, r5
 80097aa:	47b0      	blx	r6
 80097ac:	2800      	cmp	r0, #0
 80097ae:	dc06      	bgt.n	80097be <__sflush_r+0xfe>
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295
 80097bc:	e78e      	b.n	80096dc <__sflush_r+0x1c>
 80097be:	4407      	add	r7, r0
 80097c0:	eba8 0800 	sub.w	r8, r8, r0
 80097c4:	e7e9      	b.n	800979a <__sflush_r+0xda>
 80097c6:	bf00      	nop
 80097c8:	20400001 	.word	0x20400001

080097cc <_fflush_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	690b      	ldr	r3, [r1, #16]
 80097d0:	4605      	mov	r5, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	b1db      	cbz	r3, 800980e <_fflush_r+0x42>
 80097d6:	b118      	cbz	r0, 80097e0 <_fflush_r+0x14>
 80097d8:	6983      	ldr	r3, [r0, #24]
 80097da:	b90b      	cbnz	r3, 80097e0 <_fflush_r+0x14>
 80097dc:	f000 f860 	bl	80098a0 <__sinit>
 80097e0:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <_fflush_r+0x48>)
 80097e2:	429c      	cmp	r4, r3
 80097e4:	d109      	bne.n	80097fa <_fflush_r+0x2e>
 80097e6:	686c      	ldr	r4, [r5, #4]
 80097e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ec:	b17b      	cbz	r3, 800980e <_fflush_r+0x42>
 80097ee:	4621      	mov	r1, r4
 80097f0:	4628      	mov	r0, r5
 80097f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097f6:	f7ff bf63 	b.w	80096c0 <__sflush_r>
 80097fa:	4b07      	ldr	r3, [pc, #28]	; (8009818 <_fflush_r+0x4c>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	d101      	bne.n	8009804 <_fflush_r+0x38>
 8009800:	68ac      	ldr	r4, [r5, #8]
 8009802:	e7f1      	b.n	80097e8 <_fflush_r+0x1c>
 8009804:	4b05      	ldr	r3, [pc, #20]	; (800981c <_fflush_r+0x50>)
 8009806:	429c      	cmp	r4, r3
 8009808:	bf08      	it	eq
 800980a:	68ec      	ldreq	r4, [r5, #12]
 800980c:	e7ec      	b.n	80097e8 <_fflush_r+0x1c>
 800980e:	2000      	movs	r0, #0
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	bf00      	nop
 8009814:	0800b460 	.word	0x0800b460
 8009818:	0800b480 	.word	0x0800b480
 800981c:	0800b440 	.word	0x0800b440

08009820 <std>:
 8009820:	2300      	movs	r3, #0
 8009822:	b510      	push	{r4, lr}
 8009824:	4604      	mov	r4, r0
 8009826:	e9c0 3300 	strd	r3, r3, [r0]
 800982a:	6083      	str	r3, [r0, #8]
 800982c:	8181      	strh	r1, [r0, #12]
 800982e:	6643      	str	r3, [r0, #100]	; 0x64
 8009830:	81c2      	strh	r2, [r0, #14]
 8009832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009836:	6183      	str	r3, [r0, #24]
 8009838:	4619      	mov	r1, r3
 800983a:	2208      	movs	r2, #8
 800983c:	305c      	adds	r0, #92	; 0x5c
 800983e:	f7fd faa1 	bl	8006d84 <memset>
 8009842:	4b05      	ldr	r3, [pc, #20]	; (8009858 <std+0x38>)
 8009844:	6263      	str	r3, [r4, #36]	; 0x24
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <std+0x3c>)
 8009848:	62a3      	str	r3, [r4, #40]	; 0x28
 800984a:	4b05      	ldr	r3, [pc, #20]	; (8009860 <std+0x40>)
 800984c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <std+0x44>)
 8009850:	6224      	str	r4, [r4, #32]
 8009852:	6323      	str	r3, [r4, #48]	; 0x30
 8009854:	bd10      	pop	{r4, pc}
 8009856:	bf00      	nop
 8009858:	0800afe9 	.word	0x0800afe9
 800985c:	0800b00b 	.word	0x0800b00b
 8009860:	0800b043 	.word	0x0800b043
 8009864:	0800b067 	.word	0x0800b067

08009868 <_cleanup_r>:
 8009868:	4901      	ldr	r1, [pc, #4]	; (8009870 <_cleanup_r+0x8>)
 800986a:	f000 b885 	b.w	8009978 <_fwalk_reent>
 800986e:	bf00      	nop
 8009870:	080097cd 	.word	0x080097cd

08009874 <__sfmoreglue>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	1e4a      	subs	r2, r1, #1
 8009878:	2568      	movs	r5, #104	; 0x68
 800987a:	4355      	muls	r5, r2
 800987c:	460e      	mov	r6, r1
 800987e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009882:	f001 f8b5 	bl	800a9f0 <_malloc_r>
 8009886:	4604      	mov	r4, r0
 8009888:	b140      	cbz	r0, 800989c <__sfmoreglue+0x28>
 800988a:	2100      	movs	r1, #0
 800988c:	e9c0 1600 	strd	r1, r6, [r0]
 8009890:	300c      	adds	r0, #12
 8009892:	60a0      	str	r0, [r4, #8]
 8009894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009898:	f7fd fa74 	bl	8006d84 <memset>
 800989c:	4620      	mov	r0, r4
 800989e:	bd70      	pop	{r4, r5, r6, pc}

080098a0 <__sinit>:
 80098a0:	6983      	ldr	r3, [r0, #24]
 80098a2:	b510      	push	{r4, lr}
 80098a4:	4604      	mov	r4, r0
 80098a6:	bb33      	cbnz	r3, 80098f6 <__sinit+0x56>
 80098a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80098ac:	6503      	str	r3, [r0, #80]	; 0x50
 80098ae:	4b12      	ldr	r3, [pc, #72]	; (80098f8 <__sinit+0x58>)
 80098b0:	4a12      	ldr	r2, [pc, #72]	; (80098fc <__sinit+0x5c>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6282      	str	r2, [r0, #40]	; 0x28
 80098b6:	4298      	cmp	r0, r3
 80098b8:	bf04      	itt	eq
 80098ba:	2301      	moveq	r3, #1
 80098bc:	6183      	streq	r3, [r0, #24]
 80098be:	f000 f81f 	bl	8009900 <__sfp>
 80098c2:	6060      	str	r0, [r4, #4]
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 f81b 	bl	8009900 <__sfp>
 80098ca:	60a0      	str	r0, [r4, #8]
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 f817 	bl	8009900 <__sfp>
 80098d2:	2200      	movs	r2, #0
 80098d4:	60e0      	str	r0, [r4, #12]
 80098d6:	2104      	movs	r1, #4
 80098d8:	6860      	ldr	r0, [r4, #4]
 80098da:	f7ff ffa1 	bl	8009820 <std>
 80098de:	2201      	movs	r2, #1
 80098e0:	2109      	movs	r1, #9
 80098e2:	68a0      	ldr	r0, [r4, #8]
 80098e4:	f7ff ff9c 	bl	8009820 <std>
 80098e8:	2202      	movs	r2, #2
 80098ea:	2112      	movs	r1, #18
 80098ec:	68e0      	ldr	r0, [r4, #12]
 80098ee:	f7ff ff97 	bl	8009820 <std>
 80098f2:	2301      	movs	r3, #1
 80098f4:	61a3      	str	r3, [r4, #24]
 80098f6:	bd10      	pop	{r4, pc}
 80098f8:	0800b39c 	.word	0x0800b39c
 80098fc:	08009869 	.word	0x08009869

08009900 <__sfp>:
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	4b1b      	ldr	r3, [pc, #108]	; (8009970 <__sfp+0x70>)
 8009904:	681e      	ldr	r6, [r3, #0]
 8009906:	69b3      	ldr	r3, [r6, #24]
 8009908:	4607      	mov	r7, r0
 800990a:	b913      	cbnz	r3, 8009912 <__sfp+0x12>
 800990c:	4630      	mov	r0, r6
 800990e:	f7ff ffc7 	bl	80098a0 <__sinit>
 8009912:	3648      	adds	r6, #72	; 0x48
 8009914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009918:	3b01      	subs	r3, #1
 800991a:	d503      	bpl.n	8009924 <__sfp+0x24>
 800991c:	6833      	ldr	r3, [r6, #0]
 800991e:	b133      	cbz	r3, 800992e <__sfp+0x2e>
 8009920:	6836      	ldr	r6, [r6, #0]
 8009922:	e7f7      	b.n	8009914 <__sfp+0x14>
 8009924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009928:	b16d      	cbz	r5, 8009946 <__sfp+0x46>
 800992a:	3468      	adds	r4, #104	; 0x68
 800992c:	e7f4      	b.n	8009918 <__sfp+0x18>
 800992e:	2104      	movs	r1, #4
 8009930:	4638      	mov	r0, r7
 8009932:	f7ff ff9f 	bl	8009874 <__sfmoreglue>
 8009936:	6030      	str	r0, [r6, #0]
 8009938:	2800      	cmp	r0, #0
 800993a:	d1f1      	bne.n	8009920 <__sfp+0x20>
 800993c:	230c      	movs	r3, #12
 800993e:	603b      	str	r3, [r7, #0]
 8009940:	4604      	mov	r4, r0
 8009942:	4620      	mov	r0, r4
 8009944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009946:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <__sfp+0x74>)
 8009948:	6665      	str	r5, [r4, #100]	; 0x64
 800994a:	e9c4 5500 	strd	r5, r5, [r4]
 800994e:	60a5      	str	r5, [r4, #8]
 8009950:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009954:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009958:	2208      	movs	r2, #8
 800995a:	4629      	mov	r1, r5
 800995c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009960:	f7fd fa10 	bl	8006d84 <memset>
 8009964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800996c:	e7e9      	b.n	8009942 <__sfp+0x42>
 800996e:	bf00      	nop
 8009970:	0800b39c 	.word	0x0800b39c
 8009974:	ffff0001 	.word	0xffff0001

08009978 <_fwalk_reent>:
 8009978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800997c:	4680      	mov	r8, r0
 800997e:	4689      	mov	r9, r1
 8009980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009984:	2600      	movs	r6, #0
 8009986:	b914      	cbnz	r4, 800998e <_fwalk_reent+0x16>
 8009988:	4630      	mov	r0, r6
 800998a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009992:	3f01      	subs	r7, #1
 8009994:	d501      	bpl.n	800999a <_fwalk_reent+0x22>
 8009996:	6824      	ldr	r4, [r4, #0]
 8009998:	e7f5      	b.n	8009986 <_fwalk_reent+0xe>
 800999a:	89ab      	ldrh	r3, [r5, #12]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d907      	bls.n	80099b0 <_fwalk_reent+0x38>
 80099a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099a4:	3301      	adds	r3, #1
 80099a6:	d003      	beq.n	80099b0 <_fwalk_reent+0x38>
 80099a8:	4629      	mov	r1, r5
 80099aa:	4640      	mov	r0, r8
 80099ac:	47c8      	blx	r9
 80099ae:	4306      	orrs	r6, r0
 80099b0:	3568      	adds	r5, #104	; 0x68
 80099b2:	e7ee      	b.n	8009992 <_fwalk_reent+0x1a>

080099b4 <rshift>:
 80099b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b6:	6906      	ldr	r6, [r0, #16]
 80099b8:	114b      	asrs	r3, r1, #5
 80099ba:	429e      	cmp	r6, r3
 80099bc:	f100 0414 	add.w	r4, r0, #20
 80099c0:	dd30      	ble.n	8009a24 <rshift+0x70>
 80099c2:	f011 011f 	ands.w	r1, r1, #31
 80099c6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80099ca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80099ce:	d108      	bne.n	80099e2 <rshift+0x2e>
 80099d0:	4621      	mov	r1, r4
 80099d2:	42b2      	cmp	r2, r6
 80099d4:	460b      	mov	r3, r1
 80099d6:	d211      	bcs.n	80099fc <rshift+0x48>
 80099d8:	f852 3b04 	ldr.w	r3, [r2], #4
 80099dc:	f841 3b04 	str.w	r3, [r1], #4
 80099e0:	e7f7      	b.n	80099d2 <rshift+0x1e>
 80099e2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80099e6:	f1c1 0c20 	rsb	ip, r1, #32
 80099ea:	40cd      	lsrs	r5, r1
 80099ec:	3204      	adds	r2, #4
 80099ee:	4623      	mov	r3, r4
 80099f0:	42b2      	cmp	r2, r6
 80099f2:	4617      	mov	r7, r2
 80099f4:	d30c      	bcc.n	8009a10 <rshift+0x5c>
 80099f6:	601d      	str	r5, [r3, #0]
 80099f8:	b105      	cbz	r5, 80099fc <rshift+0x48>
 80099fa:	3304      	adds	r3, #4
 80099fc:	1b1a      	subs	r2, r3, r4
 80099fe:	42a3      	cmp	r3, r4
 8009a00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a04:	bf08      	it	eq
 8009a06:	2300      	moveq	r3, #0
 8009a08:	6102      	str	r2, [r0, #16]
 8009a0a:	bf08      	it	eq
 8009a0c:	6143      	streq	r3, [r0, #20]
 8009a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a10:	683f      	ldr	r7, [r7, #0]
 8009a12:	fa07 f70c 	lsl.w	r7, r7, ip
 8009a16:	433d      	orrs	r5, r7
 8009a18:	f843 5b04 	str.w	r5, [r3], #4
 8009a1c:	f852 5b04 	ldr.w	r5, [r2], #4
 8009a20:	40cd      	lsrs	r5, r1
 8009a22:	e7e5      	b.n	80099f0 <rshift+0x3c>
 8009a24:	4623      	mov	r3, r4
 8009a26:	e7e9      	b.n	80099fc <rshift+0x48>

08009a28 <__hexdig_fun>:
 8009a28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a2c:	2b09      	cmp	r3, #9
 8009a2e:	d802      	bhi.n	8009a36 <__hexdig_fun+0xe>
 8009a30:	3820      	subs	r0, #32
 8009a32:	b2c0      	uxtb	r0, r0
 8009a34:	4770      	bx	lr
 8009a36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a3a:	2b05      	cmp	r3, #5
 8009a3c:	d801      	bhi.n	8009a42 <__hexdig_fun+0x1a>
 8009a3e:	3847      	subs	r0, #71	; 0x47
 8009a40:	e7f7      	b.n	8009a32 <__hexdig_fun+0xa>
 8009a42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	d801      	bhi.n	8009a4e <__hexdig_fun+0x26>
 8009a4a:	3827      	subs	r0, #39	; 0x27
 8009a4c:	e7f1      	b.n	8009a32 <__hexdig_fun+0xa>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	4770      	bx	lr

08009a52 <__gethex>:
 8009a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a56:	b08b      	sub	sp, #44	; 0x2c
 8009a58:	468a      	mov	sl, r1
 8009a5a:	9002      	str	r0, [sp, #8]
 8009a5c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009a5e:	9306      	str	r3, [sp, #24]
 8009a60:	4690      	mov	r8, r2
 8009a62:	f000 fad0 	bl	800a006 <__localeconv_l>
 8009a66:	6803      	ldr	r3, [r0, #0]
 8009a68:	9303      	str	r3, [sp, #12]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f6 fbb0 	bl	80001d0 <strlen>
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	9001      	str	r0, [sp, #4]
 8009a74:	4403      	add	r3, r0
 8009a76:	f04f 0b00 	mov.w	fp, #0
 8009a7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a7e:	9307      	str	r3, [sp, #28]
 8009a80:	f8da 3000 	ldr.w	r3, [sl]
 8009a84:	3302      	adds	r3, #2
 8009a86:	461f      	mov	r7, r3
 8009a88:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a8c:	2830      	cmp	r0, #48	; 0x30
 8009a8e:	d06c      	beq.n	8009b6a <__gethex+0x118>
 8009a90:	f7ff ffca 	bl	8009a28 <__hexdig_fun>
 8009a94:	4604      	mov	r4, r0
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d16a      	bne.n	8009b70 <__gethex+0x11e>
 8009a9a:	9a01      	ldr	r2, [sp, #4]
 8009a9c:	9903      	ldr	r1, [sp, #12]
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f001 fae5 	bl	800b06e <strncmp>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d166      	bne.n	8009b76 <__gethex+0x124>
 8009aa8:	9b01      	ldr	r3, [sp, #4]
 8009aaa:	5cf8      	ldrb	r0, [r7, r3]
 8009aac:	18fe      	adds	r6, r7, r3
 8009aae:	f7ff ffbb 	bl	8009a28 <__hexdig_fun>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d062      	beq.n	8009b7c <__gethex+0x12a>
 8009ab6:	4633      	mov	r3, r6
 8009ab8:	7818      	ldrb	r0, [r3, #0]
 8009aba:	2830      	cmp	r0, #48	; 0x30
 8009abc:	461f      	mov	r7, r3
 8009abe:	f103 0301 	add.w	r3, r3, #1
 8009ac2:	d0f9      	beq.n	8009ab8 <__gethex+0x66>
 8009ac4:	f7ff ffb0 	bl	8009a28 <__hexdig_fun>
 8009ac8:	fab0 f580 	clz	r5, r0
 8009acc:	096d      	lsrs	r5, r5, #5
 8009ace:	4634      	mov	r4, r6
 8009ad0:	f04f 0b01 	mov.w	fp, #1
 8009ad4:	463a      	mov	r2, r7
 8009ad6:	4616      	mov	r6, r2
 8009ad8:	3201      	adds	r2, #1
 8009ada:	7830      	ldrb	r0, [r6, #0]
 8009adc:	f7ff ffa4 	bl	8009a28 <__hexdig_fun>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d1f8      	bne.n	8009ad6 <__gethex+0x84>
 8009ae4:	9a01      	ldr	r2, [sp, #4]
 8009ae6:	9903      	ldr	r1, [sp, #12]
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f001 fac0 	bl	800b06e <strncmp>
 8009aee:	b950      	cbnz	r0, 8009b06 <__gethex+0xb4>
 8009af0:	b954      	cbnz	r4, 8009b08 <__gethex+0xb6>
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	18f4      	adds	r4, r6, r3
 8009af6:	4622      	mov	r2, r4
 8009af8:	4616      	mov	r6, r2
 8009afa:	3201      	adds	r2, #1
 8009afc:	7830      	ldrb	r0, [r6, #0]
 8009afe:	f7ff ff93 	bl	8009a28 <__hexdig_fun>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d1f8      	bne.n	8009af8 <__gethex+0xa6>
 8009b06:	b10c      	cbz	r4, 8009b0c <__gethex+0xba>
 8009b08:	1ba4      	subs	r4, r4, r6
 8009b0a:	00a4      	lsls	r4, r4, #2
 8009b0c:	7833      	ldrb	r3, [r6, #0]
 8009b0e:	2b50      	cmp	r3, #80	; 0x50
 8009b10:	d001      	beq.n	8009b16 <__gethex+0xc4>
 8009b12:	2b70      	cmp	r3, #112	; 0x70
 8009b14:	d140      	bne.n	8009b98 <__gethex+0x146>
 8009b16:	7873      	ldrb	r3, [r6, #1]
 8009b18:	2b2b      	cmp	r3, #43	; 0x2b
 8009b1a:	d031      	beq.n	8009b80 <__gethex+0x12e>
 8009b1c:	2b2d      	cmp	r3, #45	; 0x2d
 8009b1e:	d033      	beq.n	8009b88 <__gethex+0x136>
 8009b20:	1c71      	adds	r1, r6, #1
 8009b22:	f04f 0900 	mov.w	r9, #0
 8009b26:	7808      	ldrb	r0, [r1, #0]
 8009b28:	f7ff ff7e 	bl	8009a28 <__hexdig_fun>
 8009b2c:	1e43      	subs	r3, r0, #1
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b18      	cmp	r3, #24
 8009b32:	d831      	bhi.n	8009b98 <__gethex+0x146>
 8009b34:	f1a0 0210 	sub.w	r2, r0, #16
 8009b38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b3c:	f7ff ff74 	bl	8009a28 <__hexdig_fun>
 8009b40:	1e43      	subs	r3, r0, #1
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b18      	cmp	r3, #24
 8009b46:	d922      	bls.n	8009b8e <__gethex+0x13c>
 8009b48:	f1b9 0f00 	cmp.w	r9, #0
 8009b4c:	d000      	beq.n	8009b50 <__gethex+0xfe>
 8009b4e:	4252      	negs	r2, r2
 8009b50:	4414      	add	r4, r2
 8009b52:	f8ca 1000 	str.w	r1, [sl]
 8009b56:	b30d      	cbz	r5, 8009b9c <__gethex+0x14a>
 8009b58:	f1bb 0f00 	cmp.w	fp, #0
 8009b5c:	bf0c      	ite	eq
 8009b5e:	2706      	moveq	r7, #6
 8009b60:	2700      	movne	r7, #0
 8009b62:	4638      	mov	r0, r7
 8009b64:	b00b      	add	sp, #44	; 0x2c
 8009b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6a:	f10b 0b01 	add.w	fp, fp, #1
 8009b6e:	e78a      	b.n	8009a86 <__gethex+0x34>
 8009b70:	2500      	movs	r5, #0
 8009b72:	462c      	mov	r4, r5
 8009b74:	e7ae      	b.n	8009ad4 <__gethex+0x82>
 8009b76:	463e      	mov	r6, r7
 8009b78:	2501      	movs	r5, #1
 8009b7a:	e7c7      	b.n	8009b0c <__gethex+0xba>
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	e7fb      	b.n	8009b78 <__gethex+0x126>
 8009b80:	f04f 0900 	mov.w	r9, #0
 8009b84:	1cb1      	adds	r1, r6, #2
 8009b86:	e7ce      	b.n	8009b26 <__gethex+0xd4>
 8009b88:	f04f 0901 	mov.w	r9, #1
 8009b8c:	e7fa      	b.n	8009b84 <__gethex+0x132>
 8009b8e:	230a      	movs	r3, #10
 8009b90:	fb03 0202 	mla	r2, r3, r2, r0
 8009b94:	3a10      	subs	r2, #16
 8009b96:	e7cf      	b.n	8009b38 <__gethex+0xe6>
 8009b98:	4631      	mov	r1, r6
 8009b9a:	e7da      	b.n	8009b52 <__gethex+0x100>
 8009b9c:	1bf3      	subs	r3, r6, r7
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	2b07      	cmp	r3, #7
 8009ba4:	dc49      	bgt.n	8009c3a <__gethex+0x1e8>
 8009ba6:	9802      	ldr	r0, [sp, #8]
 8009ba8:	f000 fac7 	bl	800a13a <_Balloc>
 8009bac:	9b01      	ldr	r3, [sp, #4]
 8009bae:	f100 0914 	add.w	r9, r0, #20
 8009bb2:	f04f 0b00 	mov.w	fp, #0
 8009bb6:	f1c3 0301 	rsb	r3, r3, #1
 8009bba:	4605      	mov	r5, r0
 8009bbc:	f8cd 9010 	str.w	r9, [sp, #16]
 8009bc0:	46da      	mov	sl, fp
 8009bc2:	9308      	str	r3, [sp, #32]
 8009bc4:	42b7      	cmp	r7, r6
 8009bc6:	d33b      	bcc.n	8009c40 <__gethex+0x1ee>
 8009bc8:	9804      	ldr	r0, [sp, #16]
 8009bca:	f840 ab04 	str.w	sl, [r0], #4
 8009bce:	eba0 0009 	sub.w	r0, r0, r9
 8009bd2:	1080      	asrs	r0, r0, #2
 8009bd4:	6128      	str	r0, [r5, #16]
 8009bd6:	0147      	lsls	r7, r0, #5
 8009bd8:	4650      	mov	r0, sl
 8009bda:	f000 fb72 	bl	800a2c2 <__hi0bits>
 8009bde:	f8d8 6000 	ldr.w	r6, [r8]
 8009be2:	1a3f      	subs	r7, r7, r0
 8009be4:	42b7      	cmp	r7, r6
 8009be6:	dd64      	ble.n	8009cb2 <__gethex+0x260>
 8009be8:	1bbf      	subs	r7, r7, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	4628      	mov	r0, r5
 8009bee:	f000 fe81 	bl	800a8f4 <__any_on>
 8009bf2:	4682      	mov	sl, r0
 8009bf4:	b178      	cbz	r0, 8009c16 <__gethex+0x1c4>
 8009bf6:	1e7b      	subs	r3, r7, #1
 8009bf8:	1159      	asrs	r1, r3, #5
 8009bfa:	f003 021f 	and.w	r2, r3, #31
 8009bfe:	f04f 0a01 	mov.w	sl, #1
 8009c02:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c06:	fa0a f202 	lsl.w	r2, sl, r2
 8009c0a:	420a      	tst	r2, r1
 8009c0c:	d003      	beq.n	8009c16 <__gethex+0x1c4>
 8009c0e:	4553      	cmp	r3, sl
 8009c10:	dc46      	bgt.n	8009ca0 <__gethex+0x24e>
 8009c12:	f04f 0a02 	mov.w	sl, #2
 8009c16:	4639      	mov	r1, r7
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f7ff fecb 	bl	80099b4 <rshift>
 8009c1e:	443c      	add	r4, r7
 8009c20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	da52      	bge.n	8009cce <__gethex+0x27c>
 8009c28:	4629      	mov	r1, r5
 8009c2a:	9802      	ldr	r0, [sp, #8]
 8009c2c:	f000 fab9 	bl	800a1a2 <_Bfree>
 8009c30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c32:	2300      	movs	r3, #0
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	27a3      	movs	r7, #163	; 0xa3
 8009c38:	e793      	b.n	8009b62 <__gethex+0x110>
 8009c3a:	3101      	adds	r1, #1
 8009c3c:	105b      	asrs	r3, r3, #1
 8009c3e:	e7b0      	b.n	8009ba2 <__gethex+0x150>
 8009c40:	1e73      	subs	r3, r6, #1
 8009c42:	9305      	str	r3, [sp, #20]
 8009c44:	9a07      	ldr	r2, [sp, #28]
 8009c46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d018      	beq.n	8009c80 <__gethex+0x22e>
 8009c4e:	f1bb 0f20 	cmp.w	fp, #32
 8009c52:	d107      	bne.n	8009c64 <__gethex+0x212>
 8009c54:	9b04      	ldr	r3, [sp, #16]
 8009c56:	f8c3 a000 	str.w	sl, [r3]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	f04f 0a00 	mov.w	sl, #0
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	46d3      	mov	fp, sl
 8009c64:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009c68:	f7ff fede 	bl	8009a28 <__hexdig_fun>
 8009c6c:	f000 000f 	and.w	r0, r0, #15
 8009c70:	fa00 f00b 	lsl.w	r0, r0, fp
 8009c74:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c78:	f10b 0b04 	add.w	fp, fp, #4
 8009c7c:	9b05      	ldr	r3, [sp, #20]
 8009c7e:	e00d      	b.n	8009c9c <__gethex+0x24a>
 8009c80:	9b05      	ldr	r3, [sp, #20]
 8009c82:	9a08      	ldr	r2, [sp, #32]
 8009c84:	4413      	add	r3, r2
 8009c86:	42bb      	cmp	r3, r7
 8009c88:	d3e1      	bcc.n	8009c4e <__gethex+0x1fc>
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	9a01      	ldr	r2, [sp, #4]
 8009c8e:	9903      	ldr	r1, [sp, #12]
 8009c90:	9309      	str	r3, [sp, #36]	; 0x24
 8009c92:	f001 f9ec 	bl	800b06e <strncmp>
 8009c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d1d8      	bne.n	8009c4e <__gethex+0x1fc>
 8009c9c:	461e      	mov	r6, r3
 8009c9e:	e791      	b.n	8009bc4 <__gethex+0x172>
 8009ca0:	1eb9      	subs	r1, r7, #2
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 fe26 	bl	800a8f4 <__any_on>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d0b2      	beq.n	8009c12 <__gethex+0x1c0>
 8009cac:	f04f 0a03 	mov.w	sl, #3
 8009cb0:	e7b1      	b.n	8009c16 <__gethex+0x1c4>
 8009cb2:	da09      	bge.n	8009cc8 <__gethex+0x276>
 8009cb4:	1bf7      	subs	r7, r6, r7
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	463a      	mov	r2, r7
 8009cba:	9802      	ldr	r0, [sp, #8]
 8009cbc:	f000 fc3c 	bl	800a538 <__lshift>
 8009cc0:	1be4      	subs	r4, r4, r7
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	f100 0914 	add.w	r9, r0, #20
 8009cc8:	f04f 0a00 	mov.w	sl, #0
 8009ccc:	e7a8      	b.n	8009c20 <__gethex+0x1ce>
 8009cce:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009cd2:	42a0      	cmp	r0, r4
 8009cd4:	dd6a      	ble.n	8009dac <__gethex+0x35a>
 8009cd6:	1b04      	subs	r4, r0, r4
 8009cd8:	42a6      	cmp	r6, r4
 8009cda:	dc2e      	bgt.n	8009d3a <__gethex+0x2e8>
 8009cdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d022      	beq.n	8009d2a <__gethex+0x2d8>
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d024      	beq.n	8009d32 <__gethex+0x2e0>
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d115      	bne.n	8009d18 <__gethex+0x2c6>
 8009cec:	42a6      	cmp	r6, r4
 8009cee:	d113      	bne.n	8009d18 <__gethex+0x2c6>
 8009cf0:	2e01      	cmp	r6, #1
 8009cf2:	dc0b      	bgt.n	8009d0c <__gethex+0x2ba>
 8009cf4:	9a06      	ldr	r2, [sp, #24]
 8009cf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	612b      	str	r3, [r5, #16]
 8009d00:	f8c9 3000 	str.w	r3, [r9]
 8009d04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d06:	2762      	movs	r7, #98	; 0x62
 8009d08:	601d      	str	r5, [r3, #0]
 8009d0a:	e72a      	b.n	8009b62 <__gethex+0x110>
 8009d0c:	1e71      	subs	r1, r6, #1
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f000 fdf0 	bl	800a8f4 <__any_on>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d1ed      	bne.n	8009cf4 <__gethex+0x2a2>
 8009d18:	4629      	mov	r1, r5
 8009d1a:	9802      	ldr	r0, [sp, #8]
 8009d1c:	f000 fa41 	bl	800a1a2 <_Bfree>
 8009d20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d22:	2300      	movs	r3, #0
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	2750      	movs	r7, #80	; 0x50
 8009d28:	e71b      	b.n	8009b62 <__gethex+0x110>
 8009d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0e1      	beq.n	8009cf4 <__gethex+0x2a2>
 8009d30:	e7f2      	b.n	8009d18 <__gethex+0x2c6>
 8009d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1dd      	bne.n	8009cf4 <__gethex+0x2a2>
 8009d38:	e7ee      	b.n	8009d18 <__gethex+0x2c6>
 8009d3a:	1e67      	subs	r7, r4, #1
 8009d3c:	f1ba 0f00 	cmp.w	sl, #0
 8009d40:	d131      	bne.n	8009da6 <__gethex+0x354>
 8009d42:	b127      	cbz	r7, 8009d4e <__gethex+0x2fc>
 8009d44:	4639      	mov	r1, r7
 8009d46:	4628      	mov	r0, r5
 8009d48:	f000 fdd4 	bl	800a8f4 <__any_on>
 8009d4c:	4682      	mov	sl, r0
 8009d4e:	117a      	asrs	r2, r7, #5
 8009d50:	2301      	movs	r3, #1
 8009d52:	f007 071f 	and.w	r7, r7, #31
 8009d56:	fa03 f707 	lsl.w	r7, r3, r7
 8009d5a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009d5e:	4621      	mov	r1, r4
 8009d60:	421f      	tst	r7, r3
 8009d62:	4628      	mov	r0, r5
 8009d64:	bf18      	it	ne
 8009d66:	f04a 0a02 	orrne.w	sl, sl, #2
 8009d6a:	1b36      	subs	r6, r6, r4
 8009d6c:	f7ff fe22 	bl	80099b4 <rshift>
 8009d70:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009d74:	2702      	movs	r7, #2
 8009d76:	f1ba 0f00 	cmp.w	sl, #0
 8009d7a:	d048      	beq.n	8009e0e <__gethex+0x3bc>
 8009d7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d015      	beq.n	8009db0 <__gethex+0x35e>
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d017      	beq.n	8009db8 <__gethex+0x366>
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d109      	bne.n	8009da0 <__gethex+0x34e>
 8009d8c:	f01a 0f02 	tst.w	sl, #2
 8009d90:	d006      	beq.n	8009da0 <__gethex+0x34e>
 8009d92:	f8d9 3000 	ldr.w	r3, [r9]
 8009d96:	ea4a 0a03 	orr.w	sl, sl, r3
 8009d9a:	f01a 0f01 	tst.w	sl, #1
 8009d9e:	d10e      	bne.n	8009dbe <__gethex+0x36c>
 8009da0:	f047 0710 	orr.w	r7, r7, #16
 8009da4:	e033      	b.n	8009e0e <__gethex+0x3bc>
 8009da6:	f04f 0a01 	mov.w	sl, #1
 8009daa:	e7d0      	b.n	8009d4e <__gethex+0x2fc>
 8009dac:	2701      	movs	r7, #1
 8009dae:	e7e2      	b.n	8009d76 <__gethex+0x324>
 8009db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db2:	f1c3 0301 	rsb	r3, r3, #1
 8009db6:	9315      	str	r3, [sp, #84]	; 0x54
 8009db8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0f0      	beq.n	8009da0 <__gethex+0x34e>
 8009dbe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009dc2:	f105 0314 	add.w	r3, r5, #20
 8009dc6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009dca:	eb03 010a 	add.w	r1, r3, sl
 8009dce:	f04f 0c00 	mov.w	ip, #0
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ddc:	d01c      	beq.n	8009e18 <__gethex+0x3c6>
 8009dde:	3201      	adds	r2, #1
 8009de0:	6002      	str	r2, [r0, #0]
 8009de2:	2f02      	cmp	r7, #2
 8009de4:	f105 0314 	add.w	r3, r5, #20
 8009de8:	d138      	bne.n	8009e5c <__gethex+0x40a>
 8009dea:	f8d8 2000 	ldr.w	r2, [r8]
 8009dee:	3a01      	subs	r2, #1
 8009df0:	42b2      	cmp	r2, r6
 8009df2:	d10a      	bne.n	8009e0a <__gethex+0x3b8>
 8009df4:	1171      	asrs	r1, r6, #5
 8009df6:	2201      	movs	r2, #1
 8009df8:	f006 061f 	and.w	r6, r6, #31
 8009dfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e00:	fa02 f606 	lsl.w	r6, r2, r6
 8009e04:	421e      	tst	r6, r3
 8009e06:	bf18      	it	ne
 8009e08:	4617      	movne	r7, r2
 8009e0a:	f047 0720 	orr.w	r7, r7, #32
 8009e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e10:	601d      	str	r5, [r3, #0]
 8009e12:	9b06      	ldr	r3, [sp, #24]
 8009e14:	601c      	str	r4, [r3, #0]
 8009e16:	e6a4      	b.n	8009b62 <__gethex+0x110>
 8009e18:	4299      	cmp	r1, r3
 8009e1a:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e1e:	d8d8      	bhi.n	8009dd2 <__gethex+0x380>
 8009e20:	68ab      	ldr	r3, [r5, #8]
 8009e22:	4599      	cmp	r9, r3
 8009e24:	db12      	blt.n	8009e4c <__gethex+0x3fa>
 8009e26:	6869      	ldr	r1, [r5, #4]
 8009e28:	9802      	ldr	r0, [sp, #8]
 8009e2a:	3101      	adds	r1, #1
 8009e2c:	f000 f985 	bl	800a13a <_Balloc>
 8009e30:	692a      	ldr	r2, [r5, #16]
 8009e32:	3202      	adds	r2, #2
 8009e34:	f105 010c 	add.w	r1, r5, #12
 8009e38:	4683      	mov	fp, r0
 8009e3a:	0092      	lsls	r2, r2, #2
 8009e3c:	300c      	adds	r0, #12
 8009e3e:	f000 f971 	bl	800a124 <memcpy>
 8009e42:	4629      	mov	r1, r5
 8009e44:	9802      	ldr	r0, [sp, #8]
 8009e46:	f000 f9ac 	bl	800a1a2 <_Bfree>
 8009e4a:	465d      	mov	r5, fp
 8009e4c:	692b      	ldr	r3, [r5, #16]
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009e54:	612a      	str	r2, [r5, #16]
 8009e56:	2201      	movs	r2, #1
 8009e58:	615a      	str	r2, [r3, #20]
 8009e5a:	e7c2      	b.n	8009de2 <__gethex+0x390>
 8009e5c:	692a      	ldr	r2, [r5, #16]
 8009e5e:	454a      	cmp	r2, r9
 8009e60:	dd0b      	ble.n	8009e7a <__gethex+0x428>
 8009e62:	2101      	movs	r1, #1
 8009e64:	4628      	mov	r0, r5
 8009e66:	f7ff fda5 	bl	80099b4 <rshift>
 8009e6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e6e:	3401      	adds	r4, #1
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	f6ff aed9 	blt.w	8009c28 <__gethex+0x1d6>
 8009e76:	2701      	movs	r7, #1
 8009e78:	e7c7      	b.n	8009e0a <__gethex+0x3b8>
 8009e7a:	f016 061f 	ands.w	r6, r6, #31
 8009e7e:	d0fa      	beq.n	8009e76 <__gethex+0x424>
 8009e80:	449a      	add	sl, r3
 8009e82:	f1c6 0620 	rsb	r6, r6, #32
 8009e86:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009e8a:	f000 fa1a 	bl	800a2c2 <__hi0bits>
 8009e8e:	42b0      	cmp	r0, r6
 8009e90:	dbe7      	blt.n	8009e62 <__gethex+0x410>
 8009e92:	e7f0      	b.n	8009e76 <__gethex+0x424>

08009e94 <L_shift>:
 8009e94:	f1c2 0208 	rsb	r2, r2, #8
 8009e98:	0092      	lsls	r2, r2, #2
 8009e9a:	b570      	push	{r4, r5, r6, lr}
 8009e9c:	f1c2 0620 	rsb	r6, r2, #32
 8009ea0:	6843      	ldr	r3, [r0, #4]
 8009ea2:	6804      	ldr	r4, [r0, #0]
 8009ea4:	fa03 f506 	lsl.w	r5, r3, r6
 8009ea8:	432c      	orrs	r4, r5
 8009eaa:	40d3      	lsrs	r3, r2
 8009eac:	6004      	str	r4, [r0, #0]
 8009eae:	f840 3f04 	str.w	r3, [r0, #4]!
 8009eb2:	4288      	cmp	r0, r1
 8009eb4:	d3f4      	bcc.n	8009ea0 <L_shift+0xc>
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}

08009eb8 <__match>:
 8009eb8:	b530      	push	{r4, r5, lr}
 8009eba:	6803      	ldr	r3, [r0, #0]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ec2:	b914      	cbnz	r4, 8009eca <__match+0x12>
 8009ec4:	6003      	str	r3, [r0, #0]
 8009ec6:	2001      	movs	r0, #1
 8009ec8:	bd30      	pop	{r4, r5, pc}
 8009eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ece:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009ed2:	2d19      	cmp	r5, #25
 8009ed4:	bf98      	it	ls
 8009ed6:	3220      	addls	r2, #32
 8009ed8:	42a2      	cmp	r2, r4
 8009eda:	d0f0      	beq.n	8009ebe <__match+0x6>
 8009edc:	2000      	movs	r0, #0
 8009ede:	e7f3      	b.n	8009ec8 <__match+0x10>

08009ee0 <__hexnan>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	680b      	ldr	r3, [r1, #0]
 8009ee6:	6801      	ldr	r1, [r0, #0]
 8009ee8:	115f      	asrs	r7, r3, #5
 8009eea:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009eee:	f013 031f 	ands.w	r3, r3, #31
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	bf18      	it	ne
 8009ef6:	3704      	addne	r7, #4
 8009ef8:	2500      	movs	r5, #0
 8009efa:	1f3e      	subs	r6, r7, #4
 8009efc:	4682      	mov	sl, r0
 8009efe:	4690      	mov	r8, r2
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	f847 5c04 	str.w	r5, [r7, #-4]
 8009f06:	46b1      	mov	r9, r6
 8009f08:	4634      	mov	r4, r6
 8009f0a:	9502      	str	r5, [sp, #8]
 8009f0c:	46ab      	mov	fp, r5
 8009f0e:	784a      	ldrb	r2, [r1, #1]
 8009f10:	1c4b      	adds	r3, r1, #1
 8009f12:	9303      	str	r3, [sp, #12]
 8009f14:	b342      	cbz	r2, 8009f68 <__hexnan+0x88>
 8009f16:	4610      	mov	r0, r2
 8009f18:	9105      	str	r1, [sp, #20]
 8009f1a:	9204      	str	r2, [sp, #16]
 8009f1c:	f7ff fd84 	bl	8009a28 <__hexdig_fun>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d143      	bne.n	8009fac <__hexnan+0xcc>
 8009f24:	9a04      	ldr	r2, [sp, #16]
 8009f26:	9905      	ldr	r1, [sp, #20]
 8009f28:	2a20      	cmp	r2, #32
 8009f2a:	d818      	bhi.n	8009f5e <__hexnan+0x7e>
 8009f2c:	9b02      	ldr	r3, [sp, #8]
 8009f2e:	459b      	cmp	fp, r3
 8009f30:	dd13      	ble.n	8009f5a <__hexnan+0x7a>
 8009f32:	454c      	cmp	r4, r9
 8009f34:	d206      	bcs.n	8009f44 <__hexnan+0x64>
 8009f36:	2d07      	cmp	r5, #7
 8009f38:	dc04      	bgt.n	8009f44 <__hexnan+0x64>
 8009f3a:	462a      	mov	r2, r5
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f7ff ffa8 	bl	8009e94 <L_shift>
 8009f44:	4544      	cmp	r4, r8
 8009f46:	d944      	bls.n	8009fd2 <__hexnan+0xf2>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f1a4 0904 	sub.w	r9, r4, #4
 8009f4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f52:	f8cd b008 	str.w	fp, [sp, #8]
 8009f56:	464c      	mov	r4, r9
 8009f58:	461d      	mov	r5, r3
 8009f5a:	9903      	ldr	r1, [sp, #12]
 8009f5c:	e7d7      	b.n	8009f0e <__hexnan+0x2e>
 8009f5e:	2a29      	cmp	r2, #41	; 0x29
 8009f60:	d14a      	bne.n	8009ff8 <__hexnan+0x118>
 8009f62:	3102      	adds	r1, #2
 8009f64:	f8ca 1000 	str.w	r1, [sl]
 8009f68:	f1bb 0f00 	cmp.w	fp, #0
 8009f6c:	d044      	beq.n	8009ff8 <__hexnan+0x118>
 8009f6e:	454c      	cmp	r4, r9
 8009f70:	d206      	bcs.n	8009f80 <__hexnan+0xa0>
 8009f72:	2d07      	cmp	r5, #7
 8009f74:	dc04      	bgt.n	8009f80 <__hexnan+0xa0>
 8009f76:	462a      	mov	r2, r5
 8009f78:	4649      	mov	r1, r9
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7ff ff8a 	bl	8009e94 <L_shift>
 8009f80:	4544      	cmp	r4, r8
 8009f82:	d928      	bls.n	8009fd6 <__hexnan+0xf6>
 8009f84:	4643      	mov	r3, r8
 8009f86:	f854 2b04 	ldr.w	r2, [r4], #4
 8009f8a:	f843 2b04 	str.w	r2, [r3], #4
 8009f8e:	42a6      	cmp	r6, r4
 8009f90:	d2f9      	bcs.n	8009f86 <__hexnan+0xa6>
 8009f92:	2200      	movs	r2, #0
 8009f94:	f843 2b04 	str.w	r2, [r3], #4
 8009f98:	429e      	cmp	r6, r3
 8009f9a:	d2fb      	bcs.n	8009f94 <__hexnan+0xb4>
 8009f9c:	6833      	ldr	r3, [r6, #0]
 8009f9e:	b91b      	cbnz	r3, 8009fa8 <__hexnan+0xc8>
 8009fa0:	4546      	cmp	r6, r8
 8009fa2:	d127      	bne.n	8009ff4 <__hexnan+0x114>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	6033      	str	r3, [r6, #0]
 8009fa8:	2005      	movs	r0, #5
 8009faa:	e026      	b.n	8009ffa <__hexnan+0x11a>
 8009fac:	3501      	adds	r5, #1
 8009fae:	2d08      	cmp	r5, #8
 8009fb0:	f10b 0b01 	add.w	fp, fp, #1
 8009fb4:	dd06      	ble.n	8009fc4 <__hexnan+0xe4>
 8009fb6:	4544      	cmp	r4, r8
 8009fb8:	d9cf      	bls.n	8009f5a <__hexnan+0x7a>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fc0:	2501      	movs	r5, #1
 8009fc2:	3c04      	subs	r4, #4
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	f000 000f 	and.w	r0, r0, #15
 8009fca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009fce:	6020      	str	r0, [r4, #0]
 8009fd0:	e7c3      	b.n	8009f5a <__hexnan+0x7a>
 8009fd2:	2508      	movs	r5, #8
 8009fd4:	e7c1      	b.n	8009f5a <__hexnan+0x7a>
 8009fd6:	9b01      	ldr	r3, [sp, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d0df      	beq.n	8009f9c <__hexnan+0xbc>
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	f1c3 0320 	rsb	r3, r3, #32
 8009fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009fec:	401a      	ands	r2, r3
 8009fee:	f847 2c04 	str.w	r2, [r7, #-4]
 8009ff2:	e7d3      	b.n	8009f9c <__hexnan+0xbc>
 8009ff4:	3e04      	subs	r6, #4
 8009ff6:	e7d1      	b.n	8009f9c <__hexnan+0xbc>
 8009ff8:	2004      	movs	r0, #4
 8009ffa:	b007      	add	sp, #28
 8009ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a000 <__locale_ctype_ptr_l>:
 800a000:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a004:	4770      	bx	lr

0800a006 <__localeconv_l>:
 800a006:	30f0      	adds	r0, #240	; 0xf0
 800a008:	4770      	bx	lr
	...

0800a00c <_localeconv_r>:
 800a00c:	4b04      	ldr	r3, [pc, #16]	; (800a020 <_localeconv_r+0x14>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6a18      	ldr	r0, [r3, #32]
 800a012:	4b04      	ldr	r3, [pc, #16]	; (800a024 <_localeconv_r+0x18>)
 800a014:	2800      	cmp	r0, #0
 800a016:	bf08      	it	eq
 800a018:	4618      	moveq	r0, r3
 800a01a:	30f0      	adds	r0, #240	; 0xf0
 800a01c:	4770      	bx	lr
 800a01e:	bf00      	nop
 800a020:	2000000c 	.word	0x2000000c
 800a024:	20000070 	.word	0x20000070

0800a028 <__swhatbuf_r>:
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	460e      	mov	r6, r1
 800a02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a030:	2900      	cmp	r1, #0
 800a032:	b096      	sub	sp, #88	; 0x58
 800a034:	4614      	mov	r4, r2
 800a036:	461d      	mov	r5, r3
 800a038:	da07      	bge.n	800a04a <__swhatbuf_r+0x22>
 800a03a:	2300      	movs	r3, #0
 800a03c:	602b      	str	r3, [r5, #0]
 800a03e:	89b3      	ldrh	r3, [r6, #12]
 800a040:	061a      	lsls	r2, r3, #24
 800a042:	d410      	bmi.n	800a066 <__swhatbuf_r+0x3e>
 800a044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a048:	e00e      	b.n	800a068 <__swhatbuf_r+0x40>
 800a04a:	466a      	mov	r2, sp
 800a04c:	f001 f850 	bl	800b0f0 <_fstat_r>
 800a050:	2800      	cmp	r0, #0
 800a052:	dbf2      	blt.n	800a03a <__swhatbuf_r+0x12>
 800a054:	9a01      	ldr	r2, [sp, #4]
 800a056:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a05a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a05e:	425a      	negs	r2, r3
 800a060:	415a      	adcs	r2, r3
 800a062:	602a      	str	r2, [r5, #0]
 800a064:	e7ee      	b.n	800a044 <__swhatbuf_r+0x1c>
 800a066:	2340      	movs	r3, #64	; 0x40
 800a068:	2000      	movs	r0, #0
 800a06a:	6023      	str	r3, [r4, #0]
 800a06c:	b016      	add	sp, #88	; 0x58
 800a06e:	bd70      	pop	{r4, r5, r6, pc}

0800a070 <__smakebuf_r>:
 800a070:	898b      	ldrh	r3, [r1, #12]
 800a072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a074:	079d      	lsls	r5, r3, #30
 800a076:	4606      	mov	r6, r0
 800a078:	460c      	mov	r4, r1
 800a07a:	d507      	bpl.n	800a08c <__smakebuf_r+0x1c>
 800a07c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	6123      	str	r3, [r4, #16]
 800a084:	2301      	movs	r3, #1
 800a086:	6163      	str	r3, [r4, #20]
 800a088:	b002      	add	sp, #8
 800a08a:	bd70      	pop	{r4, r5, r6, pc}
 800a08c:	ab01      	add	r3, sp, #4
 800a08e:	466a      	mov	r2, sp
 800a090:	f7ff ffca 	bl	800a028 <__swhatbuf_r>
 800a094:	9900      	ldr	r1, [sp, #0]
 800a096:	4605      	mov	r5, r0
 800a098:	4630      	mov	r0, r6
 800a09a:	f000 fca9 	bl	800a9f0 <_malloc_r>
 800a09e:	b948      	cbnz	r0, 800a0b4 <__smakebuf_r+0x44>
 800a0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a4:	059a      	lsls	r2, r3, #22
 800a0a6:	d4ef      	bmi.n	800a088 <__smakebuf_r+0x18>
 800a0a8:	f023 0303 	bic.w	r3, r3, #3
 800a0ac:	f043 0302 	orr.w	r3, r3, #2
 800a0b0:	81a3      	strh	r3, [r4, #12]
 800a0b2:	e7e3      	b.n	800a07c <__smakebuf_r+0xc>
 800a0b4:	4b0d      	ldr	r3, [pc, #52]	; (800a0ec <__smakebuf_r+0x7c>)
 800a0b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	6020      	str	r0, [r4, #0]
 800a0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	9b00      	ldr	r3, [sp, #0]
 800a0c4:	6163      	str	r3, [r4, #20]
 800a0c6:	9b01      	ldr	r3, [sp, #4]
 800a0c8:	6120      	str	r0, [r4, #16]
 800a0ca:	b15b      	cbz	r3, 800a0e4 <__smakebuf_r+0x74>
 800a0cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f001 f81f 	bl	800b114 <_isatty_r>
 800a0d6:	b128      	cbz	r0, 800a0e4 <__smakebuf_r+0x74>
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	f023 0303 	bic.w	r3, r3, #3
 800a0de:	f043 0301 	orr.w	r3, r3, #1
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	431d      	orrs	r5, r3
 800a0e8:	81a5      	strh	r5, [r4, #12]
 800a0ea:	e7cd      	b.n	800a088 <__smakebuf_r+0x18>
 800a0ec:	08009869 	.word	0x08009869

0800a0f0 <malloc>:
 800a0f0:	4b02      	ldr	r3, [pc, #8]	; (800a0fc <malloc+0xc>)
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	f000 bc7b 	b.w	800a9f0 <_malloc_r>
 800a0fa:	bf00      	nop
 800a0fc:	2000000c 	.word	0x2000000c

0800a100 <__ascii_mbtowc>:
 800a100:	b082      	sub	sp, #8
 800a102:	b901      	cbnz	r1, 800a106 <__ascii_mbtowc+0x6>
 800a104:	a901      	add	r1, sp, #4
 800a106:	b142      	cbz	r2, 800a11a <__ascii_mbtowc+0x1a>
 800a108:	b14b      	cbz	r3, 800a11e <__ascii_mbtowc+0x1e>
 800a10a:	7813      	ldrb	r3, [r2, #0]
 800a10c:	600b      	str	r3, [r1, #0]
 800a10e:	7812      	ldrb	r2, [r2, #0]
 800a110:	1c10      	adds	r0, r2, #0
 800a112:	bf18      	it	ne
 800a114:	2001      	movne	r0, #1
 800a116:	b002      	add	sp, #8
 800a118:	4770      	bx	lr
 800a11a:	4610      	mov	r0, r2
 800a11c:	e7fb      	b.n	800a116 <__ascii_mbtowc+0x16>
 800a11e:	f06f 0001 	mvn.w	r0, #1
 800a122:	e7f8      	b.n	800a116 <__ascii_mbtowc+0x16>

0800a124 <memcpy>:
 800a124:	b510      	push	{r4, lr}
 800a126:	1e43      	subs	r3, r0, #1
 800a128:	440a      	add	r2, r1
 800a12a:	4291      	cmp	r1, r2
 800a12c:	d100      	bne.n	800a130 <memcpy+0xc>
 800a12e:	bd10      	pop	{r4, pc}
 800a130:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a134:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a138:	e7f7      	b.n	800a12a <memcpy+0x6>

0800a13a <_Balloc>:
 800a13a:	b570      	push	{r4, r5, r6, lr}
 800a13c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a13e:	4604      	mov	r4, r0
 800a140:	460e      	mov	r6, r1
 800a142:	b93d      	cbnz	r5, 800a154 <_Balloc+0x1a>
 800a144:	2010      	movs	r0, #16
 800a146:	f7ff ffd3 	bl	800a0f0 <malloc>
 800a14a:	6260      	str	r0, [r4, #36]	; 0x24
 800a14c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a150:	6005      	str	r5, [r0, #0]
 800a152:	60c5      	str	r5, [r0, #12]
 800a154:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a156:	68eb      	ldr	r3, [r5, #12]
 800a158:	b183      	cbz	r3, 800a17c <_Balloc+0x42>
 800a15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a162:	b9b8      	cbnz	r0, 800a194 <_Balloc+0x5a>
 800a164:	2101      	movs	r1, #1
 800a166:	fa01 f506 	lsl.w	r5, r1, r6
 800a16a:	1d6a      	adds	r2, r5, #5
 800a16c:	0092      	lsls	r2, r2, #2
 800a16e:	4620      	mov	r0, r4
 800a170:	f000 fbe1 	bl	800a936 <_calloc_r>
 800a174:	b160      	cbz	r0, 800a190 <_Balloc+0x56>
 800a176:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a17a:	e00e      	b.n	800a19a <_Balloc+0x60>
 800a17c:	2221      	movs	r2, #33	; 0x21
 800a17e:	2104      	movs	r1, #4
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fbd8 	bl	800a936 <_calloc_r>
 800a186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a188:	60e8      	str	r0, [r5, #12]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1e4      	bne.n	800a15a <_Balloc+0x20>
 800a190:	2000      	movs	r0, #0
 800a192:	bd70      	pop	{r4, r5, r6, pc}
 800a194:	6802      	ldr	r2, [r0, #0]
 800a196:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a19a:	2300      	movs	r3, #0
 800a19c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1a0:	e7f7      	b.n	800a192 <_Balloc+0x58>

0800a1a2 <_Bfree>:
 800a1a2:	b570      	push	{r4, r5, r6, lr}
 800a1a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460d      	mov	r5, r1
 800a1aa:	b93c      	cbnz	r4, 800a1bc <_Bfree+0x1a>
 800a1ac:	2010      	movs	r0, #16
 800a1ae:	f7ff ff9f 	bl	800a0f0 <malloc>
 800a1b2:	6270      	str	r0, [r6, #36]	; 0x24
 800a1b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1b8:	6004      	str	r4, [r0, #0]
 800a1ba:	60c4      	str	r4, [r0, #12]
 800a1bc:	b13d      	cbz	r5, 800a1ce <_Bfree+0x2c>
 800a1be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a1c0:	686a      	ldr	r2, [r5, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1c8:	6029      	str	r1, [r5, #0]
 800a1ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}

0800a1d0 <__multadd>:
 800a1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d4:	690d      	ldr	r5, [r1, #16]
 800a1d6:	461f      	mov	r7, r3
 800a1d8:	4606      	mov	r6, r0
 800a1da:	460c      	mov	r4, r1
 800a1dc:	f101 0c14 	add.w	ip, r1, #20
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f8dc 0000 	ldr.w	r0, [ip]
 800a1e6:	b281      	uxth	r1, r0
 800a1e8:	fb02 7101 	mla	r1, r2, r1, r7
 800a1ec:	0c0f      	lsrs	r7, r1, #16
 800a1ee:	0c00      	lsrs	r0, r0, #16
 800a1f0:	fb02 7000 	mla	r0, r2, r0, r7
 800a1f4:	b289      	uxth	r1, r1
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a1fc:	429d      	cmp	r5, r3
 800a1fe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a202:	f84c 1b04 	str.w	r1, [ip], #4
 800a206:	dcec      	bgt.n	800a1e2 <__multadd+0x12>
 800a208:	b1d7      	cbz	r7, 800a240 <__multadd+0x70>
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	42ab      	cmp	r3, r5
 800a20e:	dc12      	bgt.n	800a236 <__multadd+0x66>
 800a210:	6861      	ldr	r1, [r4, #4]
 800a212:	4630      	mov	r0, r6
 800a214:	3101      	adds	r1, #1
 800a216:	f7ff ff90 	bl	800a13a <_Balloc>
 800a21a:	6922      	ldr	r2, [r4, #16]
 800a21c:	3202      	adds	r2, #2
 800a21e:	f104 010c 	add.w	r1, r4, #12
 800a222:	4680      	mov	r8, r0
 800a224:	0092      	lsls	r2, r2, #2
 800a226:	300c      	adds	r0, #12
 800a228:	f7ff ff7c 	bl	800a124 <memcpy>
 800a22c:	4621      	mov	r1, r4
 800a22e:	4630      	mov	r0, r6
 800a230:	f7ff ffb7 	bl	800a1a2 <_Bfree>
 800a234:	4644      	mov	r4, r8
 800a236:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a23a:	3501      	adds	r5, #1
 800a23c:	615f      	str	r7, [r3, #20]
 800a23e:	6125      	str	r5, [r4, #16]
 800a240:	4620      	mov	r0, r4
 800a242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a246 <__s2b>:
 800a246:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a24a:	460c      	mov	r4, r1
 800a24c:	4615      	mov	r5, r2
 800a24e:	461f      	mov	r7, r3
 800a250:	2209      	movs	r2, #9
 800a252:	3308      	adds	r3, #8
 800a254:	4606      	mov	r6, r0
 800a256:	fb93 f3f2 	sdiv	r3, r3, r2
 800a25a:	2100      	movs	r1, #0
 800a25c:	2201      	movs	r2, #1
 800a25e:	429a      	cmp	r2, r3
 800a260:	db20      	blt.n	800a2a4 <__s2b+0x5e>
 800a262:	4630      	mov	r0, r6
 800a264:	f7ff ff69 	bl	800a13a <_Balloc>
 800a268:	9b08      	ldr	r3, [sp, #32]
 800a26a:	6143      	str	r3, [r0, #20]
 800a26c:	2d09      	cmp	r5, #9
 800a26e:	f04f 0301 	mov.w	r3, #1
 800a272:	6103      	str	r3, [r0, #16]
 800a274:	dd19      	ble.n	800a2aa <__s2b+0x64>
 800a276:	f104 0809 	add.w	r8, r4, #9
 800a27a:	46c1      	mov	r9, r8
 800a27c:	442c      	add	r4, r5
 800a27e:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a282:	4601      	mov	r1, r0
 800a284:	3b30      	subs	r3, #48	; 0x30
 800a286:	220a      	movs	r2, #10
 800a288:	4630      	mov	r0, r6
 800a28a:	f7ff ffa1 	bl	800a1d0 <__multadd>
 800a28e:	45a1      	cmp	r9, r4
 800a290:	d1f5      	bne.n	800a27e <__s2b+0x38>
 800a292:	eb08 0405 	add.w	r4, r8, r5
 800a296:	3c08      	subs	r4, #8
 800a298:	1b2d      	subs	r5, r5, r4
 800a29a:	1963      	adds	r3, r4, r5
 800a29c:	42bb      	cmp	r3, r7
 800a29e:	db07      	blt.n	800a2b0 <__s2b+0x6a>
 800a2a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a4:	0052      	lsls	r2, r2, #1
 800a2a6:	3101      	adds	r1, #1
 800a2a8:	e7d9      	b.n	800a25e <__s2b+0x18>
 800a2aa:	340a      	adds	r4, #10
 800a2ac:	2509      	movs	r5, #9
 800a2ae:	e7f3      	b.n	800a298 <__s2b+0x52>
 800a2b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	3b30      	subs	r3, #48	; 0x30
 800a2b8:	220a      	movs	r2, #10
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ff88 	bl	800a1d0 <__multadd>
 800a2c0:	e7eb      	b.n	800a29a <__s2b+0x54>

0800a2c2 <__hi0bits>:
 800a2c2:	0c02      	lsrs	r2, r0, #16
 800a2c4:	0412      	lsls	r2, r2, #16
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	b9b2      	cbnz	r2, 800a2f8 <__hi0bits+0x36>
 800a2ca:	0403      	lsls	r3, r0, #16
 800a2cc:	2010      	movs	r0, #16
 800a2ce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a2d2:	bf04      	itt	eq
 800a2d4:	021b      	lsleq	r3, r3, #8
 800a2d6:	3008      	addeq	r0, #8
 800a2d8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a2dc:	bf04      	itt	eq
 800a2de:	011b      	lsleq	r3, r3, #4
 800a2e0:	3004      	addeq	r0, #4
 800a2e2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a2e6:	bf04      	itt	eq
 800a2e8:	009b      	lsleq	r3, r3, #2
 800a2ea:	3002      	addeq	r0, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	db06      	blt.n	800a2fe <__hi0bits+0x3c>
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	d503      	bpl.n	800a2fc <__hi0bits+0x3a>
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	4770      	bx	lr
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	e7e8      	b.n	800a2ce <__hi0bits+0xc>
 800a2fc:	2020      	movs	r0, #32
 800a2fe:	4770      	bx	lr

0800a300 <__lo0bits>:
 800a300:	6803      	ldr	r3, [r0, #0]
 800a302:	f013 0207 	ands.w	r2, r3, #7
 800a306:	4601      	mov	r1, r0
 800a308:	d00b      	beq.n	800a322 <__lo0bits+0x22>
 800a30a:	07da      	lsls	r2, r3, #31
 800a30c:	d423      	bmi.n	800a356 <__lo0bits+0x56>
 800a30e:	0798      	lsls	r0, r3, #30
 800a310:	bf49      	itett	mi
 800a312:	085b      	lsrmi	r3, r3, #1
 800a314:	089b      	lsrpl	r3, r3, #2
 800a316:	2001      	movmi	r0, #1
 800a318:	600b      	strmi	r3, [r1, #0]
 800a31a:	bf5c      	itt	pl
 800a31c:	600b      	strpl	r3, [r1, #0]
 800a31e:	2002      	movpl	r0, #2
 800a320:	4770      	bx	lr
 800a322:	b298      	uxth	r0, r3
 800a324:	b9a8      	cbnz	r0, 800a352 <__lo0bits+0x52>
 800a326:	0c1b      	lsrs	r3, r3, #16
 800a328:	2010      	movs	r0, #16
 800a32a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a32e:	bf04      	itt	eq
 800a330:	0a1b      	lsreq	r3, r3, #8
 800a332:	3008      	addeq	r0, #8
 800a334:	071a      	lsls	r2, r3, #28
 800a336:	bf04      	itt	eq
 800a338:	091b      	lsreq	r3, r3, #4
 800a33a:	3004      	addeq	r0, #4
 800a33c:	079a      	lsls	r2, r3, #30
 800a33e:	bf04      	itt	eq
 800a340:	089b      	lsreq	r3, r3, #2
 800a342:	3002      	addeq	r0, #2
 800a344:	07da      	lsls	r2, r3, #31
 800a346:	d402      	bmi.n	800a34e <__lo0bits+0x4e>
 800a348:	085b      	lsrs	r3, r3, #1
 800a34a:	d006      	beq.n	800a35a <__lo0bits+0x5a>
 800a34c:	3001      	adds	r0, #1
 800a34e:	600b      	str	r3, [r1, #0]
 800a350:	4770      	bx	lr
 800a352:	4610      	mov	r0, r2
 800a354:	e7e9      	b.n	800a32a <__lo0bits+0x2a>
 800a356:	2000      	movs	r0, #0
 800a358:	4770      	bx	lr
 800a35a:	2020      	movs	r0, #32
 800a35c:	4770      	bx	lr

0800a35e <__i2b>:
 800a35e:	b510      	push	{r4, lr}
 800a360:	460c      	mov	r4, r1
 800a362:	2101      	movs	r1, #1
 800a364:	f7ff fee9 	bl	800a13a <_Balloc>
 800a368:	2201      	movs	r2, #1
 800a36a:	6144      	str	r4, [r0, #20]
 800a36c:	6102      	str	r2, [r0, #16]
 800a36e:	bd10      	pop	{r4, pc}

0800a370 <__multiply>:
 800a370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	4614      	mov	r4, r2
 800a376:	690a      	ldr	r2, [r1, #16]
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	bfb8      	it	lt
 800a37e:	460b      	movlt	r3, r1
 800a380:	4688      	mov	r8, r1
 800a382:	bfbc      	itt	lt
 800a384:	46a0      	movlt	r8, r4
 800a386:	461c      	movlt	r4, r3
 800a388:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a38c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a390:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a394:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a398:	eb07 0609 	add.w	r6, r7, r9
 800a39c:	42b3      	cmp	r3, r6
 800a39e:	bfb8      	it	lt
 800a3a0:	3101      	addlt	r1, #1
 800a3a2:	f7ff feca 	bl	800a13a <_Balloc>
 800a3a6:	f100 0514 	add.w	r5, r0, #20
 800a3aa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a3ae:	462b      	mov	r3, r5
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4573      	cmp	r3, lr
 800a3b4:	d316      	bcc.n	800a3e4 <__multiply+0x74>
 800a3b6:	f104 0214 	add.w	r2, r4, #20
 800a3ba:	f108 0114 	add.w	r1, r8, #20
 800a3be:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a3c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	9b00      	ldr	r3, [sp, #0]
 800a3ca:	9201      	str	r2, [sp, #4]
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d80c      	bhi.n	800a3ea <__multiply+0x7a>
 800a3d0:	2e00      	cmp	r6, #0
 800a3d2:	dd03      	ble.n	800a3dc <__multiply+0x6c>
 800a3d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d05d      	beq.n	800a498 <__multiply+0x128>
 800a3dc:	6106      	str	r6, [r0, #16]
 800a3de:	b003      	add	sp, #12
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	f843 2b04 	str.w	r2, [r3], #4
 800a3e8:	e7e3      	b.n	800a3b2 <__multiply+0x42>
 800a3ea:	f8b2 b000 	ldrh.w	fp, [r2]
 800a3ee:	f1bb 0f00 	cmp.w	fp, #0
 800a3f2:	d023      	beq.n	800a43c <__multiply+0xcc>
 800a3f4:	4689      	mov	r9, r1
 800a3f6:	46ac      	mov	ip, r5
 800a3f8:	f04f 0800 	mov.w	r8, #0
 800a3fc:	f859 4b04 	ldr.w	r4, [r9], #4
 800a400:	f8dc a000 	ldr.w	sl, [ip]
 800a404:	b2a3      	uxth	r3, r4
 800a406:	fa1f fa8a 	uxth.w	sl, sl
 800a40a:	fb0b a303 	mla	r3, fp, r3, sl
 800a40e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a412:	f8dc 4000 	ldr.w	r4, [ip]
 800a416:	4443      	add	r3, r8
 800a418:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a41c:	fb0b 840a 	mla	r4, fp, sl, r8
 800a420:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a424:	46e2      	mov	sl, ip
 800a426:	b29b      	uxth	r3, r3
 800a428:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a42c:	454f      	cmp	r7, r9
 800a42e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a432:	f84a 3b04 	str.w	r3, [sl], #4
 800a436:	d82b      	bhi.n	800a490 <__multiply+0x120>
 800a438:	f8cc 8004 	str.w	r8, [ip, #4]
 800a43c:	9b01      	ldr	r3, [sp, #4]
 800a43e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a442:	3204      	adds	r2, #4
 800a444:	f1ba 0f00 	cmp.w	sl, #0
 800a448:	d020      	beq.n	800a48c <__multiply+0x11c>
 800a44a:	682b      	ldr	r3, [r5, #0]
 800a44c:	4689      	mov	r9, r1
 800a44e:	46a8      	mov	r8, r5
 800a450:	f04f 0b00 	mov.w	fp, #0
 800a454:	f8b9 c000 	ldrh.w	ip, [r9]
 800a458:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a45c:	fb0a 440c 	mla	r4, sl, ip, r4
 800a460:	445c      	add	r4, fp
 800a462:	46c4      	mov	ip, r8
 800a464:	b29b      	uxth	r3, r3
 800a466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a46a:	f84c 3b04 	str.w	r3, [ip], #4
 800a46e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a472:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a476:	0c1b      	lsrs	r3, r3, #16
 800a478:	fb0a b303 	mla	r3, sl, r3, fp
 800a47c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a480:	454f      	cmp	r7, r9
 800a482:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a486:	d805      	bhi.n	800a494 <__multiply+0x124>
 800a488:	f8c8 3004 	str.w	r3, [r8, #4]
 800a48c:	3504      	adds	r5, #4
 800a48e:	e79b      	b.n	800a3c8 <__multiply+0x58>
 800a490:	46d4      	mov	ip, sl
 800a492:	e7b3      	b.n	800a3fc <__multiply+0x8c>
 800a494:	46e0      	mov	r8, ip
 800a496:	e7dd      	b.n	800a454 <__multiply+0xe4>
 800a498:	3e01      	subs	r6, #1
 800a49a:	e799      	b.n	800a3d0 <__multiply+0x60>

0800a49c <__pow5mult>:
 800a49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4a0:	4615      	mov	r5, r2
 800a4a2:	f012 0203 	ands.w	r2, r2, #3
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	d007      	beq.n	800a4bc <__pow5mult+0x20>
 800a4ac:	3a01      	subs	r2, #1
 800a4ae:	4c21      	ldr	r4, [pc, #132]	; (800a534 <__pow5mult+0x98>)
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4b6:	f7ff fe8b 	bl	800a1d0 <__multadd>
 800a4ba:	4607      	mov	r7, r0
 800a4bc:	10ad      	asrs	r5, r5, #2
 800a4be:	d035      	beq.n	800a52c <__pow5mult+0x90>
 800a4c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4c2:	b93c      	cbnz	r4, 800a4d4 <__pow5mult+0x38>
 800a4c4:	2010      	movs	r0, #16
 800a4c6:	f7ff fe13 	bl	800a0f0 <malloc>
 800a4ca:	6270      	str	r0, [r6, #36]	; 0x24
 800a4cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4d0:	6004      	str	r4, [r0, #0]
 800a4d2:	60c4      	str	r4, [r0, #12]
 800a4d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4dc:	b94c      	cbnz	r4, 800a4f2 <__pow5mult+0x56>
 800a4de:	f240 2171 	movw	r1, #625	; 0x271
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7ff ff3b 	bl	800a35e <__i2b>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	6003      	str	r3, [r0, #0]
 800a4f2:	f04f 0800 	mov.w	r8, #0
 800a4f6:	07eb      	lsls	r3, r5, #31
 800a4f8:	d50a      	bpl.n	800a510 <__pow5mult+0x74>
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7ff ff36 	bl	800a370 <__multiply>
 800a504:	4639      	mov	r1, r7
 800a506:	4681      	mov	r9, r0
 800a508:	4630      	mov	r0, r6
 800a50a:	f7ff fe4a 	bl	800a1a2 <_Bfree>
 800a50e:	464f      	mov	r7, r9
 800a510:	106d      	asrs	r5, r5, #1
 800a512:	d00b      	beq.n	800a52c <__pow5mult+0x90>
 800a514:	6820      	ldr	r0, [r4, #0]
 800a516:	b938      	cbnz	r0, 800a528 <__pow5mult+0x8c>
 800a518:	4622      	mov	r2, r4
 800a51a:	4621      	mov	r1, r4
 800a51c:	4630      	mov	r0, r6
 800a51e:	f7ff ff27 	bl	800a370 <__multiply>
 800a522:	6020      	str	r0, [r4, #0]
 800a524:	f8c0 8000 	str.w	r8, [r0]
 800a528:	4604      	mov	r4, r0
 800a52a:	e7e4      	b.n	800a4f6 <__pow5mult+0x5a>
 800a52c:	4638      	mov	r0, r7
 800a52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a532:	bf00      	nop
 800a534:	0800b5a0 	.word	0x0800b5a0

0800a538 <__lshift>:
 800a538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	460c      	mov	r4, r1
 800a53e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a542:	6923      	ldr	r3, [r4, #16]
 800a544:	6849      	ldr	r1, [r1, #4]
 800a546:	eb0a 0903 	add.w	r9, sl, r3
 800a54a:	68a3      	ldr	r3, [r4, #8]
 800a54c:	4607      	mov	r7, r0
 800a54e:	4616      	mov	r6, r2
 800a550:	f109 0501 	add.w	r5, r9, #1
 800a554:	42ab      	cmp	r3, r5
 800a556:	db32      	blt.n	800a5be <__lshift+0x86>
 800a558:	4638      	mov	r0, r7
 800a55a:	f7ff fdee 	bl	800a13a <_Balloc>
 800a55e:	2300      	movs	r3, #0
 800a560:	4680      	mov	r8, r0
 800a562:	f100 0114 	add.w	r1, r0, #20
 800a566:	461a      	mov	r2, r3
 800a568:	4553      	cmp	r3, sl
 800a56a:	db2b      	blt.n	800a5c4 <__lshift+0x8c>
 800a56c:	6920      	ldr	r0, [r4, #16]
 800a56e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a572:	f104 0314 	add.w	r3, r4, #20
 800a576:	f016 021f 	ands.w	r2, r6, #31
 800a57a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a57e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a582:	d025      	beq.n	800a5d0 <__lshift+0x98>
 800a584:	f1c2 0e20 	rsb	lr, r2, #32
 800a588:	2000      	movs	r0, #0
 800a58a:	681e      	ldr	r6, [r3, #0]
 800a58c:	468a      	mov	sl, r1
 800a58e:	4096      	lsls	r6, r2
 800a590:	4330      	orrs	r0, r6
 800a592:	f84a 0b04 	str.w	r0, [sl], #4
 800a596:	f853 0b04 	ldr.w	r0, [r3], #4
 800a59a:	459c      	cmp	ip, r3
 800a59c:	fa20 f00e 	lsr.w	r0, r0, lr
 800a5a0:	d814      	bhi.n	800a5cc <__lshift+0x94>
 800a5a2:	6048      	str	r0, [r1, #4]
 800a5a4:	b108      	cbz	r0, 800a5aa <__lshift+0x72>
 800a5a6:	f109 0502 	add.w	r5, r9, #2
 800a5aa:	3d01      	subs	r5, #1
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	f8c8 5010 	str.w	r5, [r8, #16]
 800a5b2:	4621      	mov	r1, r4
 800a5b4:	f7ff fdf5 	bl	800a1a2 <_Bfree>
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5be:	3101      	adds	r1, #1
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	e7c7      	b.n	800a554 <__lshift+0x1c>
 800a5c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	e7cd      	b.n	800a568 <__lshift+0x30>
 800a5cc:	4651      	mov	r1, sl
 800a5ce:	e7dc      	b.n	800a58a <__lshift+0x52>
 800a5d0:	3904      	subs	r1, #4
 800a5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5da:	459c      	cmp	ip, r3
 800a5dc:	d8f9      	bhi.n	800a5d2 <__lshift+0x9a>
 800a5de:	e7e4      	b.n	800a5aa <__lshift+0x72>

0800a5e0 <__mcmp>:
 800a5e0:	6903      	ldr	r3, [r0, #16]
 800a5e2:	690a      	ldr	r2, [r1, #16]
 800a5e4:	1a9b      	subs	r3, r3, r2
 800a5e6:	b530      	push	{r4, r5, lr}
 800a5e8:	d10c      	bne.n	800a604 <__mcmp+0x24>
 800a5ea:	0092      	lsls	r2, r2, #2
 800a5ec:	3014      	adds	r0, #20
 800a5ee:	3114      	adds	r1, #20
 800a5f0:	1884      	adds	r4, r0, r2
 800a5f2:	4411      	add	r1, r2
 800a5f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5fc:	4295      	cmp	r5, r2
 800a5fe:	d003      	beq.n	800a608 <__mcmp+0x28>
 800a600:	d305      	bcc.n	800a60e <__mcmp+0x2e>
 800a602:	2301      	movs	r3, #1
 800a604:	4618      	mov	r0, r3
 800a606:	bd30      	pop	{r4, r5, pc}
 800a608:	42a0      	cmp	r0, r4
 800a60a:	d3f3      	bcc.n	800a5f4 <__mcmp+0x14>
 800a60c:	e7fa      	b.n	800a604 <__mcmp+0x24>
 800a60e:	f04f 33ff 	mov.w	r3, #4294967295
 800a612:	e7f7      	b.n	800a604 <__mcmp+0x24>

0800a614 <__mdiff>:
 800a614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	460d      	mov	r5, r1
 800a61a:	4607      	mov	r7, r0
 800a61c:	4611      	mov	r1, r2
 800a61e:	4628      	mov	r0, r5
 800a620:	4614      	mov	r4, r2
 800a622:	f7ff ffdd 	bl	800a5e0 <__mcmp>
 800a626:	1e06      	subs	r6, r0, #0
 800a628:	d108      	bne.n	800a63c <__mdiff+0x28>
 800a62a:	4631      	mov	r1, r6
 800a62c:	4638      	mov	r0, r7
 800a62e:	f7ff fd84 	bl	800a13a <_Balloc>
 800a632:	2301      	movs	r3, #1
 800a634:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63c:	bfa4      	itt	ge
 800a63e:	4623      	movge	r3, r4
 800a640:	462c      	movge	r4, r5
 800a642:	4638      	mov	r0, r7
 800a644:	6861      	ldr	r1, [r4, #4]
 800a646:	bfa6      	itte	ge
 800a648:	461d      	movge	r5, r3
 800a64a:	2600      	movge	r6, #0
 800a64c:	2601      	movlt	r6, #1
 800a64e:	f7ff fd74 	bl	800a13a <_Balloc>
 800a652:	692b      	ldr	r3, [r5, #16]
 800a654:	60c6      	str	r6, [r0, #12]
 800a656:	6926      	ldr	r6, [r4, #16]
 800a658:	f105 0914 	add.w	r9, r5, #20
 800a65c:	f104 0214 	add.w	r2, r4, #20
 800a660:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a664:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a668:	f100 0514 	add.w	r5, r0, #20
 800a66c:	f04f 0e00 	mov.w	lr, #0
 800a670:	f852 ab04 	ldr.w	sl, [r2], #4
 800a674:	f859 4b04 	ldr.w	r4, [r9], #4
 800a678:	fa1e f18a 	uxtah	r1, lr, sl
 800a67c:	b2a3      	uxth	r3, r4
 800a67e:	1ac9      	subs	r1, r1, r3
 800a680:	0c23      	lsrs	r3, r4, #16
 800a682:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a686:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a68a:	b289      	uxth	r1, r1
 800a68c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a690:	45c8      	cmp	r8, r9
 800a692:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a696:	4694      	mov	ip, r2
 800a698:	f845 3b04 	str.w	r3, [r5], #4
 800a69c:	d8e8      	bhi.n	800a670 <__mdiff+0x5c>
 800a69e:	45bc      	cmp	ip, r7
 800a6a0:	d304      	bcc.n	800a6ac <__mdiff+0x98>
 800a6a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a6a6:	b183      	cbz	r3, 800a6ca <__mdiff+0xb6>
 800a6a8:	6106      	str	r6, [r0, #16]
 800a6aa:	e7c5      	b.n	800a638 <__mdiff+0x24>
 800a6ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6b0:	fa1e f381 	uxtah	r3, lr, r1
 800a6b4:	141a      	asrs	r2, r3, #16
 800a6b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a6c4:	f845 3b04 	str.w	r3, [r5], #4
 800a6c8:	e7e9      	b.n	800a69e <__mdiff+0x8a>
 800a6ca:	3e01      	subs	r6, #1
 800a6cc:	e7e9      	b.n	800a6a2 <__mdiff+0x8e>
	...

0800a6d0 <__ulp>:
 800a6d0:	4b12      	ldr	r3, [pc, #72]	; (800a71c <__ulp+0x4c>)
 800a6d2:	ee10 2a90 	vmov	r2, s1
 800a6d6:	401a      	ands	r2, r3
 800a6d8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd04      	ble.n	800a6ea <__ulp+0x1a>
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	ec41 0b10 	vmov	d0, r0, r1
 800a6e8:	4770      	bx	lr
 800a6ea:	425b      	negs	r3, r3
 800a6ec:	151b      	asrs	r3, r3, #20
 800a6ee:	2b13      	cmp	r3, #19
 800a6f0:	f04f 0000 	mov.w	r0, #0
 800a6f4:	f04f 0100 	mov.w	r1, #0
 800a6f8:	dc04      	bgt.n	800a704 <__ulp+0x34>
 800a6fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a6fe:	fa42 f103 	asr.w	r1, r2, r3
 800a702:	e7ef      	b.n	800a6e4 <__ulp+0x14>
 800a704:	3b14      	subs	r3, #20
 800a706:	2b1e      	cmp	r3, #30
 800a708:	f04f 0201 	mov.w	r2, #1
 800a70c:	bfda      	itte	le
 800a70e:	f1c3 031f 	rsble	r3, r3, #31
 800a712:	fa02 f303 	lslle.w	r3, r2, r3
 800a716:	4613      	movgt	r3, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	e7e3      	b.n	800a6e4 <__ulp+0x14>
 800a71c:	7ff00000 	.word	0x7ff00000

0800a720 <__b2d>:
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	6905      	ldr	r5, [r0, #16]
 800a724:	f100 0714 	add.w	r7, r0, #20
 800a728:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a72c:	1f2e      	subs	r6, r5, #4
 800a72e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a732:	4620      	mov	r0, r4
 800a734:	f7ff fdc5 	bl	800a2c2 <__hi0bits>
 800a738:	f1c0 0320 	rsb	r3, r0, #32
 800a73c:	280a      	cmp	r0, #10
 800a73e:	600b      	str	r3, [r1, #0]
 800a740:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a7b8 <__b2d+0x98>
 800a744:	dc14      	bgt.n	800a770 <__b2d+0x50>
 800a746:	f1c0 0e0b 	rsb	lr, r0, #11
 800a74a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a74e:	42b7      	cmp	r7, r6
 800a750:	ea41 030c 	orr.w	r3, r1, ip
 800a754:	bf34      	ite	cc
 800a756:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a75a:	2100      	movcs	r1, #0
 800a75c:	3015      	adds	r0, #21
 800a75e:	fa04 f000 	lsl.w	r0, r4, r0
 800a762:	fa21 f10e 	lsr.w	r1, r1, lr
 800a766:	ea40 0201 	orr.w	r2, r0, r1
 800a76a:	ec43 2b10 	vmov	d0, r2, r3
 800a76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a770:	42b7      	cmp	r7, r6
 800a772:	bf3a      	itte	cc
 800a774:	f1a5 0608 	subcc.w	r6, r5, #8
 800a778:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a77c:	2100      	movcs	r1, #0
 800a77e:	380b      	subs	r0, #11
 800a780:	d015      	beq.n	800a7ae <__b2d+0x8e>
 800a782:	4084      	lsls	r4, r0
 800a784:	f1c0 0520 	rsb	r5, r0, #32
 800a788:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a78c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a790:	42be      	cmp	r6, r7
 800a792:	fa21 fc05 	lsr.w	ip, r1, r5
 800a796:	ea44 030c 	orr.w	r3, r4, ip
 800a79a:	bf8c      	ite	hi
 800a79c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a7a0:	2400      	movls	r4, #0
 800a7a2:	fa01 f000 	lsl.w	r0, r1, r0
 800a7a6:	40ec      	lsrs	r4, r5
 800a7a8:	ea40 0204 	orr.w	r2, r0, r4
 800a7ac:	e7dd      	b.n	800a76a <__b2d+0x4a>
 800a7ae:	ea44 030c 	orr.w	r3, r4, ip
 800a7b2:	460a      	mov	r2, r1
 800a7b4:	e7d9      	b.n	800a76a <__b2d+0x4a>
 800a7b6:	bf00      	nop
 800a7b8:	3ff00000 	.word	0x3ff00000

0800a7bc <__d2b>:
 800a7bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7c0:	460e      	mov	r6, r1
 800a7c2:	2101      	movs	r1, #1
 800a7c4:	ec59 8b10 	vmov	r8, r9, d0
 800a7c8:	4615      	mov	r5, r2
 800a7ca:	f7ff fcb6 	bl	800a13a <_Balloc>
 800a7ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a7d2:	4607      	mov	r7, r0
 800a7d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7d8:	bb34      	cbnz	r4, 800a828 <__d2b+0x6c>
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	f1b8 0300 	subs.w	r3, r8, #0
 800a7e0:	d027      	beq.n	800a832 <__d2b+0x76>
 800a7e2:	a802      	add	r0, sp, #8
 800a7e4:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a7e8:	f7ff fd8a 	bl	800a300 <__lo0bits>
 800a7ec:	9900      	ldr	r1, [sp, #0]
 800a7ee:	b1f0      	cbz	r0, 800a82e <__d2b+0x72>
 800a7f0:	9a01      	ldr	r2, [sp, #4]
 800a7f2:	f1c0 0320 	rsb	r3, r0, #32
 800a7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fa:	430b      	orrs	r3, r1
 800a7fc:	40c2      	lsrs	r2, r0
 800a7fe:	617b      	str	r3, [r7, #20]
 800a800:	9201      	str	r2, [sp, #4]
 800a802:	9b01      	ldr	r3, [sp, #4]
 800a804:	61bb      	str	r3, [r7, #24]
 800a806:	2b00      	cmp	r3, #0
 800a808:	bf14      	ite	ne
 800a80a:	2102      	movne	r1, #2
 800a80c:	2101      	moveq	r1, #1
 800a80e:	6139      	str	r1, [r7, #16]
 800a810:	b1c4      	cbz	r4, 800a844 <__d2b+0x88>
 800a812:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a816:	4404      	add	r4, r0
 800a818:	6034      	str	r4, [r6, #0]
 800a81a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a81e:	6028      	str	r0, [r5, #0]
 800a820:	4638      	mov	r0, r7
 800a822:	b003      	add	sp, #12
 800a824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a82c:	e7d5      	b.n	800a7da <__d2b+0x1e>
 800a82e:	6179      	str	r1, [r7, #20]
 800a830:	e7e7      	b.n	800a802 <__d2b+0x46>
 800a832:	a801      	add	r0, sp, #4
 800a834:	f7ff fd64 	bl	800a300 <__lo0bits>
 800a838:	9b01      	ldr	r3, [sp, #4]
 800a83a:	617b      	str	r3, [r7, #20]
 800a83c:	2101      	movs	r1, #1
 800a83e:	6139      	str	r1, [r7, #16]
 800a840:	3020      	adds	r0, #32
 800a842:	e7e5      	b.n	800a810 <__d2b+0x54>
 800a844:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a848:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a84c:	6030      	str	r0, [r6, #0]
 800a84e:	6918      	ldr	r0, [r3, #16]
 800a850:	f7ff fd37 	bl	800a2c2 <__hi0bits>
 800a854:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a858:	e7e1      	b.n	800a81e <__d2b+0x62>

0800a85a <__ratio>:
 800a85a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85e:	4688      	mov	r8, r1
 800a860:	4669      	mov	r1, sp
 800a862:	4681      	mov	r9, r0
 800a864:	f7ff ff5c 	bl	800a720 <__b2d>
 800a868:	a901      	add	r1, sp, #4
 800a86a:	4640      	mov	r0, r8
 800a86c:	ec57 6b10 	vmov	r6, r7, d0
 800a870:	f7ff ff56 	bl	800a720 <__b2d>
 800a874:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a878:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a87c:	eba3 0c02 	sub.w	ip, r3, r2
 800a880:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a884:	1a9b      	subs	r3, r3, r2
 800a886:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a88a:	ec5b ab10 	vmov	sl, fp, d0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfce      	itee	gt
 800a892:	463a      	movgt	r2, r7
 800a894:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a898:	465a      	movle	r2, fp
 800a89a:	4659      	mov	r1, fp
 800a89c:	463d      	mov	r5, r7
 800a89e:	bfd4      	ite	le
 800a8a0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a8a4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	ee10 2a10 	vmov	r2, s0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	f7f5 ffcb 	bl	800084c <__aeabi_ddiv>
 800a8b6:	ec41 0b10 	vmov	d0, r0, r1
 800a8ba:	b003      	add	sp, #12
 800a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8c0 <__copybits>:
 800a8c0:	3901      	subs	r1, #1
 800a8c2:	b510      	push	{r4, lr}
 800a8c4:	1149      	asrs	r1, r1, #5
 800a8c6:	6914      	ldr	r4, [r2, #16]
 800a8c8:	3101      	adds	r1, #1
 800a8ca:	f102 0314 	add.w	r3, r2, #20
 800a8ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8d6:	42a3      	cmp	r3, r4
 800a8d8:	4602      	mov	r2, r0
 800a8da:	d303      	bcc.n	800a8e4 <__copybits+0x24>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	428a      	cmp	r2, r1
 800a8e0:	d305      	bcc.n	800a8ee <__copybits+0x2e>
 800a8e2:	bd10      	pop	{r4, pc}
 800a8e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e8:	f840 2b04 	str.w	r2, [r0], #4
 800a8ec:	e7f3      	b.n	800a8d6 <__copybits+0x16>
 800a8ee:	f842 3b04 	str.w	r3, [r2], #4
 800a8f2:	e7f4      	b.n	800a8de <__copybits+0x1e>

0800a8f4 <__any_on>:
 800a8f4:	f100 0214 	add.w	r2, r0, #20
 800a8f8:	6900      	ldr	r0, [r0, #16]
 800a8fa:	114b      	asrs	r3, r1, #5
 800a8fc:	4298      	cmp	r0, r3
 800a8fe:	b510      	push	{r4, lr}
 800a900:	db11      	blt.n	800a926 <__any_on+0x32>
 800a902:	dd0a      	ble.n	800a91a <__any_on+0x26>
 800a904:	f011 011f 	ands.w	r1, r1, #31
 800a908:	d007      	beq.n	800a91a <__any_on+0x26>
 800a90a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a90e:	fa24 f001 	lsr.w	r0, r4, r1
 800a912:	fa00 f101 	lsl.w	r1, r0, r1
 800a916:	428c      	cmp	r4, r1
 800a918:	d10b      	bne.n	800a932 <__any_on+0x3e>
 800a91a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a91e:	4293      	cmp	r3, r2
 800a920:	d803      	bhi.n	800a92a <__any_on+0x36>
 800a922:	2000      	movs	r0, #0
 800a924:	bd10      	pop	{r4, pc}
 800a926:	4603      	mov	r3, r0
 800a928:	e7f7      	b.n	800a91a <__any_on+0x26>
 800a92a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a92e:	2900      	cmp	r1, #0
 800a930:	d0f5      	beq.n	800a91e <__any_on+0x2a>
 800a932:	2001      	movs	r0, #1
 800a934:	e7f6      	b.n	800a924 <__any_on+0x30>

0800a936 <_calloc_r>:
 800a936:	b538      	push	{r3, r4, r5, lr}
 800a938:	fb02 f401 	mul.w	r4, r2, r1
 800a93c:	4621      	mov	r1, r4
 800a93e:	f000 f857 	bl	800a9f0 <_malloc_r>
 800a942:	4605      	mov	r5, r0
 800a944:	b118      	cbz	r0, 800a94e <_calloc_r+0x18>
 800a946:	4622      	mov	r2, r4
 800a948:	2100      	movs	r1, #0
 800a94a:	f7fc fa1b 	bl	8006d84 <memset>
 800a94e:	4628      	mov	r0, r5
 800a950:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a954 <_free_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4605      	mov	r5, r0
 800a958:	2900      	cmp	r1, #0
 800a95a:	d045      	beq.n	800a9e8 <_free_r+0x94>
 800a95c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a960:	1f0c      	subs	r4, r1, #4
 800a962:	2b00      	cmp	r3, #0
 800a964:	bfb8      	it	lt
 800a966:	18e4      	addlt	r4, r4, r3
 800a968:	f000 fc0f 	bl	800b18a <__malloc_lock>
 800a96c:	4a1f      	ldr	r2, [pc, #124]	; (800a9ec <_free_r+0x98>)
 800a96e:	6813      	ldr	r3, [r2, #0]
 800a970:	4610      	mov	r0, r2
 800a972:	b933      	cbnz	r3, 800a982 <_free_r+0x2e>
 800a974:	6063      	str	r3, [r4, #4]
 800a976:	6014      	str	r4, [r2, #0]
 800a978:	4628      	mov	r0, r5
 800a97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a97e:	f000 bc05 	b.w	800b18c <__malloc_unlock>
 800a982:	42a3      	cmp	r3, r4
 800a984:	d90c      	bls.n	800a9a0 <_free_r+0x4c>
 800a986:	6821      	ldr	r1, [r4, #0]
 800a988:	1862      	adds	r2, r4, r1
 800a98a:	4293      	cmp	r3, r2
 800a98c:	bf04      	itt	eq
 800a98e:	681a      	ldreq	r2, [r3, #0]
 800a990:	685b      	ldreq	r3, [r3, #4]
 800a992:	6063      	str	r3, [r4, #4]
 800a994:	bf04      	itt	eq
 800a996:	1852      	addeq	r2, r2, r1
 800a998:	6022      	streq	r2, [r4, #0]
 800a99a:	6004      	str	r4, [r0, #0]
 800a99c:	e7ec      	b.n	800a978 <_free_r+0x24>
 800a99e:	4613      	mov	r3, r2
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	b10a      	cbz	r2, 800a9a8 <_free_r+0x54>
 800a9a4:	42a2      	cmp	r2, r4
 800a9a6:	d9fa      	bls.n	800a99e <_free_r+0x4a>
 800a9a8:	6819      	ldr	r1, [r3, #0]
 800a9aa:	1858      	adds	r0, r3, r1
 800a9ac:	42a0      	cmp	r0, r4
 800a9ae:	d10b      	bne.n	800a9c8 <_free_r+0x74>
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	4401      	add	r1, r0
 800a9b4:	1858      	adds	r0, r3, r1
 800a9b6:	4282      	cmp	r2, r0
 800a9b8:	6019      	str	r1, [r3, #0]
 800a9ba:	d1dd      	bne.n	800a978 <_free_r+0x24>
 800a9bc:	6810      	ldr	r0, [r2, #0]
 800a9be:	6852      	ldr	r2, [r2, #4]
 800a9c0:	605a      	str	r2, [r3, #4]
 800a9c2:	4401      	add	r1, r0
 800a9c4:	6019      	str	r1, [r3, #0]
 800a9c6:	e7d7      	b.n	800a978 <_free_r+0x24>
 800a9c8:	d902      	bls.n	800a9d0 <_free_r+0x7c>
 800a9ca:	230c      	movs	r3, #12
 800a9cc:	602b      	str	r3, [r5, #0]
 800a9ce:	e7d3      	b.n	800a978 <_free_r+0x24>
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	1821      	adds	r1, r4, r0
 800a9d4:	428a      	cmp	r2, r1
 800a9d6:	bf04      	itt	eq
 800a9d8:	6811      	ldreq	r1, [r2, #0]
 800a9da:	6852      	ldreq	r2, [r2, #4]
 800a9dc:	6062      	str	r2, [r4, #4]
 800a9de:	bf04      	itt	eq
 800a9e0:	1809      	addeq	r1, r1, r0
 800a9e2:	6021      	streq	r1, [r4, #0]
 800a9e4:	605c      	str	r4, [r3, #4]
 800a9e6:	e7c7      	b.n	800a978 <_free_r+0x24>
 800a9e8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000200 	.word	0x20000200

0800a9f0 <_malloc_r>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	1ccd      	adds	r5, r1, #3
 800a9f4:	f025 0503 	bic.w	r5, r5, #3
 800a9f8:	3508      	adds	r5, #8
 800a9fa:	2d0c      	cmp	r5, #12
 800a9fc:	bf38      	it	cc
 800a9fe:	250c      	movcc	r5, #12
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	4606      	mov	r6, r0
 800aa04:	db01      	blt.n	800aa0a <_malloc_r+0x1a>
 800aa06:	42a9      	cmp	r1, r5
 800aa08:	d903      	bls.n	800aa12 <_malloc_r+0x22>
 800aa0a:	230c      	movs	r3, #12
 800aa0c:	6033      	str	r3, [r6, #0]
 800aa0e:	2000      	movs	r0, #0
 800aa10:	bd70      	pop	{r4, r5, r6, pc}
 800aa12:	f000 fbba 	bl	800b18a <__malloc_lock>
 800aa16:	4a21      	ldr	r2, [pc, #132]	; (800aa9c <_malloc_r+0xac>)
 800aa18:	6814      	ldr	r4, [r2, #0]
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	b991      	cbnz	r1, 800aa44 <_malloc_r+0x54>
 800aa1e:	4c20      	ldr	r4, [pc, #128]	; (800aaa0 <_malloc_r+0xb0>)
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	b91b      	cbnz	r3, 800aa2c <_malloc_r+0x3c>
 800aa24:	4630      	mov	r0, r6
 800aa26:	f000 facf 	bl	800afc8 <_sbrk_r>
 800aa2a:	6020      	str	r0, [r4, #0]
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f000 faca 	bl	800afc8 <_sbrk_r>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d124      	bne.n	800aa82 <_malloc_r+0x92>
 800aa38:	230c      	movs	r3, #12
 800aa3a:	6033      	str	r3, [r6, #0]
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f000 fba5 	bl	800b18c <__malloc_unlock>
 800aa42:	e7e4      	b.n	800aa0e <_malloc_r+0x1e>
 800aa44:	680b      	ldr	r3, [r1, #0]
 800aa46:	1b5b      	subs	r3, r3, r5
 800aa48:	d418      	bmi.n	800aa7c <_malloc_r+0x8c>
 800aa4a:	2b0b      	cmp	r3, #11
 800aa4c:	d90f      	bls.n	800aa6e <_malloc_r+0x7e>
 800aa4e:	600b      	str	r3, [r1, #0]
 800aa50:	50cd      	str	r5, [r1, r3]
 800aa52:	18cc      	adds	r4, r1, r3
 800aa54:	4630      	mov	r0, r6
 800aa56:	f000 fb99 	bl	800b18c <__malloc_unlock>
 800aa5a:	f104 000b 	add.w	r0, r4, #11
 800aa5e:	1d23      	adds	r3, r4, #4
 800aa60:	f020 0007 	bic.w	r0, r0, #7
 800aa64:	1ac3      	subs	r3, r0, r3
 800aa66:	d0d3      	beq.n	800aa10 <_malloc_r+0x20>
 800aa68:	425a      	negs	r2, r3
 800aa6a:	50e2      	str	r2, [r4, r3]
 800aa6c:	e7d0      	b.n	800aa10 <_malloc_r+0x20>
 800aa6e:	428c      	cmp	r4, r1
 800aa70:	684b      	ldr	r3, [r1, #4]
 800aa72:	bf16      	itet	ne
 800aa74:	6063      	strne	r3, [r4, #4]
 800aa76:	6013      	streq	r3, [r2, #0]
 800aa78:	460c      	movne	r4, r1
 800aa7a:	e7eb      	b.n	800aa54 <_malloc_r+0x64>
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	6849      	ldr	r1, [r1, #4]
 800aa80:	e7cc      	b.n	800aa1c <_malloc_r+0x2c>
 800aa82:	1cc4      	adds	r4, r0, #3
 800aa84:	f024 0403 	bic.w	r4, r4, #3
 800aa88:	42a0      	cmp	r0, r4
 800aa8a:	d005      	beq.n	800aa98 <_malloc_r+0xa8>
 800aa8c:	1a21      	subs	r1, r4, r0
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f000 fa9a 	bl	800afc8 <_sbrk_r>
 800aa94:	3001      	adds	r0, #1
 800aa96:	d0cf      	beq.n	800aa38 <_malloc_r+0x48>
 800aa98:	6025      	str	r5, [r4, #0]
 800aa9a:	e7db      	b.n	800aa54 <_malloc_r+0x64>
 800aa9c:	20000200 	.word	0x20000200
 800aaa0:	20000204 	.word	0x20000204

0800aaa4 <__ssputs_r>:
 800aaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa8:	688e      	ldr	r6, [r1, #8]
 800aaaa:	429e      	cmp	r6, r3
 800aaac:	4682      	mov	sl, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	4690      	mov	r8, r2
 800aab2:	4699      	mov	r9, r3
 800aab4:	d837      	bhi.n	800ab26 <__ssputs_r+0x82>
 800aab6:	898a      	ldrh	r2, [r1, #12]
 800aab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aabc:	d031      	beq.n	800ab22 <__ssputs_r+0x7e>
 800aabe:	6825      	ldr	r5, [r4, #0]
 800aac0:	6909      	ldr	r1, [r1, #16]
 800aac2:	1a6f      	subs	r7, r5, r1
 800aac4:	6965      	ldr	r5, [r4, #20]
 800aac6:	2302      	movs	r3, #2
 800aac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aacc:	fb95 f5f3 	sdiv	r5, r5, r3
 800aad0:	f109 0301 	add.w	r3, r9, #1
 800aad4:	443b      	add	r3, r7
 800aad6:	429d      	cmp	r5, r3
 800aad8:	bf38      	it	cc
 800aada:	461d      	movcc	r5, r3
 800aadc:	0553      	lsls	r3, r2, #21
 800aade:	d530      	bpl.n	800ab42 <__ssputs_r+0x9e>
 800aae0:	4629      	mov	r1, r5
 800aae2:	f7ff ff85 	bl	800a9f0 <_malloc_r>
 800aae6:	4606      	mov	r6, r0
 800aae8:	b950      	cbnz	r0, 800ab00 <__ssputs_r+0x5c>
 800aaea:	230c      	movs	r3, #12
 800aaec:	f8ca 3000 	str.w	r3, [sl]
 800aaf0:	89a3      	ldrh	r3, [r4, #12]
 800aaf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaf6:	81a3      	strh	r3, [r4, #12]
 800aaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800aafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab00:	463a      	mov	r2, r7
 800ab02:	6921      	ldr	r1, [r4, #16]
 800ab04:	f7ff fb0e 	bl	800a124 <memcpy>
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab12:	81a3      	strh	r3, [r4, #12]
 800ab14:	6126      	str	r6, [r4, #16]
 800ab16:	6165      	str	r5, [r4, #20]
 800ab18:	443e      	add	r6, r7
 800ab1a:	1bed      	subs	r5, r5, r7
 800ab1c:	6026      	str	r6, [r4, #0]
 800ab1e:	60a5      	str	r5, [r4, #8]
 800ab20:	464e      	mov	r6, r9
 800ab22:	454e      	cmp	r6, r9
 800ab24:	d900      	bls.n	800ab28 <__ssputs_r+0x84>
 800ab26:	464e      	mov	r6, r9
 800ab28:	4632      	mov	r2, r6
 800ab2a:	4641      	mov	r1, r8
 800ab2c:	6820      	ldr	r0, [r4, #0]
 800ab2e:	f000 fb13 	bl	800b158 <memmove>
 800ab32:	68a3      	ldr	r3, [r4, #8]
 800ab34:	1b9b      	subs	r3, r3, r6
 800ab36:	60a3      	str	r3, [r4, #8]
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	441e      	add	r6, r3
 800ab3c:	6026      	str	r6, [r4, #0]
 800ab3e:	2000      	movs	r0, #0
 800ab40:	e7dc      	b.n	800aafc <__ssputs_r+0x58>
 800ab42:	462a      	mov	r2, r5
 800ab44:	f000 fb23 	bl	800b18e <_realloc_r>
 800ab48:	4606      	mov	r6, r0
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d1e2      	bne.n	800ab14 <__ssputs_r+0x70>
 800ab4e:	6921      	ldr	r1, [r4, #16]
 800ab50:	4650      	mov	r0, sl
 800ab52:	f7ff feff 	bl	800a954 <_free_r>
 800ab56:	e7c8      	b.n	800aaea <__ssputs_r+0x46>

0800ab58 <_svfiprintf_r>:
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	461d      	mov	r5, r3
 800ab5e:	898b      	ldrh	r3, [r1, #12]
 800ab60:	061f      	lsls	r7, r3, #24
 800ab62:	b09d      	sub	sp, #116	; 0x74
 800ab64:	4680      	mov	r8, r0
 800ab66:	460c      	mov	r4, r1
 800ab68:	4616      	mov	r6, r2
 800ab6a:	d50f      	bpl.n	800ab8c <_svfiprintf_r+0x34>
 800ab6c:	690b      	ldr	r3, [r1, #16]
 800ab6e:	b96b      	cbnz	r3, 800ab8c <_svfiprintf_r+0x34>
 800ab70:	2140      	movs	r1, #64	; 0x40
 800ab72:	f7ff ff3d 	bl	800a9f0 <_malloc_r>
 800ab76:	6020      	str	r0, [r4, #0]
 800ab78:	6120      	str	r0, [r4, #16]
 800ab7a:	b928      	cbnz	r0, 800ab88 <_svfiprintf_r+0x30>
 800ab7c:	230c      	movs	r3, #12
 800ab7e:	f8c8 3000 	str.w	r3, [r8]
 800ab82:	f04f 30ff 	mov.w	r0, #4294967295
 800ab86:	e0c8      	b.n	800ad1a <_svfiprintf_r+0x1c2>
 800ab88:	2340      	movs	r3, #64	; 0x40
 800ab8a:	6163      	str	r3, [r4, #20]
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab90:	2320      	movs	r3, #32
 800ab92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab96:	2330      	movs	r3, #48	; 0x30
 800ab98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab9c:	9503      	str	r5, [sp, #12]
 800ab9e:	f04f 0b01 	mov.w	fp, #1
 800aba2:	4637      	mov	r7, r6
 800aba4:	463d      	mov	r5, r7
 800aba6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800abaa:	b10b      	cbz	r3, 800abb0 <_svfiprintf_r+0x58>
 800abac:	2b25      	cmp	r3, #37	; 0x25
 800abae:	d13e      	bne.n	800ac2e <_svfiprintf_r+0xd6>
 800abb0:	ebb7 0a06 	subs.w	sl, r7, r6
 800abb4:	d00b      	beq.n	800abce <_svfiprintf_r+0x76>
 800abb6:	4653      	mov	r3, sl
 800abb8:	4632      	mov	r2, r6
 800abba:	4621      	mov	r1, r4
 800abbc:	4640      	mov	r0, r8
 800abbe:	f7ff ff71 	bl	800aaa4 <__ssputs_r>
 800abc2:	3001      	adds	r0, #1
 800abc4:	f000 80a4 	beq.w	800ad10 <_svfiprintf_r+0x1b8>
 800abc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abca:	4453      	add	r3, sl
 800abcc:	9309      	str	r3, [sp, #36]	; 0x24
 800abce:	783b      	ldrb	r3, [r7, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 809d 	beq.w	800ad10 <_svfiprintf_r+0x1b8>
 800abd6:	2300      	movs	r3, #0
 800abd8:	f04f 32ff 	mov.w	r2, #4294967295
 800abdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abe0:	9304      	str	r3, [sp, #16]
 800abe2:	9307      	str	r3, [sp, #28]
 800abe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abe8:	931a      	str	r3, [sp, #104]	; 0x68
 800abea:	462f      	mov	r7, r5
 800abec:	2205      	movs	r2, #5
 800abee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800abf2:	4850      	ldr	r0, [pc, #320]	; (800ad34 <_svfiprintf_r+0x1dc>)
 800abf4:	f7f5 faf4 	bl	80001e0 <memchr>
 800abf8:	9b04      	ldr	r3, [sp, #16]
 800abfa:	b9d0      	cbnz	r0, 800ac32 <_svfiprintf_r+0xda>
 800abfc:	06d9      	lsls	r1, r3, #27
 800abfe:	bf44      	itt	mi
 800ac00:	2220      	movmi	r2, #32
 800ac02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ac06:	071a      	lsls	r2, r3, #28
 800ac08:	bf44      	itt	mi
 800ac0a:	222b      	movmi	r2, #43	; 0x2b
 800ac0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ac10:	782a      	ldrb	r2, [r5, #0]
 800ac12:	2a2a      	cmp	r2, #42	; 0x2a
 800ac14:	d015      	beq.n	800ac42 <_svfiprintf_r+0xea>
 800ac16:	9a07      	ldr	r2, [sp, #28]
 800ac18:	462f      	mov	r7, r5
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	250a      	movs	r5, #10
 800ac1e:	4639      	mov	r1, r7
 800ac20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac24:	3b30      	subs	r3, #48	; 0x30
 800ac26:	2b09      	cmp	r3, #9
 800ac28:	d94d      	bls.n	800acc6 <_svfiprintf_r+0x16e>
 800ac2a:	b1b8      	cbz	r0, 800ac5c <_svfiprintf_r+0x104>
 800ac2c:	e00f      	b.n	800ac4e <_svfiprintf_r+0xf6>
 800ac2e:	462f      	mov	r7, r5
 800ac30:	e7b8      	b.n	800aba4 <_svfiprintf_r+0x4c>
 800ac32:	4a40      	ldr	r2, [pc, #256]	; (800ad34 <_svfiprintf_r+0x1dc>)
 800ac34:	1a80      	subs	r0, r0, r2
 800ac36:	fa0b f000 	lsl.w	r0, fp, r0
 800ac3a:	4318      	orrs	r0, r3
 800ac3c:	9004      	str	r0, [sp, #16]
 800ac3e:	463d      	mov	r5, r7
 800ac40:	e7d3      	b.n	800abea <_svfiprintf_r+0x92>
 800ac42:	9a03      	ldr	r2, [sp, #12]
 800ac44:	1d11      	adds	r1, r2, #4
 800ac46:	6812      	ldr	r2, [r2, #0]
 800ac48:	9103      	str	r1, [sp, #12]
 800ac4a:	2a00      	cmp	r2, #0
 800ac4c:	db01      	blt.n	800ac52 <_svfiprintf_r+0xfa>
 800ac4e:	9207      	str	r2, [sp, #28]
 800ac50:	e004      	b.n	800ac5c <_svfiprintf_r+0x104>
 800ac52:	4252      	negs	r2, r2
 800ac54:	f043 0302 	orr.w	r3, r3, #2
 800ac58:	9207      	str	r2, [sp, #28]
 800ac5a:	9304      	str	r3, [sp, #16]
 800ac5c:	783b      	ldrb	r3, [r7, #0]
 800ac5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ac60:	d10c      	bne.n	800ac7c <_svfiprintf_r+0x124>
 800ac62:	787b      	ldrb	r3, [r7, #1]
 800ac64:	2b2a      	cmp	r3, #42	; 0x2a
 800ac66:	d133      	bne.n	800acd0 <_svfiprintf_r+0x178>
 800ac68:	9b03      	ldr	r3, [sp, #12]
 800ac6a:	1d1a      	adds	r2, r3, #4
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	9203      	str	r2, [sp, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	bfb8      	it	lt
 800ac74:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac78:	3702      	adds	r7, #2
 800ac7a:	9305      	str	r3, [sp, #20]
 800ac7c:	4d2e      	ldr	r5, [pc, #184]	; (800ad38 <_svfiprintf_r+0x1e0>)
 800ac7e:	7839      	ldrb	r1, [r7, #0]
 800ac80:	2203      	movs	r2, #3
 800ac82:	4628      	mov	r0, r5
 800ac84:	f7f5 faac 	bl	80001e0 <memchr>
 800ac88:	b138      	cbz	r0, 800ac9a <_svfiprintf_r+0x142>
 800ac8a:	2340      	movs	r3, #64	; 0x40
 800ac8c:	1b40      	subs	r0, r0, r5
 800ac8e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac92:	9b04      	ldr	r3, [sp, #16]
 800ac94:	4303      	orrs	r3, r0
 800ac96:	3701      	adds	r7, #1
 800ac98:	9304      	str	r3, [sp, #16]
 800ac9a:	7839      	ldrb	r1, [r7, #0]
 800ac9c:	4827      	ldr	r0, [pc, #156]	; (800ad3c <_svfiprintf_r+0x1e4>)
 800ac9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aca2:	2206      	movs	r2, #6
 800aca4:	1c7e      	adds	r6, r7, #1
 800aca6:	f7f5 fa9b 	bl	80001e0 <memchr>
 800acaa:	2800      	cmp	r0, #0
 800acac:	d038      	beq.n	800ad20 <_svfiprintf_r+0x1c8>
 800acae:	4b24      	ldr	r3, [pc, #144]	; (800ad40 <_svfiprintf_r+0x1e8>)
 800acb0:	bb13      	cbnz	r3, 800acf8 <_svfiprintf_r+0x1a0>
 800acb2:	9b03      	ldr	r3, [sp, #12]
 800acb4:	3307      	adds	r3, #7
 800acb6:	f023 0307 	bic.w	r3, r3, #7
 800acba:	3308      	adds	r3, #8
 800acbc:	9303      	str	r3, [sp, #12]
 800acbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc0:	444b      	add	r3, r9
 800acc2:	9309      	str	r3, [sp, #36]	; 0x24
 800acc4:	e76d      	b.n	800aba2 <_svfiprintf_r+0x4a>
 800acc6:	fb05 3202 	mla	r2, r5, r2, r3
 800acca:	2001      	movs	r0, #1
 800accc:	460f      	mov	r7, r1
 800acce:	e7a6      	b.n	800ac1e <_svfiprintf_r+0xc6>
 800acd0:	2300      	movs	r3, #0
 800acd2:	3701      	adds	r7, #1
 800acd4:	9305      	str	r3, [sp, #20]
 800acd6:	4619      	mov	r1, r3
 800acd8:	250a      	movs	r5, #10
 800acda:	4638      	mov	r0, r7
 800acdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ace0:	3a30      	subs	r2, #48	; 0x30
 800ace2:	2a09      	cmp	r2, #9
 800ace4:	d903      	bls.n	800acee <_svfiprintf_r+0x196>
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0c8      	beq.n	800ac7c <_svfiprintf_r+0x124>
 800acea:	9105      	str	r1, [sp, #20]
 800acec:	e7c6      	b.n	800ac7c <_svfiprintf_r+0x124>
 800acee:	fb05 2101 	mla	r1, r5, r1, r2
 800acf2:	2301      	movs	r3, #1
 800acf4:	4607      	mov	r7, r0
 800acf6:	e7f0      	b.n	800acda <_svfiprintf_r+0x182>
 800acf8:	ab03      	add	r3, sp, #12
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	4622      	mov	r2, r4
 800acfe:	4b11      	ldr	r3, [pc, #68]	; (800ad44 <_svfiprintf_r+0x1ec>)
 800ad00:	a904      	add	r1, sp, #16
 800ad02:	4640      	mov	r0, r8
 800ad04:	f7fc f8da 	bl	8006ebc <_printf_float>
 800ad08:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ad0c:	4681      	mov	r9, r0
 800ad0e:	d1d6      	bne.n	800acbe <_svfiprintf_r+0x166>
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	065b      	lsls	r3, r3, #25
 800ad14:	f53f af35 	bmi.w	800ab82 <_svfiprintf_r+0x2a>
 800ad18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad1a:	b01d      	add	sp, #116	; 0x74
 800ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad20:	ab03      	add	r3, sp, #12
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	4622      	mov	r2, r4
 800ad26:	4b07      	ldr	r3, [pc, #28]	; (800ad44 <_svfiprintf_r+0x1ec>)
 800ad28:	a904      	add	r1, sp, #16
 800ad2a:	4640      	mov	r0, r8
 800ad2c:	f7fc fb7c 	bl	8007428 <_printf_i>
 800ad30:	e7ea      	b.n	800ad08 <_svfiprintf_r+0x1b0>
 800ad32:	bf00      	nop
 800ad34:	0800b5ac 	.word	0x0800b5ac
 800ad38:	0800b5b2 	.word	0x0800b5b2
 800ad3c:	0800b5b6 	.word	0x0800b5b6
 800ad40:	08006ebd 	.word	0x08006ebd
 800ad44:	0800aaa5 	.word	0x0800aaa5

0800ad48 <__sfputc_r>:
 800ad48:	6893      	ldr	r3, [r2, #8]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	b410      	push	{r4}
 800ad50:	6093      	str	r3, [r2, #8]
 800ad52:	da08      	bge.n	800ad66 <__sfputc_r+0x1e>
 800ad54:	6994      	ldr	r4, [r2, #24]
 800ad56:	42a3      	cmp	r3, r4
 800ad58:	db01      	blt.n	800ad5e <__sfputc_r+0x16>
 800ad5a:	290a      	cmp	r1, #10
 800ad5c:	d103      	bne.n	800ad66 <__sfputc_r+0x1e>
 800ad5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad62:	f7fd bda7 	b.w	80088b4 <__swbuf_r>
 800ad66:	6813      	ldr	r3, [r2, #0]
 800ad68:	1c58      	adds	r0, r3, #1
 800ad6a:	6010      	str	r0, [r2, #0]
 800ad6c:	7019      	strb	r1, [r3, #0]
 800ad6e:	4608      	mov	r0, r1
 800ad70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <__sfputs_r>:
 800ad76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad78:	4606      	mov	r6, r0
 800ad7a:	460f      	mov	r7, r1
 800ad7c:	4614      	mov	r4, r2
 800ad7e:	18d5      	adds	r5, r2, r3
 800ad80:	42ac      	cmp	r4, r5
 800ad82:	d101      	bne.n	800ad88 <__sfputs_r+0x12>
 800ad84:	2000      	movs	r0, #0
 800ad86:	e007      	b.n	800ad98 <__sfputs_r+0x22>
 800ad88:	463a      	mov	r2, r7
 800ad8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff ffda 	bl	800ad48 <__sfputc_r>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d1f3      	bne.n	800ad80 <__sfputs_r+0xa>
 800ad98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad9c <_vfiprintf_r>:
 800ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	460c      	mov	r4, r1
 800ada2:	b09d      	sub	sp, #116	; 0x74
 800ada4:	4617      	mov	r7, r2
 800ada6:	461d      	mov	r5, r3
 800ada8:	4606      	mov	r6, r0
 800adaa:	b118      	cbz	r0, 800adb4 <_vfiprintf_r+0x18>
 800adac:	6983      	ldr	r3, [r0, #24]
 800adae:	b90b      	cbnz	r3, 800adb4 <_vfiprintf_r+0x18>
 800adb0:	f7fe fd76 	bl	80098a0 <__sinit>
 800adb4:	4b7c      	ldr	r3, [pc, #496]	; (800afa8 <_vfiprintf_r+0x20c>)
 800adb6:	429c      	cmp	r4, r3
 800adb8:	d158      	bne.n	800ae6c <_vfiprintf_r+0xd0>
 800adba:	6874      	ldr	r4, [r6, #4]
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	0718      	lsls	r0, r3, #28
 800adc0:	d55e      	bpl.n	800ae80 <_vfiprintf_r+0xe4>
 800adc2:	6923      	ldr	r3, [r4, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d05b      	beq.n	800ae80 <_vfiprintf_r+0xe4>
 800adc8:	2300      	movs	r3, #0
 800adca:	9309      	str	r3, [sp, #36]	; 0x24
 800adcc:	2320      	movs	r3, #32
 800adce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800add2:	2330      	movs	r3, #48	; 0x30
 800add4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800add8:	9503      	str	r5, [sp, #12]
 800adda:	f04f 0b01 	mov.w	fp, #1
 800adde:	46b8      	mov	r8, r7
 800ade0:	4645      	mov	r5, r8
 800ade2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ade6:	b10b      	cbz	r3, 800adec <_vfiprintf_r+0x50>
 800ade8:	2b25      	cmp	r3, #37	; 0x25
 800adea:	d154      	bne.n	800ae96 <_vfiprintf_r+0xfa>
 800adec:	ebb8 0a07 	subs.w	sl, r8, r7
 800adf0:	d00b      	beq.n	800ae0a <_vfiprintf_r+0x6e>
 800adf2:	4653      	mov	r3, sl
 800adf4:	463a      	mov	r2, r7
 800adf6:	4621      	mov	r1, r4
 800adf8:	4630      	mov	r0, r6
 800adfa:	f7ff ffbc 	bl	800ad76 <__sfputs_r>
 800adfe:	3001      	adds	r0, #1
 800ae00:	f000 80c2 	beq.w	800af88 <_vfiprintf_r+0x1ec>
 800ae04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae06:	4453      	add	r3, sl
 800ae08:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0a:	f898 3000 	ldrb.w	r3, [r8]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f000 80ba 	beq.w	800af88 <_vfiprintf_r+0x1ec>
 800ae14:	2300      	movs	r3, #0
 800ae16:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae1e:	9304      	str	r3, [sp, #16]
 800ae20:	9307      	str	r3, [sp, #28]
 800ae22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae26:	931a      	str	r3, [sp, #104]	; 0x68
 800ae28:	46a8      	mov	r8, r5
 800ae2a:	2205      	movs	r2, #5
 800ae2c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ae30:	485e      	ldr	r0, [pc, #376]	; (800afac <_vfiprintf_r+0x210>)
 800ae32:	f7f5 f9d5 	bl	80001e0 <memchr>
 800ae36:	9b04      	ldr	r3, [sp, #16]
 800ae38:	bb78      	cbnz	r0, 800ae9a <_vfiprintf_r+0xfe>
 800ae3a:	06d9      	lsls	r1, r3, #27
 800ae3c:	bf44      	itt	mi
 800ae3e:	2220      	movmi	r2, #32
 800ae40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae44:	071a      	lsls	r2, r3, #28
 800ae46:	bf44      	itt	mi
 800ae48:	222b      	movmi	r2, #43	; 0x2b
 800ae4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae4e:	782a      	ldrb	r2, [r5, #0]
 800ae50:	2a2a      	cmp	r2, #42	; 0x2a
 800ae52:	d02a      	beq.n	800aeaa <_vfiprintf_r+0x10e>
 800ae54:	9a07      	ldr	r2, [sp, #28]
 800ae56:	46a8      	mov	r8, r5
 800ae58:	2000      	movs	r0, #0
 800ae5a:	250a      	movs	r5, #10
 800ae5c:	4641      	mov	r1, r8
 800ae5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae62:	3b30      	subs	r3, #48	; 0x30
 800ae64:	2b09      	cmp	r3, #9
 800ae66:	d969      	bls.n	800af3c <_vfiprintf_r+0x1a0>
 800ae68:	b360      	cbz	r0, 800aec4 <_vfiprintf_r+0x128>
 800ae6a:	e024      	b.n	800aeb6 <_vfiprintf_r+0x11a>
 800ae6c:	4b50      	ldr	r3, [pc, #320]	; (800afb0 <_vfiprintf_r+0x214>)
 800ae6e:	429c      	cmp	r4, r3
 800ae70:	d101      	bne.n	800ae76 <_vfiprintf_r+0xda>
 800ae72:	68b4      	ldr	r4, [r6, #8]
 800ae74:	e7a2      	b.n	800adbc <_vfiprintf_r+0x20>
 800ae76:	4b4f      	ldr	r3, [pc, #316]	; (800afb4 <_vfiprintf_r+0x218>)
 800ae78:	429c      	cmp	r4, r3
 800ae7a:	bf08      	it	eq
 800ae7c:	68f4      	ldreq	r4, [r6, #12]
 800ae7e:	e79d      	b.n	800adbc <_vfiprintf_r+0x20>
 800ae80:	4621      	mov	r1, r4
 800ae82:	4630      	mov	r0, r6
 800ae84:	f7fd fd68 	bl	8008958 <__swsetup_r>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d09d      	beq.n	800adc8 <_vfiprintf_r+0x2c>
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	b01d      	add	sp, #116	; 0x74
 800ae92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae96:	46a8      	mov	r8, r5
 800ae98:	e7a2      	b.n	800ade0 <_vfiprintf_r+0x44>
 800ae9a:	4a44      	ldr	r2, [pc, #272]	; (800afac <_vfiprintf_r+0x210>)
 800ae9c:	1a80      	subs	r0, r0, r2
 800ae9e:	fa0b f000 	lsl.w	r0, fp, r0
 800aea2:	4318      	orrs	r0, r3
 800aea4:	9004      	str	r0, [sp, #16]
 800aea6:	4645      	mov	r5, r8
 800aea8:	e7be      	b.n	800ae28 <_vfiprintf_r+0x8c>
 800aeaa:	9a03      	ldr	r2, [sp, #12]
 800aeac:	1d11      	adds	r1, r2, #4
 800aeae:	6812      	ldr	r2, [r2, #0]
 800aeb0:	9103      	str	r1, [sp, #12]
 800aeb2:	2a00      	cmp	r2, #0
 800aeb4:	db01      	blt.n	800aeba <_vfiprintf_r+0x11e>
 800aeb6:	9207      	str	r2, [sp, #28]
 800aeb8:	e004      	b.n	800aec4 <_vfiprintf_r+0x128>
 800aeba:	4252      	negs	r2, r2
 800aebc:	f043 0302 	orr.w	r3, r3, #2
 800aec0:	9207      	str	r2, [sp, #28]
 800aec2:	9304      	str	r3, [sp, #16]
 800aec4:	f898 3000 	ldrb.w	r3, [r8]
 800aec8:	2b2e      	cmp	r3, #46	; 0x2e
 800aeca:	d10e      	bne.n	800aeea <_vfiprintf_r+0x14e>
 800aecc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aed0:	2b2a      	cmp	r3, #42	; 0x2a
 800aed2:	d138      	bne.n	800af46 <_vfiprintf_r+0x1aa>
 800aed4:	9b03      	ldr	r3, [sp, #12]
 800aed6:	1d1a      	adds	r2, r3, #4
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	9203      	str	r2, [sp, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	bfb8      	it	lt
 800aee0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aee4:	f108 0802 	add.w	r8, r8, #2
 800aee8:	9305      	str	r3, [sp, #20]
 800aeea:	4d33      	ldr	r5, [pc, #204]	; (800afb8 <_vfiprintf_r+0x21c>)
 800aeec:	f898 1000 	ldrb.w	r1, [r8]
 800aef0:	2203      	movs	r2, #3
 800aef2:	4628      	mov	r0, r5
 800aef4:	f7f5 f974 	bl	80001e0 <memchr>
 800aef8:	b140      	cbz	r0, 800af0c <_vfiprintf_r+0x170>
 800aefa:	2340      	movs	r3, #64	; 0x40
 800aefc:	1b40      	subs	r0, r0, r5
 800aefe:	fa03 f000 	lsl.w	r0, r3, r0
 800af02:	9b04      	ldr	r3, [sp, #16]
 800af04:	4303      	orrs	r3, r0
 800af06:	f108 0801 	add.w	r8, r8, #1
 800af0a:	9304      	str	r3, [sp, #16]
 800af0c:	f898 1000 	ldrb.w	r1, [r8]
 800af10:	482a      	ldr	r0, [pc, #168]	; (800afbc <_vfiprintf_r+0x220>)
 800af12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af16:	2206      	movs	r2, #6
 800af18:	f108 0701 	add.w	r7, r8, #1
 800af1c:	f7f5 f960 	bl	80001e0 <memchr>
 800af20:	2800      	cmp	r0, #0
 800af22:	d037      	beq.n	800af94 <_vfiprintf_r+0x1f8>
 800af24:	4b26      	ldr	r3, [pc, #152]	; (800afc0 <_vfiprintf_r+0x224>)
 800af26:	bb1b      	cbnz	r3, 800af70 <_vfiprintf_r+0x1d4>
 800af28:	9b03      	ldr	r3, [sp, #12]
 800af2a:	3307      	adds	r3, #7
 800af2c:	f023 0307 	bic.w	r3, r3, #7
 800af30:	3308      	adds	r3, #8
 800af32:	9303      	str	r3, [sp, #12]
 800af34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af36:	444b      	add	r3, r9
 800af38:	9309      	str	r3, [sp, #36]	; 0x24
 800af3a:	e750      	b.n	800adde <_vfiprintf_r+0x42>
 800af3c:	fb05 3202 	mla	r2, r5, r2, r3
 800af40:	2001      	movs	r0, #1
 800af42:	4688      	mov	r8, r1
 800af44:	e78a      	b.n	800ae5c <_vfiprintf_r+0xc0>
 800af46:	2300      	movs	r3, #0
 800af48:	f108 0801 	add.w	r8, r8, #1
 800af4c:	9305      	str	r3, [sp, #20]
 800af4e:	4619      	mov	r1, r3
 800af50:	250a      	movs	r5, #10
 800af52:	4640      	mov	r0, r8
 800af54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af58:	3a30      	subs	r2, #48	; 0x30
 800af5a:	2a09      	cmp	r2, #9
 800af5c:	d903      	bls.n	800af66 <_vfiprintf_r+0x1ca>
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d0c3      	beq.n	800aeea <_vfiprintf_r+0x14e>
 800af62:	9105      	str	r1, [sp, #20]
 800af64:	e7c1      	b.n	800aeea <_vfiprintf_r+0x14e>
 800af66:	fb05 2101 	mla	r1, r5, r1, r2
 800af6a:	2301      	movs	r3, #1
 800af6c:	4680      	mov	r8, r0
 800af6e:	e7f0      	b.n	800af52 <_vfiprintf_r+0x1b6>
 800af70:	ab03      	add	r3, sp, #12
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	4622      	mov	r2, r4
 800af76:	4b13      	ldr	r3, [pc, #76]	; (800afc4 <_vfiprintf_r+0x228>)
 800af78:	a904      	add	r1, sp, #16
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7fb ff9e 	bl	8006ebc <_printf_float>
 800af80:	f1b0 3fff 	cmp.w	r0, #4294967295
 800af84:	4681      	mov	r9, r0
 800af86:	d1d5      	bne.n	800af34 <_vfiprintf_r+0x198>
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	065b      	lsls	r3, r3, #25
 800af8c:	f53f af7e 	bmi.w	800ae8c <_vfiprintf_r+0xf0>
 800af90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af92:	e77d      	b.n	800ae90 <_vfiprintf_r+0xf4>
 800af94:	ab03      	add	r3, sp, #12
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	4622      	mov	r2, r4
 800af9a:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <_vfiprintf_r+0x228>)
 800af9c:	a904      	add	r1, sp, #16
 800af9e:	4630      	mov	r0, r6
 800afa0:	f7fc fa42 	bl	8007428 <_printf_i>
 800afa4:	e7ec      	b.n	800af80 <_vfiprintf_r+0x1e4>
 800afa6:	bf00      	nop
 800afa8:	0800b460 	.word	0x0800b460
 800afac:	0800b5ac 	.word	0x0800b5ac
 800afb0:	0800b480 	.word	0x0800b480
 800afb4:	0800b440 	.word	0x0800b440
 800afb8:	0800b5b2 	.word	0x0800b5b2
 800afbc:	0800b5b6 	.word	0x0800b5b6
 800afc0:	08006ebd 	.word	0x08006ebd
 800afc4:	0800ad77 	.word	0x0800ad77

0800afc8 <_sbrk_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4c06      	ldr	r4, [pc, #24]	; (800afe4 <_sbrk_r+0x1c>)
 800afcc:	2300      	movs	r3, #0
 800afce:	4605      	mov	r5, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	f7f8 f8c2 	bl	800315c <_sbrk>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d102      	bne.n	800afe2 <_sbrk_r+0x1a>
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	b103      	cbz	r3, 800afe2 <_sbrk_r+0x1a>
 800afe0:	602b      	str	r3, [r5, #0]
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	2000073c 	.word	0x2000073c

0800afe8 <__sread>:
 800afe8:	b510      	push	{r4, lr}
 800afea:	460c      	mov	r4, r1
 800afec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff0:	f000 f8f4 	bl	800b1dc <_read_r>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	bfab      	itete	ge
 800aff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800affa:	89a3      	ldrhlt	r3, [r4, #12]
 800affc:	181b      	addge	r3, r3, r0
 800affe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b002:	bfac      	ite	ge
 800b004:	6563      	strge	r3, [r4, #84]	; 0x54
 800b006:	81a3      	strhlt	r3, [r4, #12]
 800b008:	bd10      	pop	{r4, pc}

0800b00a <__swrite>:
 800b00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00e:	461f      	mov	r7, r3
 800b010:	898b      	ldrh	r3, [r1, #12]
 800b012:	05db      	lsls	r3, r3, #23
 800b014:	4605      	mov	r5, r0
 800b016:	460c      	mov	r4, r1
 800b018:	4616      	mov	r6, r2
 800b01a:	d505      	bpl.n	800b028 <__swrite+0x1e>
 800b01c:	2302      	movs	r3, #2
 800b01e:	2200      	movs	r2, #0
 800b020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b024:	f000 f886 	bl	800b134 <_lseek_r>
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b02e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b032:	81a3      	strh	r3, [r4, #12]
 800b034:	4632      	mov	r2, r6
 800b036:	463b      	mov	r3, r7
 800b038:	4628      	mov	r0, r5
 800b03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b03e:	f000 b835 	b.w	800b0ac <_write_r>

0800b042 <__sseek>:
 800b042:	b510      	push	{r4, lr}
 800b044:	460c      	mov	r4, r1
 800b046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b04a:	f000 f873 	bl	800b134 <_lseek_r>
 800b04e:	1c43      	adds	r3, r0, #1
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	bf15      	itete	ne
 800b054:	6560      	strne	r0, [r4, #84]	; 0x54
 800b056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b05a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b05e:	81a3      	strheq	r3, [r4, #12]
 800b060:	bf18      	it	ne
 800b062:	81a3      	strhne	r3, [r4, #12]
 800b064:	bd10      	pop	{r4, pc}

0800b066 <__sclose>:
 800b066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06a:	f000 b831 	b.w	800b0d0 <_close_r>

0800b06e <strncmp>:
 800b06e:	b510      	push	{r4, lr}
 800b070:	b16a      	cbz	r2, 800b08e <strncmp+0x20>
 800b072:	3901      	subs	r1, #1
 800b074:	1884      	adds	r4, r0, r2
 800b076:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b07a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b07e:	4293      	cmp	r3, r2
 800b080:	d103      	bne.n	800b08a <strncmp+0x1c>
 800b082:	42a0      	cmp	r0, r4
 800b084:	d001      	beq.n	800b08a <strncmp+0x1c>
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1f5      	bne.n	800b076 <strncmp+0x8>
 800b08a:	1a98      	subs	r0, r3, r2
 800b08c:	bd10      	pop	{r4, pc}
 800b08e:	4610      	mov	r0, r2
 800b090:	e7fc      	b.n	800b08c <strncmp+0x1e>

0800b092 <__ascii_wctomb>:
 800b092:	b149      	cbz	r1, 800b0a8 <__ascii_wctomb+0x16>
 800b094:	2aff      	cmp	r2, #255	; 0xff
 800b096:	bf85      	ittet	hi
 800b098:	238a      	movhi	r3, #138	; 0x8a
 800b09a:	6003      	strhi	r3, [r0, #0]
 800b09c:	700a      	strbls	r2, [r1, #0]
 800b09e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0a2:	bf98      	it	ls
 800b0a4:	2001      	movls	r0, #1
 800b0a6:	4770      	bx	lr
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	4770      	bx	lr

0800b0ac <_write_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	4c07      	ldr	r4, [pc, #28]	; (800b0cc <_write_r+0x20>)
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	4608      	mov	r0, r1
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	6022      	str	r2, [r4, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	f7f7 fffd 	bl	80030ba <_write>
 800b0c0:	1c43      	adds	r3, r0, #1
 800b0c2:	d102      	bne.n	800b0ca <_write_r+0x1e>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	b103      	cbz	r3, 800b0ca <_write_r+0x1e>
 800b0c8:	602b      	str	r3, [r5, #0]
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}
 800b0cc:	2000073c 	.word	0x2000073c

0800b0d0 <_close_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4c06      	ldr	r4, [pc, #24]	; (800b0ec <_close_r+0x1c>)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	f7f8 f809 	bl	80030f2 <_close>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d102      	bne.n	800b0ea <_close_r+0x1a>
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	b103      	cbz	r3, 800b0ea <_close_r+0x1a>
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	2000073c 	.word	0x2000073c

0800b0f0 <_fstat_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4c07      	ldr	r4, [pc, #28]	; (800b110 <_fstat_r+0x20>)
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	f7f8 f804 	bl	800310a <_fstat>
 800b102:	1c43      	adds	r3, r0, #1
 800b104:	d102      	bne.n	800b10c <_fstat_r+0x1c>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	b103      	cbz	r3, 800b10c <_fstat_r+0x1c>
 800b10a:	602b      	str	r3, [r5, #0]
 800b10c:	bd38      	pop	{r3, r4, r5, pc}
 800b10e:	bf00      	nop
 800b110:	2000073c 	.word	0x2000073c

0800b114 <_isatty_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4c06      	ldr	r4, [pc, #24]	; (800b130 <_isatty_r+0x1c>)
 800b118:	2300      	movs	r3, #0
 800b11a:	4605      	mov	r5, r0
 800b11c:	4608      	mov	r0, r1
 800b11e:	6023      	str	r3, [r4, #0]
 800b120:	f7f8 f803 	bl	800312a <_isatty>
 800b124:	1c43      	adds	r3, r0, #1
 800b126:	d102      	bne.n	800b12e <_isatty_r+0x1a>
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	b103      	cbz	r3, 800b12e <_isatty_r+0x1a>
 800b12c:	602b      	str	r3, [r5, #0]
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	2000073c 	.word	0x2000073c

0800b134 <_lseek_r>:
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	4c07      	ldr	r4, [pc, #28]	; (800b154 <_lseek_r+0x20>)
 800b138:	4605      	mov	r5, r0
 800b13a:	4608      	mov	r0, r1
 800b13c:	4611      	mov	r1, r2
 800b13e:	2200      	movs	r2, #0
 800b140:	6022      	str	r2, [r4, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	f7f7 fffc 	bl	8003140 <_lseek>
 800b148:	1c43      	adds	r3, r0, #1
 800b14a:	d102      	bne.n	800b152 <_lseek_r+0x1e>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	b103      	cbz	r3, 800b152 <_lseek_r+0x1e>
 800b150:	602b      	str	r3, [r5, #0]
 800b152:	bd38      	pop	{r3, r4, r5, pc}
 800b154:	2000073c 	.word	0x2000073c

0800b158 <memmove>:
 800b158:	4288      	cmp	r0, r1
 800b15a:	b510      	push	{r4, lr}
 800b15c:	eb01 0302 	add.w	r3, r1, r2
 800b160:	d807      	bhi.n	800b172 <memmove+0x1a>
 800b162:	1e42      	subs	r2, r0, #1
 800b164:	4299      	cmp	r1, r3
 800b166:	d00a      	beq.n	800b17e <memmove+0x26>
 800b168:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b16c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b170:	e7f8      	b.n	800b164 <memmove+0xc>
 800b172:	4283      	cmp	r3, r0
 800b174:	d9f5      	bls.n	800b162 <memmove+0xa>
 800b176:	1881      	adds	r1, r0, r2
 800b178:	1ad2      	subs	r2, r2, r3
 800b17a:	42d3      	cmn	r3, r2
 800b17c:	d100      	bne.n	800b180 <memmove+0x28>
 800b17e:	bd10      	pop	{r4, pc}
 800b180:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b184:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b188:	e7f7      	b.n	800b17a <memmove+0x22>

0800b18a <__malloc_lock>:
 800b18a:	4770      	bx	lr

0800b18c <__malloc_unlock>:
 800b18c:	4770      	bx	lr

0800b18e <_realloc_r>:
 800b18e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b190:	4607      	mov	r7, r0
 800b192:	4614      	mov	r4, r2
 800b194:	460e      	mov	r6, r1
 800b196:	b921      	cbnz	r1, 800b1a2 <_realloc_r+0x14>
 800b198:	4611      	mov	r1, r2
 800b19a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b19e:	f7ff bc27 	b.w	800a9f0 <_malloc_r>
 800b1a2:	b922      	cbnz	r2, 800b1ae <_realloc_r+0x20>
 800b1a4:	f7ff fbd6 	bl	800a954 <_free_r>
 800b1a8:	4625      	mov	r5, r4
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ae:	f000 f827 	bl	800b200 <_malloc_usable_size_r>
 800b1b2:	42a0      	cmp	r0, r4
 800b1b4:	d20f      	bcs.n	800b1d6 <_realloc_r+0x48>
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f7ff fc19 	bl	800a9f0 <_malloc_r>
 800b1be:	4605      	mov	r5, r0
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d0f2      	beq.n	800b1aa <_realloc_r+0x1c>
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	f7fe ffac 	bl	800a124 <memcpy>
 800b1cc:	4631      	mov	r1, r6
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	f7ff fbc0 	bl	800a954 <_free_r>
 800b1d4:	e7e9      	b.n	800b1aa <_realloc_r+0x1c>
 800b1d6:	4635      	mov	r5, r6
 800b1d8:	e7e7      	b.n	800b1aa <_realloc_r+0x1c>
	...

0800b1dc <_read_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4c07      	ldr	r4, [pc, #28]	; (800b1fc <_read_r+0x20>)
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	4608      	mov	r0, r1
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	6022      	str	r2, [r4, #0]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f7f7 ff48 	bl	8003080 <_read>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d102      	bne.n	800b1fa <_read_r+0x1e>
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	b103      	cbz	r3, 800b1fa <_read_r+0x1e>
 800b1f8:	602b      	str	r3, [r5, #0]
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	2000073c 	.word	0x2000073c

0800b200 <_malloc_usable_size_r>:
 800b200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b204:	1f18      	subs	r0, r3, #4
 800b206:	2b00      	cmp	r3, #0
 800b208:	bfbc      	itt	lt
 800b20a:	580b      	ldrlt	r3, [r1, r0]
 800b20c:	18c0      	addlt	r0, r0, r3
 800b20e:	4770      	bx	lr

0800b210 <_init>:
 800b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b212:	bf00      	nop
 800b214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b216:	bc08      	pop	{r3}
 800b218:	469e      	mov	lr, r3
 800b21a:	4770      	bx	lr

0800b21c <_fini>:
 800b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21e:	bf00      	nop
 800b220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b222:	bc08      	pop	{r3}
 800b224:	469e      	mov	lr, r3
 800b226:	4770      	bx	lr
