
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e7c  08006e7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e7c  08006e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e84  08006e84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000070  08006efc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08006efc  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e355  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f7e  00000000  00000000  0002e3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00030378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  00031198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020a30  00000000  00000000  00031ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a2db  00000000  00000000  000528f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5336  00000000  00000000  0005cbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121f01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042ec  00000000  00000000  00121f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bc4 	.word	0x08006bc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006bc4 	.word	0x08006bc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
static void MX_TIM10_Init(void);
static void MX_TIM11_Init(void);
static void MX_TIM13_Init(void);
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <__io_putchar+0x20>)
 8000582:	f004 fefc 	bl	800537e <HAL_UART_Transmit>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200003cc 	.word	0x200003cc

08000594 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8000594:	b4b0      	push	{r4, r5, r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	if(sensgettime >= SENSGETCOUNT)
 800059c:	4b3e      	ldr	r3, [pc, #248]	; (8000698 <HAL_ADC_ConvCpltCallback+0x104>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d954      	bls.n	800064e <HAL_ADC_ConvCpltCallback+0xba>
	{
		sensgettime = 0;
 80005a4:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <HAL_ADC_ConvCpltCallback+0x104>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e04b      	b.n	8000648 <HAL_ADC_ConvCpltCallback+0xb4>
		{
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	73bb      	strb	r3, [r7, #14]
 80005b4:	e039      	b.n	800062a <HAL_ADC_ConvCpltCallback+0x96>
			{
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 80005b6:	2300      	movs	r3, #0
 80005b8:	737b      	strb	r3, [r7, #13]
 80005ba:	e02f      	b.n	800061c <HAL_ADC_ConvCpltCallback+0x88>
				{
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	1e5a      	subs	r2, r3, #1
 80005c0:	7bf9      	ldrb	r1, [r7, #15]
 80005c2:	4836      	ldr	r0, [pc, #216]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 80005c4:	4613      	mov	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	440b      	add	r3, r1
 80005ce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80005d2:	817b      	strh	r3, [r7, #10]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 80005d4:	7b79      	ldrb	r1, [r7, #13]
 80005d6:	7bfc      	ldrb	r4, [r7, #15]
 80005d8:	7b7b      	ldrb	r3, [r7, #13]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	7bf8      	ldrb	r0, [r7, #15]
 80005de:	4d2f      	ldr	r5, [pc, #188]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 80005e0:	460b      	mov	r3, r1
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	440b      	add	r3, r1
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	4423      	add	r3, r4
 80005ea:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 80005ee:	492b      	ldr	r1, [pc, #172]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 80005f0:	4613      	mov	r3, r2
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4413      	add	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4403      	add	r3, r0
 80005fa:	4622      	mov	r2, r4
 80005fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8000600:	7b7a      	ldrb	r2, [r7, #13]
 8000602:	7bf9      	ldrb	r1, [r7, #15]
 8000604:	4825      	ldr	r0, [pc, #148]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	897a      	ldrh	r2, [r7, #10]
 8000612:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8000616:	7b7b      	ldrb	r3, [r7, #13]
 8000618:	3b01      	subs	r3, #1
 800061a:	737b      	strb	r3, [r7, #13]
 800061c:	7b7a      	ldrb	r2, [r7, #13]
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8cb      	bhi.n	80005bc <HAL_ADC_ConvCpltCallback+0x28>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	3301      	adds	r3, #1
 8000628:	73bb      	strb	r3, [r7, #14]
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b08      	cmp	r3, #8
 800062e:	d9c2      	bls.n	80005b6 <HAL_ADC_ConvCpltCallback+0x22>
				}
			}
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	4919      	ldr	r1, [pc, #100]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 8000636:	3230      	adds	r2, #48	; 0x30
 8000638:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800063c:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <HAL_ADC_ConvCpltCallback+0x10c>)
 800063e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	3301      	adds	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	2b0b      	cmp	r3, #11
 800064c:	d9b0      	bls.n	80005b0 <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 800064e:	2300      	movs	r3, #0
 8000650:	733b      	strb	r3, [r7, #12]
 8000652:	e013      	b.n	800067c <HAL_ADC_ConvCpltCallback+0xe8>
	{
		analogbuffers[sensgettime][index] = analograw[index];
 8000654:	7b3b      	ldrb	r3, [r7, #12]
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <HAL_ADC_ConvCpltCallback+0x104>)
 8000658:	7812      	ldrb	r2, [r2, #0]
 800065a:	4610      	mov	r0, r2
 800065c:	7b3a      	ldrb	r2, [r7, #12]
 800065e:	4911      	ldr	r1, [pc, #68]	; (80006a4 <HAL_ADC_ConvCpltCallback+0x110>)
 8000660:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 8000664:	490d      	ldr	r1, [pc, #52]	; (800069c <HAL_ADC_ConvCpltCallback+0x108>)
 8000666:	4603      	mov	r3, r0
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4403      	add	r3, r0
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	4622      	mov	r2, r4
 8000672:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8000676:	7b3b      	ldrb	r3, [r7, #12]
 8000678:	3301      	adds	r3, #1
 800067a:	733b      	strb	r3, [r7, #12]
 800067c:	7b3b      	ldrb	r3, [r7, #12]
 800067e:	2b0b      	cmp	r3, #11
 8000680:	d9e8      	bls.n	8000654 <HAL_ADC_ConvCpltCallback+0xc0>
	}
	sensgettime++;
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_ADC_ConvCpltCallback+0x104>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_ADC_ConvCpltCallback+0x104>)
 800068c:	701a      	strb	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bcb0      	pop	{r4, r5, r7}
 8000696:	4770      	bx	lr
 8000698:	200000b8 	.word	0x200000b8
 800069c:	20000414 	.word	0x20000414
 80006a0:	200000a0 	.word	0x200000a0
 80006a4:	200000bc 	.word	0x200000bc

080006a8 <HAL_TIM_PeriodElapsedCallback>:
void sensor_initialize();
void sensor_finalize();
void d_print();

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a8a      	ldr	r2, [pc, #552]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	f040 80f6 	bne.w	80008a8 <HAL_TIM_PeriodElapsedCallback+0x200>
	{
#if USE_MOTOR
		if(motorenable)
 80006bc:	4b89      	ldr	r3, [pc, #548]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	f000 80e1 	beq.w	8000888 <HAL_TIM_PeriodElapsedCallback+0x1e0>
		{
#if !STATICMOTORPWM
			analogl = 0;
 80006c6:	4b88      	ldr	r3, [pc, #544]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	801a      	strh	r2, [r3, #0]
			analogr = 0;
 80006cc:	4b87      	ldr	r3, [pc, #540]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x244>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	801a      	strh	r2, [r3, #0]
			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	e059      	b.n	800078c <HAL_TIM_PeriodElapsedCallback+0xe4>
			{
				uint16_t analogbuf = analog[i];
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	4a85      	ldr	r2, [pc, #532]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80006dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006e0:	81bb      	strh	r3, [r7, #12]
				//			analogmax[i] = (analogmax[i] < analogbuf) ? analogbuf : analogmax[i];
				//			analogmin[i] = (analogmin[i] > analogbuf) ? analogbuf : analogmin[i];
				if(analogmax[i] < analogbuf)
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4a83      	ldr	r2, [pc, #524]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80006e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ea:	89ba      	ldrh	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d904      	bls.n	80006fa <HAL_TIM_PeriodElapsedCallback+0x52>
				{
					analogmax[i] = analogbuf;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	4980      	ldr	r1, [pc, #512]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80006f4:	89ba      	ldrh	r2, [r7, #12]
 80006f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}
				if(analogmin[i] > analogbuf)
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	4a7e      	ldr	r2, [pc, #504]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80006fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000702:	89ba      	ldrh	r2, [r7, #12]
 8000704:	429a      	cmp	r2, r3
 8000706:	d204      	bcs.n	8000712 <HAL_TIM_PeriodElapsedCallback+0x6a>
				{
					analogmin[i] = analogbuf;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	497b      	ldr	r1, [pc, #492]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800070c:	89ba      	ldrh	r2, [r7, #12]
 800070e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				}

				analograte[i] = ((analog[i] - analogmin[i]) * 1000) / (analogmax[i] - analogmin[i]);
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	4a76      	ldr	r2, [pc, #472]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071a:	4619      	mov	r1, r3
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4a76      	ldr	r2, [pc, #472]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000724:	1acb      	subs	r3, r1, r3
 8000726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072a:	fb02 f203 	mul.w	r2, r2, r3
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4970      	ldr	r1, [pc, #448]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000732:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000736:	4618      	mov	r0, r3
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	496f      	ldr	r1, [pc, #444]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800073c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000740:	1ac3      	subs	r3, r0, r3
 8000742:	fb92 f2f3 	sdiv	r2, r2, r3
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	b291      	uxth	r1, r2
 800074a:	4a6c      	ldr	r2, [pc, #432]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800074c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if(i % 2 == 0)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d10a      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0xca>
				{
				  analogl += analograte[i];
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	4a67      	ldr	r2, [pc, #412]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000760:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000764:	4b60      	ldr	r3, [pc, #384]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4413      	add	r3, r2
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b5e      	ldr	r3, [pc, #376]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	e009      	b.n	8000786 <HAL_TIM_PeriodElapsedCallback+0xde>
				}
				else
				{
				  analogr += analograte[i];
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4a61      	ldr	r2, [pc, #388]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000776:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800077a:	4b5c      	ldr	r3, [pc, #368]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x244>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b5a      	ldr	r3, [pc, #360]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000784:	801a      	strh	r2, [r3, #0]
			for(unsigned char i = 0; i < CALIBRATIONSIZE; i++)
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	3301      	adds	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	2b0b      	cmp	r3, #11
 8000790:	d9a2      	bls.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x30>
				}
			}
			direction = (analogl - analogr);	// difference
 8000792:	4b55      	ldr	r3, [pc, #340]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	4b54      	ldr	r3, [pc, #336]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x244>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a58      	ldr	r2, [pc, #352]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80007a0:	6013      	str	r3, [r2, #0]
			leftmotor = commonspeed - direction / CALIBRATIONSIZE / 2 * KPL - (direction - beforedirection) * KDL;
 80007a2:	4b58      	ldr	r3, [pc, #352]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	4b55      	ldr	r3, [pc, #340]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a56      	ldr	r2, [pc, #344]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80007ae:	fb82 0203 	smull	r0, r2, r2, r3
 80007b2:	1092      	asrs	r2, r2, #2
 80007b4:	17db      	asrs	r3, r3, #31
 80007b6:	1a9a      	subs	r2, r3, r2
 80007b8:	4613      	mov	r3, r2
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	18ca      	adds	r2, r1, r3
 80007c2:	4b4f      	ldr	r3, [pc, #316]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80007c4:	6819      	ldr	r1, [r3, #0]
 80007c6:	4b51      	ldr	r3, [pc, #324]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1acb      	subs	r3, r1, r3
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	4a4f      	ldr	r2, [pc, #316]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80007d2:	6013      	str	r3, [r2, #0]
			rightmotor = commonspeed + direction / CALIBRATIONSIZE / 2 * KPR + (direction - beforedirection) * KDR;
 80007d4:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4b49      	ldr	r3, [pc, #292]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a4a      	ldr	r2, [pc, #296]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80007e0:	fb82 0203 	smull	r0, r2, r2, r3
 80007e4:	1092      	asrs	r2, r2, #2
 80007e6:	17db      	asrs	r3, r3, #31
 80007e8:	1ad2      	subs	r2, r2, r3
 80007ea:	4613      	mov	r3, r2
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	1a9b      	subs	r3, r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	18ca      	adds	r2, r1, r3
 80007f4:	4b42      	ldr	r3, [pc, #264]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80007f6:	6819      	ldr	r1, [r3, #0]
 80007f8:	4b44      	ldr	r3, [pc, #272]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	1acb      	subs	r3, r1, r3
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	4413      	add	r3, r2
 8000802:	4a44      	ldr	r2, [pc, #272]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000804:	6013      	str	r3, [r2, #0]
			beforedirection = direction;
 8000806:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a40      	ldr	r2, [pc, #256]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800080c:	6013      	str	r3, [r2, #0]
#else	// !STATICMOTORPWM
			leftmotor = -COMMONSPEED;
			rightmotor = COMMONSPEED;
#endif	// !STATICMOTORPWM
			if(leftmotor < 0)
 800080e:	4b40      	ldr	r3, [pc, #256]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da0a      	bge.n	800082c <HAL_TIM_PeriodElapsedCallback+0x184>
			{
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2104      	movs	r1, #4
 800081a:	483f      	ldr	r0, [pc, #252]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800081c:	f003 f9a0 	bl	8003b60 <HAL_GPIO_WritePin>
			  leftmotor *= -1;
 8000820:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	425b      	negs	r3, r3
 8000826:	4a3a      	ldr	r2, [pc, #232]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000828:	6013      	str	r3, [r2, #0]
 800082a:	e004      	b.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x18e>
			}
			else
			{
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2104      	movs	r1, #4
 8000830:	4839      	ldr	r0, [pc, #228]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000832:	f003 f995 	bl	8003b60 <HAL_GPIO_WritePin>
			}
			if(rightmotor < 0)
 8000836:	4b37      	ldr	r3, [pc, #220]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	da0b      	bge.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x1ae>
			{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000844:	4835      	ldr	r0, [pc, #212]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000846:	f003 f98b 	bl	8003b60 <HAL_GPIO_WritePin>
			  rightmotor *= -1;
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	425b      	negs	r3, r3
 8000850:	4a30      	ldr	r2, [pc, #192]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	e005      	b.n	8000862 <HAL_TIM_PeriodElapsedCallback+0x1ba>
			}
			else
			{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085c:	482f      	ldr	r0, [pc, #188]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800085e:	f003 f97f 	bl	8003b60 <HAL_GPIO_WritePin>
			}
			leftmotor = leftmotor > PWMMAX ? PWMMAX : leftmotor;
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f5b3 6f52 	cmp.w	r3, #3360	; 0xd20
 800086a:	bfa8      	it	ge
 800086c:	f44f 6352 	movge.w	r3, #3360	; 0xd20
 8000870:	4a27      	ldr	r2, [pc, #156]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000872:	6013      	str	r3, [r2, #0]
			rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f5b3 6f52 	cmp.w	r3, #3360	; 0xd20
 800087c:	bfa8      	it	ge
 800087e:	f44f 6352 	movge.w	r3, #3360	; 0xd20
 8000882:	4a24      	ldr	r2, [pc, #144]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e005      	b.n	8000894 <HAL_TIM_PeriodElapsedCallback+0x1ec>
		}
		else
		{
			leftmotor = 0;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
			rightmotor = 0;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
		}

#if !D_PWM
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	639a      	str	r2, [r3, #56]	; 0x38
			pwmsteptime = (pwmstepud == 255) ? pwmsteptime - 1 : pwmsteptime + 1;
		}
#endif	// D_PWM
#endif
	}	// TIM6
	if(htim->Instance == TIM10)	// TIM10 // 1ms
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1d      	ldr	r2, [pc, #116]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	f040 8111 	bne.w	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x42e>
	{
#if USE_SIDESENSOR
		unsigned char subsens, first, second;

		subsens = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0; // right
 80008b4:	2104      	movs	r1, #4
 80008b6:	481c      	ldr	r0, [pc, #112]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80008b8:	f003 f93a 	bl	8003b30 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf0c      	ite	eq
 80008c2:	2301      	moveq	r3, #1
 80008c4:	2300      	movne	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	72fb      	strb	r3, [r7, #11]
		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 80008ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80008d0:	f003 f92e 	bl	8003b30 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d128      	bne.n	800092c <HAL_TIM_PeriodElapsedCallback+0x284>
 80008da:	2302      	movs	r3, #2
 80008dc:	e027      	b.n	800092e <HAL_TIM_PeriodElapsedCallback+0x286>
 80008de:	bf00      	nop
 80008e0:	40001000 	.word	0x40001000
 80008e4:	2000040c 	.word	0x2000040c
 80008e8:	20000196 	.word	0x20000196
 80008ec:	2000040e 	.word	0x2000040e
 80008f0:	200000a0 	.word	0x200000a0
 80008f4:	200004ec 	.word	0x200004ec
 80008f8:	2000017c 	.word	0x2000017c
 80008fc:	200002c0 	.word	0x200002c0
 8000900:	200001ec 	.word	0x200001ec
 8000904:	2000019c 	.word	0x2000019c
 8000908:	2aaaaaab 	.word	0x2aaaaaab
 800090c:	2000054c 	.word	0x2000054c
 8000910:	20000174 	.word	0x20000174
 8000914:	20000168 	.word	0x20000168
 8000918:	40020c00 	.word	0x40020c00
 800091c:	40020800 	.word	0x40020800
 8000920:	200000dc 	.word	0x200000dc
 8000924:	40014400 	.word	0x40014400
 8000928:	40020400 	.word	0x40020400
 800092c:	2300      	movs	r3, #0
 800092e:	b2da      	uxtb	r2, r3
 8000930:	7afb      	ldrb	r3, [r7, #11]
 8000932:	4413      	add	r3, r2
 8000934:	72fb      	strb	r3, [r7, #11]

		if(subsens != subsensbuf)
 8000936:	4b9d      	ldr	r3, [pc, #628]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	7afa      	ldrb	r2, [r7, #11]
 800093c:	429a      	cmp	r2, r3
 800093e:	d05c      	beq.n	80009fa <HAL_TIM_PeriodElapsedCallback+0x352>
		{
			subsensbuf = subsens;
 8000940:	4a9a      	ldr	r2, [pc, #616]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000942:	7afb      	ldrb	r3, [r7, #11]
 8000944:	7013      	strb	r3, [r2, #0]
			marker += subsens << (2 * sidedeltacount);
 8000946:	7afa      	ldrb	r2, [r7, #11]
 8000948:	4b99      	ldr	r3, [pc, #612]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b97      	ldr	r3, [pc, #604]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4413      	add	r3, r2
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b95      	ldr	r3, [pc, #596]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800095e:	701a      	strb	r2, [r3, #0]
			if(subsens == 0b00 && sidedeltacount != 0)
 8000960:	7afb      	ldrb	r3, [r7, #11]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d143      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x346>
 8000966:	4b92      	ldr	r3, [pc, #584]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d03f      	beq.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x346>
			{
				first = (marker & 0b0011);
 800096e:	4b91      	ldr	r3, [pc, #580]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	72bb      	strb	r3, [r7, #10]
				second = (marker & 0b1100) >> 2;
 8000978:	4b8e      	ldr	r3, [pc, #568]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	109b      	asrs	r3, r3, #2
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f003 0303 	and.w	r3, r3, #3
 8000984:	727b      	strb	r3, [r7, #9]
				if(second == 0b00)
 8000986:	7a7b      	ldrb	r3, [r7, #9]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d123      	bne.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x32c>
				{
					if(first == 0b01)
 800098c:	7abb      	ldrb	r3, [r7, #10]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d115      	bne.n	80009be <HAL_TIM_PeriodElapsedCallback+0x316>
					{
						// right -> stop
						markerstate = 0b01;
 8000992:	4b89      	ldr	r3, [pc, #548]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
						if(rightmarkercount == 0)
 8000998:	4b88      	ldr	r3, [pc, #544]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x514>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d106      	bne.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x306>
						{
							rightmarkercount++;
 80009a0:	4b86      	ldr	r3, [pc, #536]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x514>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b84      	ldr	r3, [pc, #528]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x514>)
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	e015      	b.n	80009da <HAL_TIM_PeriodElapsedCallback+0x332>
						}
						else if(rightmarkercount == 1)
 80009ae:	4b83      	ldr	r3, [pc, #524]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x514>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d111      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x332>
						{
							motorenable = 0;
 80009b6:	4b82      	ldr	r3, [pc, #520]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e00d      	b.n	80009da <HAL_TIM_PeriodElapsedCallback+0x332>
						}
					}
					else if(first == 0b10)
 80009be:	7abb      	ldrb	r3, [r7, #10]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d103      	bne.n	80009cc <HAL_TIM_PeriodElapsedCallback+0x324>
					{
						// left -> curve
						markerstate = 0b10;
 80009c4:	4b7c      	ldr	r3, [pc, #496]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	e006      	b.n	80009da <HAL_TIM_PeriodElapsedCallback+0x332>
					}
					else
					{
						// cross
						markerstate = 0b11;
 80009cc:	4b7a      	ldr	r3, [pc, #488]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80009ce:	2203      	movs	r2, #3
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e002      	b.n	80009da <HAL_TIM_PeriodElapsedCallback+0x332>
					}
				}
				else
				{
					// cross
					markerstate = 0b11;
 80009d4:	4b78      	ldr	r3, [pc, #480]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80009d6:	2203      	movs	r2, #3
 80009d8:	701a      	strb	r2, [r3, #0]
				}
				sidedeltacount = 0;
 80009da:	4b75      	ldr	r3, [pc, #468]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
				marker = 0;
 80009e0:	4b74      	ldr	r3, [pc, #464]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
				markerstate = 0;
 80009e6:	4b74      	ldr	r3, [pc, #464]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	e005      	b.n	80009fa <HAL_TIM_PeriodElapsedCallback+0x352>
			}
			else
			{
				sidedeltacount++;
 80009ee:	4b70      	ldr	r3, [pc, #448]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b6e      	ldr	r3, [pc, #440]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80009f8:	701a      	strb	r2, [r3, #0]
			}
		}
#endif	// USE_SIDESENSOR

#if USE_ENCODER
		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);	// Left
 80009fa:	213c      	movs	r1, #60	; 0x3c
 80009fc:	4871      	ldr	r0, [pc, #452]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80009fe:	f003 ff2e 	bl	800485e <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);	// Right
 8000a02:	213c      	movs	r1, #60	; 0x3c
 8000a04:	4870      	ldr	r0, [pc, #448]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8000a06:	f003 ff2a 	bl	800485e <HAL_TIM_Encoder_Stop>

		encl_row = TIM1->CNT;
 8000a0a:	4b70      	ldr	r3, [pc, #448]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x524>)
 8000a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000a12:	801a      	strh	r2, [r3, #0]
		encr_row = 65535 - TIM3->CNT;
 8000a14:	4b6f      	ldr	r3, [pc, #444]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8000a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	4b6e      	ldr	r3, [pc, #440]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000a20:	801a      	strh	r2, [r3, #0]

		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// Left
 8000a22:	213c      	movs	r1, #60	; 0x3c
 8000a24:	4867      	ldr	r0, [pc, #412]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8000a26:	f003 fee3 	bl	80047f0 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	// Right
 8000a2a:	213c      	movs	r1, #60	; 0x3c
 8000a2c:	4866      	ldr	r0, [pc, #408]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8000a2e:	f003 fedf 	bl	80047f0 <HAL_TIM_Encoder_Start>

		if(encl_row < encl)
 8000a32:	4b67      	ldr	r3, [pc, #412]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000a34:	881a      	ldrh	r2, [r3, #0]
 8000a36:	4b69      	ldr	r3, [pc, #420]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d208      	bcs.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0x3a8>
		{
			dencl = encl_row + 65536 - encl;
 8000a3e:	4b64      	ldr	r3, [pc, #400]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000a40:	881a      	ldrh	r2, [r3, #0]
 8000a42:	4b66      	ldr	r3, [pc, #408]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	4b65      	ldr	r3, [pc, #404]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000a4c:	801a      	strh	r2, [r3, #0]
 8000a4e:	e007      	b.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		}
		else
		{
			dencl = encl_row - encl;
 8000a50:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000a52:	881a      	ldrh	r2, [r3, #0]
 8000a54:	4b61      	ldr	r3, [pc, #388]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000a5e:	801a      	strh	r2, [r3, #0]
		}
		if(encr_row < encr)
 8000a60:	4b5d      	ldr	r3, [pc, #372]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000a62:	881a      	ldrh	r2, [r3, #0]
 8000a64:	4b5f      	ldr	r3, [pc, #380]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d208      	bcs.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x3d6>
		{
			dencr = encr_row + 65536 - encr;
 8000a6c:	4b5a      	ldr	r3, [pc, #360]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000a6e:	881a      	ldrh	r2, [r3, #0]
 8000a70:	4b5c      	ldr	r3, [pc, #368]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b5b      	ldr	r3, [pc, #364]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000a7a:	801a      	strh	r2, [r3, #0]
 8000a7c:	e007      	b.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x3e6>
		}
		else
		{
			dencr = encr_row - encr;
 8000a7e:	4b56      	ldr	r3, [pc, #344]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000a80:	881a      	ldrh	r2, [r3, #0]
 8000a82:	4b58      	ldr	r3, [pc, #352]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4b57      	ldr	r3, [pc, #348]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000a8c:	801a      	strh	r2, [r3, #0]
		}

		encl = encl_row;
 8000a8e:	4b50      	ldr	r3, [pc, #320]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8000a90:	881a      	ldrh	r2, [r3, #0]
 8000a92:	4b52      	ldr	r3, [pc, #328]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x534>)
 8000a94:	801a      	strh	r2, [r3, #0]
		encr = encr_row;
 8000a96:	4b50      	ldr	r3, [pc, #320]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8000a98:	881a      	ldrh	r2, [r3, #0]
 8000a9a:	4b52      	ldr	r3, [pc, #328]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8000a9c:	801a      	strh	r2, [r3, #0]

		lengthl = LENGTHPERPULSE * dencl;	// um
 8000a9e:	4b50      	ldr	r3, [pc, #320]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b51      	ldr	r3, [pc, #324]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	fb03 f302 	mul.w	r3, r3, r2
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b50      	ldr	r3, [pc, #320]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000ab0:	601a      	str	r2, [r3, #0]
		lengthr = LENGTHPERPULSE * dencr;	// um
 8000ab2:	4b4d      	ldr	r3, [pc, #308]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b4c      	ldr	r3, [pc, #304]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x544>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	fb03 f302 	mul.w	r3, r3, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000ac4:	601a      	str	r2, [r3, #0]

		velocityl = lengthl / 1;
 8000ac6:	4b4a      	ldr	r3, [pc, #296]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a4b      	ldr	r2, [pc, #300]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8000acc:	6013      	str	r3, [r2, #0]
		velocityr = lengthr / 1;
 8000ace:	4b49      	ldr	r3, [pc, #292]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a4a      	ldr	r2, [pc, #296]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x554>)
 8000ad4:	6013      	str	r3, [r2, #0]
#endif	// USE_ENCODER
	}	// TIM10

	if(htim->Instance == TIM11)	// TIM11 // 1ms
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a49      	ldr	r2, [pc, #292]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d161      	bne.n	8000ba4 <HAL_TIM_PeriodElapsedCallback+0x4fc>
	{
		uint8_t rotary_value_row;
		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 8000ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae4:	4847      	ldr	r0, [pc, #284]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000ae6:	f003 f823 	bl	8003b30 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf0c      	ite	eq
 8000af0:	2301      	moveq	r3, #1
 8000af2:	2300      	movne	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 8000af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afc:	4841      	ldr	r0, [pc, #260]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000afe:	f003 f817 	bl	8003b30 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <HAL_TIM_PeriodElapsedCallback+0x464>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x466>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	7a3b      	ldrb	r3, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	483b      	ldr	r0, [pc, #236]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000b1c:	f003 f808 	bl	8003b30 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d101      	bne.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x482>
 8000b26:	2304      	movs	r3, #4
 8000b28:	e000      	b.n	8000b2c <HAL_TIM_PeriodElapsedCallback+0x484>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	7a3b      	ldrb	r3, [r7, #8]
 8000b30:	4413      	add	r3, r2
 8000b32:	723b      	strb	r3, [r7, #8]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 8000b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b38:	4832      	ldr	r0, [pc, #200]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000b3a:	f002 fff9 	bl	8003b30 <HAL_GPIO_ReadPin>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d101      	bne.n	8000b48 <HAL_TIM_PeriodElapsedCallback+0x4a0>
 8000b44:	2308      	movs	r3, #8
 8000b46:	e000      	b.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x4a2>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	7a3b      	ldrb	r3, [r7, #8]
 8000b4e:	4413      	add	r3, r2
 8000b50:	723b      	strb	r3, [r7, #8]
		rotary_value = rotary_value_row;
 8000b52:	4a2e      	ldr	r2, [pc, #184]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000b54:	7a3b      	ldrb	r3, [r7, #8]
 8000b56:	7013      	strb	r3, [r2, #0]

		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5c:	4829      	ldr	r0, [pc, #164]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000b5e:	f002 ffe7 	bl	8003b30 <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10a      	bne.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x4d6>
 8000b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b6c:	4825      	ldr	r0, [pc, #148]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000b6e:	f002 ffdf 	bl	8003b30 <HAL_GPIO_ReadPin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x4d6>
		{
			enter = 1;
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000b7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b82:	4820      	ldr	r0, [pc, #128]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000b84:	f002 ffd4 	bl	8003b30 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d00a      	beq.n	8000ba4 <HAL_TIM_PeriodElapsedCallback+0x4fc>
 8000b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b92:	481c      	ldr	r0, [pc, #112]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8000b94:	f002 ffcc 	bl	8003b30 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <HAL_TIM_PeriodElapsedCallback+0x4fc>
		{
			enter = 0;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
	}

	if(htim->Instance == TIM7)	// TIM7 // 0.1ms
	{
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000198 	.word	0x20000198
 8000bb0:	200001e2 	.word	0x200001e2
 8000bb4:	2000033c 	.word	0x2000033c
 8000bb8:	2000023d 	.word	0x2000023d
 8000bbc:	20000550 	.word	0x20000550
 8000bc0:	2000040c 	.word	0x2000040c
 8000bc4:	20000380 	.word	0x20000380
 8000bc8:	200001a0 	.word	0x200001a0
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	2000016e 	.word	0x2000016e
 8000bd4:	40000400 	.word	0x40000400
 8000bd8:	2000016c 	.word	0x2000016c
 8000bdc:	200001e0 	.word	0x200001e0
 8000be0:	2000019a 	.word	0x2000019a
 8000be4:	20000098 	.word	0x20000098
 8000be8:	2000009a 	.word	0x2000009a
 8000bec:	200003c8 	.word	0x200003c8
 8000bf0:	200003c0 	.word	0x200003c0
 8000bf4:	20000508 	.word	0x20000508
 8000bf8:	2000009c 	.word	0x2000009c
 8000bfc:	20000164 	.word	0x20000164
 8000c00:	40014800 	.word	0x40014800
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	20000194 	.word	0x20000194
 8000c10:	20000551 	.word	0x20000551

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1a:	f001 fc37 	bl	800248c <HAL_Init>

  /* USER CODE BEGIN Init */
	enter = 0;
 8000c1e:	4bac      	ldr	r3, [pc, #688]	; (8000ed0 <main+0x2bc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
	motorenable = 0;
 8000c24:	4bab      	ldr	r3, [pc, #684]	; (8000ed4 <main+0x2c0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
	subsensbuf = 0;
 8000c2a:	4bab      	ldr	r3, [pc, #684]	; (8000ed8 <main+0x2c4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
	marker = 0;
 8000c30:	4baa      	ldr	r3, [pc, #680]	; (8000edc <main+0x2c8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
	sidedeltacount = 0;
 8000c36:	4baa      	ldr	r3, [pc, #680]	; (8000ee0 <main+0x2cc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
	markerstate = 0;
 8000c3c:	4ba9      	ldr	r3, [pc, #676]	; (8000ee4 <main+0x2d0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
	rightmarkercount = 0;
 8000c42:	4ba9      	ldr	r3, [pc, #676]	; (8000ee8 <main+0x2d4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
	leftmotor = 0;
 8000c48:	4ba8      	ldr	r3, [pc, #672]	; (8000eec <main+0x2d8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
	rightmotor = 0;
 8000c4e:	4ba8      	ldr	r3, [pc, #672]	; (8000ef0 <main+0x2dc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
	sensgettime = 0;
 8000c54:	4ba7      	ldr	r3, [pc, #668]	; (8000ef4 <main+0x2e0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
	prelengthl = 0;
 8000c5a:	4ba7      	ldr	r3, [pc, #668]	; (8000ef8 <main+0x2e4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
	prelengthr = 0;
 8000c60:	4ba6      	ldr	r3, [pc, #664]	; (8000efc <main+0x2e8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
	rotary_value = 0;
 8000c66:	4ba6      	ldr	r3, [pc, #664]	; (8000f00 <main+0x2ec>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
	beforedirection = 0;
 8000c6c:	4ba5      	ldr	r3, [pc, #660]	; (8000f04 <main+0x2f0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
	LENGTHPERPULSE = PI * TIREDIAMETER * PINIONGEAR / SPURGEAR / PULSEPERROTATE;
 8000c72:	4ba5      	ldr	r3, [pc, #660]	; (8000f08 <main+0x2f4>)
 8000c74:	2227      	movs	r2, #39	; 0x27
 8000c76:	601a      	str	r2, [r3, #0]
	commonspeed = COMMONSPEED;
 8000c78:	4ba4      	ldr	r3, [pc, #656]	; (8000f0c <main+0x2f8>)
 8000c7a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000c7e:	801a      	strh	r2, [r3, #0]
#if D_PWM
	pwmsteptime = 0;
	pwmstepud = 1;
#endif

	for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	e00d      	b.n	8000ca2 <main+0x8e>
	{
		analogmax[i] = 0;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	4aa1      	ldr	r2, [pc, #644]	; (8000f10 <main+0x2fc>)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmin[i] = 4096;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	4aa0      	ldr	r2, [pc, #640]	; (8000f14 <main+0x300>)
 8000c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b0b      	cmp	r3, #11
 8000ca6:	d9ee      	bls.n	8000c86 <main+0x72>
	}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca8:	f000 f9f2 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cac:	f000 fdb0 	bl	8001810 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb0:	f000 fd8e 	bl	80017d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cb4:	f000 fa56 	bl	8001164 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000cb8:	f000 fd60 	bl	800177c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8000cbc:	f000 fc86 	bl	80015cc <MX_TIM6_Init>
  MX_TIM4_Init();
 8000cc0:	f000 fc20 	bl	8001504 <MX_TIM4_Init>
  MX_TIM7_Init();
 8000cc4:	f000 fcb8 	bl	8001638 <MX_TIM7_Init>
  MX_TIM1_Init();
 8000cc8:	f000 fb70 	bl	80013ac <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ccc:	f000 fbc6 	bl	800145c <MX_TIM3_Init>
  MX_TIM10_Init();
 8000cd0:	f000 fce8 	bl	80016a4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000cd4:	f000 fd0a 	bl	80016ec <MX_TIM11_Init>
  MX_TIM13_Init();
 8000cd8:	f000 fd2c 	bl	8001734 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8000cdc:	488e      	ldr	r0, [pc, #568]	; (8000f18 <main+0x304>)
 8000cde:	f004 ffdf 	bl	8005ca0 <iprintf>
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8000ce2:	488e      	ldr	r0, [pc, #568]	; (8000f1c <main+0x308>)
 8000ce4:	f005 f864 	bl	8005db0 <puts>

	printf("Starting Analog Read\r\n");
 8000ce8:	488d      	ldr	r0, [pc, #564]	; (8000f20 <main+0x30c>)
 8000cea:	f005 f861 	bl	8005db0 <puts>
	if(HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
 8000cee:	488d      	ldr	r0, [pc, #564]	; (8000f24 <main+0x310>)
 8000cf0:	f001 fc60 	bl	80025b4 <HAL_ADC_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <main+0xea>
 8000cfa:	f000 ffd9 	bl	8001cb0 <Error_Handler>

	printf("Starting TIM11\r\n");
 8000cfe:	488a      	ldr	r0, [pc, #552]	; (8000f28 <main+0x314>)
 8000d00:	f005 f856 	bl	8005db0 <puts>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8000d04:	4889      	ldr	r0, [pc, #548]	; (8000f2c <main+0x318>)
 8000d06:	f003 fbd0 	bl	80044aa <HAL_TIM_Base_Start_IT>

#if D_ENCODER
	printf("LENGTHPERPULSE = %u\r\n", LENGTHPERPULSE);
 8000d0a:	4b7f      	ldr	r3, [pc, #508]	; (8000f08 <main+0x2f4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4887      	ldr	r0, [pc, #540]	; (8000f30 <main+0x31c>)
 8000d12:	f004 ffc5 	bl	8005ca0 <iprintf>
#endif

	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	led_rgb(1, 1, 1);	// White
 8000d16:	2201      	movs	r2, #1
 8000d18:	2101      	movs	r1, #1
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f000 fe50 	bl	80019c0 <led_rgb>
	while (1)
	{
		printf("///// WHILE /////\n\r");
 8000d20:	4884      	ldr	r0, [pc, #528]	; (8000f34 <main+0x320>)
 8000d22:	f004 ffbd 	bl	8005ca0 <iprintf>
#if D_SWITCH
		printf("enter = %d\r\n", enter);
 8000d26:	4b6a      	ldr	r3, [pc, #424]	; (8000ed0 <main+0x2bc>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4882      	ldr	r0, [pc, #520]	; (8000f38 <main+0x324>)
 8000d2e:	f004 ffb7 	bl	8005ca0 <iprintf>
#endif
#if D_ROTARY
		printf("rotary_value = %d\r\n", rotary_value);
 8000d32:	4b73      	ldr	r3, [pc, #460]	; (8000f00 <main+0x2ec>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4880      	ldr	r0, [pc, #512]	; (8000f3c <main+0x328>)
 8000d3a:	f004 ffb1 	bl	8005ca0 <iprintf>
#endif
		if(enter)
 8000d3e:	4b64      	ldr	r3, [pc, #400]	; (8000ed0 <main+0x2bc>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0ec      	beq.n	8000d20 <main+0x10c>
		{
			switch(rotary_value)
 8000d46:	4b6e      	ldr	r3, [pc, #440]	; (8000f00 <main+0x2ec>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d8e8      	bhi.n	8000d20 <main+0x10c>
 8000d4e:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <main+0x140>)
 8000d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d54:	08000d65 	.word	0x08000d65
 8000d58:	08001011 	.word	0x08001011
 8000d5c:	0800102f 	.word	0x0800102f
 8000d60:	0800104d 	.word	0x0800104d
			{
				case 0x0:
					led_rgb(1, 1, 0);	// Yellow
 8000d64:	2200      	movs	r2, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f000 fe29 	bl	80019c0 <led_rgb>

					sensor_initialize();
 8000d6e:	f000 fe5d 	bl	8001a2c <sensor_initialize>

					while(enter)
 8000d72:	e03e      	b.n	8000df2 <main+0x1de>
					{
						for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	73bb      	strb	r3, [r7, #14]
 8000d78:	e035      	b.n	8000de6 <main+0x1d2>
						{
							uint16_t analogbuf = analog[j];
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	4a70      	ldr	r2, [pc, #448]	; (8000f40 <main+0x32c>)
 8000d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d82:	80bb      	strh	r3, [r7, #4]
							analogmax[j] = (analogmax[j] < analogbuf) ? analogbuf : analogmax[j];
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	4a62      	ldr	r2, [pc, #392]	; (8000f10 <main+0x2fc>)
 8000d88:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	88b9      	ldrh	r1, [r7, #4]
 8000d90:	428a      	cmp	r2, r1
 8000d92:	bf38      	it	cc
 8000d94:	460a      	movcc	r2, r1
 8000d96:	b291      	uxth	r1, r2
 8000d98:	4a5d      	ldr	r2, [pc, #372]	; (8000f10 <main+0x2fc>)
 8000d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							analogmin[j] = (analogmin[j] > analogbuf) ? analogbuf : analogmin[j];
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	4a5c      	ldr	r2, [pc, #368]	; (8000f14 <main+0x300>)
 8000da2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000da6:	7bbb      	ldrb	r3, [r7, #14]
 8000da8:	88b9      	ldrh	r1, [r7, #4]
 8000daa:	428a      	cmp	r2, r1
 8000dac:	bf28      	it	cs
 8000dae:	460a      	movcs	r2, r1
 8000db0:	b291      	uxth	r1, r2
 8000db2:	4a58      	ldr	r2, [pc, #352]	; (8000f14 <main+0x300>)
 8000db4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if D_ANALOG
							printf("[%2d] = ", j);
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4861      	ldr	r0, [pc, #388]	; (8000f44 <main+0x330>)
 8000dbe:	f004 ff6f 	bl	8005ca0 <iprintf>
							printf("%4d", analogbuf);
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4860      	ldr	r0, [pc, #384]	; (8000f48 <main+0x334>)
 8000dc8:	f004 ff6a 	bl	8005ca0 <iprintf>
							if(j != CALIBRATIONSIZE - 1)
 8000dcc:	7bbb      	ldrb	r3, [r7, #14]
 8000dce:	2b0b      	cmp	r3, #11
 8000dd0:	d003      	beq.n	8000dda <main+0x1c6>
							{
								printf(", ");
 8000dd2:	485e      	ldr	r0, [pc, #376]	; (8000f4c <main+0x338>)
 8000dd4:	f004 ff64 	bl	8005ca0 <iprintf>
 8000dd8:	e002      	b.n	8000de0 <main+0x1cc>
							}
							else
							{
								printf("\r\n");
 8000dda:	485d      	ldr	r0, [pc, #372]	; (8000f50 <main+0x33c>)
 8000ddc:	f004 ffe8 	bl	8005db0 <puts>
						for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000de0:	7bbb      	ldrb	r3, [r7, #14]
 8000de2:	3301      	adds	r3, #1
 8000de4:	73bb      	strb	r3, [r7, #14]
 8000de6:	7bbb      	ldrb	r3, [r7, #14]
 8000de8:	2b0b      	cmp	r3, #11
 8000dea:	d9c6      	bls.n	8000d7a <main+0x166>
							}
#endif
						}
						HAL_Delay(250);
 8000dec:	20fa      	movs	r0, #250	; 0xfa
 8000dee:	f001 fbbf 	bl	8002570 <HAL_Delay>
					while(enter)
 8000df2:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <main+0x2bc>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1bc      	bne.n	8000d74 <main+0x160>
					}
					sensor_finalize();
 8000dfa:	f000 fe33 	bl	8001a64 <sensor_finalize>
#if D_ANALOG
					printf(ESC_YEL);
 8000dfe:	4855      	ldr	r0, [pc, #340]	; (8000f54 <main+0x340>)
 8000e00:	f004 ff4e 	bl	8005ca0 <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	737b      	strb	r3, [r7, #13]
 8000e08:	e00f      	b.n	8000e2a <main+0x216>
					{
							printf("[%2d] = ", j);
 8000e0a:	7b7b      	ldrb	r3, [r7, #13]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	484d      	ldr	r0, [pc, #308]	; (8000f44 <main+0x330>)
 8000e10:	f004 ff46 	bl	8005ca0 <iprintf>
							printf("%4d,", analogmax[j]);
 8000e14:	7b7b      	ldrb	r3, [r7, #13]
 8000e16:	4a3e      	ldr	r2, [pc, #248]	; (8000f10 <main+0x2fc>)
 8000e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	484e      	ldr	r0, [pc, #312]	; (8000f58 <main+0x344>)
 8000e20:	f004 ff3e 	bl	8005ca0 <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000e24:	7b7b      	ldrb	r3, [r7, #13]
 8000e26:	3301      	adds	r3, #1
 8000e28:	737b      	strb	r3, [r7, #13]
 8000e2a:	7b7b      	ldrb	r3, [r7, #13]
 8000e2c:	2b0b      	cmp	r3, #11
 8000e2e:	d9ec      	bls.n	8000e0a <main+0x1f6>
					}
					printf("\r\n");
 8000e30:	4847      	ldr	r0, [pc, #284]	; (8000f50 <main+0x33c>)
 8000e32:	f004 ffbd 	bl	8005db0 <puts>
					printf(ESC_CYA);
 8000e36:	4849      	ldr	r0, [pc, #292]	; (8000f5c <main+0x348>)
 8000e38:	f004 ff32 	bl	8005ca0 <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	733b      	strb	r3, [r7, #12]
 8000e40:	e00f      	b.n	8000e62 <main+0x24e>
					{
							printf("[%2d] = ", j);
 8000e42:	7b3b      	ldrb	r3, [r7, #12]
 8000e44:	4619      	mov	r1, r3
 8000e46:	483f      	ldr	r0, [pc, #252]	; (8000f44 <main+0x330>)
 8000e48:	f004 ff2a 	bl	8005ca0 <iprintf>
							printf("%4d,", analogmin[j]);
 8000e4c:	7b3b      	ldrb	r3, [r7, #12]
 8000e4e:	4a31      	ldr	r2, [pc, #196]	; (8000f14 <main+0x300>)
 8000e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4840      	ldr	r0, [pc, #256]	; (8000f58 <main+0x344>)
 8000e58:	f004 ff22 	bl	8005ca0 <iprintf>
					for(unsigned char j = 0; CALIBRATIONSIZE > j; j++)
 8000e5c:	7b3b      	ldrb	r3, [r7, #12]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	733b      	strb	r3, [r7, #12]
 8000e62:	7b3b      	ldrb	r3, [r7, #12]
 8000e64:	2b0b      	cmp	r3, #11
 8000e66:	d9ec      	bls.n	8000e42 <main+0x22e>
					}
					printf("\r\n");
 8000e68:	4839      	ldr	r0, [pc, #228]	; (8000f50 <main+0x33c>)
 8000e6a:	f004 ffa1 	bl	8005db0 <puts>
					printf(ESC_DEF);
 8000e6e:	482a      	ldr	r0, [pc, #168]	; (8000f18 <main+0x304>)
 8000e70:	f004 ff16 	bl	8005ca0 <iprintf>
					for(unsigned char i = 0; 5 * CALIBRATIONSIZE > i; i++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	72fb      	strb	r3, [r7, #11]
 8000e78:	e005      	b.n	8000e86 <main+0x272>
					{
							printf("v");
 8000e7a:	2076      	movs	r0, #118	; 0x76
 8000e7c:	f004 ff28 	bl	8005cd0 <putchar>
					for(unsigned char i = 0; 5 * CALIBRATIONSIZE > i; i++)
 8000e80:	7afb      	ldrb	r3, [r7, #11]
 8000e82:	3301      	adds	r3, #1
 8000e84:	72fb      	strb	r3, [r7, #11]
 8000e86:	7afb      	ldrb	r3, [r7, #11]
 8000e88:	2b3b      	cmp	r3, #59	; 0x3b
 8000e8a:	d9f6      	bls.n	8000e7a <main+0x266>
					}
					printf("\r\n");
 8000e8c:	4830      	ldr	r0, [pc, #192]	; (8000f50 <main+0x33c>)
 8000e8e:	f004 ff8f 	bl	8005db0 <puts>
					printf(ESC_YEL);
 8000e92:	4830      	ldr	r0, [pc, #192]	; (8000f54 <main+0x340>)
 8000e94:	f004 ff04 	bl	8005ca0 <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	72bb      	strb	r3, [r7, #10]
 8000e9c:	e011      	b.n	8000ec2 <main+0x2ae>
					{
							printf("[%2d] = ", i * 2);
 8000e9e:	7abb      	ldrb	r3, [r7, #10]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4827      	ldr	r0, [pc, #156]	; (8000f44 <main+0x330>)
 8000ea6:	f004 fefb 	bl	8005ca0 <iprintf>
							printf("%4d, ", analogmax[i * 2]);
 8000eaa:	7abb      	ldrb	r3, [r7, #10]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <main+0x2fc>)
 8000eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	482a      	ldr	r0, [pc, #168]	; (8000f60 <main+0x34c>)
 8000eb8:	f004 fef2 	bl	8005ca0 <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000ebc:	7abb      	ldrb	r3, [r7, #10]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	72bb      	strb	r3, [r7, #10]
 8000ec2:	7abb      	ldrb	r3, [r7, #10]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d9ea      	bls.n	8000e9e <main+0x28a>
					}
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000ec8:	2306      	movs	r3, #6
 8000eca:	727b      	strb	r3, [r7, #9]
 8000ecc:	e05e      	b.n	8000f8c <main+0x378>
 8000ece:	bf00      	nop
 8000ed0:	20000551 	.word	0x20000551
 8000ed4:	2000040c 	.word	0x2000040c
 8000ed8:	20000198 	.word	0x20000198
 8000edc:	2000033c 	.word	0x2000033c
 8000ee0:	200001e2 	.word	0x200001e2
 8000ee4:	2000023d 	.word	0x2000023d
 8000ee8:	20000550 	.word	0x20000550
 8000eec:	20000174 	.word	0x20000174
 8000ef0:	20000168 	.word	0x20000168
 8000ef4:	200000b8 	.word	0x200000b8
 8000ef8:	200001e4 	.word	0x200001e4
 8000efc:	2000011c 	.word	0x2000011c
 8000f00:	20000194 	.word	0x20000194
 8000f04:	2000054c 	.word	0x2000054c
 8000f08:	200003c8 	.word	0x200003c8
 8000f0c:	2000019c 	.word	0x2000019c
 8000f10:	200004ec 	.word	0x200004ec
 8000f14:	2000017c 	.word	0x2000017c
 8000f18:	08006bdc 	.word	0x08006bdc
 8000f1c:	08006be4 	.word	0x08006be4
 8000f20:	08006c04 	.word	0x08006c04
 8000f24:	200001f4 	.word	0x200001f4
 8000f28:	08006c1c 	.word	0x08006c1c
 8000f2c:	20000280 	.word	0x20000280
 8000f30:	08006c2c 	.word	0x08006c2c
 8000f34:	08006c44 	.word	0x08006c44
 8000f38:	08006c58 	.word	0x08006c58
 8000f3c:	08006c68 	.word	0x08006c68
 8000f40:	200000a0 	.word	0x200000a0
 8000f44:	08006c7c 	.word	0x08006c7c
 8000f48:	08006c88 	.word	0x08006c88
 8000f4c:	08006c8c 	.word	0x08006c8c
 8000f50:	08006c90 	.word	0x08006c90
 8000f54:	08006c94 	.word	0x08006c94
 8000f58:	08006c9c 	.word	0x08006c9c
 8000f5c:	08006ca4 	.word	0x08006ca4
 8000f60:	08006cac 	.word	0x08006cac
					{
							printf("[%2d] = ", i * 2 - 1);
 8000f64:	7a7b      	ldrb	r3, [r7, #9]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	483f      	ldr	r0, [pc, #252]	; (800106c <main+0x458>)
 8000f6e:	f004 fe97 	bl	8005ca0 <iprintf>
							printf("%4d,", analogmax[i * 2 - 1]);
 8000f72:	7a7b      	ldrb	r3, [r7, #9]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	3b01      	subs	r3, #1
 8000f78:	4a3d      	ldr	r2, [pc, #244]	; (8001070 <main+0x45c>)
 8000f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	483c      	ldr	r0, [pc, #240]	; (8001074 <main+0x460>)
 8000f82:	f004 fe8d 	bl	8005ca0 <iprintf>
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000f86:	7a7b      	ldrb	r3, [r7, #9]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	727b      	strb	r3, [r7, #9]
 8000f8c:	7a7b      	ldrb	r3, [r7, #9]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1e8      	bne.n	8000f64 <main+0x350>
					}
					printf("\r\n");
 8000f92:	4839      	ldr	r0, [pc, #228]	; (8001078 <main+0x464>)
 8000f94:	f004 ff0c 	bl	8005db0 <puts>
					printf(ESC_CYA);
 8000f98:	4838      	ldr	r0, [pc, #224]	; (800107c <main+0x468>)
 8000f9a:	f004 fe81 	bl	8005ca0 <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	723b      	strb	r3, [r7, #8]
 8000fa2:	e011      	b.n	8000fc8 <main+0x3b4>
					{
							printf("[%2d] = ", i * 2);
 8000fa4:	7a3b      	ldrb	r3, [r7, #8]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4830      	ldr	r0, [pc, #192]	; (800106c <main+0x458>)
 8000fac:	f004 fe78 	bl	8005ca0 <iprintf>
							printf("%4d, ", analogmin[i * 2]);
 8000fb0:	7a3b      	ldrb	r3, [r7, #8]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4a32      	ldr	r2, [pc, #200]	; (8001080 <main+0x46c>)
 8000fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4831      	ldr	r0, [pc, #196]	; (8001084 <main+0x470>)
 8000fbe:	f004 fe6f 	bl	8005ca0 <iprintf>
					for(unsigned char i = 0; i < CALIBRATIONSIZE / 2; i++)
 8000fc2:	7a3b      	ldrb	r3, [r7, #8]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	723b      	strb	r3, [r7, #8]
 8000fc8:	7a3b      	ldrb	r3, [r7, #8]
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	d9ea      	bls.n	8000fa4 <main+0x390>
					}
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000fce:	2306      	movs	r3, #6
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	e013      	b.n	8000ffc <main+0x3e8>
					{
							printf("[%2d] = ", i * 2 - 1);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4823      	ldr	r0, [pc, #140]	; (800106c <main+0x458>)
 8000fde:	f004 fe5f 	bl	8005ca0 <iprintf>
							printf("%4d,", analogmin[i * 2 - 1]);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	4a25      	ldr	r2, [pc, #148]	; (8001080 <main+0x46c>)
 8000fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4820      	ldr	r0, [pc, #128]	; (8001074 <main+0x460>)
 8000ff2:	f004 fe55 	bl	8005ca0 <iprintf>
					for(unsigned char i = CALIBRATIONSIZE / 2; i > 0; i--)
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1e8      	bne.n	8000fd4 <main+0x3c0>
					}
					printf("\r\n");
 8001002:	481d      	ldr	r0, [pc, #116]	; (8001078 <main+0x464>)
 8001004:	f004 fed4 	bl	8005db0 <puts>
					printf(ESC_DEF);
 8001008:	481f      	ldr	r0, [pc, #124]	; (8001088 <main+0x474>)
 800100a:	f004 fe49 	bl	8005ca0 <iprintf>
#endif
					break;
 800100e:	e02c      	b.n	800106a <main+0x456>
				case 0x1:
					running_initialize();
 8001010:	f000 fd36 	bl	8001a80 <running_initialize>

					while(enter)
 8001014:	e004      	b.n	8001020 <main+0x40c>
					{
						d_print();
 8001016:	f000 fd9f 	bl	8001b58 <d_print>
						HAL_Delay(250);
 800101a:	20fa      	movs	r0, #250	; 0xfa
 800101c:	f001 faa8 	bl	8002570 <HAL_Delay>
					while(enter)
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <main+0x478>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f6      	bne.n	8001016 <main+0x402>
					}

					running_finalize();
 8001028:	f000 fd6a 	bl	8001b00 <running_finalize>
					break;
 800102c:	e01d      	b.n	800106a <main+0x456>
				case 0x2:
					running_initialize();
 800102e:	f000 fd27 	bl	8001a80 <running_initialize>

					while(enter)
 8001032:	e004      	b.n	800103e <main+0x42a>
					{
						d_print();
 8001034:	f000 fd90 	bl	8001b58 <d_print>
						HAL_Delay(250);
 8001038:	20fa      	movs	r0, #250	; 0xfa
 800103a:	f001 fa99 	bl	8002570 <HAL_Delay>
					while(enter)
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <main+0x478>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f6      	bne.n	8001034 <main+0x420>
					}

					running_finalize();
 8001046:	f000 fd5b 	bl	8001b00 <running_finalize>
					break;
 800104a:	e00e      	b.n	800106a <main+0x456>
				case 0x3:
					running_initialize();
 800104c:	f000 fd18 	bl	8001a80 <running_initialize>

					while(enter)
 8001050:	e004      	b.n	800105c <main+0x448>
					{
						d_print();
 8001052:	f000 fd81 	bl	8001b58 <d_print>
						HAL_Delay(250);
 8001056:	20fa      	movs	r0, #250	; 0xfa
 8001058:	f001 fa8a 	bl	8002570 <HAL_Delay>
					while(enter)
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <main+0x478>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f6      	bne.n	8001052 <main+0x43e>
					}

					running_finalize();
 8001064:	f000 fd4c 	bl	8001b00 <running_finalize>
					break;
 8001068:	bf00      	nop
		printf("///// WHILE /////\n\r");
 800106a:	e659      	b.n	8000d20 <main+0x10c>
 800106c:	08006c7c 	.word	0x08006c7c
 8001070:	200004ec 	.word	0x200004ec
 8001074:	08006c9c 	.word	0x08006c9c
 8001078:	08006c90 	.word	0x08006c90
 800107c:	08006ca4 	.word	0x08006ca4
 8001080:	2000017c 	.word	0x2000017c
 8001084:	08006cac 	.word	0x08006cac
 8001088:	08006bdc 	.word	0x08006bdc
 800108c:	20000551 	.word	0x20000551

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	; 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	2230      	movs	r2, #48	; 0x30
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 fdf6 	bl	8005c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <SystemClock_Config+0xcc>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	4a27      	ldr	r2, [pc, #156]	; (800115c <SystemClock_Config+0xcc>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	; 0x40
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <SystemClock_Config+0xd0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <SystemClock_Config+0xd0>)
 80010da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ec:	2301      	movs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001100:	2308      	movs	r3, #8
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001104:	23a8      	movs	r3, #168	; 0xa8
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f002 fd3d 	bl	8003b94 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001120:	f000 fdc6 	bl	8001cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2302      	movs	r3, #2
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001130:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2105      	movs	r1, #5
 8001142:	4618      	mov	r0, r3
 8001144:	f002 ff96 	bl	8004074 <HAL_RCC_ClockConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800114e:	f000 fdaf 	bl	8001cb0 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3750      	adds	r7, #80	; 0x50
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40007000 	.word	0x40007000

08001164 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001176:	4b8a      	ldr	r3, [pc, #552]	; (80013a0 <MX_ADC1_Init+0x23c>)
 8001178:	4a8a      	ldr	r2, [pc, #552]	; (80013a4 <MX_ADC1_Init+0x240>)
 800117a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800117c:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <MX_ADC1_Init+0x23c>)
 800117e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001182:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001184:	4b86      	ldr	r3, [pc, #536]	; (80013a0 <MX_ADC1_Init+0x23c>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800118a:	4b85      	ldr	r3, [pc, #532]	; (80013a0 <MX_ADC1_Init+0x23c>)
 800118c:	2201      	movs	r2, #1
 800118e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001190:	4b83      	ldr	r3, [pc, #524]	; (80013a0 <MX_ADC1_Init+0x23c>)
 8001192:	2201      	movs	r2, #1
 8001194:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001196:	4b82      	ldr	r3, [pc, #520]	; (80013a0 <MX_ADC1_Init+0x23c>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119e:	4b80      	ldr	r3, [pc, #512]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	4b7e      	ldr	r3, [pc, #504]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80011a6:	4a80      	ldr	r2, [pc, #512]	; (80013a8 <MX_ADC1_Init+0x244>)
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011aa:	4b7d      	ldr	r3, [pc, #500]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80011b0:	4b7b      	ldr	r3, [pc, #492]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80011b2:	2210      	movs	r2, #16
 80011b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011b6:	4b7a      	ldr	r3, [pc, #488]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011be:	4b78      	ldr	r3, [pc, #480]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c4:	4876      	ldr	r0, [pc, #472]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80011c6:	f001 f9f5 	bl	80025b4 <HAL_ADC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011d0:	f000 fd6e 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011d4:	2309      	movs	r3, #9
 80011d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80011dc:	2303      	movs	r3, #3
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	486e      	ldr	r0, [pc, #440]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80011e6:	f001 fb79 	bl	80028dc <HAL_ADC_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011f0:	f000 fd5e 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011f4:	230a      	movs	r3, #10
 80011f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	4867      	ldr	r0, [pc, #412]	; (80013a0 <MX_ADC1_Init+0x23c>)
 8001202:	f001 fb6b 	bl	80028dc <HAL_ADC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800120c:	f000 fd50 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001210:	2308      	movs	r3, #8
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001214:	2303      	movs	r3, #3
 8001216:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	4860      	ldr	r0, [pc, #384]	; (80013a0 <MX_ADC1_Init+0x23c>)
 800121e:	f001 fb5d 	bl	80028dc <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001228:	f000 fd42 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800122c:	230b      	movs	r3, #11
 800122e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001230:	2304      	movs	r3, #4
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4859      	ldr	r0, [pc, #356]	; (80013a0 <MX_ADC1_Init+0x23c>)
 800123a:	f001 fb4f 	bl	80028dc <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001244:	f000 fd34 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001248:	230e      	movs	r3, #14
 800124a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800124c:	2305      	movs	r3, #5
 800124e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4852      	ldr	r0, [pc, #328]	; (80013a0 <MX_ADC1_Init+0x23c>)
 8001256:	f001 fb41 	bl	80028dc <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001260:	f000 fd26 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001264:	230f      	movs	r3, #15
 8001266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001268:	2306      	movs	r3, #6
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	484b      	ldr	r0, [pc, #300]	; (80013a0 <MX_ADC1_Init+0x23c>)
 8001272:	f001 fb33 	bl	80028dc <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800127c:	f000 fd18 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001280:	230c      	movs	r3, #12
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001284:	2307      	movs	r3, #7
 8001286:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4844      	ldr	r0, [pc, #272]	; (80013a0 <MX_ADC1_Init+0x23c>)
 800128e:	f001 fb25 	bl	80028dc <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001298:	f000 fd0a 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800129c:	230d      	movs	r3, #13
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80012a0:	2308      	movs	r3, #8
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	483d      	ldr	r0, [pc, #244]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80012aa:	f001 fb17 	bl	80028dc <HAL_ADC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80012b4:	f000 fcfc 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012b8:	2307      	movs	r3, #7
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80012bc:	2309      	movs	r3, #9
 80012be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	4836      	ldr	r0, [pc, #216]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80012c6:	f001 fb09 	bl	80028dc <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012d0:	f000 fcee 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80012d8:	230a      	movs	r3, #10
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	482f      	ldr	r0, [pc, #188]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80012e2:	f001 fafb 	bl	80028dc <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80012ec:	f000 fce0 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012f0:	2306      	movs	r3, #6
 80012f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80012f4:	230b      	movs	r3, #11
 80012f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	4828      	ldr	r0, [pc, #160]	; (80013a0 <MX_ADC1_Init+0x23c>)
 80012fe:	f001 faed 	bl	80028dc <HAL_ADC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001308:	f000 fcd2 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800130c:	2301      	movs	r3, #1
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001310:	230c      	movs	r3, #12
 8001312:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	4821      	ldr	r0, [pc, #132]	; (80013a0 <MX_ADC1_Init+0x23c>)
 800131a:	f001 fadf 	bl	80028dc <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001324:	f000 fcc4 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001328:	2305      	movs	r3, #5
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800132c:	230d      	movs	r3, #13
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	481a      	ldr	r0, [pc, #104]	; (80013a0 <MX_ADC1_Init+0x23c>)
 8001336:	f001 fad1 	bl	80028dc <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001340:	f000 fcb6 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001344:	2302      	movs	r3, #2
 8001346:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001348:	230e      	movs	r3, #14
 800134a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <MX_ADC1_Init+0x23c>)
 8001352:	f001 fac3 	bl	80028dc <HAL_ADC_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 800135c:	f000 fca8 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001360:	2304      	movs	r3, #4
 8001362:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001364:	230f      	movs	r3, #15
 8001366:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MX_ADC1_Init+0x23c>)
 800136e:	f001 fab5 	bl	80028dc <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001378:	f000 fc9a 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800137c:	2303      	movs	r3, #3
 800137e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001380:	2310      	movs	r3, #16
 8001382:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_ADC1_Init+0x23c>)
 800138a:	f001 faa7 	bl	80028dc <HAL_ADC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8001394:	f000 fc8c 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001f4 	.word	0x200001f4
 80013a4:	40012000 	.word	0x40012000
 80013a8:	0f000001 	.word	0x0f000001

080013ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	; 0x30
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	2224      	movs	r2, #36	; 0x24
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f004 fc68 	bl	8005c90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_TIM1_Init+0xa8>)
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <MX_TIM1_Init+0xac>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_TIM1_Init+0xa8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_TIM1_Init+0xa8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_TIM1_Init+0xa8>)
 80013dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_TIM1_Init+0xa8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM1_Init+0xa8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM1_Init+0xa8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013f4:	2303      	movs	r3, #3
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013fc:	2301      	movs	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800140c:	2301      	movs	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_TIM1_Init+0xa8>)
 8001420:	f003 f954 	bl	80046cc <HAL_TIM_Encoder_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800142a:	f000 fc41 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM1_Init+0xa8>)
 800143c:	f003 fec2 	bl	80051c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001446:	f000 fc33 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	; 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000380 	.word	0x20000380
 8001458:	40010000 	.word	0x40010000

0800145c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	2224      	movs	r2, #36	; 0x24
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f004 fc10 	bl	8005c90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001478:	4b20      	ldr	r3, [pc, #128]	; (80014fc <MX_TIM3_Init+0xa0>)
 800147a:	4a21      	ldr	r2, [pc, #132]	; (8001500 <MX_TIM3_Init+0xa4>)
 800147c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_TIM3_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_TIM3_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_TIM3_Init+0xa0>)
 800148c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001490:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_TIM3_Init+0xa0>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_TIM3_Init+0xa0>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800149e:	2303      	movs	r3, #3
 80014a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014a6:	2301      	movs	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014b6:	2301      	movs	r3, #1
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	4619      	mov	r1, r3
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <MX_TIM3_Init+0xa0>)
 80014ca:	f003 f8ff 	bl	80046cc <HAL_TIM_Encoder_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014d4:	f000 fbec 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_TIM3_Init+0xa0>)
 80014e6:	f003 fe6d 	bl	80051c4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014f0:	f000 fbde 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3730      	adds	r7, #48	; 0x30
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200001a0 	.word	0x200001a0
 8001500:	40000400 	.word	0x40000400

08001504 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001526:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <MX_TIM4_Init+0xc0>)
 8001528:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <MX_TIM4_Init+0xc4>)
 800152a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <MX_TIM4_Init+0xc0>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <MX_TIM4_Init+0xc0>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3359;
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <MX_TIM4_Init+0xc0>)
 800153a:	f640 521f 	movw	r2, #3359	; 0xd1f
 800153e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <MX_TIM4_Init+0xc0>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_TIM4_Init+0xc0>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800154c:	481d      	ldr	r0, [pc, #116]	; (80015c4 <MX_TIM4_Init+0xc0>)
 800154e:	f002 fffb 	bl	8004548 <HAL_TIM_PWM_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001558:	f000 fbaa 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	4619      	mov	r1, r3
 800156a:	4816      	ldr	r0, [pc, #88]	; (80015c4 <MX_TIM4_Init+0xc0>)
 800156c:	f003 fe2a 	bl	80051c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001576:	f000 fb9b 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157a:	2360      	movs	r3, #96	; 0x60
 800157c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	4619      	mov	r1, r3
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <MX_TIM4_Init+0xc0>)
 8001592:	f003 fab3 	bl	8004afc <HAL_TIM_PWM_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800159c:	f000 fb88 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2204      	movs	r2, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4807      	ldr	r0, [pc, #28]	; (80015c4 <MX_TIM4_Init+0xc0>)
 80015a8:	f003 faa8 	bl	8004afc <HAL_TIM_PWM_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015b2:	f000 fb7d 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015b6:	4803      	ldr	r0, [pc, #12]	; (80015c4 <MX_TIM4_Init+0xc0>)
 80015b8:	f000 fd9e 	bl	80020f8 <HAL_TIM_MspPostInit>

}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	; 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200000dc 	.word	0x200000dc
 80015c8:	40000800 	.word	0x40000800

080015cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d2:	463b      	mov	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_TIM6_Init+0x64>)
 80015dc:	4a15      	ldr	r2, [pc, #84]	; (8001634 <MX_TIM6_Init+0x68>)
 80015de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_TIM6_Init+0x64>)
 80015e2:	2202      	movs	r2, #2
 80015e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_TIM6_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 55999;
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_TIM6_Init+0x64>)
 80015ee:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 80015f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_TIM6_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_TIM6_Init+0x64>)
 80015fc:	f002 ff2a 	bl	8004454 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001606:	f000 fb53 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	4619      	mov	r1, r3
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <MX_TIM6_Init+0x64>)
 8001618:	f003 fdd4 	bl	80051c4 <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001622:	f000 fb45 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000340 	.word	0x20000340
 8001634:	40001000 	.word	0x40001000

08001638 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_TIM7_Init+0x64>)
 8001648:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <MX_TIM7_Init+0x68>)
 800164a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_TIM7_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_TIM7_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 16799;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_TIM7_Init+0x64>)
 800165a:	f244 129f 	movw	r2, #16799	; 0x419f
 800165e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_TIM7_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001666:	480d      	ldr	r0, [pc, #52]	; (800169c <MX_TIM7_Init+0x64>)
 8001668:	f002 fef4 	bl	8004454 <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001672:	f000 fb1d 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <MX_TIM7_Init+0x64>)
 8001684:	f003 fd9e 	bl	80051c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800168e:	f000 fb0f 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2000050c 	.word	0x2000050c
 80016a0:	40001400 	.word	0x40001400

080016a4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_TIM10_Init+0x40>)
 80016aa:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <MX_TIM10_Init+0x44>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2;
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <MX_TIM10_Init+0x40>)
 80016b0:	2202      	movs	r2, #2
 80016b2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_TIM10_Init+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 55999;
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <MX_TIM10_Init+0x40>)
 80016bc:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 80016c0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_TIM10_Init+0x40>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_TIM10_Init+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_TIM10_Init+0x40>)
 80016d0:	f002 fec0 	bl	8004454 <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80016da:	f000 fae9 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000120 	.word	0x20000120
 80016e8:	40014400 	.word	0x40014400

080016ec <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_TIM11_Init+0x40>)
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <MX_TIM11_Init+0x44>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <MX_TIM11_Init+0x40>)
 80016f8:	2202      	movs	r2, #2
 80016fa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_TIM11_Init+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 55999;
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <MX_TIM11_Init+0x40>)
 8001704:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001708:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_TIM11_Init+0x40>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_TIM11_Init+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_TIM11_Init+0x40>)
 8001718:	f002 fe9c 	bl	8004454 <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001722:	f000 fac5 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000280 	.word	0x20000280
 8001730:	40014800 	.word	0x40014800

08001734 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_TIM13_Init+0x40>)
 800173a:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <MX_TIM13_Init+0x44>)
 800173c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2;
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <MX_TIM13_Init+0x40>)
 8001740:	2202      	movs	r2, #2
 8001742:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_TIM13_Init+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 55999;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <MX_TIM13_Init+0x40>)
 800174c:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001750:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_TIM13_Init+0x40>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_TIM13_Init+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_TIM13_Init+0x40>)
 8001760:	f002 fe78 	bl	8004454 <HAL_TIM_Base_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800176a:	f000 faa1 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000240 	.word	0x20000240
 8001778:	40001c00 	.word	0x40001c00

0800177c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_USART6_UART_Init+0x4c>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <MX_USART6_UART_Init+0x50>)
 8001784:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <MX_USART6_UART_Init+0x4c>)
 8001788:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800178c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_USART6_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_USART6_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_USART6_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_USART6_UART_Init+0x4c>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_USART6_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_USART6_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_USART6_UART_Init+0x4c>)
 80017b4:	f003 fd96 	bl	80052e4 <HAL_UART_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017be:	f000 fa77 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200003cc 	.word	0x200003cc
 80017cc:	40011400 	.word	0x40011400

080017d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_DMA_Init+0x3c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <MX_DMA_Init+0x3c>)
 80017e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_DMA_Init+0x3c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2038      	movs	r0, #56	; 0x38
 80017f8:	f001 fbeb 	bl	8002fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017fc:	2038      	movs	r0, #56	; 0x38
 80017fe:	f001 fc04 	bl	800300a <HAL_NVIC_EnableIRQ>

}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b60      	ldr	r3, [pc, #384]	; (80019ac <MX_GPIO_Init+0x19c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a5f      	ldr	r2, [pc, #380]	; (80019ac <MX_GPIO_Init+0x19c>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <MX_GPIO_Init+0x19c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b59      	ldr	r3, [pc, #356]	; (80019ac <MX_GPIO_Init+0x19c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a58      	ldr	r2, [pc, #352]	; (80019ac <MX_GPIO_Init+0x19c>)
 800184c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b56      	ldr	r3, [pc, #344]	; (80019ac <MX_GPIO_Init+0x19c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b52      	ldr	r3, [pc, #328]	; (80019ac <MX_GPIO_Init+0x19c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a51      	ldr	r2, [pc, #324]	; (80019ac <MX_GPIO_Init+0x19c>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <MX_GPIO_Init+0x19c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <MX_GPIO_Init+0x19c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a4a      	ldr	r2, [pc, #296]	; (80019ac <MX_GPIO_Init+0x19c>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b48      	ldr	r3, [pc, #288]	; (80019ac <MX_GPIO_Init+0x19c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	4b44      	ldr	r3, [pc, #272]	; (80019ac <MX_GPIO_Init+0x19c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a43      	ldr	r2, [pc, #268]	; (80019ac <MX_GPIO_Init+0x19c>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <MX_GPIO_Init+0x19c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 80018b8:	483d      	ldr	r0, [pc, #244]	; (80019b0 <MX_GPIO_Init+0x1a0>)
 80018ba:	f002 f951 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c4:	483b      	ldr	r0, [pc, #236]	; (80019b4 <MX_GPIO_Init+0x1a4>)
 80018c6:	f002 f94b 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80018d0:	4839      	ldr	r0, [pc, #228]	; (80019b8 <MX_GPIO_Init+0x1a8>)
 80018d2:	f002 f945 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2104      	movs	r1, #4
 80018da:	4838      	ldr	r0, [pc, #224]	; (80019bc <MX_GPIO_Init+0x1ac>)
 80018dc:	f002 f940 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 80018e0:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	482d      	ldr	r0, [pc, #180]	; (80019b0 <MX_GPIO_Init+0x1a0>)
 80018fa:	f001 ff7f 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 80018fe:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8001902:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	4827      	ldr	r0, [pc, #156]	; (80019b0 <MX_GPIO_Init+0x1a0>)
 8001914:	f001 ff72 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8001918:	f640 0304 	movw	r3, #2052	; 0x804
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4821      	ldr	r0, [pc, #132]	; (80019b4 <MX_GPIO_Init+0x1a4>)
 800192e:	f001 ff65 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	481a      	ldr	r0, [pc, #104]	; (80019b4 <MX_GPIO_Init+0x1a4>)
 800194c:	f001 ff56 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8001950:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	2301      	movs	r3, #1
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	4813      	ldr	r0, [pc, #76]	; (80019b8 <MX_GPIO_Init+0x1a8>)
 800196a:	f001 ff47 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 800196e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <MX_GPIO_Init+0x1a8>)
 8001984:	f001 ff3a 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8001988:	2304      	movs	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198c:	2301      	movs	r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_GPIO_Init+0x1ac>)
 80019a0:	f001 ff2c 	bl	80037fc <HAL_GPIO_Init>

}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	; 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40020c00 	.word	0x40020c00

080019c0 <led_rgb>:
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 0 : 1;	// Rotary8
	return _rotaryvalue;
}

void led_rgb(char r, char g, char b)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	460b      	mov	r3, r1
 80019cc:	71bb      	strb	r3, [r7, #6]
 80019ce:	4613      	mov	r3, r2
 80019d0:	717b      	strb	r3, [r7, #5]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (r) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bf0c      	ite	eq
 80019d8:	2301      	moveq	r3, #1
 80019da:	2300      	movne	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e4:	480f      	ldr	r0, [pc, #60]	; (8001a24 <led_rgb+0x64>)
 80019e6:	f002 f8bb 	bl	8003b60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019fc:	4809      	ldr	r0, [pc, #36]	; (8001a24 <led_rgb+0x64>)
 80019fe:	f002 f8af 	bl	8003b60 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_B ON
 8001a02:	797b      	ldrb	r3, [r7, #5]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <led_rgb+0x68>)
 8001a16:	f002 f8a3 	bl	8003b60 <HAL_GPIO_WritePin>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020800 	.word	0x40020800

08001a2c <sensor_initialize>:

void sensor_initialize()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analograw, ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) { Error_Handler(); }
 8001a30:	2210      	movs	r2, #16
 8001a32:	4909      	ldr	r1, [pc, #36]	; (8001a58 <sensor_initialize+0x2c>)
 8001a34:	4809      	ldr	r0, [pc, #36]	; (8001a5c <sensor_initialize+0x30>)
 8001a36:	f000 fe01 	bl	800263c <HAL_ADC_Start_DMA>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <sensor_initialize+0x18>
 8001a40:	f000 f936 	bl	8001cb0 <Error_Handler>
	HAL_TIM_Base_Start_IT(&htim7);	// SENSORGET SORT
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <sensor_initialize+0x34>)
 8001a46:	f002 fd30 	bl	80044aa <HAL_TIM_Base_Start_IT>
	HAL_Delay(1000);
 8001a4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a4e:	f000 fd8f 	bl	8002570 <HAL_Delay>
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200000bc 	.word	0x200000bc
 8001a5c:	200001f4 	.word	0x200001f4
 8001a60:	2000050c 	.word	0x2000050c

08001a64 <sensor_finalize>:

void sensor_finalize()
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim7);
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <sensor_finalize+0x14>)
 8001a6a:	f002 fd42 	bl	80044f2 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <sensor_finalize+0x18>)
 8001a70:	f000 fed6 	bl	8002820 <HAL_ADC_Stop_DMA>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000050c 	.word	0x2000050c
 8001a7c:	200001f4 	.word	0x200001f4

08001a80 <running_initialize>:

void running_initialize()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	sensor_initialize();
 8001a84:	f7ff ffd2 	bl	8001a2c <sensor_initialize>
	printf("Encoder_Start\r\n");
 8001a88:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <running_initialize+0x58>)
 8001a8a:	f004 f991 	bl	8005db0 <puts>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001a8e:	213c      	movs	r1, #60	; 0x3c
 8001a90:	4812      	ldr	r0, [pc, #72]	; (8001adc <running_initialize+0x5c>)
 8001a92:	f002 fead 	bl	80047f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a96:	213c      	movs	r1, #60	; 0x3c
 8001a98:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <running_initialize+0x60>)
 8001a9a:	f002 fea9 	bl	80047f0 <HAL_TIM_Encoder_Start>
	printf("SIDESENSOR ENCODER\r\n");
 8001a9e:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <running_initialize+0x64>)
 8001aa0:	f004 f986 	bl	8005db0 <puts>
	HAL_TIM_Base_Start_IT(&htim10);	// ENCODER SWITCH
 8001aa4:	4810      	ldr	r0, [pc, #64]	; (8001ae8 <running_initialize+0x68>)
 8001aa6:	f002 fd00 	bl	80044aa <HAL_TIM_Base_Start_IT>
	printf("PWM_Start\r\n");
 8001aaa:	4810      	ldr	r0, [pc, #64]	; (8001aec <running_initialize+0x6c>)
 8001aac:	f004 f980 	bl	8005db0 <puts>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	480f      	ldr	r0, [pc, #60]	; (8001af0 <running_initialize+0x70>)
 8001ab4:	f002 fd74 	bl	80045a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001ab8:	2104      	movs	r1, #4
 8001aba:	480d      	ldr	r0, [pc, #52]	; (8001af0 <running_initialize+0x70>)
 8001abc:	f002 fd70 	bl	80045a0 <HAL_TIM_PWM_Start>
	printf("PID\r\n");
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <running_initialize+0x74>)
 8001ac2:	f004 f975 	bl	8005db0 <puts>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <running_initialize+0x78>)
 8001ac8:	f002 fcef 	bl	80044aa <HAL_TIM_Base_Start_IT>
#if PLAY
	motorenable = 1;
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <running_initialize+0x7c>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
#endif
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	08006cb4 	.word	0x08006cb4
 8001adc:	20000380 	.word	0x20000380
 8001ae0:	200001a0 	.word	0x200001a0
 8001ae4:	08006cc4 	.word	0x08006cc4
 8001ae8:	20000120 	.word	0x20000120
 8001aec:	08006cd8 	.word	0x08006cd8
 8001af0:	200000dc 	.word	0x200000dc
 8001af4:	08006ce4 	.word	0x08006ce4
 8001af8:	20000340 	.word	0x20000340
 8001afc:	2000040c 	.word	0x2000040c

08001b00 <running_finalize>:

void running_finalize()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	motorenable = 0;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <running_finalize+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
	sensor_finalize();
 8001b0a:	f7ff ffab 	bl	8001a64 <sensor_finalize>
	HAL_TIM_Base_Stop_IT(&htim6);
 8001b0e:	480d      	ldr	r0, [pc, #52]	; (8001b44 <running_finalize+0x44>)
 8001b10:	f002 fcef 	bl	80044f2 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001b14:	2104      	movs	r1, #4
 8001b16:	480c      	ldr	r0, [pc, #48]	; (8001b48 <running_finalize+0x48>)
 8001b18:	f002 fd80 	bl	800461c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	480a      	ldr	r0, [pc, #40]	; (8001b48 <running_finalize+0x48>)
 8001b20:	f002 fd7c 	bl	800461c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim10);
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <running_finalize+0x4c>)
 8001b26:	f002 fce4 	bl	80044f2 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001b2a:	213c      	movs	r1, #60	; 0x3c
 8001b2c:	4808      	ldr	r0, [pc, #32]	; (8001b50 <running_finalize+0x50>)
 8001b2e:	f002 fe96 	bl	800485e <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001b32:	213c      	movs	r1, #60	; 0x3c
 8001b34:	4807      	ldr	r0, [pc, #28]	; (8001b54 <running_finalize+0x54>)
 8001b36:	f002 fe92 	bl	800485e <HAL_TIM_Encoder_Stop>
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000040c 	.word	0x2000040c
 8001b44:	20000340 	.word	0x20000340
 8001b48:	200000dc 	.word	0x200000dc
 8001b4c:	20000120 	.word	0x20000120
 8001b50:	200001a0 	.word	0x200001a0
 8001b54:	20000380 	.word	0x20000380

08001b58 <d_print>:

void d_print()
{
 8001b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b5c:	b08c      	sub	sp, #48	; 0x30
 8001b5e:	af0a      	add	r7, sp, #40	; 0x28
	printf("%4d, %4d | %4d, %4d\r\n", analog[5], analog[4], analog[3], analog[2]);
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], analog[15], analog[14], analog[7], analog[6], analog[1], analog[0], analog[13], analog[12], analog[11], analog[10]);
#else	// ATTACH_LONGSENSOR
#if !USE_LONGSENSOR
	// only use normal sensor
	printf("\x1b[24C");	// Cursor move right *24
 8001b60:	483e      	ldr	r0, [pc, #248]	; (8001c5c <d_print+0x104>)
 8001b62:	f004 f89d 	bl	8005ca0 <iprintf>
	printf(ESC_RED);
 8001b66:	483e      	ldr	r0, [pc, #248]	; (8001c60 <d_print+0x108>)
 8001b68:	f004 f89a 	bl	8005ca0 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", analog[5], analog[4], analog[3], analog[2]);
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <d_print+0x10c>)
 8001b6e:	895b      	ldrh	r3, [r3, #10]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <d_print+0x10c>)
 8001b74:	891b      	ldrh	r3, [r3, #8]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <d_print+0x10c>)
 8001b7a:	88db      	ldrh	r3, [r3, #6]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <d_print+0x10c>)
 8001b80:	889b      	ldrh	r3, [r3, #4]
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	4603      	mov	r3, r0
 8001b86:	4838      	ldr	r0, [pc, #224]	; (8001c68 <d_print+0x110>)
 8001b88:	f004 f88a 	bl	8005ca0 <iprintf>
	printf(ESC_DEF);
 8001b8c:	4837      	ldr	r0, [pc, #220]	; (8001c6c <d_print+0x114>)
 8001b8e:	f004 f887 	bl	8005ca0 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], analog[15], analog[14], analog[7], analog[6], analog[1], analog[0], analog[13], analog[12], analog[11], analog[10]);
 8001b92:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <d_print+0x10c>)
 8001b94:	8a5b      	ldrh	r3, [r3, #18]
 8001b96:	469c      	mov	ip, r3
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <d_print+0x10c>)
 8001b9a:	8a1b      	ldrh	r3, [r3, #16]
 8001b9c:	469e      	mov	lr, r3
 8001b9e:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <d_print+0x10c>)
 8001ba0:	8bdb      	ldrh	r3, [r3, #30]
 8001ba2:	4698      	mov	r8, r3
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <d_print+0x10c>)
 8001ba6:	8b9b      	ldrh	r3, [r3, #28]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <d_print+0x10c>)
 8001bac:	89db      	ldrh	r3, [r3, #14]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <d_print+0x10c>)
 8001bb2:	899b      	ldrh	r3, [r3, #12]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <d_print+0x10c>)
 8001bb8:	885b      	ldrh	r3, [r3, #2]
 8001bba:	461c      	mov	r4, r3
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <d_print+0x10c>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <d_print+0x10c>)
 8001bc4:	8b5b      	ldrh	r3, [r3, #26]
 8001bc6:	461e      	mov	r6, r3
 8001bc8:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <d_print+0x10c>)
 8001bca:	8b1b      	ldrh	r3, [r3, #24]
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <d_print+0x10c>)
 8001bd0:	8adb      	ldrh	r3, [r3, #22]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <d_print+0x10c>)
 8001bd6:	8a9b      	ldrh	r3, [r3, #20]
 8001bd8:	9308      	str	r3, [sp, #32]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	9307      	str	r3, [sp, #28]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	9306      	str	r3, [sp, #24]
 8001be2:	9605      	str	r6, [sp, #20]
 8001be4:	9504      	str	r5, [sp, #16]
 8001be6:	9403      	str	r4, [sp, #12]
 8001be8:	9002      	str	r0, [sp, #8]
 8001bea:	9101      	str	r1, [sp, #4]
 8001bec:	9200      	str	r2, [sp, #0]
 8001bee:	4643      	mov	r3, r8
 8001bf0:	4672      	mov	r2, lr
 8001bf2:	4661      	mov	r1, ip
 8001bf4:	481e      	ldr	r0, [pc, #120]	; (8001c70 <d_print+0x118>)
 8001bf6:	f004 f853 	bl	8005ca0 <iprintf>
	printf(ESC_RED);
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[9], analog[8], analog[15], analog[14], analog[7], analog[6], analog[1], analog[0], analog[13], analog[12], analog[11], analog[10]);
	printf(ESC_DEF);
#endif	// !USE_LONGSENSOR
#endif	// ATTACH_LONGSENSOR
	printf("\r\n");
 8001bfa:	481e      	ldr	r0, [pc, #120]	; (8001c74 <d_print+0x11c>)
 8001bfc:	f004 f8d8 	bl	8005db0 <puts>
	printf("\r\n");
#endif	// !CSV_FORMAT
#endif	// D_ANALOG

#if D_ENCODER
	printf("encl = %d, encr = %d \r\ndencl = %d, dencr = %d\r\n", encl, encr, dencl, dencr);
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <d_print+0x120>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <d_print+0x124>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <d_print+0x128>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <d_print+0x12c>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	4603      	mov	r3, r0
 8001c1a:	481b      	ldr	r0, [pc, #108]	; (8001c88 <d_print+0x130>)
 8001c1c:	f004 f840 	bl	8005ca0 <iprintf>
	printf("lengthl = %d, lengthr = %d \r\nvelocityl = %d, velocityr = %d\r\n", lengthl, lengthr, velocityl, velocityr);
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <d_print+0x134>)
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <d_print+0x138>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <d_print+0x13c>)
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <d_print+0x140>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	4603      	mov	r3, r0
 8001c34:	4819      	ldr	r0, [pc, #100]	; (8001c9c <d_print+0x144>)
 8001c36:	f004 f833 	bl	8005ca0 <iprintf>
#if D_PWM
	printf("pwmstepoutput = %5d, pwmsteptime = %5d, pwmstepud = %d\r\n", pwmstepoutput, pwmsteptime, pwmstepud);
#endif

#if D_ROTARY
	printf("rotary_value = %d\r\n", rotary_value);
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <d_print+0x148>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <d_print+0x14c>)
 8001c42:	f004 f82d 	bl	8005ca0 <iprintf>
#endif

#if D_SWITCH
	printf("enter = %d\r\n", enter);
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <d_print+0x150>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4817      	ldr	r0, [pc, #92]	; (8001cac <d_print+0x154>)
 8001c4e:	f004 f827 	bl	8005ca0 <iprintf>
#endif
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c5c:	08006cec 	.word	0x08006cec
 8001c60:	08006cf4 	.word	0x08006cf4
 8001c64:	200000a0 	.word	0x200000a0
 8001c68:	08006cfc 	.word	0x08006cfc
 8001c6c:	08006bdc 	.word	0x08006bdc
 8001c70:	08006d14 	.word	0x08006d14
 8001c74:	08006c90 	.word	0x08006c90
 8001c78:	200001e0 	.word	0x200001e0
 8001c7c:	20000098 	.word	0x20000098
 8001c80:	2000019a 	.word	0x2000019a
 8001c84:	2000009a 	.word	0x2000009a
 8001c88:	08006d54 	.word	0x08006d54
 8001c8c:	200003c0 	.word	0x200003c0
 8001c90:	20000508 	.word	0x20000508
 8001c94:	2000009c 	.word	0x2000009c
 8001c98:	20000164 	.word	0x20000164
 8001c9c:	08006d84 	.word	0x08006d84
 8001ca0:	20000194 	.word	0x20000194
 8001ca4:	08006c68 	.word	0x08006c68
 8001ca8:	20000551 	.word	0x20000551
 8001cac:	08006c58 	.word	0x08006c58

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <Error_Handler+0x6>

08001cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_MspInit+0x4c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <HAL_MspInit+0x4c>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_MspInit+0x4c>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_MspInit+0x4c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_MspInit+0x4c>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_MspInit+0x4c>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800

08001d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a49      	ldr	r2, [pc, #292]	; (8001e4c <HAL_ADC_MspInit+0x144>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	f040 808c 	bne.w	8001e44 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	4a46      	ldr	r2, [pc, #280]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3c:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a3f      	ldr	r2, [pc, #252]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a38      	ldr	r2, [pc, #224]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6313      	str	r3, [r2, #48]	; 0x30
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4a31      	ldr	r2, [pc, #196]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_ADC_MspInit+0x148>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d9c:	233f      	movs	r3, #63	; 0x3f
 8001d9e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da0:	2303      	movs	r3, #3
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	4829      	ldr	r0, [pc, #164]	; (8001e54 <HAL_ADC_MspInit+0x14c>)
 8001db0:	f001 fd24 	bl	80037fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001db4:	23ff      	movs	r3, #255	; 0xff
 8001db6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4824      	ldr	r0, [pc, #144]	; (8001e58 <HAL_ADC_MspInit+0x150>)
 8001dc8:	f001 fd18 	bl	80037fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	481f      	ldr	r0, [pc, #124]	; (8001e5c <HAL_ADC_MspInit+0x154>)
 8001de0:	f001 fd0c 	bl	80037fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001de6:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_ADC_MspInit+0x15c>)
 8001de8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e12:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001e2a:	f001 f909 	bl	8003040 <HAL_DMA_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001e34:	f7ff ff3c 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a09      	ldr	r2, [pc, #36]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_ADC_MspInit+0x158>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	3730      	adds	r7, #48	; 0x30
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40012000 	.word	0x40012000
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	200002dc 	.word	0x200002dc
 8001e64:	40026410 	.word	0x40026410

08001e68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a3a      	ldr	r2, [pc, #232]	; (8001f70 <HAL_TIM_Encoder_MspInit+0x108>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d13d      	bne.n	8001f06 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a38      	ldr	r2, [pc, #224]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8001ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	4826      	ldr	r0, [pc, #152]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x110>)
 8001ee0:	f001 fc8c 	bl	80037fc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2019      	movs	r0, #25
 8001eea:	f001 f872 	bl	8002fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001eee:	2019      	movs	r0, #25
 8001ef0:	f001 f88b 	bl	800300a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	201a      	movs	r0, #26
 8001efa:	f001 f86a 	bl	8002fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001efe:	201a      	movs	r0, #26
 8001f00:	f001 f883 	bl	800300a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f04:	e030      	b.n	8001f68 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x114>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d12b      	bne.n	8001f68 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8001f48:	2330      	movs	r3, #48	; 0x30
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	4807      	ldr	r0, [pc, #28]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f64:	f001 fc4a 	bl	80037fc <HAL_GPIO_Init>
}
 8001f68:	bf00      	nop
 8001f6a:	3730      	adds	r7, #48	; 0x30
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40010000 	.word	0x40010000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40020400 	.word	0x40020400

08001f84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10d      	bne.n	8001fb2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x40>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a42      	ldr	r2, [pc, #264]	; (80020e0 <HAL_TIM_Base_MspInit+0x118>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d116      	bne.n	8002008 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a40      	ldr	r2, [pc, #256]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2036      	movs	r0, #54	; 0x36
 8001ffc:	f000 ffe9 	bl	8002fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002000:	2036      	movs	r0, #54	; 0x36
 8002002:	f001 f802 	bl	800300a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002006:	e066      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a36      	ldr	r2, [pc, #216]	; (80020e8 <HAL_TIM_Base_MspInit+0x120>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d116      	bne.n	8002040 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a32      	ldr	r2, [pc, #200]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 800201c:	f043 0320 	orr.w	r3, r3, #32
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2037      	movs	r0, #55	; 0x37
 8002034:	f000 ffcd 	bl	8002fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002038:	2037      	movs	r0, #55	; 0x37
 800203a:	f000 ffe6 	bl	800300a <HAL_NVIC_EnableIRQ>
}
 800203e:	e04a      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a29      	ldr	r2, [pc, #164]	; (80020ec <HAL_TIM_Base_MspInit+0x124>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d116      	bne.n	8002078 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	2019      	movs	r0, #25
 800206c:	f000 ffb1 	bl	8002fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002070:	2019      	movs	r0, #25
 8002072:	f000 ffca 	bl	800300a <HAL_NVIC_EnableIRQ>
}
 8002076:	e02e      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_TIM_Base_MspInit+0x128>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d116      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	201a      	movs	r0, #26
 80020a4:	f000 ff95 	bl	8002fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80020a8:	201a      	movs	r0, #26
 80020aa:	f000 ffae 	bl	800300a <HAL_NVIC_EnableIRQ>
}
 80020ae:	e012      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM13)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <HAL_TIM_Base_MspInit+0x12c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10d      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_TIM_Base_MspInit+0x11c>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
}
 80020d6:	bf00      	nop
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40001000 	.word	0x40001000
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40001400 	.word	0x40001400
 80020ec:	40014400 	.word	0x40014400
 80020f0:	40014800 	.word	0x40014800
 80020f4:	40001c00 	.word	0x40001c00

080020f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <HAL_TIM_MspPostInit+0x68>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d11d      	bne.n	8002156 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_TIM_MspPostInit+0x6c>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_TIM_MspPostInit+0x6c>)
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_TIM_MspPostInit+0x6c>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8002136:	23c0      	movs	r3, #192	; 0xc0
 8002138:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002146:	2302      	movs	r3, #2
 8002148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <HAL_TIM_MspPostInit+0x70>)
 8002152:	f001 fb53 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002156:	bf00      	nop
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40000800 	.word	0x40000800
 8002164:	40023800 	.word	0x40023800
 8002168:	40020400 	.word	0x40020400

0800216c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_UART_MspInit+0x84>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d12b      	bne.n	80021e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_UART_MspInit+0x88>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_UART_MspInit+0x88>)
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021d6:	2308      	movs	r3, #8
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_UART_MspInit+0x8c>)
 80021e2:	f001 fb0b 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40011400 	.word	0x40011400
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020800 	.word	0x40020800

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <NMI_Handler+0x4>

08002202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <HardFault_Handler+0x4>

08002208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <MemManage_Handler+0x4>

0800220e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <UsageFault_Handler+0x4>

0800221a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002248:	f000 f972 	bl	8002530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}

08002250 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002256:	f002 fb49 	bl	80048ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800225a:	4803      	ldr	r0, [pc, #12]	; (8002268 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800225c:	f002 fb46 	bl	80048ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000380 	.word	0x20000380
 8002268:	20000120 	.word	0x20000120

0800226c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002272:	f002 fb3b 	bl	80048ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002278:	f002 fb38 	bl	80048ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000380 	.word	0x20000380
 8002284:	20000280 	.word	0x20000280

08002288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <TIM6_DAC_IRQHandler+0x10>)
 800228e:	f002 fb2d 	bl	80048ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000340 	.word	0x20000340

0800229c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <TIM7_IRQHandler+0x10>)
 80022a2:	f002 fb23 	bl	80048ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2000050c 	.word	0x2000050c

080022b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <DMA2_Stream0_IRQHandler+0x10>)
 80022b6:	f001 f839 	bl	800332c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200002dc 	.word	0x200002dc

080022c4 <_read>:
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e00a      	b.n	80022ec <_read+0x28>
 80022d6:	f3af 8000 	nop.w
 80022da:	4601      	mov	r1, r0
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	60ba      	str	r2, [r7, #8]
 80022e2:	b2ca      	uxtb	r2, r1
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbf0      	blt.n	80022d6 <_read+0x12>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_write>:
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e009      	b.n	8002324 <_write+0x26>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	60ba      	str	r2, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f929 	bl	8000570 <__io_putchar>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	dbf1      	blt.n	8002310 <_write+0x12>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <_close>:
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_fstat>:
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	2300      	movs	r3, #0
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_isatty>:
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	2301      	movs	r3, #1
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_lseek>:
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	2300      	movs	r3, #0
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <_sbrk>:
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <_sbrk+0x5c>)
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <_sbrk+0x60>)
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <_sbrk+0x22>
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <_sbrk+0x64>)
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <_sbrk+0x68>)
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d207      	bcs.n	80023e0 <_sbrk+0x40>
 80023d0:	f003 fc34 	bl	8005c3c <__errno>
 80023d4:	4602      	mov	r2, r0
 80023d6:	230c      	movs	r3, #12
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	e009      	b.n	80023f4 <_sbrk+0x54>
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <_sbrk+0x64>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <_sbrk+0x64>)
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20020000 	.word	0x20020000
 8002400:	00000400 	.word	0x00000400
 8002404:	2000008c 	.word	0x2000008c
 8002408:	20000560 	.word	0x20000560

0800240c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <SystemInit+0x28>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <SystemInit+0x28>)
 8002418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800241c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <SystemInit+0x28>)
 8002422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002426:	609a      	str	r2, [r3, #8]
#endif
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <Reset_Handler>:
 8002438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002470 <LoopFillZerobss+0x14>
 800243c:	2100      	movs	r1, #0
 800243e:	e003      	b.n	8002448 <LoopCopyDataInit>

08002440 <CopyDataInit>:
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <LoopFillZerobss+0x18>)
 8002442:	585b      	ldr	r3, [r3, r1]
 8002444:	5043      	str	r3, [r0, r1]
 8002446:	3104      	adds	r1, #4

08002448 <LoopCopyDataInit>:
 8002448:	480b      	ldr	r0, [pc, #44]	; (8002478 <LoopFillZerobss+0x1c>)
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <LoopFillZerobss+0x20>)
 800244c:	1842      	adds	r2, r0, r1
 800244e:	429a      	cmp	r2, r3
 8002450:	d3f6      	bcc.n	8002440 <CopyDataInit>
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <LoopFillZerobss+0x24>)
 8002454:	e002      	b.n	800245c <LoopFillZerobss>

08002456 <FillZerobss>:
 8002456:	2300      	movs	r3, #0
 8002458:	f842 3b04 	str.w	r3, [r2], #4

0800245c <LoopFillZerobss>:
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <LoopFillZerobss+0x28>)
 800245e:	429a      	cmp	r2, r3
 8002460:	d3f9      	bcc.n	8002456 <FillZerobss>
 8002462:	f7ff ffd3 	bl	800240c <SystemInit>
 8002466:	f003 fbef 	bl	8005c48 <__libc_init_array>
 800246a:	f7fe fbd3 	bl	8000c14 <main>
 800246e:	4770      	bx	lr
 8002470:	20020000 	.word	0x20020000
 8002474:	08006e8c 	.word	0x08006e8c
 8002478:	20000000 	.word	0x20000000
 800247c:	20000070 	.word	0x20000070
 8002480:	20000070 	.word	0x20000070
 8002484:	2000055c 	.word	0x2000055c

08002488 <ADC_IRQHandler>:
 8002488:	e7fe      	b.n	8002488 <ADC_IRQHandler>
	...

0800248c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <HAL_Init+0x40>)
 8002496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_Init+0x40>)
 80024a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a07      	ldr	r2, [pc, #28]	; (80024cc <HAL_Init+0x40>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f000 fd81 	bl	8002fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f000 f808 	bl	80024d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c0:	f7ff fbfa 	bl	8001cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023c00 	.word	0x40023c00

080024d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_InitTick+0x54>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_InitTick+0x58>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fd99 	bl	8003026 <HAL_SYSTICK_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00e      	b.n	800251c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d80a      	bhi.n	800251a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002504:	2200      	movs	r2, #0
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f000 fd61 	bl	8002fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <HAL_InitTick+0x5c>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000000 	.word	0x20000000
 8002528:	20000008 	.word	0x20000008
 800252c:	20000004 	.word	0x20000004

08002530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_IncTick+0x20>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_IncTick+0x24>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4413      	add	r3, r2
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <HAL_IncTick+0x24>)
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000008 	.word	0x20000008
 8002554:	20000554 	.word	0x20000554

08002558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return uwTick;
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_GetTick+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000554 	.word	0x20000554

08002570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff ffee 	bl	8002558 <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d005      	beq.n	8002596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_Delay+0x40>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002596:	bf00      	nop
 8002598:	f7ff ffde 	bl	8002558 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d8f7      	bhi.n	8002598 <HAL_Delay+0x28>
  {
  }
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000008 	.word	0x20000008

080025b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e033      	b.n	8002632 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff fb98 	bl	8001d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d118      	bne.n	8002624 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025fa:	f023 0302 	bic.w	r3, r3, #2
 80025fe:	f043 0202 	orr.w	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa8a 	bl	8002b20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
 8002622:	e001      	b.n	8002628 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_ADC_Start_DMA+0x1e>
 8002656:	2302      	movs	r3, #2
 8002658:	e0cc      	b.n	80027f4 <HAL_ADC_Start_DMA+0x1b8>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d018      	beq.n	80026a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002680:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <HAL_ADC_Start_DMA+0x1c0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a5e      	ldr	r2, [pc, #376]	; (8002800 <HAL_ADC_Start_DMA+0x1c4>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	0c9a      	lsrs	r2, r3, #18
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002694:	e002      	b.n	800269c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	3b01      	subs	r3, #1
 800269a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f9      	bne.n	8002696 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f040 80a0 	bne.w	80027f2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f0:	d106      	bne.n	8002700 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f023 0206 	bic.w	r2, r3, #6
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
 80026fe:	e002      	b.n	8002706 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_ADC_Start_DMA+0x1c8>)
 8002710:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	4a3c      	ldr	r2, [pc, #240]	; (8002808 <HAL_ADC_Start_DMA+0x1cc>)
 8002718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	4a3b      	ldr	r2, [pc, #236]	; (800280c <HAL_ADC_Start_DMA+0x1d0>)
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	4a3a      	ldr	r2, [pc, #232]	; (8002810 <HAL_ADC_Start_DMA+0x1d4>)
 8002728:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002732:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002742:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002752:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	334c      	adds	r3, #76	; 0x4c
 800275e:	4619      	mov	r1, r3
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f000 fd1a 	bl	800319c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	2b00      	cmp	r3, #0
 8002772:	d12a      	bne.n	80027ca <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a26      	ldr	r2, [pc, #152]	; (8002814 <HAL_ADC_Start_DMA+0x1d8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d015      	beq.n	80027aa <HAL_ADC_Start_DMA+0x16e>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a25      	ldr	r2, [pc, #148]	; (8002818 <HAL_ADC_Start_DMA+0x1dc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d105      	bne.n	8002794 <HAL_ADC_Start_DMA+0x158>
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_ADC_Start_DMA+0x1c8>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a20      	ldr	r2, [pc, #128]	; (800281c <HAL_ADC_Start_DMA+0x1e0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d129      	bne.n	80027f2 <HAL_ADC_Start_DMA+0x1b6>
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_ADC_Start_DMA+0x1c8>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	d823      	bhi.n	80027f2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d11c      	bne.n	80027f2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	e013      	b.n	80027f2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_ADC_Start_DMA+0x1d8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d10e      	bne.n	80027f2 <HAL_ADC_Start_DMA+0x1b6>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027f0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000000 	.word	0x20000000
 8002800:	431bde83 	.word	0x431bde83
 8002804:	40012300 	.word	0x40012300
 8002808:	08002d19 	.word	0x08002d19
 800280c:	08002dd3 	.word	0x08002dd3
 8002810:	08002def 	.word	0x08002def
 8002814:	40012000 	.word	0x40012000
 8002818:	40012100 	.word	0x40012100
 800281c:	40012200 	.word	0x40012200

08002820 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_ADC_Stop_DMA+0x1a>
 8002836:	2302      	movs	r3, #2
 8002838:	e038      	b.n	80028ac <HAL_ADC_Stop_DMA+0x8c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d120      	bne.n	80028a2 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800286e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fce9 	bl	800324c <HAL_DMA_Abort>
 800287a:	4603      	mov	r3, r0
 800287c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800288c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1c>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e105      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x228>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b09      	cmp	r3, #9
 8002906:	d925      	bls.n	8002954 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68d9      	ldr	r1, [r3, #12]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	3b1e      	subs	r3, #30
 800291e:	2207      	movs	r2, #7
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43da      	mvns	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	400a      	ands	r2, r1
 800292c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68d9      	ldr	r1, [r3, #12]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	4603      	mov	r3, r0
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4403      	add	r3, r0
 8002946:	3b1e      	subs	r3, #30
 8002948:	409a      	lsls	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	e022      	b.n	800299a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6919      	ldr	r1, [r3, #16]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	2207      	movs	r2, #7
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	400a      	ands	r2, r1
 8002976:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6919      	ldr	r1, [r3, #16]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	4618      	mov	r0, r3
 800298a:	4603      	mov	r3, r0
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4403      	add	r3, r0
 8002990:	409a      	lsls	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d824      	bhi.n	80029ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	3b05      	subs	r3, #5
 80029b4:	221f      	movs	r2, #31
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	400a      	ands	r2, r1
 80029c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	4618      	mov	r0, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	3b05      	subs	r3, #5
 80029de:	fa00 f203 	lsl.w	r2, r0, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ea:	e04c      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	d824      	bhi.n	8002a3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	3b23      	subs	r3, #35	; 0x23
 8002a06:	221f      	movs	r2, #31
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	400a      	ands	r2, r1
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b23      	subs	r3, #35	; 0x23
 8002a30:	fa00 f203 	lsl.w	r2, r0, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a3c:	e023      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3b41      	subs	r3, #65	; 0x41
 8002a50:	221f      	movs	r2, #31
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	3b41      	subs	r3, #65	; 0x41
 8002a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_ADC_ConfigChannel+0x234>)
 8002a88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <HAL_ADC_ConfigChannel+0x238>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1cc>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b12      	cmp	r3, #18
 8002a9a:	d105      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <HAL_ADC_ConfigChannel+0x238>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d123      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x21e>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d003      	beq.n	8002ac2 <HAL_ADC_ConfigChannel+0x1e6>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b11      	cmp	r3, #17
 8002ac0:	d11b      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d111      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_ADC_ConfigChannel+0x23c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a10      	ldr	r2, [pc, #64]	; (8002b1c <HAL_ADC_ConfigChannel+0x240>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	0c9a      	lsrs	r2, r3, #18
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002aec:	e002      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f9      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40012300 	.word	0x40012300
 8002b14:	40012000 	.word	0x40012000
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	431bde83 	.word	0x431bde83

08002b20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b28:	4b79      	ldr	r3, [pc, #484]	; (8002d10 <ADC_Init+0x1f0>)
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6859      	ldr	r1, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6899      	ldr	r1, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	4a58      	ldr	r2, [pc, #352]	; (8002d14 <ADC_Init+0x1f4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d022      	beq.n	8002bfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6899      	ldr	r1, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6899      	ldr	r1, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	e00f      	b.n	8002c1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0202 	bic.w	r2, r2, #2
 8002c2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e1b      	ldrb	r3, [r3, #24]
 8002c38:	005a      	lsls	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01b      	beq.n	8002c84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	3b01      	subs	r3, #1
 8002c78:	035a      	lsls	r2, r3, #13
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	e007      	b.n	8002c94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	051a      	lsls	r2, r3, #20
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6899      	ldr	r1, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cd6:	025a      	lsls	r2, r3, #9
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6899      	ldr	r1, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	029a      	lsls	r2, r3, #10
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40012300 	.word	0x40012300
 8002d14:	0f000001 	.word	0x0f000001

08002d18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d13c      	bne.n	8002dac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d12b      	bne.n	8002da4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d127      	bne.n	8002da4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d006      	beq.n	8002d70 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d119      	bne.n	8002da4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0220 	bic.w	r2, r2, #32
 8002d7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7fd fbf5 	bl	8000594 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002daa:	e00e      	b.n	8002dca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff fd85 	bl	80028c8 <HAL_ADC_ErrorCallback>
}
 8002dbe:	e004      	b.n	8002dca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4798      	blx	r3
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fd67 	bl	80028b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2240      	movs	r2, #64	; 0x40
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f043 0204 	orr.w	r2, r3, #4
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff fd5a 	bl	80028c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4e:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	60d3      	str	r3, [r2, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <__NVIC_GetPriorityGrouping+0x18>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 0307 	and.w	r3, r3, #7
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db0b      	blt.n	8002eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	4907      	ldr	r1, [pc, #28]	; (8002eb8 <__NVIC_EnableIRQ+0x38>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000e100 	.word	0xe000e100

08002ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6039      	str	r1, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	db0a      	blt.n	8002ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	490c      	ldr	r1, [pc, #48]	; (8002f08 <__NVIC_SetPriority+0x4c>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	0112      	lsls	r2, r2, #4
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee4:	e00a      	b.n	8002efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4908      	ldr	r1, [pc, #32]	; (8002f0c <__NVIC_SetPriority+0x50>)
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	3b04      	subs	r3, #4
 8002ef4:	0112      	lsls	r2, r2, #4
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	440b      	add	r3, r1
 8002efa:	761a      	strb	r2, [r3, #24]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000e100 	.word	0xe000e100
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f1c3 0307 	rsb	r3, r3, #7
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	bf28      	it	cs
 8002f2e:	2304      	movcs	r3, #4
 8002f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3304      	adds	r3, #4
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d902      	bls.n	8002f40 <NVIC_EncodePriority+0x30>
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3b03      	subs	r3, #3
 8002f3e:	e000      	b.n	8002f42 <NVIC_EncodePriority+0x32>
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	401a      	ands	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f58:	f04f 31ff 	mov.w	r1, #4294967295
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	43d9      	mvns	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f68:	4313      	orrs	r3, r2
         );
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f88:	d301      	bcc.n	8002f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e00f      	b.n	8002fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <SysTick_Config+0x40>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f96:	210f      	movs	r1, #15
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9c:	f7ff ff8e 	bl	8002ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <SysTick_Config+0x40>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa6:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <SysTick_Config+0x40>)
 8002fa8:	2207      	movs	r2, #7
 8002faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	e000e010 	.word	0xe000e010

08002fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ff29 	bl	8002e1c <__NVIC_SetPriorityGrouping>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe4:	f7ff ff3e 	bl	8002e64 <__NVIC_GetPriorityGrouping>
 8002fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	6978      	ldr	r0, [r7, #20]
 8002ff0:	f7ff ff8e 	bl	8002f10 <NVIC_EncodePriority>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff5d 	bl	8002ebc <__NVIC_SetPriority>
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	4603      	mov	r3, r0
 8003012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff31 	bl	8002e80 <__NVIC_EnableIRQ>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ffa2 	bl	8002f78 <SysTick_Config>
 8003034:	4603      	mov	r3, r0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800304c:	f7ff fa84 	bl	8002558 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e099      	b.n	8003190 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800307c:	e00f      	b.n	800309e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800307e:	f7ff fa6b 	bl	8002558 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b05      	cmp	r3, #5
 800308a:	d908      	bls.n	800309e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2203      	movs	r2, #3
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e078      	b.n	8003190 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e8      	bne.n	800307e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_DMA_Init+0x158>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d107      	bne.n	8003108 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	4313      	orrs	r3, r2
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 0307 	bic.w	r3, r3, #7
 800311e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b04      	cmp	r3, #4
 8003130:	d117      	bne.n	8003162 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00e      	beq.n	8003162 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fadf 	bl	8003708 <DMA_CheckFifoParam>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800315e:	2301      	movs	r3, #1
 8003160:	e016      	b.n	8003190 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa96 	bl	800369c <DMA_CalcBaseAndBitshift>
 8003170:	4603      	mov	r3, r0
 8003172:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003178:	223f      	movs	r2, #63	; 0x3f
 800317a:	409a      	lsls	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	f010803f 	.word	0xf010803f

0800319c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_DMA_Start_IT+0x26>
 80031be:	2302      	movs	r3, #2
 80031c0:	e040      	b.n	8003244 <HAL_DMA_Start_IT+0xa8>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d12f      	bne.n	8003236 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fa28 	bl	8003640 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	223f      	movs	r2, #63	; 0x3f
 80031f6:	409a      	lsls	r2, r3
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0216 	orr.w	r2, r2, #22
 800320a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e005      	b.n	8003242 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800323e:	2302      	movs	r3, #2
 8003240:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800325a:	f7ff f97d 	bl	8002558 <HAL_GetTick>
 800325e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d008      	beq.n	800327e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2280      	movs	r2, #128	; 0x80
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e052      	b.n	8003324 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0216 	bic.w	r2, r2, #22
 800328c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800329c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <HAL_DMA_Abort+0x62>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0208 	bic.w	r2, r2, #8
 80032bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ce:	e013      	b.n	80032f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d0:	f7ff f942 	bl	8002558 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d90c      	bls.n	80032f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2203      	movs	r2, #3
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e015      	b.n	8003324 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1e4      	bne.n	80032d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	223f      	movs	r2, #63	; 0x3f
 800330c:	409a      	lsls	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003338:	4b92      	ldr	r3, [pc, #584]	; (8003584 <HAL_DMA_IRQHandler+0x258>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a92      	ldr	r2, [pc, #584]	; (8003588 <HAL_DMA_IRQHandler+0x25c>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0a9b      	lsrs	r3, r3, #10
 8003344:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	2208      	movs	r2, #8
 8003358:	409a      	lsls	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01a      	beq.n	8003398 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0204 	bic.w	r2, r2, #4
 800337e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	2208      	movs	r2, #8
 8003386:	409a      	lsls	r2, r3
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d012      	beq.n	80033ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	2201      	movs	r2, #1
 80033bc:	409a      	lsls	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f043 0202 	orr.w	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	2204      	movs	r2, #4
 80033d4:	409a      	lsls	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00b      	beq.n	8003404 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	2204      	movs	r2, #4
 80033f2:	409a      	lsls	r2, r3
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	f043 0204 	orr.w	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	2210      	movs	r2, #16
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d043      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d03c      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	2210      	movs	r2, #16
 8003428:	409a      	lsls	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d018      	beq.n	800346e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d108      	bne.n	800345c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d024      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
 800345a:	e01f      	b.n	800349c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
 800346c:	e016      	b.n	800349c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0208 	bic.w	r2, r2, #8
 800348a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	2220      	movs	r2, #32
 80034a2:	409a      	lsls	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 808e 	beq.w	80035ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8086 	beq.w	80035ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	2220      	movs	r2, #32
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d136      	bne.n	8003544 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0216 	bic.w	r2, r2, #22
 80034e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_DMA_IRQHandler+0x1da>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0208 	bic.w	r2, r2, #8
 8003514:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	223f      	movs	r2, #63	; 0x3f
 800351c:	409a      	lsls	r2, r3
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	2b00      	cmp	r3, #0
 8003538:	d07d      	beq.n	8003636 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
        }
        return;
 8003542:	e078      	b.n	8003636 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01c      	beq.n	800358c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d108      	bne.n	8003572 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	2b00      	cmp	r3, #0
 8003566:	d030      	beq.n	80035ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
 8003570:	e02b      	b.n	80035ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d027      	beq.n	80035ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
 8003582:	e022      	b.n	80035ca <HAL_DMA_IRQHandler+0x29e>
 8003584:	20000000 	.word	0x20000000
 8003588:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10f      	bne.n	80035ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0210 	bic.w	r2, r2, #16
 80035a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d032      	beq.n	8003638 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d022      	beq.n	8003624 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2205      	movs	r2, #5
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3301      	adds	r3, #1
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d307      	bcc.n	8003612 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f2      	bne.n	80035f6 <HAL_DMA_IRQHandler+0x2ca>
 8003610:	e000      	b.n	8003614 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003612:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
 8003634:	e000      	b.n	8003638 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003636:	bf00      	nop
    }
  }
}
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop

08003640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800365c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b40      	cmp	r3, #64	; 0x40
 800366c:	d108      	bne.n	8003680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800367e:	e007      	b.n	8003690 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	3b10      	subs	r3, #16
 80036ac:	4a14      	ldr	r2, [pc, #80]	; (8003700 <DMA_CalcBaseAndBitshift+0x64>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036b6:	4a13      	ldr	r2, [pc, #76]	; (8003704 <DMA_CalcBaseAndBitshift+0x68>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d909      	bls.n	80036de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	659a      	str	r2, [r3, #88]	; 0x58
 80036dc:	e007      	b.n	80036ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036e6:	f023 0303 	bic.w	r3, r3, #3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	aaaaaaab 	.word	0xaaaaaaab
 8003704:	08006ddc 	.word	0x08006ddc

08003708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11f      	bne.n	8003762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d855      	bhi.n	80037d4 <DMA_CheckFifoParam+0xcc>
 8003728:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <DMA_CheckFifoParam+0x28>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003741 	.word	0x08003741
 8003734:	08003753 	.word	0x08003753
 8003738:	08003741 	.word	0x08003741
 800373c:	080037d5 	.word	0x080037d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d045      	beq.n	80037d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003750:	e042      	b.n	80037d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800375a:	d13f      	bne.n	80037dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003760:	e03c      	b.n	80037dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376a:	d121      	bne.n	80037b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b03      	cmp	r3, #3
 8003770:	d836      	bhi.n	80037e0 <DMA_CheckFifoParam+0xd8>
 8003772:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <DMA_CheckFifoParam+0x70>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	08003789 	.word	0x08003789
 800377c:	0800378f 	.word	0x0800378f
 8003780:	08003789 	.word	0x08003789
 8003784:	080037a1 	.word	0x080037a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e02f      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d024      	beq.n	80037e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379e:	e021      	b.n	80037e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037a8:	d11e      	bne.n	80037e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ae:	e01b      	b.n	80037e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d902      	bls.n	80037bc <DMA_CheckFifoParam+0xb4>
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d003      	beq.n	80037c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037ba:	e018      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	e015      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00e      	beq.n	80037ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
      break;
 80037d2:	e00b      	b.n	80037ec <DMA_CheckFifoParam+0xe4>
      break;
 80037d4:	bf00      	nop
 80037d6:	e00a      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      break;
 80037d8:	bf00      	nop
 80037da:	e008      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      break;
 80037dc:	bf00      	nop
 80037de:	e006      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      break;
 80037e0:	bf00      	nop
 80037e2:	e004      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      break;
 80037e4:	bf00      	nop
 80037e6:	e002      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      break;   
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <DMA_CheckFifoParam+0xe6>
      break;
 80037ec:	bf00      	nop
    }
  } 
  
  return status; 
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	e16b      	b.n	8003af0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003818:	2201      	movs	r2, #1
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	429a      	cmp	r2, r3
 8003832:	f040 815a 	bne.w	8003aea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d00b      	beq.n	8003856 <HAL_GPIO_Init+0x5a>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d007      	beq.n	8003856 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800384a:	2b11      	cmp	r3, #17
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b12      	cmp	r3, #18
 8003854:	d130      	bne.n	80038b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	2203      	movs	r2, #3
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800388c:	2201      	movs	r2, #1
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 0201 	and.w	r2, r3, #1
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0xfc>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b12      	cmp	r3, #18
 80038f6:	d123      	bne.n	8003940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	08da      	lsrs	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3208      	adds	r2, #8
 8003900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	220f      	movs	r2, #15
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	08da      	lsrs	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3208      	adds	r2, #8
 800393a:	69b9      	ldr	r1, [r7, #24]
 800393c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0203 	and.w	r2, r3, #3
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80b4 	beq.w	8003aea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	4b5f      	ldr	r3, [pc, #380]	; (8003b04 <HAL_GPIO_Init+0x308>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	4a5e      	ldr	r2, [pc, #376]	; (8003b04 <HAL_GPIO_Init+0x308>)
 800398c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003990:	6453      	str	r3, [r2, #68]	; 0x44
 8003992:	4b5c      	ldr	r3, [pc, #368]	; (8003b04 <HAL_GPIO_Init+0x308>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800399e:	4a5a      	ldr	r2, [pc, #360]	; (8003b08 <HAL_GPIO_Init+0x30c>)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	3302      	adds	r3, #2
 80039a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	220f      	movs	r2, #15
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a51      	ldr	r2, [pc, #324]	; (8003b0c <HAL_GPIO_Init+0x310>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d02b      	beq.n	8003a22 <HAL_GPIO_Init+0x226>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a50      	ldr	r2, [pc, #320]	; (8003b10 <HAL_GPIO_Init+0x314>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d025      	beq.n	8003a1e <HAL_GPIO_Init+0x222>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a4f      	ldr	r2, [pc, #316]	; (8003b14 <HAL_GPIO_Init+0x318>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01f      	beq.n	8003a1a <HAL_GPIO_Init+0x21e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a4e      	ldr	r2, [pc, #312]	; (8003b18 <HAL_GPIO_Init+0x31c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d019      	beq.n	8003a16 <HAL_GPIO_Init+0x21a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4d      	ldr	r2, [pc, #308]	; (8003b1c <HAL_GPIO_Init+0x320>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_GPIO_Init+0x216>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a4c      	ldr	r2, [pc, #304]	; (8003b20 <HAL_GPIO_Init+0x324>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00d      	beq.n	8003a0e <HAL_GPIO_Init+0x212>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a4b      	ldr	r2, [pc, #300]	; (8003b24 <HAL_GPIO_Init+0x328>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <HAL_GPIO_Init+0x20e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <HAL_GPIO_Init+0x32c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_GPIO_Init+0x20a>
 8003a02:	2307      	movs	r3, #7
 8003a04:	e00e      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a06:	2308      	movs	r3, #8
 8003a08:	e00c      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a0a:	2306      	movs	r3, #6
 8003a0c:	e00a      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a0e:	2305      	movs	r3, #5
 8003a10:	e008      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a12:	2304      	movs	r3, #4
 8003a14:	e006      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a16:	2303      	movs	r3, #3
 8003a18:	e004      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e002      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a22:	2300      	movs	r3, #0
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	f002 0203 	and.w	r2, r2, #3
 8003a2a:	0092      	lsls	r2, r2, #2
 8003a2c:	4093      	lsls	r3, r2
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a34:	4934      	ldr	r1, [pc, #208]	; (8003b08 <HAL_GPIO_Init+0x30c>)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a42:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <HAL_GPIO_Init+0x330>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a66:	4a31      	ldr	r2, [pc, #196]	; (8003b2c <HAL_GPIO_Init+0x330>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a6c:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_GPIO_Init+0x330>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a90:	4a26      	ldr	r2, [pc, #152]	; (8003b2c <HAL_GPIO_Init+0x330>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <HAL_GPIO_Init+0x330>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aba:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <HAL_GPIO_Init+0x330>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <HAL_GPIO_Init+0x330>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae4:	4a11      	ldr	r2, [pc, #68]	; (8003b2c <HAL_GPIO_Init+0x330>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b0f      	cmp	r3, #15
 8003af4:	f67f ae90 	bls.w	8003818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af8:	bf00      	nop
 8003afa:	3724      	adds	r7, #36	; 0x24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	40020000 	.word	0x40020000
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40020800 	.word	0x40020800
 8003b18:	40020c00 	.word	0x40020c00
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40021400 	.word	0x40021400
 8003b24:	40021800 	.word	0x40021800
 8003b28:	40021c00 	.word	0x40021c00
 8003b2c:	40013c00 	.word	0x40013c00

08003b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	887b      	ldrh	r3, [r7, #2]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
 8003b4c:	e001      	b.n	8003b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b70:	787b      	ldrb	r3, [r7, #1]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b76:	887a      	ldrh	r2, [r7, #2]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b7c:	e003      	b.n	8003b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	041a      	lsls	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	619a      	str	r2, [r3, #24]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e25b      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb2:	4ba3      	ldr	r3, [pc, #652]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b9d      	ldr	r3, [pc, #628]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b99      	ldr	r3, [pc, #612]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05b      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d157      	bne.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e236      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x74>
 8003bfa:	4b91      	ldr	r3, [pc, #580]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b8b      	ldr	r3, [pc, #556]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a8a      	ldr	r2, [pc, #552]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a87      	ldr	r2, [pc, #540]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	4b84      	ldr	r3, [pc, #528]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a83      	ldr	r2, [pc, #524]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b81      	ldr	r3, [pc, #516]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a80      	ldr	r2, [pc, #512]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fc84 	bl	8002558 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fe fc80 	bl	8002558 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1fb      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe fc70 	bl	8002558 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fe fc6c 	bl	8002558 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1e7      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	4b6c      	ldr	r3, [pc, #432]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003caa:	4b65      	ldr	r3, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1bb      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4952      	ldr	r1, [pc, #328]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fe fc25 	bl	8002558 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fe fc21 	bl	8002558 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e19c      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b46      	ldr	r3, [pc, #280]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4940      	ldr	r1, [pc, #256]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fc04 	bl	8002558 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fe fc00 	bl	8002558 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e17b      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d030      	beq.n	8003de0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fe fbe4 	bl	8002558 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fe fbe0 	bl	8002558 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e15b      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x200>
 8003db2:	e015      	b.n	8003de0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fe fbcd 	bl	8002558 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fe fbc9 	bl	8002558 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e144      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a0 	beq.w	8003f2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d121      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fe fb8f 	bl	8002558 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e011      	b.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	42470000 	.word	0x42470000
 8003e48:	42470e80 	.word	0x42470e80
 8003e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fe fb82 	bl	8002558 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0fd      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e62:	4b81      	ldr	r3, [pc, #516]	; (8004068 <HAL_RCC_OscConfig+0x4d4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d106      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2f0>
 8003e76:	4b7d      	ldr	r3, [pc, #500]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a7c      	ldr	r2, [pc, #496]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e01c      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x312>
 8003e8c:	4b77      	ldr	r3, [pc, #476]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a76      	ldr	r2, [pc, #472]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	4b74      	ldr	r3, [pc, #464]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a73      	ldr	r2, [pc, #460]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003ea6:	4b71      	ldr	r3, [pc, #452]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a70      	ldr	r2, [pc, #448]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b6e      	ldr	r3, [pc, #440]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a6d      	ldr	r2, [pc, #436]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fb47 	bl	8002558 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fe fb43 	bl	8002558 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0bc      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	4b61      	ldr	r3, [pc, #388]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ee      	beq.n	8003ece <HAL_RCC_OscConfig+0x33a>
 8003ef0:	e014      	b.n	8003f1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fb31 	bl	8002558 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fe fb2d 	bl	8002558 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0a6      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f10:	4b56      	ldr	r3, [pc, #344]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ee      	bne.n	8003efa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4b52      	ldr	r3, [pc, #328]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a51      	ldr	r2, [pc, #324]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8092 	beq.w	800405c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f38:	4b4c      	ldr	r3, [pc, #304]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d05c      	beq.n	8003ffe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d141      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b48      	ldr	r3, [pc, #288]	; (8004070 <HAL_RCC_OscConfig+0x4dc>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f52:	f7fe fb01 	bl	8002558 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe fafd 	bl	8002558 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e078      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6c:	4b3f      	ldr	r3, [pc, #252]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	019b      	lsls	r3, r3, #6
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	3b01      	subs	r3, #1
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	4933      	ldr	r1, [pc, #204]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa2:	4b33      	ldr	r3, [pc, #204]	; (8004070 <HAL_RCC_OscConfig+0x4dc>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fe fad6 	bl	8002558 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fe fad2 	bl	8002558 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e04d      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc2:	4b2a      	ldr	r3, [pc, #168]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x41c>
 8003fce:	e045      	b.n	800405c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_RCC_OscConfig+0x4dc>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fabf 	bl	8002558 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fe fabb 	bl	8002558 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e036      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff0:	4b1e      	ldr	r3, [pc, #120]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x44a>
 8003ffc:	e02e      	b.n	800405c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e029      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400a:	4b18      	ldr	r3, [pc, #96]	; (800406c <HAL_RCC_OscConfig+0x4d8>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	429a      	cmp	r2, r3
 800401c:	d11c      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d115      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004032:	4013      	ands	r3, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004038:	4293      	cmp	r3, r2
 800403a:	d10d      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d106      	bne.n	8004058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40007000 	.word	0x40007000
 800406c:	40023800 	.word	0x40023800
 8004070:	42470060 	.word	0x42470060

08004074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0cc      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b68      	ldr	r3, [pc, #416]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d90c      	bls.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0b8      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c8:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a58      	ldr	r2, [pc, #352]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e0:	4b53      	ldr	r3, [pc, #332]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a52      	ldr	r2, [pc, #328]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	494d      	ldr	r1, [pc, #308]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d044      	beq.n	8004194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d119      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e07f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	2b03      	cmp	r3, #3
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e067      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4934      	ldr	r1, [pc, #208]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004164:	f7fe f9f8 	bl	8002558 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fe f9f4 	bl	8002558 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e04f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d20c      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e032      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4916      	ldr	r1, [pc, #88]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	490e      	ldr	r1, [pc, #56]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fa:	f000 f821 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80041fe:	4601      	mov	r1, r0
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	5cd3      	ldrb	r3, [r2, r3]
 800420e:	fa21 f303 	lsr.w	r3, r1, r3
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe f958 	bl	80024d0 <HAL_InitTick>

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023c00 	.word	0x40023c00
 8004230:	40023800 	.word	0x40023800
 8004234:	08006dc4 	.word	0x08006dc4
 8004238:	20000000 	.word	0x20000000
 800423c:	20000004 	.word	0x20000004

08004240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	2300      	movs	r3, #0
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004256:	4b63      	ldr	r3, [pc, #396]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b04      	cmp	r3, #4
 8004260:	d007      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x32>
 8004262:	2b08      	cmp	r3, #8
 8004264:	d008      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x38>
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 80b4 	bne.w	80043d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b5e      	ldr	r3, [pc, #376]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800426e:	60bb      	str	r3, [r7, #8]
       break;
 8004270:	e0b3      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004272:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004274:	60bb      	str	r3, [r7, #8]
      break;
 8004276:	e0b0      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4b5a      	ldr	r3, [pc, #360]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004280:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004282:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04a      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b55      	ldr	r3, [pc, #340]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	f04f 0400 	mov.w	r4, #0
 8004298:	f240 11ff 	movw	r1, #511	; 0x1ff
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	ea03 0501 	and.w	r5, r3, r1
 80042a4:	ea04 0602 	and.w	r6, r4, r2
 80042a8:	4629      	mov	r1, r5
 80042aa:	4632      	mov	r2, r6
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	0154      	lsls	r4, r2, #5
 80042b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042ba:	014b      	lsls	r3, r1, #5
 80042bc:	4619      	mov	r1, r3
 80042be:	4622      	mov	r2, r4
 80042c0:	1b49      	subs	r1, r1, r5
 80042c2:	eb62 0206 	sbc.w	r2, r2, r6
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	0194      	lsls	r4, r2, #6
 80042d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042d4:	018b      	lsls	r3, r1, #6
 80042d6:	1a5b      	subs	r3, r3, r1
 80042d8:	eb64 0402 	sbc.w	r4, r4, r2
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	00e2      	lsls	r2, r4, #3
 80042e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042ea:	00d9      	lsls	r1, r3, #3
 80042ec:	460b      	mov	r3, r1
 80042ee:	4614      	mov	r4, r2
 80042f0:	195b      	adds	r3, r3, r5
 80042f2:	eb44 0406 	adc.w	r4, r4, r6
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	02a2      	lsls	r2, r4, #10
 8004300:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004304:	0299      	lsls	r1, r3, #10
 8004306:	460b      	mov	r3, r1
 8004308:	4614      	mov	r4, r2
 800430a:	4618      	mov	r0, r3
 800430c:	4621      	mov	r1, r4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 0400 	mov.w	r4, #0
 8004314:	461a      	mov	r2, r3
 8004316:	4623      	mov	r3, r4
 8004318:	f7fb ffaa 	bl	8000270 <__aeabi_uldivmod>
 800431c:	4603      	mov	r3, r0
 800431e:	460c      	mov	r4, r1
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	e049      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004324:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	f04f 0400 	mov.w	r4, #0
 800432e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	ea03 0501 	and.w	r5, r3, r1
 800433a:	ea04 0602 	and.w	r6, r4, r2
 800433e:	4629      	mov	r1, r5
 8004340:	4632      	mov	r2, r6
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	f04f 0400 	mov.w	r4, #0
 800434a:	0154      	lsls	r4, r2, #5
 800434c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004350:	014b      	lsls	r3, r1, #5
 8004352:	4619      	mov	r1, r3
 8004354:	4622      	mov	r2, r4
 8004356:	1b49      	subs	r1, r1, r5
 8004358:	eb62 0206 	sbc.w	r2, r2, r6
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	f04f 0400 	mov.w	r4, #0
 8004364:	0194      	lsls	r4, r2, #6
 8004366:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800436a:	018b      	lsls	r3, r1, #6
 800436c:	1a5b      	subs	r3, r3, r1
 800436e:	eb64 0402 	sbc.w	r4, r4, r2
 8004372:	f04f 0100 	mov.w	r1, #0
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	00e2      	lsls	r2, r4, #3
 800437c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004380:	00d9      	lsls	r1, r3, #3
 8004382:	460b      	mov	r3, r1
 8004384:	4614      	mov	r4, r2
 8004386:	195b      	adds	r3, r3, r5
 8004388:	eb44 0406 	adc.w	r4, r4, r6
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	02a2      	lsls	r2, r4, #10
 8004396:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800439a:	0299      	lsls	r1, r3, #10
 800439c:	460b      	mov	r3, r1
 800439e:	4614      	mov	r4, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	4621      	mov	r1, r4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f04f 0400 	mov.w	r4, #0
 80043aa:	461a      	mov	r2, r3
 80043ac:	4623      	mov	r3, r4
 80043ae:	f7fb ff5f 	bl	8000270 <__aeabi_uldivmod>
 80043b2:	4603      	mov	r3, r0
 80043b4:	460c      	mov	r4, r1
 80043b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043d6:	60bb      	str	r3, [r7, #8]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	68bb      	ldr	r3, [r7, #8]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	00f42400 	.word	0x00f42400

080043ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000000 	.word	0x20000000

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004408:	f7ff fff0 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 800440c:	4601      	mov	r1, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0a9b      	lsrs	r3, r3, #10
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4a03      	ldr	r2, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	08006dd4 	.word	0x08006dd4

0800442c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004430:	f7ff ffdc 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004434:	4601      	mov	r1, r0
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0b5b      	lsrs	r3, r3, #13
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4a03      	ldr	r2, [pc, #12]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004442:	5cd3      	ldrb	r3, [r2, r3]
 8004444:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40023800 	.word	0x40023800
 8004450:	08006dd4 	.word	0x08006dd4

08004454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e01d      	b.n	80044a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fd fda4 	bl	8001fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fc20 	bl	8004cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0201 	orr.w	r2, r2, #1
 80044c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d007      	beq.n	80044e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a1a      	ldr	r2, [r3, #32]
 8004510:	f241 1311 	movw	r3, #4369	; 0x1111
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <HAL_TIM_Base_Stop_IT+0x48>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6a1a      	ldr	r2, [r3, #32]
 8004520:	f240 4344 	movw	r3, #1092	; 0x444
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d107      	bne.n	800453a <HAL_TIM_Base_Stop_IT+0x48>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e01d      	b.n	8004596 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fd fd08 	bl	8001f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f000 fba6 	bl	8004cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2201      	movs	r2, #1
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fde0 	bl	8005178 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a15      	ldr	r2, [pc, #84]	; (8004614 <HAL_TIM_PWM_Start+0x74>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_TIM_PWM_Start+0x2c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a14      	ldr	r2, [pc, #80]	; (8004618 <HAL_TIM_PWM_Start+0x78>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d101      	bne.n	80045d0 <HAL_TIM_PWM_Start+0x30>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_TIM_PWM_Start+0x32>
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b06      	cmp	r3, #6
 80045f6:	d007      	beq.n	8004608 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	40010400 	.word	0x40010400

0800461c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	6839      	ldr	r1, [r7, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fda2 	bl	8005178 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <HAL_TIM_PWM_Stop+0xa8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <HAL_TIM_PWM_Stop+0x2c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <HAL_TIM_PWM_Stop+0xac>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d101      	bne.n	800464c <HAL_TIM_PWM_Stop+0x30>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <HAL_TIM_PWM_Stop+0x32>
 800464c:	2300      	movs	r3, #0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d017      	beq.n	8004682 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6a1a      	ldr	r2, [r3, #32]
 8004658:	f241 1311 	movw	r3, #4369	; 0x1111
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10f      	bne.n	8004682 <HAL_TIM_PWM_Stop+0x66>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	f240 4344 	movw	r3, #1092	; 0x444
 800466c:	4013      	ands	r3, r2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <HAL_TIM_PWM_Stop+0x66>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	f241 1311 	movw	r3, #4369	; 0x1111
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <HAL_TIM_PWM_Stop+0x96>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6a1a      	ldr	r2, [r3, #32]
 8004698:	f240 4344 	movw	r3, #1092	; 0x444
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d107      	bne.n	80046b2 <HAL_TIM_PWM_Stop+0x96>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40010400 	.word	0x40010400

080046cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e083      	b.n	80047e8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fd fbb7 	bl	8001e68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004710:	f023 0307 	bic.w	r3, r3, #7
 8004714:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f000 fad9 	bl	8004cd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	4313      	orrs	r3, r2
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800476c:	f023 030c 	bic.w	r3, r3, #12
 8004770:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004778:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800477c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	4313      	orrs	r3, r2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	031b      	lsls	r3, r3, #12
 800479c:	4313      	orrs	r3, r2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	4313      	orrs	r3, r2
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_TIM_Encoder_Start+0x16>
 8004800:	2b04      	cmp	r3, #4
 8004802:	d008      	beq.n	8004816 <HAL_TIM_Encoder_Start+0x26>
 8004804:	e00f      	b.n	8004826 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2201      	movs	r2, #1
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fcb2 	bl	8005178 <TIM_CCxChannelCmd>
      break;
 8004814:	e016      	b.n	8004844 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2201      	movs	r2, #1
 800481c:	2104      	movs	r1, #4
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fcaa 	bl	8005178 <TIM_CCxChannelCmd>
      break;
 8004824:	e00e      	b.n	8004844 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2201      	movs	r2, #1
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fca2 	bl	8005178 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2201      	movs	r2, #1
 800483a:	2104      	movs	r1, #4
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fc9b 	bl	8005178 <TIM_CCxChannelCmd>
      break;
 8004842:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_TIM_Encoder_Stop+0x16>
 800486e:	2b04      	cmp	r3, #4
 8004870:	d008      	beq.n	8004884 <HAL_TIM_Encoder_Stop+0x26>
 8004872:	e00f      	b.n	8004894 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fc7b 	bl	8005178 <TIM_CCxChannelCmd>
      break;
 8004882:	e016      	b.n	80048b2 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2200      	movs	r2, #0
 800488a:	2104      	movs	r1, #4
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fc73 	bl	8005178 <TIM_CCxChannelCmd>
      break;
 8004892:	e00e      	b.n	80048b2 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2200      	movs	r2, #0
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fc6b 	bl	8005178 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2104      	movs	r1, #4
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fc64 	bl	8005178 <TIM_CCxChannelCmd>
      break;
 80048b0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80048bc:	4013      	ands	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <HAL_TIM_Encoder_Stop+0x84>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6a1a      	ldr	r2, [r3, #32]
 80048c8:	f240 4344 	movw	r3, #1092	; 0x444
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <HAL_TIM_Encoder_Stop+0x84>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0201 	bic.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d122      	bne.n	8004948 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b02      	cmp	r3, #2
 800490e:	d11b      	bne.n	8004948 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0202 	mvn.w	r2, #2
 8004918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f9b4 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f9a6 	bl	8004c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f9b7 	bl	8004cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b04      	cmp	r3, #4
 8004954:	d122      	bne.n	800499c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b04      	cmp	r3, #4
 8004962:	d11b      	bne.n	800499c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0204 	mvn.w	r2, #4
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f98a 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f97c 	bl	8004c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f98d 	bl	8004cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d122      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d11b      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0208 	mvn.w	r2, #8
 80049c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2204      	movs	r2, #4
 80049c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f960 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 80049dc:	e005      	b.n	80049ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f952 	bl	8004c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f963 	bl	8004cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d122      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d11b      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0210 	mvn.w	r2, #16
 8004a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2208      	movs	r2, #8
 8004a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f936 	bl	8004c9c <HAL_TIM_IC_CaptureCallback>
 8004a30:	e005      	b.n	8004a3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f928 	bl	8004c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f939 	bl	8004cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0201 	mvn.w	r2, #1
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fb fe1c 	bl	80006a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	2b80      	cmp	r3, #128	; 0x80
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	2b80      	cmp	r3, #128	; 0x80
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fc1a 	bl	80052d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8fe 	bl	8004cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d10e      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b20      	cmp	r3, #32
 8004ae2:	d107      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0220 	mvn.w	r2, #32
 8004aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fbe4 	bl	80052bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e0b4      	b.n	8004c80 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	f200 809f 	bhi.w	8004c6c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b69 	.word	0x08004b69
 8004b38:	08004c6d 	.word	0x08004c6d
 8004b3c:	08004c6d 	.word	0x08004c6d
 8004b40:	08004c6d 	.word	0x08004c6d
 8004b44:	08004ba9 	.word	0x08004ba9
 8004b48:	08004c6d 	.word	0x08004c6d
 8004b4c:	08004c6d 	.word	0x08004c6d
 8004b50:	08004c6d 	.word	0x08004c6d
 8004b54:	08004beb 	.word	0x08004beb
 8004b58:	08004c6d 	.word	0x08004c6d
 8004b5c:	08004c6d 	.word	0x08004c6d
 8004b60:	08004c6d 	.word	0x08004c6d
 8004b64:	08004c2b 	.word	0x08004c2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f952 	bl	8004e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0208 	orr.w	r2, r2, #8
 8004b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0204 	bic.w	r2, r2, #4
 8004b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6999      	ldr	r1, [r3, #24]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	619a      	str	r2, [r3, #24]
      break;
 8004ba6:	e062      	b.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f9a2 	bl	8004ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6999      	ldr	r1, [r3, #24]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	021a      	lsls	r2, r3, #8
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	619a      	str	r2, [r3, #24]
      break;
 8004be8:	e041      	b.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 f9f7 	bl	8004fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0208 	orr.w	r2, r2, #8
 8004c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0204 	bic.w	r2, r2, #4
 8004c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69d9      	ldr	r1, [r3, #28]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	61da      	str	r2, [r3, #28]
      break;
 8004c28:	e021      	b.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fa4b 	bl	80050cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69d9      	ldr	r1, [r3, #28]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	021a      	lsls	r2, r3, #8
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	61da      	str	r2, [r3, #28]
      break;
 8004c6a:	e000      	b.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004c6c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a40      	ldr	r2, [pc, #256]	; (8004dec <TIM_Base_SetConfig+0x114>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf6:	d00f      	beq.n	8004d18 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a3d      	ldr	r2, [pc, #244]	; (8004df0 <TIM_Base_SetConfig+0x118>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00b      	beq.n	8004d18 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a3c      	ldr	r2, [pc, #240]	; (8004df4 <TIM_Base_SetConfig+0x11c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d007      	beq.n	8004d18 <TIM_Base_SetConfig+0x40>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a3b      	ldr	r2, [pc, #236]	; (8004df8 <TIM_Base_SetConfig+0x120>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_Base_SetConfig+0x40>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a3a      	ldr	r2, [pc, #232]	; (8004dfc <TIM_Base_SetConfig+0x124>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d108      	bne.n	8004d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2f      	ldr	r2, [pc, #188]	; (8004dec <TIM_Base_SetConfig+0x114>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02b      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d38:	d027      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2c      	ldr	r2, [pc, #176]	; (8004df0 <TIM_Base_SetConfig+0x118>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d023      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2b      	ldr	r2, [pc, #172]	; (8004df4 <TIM_Base_SetConfig+0x11c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01f      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2a      	ldr	r2, [pc, #168]	; (8004df8 <TIM_Base_SetConfig+0x120>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01b      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <TIM_Base_SetConfig+0x124>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d017      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a28      	ldr	r2, [pc, #160]	; (8004e00 <TIM_Base_SetConfig+0x128>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a27      	ldr	r2, [pc, #156]	; (8004e04 <TIM_Base_SetConfig+0x12c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00f      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a26      	ldr	r2, [pc, #152]	; (8004e08 <TIM_Base_SetConfig+0x130>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00b      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a25      	ldr	r2, [pc, #148]	; (8004e0c <TIM_Base_SetConfig+0x134>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d007      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a24      	ldr	r2, [pc, #144]	; (8004e10 <TIM_Base_SetConfig+0x138>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d003      	beq.n	8004d8a <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a23      	ldr	r2, [pc, #140]	; (8004e14 <TIM_Base_SetConfig+0x13c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d108      	bne.n	8004d9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a0a      	ldr	r2, [pc, #40]	; (8004dec <TIM_Base_SetConfig+0x114>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_Base_SetConfig+0xf8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a0c      	ldr	r2, [pc, #48]	; (8004dfc <TIM_Base_SetConfig+0x124>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d103      	bne.n	8004dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	615a      	str	r2, [r3, #20]
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40010000 	.word	0x40010000
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	40000c00 	.word	0x40000c00
 8004dfc:	40010400 	.word	0x40010400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800
 8004e0c:	40001800 	.word	0x40001800
 8004e10:	40001c00 	.word	0x40001c00
 8004e14:	40002000 	.word	0x40002000

08004e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f023 0201 	bic.w	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f023 0302 	bic.w	r3, r3, #2
 8004e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a20      	ldr	r2, [pc, #128]	; (8004ef0 <TIM_OC1_SetConfig+0xd8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_OC1_SetConfig+0x64>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <TIM_OC1_SetConfig+0xdc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d10c      	bne.n	8004e96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0308 	bic.w	r3, r3, #8
 8004e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f023 0304 	bic.w	r3, r3, #4
 8004e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <TIM_OC1_SetConfig+0xd8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_OC1_SetConfig+0x8e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a14      	ldr	r2, [pc, #80]	; (8004ef4 <TIM_OC1_SetConfig+0xdc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d111      	bne.n	8004eca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	621a      	str	r2, [r3, #32]
}
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	40010000 	.word	0x40010000
 8004ef4:	40010400 	.word	0x40010400

08004ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 0210 	bic.w	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0320 	bic.w	r3, r3, #32
 8004f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a22      	ldr	r2, [pc, #136]	; (8004fdc <TIM_OC2_SetConfig+0xe4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_OC2_SetConfig+0x68>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <TIM_OC2_SetConfig+0xe8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10d      	bne.n	8004f7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a17      	ldr	r2, [pc, #92]	; (8004fdc <TIM_OC2_SetConfig+0xe4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_OC2_SetConfig+0x94>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a16      	ldr	r2, [pc, #88]	; (8004fe0 <TIM_OC2_SetConfig+0xe8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d113      	bne.n	8004fb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40010400 	.word	0x40010400

08004fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0303 	bic.w	r3, r3, #3
 800501a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800502c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a21      	ldr	r2, [pc, #132]	; (80050c4 <TIM_OC3_SetConfig+0xe0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d003      	beq.n	800504a <TIM_OC3_SetConfig+0x66>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a20      	ldr	r2, [pc, #128]	; (80050c8 <TIM_OC3_SetConfig+0xe4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d10d      	bne.n	8005066 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a16      	ldr	r2, [pc, #88]	; (80050c4 <TIM_OC3_SetConfig+0xe0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d003      	beq.n	8005076 <TIM_OC3_SetConfig+0x92>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <TIM_OC3_SetConfig+0xe4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d113      	bne.n	800509e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800507c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	621a      	str	r2, [r3, #32]
}
 80050b8:	bf00      	nop
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40010400 	.word	0x40010400

080050cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	031b      	lsls	r3, r3, #12
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a12      	ldr	r2, [pc, #72]	; (8005170 <TIM_OC4_SetConfig+0xa4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_OC4_SetConfig+0x68>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a11      	ldr	r2, [pc, #68]	; (8005174 <TIM_OC4_SetConfig+0xa8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d109      	bne.n	8005148 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800513a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	019b      	lsls	r3, r3, #6
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40010000 	.word	0x40010000
 8005174:	40010400 	.word	0x40010400

08005178 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	2201      	movs	r2, #1
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a1a      	ldr	r2, [r3, #32]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	43db      	mvns	r3, r3
 800519a:	401a      	ands	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	fa01 f303 	lsl.w	r3, r1, r3
 80051b0:	431a      	orrs	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d8:	2302      	movs	r3, #2
 80051da:	e05a      	b.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a21      	ldr	r2, [pc, #132]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d022      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005228:	d01d      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d018      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1a      	ldr	r2, [pc, #104]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00e      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d009      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d10c      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	4313      	orrs	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40010000 	.word	0x40010000
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40010400 	.word	0x40010400
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40001800 	.word	0x40001800

080052bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e03f      	b.n	8005376 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fc ff2e 	bl	800216c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2224      	movs	r2, #36	; 0x24
 8005314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f90b 	bl	8005544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800533c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800534c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800535c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b088      	sub	sp, #32
 8005382:	af02      	add	r7, sp, #8
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	603b      	str	r3, [r7, #0]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b20      	cmp	r3, #32
 800539c:	f040 8083 	bne.w	80054a6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_UART_Transmit+0x2e>
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e07b      	b.n	80054a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_UART_Transmit+0x40>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e074      	b.n	80054a8 <HAL_UART_Transmit+0x12a>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2221      	movs	r2, #33	; 0x21
 80053d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80053d4:	f7fd f8c0 	bl	8002558 <HAL_GetTick>
 80053d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	88fa      	ldrh	r2, [r7, #6]
 80053de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	88fa      	ldrh	r2, [r7, #6]
 80053e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80053ee:	e042      	b.n	8005476 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005406:	d122      	bne.n	800544e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2200      	movs	r2, #0
 8005410:	2180      	movs	r1, #128	; 0x80
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f84c 	bl	80054b0 <UART_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e042      	b.n	80054a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005434:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	3302      	adds	r3, #2
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	e017      	b.n	8005476 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	3301      	adds	r3, #1
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	e013      	b.n	8005476 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2200      	movs	r2, #0
 8005456:	2180      	movs	r1, #128	; 0x80
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f829 	bl	80054b0 <UART_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e01f      	b.n	80054a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	60ba      	str	r2, [r7, #8]
 800546e:	781a      	ldrb	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1b7      	bne.n	80053f0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2200      	movs	r2, #0
 8005488:	2140      	movs	r1, #64	; 0x40
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f810 	bl	80054b0 <UART_WaitOnFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e006      	b.n	80054a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e000      	b.n	80054a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
  }
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c0:	e02c      	b.n	800551c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d028      	beq.n	800551c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054d0:	f7fd f842 	bl	8002558 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d21d      	bcs.n	800551c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e00f      	b.n	800553c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	429a      	cmp	r2, r3
 800552a:	bf0c      	ite	eq
 800552c:	2301      	moveq	r3, #1
 800552e:	2300      	movne	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	429a      	cmp	r2, r3
 8005538:	d0c3      	beq.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005586:	f023 030c 	bic.w	r3, r3, #12
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	430b      	orrs	r3, r1
 8005592:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b2:	f040 818b 	bne.w	80058cc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4ac1      	ldr	r2, [pc, #772]	; (80058c0 <UART_SetConfig+0x37c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d005      	beq.n	80055cc <UART_SetConfig+0x88>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4abf      	ldr	r2, [pc, #764]	; (80058c4 <UART_SetConfig+0x380>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	f040 80bd 	bne.w	8005746 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055cc:	f7fe ff2e 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 80055d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	461d      	mov	r5, r3
 80055d6:	f04f 0600 	mov.w	r6, #0
 80055da:	46a8      	mov	r8, r5
 80055dc:	46b1      	mov	r9, r6
 80055de:	eb18 0308 	adds.w	r3, r8, r8
 80055e2:	eb49 0409 	adc.w	r4, r9, r9
 80055e6:	4698      	mov	r8, r3
 80055e8:	46a1      	mov	r9, r4
 80055ea:	eb18 0805 	adds.w	r8, r8, r5
 80055ee:	eb49 0906 	adc.w	r9, r9, r6
 80055f2:	f04f 0100 	mov.w	r1, #0
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005602:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005606:	4688      	mov	r8, r1
 8005608:	4691      	mov	r9, r2
 800560a:	eb18 0005 	adds.w	r0, r8, r5
 800560e:	eb49 0106 	adc.w	r1, r9, r6
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	461d      	mov	r5, r3
 8005618:	f04f 0600 	mov.w	r6, #0
 800561c:	196b      	adds	r3, r5, r5
 800561e:	eb46 0406 	adc.w	r4, r6, r6
 8005622:	461a      	mov	r2, r3
 8005624:	4623      	mov	r3, r4
 8005626:	f7fa fe23 	bl	8000270 <__aeabi_uldivmod>
 800562a:	4603      	mov	r3, r0
 800562c:	460c      	mov	r4, r1
 800562e:	461a      	mov	r2, r3
 8005630:	4ba5      	ldr	r3, [pc, #660]	; (80058c8 <UART_SetConfig+0x384>)
 8005632:	fba3 2302 	umull	r2, r3, r3, r2
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	461d      	mov	r5, r3
 8005640:	f04f 0600 	mov.w	r6, #0
 8005644:	46a9      	mov	r9, r5
 8005646:	46b2      	mov	sl, r6
 8005648:	eb19 0309 	adds.w	r3, r9, r9
 800564c:	eb4a 040a 	adc.w	r4, sl, sl
 8005650:	4699      	mov	r9, r3
 8005652:	46a2      	mov	sl, r4
 8005654:	eb19 0905 	adds.w	r9, r9, r5
 8005658:	eb4a 0a06 	adc.w	sl, sl, r6
 800565c:	f04f 0100 	mov.w	r1, #0
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005668:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800566c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005670:	4689      	mov	r9, r1
 8005672:	4692      	mov	sl, r2
 8005674:	eb19 0005 	adds.w	r0, r9, r5
 8005678:	eb4a 0106 	adc.w	r1, sl, r6
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	461d      	mov	r5, r3
 8005682:	f04f 0600 	mov.w	r6, #0
 8005686:	196b      	adds	r3, r5, r5
 8005688:	eb46 0406 	adc.w	r4, r6, r6
 800568c:	461a      	mov	r2, r3
 800568e:	4623      	mov	r3, r4
 8005690:	f7fa fdee 	bl	8000270 <__aeabi_uldivmod>
 8005694:	4603      	mov	r3, r0
 8005696:	460c      	mov	r4, r1
 8005698:	461a      	mov	r2, r3
 800569a:	4b8b      	ldr	r3, [pc, #556]	; (80058c8 <UART_SetConfig+0x384>)
 800569c:	fba3 1302 	umull	r1, r3, r3, r2
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	2164      	movs	r1, #100	; 0x64
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	3332      	adds	r3, #50	; 0x32
 80056ae:	4a86      	ldr	r2, [pc, #536]	; (80058c8 <UART_SetConfig+0x384>)
 80056b0:	fba2 2303 	umull	r2, r3, r2, r3
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056bc:	4498      	add	r8, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	461d      	mov	r5, r3
 80056c2:	f04f 0600 	mov.w	r6, #0
 80056c6:	46a9      	mov	r9, r5
 80056c8:	46b2      	mov	sl, r6
 80056ca:	eb19 0309 	adds.w	r3, r9, r9
 80056ce:	eb4a 040a 	adc.w	r4, sl, sl
 80056d2:	4699      	mov	r9, r3
 80056d4:	46a2      	mov	sl, r4
 80056d6:	eb19 0905 	adds.w	r9, r9, r5
 80056da:	eb4a 0a06 	adc.w	sl, sl, r6
 80056de:	f04f 0100 	mov.w	r1, #0
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056f2:	4689      	mov	r9, r1
 80056f4:	4692      	mov	sl, r2
 80056f6:	eb19 0005 	adds.w	r0, r9, r5
 80056fa:	eb4a 0106 	adc.w	r1, sl, r6
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	461d      	mov	r5, r3
 8005704:	f04f 0600 	mov.w	r6, #0
 8005708:	196b      	adds	r3, r5, r5
 800570a:	eb46 0406 	adc.w	r4, r6, r6
 800570e:	461a      	mov	r2, r3
 8005710:	4623      	mov	r3, r4
 8005712:	f7fa fdad 	bl	8000270 <__aeabi_uldivmod>
 8005716:	4603      	mov	r3, r0
 8005718:	460c      	mov	r4, r1
 800571a:	461a      	mov	r2, r3
 800571c:	4b6a      	ldr	r3, [pc, #424]	; (80058c8 <UART_SetConfig+0x384>)
 800571e:	fba3 1302 	umull	r1, r3, r3, r2
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	2164      	movs	r1, #100	; 0x64
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	3332      	adds	r3, #50	; 0x32
 8005730:	4a65      	ldr	r2, [pc, #404]	; (80058c8 <UART_SetConfig+0x384>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	f003 0207 	and.w	r2, r3, #7
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4442      	add	r2, r8
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	e26f      	b.n	8005c26 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005746:	f7fe fe5d 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 800574a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	461d      	mov	r5, r3
 8005750:	f04f 0600 	mov.w	r6, #0
 8005754:	46a8      	mov	r8, r5
 8005756:	46b1      	mov	r9, r6
 8005758:	eb18 0308 	adds.w	r3, r8, r8
 800575c:	eb49 0409 	adc.w	r4, r9, r9
 8005760:	4698      	mov	r8, r3
 8005762:	46a1      	mov	r9, r4
 8005764:	eb18 0805 	adds.w	r8, r8, r5
 8005768:	eb49 0906 	adc.w	r9, r9, r6
 800576c:	f04f 0100 	mov.w	r1, #0
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005778:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800577c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005780:	4688      	mov	r8, r1
 8005782:	4691      	mov	r9, r2
 8005784:	eb18 0005 	adds.w	r0, r8, r5
 8005788:	eb49 0106 	adc.w	r1, r9, r6
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	461d      	mov	r5, r3
 8005792:	f04f 0600 	mov.w	r6, #0
 8005796:	196b      	adds	r3, r5, r5
 8005798:	eb46 0406 	adc.w	r4, r6, r6
 800579c:	461a      	mov	r2, r3
 800579e:	4623      	mov	r3, r4
 80057a0:	f7fa fd66 	bl	8000270 <__aeabi_uldivmod>
 80057a4:	4603      	mov	r3, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	461a      	mov	r2, r3
 80057aa:	4b47      	ldr	r3, [pc, #284]	; (80058c8 <UART_SetConfig+0x384>)
 80057ac:	fba3 2302 	umull	r2, r3, r3, r2
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	461d      	mov	r5, r3
 80057ba:	f04f 0600 	mov.w	r6, #0
 80057be:	46a9      	mov	r9, r5
 80057c0:	46b2      	mov	sl, r6
 80057c2:	eb19 0309 	adds.w	r3, r9, r9
 80057c6:	eb4a 040a 	adc.w	r4, sl, sl
 80057ca:	4699      	mov	r9, r3
 80057cc:	46a2      	mov	sl, r4
 80057ce:	eb19 0905 	adds.w	r9, r9, r5
 80057d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80057d6:	f04f 0100 	mov.w	r1, #0
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057ea:	4689      	mov	r9, r1
 80057ec:	4692      	mov	sl, r2
 80057ee:	eb19 0005 	adds.w	r0, r9, r5
 80057f2:	eb4a 0106 	adc.w	r1, sl, r6
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	461d      	mov	r5, r3
 80057fc:	f04f 0600 	mov.w	r6, #0
 8005800:	196b      	adds	r3, r5, r5
 8005802:	eb46 0406 	adc.w	r4, r6, r6
 8005806:	461a      	mov	r2, r3
 8005808:	4623      	mov	r3, r4
 800580a:	f7fa fd31 	bl	8000270 <__aeabi_uldivmod>
 800580e:	4603      	mov	r3, r0
 8005810:	460c      	mov	r4, r1
 8005812:	461a      	mov	r2, r3
 8005814:	4b2c      	ldr	r3, [pc, #176]	; (80058c8 <UART_SetConfig+0x384>)
 8005816:	fba3 1302 	umull	r1, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2164      	movs	r1, #100	; 0x64
 800581e:	fb01 f303 	mul.w	r3, r1, r3
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	3332      	adds	r3, #50	; 0x32
 8005828:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <UART_SetConfig+0x384>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005836:	4498      	add	r8, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	461d      	mov	r5, r3
 800583c:	f04f 0600 	mov.w	r6, #0
 8005840:	46a9      	mov	r9, r5
 8005842:	46b2      	mov	sl, r6
 8005844:	eb19 0309 	adds.w	r3, r9, r9
 8005848:	eb4a 040a 	adc.w	r4, sl, sl
 800584c:	4699      	mov	r9, r3
 800584e:	46a2      	mov	sl, r4
 8005850:	eb19 0905 	adds.w	r9, r9, r5
 8005854:	eb4a 0a06 	adc.w	sl, sl, r6
 8005858:	f04f 0100 	mov.w	r1, #0
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005864:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005868:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800586c:	4689      	mov	r9, r1
 800586e:	4692      	mov	sl, r2
 8005870:	eb19 0005 	adds.w	r0, r9, r5
 8005874:	eb4a 0106 	adc.w	r1, sl, r6
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	461d      	mov	r5, r3
 800587e:	f04f 0600 	mov.w	r6, #0
 8005882:	196b      	adds	r3, r5, r5
 8005884:	eb46 0406 	adc.w	r4, r6, r6
 8005888:	461a      	mov	r2, r3
 800588a:	4623      	mov	r3, r4
 800588c:	f7fa fcf0 	bl	8000270 <__aeabi_uldivmod>
 8005890:	4603      	mov	r3, r0
 8005892:	460c      	mov	r4, r1
 8005894:	461a      	mov	r2, r3
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <UART_SetConfig+0x384>)
 8005898:	fba3 1302 	umull	r1, r3, r3, r2
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	2164      	movs	r1, #100	; 0x64
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	3332      	adds	r3, #50	; 0x32
 80058aa:	4a07      	ldr	r2, [pc, #28]	; (80058c8 <UART_SetConfig+0x384>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f003 0207 	and.w	r2, r3, #7
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4442      	add	r2, r8
 80058bc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80058be:	e1b2      	b.n	8005c26 <UART_SetConfig+0x6e2>
 80058c0:	40011000 	.word	0x40011000
 80058c4:	40011400 	.word	0x40011400
 80058c8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4ad7      	ldr	r2, [pc, #860]	; (8005c30 <UART_SetConfig+0x6ec>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d005      	beq.n	80058e2 <UART_SetConfig+0x39e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4ad6      	ldr	r2, [pc, #856]	; (8005c34 <UART_SetConfig+0x6f0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	f040 80d1 	bne.w	8005a84 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80058e2:	f7fe fda3 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 80058e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	469a      	mov	sl, r3
 80058ec:	f04f 0b00 	mov.w	fp, #0
 80058f0:	46d0      	mov	r8, sl
 80058f2:	46d9      	mov	r9, fp
 80058f4:	eb18 0308 	adds.w	r3, r8, r8
 80058f8:	eb49 0409 	adc.w	r4, r9, r9
 80058fc:	4698      	mov	r8, r3
 80058fe:	46a1      	mov	r9, r4
 8005900:	eb18 080a 	adds.w	r8, r8, sl
 8005904:	eb49 090b 	adc.w	r9, r9, fp
 8005908:	f04f 0100 	mov.w	r1, #0
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005914:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005918:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800591c:	4688      	mov	r8, r1
 800591e:	4691      	mov	r9, r2
 8005920:	eb1a 0508 	adds.w	r5, sl, r8
 8005924:	eb4b 0609 	adc.w	r6, fp, r9
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	4619      	mov	r1, r3
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	f04f 0400 	mov.w	r4, #0
 800593a:	0094      	lsls	r4, r2, #2
 800593c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005940:	008b      	lsls	r3, r1, #2
 8005942:	461a      	mov	r2, r3
 8005944:	4623      	mov	r3, r4
 8005946:	4628      	mov	r0, r5
 8005948:	4631      	mov	r1, r6
 800594a:	f7fa fc91 	bl	8000270 <__aeabi_uldivmod>
 800594e:	4603      	mov	r3, r0
 8005950:	460c      	mov	r4, r1
 8005952:	461a      	mov	r2, r3
 8005954:	4bb8      	ldr	r3, [pc, #736]	; (8005c38 <UART_SetConfig+0x6f4>)
 8005956:	fba3 2302 	umull	r2, r3, r3, r2
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	469b      	mov	fp, r3
 8005964:	f04f 0c00 	mov.w	ip, #0
 8005968:	46d9      	mov	r9, fp
 800596a:	46e2      	mov	sl, ip
 800596c:	eb19 0309 	adds.w	r3, r9, r9
 8005970:	eb4a 040a 	adc.w	r4, sl, sl
 8005974:	4699      	mov	r9, r3
 8005976:	46a2      	mov	sl, r4
 8005978:	eb19 090b 	adds.w	r9, r9, fp
 800597c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800598c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005990:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005994:	4689      	mov	r9, r1
 8005996:	4692      	mov	sl, r2
 8005998:	eb1b 0509 	adds.w	r5, fp, r9
 800599c:	eb4c 060a 	adc.w	r6, ip, sl
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4619      	mov	r1, r3
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	f04f 0400 	mov.w	r4, #0
 80059b2:	0094      	lsls	r4, r2, #2
 80059b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059b8:	008b      	lsls	r3, r1, #2
 80059ba:	461a      	mov	r2, r3
 80059bc:	4623      	mov	r3, r4
 80059be:	4628      	mov	r0, r5
 80059c0:	4631      	mov	r1, r6
 80059c2:	f7fa fc55 	bl	8000270 <__aeabi_uldivmod>
 80059c6:	4603      	mov	r3, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	461a      	mov	r2, r3
 80059cc:	4b9a      	ldr	r3, [pc, #616]	; (8005c38 <UART_SetConfig+0x6f4>)
 80059ce:	fba3 1302 	umull	r1, r3, r3, r2
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	2164      	movs	r1, #100	; 0x64
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	3332      	adds	r3, #50	; 0x32
 80059e0:	4a95      	ldr	r2, [pc, #596]	; (8005c38 <UART_SetConfig+0x6f4>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ec:	4498      	add	r8, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	469b      	mov	fp, r3
 80059f2:	f04f 0c00 	mov.w	ip, #0
 80059f6:	46d9      	mov	r9, fp
 80059f8:	46e2      	mov	sl, ip
 80059fa:	eb19 0309 	adds.w	r3, r9, r9
 80059fe:	eb4a 040a 	adc.w	r4, sl, sl
 8005a02:	4699      	mov	r9, r3
 8005a04:	46a2      	mov	sl, r4
 8005a06:	eb19 090b 	adds.w	r9, r9, fp
 8005a0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a0e:	f04f 0100 	mov.w	r1, #0
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a22:	4689      	mov	r9, r1
 8005a24:	4692      	mov	sl, r2
 8005a26:	eb1b 0509 	adds.w	r5, fp, r9
 8005a2a:	eb4c 060a 	adc.w	r6, ip, sl
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4619      	mov	r1, r3
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	f04f 0400 	mov.w	r4, #0
 8005a40:	0094      	lsls	r4, r2, #2
 8005a42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a46:	008b      	lsls	r3, r1, #2
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4623      	mov	r3, r4
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	4631      	mov	r1, r6
 8005a50:	f7fa fc0e 	bl	8000270 <__aeabi_uldivmod>
 8005a54:	4603      	mov	r3, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4b77      	ldr	r3, [pc, #476]	; (8005c38 <UART_SetConfig+0x6f4>)
 8005a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	2164      	movs	r1, #100	; 0x64
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	3332      	adds	r3, #50	; 0x32
 8005a6e:	4a72      	ldr	r2, [pc, #456]	; (8005c38 <UART_SetConfig+0x6f4>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 020f 	and.w	r2, r3, #15
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4442      	add	r2, r8
 8005a80:	609a      	str	r2, [r3, #8]
 8005a82:	e0d0      	b.n	8005c26 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a84:	f7fe fcbe 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8005a88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	469a      	mov	sl, r3
 8005a8e:	f04f 0b00 	mov.w	fp, #0
 8005a92:	46d0      	mov	r8, sl
 8005a94:	46d9      	mov	r9, fp
 8005a96:	eb18 0308 	adds.w	r3, r8, r8
 8005a9a:	eb49 0409 	adc.w	r4, r9, r9
 8005a9e:	4698      	mov	r8, r3
 8005aa0:	46a1      	mov	r9, r4
 8005aa2:	eb18 080a 	adds.w	r8, r8, sl
 8005aa6:	eb49 090b 	adc.w	r9, r9, fp
 8005aaa:	f04f 0100 	mov.w	r1, #0
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ab6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005aba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005abe:	4688      	mov	r8, r1
 8005ac0:	4691      	mov	r9, r2
 8005ac2:	eb1a 0508 	adds.w	r5, sl, r8
 8005ac6:	eb4b 0609 	adc.w	r6, fp, r9
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	f04f 0400 	mov.w	r4, #0
 8005adc:	0094      	lsls	r4, r2, #2
 8005ade:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ae2:	008b      	lsls	r3, r1, #2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	4631      	mov	r1, r6
 8005aec:	f7fa fbc0 	bl	8000270 <__aeabi_uldivmod>
 8005af0:	4603      	mov	r3, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	461a      	mov	r2, r3
 8005af6:	4b50      	ldr	r3, [pc, #320]	; (8005c38 <UART_SetConfig+0x6f4>)
 8005af8:	fba3 2302 	umull	r2, r3, r3, r2
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	469b      	mov	fp, r3
 8005b06:	f04f 0c00 	mov.w	ip, #0
 8005b0a:	46d9      	mov	r9, fp
 8005b0c:	46e2      	mov	sl, ip
 8005b0e:	eb19 0309 	adds.w	r3, r9, r9
 8005b12:	eb4a 040a 	adc.w	r4, sl, sl
 8005b16:	4699      	mov	r9, r3
 8005b18:	46a2      	mov	sl, r4
 8005b1a:	eb19 090b 	adds.w	r9, r9, fp
 8005b1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b22:	f04f 0100 	mov.w	r1, #0
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b36:	4689      	mov	r9, r1
 8005b38:	4692      	mov	sl, r2
 8005b3a:	eb1b 0509 	adds.w	r5, fp, r9
 8005b3e:	eb4c 060a 	adc.w	r6, ip, sl
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4619      	mov	r1, r3
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	f04f 0400 	mov.w	r4, #0
 8005b54:	0094      	lsls	r4, r2, #2
 8005b56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b5a:	008b      	lsls	r3, r1, #2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4623      	mov	r3, r4
 8005b60:	4628      	mov	r0, r5
 8005b62:	4631      	mov	r1, r6
 8005b64:	f7fa fb84 	bl	8000270 <__aeabi_uldivmod>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4b32      	ldr	r3, [pc, #200]	; (8005c38 <UART_SetConfig+0x6f4>)
 8005b70:	fba3 1302 	umull	r1, r3, r3, r2
 8005b74:	095b      	lsrs	r3, r3, #5
 8005b76:	2164      	movs	r1, #100	; 0x64
 8005b78:	fb01 f303 	mul.w	r3, r1, r3
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	3332      	adds	r3, #50	; 0x32
 8005b82:	4a2d      	ldr	r2, [pc, #180]	; (8005c38 <UART_SetConfig+0x6f4>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b8e:	4498      	add	r8, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	469b      	mov	fp, r3
 8005b94:	f04f 0c00 	mov.w	ip, #0
 8005b98:	46d9      	mov	r9, fp
 8005b9a:	46e2      	mov	sl, ip
 8005b9c:	eb19 0309 	adds.w	r3, r9, r9
 8005ba0:	eb4a 040a 	adc.w	r4, sl, sl
 8005ba4:	4699      	mov	r9, r3
 8005ba6:	46a2      	mov	sl, r4
 8005ba8:	eb19 090b 	adds.w	r9, r9, fp
 8005bac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bb0:	f04f 0100 	mov.w	r1, #0
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bc4:	4689      	mov	r9, r1
 8005bc6:	4692      	mov	sl, r2
 8005bc8:	eb1b 0509 	adds.w	r5, fp, r9
 8005bcc:	eb4c 060a 	adc.w	r6, ip, sl
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	f04f 0400 	mov.w	r4, #0
 8005be2:	0094      	lsls	r4, r2, #2
 8005be4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005be8:	008b      	lsls	r3, r1, #2
 8005bea:	461a      	mov	r2, r3
 8005bec:	4623      	mov	r3, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	f7fa fb3d 	bl	8000270 <__aeabi_uldivmod>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <UART_SetConfig+0x6f4>)
 8005bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	2164      	movs	r1, #100	; 0x64
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	3332      	adds	r3, #50	; 0x32
 8005c10:	4a09      	ldr	r2, [pc, #36]	; (8005c38 <UART_SetConfig+0x6f4>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	f003 020f 	and.w	r2, r3, #15
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4442      	add	r2, r8
 8005c22:	609a      	str	r2, [r3, #8]
}
 8005c24:	e7ff      	b.n	8005c26 <UART_SetConfig+0x6e2>
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c30:	40011000 	.word	0x40011000
 8005c34:	40011400 	.word	0x40011400
 8005c38:	51eb851f 	.word	0x51eb851f

08005c3c <__errno>:
 8005c3c:	4b01      	ldr	r3, [pc, #4]	; (8005c44 <__errno+0x8>)
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	2000000c 	.word	0x2000000c

08005c48 <__libc_init_array>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	4e0d      	ldr	r6, [pc, #52]	; (8005c80 <__libc_init_array+0x38>)
 8005c4c:	4c0d      	ldr	r4, [pc, #52]	; (8005c84 <__libc_init_array+0x3c>)
 8005c4e:	1ba4      	subs	r4, r4, r6
 8005c50:	10a4      	asrs	r4, r4, #2
 8005c52:	2500      	movs	r5, #0
 8005c54:	42a5      	cmp	r5, r4
 8005c56:	d109      	bne.n	8005c6c <__libc_init_array+0x24>
 8005c58:	4e0b      	ldr	r6, [pc, #44]	; (8005c88 <__libc_init_array+0x40>)
 8005c5a:	4c0c      	ldr	r4, [pc, #48]	; (8005c8c <__libc_init_array+0x44>)
 8005c5c:	f000 ffb2 	bl	8006bc4 <_init>
 8005c60:	1ba4      	subs	r4, r4, r6
 8005c62:	10a4      	asrs	r4, r4, #2
 8005c64:	2500      	movs	r5, #0
 8005c66:	42a5      	cmp	r5, r4
 8005c68:	d105      	bne.n	8005c76 <__libc_init_array+0x2e>
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c70:	4798      	blx	r3
 8005c72:	3501      	adds	r5, #1
 8005c74:	e7ee      	b.n	8005c54 <__libc_init_array+0xc>
 8005c76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c7a:	4798      	blx	r3
 8005c7c:	3501      	adds	r5, #1
 8005c7e:	e7f2      	b.n	8005c66 <__libc_init_array+0x1e>
 8005c80:	08006e84 	.word	0x08006e84
 8005c84:	08006e84 	.word	0x08006e84
 8005c88:	08006e84 	.word	0x08006e84
 8005c8c:	08006e88 	.word	0x08006e88

08005c90 <memset>:
 8005c90:	4402      	add	r2, r0
 8005c92:	4603      	mov	r3, r0
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d100      	bne.n	8005c9a <memset+0xa>
 8005c98:	4770      	bx	lr
 8005c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c9e:	e7f9      	b.n	8005c94 <memset+0x4>

08005ca0 <iprintf>:
 8005ca0:	b40f      	push	{r0, r1, r2, r3}
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <iprintf+0x2c>)
 8005ca4:	b513      	push	{r0, r1, r4, lr}
 8005ca6:	681c      	ldr	r4, [r3, #0]
 8005ca8:	b124      	cbz	r4, 8005cb4 <iprintf+0x14>
 8005caa:	69a3      	ldr	r3, [r4, #24]
 8005cac:	b913      	cbnz	r3, 8005cb4 <iprintf+0x14>
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 fa36 	bl	8006120 <__sinit>
 8005cb4:	ab05      	add	r3, sp, #20
 8005cb6:	9a04      	ldr	r2, [sp, #16]
 8005cb8:	68a1      	ldr	r1, [r4, #8]
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 fbef 	bl	80064a0 <_vfiprintf_r>
 8005cc2:	b002      	add	sp, #8
 8005cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc8:	b004      	add	sp, #16
 8005cca:	4770      	bx	lr
 8005ccc:	2000000c 	.word	0x2000000c

08005cd0 <putchar>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <putchar+0x24>)
 8005cd4:	681c      	ldr	r4, [r3, #0]
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	b124      	cbz	r4, 8005ce4 <putchar+0x14>
 8005cda:	69a3      	ldr	r3, [r4, #24]
 8005cdc:	b913      	cbnz	r3, 8005ce4 <putchar+0x14>
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f000 fa1e 	bl	8006120 <__sinit>
 8005ce4:	68a2      	ldr	r2, [r4, #8]
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	4620      	mov	r0, r4
 8005cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cee:	f000 be75 	b.w	80069dc <_putc_r>
 8005cf2:	bf00      	nop
 8005cf4:	2000000c 	.word	0x2000000c

08005cf8 <_puts_r>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	460e      	mov	r6, r1
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	b118      	cbz	r0, 8005d08 <_puts_r+0x10>
 8005d00:	6983      	ldr	r3, [r0, #24]
 8005d02:	b90b      	cbnz	r3, 8005d08 <_puts_r+0x10>
 8005d04:	f000 fa0c 	bl	8006120 <__sinit>
 8005d08:	69ab      	ldr	r3, [r5, #24]
 8005d0a:	68ac      	ldr	r4, [r5, #8]
 8005d0c:	b913      	cbnz	r3, 8005d14 <_puts_r+0x1c>
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f000 fa06 	bl	8006120 <__sinit>
 8005d14:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <_puts_r+0xac>)
 8005d16:	429c      	cmp	r4, r3
 8005d18:	d117      	bne.n	8005d4a <_puts_r+0x52>
 8005d1a:	686c      	ldr	r4, [r5, #4]
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	071b      	lsls	r3, r3, #28
 8005d20:	d51d      	bpl.n	8005d5e <_puts_r+0x66>
 8005d22:	6923      	ldr	r3, [r4, #16]
 8005d24:	b1db      	cbz	r3, 8005d5e <_puts_r+0x66>
 8005d26:	3e01      	subs	r6, #1
 8005d28:	68a3      	ldr	r3, [r4, #8]
 8005d2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	60a3      	str	r3, [r4, #8]
 8005d32:	b9e9      	cbnz	r1, 8005d70 <_puts_r+0x78>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	da2e      	bge.n	8005d96 <_puts_r+0x9e>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	210a      	movs	r1, #10
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 f83f 	bl	8005dc0 <__swbuf_r>
 8005d42:	3001      	adds	r0, #1
 8005d44:	d011      	beq.n	8005d6a <_puts_r+0x72>
 8005d46:	200a      	movs	r0, #10
 8005d48:	e011      	b.n	8005d6e <_puts_r+0x76>
 8005d4a:	4b17      	ldr	r3, [pc, #92]	; (8005da8 <_puts_r+0xb0>)
 8005d4c:	429c      	cmp	r4, r3
 8005d4e:	d101      	bne.n	8005d54 <_puts_r+0x5c>
 8005d50:	68ac      	ldr	r4, [r5, #8]
 8005d52:	e7e3      	b.n	8005d1c <_puts_r+0x24>
 8005d54:	4b15      	ldr	r3, [pc, #84]	; (8005dac <_puts_r+0xb4>)
 8005d56:	429c      	cmp	r4, r3
 8005d58:	bf08      	it	eq
 8005d5a:	68ec      	ldreq	r4, [r5, #12]
 8005d5c:	e7de      	b.n	8005d1c <_puts_r+0x24>
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4628      	mov	r0, r5
 8005d62:	f000 f87f 	bl	8005e64 <__swsetup_r>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d0dd      	beq.n	8005d26 <_puts_r+0x2e>
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	da04      	bge.n	8005d7e <_puts_r+0x86>
 8005d74:	69a2      	ldr	r2, [r4, #24]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	dc06      	bgt.n	8005d88 <_puts_r+0x90>
 8005d7a:	290a      	cmp	r1, #10
 8005d7c:	d004      	beq.n	8005d88 <_puts_r+0x90>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	6022      	str	r2, [r4, #0]
 8005d84:	7019      	strb	r1, [r3, #0]
 8005d86:	e7cf      	b.n	8005d28 <_puts_r+0x30>
 8005d88:	4622      	mov	r2, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 f818 	bl	8005dc0 <__swbuf_r>
 8005d90:	3001      	adds	r0, #1
 8005d92:	d1c9      	bne.n	8005d28 <_puts_r+0x30>
 8005d94:	e7e9      	b.n	8005d6a <_puts_r+0x72>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	200a      	movs	r0, #10
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	6022      	str	r2, [r4, #0]
 8005d9e:	7018      	strb	r0, [r3, #0]
 8005da0:	e7e5      	b.n	8005d6e <_puts_r+0x76>
 8005da2:	bf00      	nop
 8005da4:	08006e08 	.word	0x08006e08
 8005da8:	08006e28 	.word	0x08006e28
 8005dac:	08006de8 	.word	0x08006de8

08005db0 <puts>:
 8005db0:	4b02      	ldr	r3, [pc, #8]	; (8005dbc <puts+0xc>)
 8005db2:	4601      	mov	r1, r0
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	f7ff bf9f 	b.w	8005cf8 <_puts_r>
 8005dba:	bf00      	nop
 8005dbc:	2000000c 	.word	0x2000000c

08005dc0 <__swbuf_r>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	460e      	mov	r6, r1
 8005dc4:	4614      	mov	r4, r2
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	b118      	cbz	r0, 8005dd2 <__swbuf_r+0x12>
 8005dca:	6983      	ldr	r3, [r0, #24]
 8005dcc:	b90b      	cbnz	r3, 8005dd2 <__swbuf_r+0x12>
 8005dce:	f000 f9a7 	bl	8006120 <__sinit>
 8005dd2:	4b21      	ldr	r3, [pc, #132]	; (8005e58 <__swbuf_r+0x98>)
 8005dd4:	429c      	cmp	r4, r3
 8005dd6:	d12a      	bne.n	8005e2e <__swbuf_r+0x6e>
 8005dd8:	686c      	ldr	r4, [r5, #4]
 8005dda:	69a3      	ldr	r3, [r4, #24]
 8005ddc:	60a3      	str	r3, [r4, #8]
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	071a      	lsls	r2, r3, #28
 8005de2:	d52e      	bpl.n	8005e42 <__swbuf_r+0x82>
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	b363      	cbz	r3, 8005e42 <__swbuf_r+0x82>
 8005de8:	6923      	ldr	r3, [r4, #16]
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	1ac0      	subs	r0, r0, r3
 8005dee:	6963      	ldr	r3, [r4, #20]
 8005df0:	b2f6      	uxtb	r6, r6
 8005df2:	4283      	cmp	r3, r0
 8005df4:	4637      	mov	r7, r6
 8005df6:	dc04      	bgt.n	8005e02 <__swbuf_r+0x42>
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 f926 	bl	800604c <_fflush_r>
 8005e00:	bb28      	cbnz	r0, 8005e4e <__swbuf_r+0x8e>
 8005e02:	68a3      	ldr	r3, [r4, #8]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	60a3      	str	r3, [r4, #8]
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	6022      	str	r2, [r4, #0]
 8005e0e:	701e      	strb	r6, [r3, #0]
 8005e10:	6963      	ldr	r3, [r4, #20]
 8005e12:	3001      	adds	r0, #1
 8005e14:	4283      	cmp	r3, r0
 8005e16:	d004      	beq.n	8005e22 <__swbuf_r+0x62>
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	07db      	lsls	r3, r3, #31
 8005e1c:	d519      	bpl.n	8005e52 <__swbuf_r+0x92>
 8005e1e:	2e0a      	cmp	r6, #10
 8005e20:	d117      	bne.n	8005e52 <__swbuf_r+0x92>
 8005e22:	4621      	mov	r1, r4
 8005e24:	4628      	mov	r0, r5
 8005e26:	f000 f911 	bl	800604c <_fflush_r>
 8005e2a:	b190      	cbz	r0, 8005e52 <__swbuf_r+0x92>
 8005e2c:	e00f      	b.n	8005e4e <__swbuf_r+0x8e>
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <__swbuf_r+0x9c>)
 8005e30:	429c      	cmp	r4, r3
 8005e32:	d101      	bne.n	8005e38 <__swbuf_r+0x78>
 8005e34:	68ac      	ldr	r4, [r5, #8]
 8005e36:	e7d0      	b.n	8005dda <__swbuf_r+0x1a>
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <__swbuf_r+0xa0>)
 8005e3a:	429c      	cmp	r4, r3
 8005e3c:	bf08      	it	eq
 8005e3e:	68ec      	ldreq	r4, [r5, #12]
 8005e40:	e7cb      	b.n	8005dda <__swbuf_r+0x1a>
 8005e42:	4621      	mov	r1, r4
 8005e44:	4628      	mov	r0, r5
 8005e46:	f000 f80d 	bl	8005e64 <__swsetup_r>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d0cc      	beq.n	8005de8 <__swbuf_r+0x28>
 8005e4e:	f04f 37ff 	mov.w	r7, #4294967295
 8005e52:	4638      	mov	r0, r7
 8005e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e56:	bf00      	nop
 8005e58:	08006e08 	.word	0x08006e08
 8005e5c:	08006e28 	.word	0x08006e28
 8005e60:	08006de8 	.word	0x08006de8

08005e64 <__swsetup_r>:
 8005e64:	4b32      	ldr	r3, [pc, #200]	; (8005f30 <__swsetup_r+0xcc>)
 8005e66:	b570      	push	{r4, r5, r6, lr}
 8005e68:	681d      	ldr	r5, [r3, #0]
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	b125      	cbz	r5, 8005e7a <__swsetup_r+0x16>
 8005e70:	69ab      	ldr	r3, [r5, #24]
 8005e72:	b913      	cbnz	r3, 8005e7a <__swsetup_r+0x16>
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 f953 	bl	8006120 <__sinit>
 8005e7a:	4b2e      	ldr	r3, [pc, #184]	; (8005f34 <__swsetup_r+0xd0>)
 8005e7c:	429c      	cmp	r4, r3
 8005e7e:	d10f      	bne.n	8005ea0 <__swsetup_r+0x3c>
 8005e80:	686c      	ldr	r4, [r5, #4]
 8005e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	0715      	lsls	r5, r2, #28
 8005e8a:	d42c      	bmi.n	8005ee6 <__swsetup_r+0x82>
 8005e8c:	06d0      	lsls	r0, r2, #27
 8005e8e:	d411      	bmi.n	8005eb4 <__swsetup_r+0x50>
 8005e90:	2209      	movs	r2, #9
 8005e92:	6032      	str	r2, [r6, #0]
 8005e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e98:	81a3      	strh	r3, [r4, #12]
 8005e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9e:	e03e      	b.n	8005f1e <__swsetup_r+0xba>
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <__swsetup_r+0xd4>)
 8005ea2:	429c      	cmp	r4, r3
 8005ea4:	d101      	bne.n	8005eaa <__swsetup_r+0x46>
 8005ea6:	68ac      	ldr	r4, [r5, #8]
 8005ea8:	e7eb      	b.n	8005e82 <__swsetup_r+0x1e>
 8005eaa:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <__swsetup_r+0xd8>)
 8005eac:	429c      	cmp	r4, r3
 8005eae:	bf08      	it	eq
 8005eb0:	68ec      	ldreq	r4, [r5, #12]
 8005eb2:	e7e6      	b.n	8005e82 <__swsetup_r+0x1e>
 8005eb4:	0751      	lsls	r1, r2, #29
 8005eb6:	d512      	bpl.n	8005ede <__swsetup_r+0x7a>
 8005eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eba:	b141      	cbz	r1, 8005ece <__swsetup_r+0x6a>
 8005ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	d002      	beq.n	8005eca <__swsetup_r+0x66>
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f000 fa19 	bl	80062fc <_free_r>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	6363      	str	r3, [r4, #52]	; 0x34
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6063      	str	r3, [r4, #4]
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	f043 0308 	orr.w	r3, r3, #8
 8005ee4:	81a3      	strh	r3, [r4, #12]
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	b94b      	cbnz	r3, 8005efe <__swsetup_r+0x9a>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef4:	d003      	beq.n	8005efe <__swsetup_r+0x9a>
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f000 f9bf 	bl	800627c <__smakebuf_r>
 8005efe:	89a2      	ldrh	r2, [r4, #12]
 8005f00:	f012 0301 	ands.w	r3, r2, #1
 8005f04:	d00c      	beq.n	8005f20 <__swsetup_r+0xbc>
 8005f06:	2300      	movs	r3, #0
 8005f08:	60a3      	str	r3, [r4, #8]
 8005f0a:	6963      	ldr	r3, [r4, #20]
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	61a3      	str	r3, [r4, #24]
 8005f10:	6923      	ldr	r3, [r4, #16]
 8005f12:	b953      	cbnz	r3, 8005f2a <__swsetup_r+0xc6>
 8005f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005f1c:	d1ba      	bne.n	8005e94 <__swsetup_r+0x30>
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	0792      	lsls	r2, r2, #30
 8005f22:	bf58      	it	pl
 8005f24:	6963      	ldrpl	r3, [r4, #20]
 8005f26:	60a3      	str	r3, [r4, #8]
 8005f28:	e7f2      	b.n	8005f10 <__swsetup_r+0xac>
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e7f7      	b.n	8005f1e <__swsetup_r+0xba>
 8005f2e:	bf00      	nop
 8005f30:	2000000c 	.word	0x2000000c
 8005f34:	08006e08 	.word	0x08006e08
 8005f38:	08006e28 	.word	0x08006e28
 8005f3c:	08006de8 	.word	0x08006de8

08005f40 <__sflush_r>:
 8005f40:	898a      	ldrh	r2, [r1, #12]
 8005f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f46:	4605      	mov	r5, r0
 8005f48:	0710      	lsls	r0, r2, #28
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	d458      	bmi.n	8006000 <__sflush_r+0xc0>
 8005f4e:	684b      	ldr	r3, [r1, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	dc05      	bgt.n	8005f60 <__sflush_r+0x20>
 8005f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	dc02      	bgt.n	8005f60 <__sflush_r+0x20>
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f62:	2e00      	cmp	r6, #0
 8005f64:	d0f9      	beq.n	8005f5a <__sflush_r+0x1a>
 8005f66:	2300      	movs	r3, #0
 8005f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f6c:	682f      	ldr	r7, [r5, #0]
 8005f6e:	6a21      	ldr	r1, [r4, #32]
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	d032      	beq.n	8005fda <__sflush_r+0x9a>
 8005f74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	075a      	lsls	r2, r3, #29
 8005f7a:	d505      	bpl.n	8005f88 <__sflush_r+0x48>
 8005f7c:	6863      	ldr	r3, [r4, #4]
 8005f7e:	1ac0      	subs	r0, r0, r3
 8005f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f82:	b10b      	cbz	r3, 8005f88 <__sflush_r+0x48>
 8005f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f86:	1ac0      	subs	r0, r0, r3
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f8e:	6a21      	ldr	r1, [r4, #32]
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b0      	blx	r6
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	d106      	bne.n	8005fa8 <__sflush_r+0x68>
 8005f9a:	6829      	ldr	r1, [r5, #0]
 8005f9c:	291d      	cmp	r1, #29
 8005f9e:	d848      	bhi.n	8006032 <__sflush_r+0xf2>
 8005fa0:	4a29      	ldr	r2, [pc, #164]	; (8006048 <__sflush_r+0x108>)
 8005fa2:	40ca      	lsrs	r2, r1
 8005fa4:	07d6      	lsls	r6, r2, #31
 8005fa6:	d544      	bpl.n	8006032 <__sflush_r+0xf2>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	6062      	str	r2, [r4, #4]
 8005fac:	04d9      	lsls	r1, r3, #19
 8005fae:	6922      	ldr	r2, [r4, #16]
 8005fb0:	6022      	str	r2, [r4, #0]
 8005fb2:	d504      	bpl.n	8005fbe <__sflush_r+0x7e>
 8005fb4:	1c42      	adds	r2, r0, #1
 8005fb6:	d101      	bne.n	8005fbc <__sflush_r+0x7c>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b903      	cbnz	r3, 8005fbe <__sflush_r+0x7e>
 8005fbc:	6560      	str	r0, [r4, #84]	; 0x54
 8005fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fc0:	602f      	str	r7, [r5, #0]
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d0c9      	beq.n	8005f5a <__sflush_r+0x1a>
 8005fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	d002      	beq.n	8005fd4 <__sflush_r+0x94>
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 f994 	bl	80062fc <_free_r>
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	6360      	str	r0, [r4, #52]	; 0x34
 8005fd8:	e7c0      	b.n	8005f5c <__sflush_r+0x1c>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4628      	mov	r0, r5
 8005fde:	47b0      	blx	r6
 8005fe0:	1c41      	adds	r1, r0, #1
 8005fe2:	d1c8      	bne.n	8005f76 <__sflush_r+0x36>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0c5      	beq.n	8005f76 <__sflush_r+0x36>
 8005fea:	2b1d      	cmp	r3, #29
 8005fec:	d001      	beq.n	8005ff2 <__sflush_r+0xb2>
 8005fee:	2b16      	cmp	r3, #22
 8005ff0:	d101      	bne.n	8005ff6 <__sflush_r+0xb6>
 8005ff2:	602f      	str	r7, [r5, #0]
 8005ff4:	e7b1      	b.n	8005f5a <__sflush_r+0x1a>
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	e7ad      	b.n	8005f5c <__sflush_r+0x1c>
 8006000:	690f      	ldr	r7, [r1, #16]
 8006002:	2f00      	cmp	r7, #0
 8006004:	d0a9      	beq.n	8005f5a <__sflush_r+0x1a>
 8006006:	0793      	lsls	r3, r2, #30
 8006008:	680e      	ldr	r6, [r1, #0]
 800600a:	bf08      	it	eq
 800600c:	694b      	ldreq	r3, [r1, #20]
 800600e:	600f      	str	r7, [r1, #0]
 8006010:	bf18      	it	ne
 8006012:	2300      	movne	r3, #0
 8006014:	eba6 0807 	sub.w	r8, r6, r7
 8006018:	608b      	str	r3, [r1, #8]
 800601a:	f1b8 0f00 	cmp.w	r8, #0
 800601e:	dd9c      	ble.n	8005f5a <__sflush_r+0x1a>
 8006020:	4643      	mov	r3, r8
 8006022:	463a      	mov	r2, r7
 8006024:	6a21      	ldr	r1, [r4, #32]
 8006026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006028:	4628      	mov	r0, r5
 800602a:	47b0      	blx	r6
 800602c:	2800      	cmp	r0, #0
 800602e:	dc06      	bgt.n	800603e <__sflush_r+0xfe>
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	e78e      	b.n	8005f5c <__sflush_r+0x1c>
 800603e:	4407      	add	r7, r0
 8006040:	eba8 0800 	sub.w	r8, r8, r0
 8006044:	e7e9      	b.n	800601a <__sflush_r+0xda>
 8006046:	bf00      	nop
 8006048:	20400001 	.word	0x20400001

0800604c <_fflush_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	690b      	ldr	r3, [r1, #16]
 8006050:	4605      	mov	r5, r0
 8006052:	460c      	mov	r4, r1
 8006054:	b1db      	cbz	r3, 800608e <_fflush_r+0x42>
 8006056:	b118      	cbz	r0, 8006060 <_fflush_r+0x14>
 8006058:	6983      	ldr	r3, [r0, #24]
 800605a:	b90b      	cbnz	r3, 8006060 <_fflush_r+0x14>
 800605c:	f000 f860 	bl	8006120 <__sinit>
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <_fflush_r+0x48>)
 8006062:	429c      	cmp	r4, r3
 8006064:	d109      	bne.n	800607a <_fflush_r+0x2e>
 8006066:	686c      	ldr	r4, [r5, #4]
 8006068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800606c:	b17b      	cbz	r3, 800608e <_fflush_r+0x42>
 800606e:	4621      	mov	r1, r4
 8006070:	4628      	mov	r0, r5
 8006072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006076:	f7ff bf63 	b.w	8005f40 <__sflush_r>
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <_fflush_r+0x4c>)
 800607c:	429c      	cmp	r4, r3
 800607e:	d101      	bne.n	8006084 <_fflush_r+0x38>
 8006080:	68ac      	ldr	r4, [r5, #8]
 8006082:	e7f1      	b.n	8006068 <_fflush_r+0x1c>
 8006084:	4b05      	ldr	r3, [pc, #20]	; (800609c <_fflush_r+0x50>)
 8006086:	429c      	cmp	r4, r3
 8006088:	bf08      	it	eq
 800608a:	68ec      	ldreq	r4, [r5, #12]
 800608c:	e7ec      	b.n	8006068 <_fflush_r+0x1c>
 800608e:	2000      	movs	r0, #0
 8006090:	bd38      	pop	{r3, r4, r5, pc}
 8006092:	bf00      	nop
 8006094:	08006e08 	.word	0x08006e08
 8006098:	08006e28 	.word	0x08006e28
 800609c:	08006de8 	.word	0x08006de8

080060a0 <std>:
 80060a0:	2300      	movs	r3, #0
 80060a2:	b510      	push	{r4, lr}
 80060a4:	4604      	mov	r4, r0
 80060a6:	e9c0 3300 	strd	r3, r3, [r0]
 80060aa:	6083      	str	r3, [r0, #8]
 80060ac:	8181      	strh	r1, [r0, #12]
 80060ae:	6643      	str	r3, [r0, #100]	; 0x64
 80060b0:	81c2      	strh	r2, [r0, #14]
 80060b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060b6:	6183      	str	r3, [r0, #24]
 80060b8:	4619      	mov	r1, r3
 80060ba:	2208      	movs	r2, #8
 80060bc:	305c      	adds	r0, #92	; 0x5c
 80060be:	f7ff fde7 	bl	8005c90 <memset>
 80060c2:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <std+0x38>)
 80060c4:	6263      	str	r3, [r4, #36]	; 0x24
 80060c6:	4b05      	ldr	r3, [pc, #20]	; (80060dc <std+0x3c>)
 80060c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <std+0x40>)
 80060cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <std+0x44>)
 80060d0:	6224      	str	r4, [r4, #32]
 80060d2:	6323      	str	r3, [r4, #48]	; 0x30
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	bf00      	nop
 80060d8:	08006a69 	.word	0x08006a69
 80060dc:	08006a8b 	.word	0x08006a8b
 80060e0:	08006ac3 	.word	0x08006ac3
 80060e4:	08006ae7 	.word	0x08006ae7

080060e8 <_cleanup_r>:
 80060e8:	4901      	ldr	r1, [pc, #4]	; (80060f0 <_cleanup_r+0x8>)
 80060ea:	f000 b885 	b.w	80061f8 <_fwalk_reent>
 80060ee:	bf00      	nop
 80060f0:	0800604d 	.word	0x0800604d

080060f4 <__sfmoreglue>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	1e4a      	subs	r2, r1, #1
 80060f8:	2568      	movs	r5, #104	; 0x68
 80060fa:	4355      	muls	r5, r2
 80060fc:	460e      	mov	r6, r1
 80060fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006102:	f000 f949 	bl	8006398 <_malloc_r>
 8006106:	4604      	mov	r4, r0
 8006108:	b140      	cbz	r0, 800611c <__sfmoreglue+0x28>
 800610a:	2100      	movs	r1, #0
 800610c:	e9c0 1600 	strd	r1, r6, [r0]
 8006110:	300c      	adds	r0, #12
 8006112:	60a0      	str	r0, [r4, #8]
 8006114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006118:	f7ff fdba 	bl	8005c90 <memset>
 800611c:	4620      	mov	r0, r4
 800611e:	bd70      	pop	{r4, r5, r6, pc}

08006120 <__sinit>:
 8006120:	6983      	ldr	r3, [r0, #24]
 8006122:	b510      	push	{r4, lr}
 8006124:	4604      	mov	r4, r0
 8006126:	bb33      	cbnz	r3, 8006176 <__sinit+0x56>
 8006128:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800612c:	6503      	str	r3, [r0, #80]	; 0x50
 800612e:	4b12      	ldr	r3, [pc, #72]	; (8006178 <__sinit+0x58>)
 8006130:	4a12      	ldr	r2, [pc, #72]	; (800617c <__sinit+0x5c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6282      	str	r2, [r0, #40]	; 0x28
 8006136:	4298      	cmp	r0, r3
 8006138:	bf04      	itt	eq
 800613a:	2301      	moveq	r3, #1
 800613c:	6183      	streq	r3, [r0, #24]
 800613e:	f000 f81f 	bl	8006180 <__sfp>
 8006142:	6060      	str	r0, [r4, #4]
 8006144:	4620      	mov	r0, r4
 8006146:	f000 f81b 	bl	8006180 <__sfp>
 800614a:	60a0      	str	r0, [r4, #8]
 800614c:	4620      	mov	r0, r4
 800614e:	f000 f817 	bl	8006180 <__sfp>
 8006152:	2200      	movs	r2, #0
 8006154:	60e0      	str	r0, [r4, #12]
 8006156:	2104      	movs	r1, #4
 8006158:	6860      	ldr	r0, [r4, #4]
 800615a:	f7ff ffa1 	bl	80060a0 <std>
 800615e:	2201      	movs	r2, #1
 8006160:	2109      	movs	r1, #9
 8006162:	68a0      	ldr	r0, [r4, #8]
 8006164:	f7ff ff9c 	bl	80060a0 <std>
 8006168:	2202      	movs	r2, #2
 800616a:	2112      	movs	r1, #18
 800616c:	68e0      	ldr	r0, [r4, #12]
 800616e:	f7ff ff97 	bl	80060a0 <std>
 8006172:	2301      	movs	r3, #1
 8006174:	61a3      	str	r3, [r4, #24]
 8006176:	bd10      	pop	{r4, pc}
 8006178:	08006de4 	.word	0x08006de4
 800617c:	080060e9 	.word	0x080060e9

08006180 <__sfp>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <__sfp+0x70>)
 8006184:	681e      	ldr	r6, [r3, #0]
 8006186:	69b3      	ldr	r3, [r6, #24]
 8006188:	4607      	mov	r7, r0
 800618a:	b913      	cbnz	r3, 8006192 <__sfp+0x12>
 800618c:	4630      	mov	r0, r6
 800618e:	f7ff ffc7 	bl	8006120 <__sinit>
 8006192:	3648      	adds	r6, #72	; 0x48
 8006194:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006198:	3b01      	subs	r3, #1
 800619a:	d503      	bpl.n	80061a4 <__sfp+0x24>
 800619c:	6833      	ldr	r3, [r6, #0]
 800619e:	b133      	cbz	r3, 80061ae <__sfp+0x2e>
 80061a0:	6836      	ldr	r6, [r6, #0]
 80061a2:	e7f7      	b.n	8006194 <__sfp+0x14>
 80061a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061a8:	b16d      	cbz	r5, 80061c6 <__sfp+0x46>
 80061aa:	3468      	adds	r4, #104	; 0x68
 80061ac:	e7f4      	b.n	8006198 <__sfp+0x18>
 80061ae:	2104      	movs	r1, #4
 80061b0:	4638      	mov	r0, r7
 80061b2:	f7ff ff9f 	bl	80060f4 <__sfmoreglue>
 80061b6:	6030      	str	r0, [r6, #0]
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d1f1      	bne.n	80061a0 <__sfp+0x20>
 80061bc:	230c      	movs	r3, #12
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4604      	mov	r4, r0
 80061c2:	4620      	mov	r0, r4
 80061c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <__sfp+0x74>)
 80061c8:	6665      	str	r5, [r4, #100]	; 0x64
 80061ca:	e9c4 5500 	strd	r5, r5, [r4]
 80061ce:	60a5      	str	r5, [r4, #8]
 80061d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80061d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80061d8:	2208      	movs	r2, #8
 80061da:	4629      	mov	r1, r5
 80061dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061e0:	f7ff fd56 	bl	8005c90 <memset>
 80061e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061ec:	e7e9      	b.n	80061c2 <__sfp+0x42>
 80061ee:	bf00      	nop
 80061f0:	08006de4 	.word	0x08006de4
 80061f4:	ffff0001 	.word	0xffff0001

080061f8 <_fwalk_reent>:
 80061f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061fc:	4680      	mov	r8, r0
 80061fe:	4689      	mov	r9, r1
 8006200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006204:	2600      	movs	r6, #0
 8006206:	b914      	cbnz	r4, 800620e <_fwalk_reent+0x16>
 8006208:	4630      	mov	r0, r6
 800620a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800620e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006212:	3f01      	subs	r7, #1
 8006214:	d501      	bpl.n	800621a <_fwalk_reent+0x22>
 8006216:	6824      	ldr	r4, [r4, #0]
 8006218:	e7f5      	b.n	8006206 <_fwalk_reent+0xe>
 800621a:	89ab      	ldrh	r3, [r5, #12]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d907      	bls.n	8006230 <_fwalk_reent+0x38>
 8006220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006224:	3301      	adds	r3, #1
 8006226:	d003      	beq.n	8006230 <_fwalk_reent+0x38>
 8006228:	4629      	mov	r1, r5
 800622a:	4640      	mov	r0, r8
 800622c:	47c8      	blx	r9
 800622e:	4306      	orrs	r6, r0
 8006230:	3568      	adds	r5, #104	; 0x68
 8006232:	e7ee      	b.n	8006212 <_fwalk_reent+0x1a>

08006234 <__swhatbuf_r>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	460e      	mov	r6, r1
 8006238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623c:	2900      	cmp	r1, #0
 800623e:	b096      	sub	sp, #88	; 0x58
 8006240:	4614      	mov	r4, r2
 8006242:	461d      	mov	r5, r3
 8006244:	da07      	bge.n	8006256 <__swhatbuf_r+0x22>
 8006246:	2300      	movs	r3, #0
 8006248:	602b      	str	r3, [r5, #0]
 800624a:	89b3      	ldrh	r3, [r6, #12]
 800624c:	061a      	lsls	r2, r3, #24
 800624e:	d410      	bmi.n	8006272 <__swhatbuf_r+0x3e>
 8006250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006254:	e00e      	b.n	8006274 <__swhatbuf_r+0x40>
 8006256:	466a      	mov	r2, sp
 8006258:	f000 fc6c 	bl	8006b34 <_fstat_r>
 800625c:	2800      	cmp	r0, #0
 800625e:	dbf2      	blt.n	8006246 <__swhatbuf_r+0x12>
 8006260:	9a01      	ldr	r2, [sp, #4]
 8006262:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006266:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800626a:	425a      	negs	r2, r3
 800626c:	415a      	adcs	r2, r3
 800626e:	602a      	str	r2, [r5, #0]
 8006270:	e7ee      	b.n	8006250 <__swhatbuf_r+0x1c>
 8006272:	2340      	movs	r3, #64	; 0x40
 8006274:	2000      	movs	r0, #0
 8006276:	6023      	str	r3, [r4, #0]
 8006278:	b016      	add	sp, #88	; 0x58
 800627a:	bd70      	pop	{r4, r5, r6, pc}

0800627c <__smakebuf_r>:
 800627c:	898b      	ldrh	r3, [r1, #12]
 800627e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006280:	079d      	lsls	r5, r3, #30
 8006282:	4606      	mov	r6, r0
 8006284:	460c      	mov	r4, r1
 8006286:	d507      	bpl.n	8006298 <__smakebuf_r+0x1c>
 8006288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	6123      	str	r3, [r4, #16]
 8006290:	2301      	movs	r3, #1
 8006292:	6163      	str	r3, [r4, #20]
 8006294:	b002      	add	sp, #8
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	ab01      	add	r3, sp, #4
 800629a:	466a      	mov	r2, sp
 800629c:	f7ff ffca 	bl	8006234 <__swhatbuf_r>
 80062a0:	9900      	ldr	r1, [sp, #0]
 80062a2:	4605      	mov	r5, r0
 80062a4:	4630      	mov	r0, r6
 80062a6:	f000 f877 	bl	8006398 <_malloc_r>
 80062aa:	b948      	cbnz	r0, 80062c0 <__smakebuf_r+0x44>
 80062ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b0:	059a      	lsls	r2, r3, #22
 80062b2:	d4ef      	bmi.n	8006294 <__smakebuf_r+0x18>
 80062b4:	f023 0303 	bic.w	r3, r3, #3
 80062b8:	f043 0302 	orr.w	r3, r3, #2
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	e7e3      	b.n	8006288 <__smakebuf_r+0xc>
 80062c0:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <__smakebuf_r+0x7c>)
 80062c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	6020      	str	r0, [r4, #0]
 80062c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	9b00      	ldr	r3, [sp, #0]
 80062d0:	6163      	str	r3, [r4, #20]
 80062d2:	9b01      	ldr	r3, [sp, #4]
 80062d4:	6120      	str	r0, [r4, #16]
 80062d6:	b15b      	cbz	r3, 80062f0 <__smakebuf_r+0x74>
 80062d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 fc3b 	bl	8006b58 <_isatty_r>
 80062e2:	b128      	cbz	r0, 80062f0 <__smakebuf_r+0x74>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	81a3      	strh	r3, [r4, #12]
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	431d      	orrs	r5, r3
 80062f4:	81a5      	strh	r5, [r4, #12]
 80062f6:	e7cd      	b.n	8006294 <__smakebuf_r+0x18>
 80062f8:	080060e9 	.word	0x080060e9

080062fc <_free_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4605      	mov	r5, r0
 8006300:	2900      	cmp	r1, #0
 8006302:	d045      	beq.n	8006390 <_free_r+0x94>
 8006304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006308:	1f0c      	subs	r4, r1, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	bfb8      	it	lt
 800630e:	18e4      	addlt	r4, r4, r3
 8006310:	f000 fc44 	bl	8006b9c <__malloc_lock>
 8006314:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <_free_r+0x98>)
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	4610      	mov	r0, r2
 800631a:	b933      	cbnz	r3, 800632a <_free_r+0x2e>
 800631c:	6063      	str	r3, [r4, #4]
 800631e:	6014      	str	r4, [r2, #0]
 8006320:	4628      	mov	r0, r5
 8006322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006326:	f000 bc3a 	b.w	8006b9e <__malloc_unlock>
 800632a:	42a3      	cmp	r3, r4
 800632c:	d90c      	bls.n	8006348 <_free_r+0x4c>
 800632e:	6821      	ldr	r1, [r4, #0]
 8006330:	1862      	adds	r2, r4, r1
 8006332:	4293      	cmp	r3, r2
 8006334:	bf04      	itt	eq
 8006336:	681a      	ldreq	r2, [r3, #0]
 8006338:	685b      	ldreq	r3, [r3, #4]
 800633a:	6063      	str	r3, [r4, #4]
 800633c:	bf04      	itt	eq
 800633e:	1852      	addeq	r2, r2, r1
 8006340:	6022      	streq	r2, [r4, #0]
 8006342:	6004      	str	r4, [r0, #0]
 8006344:	e7ec      	b.n	8006320 <_free_r+0x24>
 8006346:	4613      	mov	r3, r2
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	b10a      	cbz	r2, 8006350 <_free_r+0x54>
 800634c:	42a2      	cmp	r2, r4
 800634e:	d9fa      	bls.n	8006346 <_free_r+0x4a>
 8006350:	6819      	ldr	r1, [r3, #0]
 8006352:	1858      	adds	r0, r3, r1
 8006354:	42a0      	cmp	r0, r4
 8006356:	d10b      	bne.n	8006370 <_free_r+0x74>
 8006358:	6820      	ldr	r0, [r4, #0]
 800635a:	4401      	add	r1, r0
 800635c:	1858      	adds	r0, r3, r1
 800635e:	4282      	cmp	r2, r0
 8006360:	6019      	str	r1, [r3, #0]
 8006362:	d1dd      	bne.n	8006320 <_free_r+0x24>
 8006364:	6810      	ldr	r0, [r2, #0]
 8006366:	6852      	ldr	r2, [r2, #4]
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	4401      	add	r1, r0
 800636c:	6019      	str	r1, [r3, #0]
 800636e:	e7d7      	b.n	8006320 <_free_r+0x24>
 8006370:	d902      	bls.n	8006378 <_free_r+0x7c>
 8006372:	230c      	movs	r3, #12
 8006374:	602b      	str	r3, [r5, #0]
 8006376:	e7d3      	b.n	8006320 <_free_r+0x24>
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	1821      	adds	r1, r4, r0
 800637c:	428a      	cmp	r2, r1
 800637e:	bf04      	itt	eq
 8006380:	6811      	ldreq	r1, [r2, #0]
 8006382:	6852      	ldreq	r2, [r2, #4]
 8006384:	6062      	str	r2, [r4, #4]
 8006386:	bf04      	itt	eq
 8006388:	1809      	addeq	r1, r1, r0
 800638a:	6021      	streq	r1, [r4, #0]
 800638c:	605c      	str	r4, [r3, #4]
 800638e:	e7c7      	b.n	8006320 <_free_r+0x24>
 8006390:	bd38      	pop	{r3, r4, r5, pc}
 8006392:	bf00      	nop
 8006394:	20000090 	.word	0x20000090

08006398 <_malloc_r>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	1ccd      	adds	r5, r1, #3
 800639c:	f025 0503 	bic.w	r5, r5, #3
 80063a0:	3508      	adds	r5, #8
 80063a2:	2d0c      	cmp	r5, #12
 80063a4:	bf38      	it	cc
 80063a6:	250c      	movcc	r5, #12
 80063a8:	2d00      	cmp	r5, #0
 80063aa:	4606      	mov	r6, r0
 80063ac:	db01      	blt.n	80063b2 <_malloc_r+0x1a>
 80063ae:	42a9      	cmp	r1, r5
 80063b0:	d903      	bls.n	80063ba <_malloc_r+0x22>
 80063b2:	230c      	movs	r3, #12
 80063b4:	6033      	str	r3, [r6, #0]
 80063b6:	2000      	movs	r0, #0
 80063b8:	bd70      	pop	{r4, r5, r6, pc}
 80063ba:	f000 fbef 	bl	8006b9c <__malloc_lock>
 80063be:	4a21      	ldr	r2, [pc, #132]	; (8006444 <_malloc_r+0xac>)
 80063c0:	6814      	ldr	r4, [r2, #0]
 80063c2:	4621      	mov	r1, r4
 80063c4:	b991      	cbnz	r1, 80063ec <_malloc_r+0x54>
 80063c6:	4c20      	ldr	r4, [pc, #128]	; (8006448 <_malloc_r+0xb0>)
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	b91b      	cbnz	r3, 80063d4 <_malloc_r+0x3c>
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 fb3b 	bl	8006a48 <_sbrk_r>
 80063d2:	6020      	str	r0, [r4, #0]
 80063d4:	4629      	mov	r1, r5
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 fb36 	bl	8006a48 <_sbrk_r>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d124      	bne.n	800642a <_malloc_r+0x92>
 80063e0:	230c      	movs	r3, #12
 80063e2:	6033      	str	r3, [r6, #0]
 80063e4:	4630      	mov	r0, r6
 80063e6:	f000 fbda 	bl	8006b9e <__malloc_unlock>
 80063ea:	e7e4      	b.n	80063b6 <_malloc_r+0x1e>
 80063ec:	680b      	ldr	r3, [r1, #0]
 80063ee:	1b5b      	subs	r3, r3, r5
 80063f0:	d418      	bmi.n	8006424 <_malloc_r+0x8c>
 80063f2:	2b0b      	cmp	r3, #11
 80063f4:	d90f      	bls.n	8006416 <_malloc_r+0x7e>
 80063f6:	600b      	str	r3, [r1, #0]
 80063f8:	50cd      	str	r5, [r1, r3]
 80063fa:	18cc      	adds	r4, r1, r3
 80063fc:	4630      	mov	r0, r6
 80063fe:	f000 fbce 	bl	8006b9e <__malloc_unlock>
 8006402:	f104 000b 	add.w	r0, r4, #11
 8006406:	1d23      	adds	r3, r4, #4
 8006408:	f020 0007 	bic.w	r0, r0, #7
 800640c:	1ac3      	subs	r3, r0, r3
 800640e:	d0d3      	beq.n	80063b8 <_malloc_r+0x20>
 8006410:	425a      	negs	r2, r3
 8006412:	50e2      	str	r2, [r4, r3]
 8006414:	e7d0      	b.n	80063b8 <_malloc_r+0x20>
 8006416:	428c      	cmp	r4, r1
 8006418:	684b      	ldr	r3, [r1, #4]
 800641a:	bf16      	itet	ne
 800641c:	6063      	strne	r3, [r4, #4]
 800641e:	6013      	streq	r3, [r2, #0]
 8006420:	460c      	movne	r4, r1
 8006422:	e7eb      	b.n	80063fc <_malloc_r+0x64>
 8006424:	460c      	mov	r4, r1
 8006426:	6849      	ldr	r1, [r1, #4]
 8006428:	e7cc      	b.n	80063c4 <_malloc_r+0x2c>
 800642a:	1cc4      	adds	r4, r0, #3
 800642c:	f024 0403 	bic.w	r4, r4, #3
 8006430:	42a0      	cmp	r0, r4
 8006432:	d005      	beq.n	8006440 <_malloc_r+0xa8>
 8006434:	1a21      	subs	r1, r4, r0
 8006436:	4630      	mov	r0, r6
 8006438:	f000 fb06 	bl	8006a48 <_sbrk_r>
 800643c:	3001      	adds	r0, #1
 800643e:	d0cf      	beq.n	80063e0 <_malloc_r+0x48>
 8006440:	6025      	str	r5, [r4, #0]
 8006442:	e7db      	b.n	80063fc <_malloc_r+0x64>
 8006444:	20000090 	.word	0x20000090
 8006448:	20000094 	.word	0x20000094

0800644c <__sfputc_r>:
 800644c:	6893      	ldr	r3, [r2, #8]
 800644e:	3b01      	subs	r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	b410      	push	{r4}
 8006454:	6093      	str	r3, [r2, #8]
 8006456:	da08      	bge.n	800646a <__sfputc_r+0x1e>
 8006458:	6994      	ldr	r4, [r2, #24]
 800645a:	42a3      	cmp	r3, r4
 800645c:	db01      	blt.n	8006462 <__sfputc_r+0x16>
 800645e:	290a      	cmp	r1, #10
 8006460:	d103      	bne.n	800646a <__sfputc_r+0x1e>
 8006462:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006466:	f7ff bcab 	b.w	8005dc0 <__swbuf_r>
 800646a:	6813      	ldr	r3, [r2, #0]
 800646c:	1c58      	adds	r0, r3, #1
 800646e:	6010      	str	r0, [r2, #0]
 8006470:	7019      	strb	r1, [r3, #0]
 8006472:	4608      	mov	r0, r1
 8006474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006478:	4770      	bx	lr

0800647a <__sfputs_r>:
 800647a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647c:	4606      	mov	r6, r0
 800647e:	460f      	mov	r7, r1
 8006480:	4614      	mov	r4, r2
 8006482:	18d5      	adds	r5, r2, r3
 8006484:	42ac      	cmp	r4, r5
 8006486:	d101      	bne.n	800648c <__sfputs_r+0x12>
 8006488:	2000      	movs	r0, #0
 800648a:	e007      	b.n	800649c <__sfputs_r+0x22>
 800648c:	463a      	mov	r2, r7
 800648e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006492:	4630      	mov	r0, r6
 8006494:	f7ff ffda 	bl	800644c <__sfputc_r>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d1f3      	bne.n	8006484 <__sfputs_r+0xa>
 800649c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064a0 <_vfiprintf_r>:
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	460c      	mov	r4, r1
 80064a6:	b09d      	sub	sp, #116	; 0x74
 80064a8:	4617      	mov	r7, r2
 80064aa:	461d      	mov	r5, r3
 80064ac:	4606      	mov	r6, r0
 80064ae:	b118      	cbz	r0, 80064b8 <_vfiprintf_r+0x18>
 80064b0:	6983      	ldr	r3, [r0, #24]
 80064b2:	b90b      	cbnz	r3, 80064b8 <_vfiprintf_r+0x18>
 80064b4:	f7ff fe34 	bl	8006120 <__sinit>
 80064b8:	4b7c      	ldr	r3, [pc, #496]	; (80066ac <_vfiprintf_r+0x20c>)
 80064ba:	429c      	cmp	r4, r3
 80064bc:	d158      	bne.n	8006570 <_vfiprintf_r+0xd0>
 80064be:	6874      	ldr	r4, [r6, #4]
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	0718      	lsls	r0, r3, #28
 80064c4:	d55e      	bpl.n	8006584 <_vfiprintf_r+0xe4>
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d05b      	beq.n	8006584 <_vfiprintf_r+0xe4>
 80064cc:	2300      	movs	r3, #0
 80064ce:	9309      	str	r3, [sp, #36]	; 0x24
 80064d0:	2320      	movs	r3, #32
 80064d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064d6:	2330      	movs	r3, #48	; 0x30
 80064d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064dc:	9503      	str	r5, [sp, #12]
 80064de:	f04f 0b01 	mov.w	fp, #1
 80064e2:	46b8      	mov	r8, r7
 80064e4:	4645      	mov	r5, r8
 80064e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064ea:	b10b      	cbz	r3, 80064f0 <_vfiprintf_r+0x50>
 80064ec:	2b25      	cmp	r3, #37	; 0x25
 80064ee:	d154      	bne.n	800659a <_vfiprintf_r+0xfa>
 80064f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80064f4:	d00b      	beq.n	800650e <_vfiprintf_r+0x6e>
 80064f6:	4653      	mov	r3, sl
 80064f8:	463a      	mov	r2, r7
 80064fa:	4621      	mov	r1, r4
 80064fc:	4630      	mov	r0, r6
 80064fe:	f7ff ffbc 	bl	800647a <__sfputs_r>
 8006502:	3001      	adds	r0, #1
 8006504:	f000 80c2 	beq.w	800668c <_vfiprintf_r+0x1ec>
 8006508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650a:	4453      	add	r3, sl
 800650c:	9309      	str	r3, [sp, #36]	; 0x24
 800650e:	f898 3000 	ldrb.w	r3, [r8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80ba 	beq.w	800668c <_vfiprintf_r+0x1ec>
 8006518:	2300      	movs	r3, #0
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006522:	9304      	str	r3, [sp, #16]
 8006524:	9307      	str	r3, [sp, #28]
 8006526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800652a:	931a      	str	r3, [sp, #104]	; 0x68
 800652c:	46a8      	mov	r8, r5
 800652e:	2205      	movs	r2, #5
 8006530:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006534:	485e      	ldr	r0, [pc, #376]	; (80066b0 <_vfiprintf_r+0x210>)
 8006536:	f7f9 fe4b 	bl	80001d0 <memchr>
 800653a:	9b04      	ldr	r3, [sp, #16]
 800653c:	bb78      	cbnz	r0, 800659e <_vfiprintf_r+0xfe>
 800653e:	06d9      	lsls	r1, r3, #27
 8006540:	bf44      	itt	mi
 8006542:	2220      	movmi	r2, #32
 8006544:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006548:	071a      	lsls	r2, r3, #28
 800654a:	bf44      	itt	mi
 800654c:	222b      	movmi	r2, #43	; 0x2b
 800654e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006552:	782a      	ldrb	r2, [r5, #0]
 8006554:	2a2a      	cmp	r2, #42	; 0x2a
 8006556:	d02a      	beq.n	80065ae <_vfiprintf_r+0x10e>
 8006558:	9a07      	ldr	r2, [sp, #28]
 800655a:	46a8      	mov	r8, r5
 800655c:	2000      	movs	r0, #0
 800655e:	250a      	movs	r5, #10
 8006560:	4641      	mov	r1, r8
 8006562:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006566:	3b30      	subs	r3, #48	; 0x30
 8006568:	2b09      	cmp	r3, #9
 800656a:	d969      	bls.n	8006640 <_vfiprintf_r+0x1a0>
 800656c:	b360      	cbz	r0, 80065c8 <_vfiprintf_r+0x128>
 800656e:	e024      	b.n	80065ba <_vfiprintf_r+0x11a>
 8006570:	4b50      	ldr	r3, [pc, #320]	; (80066b4 <_vfiprintf_r+0x214>)
 8006572:	429c      	cmp	r4, r3
 8006574:	d101      	bne.n	800657a <_vfiprintf_r+0xda>
 8006576:	68b4      	ldr	r4, [r6, #8]
 8006578:	e7a2      	b.n	80064c0 <_vfiprintf_r+0x20>
 800657a:	4b4f      	ldr	r3, [pc, #316]	; (80066b8 <_vfiprintf_r+0x218>)
 800657c:	429c      	cmp	r4, r3
 800657e:	bf08      	it	eq
 8006580:	68f4      	ldreq	r4, [r6, #12]
 8006582:	e79d      	b.n	80064c0 <_vfiprintf_r+0x20>
 8006584:	4621      	mov	r1, r4
 8006586:	4630      	mov	r0, r6
 8006588:	f7ff fc6c 	bl	8005e64 <__swsetup_r>
 800658c:	2800      	cmp	r0, #0
 800658e:	d09d      	beq.n	80064cc <_vfiprintf_r+0x2c>
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	b01d      	add	sp, #116	; 0x74
 8006596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659a:	46a8      	mov	r8, r5
 800659c:	e7a2      	b.n	80064e4 <_vfiprintf_r+0x44>
 800659e:	4a44      	ldr	r2, [pc, #272]	; (80066b0 <_vfiprintf_r+0x210>)
 80065a0:	1a80      	subs	r0, r0, r2
 80065a2:	fa0b f000 	lsl.w	r0, fp, r0
 80065a6:	4318      	orrs	r0, r3
 80065a8:	9004      	str	r0, [sp, #16]
 80065aa:	4645      	mov	r5, r8
 80065ac:	e7be      	b.n	800652c <_vfiprintf_r+0x8c>
 80065ae:	9a03      	ldr	r2, [sp, #12]
 80065b0:	1d11      	adds	r1, r2, #4
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	9103      	str	r1, [sp, #12]
 80065b6:	2a00      	cmp	r2, #0
 80065b8:	db01      	blt.n	80065be <_vfiprintf_r+0x11e>
 80065ba:	9207      	str	r2, [sp, #28]
 80065bc:	e004      	b.n	80065c8 <_vfiprintf_r+0x128>
 80065be:	4252      	negs	r2, r2
 80065c0:	f043 0302 	orr.w	r3, r3, #2
 80065c4:	9207      	str	r2, [sp, #28]
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	f898 3000 	ldrb.w	r3, [r8]
 80065cc:	2b2e      	cmp	r3, #46	; 0x2e
 80065ce:	d10e      	bne.n	80065ee <_vfiprintf_r+0x14e>
 80065d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80065d4:	2b2a      	cmp	r3, #42	; 0x2a
 80065d6:	d138      	bne.n	800664a <_vfiprintf_r+0x1aa>
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	1d1a      	adds	r2, r3, #4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	9203      	str	r2, [sp, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bfb8      	it	lt
 80065e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80065e8:	f108 0802 	add.w	r8, r8, #2
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	4d33      	ldr	r5, [pc, #204]	; (80066bc <_vfiprintf_r+0x21c>)
 80065f0:	f898 1000 	ldrb.w	r1, [r8]
 80065f4:	2203      	movs	r2, #3
 80065f6:	4628      	mov	r0, r5
 80065f8:	f7f9 fdea 	bl	80001d0 <memchr>
 80065fc:	b140      	cbz	r0, 8006610 <_vfiprintf_r+0x170>
 80065fe:	2340      	movs	r3, #64	; 0x40
 8006600:	1b40      	subs	r0, r0, r5
 8006602:	fa03 f000 	lsl.w	r0, r3, r0
 8006606:	9b04      	ldr	r3, [sp, #16]
 8006608:	4303      	orrs	r3, r0
 800660a:	f108 0801 	add.w	r8, r8, #1
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	f898 1000 	ldrb.w	r1, [r8]
 8006614:	482a      	ldr	r0, [pc, #168]	; (80066c0 <_vfiprintf_r+0x220>)
 8006616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800661a:	2206      	movs	r2, #6
 800661c:	f108 0701 	add.w	r7, r8, #1
 8006620:	f7f9 fdd6 	bl	80001d0 <memchr>
 8006624:	2800      	cmp	r0, #0
 8006626:	d037      	beq.n	8006698 <_vfiprintf_r+0x1f8>
 8006628:	4b26      	ldr	r3, [pc, #152]	; (80066c4 <_vfiprintf_r+0x224>)
 800662a:	bb1b      	cbnz	r3, 8006674 <_vfiprintf_r+0x1d4>
 800662c:	9b03      	ldr	r3, [sp, #12]
 800662e:	3307      	adds	r3, #7
 8006630:	f023 0307 	bic.w	r3, r3, #7
 8006634:	3308      	adds	r3, #8
 8006636:	9303      	str	r3, [sp, #12]
 8006638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800663a:	444b      	add	r3, r9
 800663c:	9309      	str	r3, [sp, #36]	; 0x24
 800663e:	e750      	b.n	80064e2 <_vfiprintf_r+0x42>
 8006640:	fb05 3202 	mla	r2, r5, r2, r3
 8006644:	2001      	movs	r0, #1
 8006646:	4688      	mov	r8, r1
 8006648:	e78a      	b.n	8006560 <_vfiprintf_r+0xc0>
 800664a:	2300      	movs	r3, #0
 800664c:	f108 0801 	add.w	r8, r8, #1
 8006650:	9305      	str	r3, [sp, #20]
 8006652:	4619      	mov	r1, r3
 8006654:	250a      	movs	r5, #10
 8006656:	4640      	mov	r0, r8
 8006658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800665c:	3a30      	subs	r2, #48	; 0x30
 800665e:	2a09      	cmp	r2, #9
 8006660:	d903      	bls.n	800666a <_vfiprintf_r+0x1ca>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0c3      	beq.n	80065ee <_vfiprintf_r+0x14e>
 8006666:	9105      	str	r1, [sp, #20]
 8006668:	e7c1      	b.n	80065ee <_vfiprintf_r+0x14e>
 800666a:	fb05 2101 	mla	r1, r5, r1, r2
 800666e:	2301      	movs	r3, #1
 8006670:	4680      	mov	r8, r0
 8006672:	e7f0      	b.n	8006656 <_vfiprintf_r+0x1b6>
 8006674:	ab03      	add	r3, sp, #12
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4622      	mov	r2, r4
 800667a:	4b13      	ldr	r3, [pc, #76]	; (80066c8 <_vfiprintf_r+0x228>)
 800667c:	a904      	add	r1, sp, #16
 800667e:	4630      	mov	r0, r6
 8006680:	f3af 8000 	nop.w
 8006684:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006688:	4681      	mov	r9, r0
 800668a:	d1d5      	bne.n	8006638 <_vfiprintf_r+0x198>
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	065b      	lsls	r3, r3, #25
 8006690:	f53f af7e 	bmi.w	8006590 <_vfiprintf_r+0xf0>
 8006694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006696:	e77d      	b.n	8006594 <_vfiprintf_r+0xf4>
 8006698:	ab03      	add	r3, sp, #12
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	4622      	mov	r2, r4
 800669e:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <_vfiprintf_r+0x228>)
 80066a0:	a904      	add	r1, sp, #16
 80066a2:	4630      	mov	r0, r6
 80066a4:	f000 f888 	bl	80067b8 <_printf_i>
 80066a8:	e7ec      	b.n	8006684 <_vfiprintf_r+0x1e4>
 80066aa:	bf00      	nop
 80066ac:	08006e08 	.word	0x08006e08
 80066b0:	08006e48 	.word	0x08006e48
 80066b4:	08006e28 	.word	0x08006e28
 80066b8:	08006de8 	.word	0x08006de8
 80066bc:	08006e4e 	.word	0x08006e4e
 80066c0:	08006e52 	.word	0x08006e52
 80066c4:	00000000 	.word	0x00000000
 80066c8:	0800647b 	.word	0x0800647b

080066cc <_printf_common>:
 80066cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d0:	4691      	mov	r9, r2
 80066d2:	461f      	mov	r7, r3
 80066d4:	688a      	ldr	r2, [r1, #8]
 80066d6:	690b      	ldr	r3, [r1, #16]
 80066d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066dc:	4293      	cmp	r3, r2
 80066de:	bfb8      	it	lt
 80066e0:	4613      	movlt	r3, r2
 80066e2:	f8c9 3000 	str.w	r3, [r9]
 80066e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066ea:	4606      	mov	r6, r0
 80066ec:	460c      	mov	r4, r1
 80066ee:	b112      	cbz	r2, 80066f6 <_printf_common+0x2a>
 80066f0:	3301      	adds	r3, #1
 80066f2:	f8c9 3000 	str.w	r3, [r9]
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	0699      	lsls	r1, r3, #26
 80066fa:	bf42      	ittt	mi
 80066fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006700:	3302      	addmi	r3, #2
 8006702:	f8c9 3000 	strmi.w	r3, [r9]
 8006706:	6825      	ldr	r5, [r4, #0]
 8006708:	f015 0506 	ands.w	r5, r5, #6
 800670c:	d107      	bne.n	800671e <_printf_common+0x52>
 800670e:	f104 0a19 	add.w	sl, r4, #25
 8006712:	68e3      	ldr	r3, [r4, #12]
 8006714:	f8d9 2000 	ldr.w	r2, [r9]
 8006718:	1a9b      	subs	r3, r3, r2
 800671a:	42ab      	cmp	r3, r5
 800671c:	dc28      	bgt.n	8006770 <_printf_common+0xa4>
 800671e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006722:	6822      	ldr	r2, [r4, #0]
 8006724:	3300      	adds	r3, #0
 8006726:	bf18      	it	ne
 8006728:	2301      	movne	r3, #1
 800672a:	0692      	lsls	r2, r2, #26
 800672c:	d42d      	bmi.n	800678a <_printf_common+0xbe>
 800672e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006732:	4639      	mov	r1, r7
 8006734:	4630      	mov	r0, r6
 8006736:	47c0      	blx	r8
 8006738:	3001      	adds	r0, #1
 800673a:	d020      	beq.n	800677e <_printf_common+0xb2>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	68e5      	ldr	r5, [r4, #12]
 8006740:	f8d9 2000 	ldr.w	r2, [r9]
 8006744:	f003 0306 	and.w	r3, r3, #6
 8006748:	2b04      	cmp	r3, #4
 800674a:	bf08      	it	eq
 800674c:	1aad      	subeq	r5, r5, r2
 800674e:	68a3      	ldr	r3, [r4, #8]
 8006750:	6922      	ldr	r2, [r4, #16]
 8006752:	bf0c      	ite	eq
 8006754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006758:	2500      	movne	r5, #0
 800675a:	4293      	cmp	r3, r2
 800675c:	bfc4      	itt	gt
 800675e:	1a9b      	subgt	r3, r3, r2
 8006760:	18ed      	addgt	r5, r5, r3
 8006762:	f04f 0900 	mov.w	r9, #0
 8006766:	341a      	adds	r4, #26
 8006768:	454d      	cmp	r5, r9
 800676a:	d11a      	bne.n	80067a2 <_printf_common+0xd6>
 800676c:	2000      	movs	r0, #0
 800676e:	e008      	b.n	8006782 <_printf_common+0xb6>
 8006770:	2301      	movs	r3, #1
 8006772:	4652      	mov	r2, sl
 8006774:	4639      	mov	r1, r7
 8006776:	4630      	mov	r0, r6
 8006778:	47c0      	blx	r8
 800677a:	3001      	adds	r0, #1
 800677c:	d103      	bne.n	8006786 <_printf_common+0xba>
 800677e:	f04f 30ff 	mov.w	r0, #4294967295
 8006782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006786:	3501      	adds	r5, #1
 8006788:	e7c3      	b.n	8006712 <_printf_common+0x46>
 800678a:	18e1      	adds	r1, r4, r3
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	2030      	movs	r0, #48	; 0x30
 8006790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006794:	4422      	add	r2, r4
 8006796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800679a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800679e:	3302      	adds	r3, #2
 80067a0:	e7c5      	b.n	800672e <_printf_common+0x62>
 80067a2:	2301      	movs	r3, #1
 80067a4:	4622      	mov	r2, r4
 80067a6:	4639      	mov	r1, r7
 80067a8:	4630      	mov	r0, r6
 80067aa:	47c0      	blx	r8
 80067ac:	3001      	adds	r0, #1
 80067ae:	d0e6      	beq.n	800677e <_printf_common+0xb2>
 80067b0:	f109 0901 	add.w	r9, r9, #1
 80067b4:	e7d8      	b.n	8006768 <_printf_common+0x9c>
	...

080067b8 <_printf_i>:
 80067b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067c0:	460c      	mov	r4, r1
 80067c2:	7e09      	ldrb	r1, [r1, #24]
 80067c4:	b085      	sub	sp, #20
 80067c6:	296e      	cmp	r1, #110	; 0x6e
 80067c8:	4617      	mov	r7, r2
 80067ca:	4606      	mov	r6, r0
 80067cc:	4698      	mov	r8, r3
 80067ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067d0:	f000 80b3 	beq.w	800693a <_printf_i+0x182>
 80067d4:	d822      	bhi.n	800681c <_printf_i+0x64>
 80067d6:	2963      	cmp	r1, #99	; 0x63
 80067d8:	d036      	beq.n	8006848 <_printf_i+0x90>
 80067da:	d80a      	bhi.n	80067f2 <_printf_i+0x3a>
 80067dc:	2900      	cmp	r1, #0
 80067de:	f000 80b9 	beq.w	8006954 <_printf_i+0x19c>
 80067e2:	2958      	cmp	r1, #88	; 0x58
 80067e4:	f000 8083 	beq.w	80068ee <_printf_i+0x136>
 80067e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067f0:	e032      	b.n	8006858 <_printf_i+0xa0>
 80067f2:	2964      	cmp	r1, #100	; 0x64
 80067f4:	d001      	beq.n	80067fa <_printf_i+0x42>
 80067f6:	2969      	cmp	r1, #105	; 0x69
 80067f8:	d1f6      	bne.n	80067e8 <_printf_i+0x30>
 80067fa:	6820      	ldr	r0, [r4, #0]
 80067fc:	6813      	ldr	r3, [r2, #0]
 80067fe:	0605      	lsls	r5, r0, #24
 8006800:	f103 0104 	add.w	r1, r3, #4
 8006804:	d52a      	bpl.n	800685c <_printf_i+0xa4>
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6011      	str	r1, [r2, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	da03      	bge.n	8006816 <_printf_i+0x5e>
 800680e:	222d      	movs	r2, #45	; 0x2d
 8006810:	425b      	negs	r3, r3
 8006812:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006816:	486f      	ldr	r0, [pc, #444]	; (80069d4 <_printf_i+0x21c>)
 8006818:	220a      	movs	r2, #10
 800681a:	e039      	b.n	8006890 <_printf_i+0xd8>
 800681c:	2973      	cmp	r1, #115	; 0x73
 800681e:	f000 809d 	beq.w	800695c <_printf_i+0x1a4>
 8006822:	d808      	bhi.n	8006836 <_printf_i+0x7e>
 8006824:	296f      	cmp	r1, #111	; 0x6f
 8006826:	d020      	beq.n	800686a <_printf_i+0xb2>
 8006828:	2970      	cmp	r1, #112	; 0x70
 800682a:	d1dd      	bne.n	80067e8 <_printf_i+0x30>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	f043 0320 	orr.w	r3, r3, #32
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	e003      	b.n	800683e <_printf_i+0x86>
 8006836:	2975      	cmp	r1, #117	; 0x75
 8006838:	d017      	beq.n	800686a <_printf_i+0xb2>
 800683a:	2978      	cmp	r1, #120	; 0x78
 800683c:	d1d4      	bne.n	80067e8 <_printf_i+0x30>
 800683e:	2378      	movs	r3, #120	; 0x78
 8006840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006844:	4864      	ldr	r0, [pc, #400]	; (80069d8 <_printf_i+0x220>)
 8006846:	e055      	b.n	80068f4 <_printf_i+0x13c>
 8006848:	6813      	ldr	r3, [r2, #0]
 800684a:	1d19      	adds	r1, r3, #4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6011      	str	r1, [r2, #0]
 8006850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006858:	2301      	movs	r3, #1
 800685a:	e08c      	b.n	8006976 <_printf_i+0x1be>
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6011      	str	r1, [r2, #0]
 8006860:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006864:	bf18      	it	ne
 8006866:	b21b      	sxthne	r3, r3
 8006868:	e7cf      	b.n	800680a <_printf_i+0x52>
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	6825      	ldr	r5, [r4, #0]
 800686e:	1d18      	adds	r0, r3, #4
 8006870:	6010      	str	r0, [r2, #0]
 8006872:	0628      	lsls	r0, r5, #24
 8006874:	d501      	bpl.n	800687a <_printf_i+0xc2>
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	e002      	b.n	8006880 <_printf_i+0xc8>
 800687a:	0668      	lsls	r0, r5, #25
 800687c:	d5fb      	bpl.n	8006876 <_printf_i+0xbe>
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	4854      	ldr	r0, [pc, #336]	; (80069d4 <_printf_i+0x21c>)
 8006882:	296f      	cmp	r1, #111	; 0x6f
 8006884:	bf14      	ite	ne
 8006886:	220a      	movne	r2, #10
 8006888:	2208      	moveq	r2, #8
 800688a:	2100      	movs	r1, #0
 800688c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006890:	6865      	ldr	r5, [r4, #4]
 8006892:	60a5      	str	r5, [r4, #8]
 8006894:	2d00      	cmp	r5, #0
 8006896:	f2c0 8095 	blt.w	80069c4 <_printf_i+0x20c>
 800689a:	6821      	ldr	r1, [r4, #0]
 800689c:	f021 0104 	bic.w	r1, r1, #4
 80068a0:	6021      	str	r1, [r4, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d13d      	bne.n	8006922 <_printf_i+0x16a>
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	f040 808e 	bne.w	80069c8 <_printf_i+0x210>
 80068ac:	4665      	mov	r5, ip
 80068ae:	2a08      	cmp	r2, #8
 80068b0:	d10b      	bne.n	80068ca <_printf_i+0x112>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	07db      	lsls	r3, r3, #31
 80068b6:	d508      	bpl.n	80068ca <_printf_i+0x112>
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	6862      	ldr	r2, [r4, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	bfde      	ittt	le
 80068c0:	2330      	movle	r3, #48	; 0x30
 80068c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068ca:	ebac 0305 	sub.w	r3, ip, r5
 80068ce:	6123      	str	r3, [r4, #16]
 80068d0:	f8cd 8000 	str.w	r8, [sp]
 80068d4:	463b      	mov	r3, r7
 80068d6:	aa03      	add	r2, sp, #12
 80068d8:	4621      	mov	r1, r4
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff fef6 	bl	80066cc <_printf_common>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d14d      	bne.n	8006980 <_printf_i+0x1c8>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	b005      	add	sp, #20
 80068ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068ee:	4839      	ldr	r0, [pc, #228]	; (80069d4 <_printf_i+0x21c>)
 80068f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068f4:	6813      	ldr	r3, [r2, #0]
 80068f6:	6821      	ldr	r1, [r4, #0]
 80068f8:	1d1d      	adds	r5, r3, #4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6015      	str	r5, [r2, #0]
 80068fe:	060a      	lsls	r2, r1, #24
 8006900:	d50b      	bpl.n	800691a <_printf_i+0x162>
 8006902:	07ca      	lsls	r2, r1, #31
 8006904:	bf44      	itt	mi
 8006906:	f041 0120 	orrmi.w	r1, r1, #32
 800690a:	6021      	strmi	r1, [r4, #0]
 800690c:	b91b      	cbnz	r3, 8006916 <_printf_i+0x15e>
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	f022 0220 	bic.w	r2, r2, #32
 8006914:	6022      	str	r2, [r4, #0]
 8006916:	2210      	movs	r2, #16
 8006918:	e7b7      	b.n	800688a <_printf_i+0xd2>
 800691a:	064d      	lsls	r5, r1, #25
 800691c:	bf48      	it	mi
 800691e:	b29b      	uxthmi	r3, r3
 8006920:	e7ef      	b.n	8006902 <_printf_i+0x14a>
 8006922:	4665      	mov	r5, ip
 8006924:	fbb3 f1f2 	udiv	r1, r3, r2
 8006928:	fb02 3311 	mls	r3, r2, r1, r3
 800692c:	5cc3      	ldrb	r3, [r0, r3]
 800692e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006932:	460b      	mov	r3, r1
 8006934:	2900      	cmp	r1, #0
 8006936:	d1f5      	bne.n	8006924 <_printf_i+0x16c>
 8006938:	e7b9      	b.n	80068ae <_printf_i+0xf6>
 800693a:	6813      	ldr	r3, [r2, #0]
 800693c:	6825      	ldr	r5, [r4, #0]
 800693e:	6961      	ldr	r1, [r4, #20]
 8006940:	1d18      	adds	r0, r3, #4
 8006942:	6010      	str	r0, [r2, #0]
 8006944:	0628      	lsls	r0, r5, #24
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	d501      	bpl.n	800694e <_printf_i+0x196>
 800694a:	6019      	str	r1, [r3, #0]
 800694c:	e002      	b.n	8006954 <_printf_i+0x19c>
 800694e:	066a      	lsls	r2, r5, #25
 8006950:	d5fb      	bpl.n	800694a <_printf_i+0x192>
 8006952:	8019      	strh	r1, [r3, #0]
 8006954:	2300      	movs	r3, #0
 8006956:	6123      	str	r3, [r4, #16]
 8006958:	4665      	mov	r5, ip
 800695a:	e7b9      	b.n	80068d0 <_printf_i+0x118>
 800695c:	6813      	ldr	r3, [r2, #0]
 800695e:	1d19      	adds	r1, r3, #4
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	681d      	ldr	r5, [r3, #0]
 8006964:	6862      	ldr	r2, [r4, #4]
 8006966:	2100      	movs	r1, #0
 8006968:	4628      	mov	r0, r5
 800696a:	f7f9 fc31 	bl	80001d0 <memchr>
 800696e:	b108      	cbz	r0, 8006974 <_printf_i+0x1bc>
 8006970:	1b40      	subs	r0, r0, r5
 8006972:	6060      	str	r0, [r4, #4]
 8006974:	6863      	ldr	r3, [r4, #4]
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	2300      	movs	r3, #0
 800697a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697e:	e7a7      	b.n	80068d0 <_printf_i+0x118>
 8006980:	6923      	ldr	r3, [r4, #16]
 8006982:	462a      	mov	r2, r5
 8006984:	4639      	mov	r1, r7
 8006986:	4630      	mov	r0, r6
 8006988:	47c0      	blx	r8
 800698a:	3001      	adds	r0, #1
 800698c:	d0aa      	beq.n	80068e4 <_printf_i+0x12c>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	079b      	lsls	r3, r3, #30
 8006992:	d413      	bmi.n	80069bc <_printf_i+0x204>
 8006994:	68e0      	ldr	r0, [r4, #12]
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	4298      	cmp	r0, r3
 800699a:	bfb8      	it	lt
 800699c:	4618      	movlt	r0, r3
 800699e:	e7a3      	b.n	80068e8 <_printf_i+0x130>
 80069a0:	2301      	movs	r3, #1
 80069a2:	464a      	mov	r2, r9
 80069a4:	4639      	mov	r1, r7
 80069a6:	4630      	mov	r0, r6
 80069a8:	47c0      	blx	r8
 80069aa:	3001      	adds	r0, #1
 80069ac:	d09a      	beq.n	80068e4 <_printf_i+0x12c>
 80069ae:	3501      	adds	r5, #1
 80069b0:	68e3      	ldr	r3, [r4, #12]
 80069b2:	9a03      	ldr	r2, [sp, #12]
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	42ab      	cmp	r3, r5
 80069b8:	dcf2      	bgt.n	80069a0 <_printf_i+0x1e8>
 80069ba:	e7eb      	b.n	8006994 <_printf_i+0x1dc>
 80069bc:	2500      	movs	r5, #0
 80069be:	f104 0919 	add.w	r9, r4, #25
 80069c2:	e7f5      	b.n	80069b0 <_printf_i+0x1f8>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1ac      	bne.n	8006922 <_printf_i+0x16a>
 80069c8:	7803      	ldrb	r3, [r0, #0]
 80069ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d2:	e76c      	b.n	80068ae <_printf_i+0xf6>
 80069d4:	08006e59 	.word	0x08006e59
 80069d8:	08006e6a 	.word	0x08006e6a

080069dc <_putc_r>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	460d      	mov	r5, r1
 80069e0:	4614      	mov	r4, r2
 80069e2:	4606      	mov	r6, r0
 80069e4:	b118      	cbz	r0, 80069ee <_putc_r+0x12>
 80069e6:	6983      	ldr	r3, [r0, #24]
 80069e8:	b90b      	cbnz	r3, 80069ee <_putc_r+0x12>
 80069ea:	f7ff fb99 	bl	8006120 <__sinit>
 80069ee:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <_putc_r+0x60>)
 80069f0:	429c      	cmp	r4, r3
 80069f2:	d112      	bne.n	8006a1a <_putc_r+0x3e>
 80069f4:	6874      	ldr	r4, [r6, #4]
 80069f6:	68a3      	ldr	r3, [r4, #8]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	60a3      	str	r3, [r4, #8]
 80069fe:	da16      	bge.n	8006a2e <_putc_r+0x52>
 8006a00:	69a2      	ldr	r2, [r4, #24]
 8006a02:	4293      	cmp	r3, r2
 8006a04:	db02      	blt.n	8006a0c <_putc_r+0x30>
 8006a06:	b2eb      	uxtb	r3, r5
 8006a08:	2b0a      	cmp	r3, #10
 8006a0a:	d110      	bne.n	8006a2e <_putc_r+0x52>
 8006a0c:	4622      	mov	r2, r4
 8006a0e:	4629      	mov	r1, r5
 8006a10:	4630      	mov	r0, r6
 8006a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a16:	f7ff b9d3 	b.w	8005dc0 <__swbuf_r>
 8006a1a:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <_putc_r+0x64>)
 8006a1c:	429c      	cmp	r4, r3
 8006a1e:	d101      	bne.n	8006a24 <_putc_r+0x48>
 8006a20:	68b4      	ldr	r4, [r6, #8]
 8006a22:	e7e8      	b.n	80069f6 <_putc_r+0x1a>
 8006a24:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <_putc_r+0x68>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	bf08      	it	eq
 8006a2a:	68f4      	ldreq	r4, [r6, #12]
 8006a2c:	e7e3      	b.n	80069f6 <_putc_r+0x1a>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	6022      	str	r2, [r4, #0]
 8006a34:	701d      	strb	r5, [r3, #0]
 8006a36:	b2e8      	uxtb	r0, r5
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
 8006a3a:	bf00      	nop
 8006a3c:	08006e08 	.word	0x08006e08
 8006a40:	08006e28 	.word	0x08006e28
 8006a44:	08006de8 	.word	0x08006de8

08006a48 <_sbrk_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4c06      	ldr	r4, [pc, #24]	; (8006a64 <_sbrk_r+0x1c>)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4605      	mov	r5, r0
 8006a50:	4608      	mov	r0, r1
 8006a52:	6023      	str	r3, [r4, #0]
 8006a54:	f7fb fca4 	bl	80023a0 <_sbrk>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_sbrk_r+0x1a>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_sbrk_r+0x1a>
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	20000558 	.word	0x20000558

08006a68 <__sread>:
 8006a68:	b510      	push	{r4, lr}
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a70:	f000 f896 	bl	8006ba0 <_read_r>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	bfab      	itete	ge
 8006a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a7c:	181b      	addge	r3, r3, r0
 8006a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a82:	bfac      	ite	ge
 8006a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a86:	81a3      	strhlt	r3, [r4, #12]
 8006a88:	bd10      	pop	{r4, pc}

08006a8a <__swrite>:
 8006a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8e:	461f      	mov	r7, r3
 8006a90:	898b      	ldrh	r3, [r1, #12]
 8006a92:	05db      	lsls	r3, r3, #23
 8006a94:	4605      	mov	r5, r0
 8006a96:	460c      	mov	r4, r1
 8006a98:	4616      	mov	r6, r2
 8006a9a:	d505      	bpl.n	8006aa8 <__swrite+0x1e>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa4:	f000 f868 	bl	8006b78 <_lseek_r>
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ab2:	81a3      	strh	r3, [r4, #12]
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	4628      	mov	r0, r5
 8006aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006abe:	f000 b817 	b.w	8006af0 <_write_r>

08006ac2 <__sseek>:
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aca:	f000 f855 	bl	8006b78 <_lseek_r>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	bf15      	itete	ne
 8006ad4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ade:	81a3      	strheq	r3, [r4, #12]
 8006ae0:	bf18      	it	ne
 8006ae2:	81a3      	strhne	r3, [r4, #12]
 8006ae4:	bd10      	pop	{r4, pc}

08006ae6 <__sclose>:
 8006ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aea:	f000 b813 	b.w	8006b14 <_close_r>
	...

08006af0 <_write_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4c07      	ldr	r4, [pc, #28]	; (8006b10 <_write_r+0x20>)
 8006af4:	4605      	mov	r5, r0
 8006af6:	4608      	mov	r0, r1
 8006af8:	4611      	mov	r1, r2
 8006afa:	2200      	movs	r2, #0
 8006afc:	6022      	str	r2, [r4, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f7fb fbfd 	bl	80022fe <_write>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d102      	bne.n	8006b0e <_write_r+0x1e>
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	b103      	cbz	r3, 8006b0e <_write_r+0x1e>
 8006b0c:	602b      	str	r3, [r5, #0]
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	20000558 	.word	0x20000558

08006b14 <_close_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4c06      	ldr	r4, [pc, #24]	; (8006b30 <_close_r+0x1c>)
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	4608      	mov	r0, r1
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	f7fb fc09 	bl	8002336 <_close>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	d102      	bne.n	8006b2e <_close_r+0x1a>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	b103      	cbz	r3, 8006b2e <_close_r+0x1a>
 8006b2c:	602b      	str	r3, [r5, #0]
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	20000558 	.word	0x20000558

08006b34 <_fstat_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4c07      	ldr	r4, [pc, #28]	; (8006b54 <_fstat_r+0x20>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	4611      	mov	r1, r2
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	f7fb fc04 	bl	800234e <_fstat>
 8006b46:	1c43      	adds	r3, r0, #1
 8006b48:	d102      	bne.n	8006b50 <_fstat_r+0x1c>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	b103      	cbz	r3, 8006b50 <_fstat_r+0x1c>
 8006b4e:	602b      	str	r3, [r5, #0]
 8006b50:	bd38      	pop	{r3, r4, r5, pc}
 8006b52:	bf00      	nop
 8006b54:	20000558 	.word	0x20000558

08006b58 <_isatty_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4c06      	ldr	r4, [pc, #24]	; (8006b74 <_isatty_r+0x1c>)
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	4605      	mov	r5, r0
 8006b60:	4608      	mov	r0, r1
 8006b62:	6023      	str	r3, [r4, #0]
 8006b64:	f7fb fc03 	bl	800236e <_isatty>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	d102      	bne.n	8006b72 <_isatty_r+0x1a>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	b103      	cbz	r3, 8006b72 <_isatty_r+0x1a>
 8006b70:	602b      	str	r3, [r5, #0]
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	20000558 	.word	0x20000558

08006b78 <_lseek_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	4c07      	ldr	r4, [pc, #28]	; (8006b98 <_lseek_r+0x20>)
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	4608      	mov	r0, r1
 8006b80:	4611      	mov	r1, r2
 8006b82:	2200      	movs	r2, #0
 8006b84:	6022      	str	r2, [r4, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	f7fb fbfc 	bl	8002384 <_lseek>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_lseek_r+0x1e>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_lseek_r+0x1e>
 8006b94:	602b      	str	r3, [r5, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	20000558 	.word	0x20000558

08006b9c <__malloc_lock>:
 8006b9c:	4770      	bx	lr

08006b9e <__malloc_unlock>:
 8006b9e:	4770      	bx	lr

08006ba0 <_read_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4c07      	ldr	r4, [pc, #28]	; (8006bc0 <_read_r+0x20>)
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	4608      	mov	r0, r1
 8006ba8:	4611      	mov	r1, r2
 8006baa:	2200      	movs	r2, #0
 8006bac:	6022      	str	r2, [r4, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f7fb fb88 	bl	80022c4 <_read>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_read_r+0x1e>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_read_r+0x1e>
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	20000558 	.word	0x20000558

08006bc4 <_init>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	bf00      	nop
 8006bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bca:	bc08      	pop	{r3}
 8006bcc:	469e      	mov	lr, r3
 8006bce:	4770      	bx	lr

08006bd0 <_fini>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr
