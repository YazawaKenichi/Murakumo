
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  0800d258  0800d258  0001d258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9bc  0800d9bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9bc  0800d9bc  0001d9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9c4  0800d9c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9c4  0800d9c4  0001d9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9c8  0800d9c8  0001d9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  200001e0  0800dbac  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  0800dbac  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ea7c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004abb  00000000  00000000  0004ec8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  00053748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  00054e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e61  00000000  00000000  000563d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da68  00000000  00000000  0007c239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb3f0  00000000  00000000  00099ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000749c  00000000  00000000  001650e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d23c 	.word	0x0800d23c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d23c 	.word	0x0800d23c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <imu_read_byte>:
volatile Inertial inertial_offset;

Coordinate COORDINATE_ZERO;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <imu_read_byte+0x54>)
 8001008:	f004 fd00 	bl	8005a0c <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <imu_read_byte+0x58>)
 8001016:	f005 fb25 	bl	8006664 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <imu_read_byte+0x58>)
 8001024:	f005 fc52 	bl	80068cc <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <imu_read_byte+0x54>)
 8001030:	f004 fcec 	bl	8005a0c <HAL_GPIO_WritePin>
#endif

	return val;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	20000368 	.word	0x20000368

08001048 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <imu_write_byte+0x54>)
 800106a:	f004 fccf 	bl	8005a0c <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2201      	movs	r2, #1
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <imu_write_byte+0x58>)
 8001078:	f005 faf4 	bl	8006664 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 800107c:	1db9      	adds	r1, r7, #6
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <imu_write_byte+0x58>)
 8001084:	f005 faee 	bl	8006664 <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <imu_write_byte+0x54>)
 8001090:	f004 fcbc 	bl	8005a0c <HAL_GPIO_WritePin>
#endif
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	20000368 	.word	0x20000368
 80010a4:	00000000 	.word	0x00000000

080010a8 <imu_init>:

uint8_t imu_init(uint8_t* wai)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	CS_RESET;
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	4834      	ldr	r0, [pc, #208]	; (8001188 <imu_init+0xe0>)
 80010b8:	f004 fca8 	bl	8005a0c <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

	COORDINATE_ZERO.x = 0;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <imu_init+0xe4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]
	COORDINATE_ZERO.y = 0;
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <imu_init+0xe4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	805a      	strh	r2, [r3, #2]
	COORDINATE_ZERO.z = 0;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <imu_init+0xe4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	809a      	strh	r2, [r3, #4]

	RADPERDEG = ((double) M_PI / (double) 180);
 80010d2:	492f      	ldr	r1, [pc, #188]	; (8001190 <imu_init+0xe8>)
 80010d4:	a32a      	add	r3, pc, #168	; (adr r3, 8001180 <imu_init+0xd8>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	e9c1 2300 	strd	r2, r3, [r1]

#if	INIT_ZERO
	inertial.accel = COORDINATE_ZERO;
 80010de:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <imu_init+0xec>)
 80010e0:	4a2a      	ldr	r2, [pc, #168]	; (800118c <imu_init+0xe4>)
 80010e2:	6811      	ldr	r1, [r2, #0]
 80010e4:	6019      	str	r1, [r3, #0]
 80010e6:	8892      	ldrh	r2, [r2, #4]
 80010e8:	809a      	strh	r2, [r3, #4]
	inertial.gyro = COORDINATE_ZERO;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <imu_init+0xec>)
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <imu_init+0xe4>)
 80010ee:	3306      	adds	r3, #6
 80010f0:	6811      	ldr	r1, [r2, #0]
 80010f2:	6019      	str	r1, [r3, #0]
 80010f4:	8892      	ldrh	r2, [r2, #4]
 80010f6:	809a      	strh	r2, [r3, #4]
	displacement.position = COORDINATE_ZERO;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <imu_init+0xf0>)
 80010fa:	4a24      	ldr	r2, [pc, #144]	; (800118c <imu_init+0xe4>)
 80010fc:	6811      	ldr	r1, [r2, #0]
 80010fe:	6019      	str	r1, [r3, #0]
 8001100:	8892      	ldrh	r2, [r2, #4]
 8001102:	809a      	strh	r2, [r3, #4]
	displacement.theta = COORDINATE_ZERO;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <imu_init+0xf0>)
 8001106:	4a21      	ldr	r2, [pc, #132]	; (800118c <imu_init+0xe4>)
 8001108:	3306      	adds	r3, #6
 800110a:	6811      	ldr	r1, [r2, #0]
 800110c:	6019      	str	r1, [r3, #0]
 800110e:	8892      	ldrh	r2, [r2, #4]
 8001110:	809a      	strh	r2, [r3, #4]
#endif

	who_am_i = imu_read_byte(0x00);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ff6a 	bl	8000fec <imu_read_byte>
 8001118:	4603      	mov	r3, r0
 800111a:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7bba      	ldrb	r2, [r7, #14]
 8001120:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	2be0      	cmp	r3, #224	; 0xe0
 8001126:	d11e      	bne.n	8001166 <imu_init+0xbe>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 800112c:	2101      	movs	r1, #1
 800112e:	2006      	movs	r0, #6
 8001130:	f7ff ff8a 	bl	8001048 <imu_write_byte>
		HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	; 0x64
 8001136:	f003 f96b 	bl	8004410 <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 800113a:	2110      	movs	r1, #16
 800113c:	2003      	movs	r0, #3
 800113e:	f7ff ff83 	bl	8001048 <imu_write_byte>
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 8001142:	2120      	movs	r1, #32
 8001144:	207f      	movs	r0, #127	; 0x7f
 8001146:	f7ff ff7f 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		imu_write_byte(0x01, 0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 800114a:	2107      	movs	r1, #7
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ff7b 	bl	8001048 <imu_write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		imu_write_byte(0x14, 0x00);	//range±2g
 8001152:	2100      	movs	r1, #0
 8001154:	2014      	movs	r0, #20
 8001156:	f7ff ff77 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		imu_write_byte(REG_BANK_SEL, 0x00);	//USER_BANK0
 800115a:	2100      	movs	r1, #0
 800115c:	207f      	movs	r0, #127	; 0x7f
 800115e:	f7ff ff73 	bl	8001048 <imu_write_byte>
		imu_set_offset();
 8001162:	f000 f81b 	bl	800119c <imu_set_offset>
	}
#if USE_NCS
	CS_SET;
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <imu_init+0xe0>)
 800116e:	f004 fc4d 	bl	8005a0c <HAL_GPIO_WritePin>
#endif
	return ret;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	a2529d39 	.word	0xa2529d39
 8001184:	3f91df46 	.word	0x3f91df46
 8001188:	40020400 	.word	0x40020400
 800118c:	20000210 	.word	0x20000210
 8001190:	20000208 	.word	0x20000208
 8001194:	20000230 	.word	0x20000230
 8001198:	20000224 	.word	0x20000224

0800119c <imu_set_offset>:
	CS_SET;
#endif
}

void imu_set_offset()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	imu_read();
 80011a0:	f000 f80e 	bl	80011c0 <imu_read>
	inertial_offset = inertial;
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <imu_set_offset+0x1c>)
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <imu_set_offset+0x20>)
 80011a8:	6810      	ldr	r0, [r2, #0]
 80011aa:	6851      	ldr	r1, [r2, #4]
 80011ac:	6892      	ldr	r2, [r2, #8]
 80011ae:	6018      	str	r0, [r3, #0]
 80011b0:	6059      	str	r1, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000218 	.word	0x20000218
 80011bc:	20000230 	.word	0x20000230

080011c0 <imu_read>:

void imu_read()
{
 80011c0:	b598      	push	{r3, r4, r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)imu_read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_XOUT_L));
 80011c4:	202d      	movs	r0, #45	; 0x2d
 80011c6:	f7ff ff11 	bl	8000fec <imu_read_byte>
 80011ca:	4603      	mov	r3, r0
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21c      	sxth	r4, r3
 80011d0:	202e      	movs	r0, #46	; 0x2e
 80011d2:	f7ff ff0b 	bl	8000fec <imu_read_byte>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4323      	orrs	r3, r4
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <imu_read+0xbc>)
 80011e0:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)imu_read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_YOUT_L));
 80011e2:	202f      	movs	r0, #47	; 0x2f
 80011e4:	f7ff ff02 	bl	8000fec <imu_read_byte>
 80011e8:	4603      	mov	r3, r0
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21c      	sxth	r4, r3
 80011ee:	2030      	movs	r0, #48	; 0x30
 80011f0:	f7ff fefc 	bl	8000fec <imu_read_byte>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4323      	orrs	r3, r4
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <imu_read+0xbc>)
 80011fe:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)imu_read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_ZOUT_L));
 8001200:	2031      	movs	r0, #49	; 0x31
 8001202:	f7ff fef3 	bl	8000fec <imu_read_byte>
 8001206:	4603      	mov	r3, r0
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21c      	sxth	r4, r3
 800120c:	2032      	movs	r0, #50	; 0x32
 800120e:	f7ff feed 	bl	8000fec <imu_read_byte>
 8001212:	4603      	mov	r3, r0
 8001214:	b21b      	sxth	r3, r3
 8001216:	4323      	orrs	r3, r4
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <imu_read+0xbc>)
 800121c:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 800121e:	2033      	movs	r0, #51	; 0x33
 8001220:	f7ff fee4 	bl	8000fec <imu_read_byte>
 8001224:	4603      	mov	r3, r0
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21c      	sxth	r4, r3
 800122a:	2034      	movs	r0, #52	; 0x34
 800122c:	f7ff fede 	bl	8000fec <imu_read_byte>
 8001230:	4603      	mov	r3, r0
 8001232:	b21b      	sxth	r3, r3
 8001234:	4323      	orrs	r3, r4
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <imu_read+0xbc>)
 800123a:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 800123c:	2035      	movs	r0, #53	; 0x35
 800123e:	f7ff fed5 	bl	8000fec <imu_read_byte>
 8001242:	4603      	mov	r3, r0
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21c      	sxth	r4, r3
 8001248:	2036      	movs	r0, #54	; 0x36
 800124a:	f7ff fecf 	bl	8000fec <imu_read_byte>
 800124e:	4603      	mov	r3, r0
 8001250:	b21b      	sxth	r3, r3
 8001252:	4323      	orrs	r3, r4
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <imu_read+0xbc>)
 8001258:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 800125a:	2037      	movs	r0, #55	; 0x37
 800125c:	f7ff fec6 	bl	8000fec <imu_read_byte>
 8001260:	4603      	mov	r3, r0
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21c      	sxth	r4, r3
 8001266:	2038      	movs	r0, #56	; 0x38
 8001268:	f7ff fec0 	bl	8000fec <imu_read_byte>
 800126c:	4603      	mov	r3, r0
 800126e:	b21b      	sxth	r3, r3
 8001270:	4323      	orrs	r3, r4
 8001272:	b21a      	sxth	r2, r3
 8001274:	4b01      	ldr	r3, [pc, #4]	; (800127c <imu_read+0xbc>)
 8001276:	815a      	strh	r2, [r3, #10]
}
 8001278:	bf00      	nop
 800127a:	bd98      	pop	{r3, r4, r7, pc}
 800127c:	20000230 	.word	0x20000230

08001280 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 8001284:	f000 f804 	bl	8001290 <rotary_set_playmode>
    rotary_set_value();
 8001288:	f000 f81a 	bl	80012c0 <rotary_set_value>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <rotary_set_playmode>:

void rotary_set_playmode()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 8001294:	f000 f82c 	bl	80012f0 <rotary_read>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b01      	ldr	r3, [pc, #4]	; (80012a4 <rotary_set_playmode+0x14>)
 800129e:	701a      	strb	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000023c 	.word	0x2000023c

080012a8 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
    return playmode;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <rotary_read_playmode+0x14>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000023c 	.word	0x2000023c

080012c0 <rotary_set_value>:

void rotary_set_value()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
    value = rotary_read();
 80012c4:	f000 f814 	bl	80012f0 <rotary_read>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b01      	ldr	r3, [pc, #4]	; (80012d4 <rotary_set_value+0x14>)
 80012ce:	701a      	strb	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000023d 	.word	0x2000023d

080012d8 <rotary_read_value>:

uint8_t rotary_read_value()
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
    return value;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <rotary_read_value+0x14>)
 80012de:	781b      	ldrb	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	2000023d 	.word	0x2000023d

080012f0 <rotary_read>:

uint8_t rotary_read()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 80012fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fe:	481f      	ldr	r0, [pc, #124]	; (800137c <rotary_read+0x8c>)
 8001300:	f004 fb6c 	bl	80059dc <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf0c      	ite	eq
 800130a:	2301      	moveq	r3, #1
 800130c:	2300      	movne	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	b2da      	uxtb	r2, r3
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4413      	add	r3, r2
 8001316:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131c:	4817      	ldr	r0, [pc, #92]	; (800137c <rotary_read+0x8c>)
 800131e:	f004 fb5d 	bl	80059dc <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <rotary_read+0x3c>
 8001328:	2302      	movs	r3, #2
 800132a:	e000      	b.n	800132e <rotary_read+0x3e>
 800132c:	2300      	movs	r3, #0
 800132e:	b2da      	uxtb	r2, r3
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4413      	add	r3, r2
 8001334:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 8001336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <rotary_read+0x90>)
 800133c:	f004 fb4e 	bl	80059dc <HAL_GPIO_ReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <rotary_read+0x5a>
 8001346:	2304      	movs	r3, #4
 8001348:	e000      	b.n	800134c <rotary_read+0x5c>
 800134a:	2300      	movs	r3, #0
 800134c:	b2da      	uxtb	r2, r3
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4413      	add	r3, r2
 8001352:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 8001354:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <rotary_read+0x8c>)
 800135a:	f004 fb3f 	bl	80059dc <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <rotary_read+0x78>
 8001364:	2308      	movs	r3, #8
 8001366:	e000      	b.n	800136a <rotary_read+0x7a>
 8001368:	2300      	movs	r3, #0
 800136a:	b2da      	uxtb	r2, r3
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4413      	add	r3, r2
 8001370:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 8001372:	79fb      	ldrb	r3, [r7, #7]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40020800 	.word	0x40020800
 8001380:	40020000 	.word	0x40020000

08001384 <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
    enter = 1;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <switch_set_enter+0x14>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	2000023e 	.word	0x2000023e

0800139c <switch_reset_enter>:

void switch_reset_enter()
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
    enter = 0;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <switch_reset_enter+0x14>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	2000023e 	.word	0x2000023e

080013b4 <switch_init>:

void switch_init()
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
    switch_reset_enter();
 80013b8:	f7ff fff0 	bl	800139c <switch_reset_enter>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <switch_read_enter>:

uint8_t switch_read_enter()
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
    return enter;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <switch_read_enter+0x14>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	2000023e 	.word	0x2000023e

080013d8 <switch1_read>:

uint8_t switch1_read()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) ? 0 : 1;
 80013dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <switch1_read+0x20>)
 80013e2:	f004 fafb 	bl	80059dc <HAL_GPIO_ReadPin>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf0c      	ite	eq
 80013ec:	2301      	moveq	r3, #1
 80013ee:	2300      	movne	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020800 	.word	0x40020800

080013fc <switch2_read>:

uint8_t switch2_read()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) ? 0 : 1;
 8001400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <switch2_read+0x20>)
 8001406:	f004 fae9 	bl	80059dc <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40020800 	.word	0x40020800

08001420 <switch_read>:

uint8_t switch_read()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 800142a:	f7ff ffd5 	bl	80013d8 <switch1_read>
 800142e:	4603      	mov	r3, r0
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	b2da      	uxtb	r2, r3
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4413      	add	r3, r2
 8001438:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 800143a:	f7ff ffdf 	bl	80013fc <switch2_read>
 800143e:	4603      	mov	r3, r0
 8001440:	b2da      	uxtb	r2, r3
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4413      	add	r3, r2
 8001446:	71fb      	strb	r3, [r7, #7]

    return value_;
 8001448:	79fb      	ldrb	r3, [r7, #7]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <switch_enter>:

void switch_enter()
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 8001456:	f7ff ffe3 	bl	8001420 <switch_read>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d102      	bne.n	8001466 <switch_enter+0x14>
    {
        switch_reset_enter();
 8001460:	f7ff ff9c 	bl	800139c <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 8001464:	e006      	b.n	8001474 <switch_enter+0x22>
    else if(switch_read() == 0b10)
 8001466:	f7ff ffdb 	bl	8001420 <switch_read>
 800146a:	4603      	mov	r3, r0
 800146c:	2b02      	cmp	r3, #2
 800146e:	d101      	bne.n	8001474 <switch_enter+0x22>
        switch_set_enter();
 8001470:	f7ff ff88 	bl	8001384 <switch_set_enter>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <analog_print_max>:
	printf("%4d, %4d | %4d, %4d\r\n", analog[12], analog[14], analog[15], analog[13]);
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog[0], analog[2], analog[4], analog[6], analog[8], analog[10], analog[11], analog[9], analog[7], analog[5], analog[3], analog[1]);
}

void analog_print_max()
{
 8001478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800147c:	b08c      	sub	sp, #48	; 0x30
 800147e:	af0a      	add	r7, sp, #40	; 0x28
	printf(ESC_RED);
 8001480:	482a      	ldr	r0, [pc, #168]	; (800152c <analog_print_max+0xb4>)
 8001482:	f008 f8af 	bl	80095e4 <iprintf>
	printf("analog_print_max\r\n");
 8001486:	482a      	ldr	r0, [pc, #168]	; (8001530 <analog_print_max+0xb8>)
 8001488:	f008 f932 	bl	80096f0 <puts>
	printf("\x1b[23C");	// Cursor move right *24
 800148c:	4829      	ldr	r0, [pc, #164]	; (8001534 <analog_print_max+0xbc>)
 800148e:	f008 f8a9 	bl	80095e4 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", analogmax[12], analogmax[14], analogmax[15], analogmax[13]);
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <analog_print_max+0xc0>)
 8001494:	8b1b      	ldrh	r3, [r3, #24]
 8001496:	4619      	mov	r1, r3
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <analog_print_max+0xc0>)
 800149a:	8b9b      	ldrh	r3, [r3, #28]
 800149c:	461a      	mov	r2, r3
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <analog_print_max+0xc0>)
 80014a0:	8bdb      	ldrh	r3, [r3, #30]
 80014a2:	4618      	mov	r0, r3
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <analog_print_max+0xc0>)
 80014a6:	8b5b      	ldrh	r3, [r3, #26]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	4603      	mov	r3, r0
 80014ac:	4823      	ldr	r0, [pc, #140]	; (800153c <analog_print_max+0xc4>)
 80014ae:	f008 f899 	bl	80095e4 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analogmax[0], analogmax[2], analogmax[4], analogmax[6], analogmax[8], analogmax[10], analogmax[11], analogmax[9], analogmax[7], analogmax[5], analogmax[3], analogmax[1]);
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <analog_print_max+0xc0>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	469c      	mov	ip, r3
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <analog_print_max+0xc0>)
 80014ba:	889b      	ldrh	r3, [r3, #4]
 80014bc:	469e      	mov	lr, r3
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <analog_print_max+0xc0>)
 80014c0:	891b      	ldrh	r3, [r3, #8]
 80014c2:	4698      	mov	r8, r3
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <analog_print_max+0xc0>)
 80014c6:	899b      	ldrh	r3, [r3, #12]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <analog_print_max+0xc0>)
 80014cc:	8a1b      	ldrh	r3, [r3, #16]
 80014ce:	4619      	mov	r1, r3
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <analog_print_max+0xc0>)
 80014d2:	8a9b      	ldrh	r3, [r3, #20]
 80014d4:	4618      	mov	r0, r3
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <analog_print_max+0xc0>)
 80014d8:	8adb      	ldrh	r3, [r3, #22]
 80014da:	461c      	mov	r4, r3
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <analog_print_max+0xc0>)
 80014de:	8a5b      	ldrh	r3, [r3, #18]
 80014e0:	461d      	mov	r5, r3
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <analog_print_max+0xc0>)
 80014e4:	89db      	ldrh	r3, [r3, #14]
 80014e6:	461e      	mov	r6, r3
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <analog_print_max+0xc0>)
 80014ea:	895b      	ldrh	r3, [r3, #10]
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <analog_print_max+0xc0>)
 80014f0:	88db      	ldrh	r3, [r3, #6]
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <analog_print_max+0xc0>)
 80014f6:	885b      	ldrh	r3, [r3, #2]
 80014f8:	9308      	str	r3, [sp, #32]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	9307      	str	r3, [sp, #28]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	9306      	str	r3, [sp, #24]
 8001502:	9605      	str	r6, [sp, #20]
 8001504:	9504      	str	r5, [sp, #16]
 8001506:	9403      	str	r4, [sp, #12]
 8001508:	9002      	str	r0, [sp, #8]
 800150a:	9101      	str	r1, [sp, #4]
 800150c:	9200      	str	r2, [sp, #0]
 800150e:	4643      	mov	r3, r8
 8001510:	4672      	mov	r2, lr
 8001512:	4661      	mov	r1, ip
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <analog_print_max+0xc8>)
 8001516:	f008 f865 	bl	80095e4 <iprintf>
	printf(ESC_DEF);
 800151a:	480a      	ldr	r0, [pc, #40]	; (8001544 <analog_print_max+0xcc>)
 800151c:	f008 f862 	bl	80095e4 <iprintf>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800152a:	bf00      	nop
 800152c:	0800d2c8 	.word	0x0800d2c8
 8001530:	0800d2d0 	.word	0x0800d2d0
 8001534:	0800d268 	.word	0x0800d268
 8001538:	200002c8 	.word	0x200002c8
 800153c:	0800d270 	.word	0x0800d270
 8001540:	0800d288 	.word	0x0800d288
 8001544:	0800d2e4 	.word	0x0800d2e4

08001548 <analog_print_min>:

void analog_print_min()
{
 8001548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800154c:	b08c      	sub	sp, #48	; 0x30
 800154e:	af0a      	add	r7, sp, #40	; 0x28
	printf(ESC_CYA);
 8001550:	482a      	ldr	r0, [pc, #168]	; (80015fc <analog_print_min+0xb4>)
 8001552:	f008 f847 	bl	80095e4 <iprintf>
	printf("analog_print_min\r\n");
 8001556:	482a      	ldr	r0, [pc, #168]	; (8001600 <analog_print_min+0xb8>)
 8001558:	f008 f8ca 	bl	80096f0 <puts>
	printf("\x1b[23C");	// Cursor move right *24
 800155c:	4829      	ldr	r0, [pc, #164]	; (8001604 <analog_print_min+0xbc>)
 800155e:	f008 f841 	bl	80095e4 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", analogmin[12], analogmin[14], analogmin[15], analogmin[13]);
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <analog_print_min+0xc0>)
 8001564:	8b1b      	ldrh	r3, [r3, #24]
 8001566:	4619      	mov	r1, r3
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <analog_print_min+0xc0>)
 800156a:	8b9b      	ldrh	r3, [r3, #28]
 800156c:	461a      	mov	r2, r3
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <analog_print_min+0xc0>)
 8001570:	8bdb      	ldrh	r3, [r3, #30]
 8001572:	4618      	mov	r0, r3
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <analog_print_min+0xc0>)
 8001576:	8b5b      	ldrh	r3, [r3, #26]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4603      	mov	r3, r0
 800157c:	4823      	ldr	r0, [pc, #140]	; (800160c <analog_print_min+0xc4>)
 800157e:	f008 f831 	bl	80095e4 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analogmin[0], analogmin[2], analogmin[4], analogmin[6], analogmin[8], analogmin[10], analogmin[11], analogmin[9], analogmin[7], analogmin[5], analogmin[3], analogmin[1]);
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <analog_print_min+0xc0>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	469c      	mov	ip, r3
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <analog_print_min+0xc0>)
 800158a:	889b      	ldrh	r3, [r3, #4]
 800158c:	469e      	mov	lr, r3
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <analog_print_min+0xc0>)
 8001590:	891b      	ldrh	r3, [r3, #8]
 8001592:	4698      	mov	r8, r3
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <analog_print_min+0xc0>)
 8001596:	899b      	ldrh	r3, [r3, #12]
 8001598:	461a      	mov	r2, r3
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <analog_print_min+0xc0>)
 800159c:	8a1b      	ldrh	r3, [r3, #16]
 800159e:	4619      	mov	r1, r3
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <analog_print_min+0xc0>)
 80015a2:	8a9b      	ldrh	r3, [r3, #20]
 80015a4:	4618      	mov	r0, r3
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <analog_print_min+0xc0>)
 80015a8:	8adb      	ldrh	r3, [r3, #22]
 80015aa:	461c      	mov	r4, r3
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <analog_print_min+0xc0>)
 80015ae:	8a5b      	ldrh	r3, [r3, #18]
 80015b0:	461d      	mov	r5, r3
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <analog_print_min+0xc0>)
 80015b4:	89db      	ldrh	r3, [r3, #14]
 80015b6:	461e      	mov	r6, r3
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <analog_print_min+0xc0>)
 80015ba:	895b      	ldrh	r3, [r3, #10]
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <analog_print_min+0xc0>)
 80015c0:	88db      	ldrh	r3, [r3, #6]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <analog_print_min+0xc0>)
 80015c6:	885b      	ldrh	r3, [r3, #2]
 80015c8:	9308      	str	r3, [sp, #32]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	9307      	str	r3, [sp, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	9306      	str	r3, [sp, #24]
 80015d2:	9605      	str	r6, [sp, #20]
 80015d4:	9504      	str	r5, [sp, #16]
 80015d6:	9403      	str	r4, [sp, #12]
 80015d8:	9002      	str	r0, [sp, #8]
 80015da:	9101      	str	r1, [sp, #4]
 80015dc:	9200      	str	r2, [sp, #0]
 80015de:	4643      	mov	r3, r8
 80015e0:	4672      	mov	r2, lr
 80015e2:	4661      	mov	r1, ip
 80015e4:	480a      	ldr	r0, [pc, #40]	; (8001610 <analog_print_min+0xc8>)
 80015e6:	f007 fffd 	bl	80095e4 <iprintf>
	printf(ESC_DEF);
 80015ea:	480a      	ldr	r0, [pc, #40]	; (8001614 <analog_print_min+0xcc>)
 80015ec:	f007 fffa 	bl	80095e4 <iprintf>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015fa:	bf00      	nop
 80015fc:	0800d2ec 	.word	0x0800d2ec
 8001600:	0800d2f4 	.word	0x0800d2f4
 8001604:	0800d268 	.word	0x0800d268
 8001608:	20000284 	.word	0x20000284
 800160c:	0800d270 	.word	0x0800d270
 8001610:	0800d288 	.word	0x0800d288
 8001614:	0800d2e4 	.word	0x0800d2e4

08001618 <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af02      	add	r7, sp, #8
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	printf("analog_set_on_flash()\r\n");
 8001622:	4819      	ldr	r0, [pc, #100]	; (8001688 <analog_set_on_flash+0x70>)
 8001624:	f008 f864 	bl	80096f0 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e024      	b.n	8001678 <analog_set_on_flash+0x60>
	{
		printf("analogmin[%2d] = %5d, analogmax[%2d] = %5d\r\n", i, analogmin[i], i, analogmax[i]);
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <analog_set_on_flash+0x74>)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001636:	4619      	mov	r1, r3
 8001638:	4a15      	ldr	r2, [pc, #84]	; (8001690 <analog_set_on_flash+0x78>)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	460a      	mov	r2, r1
 8001646:	68f9      	ldr	r1, [r7, #12]
 8001648:	4812      	ldr	r0, [pc, #72]	; (8001694 <analog_set_on_flash+0x7c>)
 800164a:	f007 ffcb 	bl	80095e4 <iprintf>
		*(analogmin_ + i) = analogmin[i];
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	490d      	ldr	r1, [pc, #52]	; (800168c <analog_set_on_flash+0x74>)
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800165e:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4909      	ldr	r1, [pc, #36]	; (8001690 <analog_set_on_flash+0x78>)
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001670:	801a      	strh	r2, [r3, #0]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	d9d7      	bls.n	800162e <analog_set_on_flash+0x16>
	}
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	0800d308 	.word	0x0800d308
 800168c:	20000284 	.word	0x20000284
 8001690:	200002c8 	.word	0x200002c8
 8001694:	0800d320 	.word	0x0800d320

08001698 <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	printf("analog_set_from_flash()\r\n");
 80016a2:	4811      	ldr	r0, [pc, #68]	; (80016e8 <analog_set_from_flash+0x50>)
 80016a4:	f008 f824 	bl	80096f0 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	e014      	b.n	80016d8 <analog_set_from_flash+0x40>
	{
		analogmin[i] = *(analogmin_ + i);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	8819      	ldrh	r1, [r3, #0]
 80016b8:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <analog_set_from_flash+0x54>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	8819      	ldrh	r1, [r3, #0]
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <analog_set_from_flash+0x58>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3301      	adds	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	d9e7      	bls.n	80016ae <analog_set_from_flash+0x16>
	}
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	0800d350 	.word	0x0800d350
 80016ec:	20000284 	.word	0x20000284
 80016f0:	200002c8 	.word	0x200002c8

080016f4 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <analog_set_calibrationsize+0x1c>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	7013      	strb	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	200002a5 	.word	0x200002a5

08001714 <analog_read_calibrationsize>:

uint8_t analog_read_calibrationsize()
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
	return calibrationsize;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <analog_read_calibrationsize+0x14>)
 800171a:	781b      	ldrb	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	200002a5 	.word	0x200002a5

0800172c <analog_calibration_start>:

void analog_calibration_start()
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
	analogmode = calibrating;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <analog_calibration_start+0x40>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001738:	2300      	movs	r3, #0
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	e00d      	b.n	800175a <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <analog_calibration_start+0x44>)
 8001742:	2100      	movs	r1, #0
 8001744:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <analog_calibration_start+0x48>)
 800174c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001750:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	3301      	adds	r3, #1
 8001758:	71fb      	strb	r3, [r7, #7]
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d9ee      	bls.n	800173e <analog_calibration_start+0x12>
    }
	analog_sensor_start();
 8001760:	f000 f838 	bl	80017d4 <analog_sensor_start>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200002a4 	.word	0x200002a4
 8001770:	200002c8 	.word	0x200002c8
 8001774:	20000284 	.word	0x20000284

08001778 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analogmode = all;
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <analog_calibration_stop+0x1c>)
 800177e:	2210      	movs	r2, #16
 8001780:	701a      	strb	r2, [r3, #0]
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001782:	f000 f821 	bl	80017c8 <analog_stop>
	analog_print_max();
 8001786:	f7ff fe77 	bl	8001478 <analog_print_max>
	analog_print_min();
 800178a:	f7ff fedd 	bl	8001548 <analog_print_min>
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200002a4 	.word	0x200002a4

08001798 <analog_init>:

void analog_init()
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 800179c:	2010      	movs	r0, #16
 800179e:	f7ff ffa9 	bl	80016f4 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <analog_init+0x20>)
 80017a4:	f002 fe58 	bl	8004458 <HAL_ADC_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <analog_init+0x1a>
    {
        Error_Handler();
 80017ae:	f001 f8d1 	bl	8002954 <Error_Handler>
    }
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200004d4 	.word	0x200004d4

080017bc <analog_start>:

void analog_start()
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	analog_sensor_start();
 80017c0:	f000 f808 	bl	80017d4 <analog_sensor_start>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <analog_stop>:

void analog_stop()
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 80017cc:	f000 f81e 	bl	800180c <analog_sensor_stop>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <analog_sensor_start>:

void analog_sensor_start()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
    sensgettime = 0;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <analog_sensor_start+0x2c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE_MAX) != HAL_OK)
 80017de:	2210      	movs	r2, #16
 80017e0:	4908      	ldr	r1, [pc, #32]	; (8001804 <analog_sensor_start+0x30>)
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <analog_sensor_start+0x34>)
 80017e4:	f002 fe7c 	bl	80044e0 <HAL_ADC_Start_DMA>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <analog_sensor_start+0x1e>
    {
        Error_Handler();
 80017ee:	f001 f8b1 	bl	8002954 <Error_Handler>
    }
    HAL_Delay(1000);
 80017f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f6:	f002 fe0b 	bl	8004410 <HAL_Delay>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000260 	.word	0x20000260
 8001804:	20000264 	.word	0x20000264
 8001808:	200004d4 	.word	0x200004d4

0800180c <analog_sensor_stop>:

void analog_sensor_stop()
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <analog_sensor_stop+0x10>)
 8001812:	f002 ff57 	bl	80046c4 <HAL_ADC_Stop_DMA>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200004d4 	.word	0x200004d4

08001820 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	analograte[i] = ((analog[i] - analogmin[i]) * 1000) / (analogmax[i] - analogmin[i]);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4a13      	ldr	r2, [pc, #76]	; (800187c <analog_sensor_get+0x5c>)
 800182e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001832:	4619      	mov	r1, r3
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <analog_sensor_get+0x60>)
 8001838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800183c:	1acb      	subs	r3, r1, r3
 800183e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001842:	fb02 f203 	mul.w	r2, r2, r3
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	490e      	ldr	r1, [pc, #56]	; (8001884 <analog_sensor_get+0x64>)
 800184a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800184e:	4618      	mov	r0, r3
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	490b      	ldr	r1, [pc, #44]	; (8001880 <analog_sensor_get+0x60>)
 8001854:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001858:	1ac3      	subs	r3, r0, r3
 800185a:	fb92 f2f3 	sdiv	r2, r2, r3
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	b291      	uxth	r1, r2
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <analog_sensor_get+0x68>)
 8001864:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500);
#endif
	return analograte[i];
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <analog_sensor_get+0x68>)
 800186c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	20000240 	.word	0x20000240
 8001880:	20000284 	.word	0x20000284
 8001884:	200002c8 	.word	0x200002c8
 8001888:	200002a8 	.word	0x200002a8

0800188c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 800188c:	b490      	push	{r4, r7}
 800188e:	b0cc      	sub	sp, #304	; 0x130
 8001890:	af00      	add	r7, sp, #0
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	6018      	str	r0, [r3, #0]
	uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001896:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b08      	cmp	r3, #8
 800189c:	f240 8093 	bls.w	80019c6 <HAL_ADC_ConvCpltCallback+0x13a>
    {
		sensgettime = 0;
 80018a0:	4b5d      	ldr	r3, [pc, #372]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x18c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE_MAX; index++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80018ac:	e086      	b.n	80019bc <HAL_ADC_ConvCpltCallback+0x130>
        {
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80018b4:	e042      	b.n	800193c <HAL_ADC_ConvCpltCallback+0xb0>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 80018bc:	e033      	b.n	8001926 <HAL_ADC_ConvCpltCallback+0x9a>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 80018be:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80018c2:	1e59      	subs	r1, r3, #1
 80018c4:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	0109      	lsls	r1, r1, #4
 80018ce:	440a      	add	r2, r1
 80018d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018d4:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 80018d8:	f897 412d 	ldrb.w	r4, [r7, #301]	; 0x12d
 80018dc:	f897 012f 	ldrb.w	r0, [r7, #303]	; 0x12f
 80018e0:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80018e4:	1e59      	subs	r1, r3, #1
 80018e6:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	0124      	lsls	r4, r4, #4
 80018f0:	4420      	add	r0, r4
 80018f2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	0109      	lsls	r1, r1, #4
 80018fc:	440a      	add	r2, r1
 80018fe:	4601      	mov	r1, r0
 8001900:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001904:	f897 112d 	ldrb.w	r1, [r7, #301]	; 0x12d
 8001908:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	0109      	lsls	r1, r1, #4
 8001912:	440a      	add	r2, r1
 8001914:	f8b7 1128 	ldrh.w	r1, [r7, #296]	; 0x128
 8001918:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 800191c:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001920:	3b01      	subs	r3, #1
 8001922:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 8001926:	f897 212d 	ldrb.w	r2, [r7, #301]	; 0x12d
 800192a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800192e:	429a      	cmp	r2, r3
 8001930:	d8c5      	bhi.n	80018be <HAL_ADC_ConvCpltCallback+0x32>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001932:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8001936:	3301      	adds	r3, #1
 8001938:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 800193c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8001940:	2b08      	cmp	r3, #8
 8001942:	d9b8      	bls.n	80018b6 <HAL_ADC_ConvCpltCallback+0x2a>
				}
			}

			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001944:	f897 112f 	ldrb.w	r1, [r7, #303]	; 0x12f
 8001948:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800194c:	f107 0208 	add.w	r2, r7, #8
 8001950:	3140      	adds	r1, #64	; 0x40
 8001952:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001956:	4a31      	ldr	r2, [pc, #196]	; (8001a1c <HAL_ADC_ConvCpltCallback+0x190>)
 8001958:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			// get maxvalue and minimumvalue
			uint16_t analogbuf;
			analogbuf = analog[index];
 800195c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001960:	4a2e      	ldr	r2, [pc, #184]	; (8001a1c <HAL_ADC_ConvCpltCallback+0x190>)
 8001962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001966:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
			if(analogmode == calibrating)
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x194>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11f      	bne.n	80019b2 <HAL_ADC_ConvCpltCallback+0x126>
			{
				analogmax[index] = (analogmax[index] < analogbuf) ? analogbuf : analogmax[index];
 8001972:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001976:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <HAL_ADC_ConvCpltCallback+0x198>)
 8001978:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800197c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001980:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 8001984:	428a      	cmp	r2, r1
 8001986:	bf38      	it	cc
 8001988:	460a      	movcc	r2, r1
 800198a:	b291      	uxth	r1, r2
 800198c:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <HAL_ADC_ConvCpltCallback+0x198>)
 800198e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				analogmin[index] = (analogmin[index] > analogbuf) ? analogbuf : analogmin[index];
 8001992:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001996:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001998:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800199c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80019a0:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 80019a4:	428a      	cmp	r2, r1
 80019a6:	bf28      	it	cs
 80019a8:	460a      	movcs	r2, r1
 80019aa:	b291      	uxth	r1, r2
 80019ac:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x19c>)
 80019ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE_MAX; index++)
 80019b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80019b6:	3301      	adds	r3, #1
 80019b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80019bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	f67f af74 	bls.w	80018ae <HAL_ADC_ConvCpltCallback+0x22>
			}
		}
	}

    /* sensorget */
	for(unsigned char index = 0; CALIBRATIONSIZE_MAX > index; index++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 80019cc:	e014      	b.n	80019f8 <HAL_ADC_ConvCpltCallback+0x16c>
    {
		analogbuffers[sensgettime][index] = analograw[index];
 80019ce:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80019d2:	4a11      	ldr	r2, [pc, #68]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x18c>)
 80019d4:	6811      	ldr	r1, [r2, #0]
 80019d6:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <HAL_ADC_ConvCpltCallback+0x1a0>)
 80019dc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	0109      	lsls	r1, r1, #4
 80019e6:	440a      	add	r2, r1
 80019e8:	4601      	mov	r1, r0
 80019ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE_MAX > index; index++)
 80019ee:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80019f2:	3301      	adds	r3, #1
 80019f4:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 80019f8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d9e6      	bls.n	80019ce <HAL_ADC_ConvCpltCallback+0x142>
	}
	sensgettime++;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001a08:	6013      	str	r3, [r2, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc90      	pop	{r4, r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000260 	.word	0x20000260
 8001a1c:	20000240 	.word	0x20000240
 8001a20:	200002a4 	.word	0x200002a4
 8001a24:	200002c8 	.word	0x200002c8
 8001a28:	20000284 	.word	0x20000284
 8001a2c:	20000264 	.word	0x20000264

08001a30 <encoder_init>:
/* encoders are updated only in encoder file. */
double encoder_left, encoder_right, encoder;

/* private */
void encoder_init()
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
    LENGTHPERPULSE = M_PI * TIREDIAMETER * PINION / (double) PULSEPERROTATE / (double) SUPER;
 8001a34:	4908      	ldr	r1, [pc, #32]	; (8001a58 <encoder_init+0x28>)
 8001a36:	a306      	add	r3, pc, #24	; (adr r3, 8001a50 <encoder_init+0x20>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	f3af 8000 	nop.w
 8001a50:	24a478cb 	.word	0x24a478cb
 8001a54:	40192ab8 	.word	0x40192ab8
 8001a58:	20000300 	.word	0x20000300

08001a5c <encoder_set_middle>:
    encoder_stop();
}

/* private */
void encoder_set_middle()
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <encoder_set_middle+0x20>)
 8001a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2 -> CNT = ENCODER_MIDDLE;
 8001a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40010000 	.word	0x40010000

08001a80 <encoder_start>:

void encoder_start()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
    encoder_set_middle();
 8001a84:	f7ff ffea 	bl	8001a5c <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001a88:	213c      	movs	r1, #60	; 0x3c
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <encoder_start+0x24>)
 8001a8c:	f005 fca8 	bl	80073e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a90:	213c      	movs	r1, #60	; 0x3c
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <encoder_start+0x28>)
 8001a94:	f005 fca4 	bl	80073e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <encoder_start+0x2c>)
 8001a9a:	f005 fafe 	bl	800709a <HAL_TIM_Base_Start_IT>
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200005fc 	.word	0x200005fc
 8001aa8:	20000494 	.word	0x20000494
 8001aac:	20000454 	.word	0x20000454

08001ab0 <encoder_stop>:

void encoder_stop()
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001ab4:	213c      	movs	r1, #60	; 0x3c
 8001ab6:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <encoder_stop+0x18>)
 8001ab8:	f005 fcca 	bl	8007450 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001abc:	213c      	movs	r1, #60	; 0x3c
 8001abe:	4803      	ldr	r0, [pc, #12]	; (8001acc <encoder_stop+0x1c>)
 8001ac0:	f005 fcc6 	bl	8007450 <HAL_TIM_Encoder_Stop>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200005fc 	.word	0x200005fc
 8001acc:	20000494 	.word	0x20000494

08001ad0 <encoder_read>:

double encoder_read()
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
    return encoder;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <encoder_read+0x20>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ade:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae2:	eef0 0a67 	vmov.f32	s1, s15
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200002f0 	.word	0x200002f0

08001af4 <encoder_read_left>:

double encoder_read_left()
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
    return encoder_left;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <encoder_read_left+0x20>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b02:	eeb0 0a47 	vmov.f32	s0, s14
 8001b06:	eef0 0a67 	vmov.f32	s1, s15
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	200002e8 	.word	0x200002e8

08001b18 <encoder_read_right>:

double encoder_read_right()
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
    return encoder_right;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <encoder_read_right+0x20>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b26:	eeb0 0a47 	vmov.f32	s0, s14
 8001b2a:	eef0 0a67 	vmov.f32	s1, s15
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	200002f8 	.word	0x200002f8

08001b3c <encoder_set>:

/* only read tim10_main */
void encoder_set()
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <encoder_set+0x6c>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcdb 	bl	8000504 <__aeabi_ui2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4916      	ldr	r1, [pc, #88]	; (8001bac <encoder_set+0x70>)
 8001b54:	e9c1 2300 	strd	r2, r3, [r1]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <encoder_set+0x74>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fccf 	bl	8000504 <__aeabi_ui2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4912      	ldr	r1, [pc, #72]	; (8001bb4 <encoder_set+0x78>)
 8001b6c:	e9c1 2300 	strd	r2, r3, [r1]
    encoder = (encoder_left + encoder_right) / 2;
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <encoder_set+0x70>)
 8001b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <encoder_set+0x78>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	f7fe fb86 	bl	800028c <__adddf3>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b90:	f7fe fe5c 	bl	800084c <__aeabi_ddiv>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4907      	ldr	r1, [pc, #28]	; (8001bb8 <encoder_set+0x7c>)
 8001b9a:	e9c1 2300 	strd	r2, r3, [r1]

    encoder_set_middle();
 8001b9e:	f7ff ff5d 	bl	8001a5c <encoder_set_middle>
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	200002e8 	.word	0x200002e8
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	200002f8 	.word	0x200002f8
 8001bb8:	200002f0 	.word	0x200002f0

08001bbc <HAL_TIM_PeriodElapsedCallback>:
static void MX_I2C1_Init(void);
static void MX_TIM14_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    tim6_main();
 8001bce:	f001 ff77 	bl	8003ac0 <tim6_main>
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
    tim10_main();
 8001bdc:	f001 fe74 	bl	80038c8 <tim10_main>
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    tim11_main();
 8001bea:	f001 ff21 	bl	8003a30 <tim11_main>
	}
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40001000 	.word	0x40001000
 8001bfc:	40014400 	.word	0x40014400
 8001c00:	40014800 	.word	0x40014800

08001c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c08:	f002 fb90 	bl	800432c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0c:	f000 f986 	bl	8001f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c10:	f000 fd72 	bl	80026f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c14:	f000 fd50 	bl	80026b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c18:	f000 f9ea 	bl	8001ff0 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8001c1c:	f000 fd22 	bl	8002664 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8001c20:	f000 fc7e 	bl	8002520 <MX_TIM6_Init>
  MX_TIM4_Init();
 8001c24:	f000 fc18 	bl	8002458 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001c28:	f000 fb6a 	bl	8002300 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001c2c:	f000 fbc0 	bl	80023b0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8001c30:	f000 fcac 	bl	800258c <MX_TIM10_Init>
  MX_TIM11_Init();
 8001c34:	f000 fcce 	bl	80025d4 <MX_TIM11_Init>
  MX_SPI2_Init();
 8001c38:	f000 fb2c 	bl	8002294 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001c3c:	f000 fafc 	bl	8002238 <MX_I2C1_Init>
  MX_TIM14_Init();
 8001c40:	f000 fcec 	bl	800261c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8001c44:	48b1      	ldr	r0, [pc, #708]	; (8001f0c <main+0x308>)
 8001c46:	f007 fccd 	bl	80095e4 <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8001c4a:	48b1      	ldr	r0, [pc, #708]	; (8001f10 <main+0x30c>)
 8001c4c:	f007 fd50 	bl	80096f0 <puts>

  main_init();
 8001c50:	f000 fe3c 	bl	80028cc <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    print_while();
 8001c54:	f000 ff7c 	bl	8002b50 <print_while>

		if(switch_read_enter())
 8001c58:	f7ff fbb2 	bl	80013c0 <switch_read_enter>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8149 	beq.w	8001ef6 <main+0x2f2>
		{
			switch(rotary_read())
 8001c64:	f7ff fb44 	bl	80012f0 <rotary_read>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	f200 8145 	bhi.w	8001efa <main+0x2f6>
 8001c70:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <main+0x74>)
 8001c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c76:	bf00      	nop
 8001c78:	08001cb9 	.word	0x08001cb9
 8001c7c:	08001d0b 	.word	0x08001d0b
 8001c80:	08001d2d 	.word	0x08001d2d
 8001c84:	08001d4d 	.word	0x08001d4d
 8001c88:	08001d6d 	.word	0x08001d6d
 8001c8c:	08001d8d 	.word	0x08001d8d
 8001c90:	08001dad 	.word	0x08001dad
 8001c94:	08001dcd 	.word	0x08001dcd
 8001c98:	08001ded 	.word	0x08001ded
 8001c9c:	08001e0d 	.word	0x08001e0d
 8001ca0:	08001e2d 	.word	0x08001e2d
 8001ca4:	08001e4d 	.word	0x08001e4d
 8001ca8:	08001e6d 	.word	0x08001e6d
 8001cac:	08001e8d 	.word	0x08001e8d
 8001cb0:	08001ead 	.word	0x08001ead
 8001cb4:	08001ecd 	.word	0x08001ecd
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8001cb8:	f7ff faf6 	bl	80012a8 <rotary_read_playmode>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d113      	bne.n	8001cea <main+0xe6>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 8001cc2:	f7ff fd33 	bl	800172c <analog_calibration_start>

            while(switch_read_enter())
 8001cc6:	e004      	b.n	8001cd2 <main+0xce>
            {
              d_print();
 8001cc8:	f000 ff3c 	bl	8002b44 <d_print>
              HAL_Delay(100);
 8001ccc:	2064      	movs	r0, #100	; 0x64
 8001cce:	f002 fb9f 	bl	8004410 <HAL_Delay>
            while(switch_read_enter())
 8001cd2:	f7ff fb75 	bl	80013c0 <switch_read_enter>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f5      	bne.n	8001cc8 <main+0xc4>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 8001cdc:	f7ff fd4c 	bl	8001778 <analog_calibration_stop>
            /* flashbuffer.analogmin/max = analogmin/max */
            analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8001ce0:	498c      	ldr	r1, [pc, #560]	; (8001f14 <main+0x310>)
 8001ce2:	488d      	ldr	r0, [pc, #564]	; (8001f18 <main+0x314>)
 8001ce4:	f7ff fc98 	bl	8001618 <analog_set_on_flash>
              HAL_Delay(250);
            }

            running_stop();
          }
          break;	// case 0x00:
 8001ce8:	e10a      	b.n	8001f00 <main+0x2fc>
            running_start();
 8001cea:	f000 fdfb 	bl	80028e4 <running_start>
            while(switch_read_enter())
 8001cee:	e004      	b.n	8001cfa <main+0xf6>
              d_print();
 8001cf0:	f000 ff28 	bl	8002b44 <d_print>
              HAL_Delay(250);
 8001cf4:	20fa      	movs	r0, #250	; 0xfa
 8001cf6:	f002 fb8b 	bl	8004410 <HAL_Delay>
            while(switch_read_enter())
 8001cfa:	f7ff fb61 	bl	80013c0 <switch_read_enter>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f5      	bne.n	8001cf0 <main+0xec>
            running_stop();
 8001d04:	f000 fdf6 	bl	80028f4 <running_stop>
          break;	// case 0x00:
 8001d08:	e0fa      	b.n	8001f00 <main+0x2fc>
        case 0x01:	// 1
          running_start();
 8001d0a:	f000 fdeb 	bl	80028e4 <running_start>

          while (switch_read_enter())
 8001d0e:	e005      	b.n	8001d1c <main+0x118>
          {
            d_print();
 8001d10:	f000 ff18 	bl	8002b44 <d_print>
            HAL_Delay(500);
 8001d14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d18:	f002 fb7a 	bl	8004410 <HAL_Delay>
          while (switch_read_enter())
 8001d1c:	f7ff fb50 	bl	80013c0 <switch_read_enter>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f4      	bne.n	8001d10 <main+0x10c>
          }

          running_stop();
 8001d26:	f000 fde5 	bl	80028f4 <running_stop>
          break;
 8001d2a:	e0e9      	b.n	8001f00 <main+0x2fc>
        case 0x02:	// 2
          running_start();
 8001d2c:	f000 fdda 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001d30:	e004      	b.n	8001d3c <main+0x138>
          {
            d_print();
 8001d32:	f000 ff07 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001d36:	20fa      	movs	r0, #250	; 0xfa
 8001d38:	f002 fb6a 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001d3c:	f7ff fb40 	bl	80013c0 <switch_read_enter>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f5      	bne.n	8001d32 <main+0x12e>
          }

          running_stop();
 8001d46:	f000 fdd5 	bl	80028f4 <running_stop>
          break;
 8001d4a:	e0d9      	b.n	8001f00 <main+0x2fc>
        case 0x03:	// 3
          running_start();
 8001d4c:	f000 fdca 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001d50:	e004      	b.n	8001d5c <main+0x158>
          {
            d_print();
 8001d52:	f000 fef7 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001d56:	20fa      	movs	r0, #250	; 0xfa
 8001d58:	f002 fb5a 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001d5c:	f7ff fb30 	bl	80013c0 <switch_read_enter>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f5      	bne.n	8001d52 <main+0x14e>
          }

          running_stop();
 8001d66:	f000 fdc5 	bl	80028f4 <running_stop>
          break;
 8001d6a:	e0c9      	b.n	8001f00 <main+0x2fc>
        case 0x04:	// 4
          running_start();
 8001d6c:	f000 fdba 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001d70:	e004      	b.n	8001d7c <main+0x178>
          {
            d_print();
 8001d72:	f000 fee7 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001d76:	20fa      	movs	r0, #250	; 0xfa
 8001d78:	f002 fb4a 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001d7c:	f7ff fb20 	bl	80013c0 <switch_read_enter>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f5      	bne.n	8001d72 <main+0x16e>
          }

          running_stop();
 8001d86:	f000 fdb5 	bl	80028f4 <running_stop>
          break;
 8001d8a:	e0b9      	b.n	8001f00 <main+0x2fc>
        case 0x05:	// 5
          running_start();
 8001d8c:	f000 fdaa 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001d90:	e004      	b.n	8001d9c <main+0x198>
          {
            d_print();
 8001d92:	f000 fed7 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001d96:	20fa      	movs	r0, #250	; 0xfa
 8001d98:	f002 fb3a 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001d9c:	f7ff fb10 	bl	80013c0 <switch_read_enter>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f5      	bne.n	8001d92 <main+0x18e>
          }

          running_stop();
 8001da6:	f000 fda5 	bl	80028f4 <running_stop>
          break;
 8001daa:	e0a9      	b.n	8001f00 <main+0x2fc>
        case 0x06:	// 6
          running_start();
 8001dac:	f000 fd9a 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001db0:	e004      	b.n	8001dbc <main+0x1b8>
          {
            d_print();
 8001db2:	f000 fec7 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001db6:	20fa      	movs	r0, #250	; 0xfa
 8001db8:	f002 fb2a 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001dbc:	f7ff fb00 	bl	80013c0 <switch_read_enter>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f5      	bne.n	8001db2 <main+0x1ae>
          }

          running_stop();
 8001dc6:	f000 fd95 	bl	80028f4 <running_stop>
          break;
 8001dca:	e099      	b.n	8001f00 <main+0x2fc>
        case 0x07:	// 7
          running_start();
 8001dcc:	f000 fd8a 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001dd0:	e004      	b.n	8001ddc <main+0x1d8>
          {
            d_print();
 8001dd2:	f000 feb7 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001dd6:	20fa      	movs	r0, #250	; 0xfa
 8001dd8:	f002 fb1a 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001ddc:	f7ff faf0 	bl	80013c0 <switch_read_enter>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f5      	bne.n	8001dd2 <main+0x1ce>
          }

          running_stop();
 8001de6:	f000 fd85 	bl	80028f4 <running_stop>
          break;
 8001dea:	e089      	b.n	8001f00 <main+0x2fc>
        case 0x08:	// 8
          running_start();
 8001dec:	f000 fd7a 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001df0:	e004      	b.n	8001dfc <main+0x1f8>
          {
            d_print();
 8001df2:	f000 fea7 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001df6:	20fa      	movs	r0, #250	; 0xfa
 8001df8:	f002 fb0a 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001dfc:	f7ff fae0 	bl	80013c0 <switch_read_enter>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f5      	bne.n	8001df2 <main+0x1ee>
          }

          running_stop();
 8001e06:	f000 fd75 	bl	80028f4 <running_stop>
          break;
 8001e0a:	e079      	b.n	8001f00 <main+0x2fc>
        case 0x09:	// 9
          running_start();
 8001e0c:	f000 fd6a 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001e10:	e004      	b.n	8001e1c <main+0x218>
          {
            d_print();
 8001e12:	f000 fe97 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001e16:	20fa      	movs	r0, #250	; 0xfa
 8001e18:	f002 fafa 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001e1c:	f7ff fad0 	bl	80013c0 <switch_read_enter>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f5      	bne.n	8001e12 <main+0x20e>
          }

          running_stop();
 8001e26:	f000 fd65 	bl	80028f4 <running_stop>
          break;
 8001e2a:	e069      	b.n	8001f00 <main+0x2fc>
        case 0x0A:	// A
          running_start();
 8001e2c:	f000 fd5a 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001e30:	e004      	b.n	8001e3c <main+0x238>
          {
            d_print();
 8001e32:	f000 fe87 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001e36:	20fa      	movs	r0, #250	; 0xfa
 8001e38:	f002 faea 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001e3c:	f7ff fac0 	bl	80013c0 <switch_read_enter>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f5      	bne.n	8001e32 <main+0x22e>
          }

          running_stop();
 8001e46:	f000 fd55 	bl	80028f4 <running_stop>
          break;
 8001e4a:	e059      	b.n	8001f00 <main+0x2fc>
        case 0x0B:	// B
          running_start();
 8001e4c:	f000 fd4a 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001e50:	e004      	b.n	8001e5c <main+0x258>
          {
            d_print();
 8001e52:	f000 fe77 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001e56:	20fa      	movs	r0, #250	; 0xfa
 8001e58:	f002 fada 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001e5c:	f7ff fab0 	bl	80013c0 <switch_read_enter>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f5      	bne.n	8001e52 <main+0x24e>
          }

          running_stop();
 8001e66:	f000 fd45 	bl	80028f4 <running_stop>
          break;
 8001e6a:	e049      	b.n	8001f00 <main+0x2fc>
        case 0x0C:	// C
          running_start();
 8001e6c:	f000 fd3a 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001e70:	e004      	b.n	8001e7c <main+0x278>
          {
            d_print();
 8001e72:	f000 fe67 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001e76:	20fa      	movs	r0, #250	; 0xfa
 8001e78:	f002 faca 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001e7c:	f7ff faa0 	bl	80013c0 <switch_read_enter>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f5      	bne.n	8001e72 <main+0x26e>
          }

          running_stop();
 8001e86:	f000 fd35 	bl	80028f4 <running_stop>
          break;
 8001e8a:	e039      	b.n	8001f00 <main+0x2fc>
        case 0x0D:	// D
          running_start();
 8001e8c:	f000 fd2a 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001e90:	e004      	b.n	8001e9c <main+0x298>
          {
            d_print();
 8001e92:	f000 fe57 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001e96:	20fa      	movs	r0, #250	; 0xfa
 8001e98:	f002 faba 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001e9c:	f7ff fa90 	bl	80013c0 <switch_read_enter>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f5      	bne.n	8001e92 <main+0x28e>
          }

          running_stop();
 8001ea6:	f000 fd25 	bl	80028f4 <running_stop>
          break;
 8001eaa:	e029      	b.n	8001f00 <main+0x2fc>
        case 0x0E:	// E
          running_start();
 8001eac:	f000 fd1a 	bl	80028e4 <running_start>

          while(switch_read_enter())
 8001eb0:	e004      	b.n	8001ebc <main+0x2b8>
          {
            d_print();
 8001eb2:	f000 fe47 	bl	8002b44 <d_print>
            HAL_Delay(250);
 8001eb6:	20fa      	movs	r0, #250	; 0xfa
 8001eb8:	f002 faaa 	bl	8004410 <HAL_Delay>
          while(switch_read_enter())
 8001ebc:	f7ff fa80 	bl	80013c0 <switch_read_enter>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f5      	bne.n	8001eb2 <main+0x2ae>
          }

          running_stop();
 8001ec6:	f000 fd15 	bl	80028f4 <running_stop>
          break;
 8001eca:	e019      	b.n	8001f00 <main+0x2fc>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 8001ecc:	f7ff f9ec 	bl	80012a8 <rotary_read_playmode>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	d013      	beq.n	8001efe <main+0x2fa>
          {
          }
          else    // if(!(rotary_read_playmode()== flash_print))
          {
            running_start();
 8001ed6:	f000 fd05 	bl	80028e4 <running_start>

            while(switch_read_enter())
 8001eda:	e004      	b.n	8001ee6 <main+0x2e2>
            {
              d_print();
 8001edc:	f000 fe32 	bl	8002b44 <d_print>
              HAL_Delay(250);
 8001ee0:	20fa      	movs	r0, #250	; 0xfa
 8001ee2:	f002 fa95 	bl	8004410 <HAL_Delay>
            while(switch_read_enter())
 8001ee6:	f7ff fa6b 	bl	80013c0 <switch_read_enter>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f5      	bne.n	8001edc <main+0x2d8>
            }

            running_stop();
 8001ef0:	f000 fd00 	bl	80028f4 <running_stop>
          }
          break;
 8001ef4:	e003      	b.n	8001efe <main+0x2fa>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 8001ef6:	bf00      	nop
 8001ef8:	e002      	b.n	8001f00 <main+0x2fc>
          break;
 8001efa:	bf00      	nop
 8001efc:	e000      	b.n	8001f00 <main+0x2fc>
          break;
 8001efe:	bf00      	nop
    HAL_Delay(500);
 8001f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f04:	f002 fa84 	bl	8004410 <HAL_Delay>
    print_while();
 8001f08:	e6a4      	b.n	8001c54 <main+0x50>
 8001f0a:	bf00      	nop
 8001f0c:	0800d36c 	.word	0x0800d36c
 8001f10:	0800d374 	.word	0x0800d374
 8001f14:	2000032a 	.word	0x2000032a
 8001f18:	2000030a 	.word	0x2000030a

08001f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b094      	sub	sp, #80	; 0x50
 8001f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	2230      	movs	r2, #48	; 0x30
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f006 fcd8 	bl	80088e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	4a27      	ldr	r2, [pc, #156]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <SystemClock_Config+0xd0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <SystemClock_Config+0xd0>)
 8001f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <SystemClock_Config+0xd0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f82:	2302      	movs	r3, #2
 8001f84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f90:	23a8      	movs	r3, #168	; 0xa8
 8001f92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fe91 	bl	8005cc8 <HAL_RCC_OscConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fac:	f000 fcd2 	bl	8002954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2105      	movs	r1, #5
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 f8ea 	bl	80061a8 <HAL_RCC_ClockConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fda:	f000 fcbb 	bl	8002954 <Error_Handler>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3750      	adds	r7, #80	; 0x50
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40007000 	.word	0x40007000

08001ff0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002002:	4b8a      	ldr	r3, [pc, #552]	; (800222c <MX_ADC1_Init+0x23c>)
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <MX_ADC1_Init+0x240>)
 8002006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002008:	4b88      	ldr	r3, [pc, #544]	; (800222c <MX_ADC1_Init+0x23c>)
 800200a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800200e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002010:	4b86      	ldr	r3, [pc, #536]	; (800222c <MX_ADC1_Init+0x23c>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002016:	4b85      	ldr	r3, [pc, #532]	; (800222c <MX_ADC1_Init+0x23c>)
 8002018:	2201      	movs	r2, #1
 800201a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800201c:	4b83      	ldr	r3, [pc, #524]	; (800222c <MX_ADC1_Init+0x23c>)
 800201e:	2201      	movs	r2, #1
 8002020:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002022:	4b82      	ldr	r3, [pc, #520]	; (800222c <MX_ADC1_Init+0x23c>)
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800202a:	4b80      	ldr	r3, [pc, #512]	; (800222c <MX_ADC1_Init+0x23c>)
 800202c:	2200      	movs	r2, #0
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002030:	4b7e      	ldr	r3, [pc, #504]	; (800222c <MX_ADC1_Init+0x23c>)
 8002032:	4a80      	ldr	r2, [pc, #512]	; (8002234 <MX_ADC1_Init+0x244>)
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002036:	4b7d      	ldr	r3, [pc, #500]	; (800222c <MX_ADC1_Init+0x23c>)
 8002038:	2200      	movs	r2, #0
 800203a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 800203c:	4b7b      	ldr	r3, [pc, #492]	; (800222c <MX_ADC1_Init+0x23c>)
 800203e:	2210      	movs	r2, #16
 8002040:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002042:	4b7a      	ldr	r3, [pc, #488]	; (800222c <MX_ADC1_Init+0x23c>)
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800204a:	4b78      	ldr	r3, [pc, #480]	; (800222c <MX_ADC1_Init+0x23c>)
 800204c:	2201      	movs	r2, #1
 800204e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002050:	4876      	ldr	r0, [pc, #472]	; (800222c <MX_ADC1_Init+0x23c>)
 8002052:	f002 fa01 	bl	8004458 <HAL_ADC_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800205c:	f000 fc7a 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002060:	2309      	movs	r3, #9
 8002062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002064:	2301      	movs	r3, #1
 8002066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002068:	2303      	movs	r3, #3
 800206a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	4619      	mov	r1, r3
 8002070:	486e      	ldr	r0, [pc, #440]	; (800222c <MX_ADC1_Init+0x23c>)
 8002072:	f002 fb85 	bl	8004780 <HAL_ADC_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800207c:	f000 fc6a 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002080:	230a      	movs	r3, #10
 8002082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002084:	2302      	movs	r3, #2
 8002086:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002088:	463b      	mov	r3, r7
 800208a:	4619      	mov	r1, r3
 800208c:	4867      	ldr	r0, [pc, #412]	; (800222c <MX_ADC1_Init+0x23c>)
 800208e:	f002 fb77 	bl	8004780 <HAL_ADC_ConfigChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002098:	f000 fc5c 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800209c:	2308      	movs	r3, #8
 800209e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80020a0:	2303      	movs	r3, #3
 80020a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a4:	463b      	mov	r3, r7
 80020a6:	4619      	mov	r1, r3
 80020a8:	4860      	ldr	r0, [pc, #384]	; (800222c <MX_ADC1_Init+0x23c>)
 80020aa:	f002 fb69 	bl	8004780 <HAL_ADC_ConfigChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80020b4:	f000 fc4e 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80020b8:	230b      	movs	r3, #11
 80020ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80020bc:	2304      	movs	r3, #4
 80020be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c0:	463b      	mov	r3, r7
 80020c2:	4619      	mov	r1, r3
 80020c4:	4859      	ldr	r0, [pc, #356]	; (800222c <MX_ADC1_Init+0x23c>)
 80020c6:	f002 fb5b 	bl	8004780 <HAL_ADC_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80020d0:	f000 fc40 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80020d4:	230f      	movs	r3, #15
 80020d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80020d8:	2305      	movs	r3, #5
 80020da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020dc:	463b      	mov	r3, r7
 80020de:	4619      	mov	r1, r3
 80020e0:	4852      	ldr	r0, [pc, #328]	; (800222c <MX_ADC1_Init+0x23c>)
 80020e2:	f002 fb4d 	bl	8004780 <HAL_ADC_ConfigChannel>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80020ec:	f000 fc32 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80020f0:	230c      	movs	r3, #12
 80020f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80020f4:	2306      	movs	r3, #6
 80020f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f8:	463b      	mov	r3, r7
 80020fa:	4619      	mov	r1, r3
 80020fc:	484b      	ldr	r0, [pc, #300]	; (800222c <MX_ADC1_Init+0x23c>)
 80020fe:	f002 fb3f 	bl	8004780 <HAL_ADC_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002108:	f000 fc24 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800210c:	230e      	movs	r3, #14
 800210e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002110:	2307      	movs	r3, #7
 8002112:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002114:	463b      	mov	r3, r7
 8002116:	4619      	mov	r1, r3
 8002118:	4844      	ldr	r0, [pc, #272]	; (800222c <MX_ADC1_Init+0x23c>)
 800211a:	f002 fb31 	bl	8004780 <HAL_ADC_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002124:	f000 fc16 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002128:	230d      	movs	r3, #13
 800212a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800212c:	2308      	movs	r3, #8
 800212e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002130:	463b      	mov	r3, r7
 8002132:	4619      	mov	r1, r3
 8002134:	483d      	ldr	r0, [pc, #244]	; (800222c <MX_ADC1_Init+0x23c>)
 8002136:	f002 fb23 	bl	8004780 <HAL_ADC_ConfigChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002140:	f000 fc08 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002144:	2307      	movs	r3, #7
 8002146:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002148:	2309      	movs	r3, #9
 800214a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214c:	463b      	mov	r3, r7
 800214e:	4619      	mov	r1, r3
 8002150:	4836      	ldr	r0, [pc, #216]	; (800222c <MX_ADC1_Init+0x23c>)
 8002152:	f002 fb15 	bl	8004780 <HAL_ADC_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800215c:	f000 fbfa 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002160:	2300      	movs	r3, #0
 8002162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002164:	230a      	movs	r3, #10
 8002166:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002168:	463b      	mov	r3, r7
 800216a:	4619      	mov	r1, r3
 800216c:	482f      	ldr	r0, [pc, #188]	; (800222c <MX_ADC1_Init+0x23c>)
 800216e:	f002 fb07 	bl	8004780 <HAL_ADC_ConfigChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002178:	f000 fbec 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800217c:	2306      	movs	r3, #6
 800217e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002180:	230b      	movs	r3, #11
 8002182:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002184:	463b      	mov	r3, r7
 8002186:	4619      	mov	r1, r3
 8002188:	4828      	ldr	r0, [pc, #160]	; (800222c <MX_ADC1_Init+0x23c>)
 800218a:	f002 faf9 	bl	8004780 <HAL_ADC_ConfigChannel>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002194:	f000 fbde 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002198:	2301      	movs	r3, #1
 800219a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800219c:	230c      	movs	r3, #12
 800219e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a0:	463b      	mov	r3, r7
 80021a2:	4619      	mov	r1, r3
 80021a4:	4821      	ldr	r0, [pc, #132]	; (800222c <MX_ADC1_Init+0x23c>)
 80021a6:	f002 faeb 	bl	8004780 <HAL_ADC_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80021b0:	f000 fbd0 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80021b4:	2305      	movs	r3, #5
 80021b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80021b8:	230d      	movs	r3, #13
 80021ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021bc:	463b      	mov	r3, r7
 80021be:	4619      	mov	r1, r3
 80021c0:	481a      	ldr	r0, [pc, #104]	; (800222c <MX_ADC1_Init+0x23c>)
 80021c2:	f002 fadd 	bl	8004780 <HAL_ADC_ConfigChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80021cc:	f000 fbc2 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80021d0:	2302      	movs	r3, #2
 80021d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80021d4:	230e      	movs	r3, #14
 80021d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d8:	463b      	mov	r3, r7
 80021da:	4619      	mov	r1, r3
 80021dc:	4813      	ldr	r0, [pc, #76]	; (800222c <MX_ADC1_Init+0x23c>)
 80021de:	f002 facf 	bl	8004780 <HAL_ADC_ConfigChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80021e8:	f000 fbb4 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80021ec:	2304      	movs	r3, #4
 80021ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80021f0:	230f      	movs	r3, #15
 80021f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021f4:	463b      	mov	r3, r7
 80021f6:	4619      	mov	r1, r3
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <MX_ADC1_Init+0x23c>)
 80021fa:	f002 fac1 	bl	8004780 <HAL_ADC_ConfigChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8002204:	f000 fba6 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002208:	2303      	movs	r3, #3
 800220a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 800220c:	2310      	movs	r3, #16
 800220e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002210:	463b      	mov	r3, r7
 8002212:	4619      	mov	r1, r3
 8002214:	4805      	ldr	r0, [pc, #20]	; (800222c <MX_ADC1_Init+0x23c>)
 8002216:	f002 fab3 	bl	8004780 <HAL_ADC_ConfigChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8002220:	f000 fb98 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200004d4 	.word	0x200004d4
 8002230:	40012000 	.word	0x40012000
 8002234:	0f000001 	.word	0x0f000001

08002238 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_I2C1_Init+0x50>)
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <MX_I2C1_Init+0x54>)
 8002240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_I2C1_Init+0x50>)
 8002244:	4a12      	ldr	r2, [pc, #72]	; (8002290 <MX_I2C1_Init+0x58>)
 8002246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_I2C1_Init+0x50>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_I2C1_Init+0x50>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_I2C1_Init+0x50>)
 8002256:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800225a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <MX_I2C1_Init+0x50>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_I2C1_Init+0x50>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <MX_I2C1_Init+0x50>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_I2C1_Init+0x50>)
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <MX_I2C1_Init+0x50>)
 8002276:	f003 fbe3 	bl	8005a40 <HAL_I2C_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002280:	f000 fb68 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000400 	.word	0x20000400
 800228c:	40005400 	.word	0x40005400
 8002290:	000186a0 	.word	0x000186a0

08002294 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <MX_SPI2_Init+0x64>)
 800229a:	4a18      	ldr	r2, [pc, #96]	; (80022fc <MX_SPI2_Init+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022b4:	2202      	movs	r2, #2
 80022b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022c8:	2228      	movs	r2, #40	; 0x28
 80022ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022e0:	220a      	movs	r2, #10
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <MX_SPI2_Init+0x64>)
 80022e6:	f004 f959 	bl	800659c <HAL_SPI_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022f0:	f000 fb30 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000368 	.word	0x20000368
 80022fc:	40003800 	.word	0x40003800

08002300 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2224      	movs	r2, #36	; 0x24
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f006 fae6 	bl	80088e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800231c:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <MX_TIM1_Init+0xa8>)
 800231e:	4a23      	ldr	r2, [pc, #140]	; (80023ac <MX_TIM1_Init+0xac>)
 8002320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <MX_TIM1_Init+0xa8>)
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <MX_TIM1_Init+0xa8>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2047;
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <MX_TIM1_Init+0xa8>)
 8002330:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002334:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002336:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <MX_TIM1_Init+0xa8>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <MX_TIM1_Init+0xa8>)
 800233e:	2200      	movs	r2, #0
 8002340:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <MX_TIM1_Init+0xa8>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002348:	2303      	movs	r3, #3
 800234a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002350:	2301      	movs	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002354:	2300      	movs	r3, #0
 8002356:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002360:	2301      	movs	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4619      	mov	r1, r3
 8002372:	480d      	ldr	r0, [pc, #52]	; (80023a8 <MX_TIM1_Init+0xa8>)
 8002374:	f004 ffa2 	bl	80072bc <HAL_TIM_Encoder_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800237e:	f000 fae9 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	4619      	mov	r1, r3
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <MX_TIM1_Init+0xa8>)
 8002390:	f005 fd12 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800239a:	f000 fadb 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	3730      	adds	r7, #48	; 0x30
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200005fc 	.word	0x200005fc
 80023ac:	40010000 	.word	0x40010000

080023b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f006 fa8e 	bl	80088e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <MX_TIM3_Init+0xa0>)
 80023ce:	4a21      	ldr	r2, [pc, #132]	; (8002454 <MX_TIM3_Init+0xa4>)
 80023d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023d2:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MX_TIM3_Init+0xa0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <MX_TIM3_Init+0xa0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <MX_TIM3_Init+0xa0>)
 80023e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e6:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <MX_TIM3_Init+0xa0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ec:	4b18      	ldr	r3, [pc, #96]	; (8002450 <MX_TIM3_Init+0xa0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023f2:	2303      	movs	r3, #3
 80023f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023fa:	2301      	movs	r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002406:	2300      	movs	r3, #0
 8002408:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800240a:	2301      	movs	r3, #1
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	4619      	mov	r1, r3
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <MX_TIM3_Init+0xa0>)
 800241e:	f004 ff4d 	bl	80072bc <HAL_TIM_Encoder_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002428:	f000 fa94 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	4619      	mov	r1, r3
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_TIM3_Init+0xa0>)
 800243a:	f005 fcbd 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002444:	f000 fa86 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	3730      	adds	r7, #48	; 0x30
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000494 	.word	0x20000494
 8002454:	40000400 	.word	0x40000400

08002458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245e:	f107 0320 	add.w	r3, r7, #32
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	615a      	str	r2, [r3, #20]
 8002478:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <MX_TIM4_Init+0xc0>)
 800247c:	4a27      	ldr	r2, [pc, #156]	; (800251c <MX_TIM4_Init+0xc4>)
 800247e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <MX_TIM4_Init+0xc0>)
 8002482:	2202      	movs	r2, #2
 8002484:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <MX_TIM4_Init+0xc0>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <MX_TIM4_Init+0xc0>)
 800248e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002492:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002494:	4b20      	ldr	r3, [pc, #128]	; (8002518 <MX_TIM4_Init+0xc0>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MX_TIM4_Init+0xc0>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024a0:	481d      	ldr	r0, [pc, #116]	; (8002518 <MX_TIM4_Init+0xc0>)
 80024a2:	f004 fe49 	bl	8007138 <HAL_TIM_PWM_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80024ac:	f000 fa52 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024b8:	f107 0320 	add.w	r3, r7, #32
 80024bc:	4619      	mov	r1, r3
 80024be:	4816      	ldr	r0, [pc, #88]	; (8002518 <MX_TIM4_Init+0xc0>)
 80024c0:	f005 fc7a 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80024ca:	f000 fa43 	bl	8002954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ce:	2360      	movs	r3, #96	; 0x60
 80024d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2200      	movs	r2, #0
 80024e2:	4619      	mov	r1, r3
 80024e4:	480c      	ldr	r0, [pc, #48]	; (8002518 <MX_TIM4_Init+0xc0>)
 80024e6:	f005 f903 	bl	80076f0 <HAL_TIM_PWM_ConfigChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80024f0:	f000 fa30 	bl	8002954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	2204      	movs	r2, #4
 80024f8:	4619      	mov	r1, r3
 80024fa:	4807      	ldr	r0, [pc, #28]	; (8002518 <MX_TIM4_Init+0xc0>)
 80024fc:	f005 f8f8 	bl	80076f0 <HAL_TIM_PWM_ConfigChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002506:	f000 fa25 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800250a:	4803      	ldr	r0, [pc, #12]	; (8002518 <MX_TIM4_Init+0xc0>)
 800250c:	f000 ffc4 	bl	8003498 <HAL_TIM_MspPostInit>

}
 8002510:	bf00      	nop
 8002512:	3728      	adds	r7, #40	; 0x28
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200003c0 	.word	0x200003c0
 800251c:	40000800 	.word	0x40000800

08002520 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002526:	463b      	mov	r3, r7
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_TIM6_Init+0x64>)
 8002530:	4a15      	ldr	r2, [pc, #84]	; (8002588 <MX_TIM6_Init+0x68>)
 8002532:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <MX_TIM6_Init+0x64>)
 8002536:	2204      	movs	r2, #4
 8002538:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <MX_TIM6_Init+0x64>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16799;
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <MX_TIM6_Init+0x64>)
 8002542:	f244 129f 	movw	r2, #16799	; 0x419f
 8002546:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <MX_TIM6_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800254e:	480d      	ldr	r0, [pc, #52]	; (8002584 <MX_TIM6_Init+0x64>)
 8002550:	f004 fd78 	bl	8007044 <HAL_TIM_Base_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800255a:	f000 f9fb 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002566:	463b      	mov	r3, r7
 8002568:	4619      	mov	r1, r3
 800256a:	4806      	ldr	r0, [pc, #24]	; (8002584 <MX_TIM6_Init+0x64>)
 800256c:	f005 fc24 	bl	8007db8 <HAL_TIMEx_MasterConfigSynchronization>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002576:	f000 f9ed 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200005bc 	.word	0x200005bc
 8002588:	40001000 	.word	0x40001000

0800258c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <MX_TIM10_Init+0x40>)
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <MX_TIM10_Init+0x44>)
 8002594:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <MX_TIM10_Init+0x40>)
 8002598:	2204      	movs	r2, #4
 800259a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <MX_TIM10_Init+0x40>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <MX_TIM10_Init+0x40>)
 80025a4:	f248 323f 	movw	r2, #33599	; 0x833f
 80025a8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <MX_TIM10_Init+0x40>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <MX_TIM10_Init+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025b6:	4805      	ldr	r0, [pc, #20]	; (80025cc <MX_TIM10_Init+0x40>)
 80025b8:	f004 fd44 	bl	8007044 <HAL_TIM_Base_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80025c2:	f000 f9c7 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000454 	.word	0x20000454
 80025d0:	40014400 	.word	0x40014400

080025d4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_TIM11_Init+0x40>)
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <MX_TIM11_Init+0x44>)
 80025dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <MX_TIM11_Init+0x40>)
 80025e0:	2204      	movs	r2, #4
 80025e2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <MX_TIM11_Init+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <MX_TIM11_Init+0x40>)
 80025ec:	f248 323f 	movw	r2, #33599	; 0x833f
 80025f0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <MX_TIM11_Init+0x40>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_TIM11_Init+0x40>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_TIM11_Init+0x40>)
 8002600:	f004 fd20 	bl	8007044 <HAL_TIM_Base_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800260a:	f000 f9a3 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000051c 	.word	0x2000051c
 8002618:	40014800 	.word	0x40014800

0800261c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <MX_TIM14_Init+0x40>)
 8002622:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <MX_TIM14_Init+0x44>)
 8002624:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <MX_TIM14_Init+0x40>)
 8002628:	2204      	movs	r2, #4
 800262a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <MX_TIM14_Init+0x40>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <MX_TIM14_Init+0x40>)
 8002634:	f248 323f 	movw	r2, #33599	; 0x833f
 8002638:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <MX_TIM14_Init+0x40>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <MX_TIM14_Init+0x40>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_TIM14_Init+0x40>)
 8002648:	f004 fcfc 	bl	8007044 <HAL_TIM_Base_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002652:	f000 f97f 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000067c 	.word	0x2000067c
 8002660:	40002000 	.word	0x40002000

08002664 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <MX_USART6_UART_Init+0x4c>)
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <MX_USART6_UART_Init+0x50>)
 800266c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <MX_USART6_UART_Init+0x4c>)
 8002670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002674:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <MX_USART6_UART_Init+0x4c>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <MX_USART6_UART_Init+0x4c>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <MX_USART6_UART_Init+0x4c>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <MX_USART6_UART_Init+0x4c>)
 800268a:	220c      	movs	r2, #12
 800268c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <MX_USART6_UART_Init+0x4c>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <MX_USART6_UART_Init+0x4c>)
 8002696:	2200      	movs	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800269a:	4805      	ldr	r0, [pc, #20]	; (80026b0 <MX_USART6_UART_Init+0x4c>)
 800269c:	f005 fc1c 	bl	8007ed8 <HAL_UART_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80026a6:	f000 f955 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000063c 	.word	0x2000063c
 80026b4:	40011400 	.word	0x40011400

080026b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_DMA_Init+0x3c>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <MX_DMA_Init+0x3c>)
 80026c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_DMA_Init+0x3c>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	2038      	movs	r0, #56	; 0x38
 80026e0:	f002 fbc9 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026e4:	2038      	movs	r0, #56	; 0x38
 80026e6:	f002 fbe2 	bl	8004eae <HAL_NVIC_EnableIRQ>

}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800

080026f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	4b69      	ldr	r3, [pc, #420]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a68      	ldr	r2, [pc, #416]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	4b62      	ldr	r3, [pc, #392]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a61      	ldr	r2, [pc, #388]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a5a      	ldr	r2, [pc, #360]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	4b54      	ldr	r3, [pc, #336]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a53      	ldr	r2, [pc, #332]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	4b4d      	ldr	r3, [pc, #308]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <MX_GPIO_Init+0x1c0>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800279a:	2200      	movs	r2, #0
 800279c:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 80027a0:	4846      	ldr	r0, [pc, #280]	; (80028bc <MX_GPIO_Init+0x1c4>)
 80027a2:	f003 f933 	bl	8005a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 80027a6:	2200      	movs	r2, #0
 80027a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80027ac:	4844      	ldr	r0, [pc, #272]	; (80028c0 <MX_GPIO_Init+0x1c8>)
 80027ae:	f003 f92d 	bl	8005a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80027b2:	2200      	movs	r2, #0
 80027b4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80027b8:	4842      	ldr	r0, [pc, #264]	; (80028c4 <MX_GPIO_Init+0x1cc>)
 80027ba:	f003 f927 	bl	8005a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	2104      	movs	r1, #4
 80027c2:	4841      	ldr	r0, [pc, #260]	; (80028c8 <MX_GPIO_Init+0x1d0>)
 80027c4:	f003 f922 	bl	8005a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 80027c8:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80027cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	4836      	ldr	r0, [pc, #216]	; (80028bc <MX_GPIO_Init+0x1c4>)
 80027e2:	f002 ff5f 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 80027e6:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 80027ea:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	4830      	ldr	r0, [pc, #192]	; (80028bc <MX_GPIO_Init+0x1c4>)
 80027fc:	f002 ff52 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8002800:	f640 0304 	movw	r3, #2052	; 0x804
 8002804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	482a      	ldr	r0, [pc, #168]	; (80028c0 <MX_GPIO_Init+0x1c8>)
 8002816:	f002 ff45 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 800281a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800281e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002820:	2301      	movs	r3, #1
 8002822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	4619      	mov	r1, r3
 8002832:	4823      	ldr	r0, [pc, #140]	; (80028c0 <MX_GPIO_Init+0x1c8>)
 8002834:	f002 ff36 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8002838:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800283c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283e:	2301      	movs	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	481c      	ldr	r0, [pc, #112]	; (80028c4 <MX_GPIO_Init+0x1cc>)
 8002852:	f002 ff27 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8002856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	4816      	ldr	r0, [pc, #88]	; (80028c4 <MX_GPIO_Init+0x1cc>)
 800286c:	f002 ff1a 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002882:	2301      	movs	r3, #1
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002886:	f107 0314 	add.w	r3, r7, #20
 800288a:	4619      	mov	r1, r3
 800288c:	480d      	ldr	r0, [pc, #52]	; (80028c4 <MX_GPIO_Init+0x1cc>)
 800288e:	f002 ff09 	bl	80056a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8002892:	2304      	movs	r3, #4
 8002894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	2301      	movs	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4807      	ldr	r0, [pc, #28]	; (80028c8 <MX_GPIO_Init+0x1d0>)
 80028aa:	f002 fefb 	bl	80056a4 <HAL_GPIO_Init>

}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	; 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020400 	.word	0x40020400
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40020c00 	.word	0x40020c00

080028cc <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
	tim11_init();
 80028d0:	f001 f8a0 	bl	8003a14 <tim11_init>
  /* encoder_init */
  tim10_init();
 80028d4:	f000 ffba 	bl	800384c <tim10_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 80028d8:	f001 f8b2 	bl	8003a40 <tim6_init>
  /* print who am i */
  imu_initialize();
 80028dc:	f000 f812 	bl	8002904 <imu_initialize>
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <running_start>:

void running_start()
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  tim10_start();
 80028e8:	f000 ffbe 	bl	8003868 <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  tim6_start();
 80028ec:	f001 f8bc 	bl	8003a68 <tim6_start>
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <running_stop>:

void running_stop()
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 80028f8:	f001 f8d4 	bl	8003aa4 <tim6_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 80028fc:	f000 ffc2 	bl	8003884 <tim10_stop>
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}

08002904 <imu_initialize>:

void imu_initialize()
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
#if USE_IMU
	printf("Starting SPI2 (IMU)\r\n");
 800290a:	480e      	ldr	r0, [pc, #56]	; (8002944 <imu_initialize+0x40>)
 800290c:	f006 fef0 	bl	80096f0 <puts>
	uint8_t wai, ret;
	ret = imu_init(&wai);
 8002910:	1dbb      	adds	r3, r7, #6
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fbc8 	bl	80010a8 <imu_init>
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
	printf("who_am_i = %d\r\n", wai);
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	4619      	mov	r1, r3
 8002920:	4809      	ldr	r0, [pc, #36]	; (8002948 <imu_initialize+0x44>)
 8002922:	f006 fe5f 	bl	80095e4 <iprintf>
	if (ret == 1) {
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d103      	bne.n	8002934 <imu_initialize+0x30>
		printf("SPI INIT COLLECT!\r\n");
 800292c:	4807      	ldr	r0, [pc, #28]	; (800294c <imu_initialize+0x48>)
 800292e:	f006 fedf 	bl	80096f0 <puts>
	} else {
		printf("SPI INIT FAILURE x_x \r\n");
	}
#endif

}
 8002932:	e002      	b.n	800293a <imu_initialize+0x36>
		printf("SPI INIT FAILURE x_x \r\n");
 8002934:	4806      	ldr	r0, [pc, #24]	; (8002950 <imu_initialize+0x4c>)
 8002936:	f006 fedb 	bl	80096f0 <puts>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	0800d394 	.word	0x0800d394
 8002948:	0800d3ac 	.word	0x0800d3ac
 800294c:	0800d3bc 	.word	0x0800d3bc
 8002950:	0800d3d0 	.word	0x0800d3d0

08002954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
}
 800295a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800295c:	e7fe      	b.n	800295c <Error_Handler+0x8>

0800295e <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 800295e:	b580      	push	{r7, lr}
 8002960:	af00      	add	r7, sp, #0
    motor_enable(0);
 8002962:	2000      	movs	r0, #0
 8002964:	f000 f826 	bl	80029b4 <motor_enable>
}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}

0800296c <motor_start>:

void motor_start()
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8002970:	2100      	movs	r1, #0
 8002972:	4806      	ldr	r0, [pc, #24]	; (800298c <motor_start+0x20>)
 8002974:	f004 fc0c 	bl	8007190 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002978:	2104      	movs	r1, #4
 800297a:	4804      	ldr	r0, [pc, #16]	; (800298c <motor_start+0x20>)
 800297c:	f004 fc08 	bl	8007190 <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8002980:	2001      	movs	r0, #1
 8002982:	f000 f817 	bl	80029b4 <motor_enable>
#endif
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200003c0 	.word	0x200003c0

08002990 <motor_stop>:

void motor_stop()
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
    motor_enable(0);
 8002994:	2000      	movs	r0, #0
 8002996:	f000 f80d 	bl	80029b4 <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 800299a:	2104      	movs	r1, #4
 800299c:	4804      	ldr	r0, [pc, #16]	; (80029b0 <motor_stop+0x20>)
 800299e:	f004 fc35 	bl	800720c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80029a2:	2100      	movs	r1, #0
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <motor_stop+0x20>)
 80029a6:	f004 fc31 	bl	800720c <HAL_TIM_PWM_Stop>
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200003c0 	.word	0x200003c0

080029b4 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <motor_enable+0x28>)
 80029ce:	701a      	strb	r2, [r3, #0]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	200006bc 	.word	0x200006bc

080029e0 <motor_read_enable>:

char motor_read_enable()
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
    return enable;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <motor_read_enable+0x14>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	200006bc 	.word	0x200006bc

080029f8 <motor_set>:

void motor_set(double motor_left_, double motor_right_)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a02:	ed87 1b00 	vstr	d1, [r7]
    if(motor_left_ < 0)
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a12:	f7fe f863 	bl	8000adc <__aeabi_dcmplt>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <motor_set+0x3c>
    {
        HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2104      	movs	r1, #4
 8002a20:	483a      	ldr	r0, [pc, #232]	; (8002b0c <motor_set+0x114>)
 8002a22:	f002 fff3 	bl	8005a0c <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e004      	b.n	8002a3e <motor_set+0x46>
    }
    else
    {
        HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_SET);
 8002a34:	2201      	movs	r2, #1
 8002a36:	2104      	movs	r1, #4
 8002a38:	4834      	ldr	r0, [pc, #208]	; (8002b0c <motor_set+0x114>)
 8002a3a:	f002 ffe7 	bl	8005a0c <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a4a:	f7fe f847 	bl	8000adc <__aeabi_dcmplt>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00c      	beq.n	8002a6e <motor_set+0x76>
    {
        HAL_GPIO_WritePin(DRV2_PH_GPIO_Port, DRV2_PH_Pin, GPIO_PIN_SET);
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5a:	482d      	ldr	r0, [pc, #180]	; (8002b10 <motor_set+0x118>)
 8002a5c:	f002 ffd6 	bl	8005a0c <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	e005      	b.n	8002a7a <motor_set+0x82>
    }
    else
    {
        HAL_GPIO_WritePin(DRV2_PH_GPIO_Port, DRV2_PH_Pin, GPIO_PIN_RESET);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a74:	4826      	ldr	r0, [pc, #152]	; (8002b10 <motor_set+0x118>)
 8002a76:	f002 ffc9 	bl	8005a0c <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <motor_set+0x11c>)
 8002a80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a84:	f7fe f848 	bl	8000b18 <__aeabi_dcmpgt>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <motor_set+0x9e>
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <motor_set+0x11c>)
 8002a94:	e001      	b.n	8002a9a <motor_set+0xa2>
 8002a96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <motor_set+0x11c>)
 8002aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aa8:	f7fe f836 	bl	8000b18 <__aeabi_dcmpgt>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <motor_set+0xc2>
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <motor_set+0x11c>)
 8002ab8:	e001      	b.n	8002abe <motor_set+0xc6>
 8002aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002abe:	e9c7 2300 	strd	r2, r3, [r7]

    if(enable)
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <motor_set+0x120>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <motor_set+0xea>
    {
        motor_left_ = 0;
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	e9c7 2302 	strd	r2, r3, [r7, #8]
        motor_right_ = 0;
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9c7 2300 	strd	r2, r3, [r7]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <motor_set+0x124>)
 8002ae4:	681c      	ldr	r4, [r3, #0]
 8002ae6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aea:	f7fe f85d 	bl	8000ba8 <__aeabi_d2uiz>
 8002aee:	4603      	mov	r3, r0
 8002af0:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <motor_set+0x124>)
 8002af4:	681c      	ldr	r4, [r3, #0]
 8002af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002afa:	f7fe f855 	bl	8000ba8 <__aeabi_d2uiz>
 8002afe:	4603      	mov	r3, r0
 8002b00:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40020c00 	.word	0x40020c00
 8002b10:	40020800 	.word	0x40020800
 8002b14:	408f4000 	.word	0x408f4000
 8002b18:	200006bc 	.word	0x200006bc
 8002b1c:	200003c0 	.word	0x200003c0

08002b20 <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8002b28:	1d39      	adds	r1, r7, #4
 8002b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4803      	ldr	r0, [pc, #12]	; (8002b40 <__io_putchar+0x20>)
 8002b32:	f005 fa1e 	bl	8007f72 <HAL_UART_Transmit>
	return ch;
 8002b36:	687b      	ldr	r3, [r7, #4]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	2000063c 	.word	0x2000063c

08002b44 <d_print>:

void d_print()
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	/* debug print */
	print_analog_rate();
 8002b48:	f000 f8b6 	bl	8002cb8 <print_analog_rate>
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <print_while>:

void print_while()
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	printf("///// WHILE /////\n\r");
 8002b54:	4806      	ldr	r0, [pc, #24]	; (8002b70 <print_while+0x20>)
 8002b56:	f006 fd45 	bl	80095e4 <iprintf>
    print_playmode();
 8002b5a:	f000 f891 	bl	8002c80 <print_playmode>
	print_rotary_value();
 8002b5e:	f000 f89d 	bl	8002c9c <print_rotary_value>
	/* print Tracer and Velotracer target and gains */
	print_tracer_values();
 8002b62:	f000 f807 	bl	8002b74 <print_tracer_values>
	print_velotrace_values();
 8002b66:	f000 f843 	bl	8002bf0 <print_velotrace_values>
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	0800d3e8 	.word	0x0800d3e8

08002b74 <print_tracer_values>:

void print_tracer_values()
{
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	ed2d 8b02 	vpush	{d8}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af04      	add	r7, sp, #16
	printf("Tracer\r\n");
 8002b7e:	4819      	ldr	r0, [pc, #100]	; (8002be4 <print_tracer_values+0x70>)
 8002b80:	f006 fdb6 	bl	80096f0 <puts>
	printf("target = 0\r\n");
 8002b84:	4818      	ldr	r0, [pc, #96]	; (8002be8 <print_tracer_values+0x74>)
 8002b86:	f006 fdb3 	bl	80096f0 <puts>
	printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", tracer_read_gain_kp(rotary_read_value()), tracer_read_gain_ki(rotary_read_value()), tracer_read_gain_kd(rotary_read_value()));
 8002b8a:	f7fe fba5 	bl	80012d8 <rotary_read_value>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 f88c 	bl	8003cb0 <tracer_read_gain_kp>
 8002b98:	ec55 4b10 	vmov	r4, r5, d0
 8002b9c:	f7fe fb9c 	bl	80012d8 <rotary_read_value>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f8b3 	bl	8003d10 <tracer_read_gain_ki>
 8002baa:	eeb0 8a40 	vmov.f32	s16, s0
 8002bae:	eef0 8a60 	vmov.f32	s17, s1
 8002bb2:	f7fe fb91 	bl	80012d8 <rotary_read_value>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 f8d8 	bl	8003d70 <tracer_read_gain_kd>
 8002bc0:	eeb0 7a40 	vmov.f32	s14, s0
 8002bc4:	eef0 7a60 	vmov.f32	s15, s1
 8002bc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002bcc:	ed8d 8b00 	vstr	d8, [sp]
 8002bd0:	4622      	mov	r2, r4
 8002bd2:	462b      	mov	r3, r5
 8002bd4:	4805      	ldr	r0, [pc, #20]	; (8002bec <print_tracer_values+0x78>)
 8002bd6:	f006 fd05 	bl	80095e4 <iprintf>
}
 8002bda:	bf00      	nop
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	ecbd 8b02 	vpop	{d8}
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}
 8002be4:	0800d3fc 	.word	0x0800d3fc
 8002be8:	0800d404 	.word	0x0800d404
 8002bec:	0800d410 	.word	0x0800d410

08002bf0 <print_velotrace_values>:

void print_velotrace_values()
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	ed2d 8b02 	vpush	{d8}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af04      	add	r7, sp, #16
	printf("Velotrace\r\n");
 8002bfa:	481e      	ldr	r0, [pc, #120]	; (8002c74 <print_velotrace_values+0x84>)
 8002bfc:	f006 fd78 	bl	80096f0 <puts>
	printf("target = %5.3f\r\n", velotrace_read_target(rotary_read_value()));
 8002c00:	f7fe fb6a 	bl	80012d8 <rotary_read_value>
 8002c04:	4603      	mov	r3, r0
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 f9dd 	bl	8003fc8 <velotrace_read_target>
 8002c0e:	ec53 2b10 	vmov	r2, r3, d0
 8002c12:	4819      	ldr	r0, [pc, #100]	; (8002c78 <print_velotrace_values+0x88>)
 8002c14:	f006 fce6 	bl	80095e4 <iprintf>
	printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_read_gain_kp(rotary_read_value()), velotrace_read_gain_ki(rotary_read_value()), velotrace_read_gain_kd(rotary_read_value()));
 8002c18:	f7fe fb5e 	bl	80012d8 <rotary_read_value>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 fa03 	bl	800402c <velotrace_read_gain_kp>
 8002c26:	ec55 4b10 	vmov	r4, r5, d0
 8002c2a:	f7fe fb55 	bl	80012d8 <rotary_read_value>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 fa2c 	bl	8004090 <velotrace_read_gain_ki>
 8002c38:	eeb0 8a40 	vmov.f32	s16, s0
 8002c3c:	eef0 8a60 	vmov.f32	s17, s1
 8002c40:	f7fe fb4a 	bl	80012d8 <rotary_read_value>
 8002c44:	4603      	mov	r3, r0
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 fa53 	bl	80040f4 <velotrace_read_gain_kd>
 8002c4e:	eeb0 7a40 	vmov.f32	s14, s0
 8002c52:	eef0 7a60 	vmov.f32	s15, s1
 8002c56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c5a:	ed8d 8b00 	vstr	d8, [sp]
 8002c5e:	4622      	mov	r2, r4
 8002c60:	462b      	mov	r3, r5
 8002c62:	4806      	ldr	r0, [pc, #24]	; (8002c7c <print_velotrace_values+0x8c>)
 8002c64:	f006 fcbe 	bl	80095e4 <iprintf>
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	ecbd 8b02 	vpop	{d8}
 8002c70:	bdb0      	pop	{r4, r5, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	0800d438 	.word	0x0800d438
 8002c78:	0800d444 	.word	0x0800d444
 8002c7c:	0800d410 	.word	0x0800d410

08002c80 <print_playmode>:

void print_playmode()
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	printf("playmode = %2d\r\n", rotary_read_playmode());
 8002c84:	f7fe fb10 	bl	80012a8 <rotary_read_playmode>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <print_playmode+0x18>)
 8002c8e:	f006 fca9 	bl	80095e4 <iprintf>
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	0800d458 	.word	0x0800d458

08002c9c <print_rotary_value>:

void print_rotary_value()
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8002ca0:	f7fe fb1a 	bl	80012d8 <rotary_read_value>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <print_rotary_value+0x18>)
 8002caa:	f006 fc9b 	bl	80095e4 <iprintf>
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	0800d46c 	.word	0x0800d46c

08002cb8 <print_analog_rate>:

void print_analog_rate()
{
 8002cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cbc:	b090      	sub	sp, #64	; 0x40
 8002cbe:	af0a      	add	r7, sp, #40	; 0x28
	printf("\x1b[24C");	// Cursor move right *24
 8002cc0:	4838      	ldr	r0, [pc, #224]	; (8002da4 <print_analog_rate+0xec>)
 8002cc2:	f006 fc8f 	bl	80095e4 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", analog_sensor_get(12), analog_sensor_get(14), analog_sensor_get(15),
 8002cc6:	200c      	movs	r0, #12
 8002cc8:	f7fe fdaa 	bl	8001820 <analog_sensor_get>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461c      	mov	r4, r3
 8002cd0:	200e      	movs	r0, #14
 8002cd2:	f7fe fda5 	bl	8001820 <analog_sensor_get>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461d      	mov	r5, r3
 8002cda:	200f      	movs	r0, #15
 8002cdc:	f7fe fda0 	bl	8001820 <analog_sensor_get>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461e      	mov	r6, r3
			analog_sensor_get(13));
 8002ce4:	200d      	movs	r0, #13
 8002ce6:	f7fe fd9b 	bl	8001820 <analog_sensor_get>
 8002cea:	4603      	mov	r3, r0
	printf("%4d, %4d | %4d, %4d\r\n", analog_sensor_get(12), analog_sensor_get(14), analog_sensor_get(15),
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	4633      	mov	r3, r6
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	482c      	ldr	r0, [pc, #176]	; (8002da8 <print_analog_rate+0xf0>)
 8002cf6:	f006 fc75 	bl	80095e4 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fe fd90 	bl	8001820 <analog_sensor_get>
 8002d00:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d02:	4698      	mov	r8, r3
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002d04:	2002      	movs	r0, #2
 8002d06:	f7fe fd8b 	bl	8001820 <analog_sensor_get>
 8002d0a:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d0c:	4699      	mov	r9, r3
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002d0e:	2004      	movs	r0, #4
 8002d10:	f7fe fd86 	bl	8001820 <analog_sensor_get>
 8002d14:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d16:	469a      	mov	sl, r3
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002d18:	2006      	movs	r0, #6
 8002d1a:	f7fe fd81 	bl	8001820 <analog_sensor_get>
 8002d1e:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d20:	461c      	mov	r4, r3
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002d22:	2008      	movs	r0, #8
 8002d24:	f7fe fd7c 	bl	8001820 <analog_sensor_get>
 8002d28:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d2a:	461d      	mov	r5, r3
			analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10),
 8002d2c:	200a      	movs	r0, #10
 8002d2e:	f7fe fd77 	bl	8001820 <analog_sensor_get>
 8002d32:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d34:	461e      	mov	r6, r3
			analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3),
 8002d36:	200b      	movs	r0, #11
 8002d38:	f7fe fd72 	bl	8001820 <analog_sensor_get>
 8002d3c:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d3e:	617b      	str	r3, [r7, #20]
			analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3),
 8002d40:	2009      	movs	r0, #9
 8002d42:	f7fe fd6d 	bl	8001820 <analog_sensor_get>
 8002d46:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d48:	613b      	str	r3, [r7, #16]
			analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3),
 8002d4a:	2007      	movs	r0, #7
 8002d4c:	f7fe fd68 	bl	8001820 <analog_sensor_get>
 8002d50:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d52:	60fb      	str	r3, [r7, #12]
			analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3),
 8002d54:	2005      	movs	r0, #5
 8002d56:	f7fe fd63 	bl	8001820 <analog_sensor_get>
 8002d5a:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d5c:	60bb      	str	r3, [r7, #8]
			analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3),
 8002d5e:	2003      	movs	r0, #3
 8002d60:	f7fe fd5e 	bl	8001820 <analog_sensor_get>
 8002d64:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d66:	607b      	str	r3, [r7, #4]
			analog_sensor_get(1));
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7fe fd59 	bl	8001820 <analog_sensor_get>
 8002d6e:	4603      	mov	r3, r0
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n",
 8002d70:	9308      	str	r3, [sp, #32]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	9207      	str	r2, [sp, #28]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	9206      	str	r2, [sp, #24]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	9205      	str	r2, [sp, #20]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	9204      	str	r2, [sp, #16]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	9303      	str	r3, [sp, #12]
 8002d86:	9602      	str	r6, [sp, #8]
 8002d88:	9501      	str	r5, [sp, #4]
 8002d8a:	9400      	str	r4, [sp, #0]
 8002d8c:	4653      	mov	r3, sl
 8002d8e:	464a      	mov	r2, r9
 8002d90:	4641      	mov	r1, r8
 8002d92:	4806      	ldr	r0, [pc, #24]	; (8002dac <print_analog_rate+0xf4>)
 8002d94:	f006 fc26 	bl	80095e4 <iprintf>
}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da2:	bf00      	nop
 8002da4:	0800d484 	.word	0x0800d484
 8002da8:	0800d48c 	.word	0x0800d48c
 8002dac:	0800d4a4 	.word	0x0800d4a4

08002db0 <sidesensor_read>:
#include "sidesensor.h"

unsigned char subsensbuf, marker, sidedeltacount, markerstate, rightmarkercount;

uint8_t sidesensor_read()
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(SubSens1_GPIO_Port, SubSens1_Pin) ? 1 : 0;
 8002dba:	2104      	movs	r1, #4
 8002dbc:	4810      	ldr	r0, [pc, #64]	; (8002e00 <sidesensor_read+0x50>)
 8002dbe:	f002 fe0d 	bl	80059dc <HAL_GPIO_ReadPin>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(SubSens2_GPIO_Port, SubSens2_Pin) ? 2 : 0;
 8002dd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dda:	4809      	ldr	r0, [pc, #36]	; (8002e00 <sidesensor_read+0x50>)
 8002ddc:	f002 fdfe 	bl	80059dc <HAL_GPIO_ReadPin>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <sidesensor_read+0x3a>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e000      	b.n	8002dec <sidesensor_read+0x3c>
 8002dea:	2300      	movs	r3, #0
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	4413      	add	r3, r2
 8002df2:	71fb      	strb	r3, [r7, #7]

    return subsens;
 8002df4:	79fb      	ldrb	r3, [r7, #7]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40020400 	.word	0x40020400

08002e04 <sidesensor_start>:

void sidesensor_start()
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
    marker = 0;
 8002e08:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <sidesensor_start+0x2c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <sidesensor_start+0x30>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <sidesensor_start+0x34>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
    markerstate = 0;
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <sidesensor_start+0x38>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <sidesensor_start+0x3c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	200006c0 	.word	0x200006c0
 8002e34:	200006bd 	.word	0x200006bd
 8002e38:	200006be 	.word	0x200006be
 8002e3c:	200006bf 	.word	0x200006bf
 8002e40:	200006c1 	.word	0x200006c1

08002e44 <sidesensor_stop>:

void sidesensor_stop()
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <sidesensor_right>:

void sidesensor_right()
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
    markerstate = 0b01;
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <sidesensor_right+0x28>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
    if(rightmarkercount == 1 - 1)
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <sidesensor_right+0x2c>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
    }
    else if(rightmarkercount == 2 - 1)
    {
        // stop
    }
    rightmarkercount++;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <sidesensor_right+0x2c>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <sidesensor_right+0x2c>)
 8002e6e:	701a      	strb	r2, [r3, #0]
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	200006bf 	.word	0x200006bf
 8002e80:	200006c1 	.word	0x200006c1

08002e84 <sidesensor_left>:

void sidesensor_left()
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
    // curve
    markerstate = 0b10;
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <sidesensor_left+0x14>)
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	200006bf 	.word	0x200006bf

08002e9c <sidesensor_cross>:

void sidesensor_cross()
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
    // cross
    markerstate = 0b11;
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <sidesensor_cross+0x14>)
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	701a      	strb	r2, [r3, #0]
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	200006bf 	.word	0x200006bf

08002eb4 <sidesensor_function>:

void sidesensor_function()
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 8002eba:	f7ff ff79 	bl	8002db0 <sidesensor_read>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]

	if(subsens != subsensbuf)
 8002ec2:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <sidesensor_function+0xac>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	79fa      	ldrb	r2, [r7, #7]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d044      	beq.n	8002f56 <sidesensor_function+0xa2>
	{
		subsensbuf = subsens;
 8002ecc:	4a24      	ldr	r2, [pc, #144]	; (8002f60 <sidesensor_function+0xac>)
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 8002ed2:	79fa      	ldrb	r2, [r7, #7]
 8002ed4:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <sidesensor_function+0xb0>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <sidesensor_function+0xb4>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <sidesensor_function+0xb4>)
 8002eea:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d12b      	bne.n	8002f4a <sidesensor_function+0x96>
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <sidesensor_function+0xb0>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d027      	beq.n	8002f4a <sidesensor_function+0x96>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <sidesensor_function+0xb4>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 8002f04:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <sidesensor_function+0xb4>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	109b      	asrs	r3, r3, #2
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8002f12:	797b      	ldrb	r3, [r7, #5]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10e      	bne.n	8002f36 <sidesensor_function+0x82>
			{
				if (first == 0b01)
 8002f18:	79bb      	ldrb	r3, [r7, #6]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d102      	bne.n	8002f24 <sidesensor_function+0x70>
				{
					// right -> start / stop
                    sidesensor_right();
 8002f1e:	f7ff ff99 	bl	8002e54 <sidesensor_right>
 8002f22:	e00a      	b.n	8002f3a <sidesensor_function+0x86>
				}
				else if (first == 0b10)
 8002f24:	79bb      	ldrb	r3, [r7, #6]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d102      	bne.n	8002f30 <sidesensor_function+0x7c>
				{
					// left -> curve
                    sidesensor_left();
 8002f2a:	f7ff ffab 	bl	8002e84 <sidesensor_left>
 8002f2e:	e004      	b.n	8002f3a <sidesensor_function+0x86>
				}
				else
				{
					// cross
                    sidesensor_cross();
 8002f30:	f7ff ffb4 	bl	8002e9c <sidesensor_cross>
 8002f34:	e001      	b.n	8002f3a <sidesensor_function+0x86>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8002f36:	f7ff ffb1 	bl	8002e9c <sidesensor_cross>
			}
			sidedeltacount = 0;
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <sidesensor_function+0xb0>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <sidesensor_function+0xb4>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
		{
 8002f46:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 8002f48:	e005      	b.n	8002f56 <sidesensor_function+0xa2>
			sidedeltacount++;
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <sidesensor_function+0xb0>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <sidesensor_function+0xb0>)
 8002f54:	701a      	strb	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200006bd 	.word	0x200006bd
 8002f64:	200006be 	.word	0x200006be
 8002f68:	200006c0 	.word	0x200006c0

08002f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_MspInit+0x54>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <HAL_MspInit+0x54>)
 8002f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f80:	6453      	str	r3, [r2, #68]	; 0x44
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <HAL_MspInit+0x54>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_MspInit+0x54>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_MspInit+0x54>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <HAL_MspInit+0x54>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	210f      	movs	r1, #15
 8002fae:	f06f 0003 	mvn.w	r0, #3
 8002fb2:	f001 ff60 	bl	8004e76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08c      	sub	sp, #48	; 0x30
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 031c 	add.w	r3, r7, #28
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a49      	ldr	r2, [pc, #292]	; (8003108 <HAL_ADC_MspInit+0x144>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	f040 808c 	bne.w	8003100 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_ADC_MspInit+0x148>)
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	4a46      	ldr	r2, [pc, #280]	; (800310c <HAL_ADC_MspInit+0x148>)
 8002ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff8:	4b44      	ldr	r3, [pc, #272]	; (800310c <HAL_ADC_MspInit+0x148>)
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_ADC_MspInit+0x148>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	4a3f      	ldr	r2, [pc, #252]	; (800310c <HAL_ADC_MspInit+0x148>)
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	6313      	str	r3, [r2, #48]	; 0x30
 8003014:	4b3d      	ldr	r3, [pc, #244]	; (800310c <HAL_ADC_MspInit+0x148>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_ADC_MspInit+0x148>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	4a38      	ldr	r2, [pc, #224]	; (800310c <HAL_ADC_MspInit+0x148>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6313      	str	r3, [r2, #48]	; 0x30
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_ADC_MspInit+0x148>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	4b32      	ldr	r3, [pc, #200]	; (800310c <HAL_ADC_MspInit+0x148>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	4a31      	ldr	r2, [pc, #196]	; (800310c <HAL_ADC_MspInit+0x148>)
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	6313      	str	r3, [r2, #48]	; 0x30
 800304c:	4b2f      	ldr	r3, [pc, #188]	; (800310c <HAL_ADC_MspInit+0x148>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003058:	233f      	movs	r3, #63	; 0x3f
 800305a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800305c:	2303      	movs	r3, #3
 800305e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003064:	f107 031c 	add.w	r3, r7, #28
 8003068:	4619      	mov	r1, r3
 800306a:	4829      	ldr	r0, [pc, #164]	; (8003110 <HAL_ADC_MspInit+0x14c>)
 800306c:	f002 fb1a 	bl	80056a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003070:	23ff      	movs	r3, #255	; 0xff
 8003072:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003074:	2303      	movs	r3, #3
 8003076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4619      	mov	r1, r3
 8003082:	4824      	ldr	r0, [pc, #144]	; (8003114 <HAL_ADC_MspInit+0x150>)
 8003084:	f002 fb0e 	bl	80056a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003088:	2303      	movs	r3, #3
 800308a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800308c:	2303      	movs	r3, #3
 800308e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4619      	mov	r1, r3
 800309a:	481f      	ldr	r0, [pc, #124]	; (8003118 <HAL_ADC_MspInit+0x154>)
 800309c:	f002 fb02 	bl	80056a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80030a0:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030a2:	4a1f      	ldr	r2, [pc, #124]	; (8003120 <HAL_ADC_MspInit+0x15c>)
 80030a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030c8:	4b14      	ldr	r3, [pc, #80]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030d8:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030da:	2200      	movs	r2, #0
 80030dc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030e4:	480d      	ldr	r0, [pc, #52]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030e6:	f001 fefd 	bl	8004ee4 <HAL_DMA_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80030f0:	f7ff fc30 	bl	8002954 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <HAL_ADC_MspInit+0x158>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003100:	bf00      	nop
 8003102:	3730      	adds	r7, #48	; 0x30
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40012000 	.word	0x40012000
 800310c:	40023800 	.word	0x40023800
 8003110:	40020800 	.word	0x40020800
 8003114:	40020000 	.word	0x40020000
 8003118:	40020400 	.word	0x40020400
 800311c:	2000055c 	.word	0x2000055c
 8003120:	40026410 	.word	0x40026410

08003124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <HAL_I2C_MspInit+0x84>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d12c      	bne.n	80031a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_I2C_MspInit+0x88>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_I2C_MspInit+0x88>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_I2C_MspInit+0x88>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003162:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003168:	2312      	movs	r3, #18
 800316a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316c:	2301      	movs	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003170:	2303      	movs	r3, #3
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003174:	2304      	movs	r3, #4
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	480c      	ldr	r0, [pc, #48]	; (80031b0 <HAL_I2C_MspInit+0x8c>)
 8003180:	f002 fa90 	bl	80056a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_I2C_MspInit+0x88>)
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	4a07      	ldr	r2, [pc, #28]	; (80031ac <HAL_I2C_MspInit+0x88>)
 800318e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003192:	6413      	str	r3, [r2, #64]	; 0x40
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_I2C_MspInit+0x88>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031a0:	bf00      	nop
 80031a2:	3728      	adds	r7, #40	; 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40005400 	.word	0x40005400
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40020400 	.word	0x40020400

080031b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a19      	ldr	r2, [pc, #100]	; (8003238 <HAL_SPI_MspInit+0x84>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d12c      	bne.n	8003230 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <HAL_SPI_MspInit+0x88>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	4a17      	ldr	r2, [pc, #92]	; (800323c <HAL_SPI_MspInit+0x88>)
 80031e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e4:	6413      	str	r3, [r2, #64]	; 0x40
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_SPI_MspInit+0x88>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_SPI_MspInit+0x88>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a10      	ldr	r2, [pc, #64]	; (800323c <HAL_SPI_MspInit+0x88>)
 80031fc:	f043 0302 	orr.w	r3, r3, #2
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_SPI_MspInit+0x88>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800320e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003220:	2305      	movs	r3, #5
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	4619      	mov	r1, r3
 800322a:	4805      	ldr	r0, [pc, #20]	; (8003240 <HAL_SPI_MspInit+0x8c>)
 800322c:	f002 fa3a 	bl	80056a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003230:	bf00      	nop
 8003232:	3728      	adds	r7, #40	; 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40003800 	.word	0x40003800
 800323c:	40023800 	.word	0x40023800
 8003240:	40020400 	.word	0x40020400

08003244 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	; 0x30
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a3a      	ldr	r2, [pc, #232]	; (800334c <HAL_TIM_Encoder_MspInit+0x108>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d13d      	bne.n	80032e2 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a38      	ldr	r2, [pc, #224]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	4b32      	ldr	r3, [pc, #200]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a31      	ldr	r2, [pc, #196]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 800329e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032b0:	2301      	movs	r3, #1
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	4619      	mov	r1, r3
 80032ba:	4826      	ldr	r0, [pc, #152]	; (8003354 <HAL_TIM_Encoder_MspInit+0x110>)
 80032bc:	f002 f9f2 	bl	80056a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	2019      	movs	r0, #25
 80032c6:	f001 fdd6 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032ca:	2019      	movs	r0, #25
 80032cc:	f001 fdef 	bl	8004eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	201a      	movs	r0, #26
 80032d6:	f001 fdce 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80032da:	201a      	movs	r0, #26
 80032dc:	f001 fde7 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032e0:	e030      	b.n	8003344 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <HAL_TIM_Encoder_MspInit+0x114>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d12b      	bne.n	8003344 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	4b17      	ldr	r3, [pc, #92]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	4a16      	ldr	r2, [pc, #88]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032f6:	f043 0302 	orr.w	r3, r3, #2
 80032fa:	6413      	str	r3, [r2, #64]	; 0x40
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003312:	f043 0302 	orr.w	r3, r3, #2
 8003316:	6313      	str	r3, [r2, #48]	; 0x30
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <HAL_TIM_Encoder_MspInit+0x10c>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8003324:	2330      	movs	r3, #48	; 0x30
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003334:	2302      	movs	r3, #2
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	4619      	mov	r1, r3
 800333e:	4807      	ldr	r0, [pc, #28]	; (800335c <HAL_TIM_Encoder_MspInit+0x118>)
 8003340:	f002 f9b0 	bl	80056a4 <HAL_GPIO_Init>
}
 8003344:	bf00      	nop
 8003346:	3730      	adds	r7, #48	; 0x30
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40010000 	.word	0x40010000
 8003350:	40023800 	.word	0x40023800
 8003354:	40020000 	.word	0x40020000
 8003358:	40000400 	.word	0x40000400
 800335c:	40020400 	.word	0x40020400

08003360 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0b      	ldr	r2, [pc, #44]	; (800339c <HAL_TIM_PWM_MspInit+0x3c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10d      	bne.n	800338e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_TIM_PWM_MspInit+0x40>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_TIM_PWM_MspInit+0x40>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_TIM_PWM_MspInit+0x40>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40000800 	.word	0x40000800
 80033a0:	40023800 	.word	0x40023800

080033a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a34      	ldr	r2, [pc, #208]	; (8003484 <HAL_TIM_Base_MspInit+0xe0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d116      	bne.n	80033e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	4b33      	ldr	r3, [pc, #204]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	4a32      	ldr	r2, [pc, #200]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 80033c0:	f043 0310 	orr.w	r3, r3, #16
 80033c4:	6413      	str	r3, [r2, #64]	; 0x40
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	2036      	movs	r0, #54	; 0x36
 80033d8:	f001 fd4d 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033dc:	2036      	movs	r0, #54	; 0x36
 80033de:	f001 fd66 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80033e2:	e04a      	b.n	800347a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_TIM_Base_MspInit+0xe8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d116      	bne.n	800341c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	4a24      	ldr	r2, [pc, #144]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 80033f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fc:	6453      	str	r3, [r2, #68]	; 0x44
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800340a:	2200      	movs	r2, #0
 800340c:	2100      	movs	r1, #0
 800340e:	2019      	movs	r0, #25
 8003410:	f001 fd31 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003414:	2019      	movs	r0, #25
 8003416:	f001 fd4a 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 800341a:	e02e      	b.n	800347a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <HAL_TIM_Base_MspInit+0xec>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d116      	bne.n	8003454 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003434:	6453      	str	r3, [r2, #68]	; 0x44
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	2100      	movs	r1, #0
 8003446:	201a      	movs	r0, #26
 8003448:	f001 fd15 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800344c:	201a      	movs	r0, #26
 800344e:	f001 fd2e 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 8003452:	e012      	b.n	800347a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM14)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0e      	ldr	r2, [pc, #56]	; (8003494 <HAL_TIM_Base_MspInit+0xf0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10d      	bne.n	800347a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a08      	ldr	r2, [pc, #32]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_TIM_Base_MspInit+0xe4>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
}
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40001000 	.word	0x40001000
 8003488:	40023800 	.word	0x40023800
 800348c:	40014400 	.word	0x40014400
 8003490:	40014800 	.word	0x40014800
 8003494:	40002000 	.word	0x40002000

08003498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a12      	ldr	r2, [pc, #72]	; (8003500 <HAL_TIM_MspPostInit+0x68>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d11d      	bne.n	80034f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_TIM_MspPostInit+0x6c>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4a10      	ldr	r2, [pc, #64]	; (8003504 <HAL_TIM_MspPostInit+0x6c>)
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_TIM_MspPostInit+0x6c>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 80034d6:	23c0      	movs	r3, #192	; 0xc0
 80034d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80034e6:	2302      	movs	r3, #2
 80034e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ea:	f107 030c 	add.w	r3, r7, #12
 80034ee:	4619      	mov	r1, r3
 80034f0:	4805      	ldr	r0, [pc, #20]	; (8003508 <HAL_TIM_MspPostInit+0x70>)
 80034f2:	f002 f8d7 	bl	80056a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80034f6:	bf00      	nop
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40000800 	.word	0x40000800
 8003504:	40023800 	.word	0x40023800
 8003508:	40020400 	.word	0x40020400

0800350c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_UART_MspInit+0x84>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d12b      	bne.n	8003586 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_UART_MspInit+0x88>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_UART_MspInit+0x88>)
 8003538:	f043 0320 	orr.w	r3, r3, #32
 800353c:	6453      	str	r3, [r2, #68]	; 0x44
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <HAL_UART_MspInit+0x88>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_UART_MspInit+0x88>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	4a10      	ldr	r2, [pc, #64]	; (8003594 <HAL_UART_MspInit+0x88>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	6313      	str	r3, [r2, #48]	; 0x30
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_UART_MspInit+0x88>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003566:	23c0      	movs	r3, #192	; 0xc0
 8003568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356a:	2302      	movs	r3, #2
 800356c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003572:	2303      	movs	r3, #3
 8003574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003576:	2308      	movs	r3, #8
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800357a:	f107 0314 	add.w	r3, r7, #20
 800357e:	4619      	mov	r1, r3
 8003580:	4805      	ldr	r0, [pc, #20]	; (8003598 <HAL_UART_MspInit+0x8c>)
 8003582:	f002 f88f 	bl	80056a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003586:	bf00      	nop
 8003588:	3728      	adds	r7, #40	; 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40011400 	.word	0x40011400
 8003594:	40023800 	.word	0x40023800
 8003598:	40020800 	.word	0x40020800

0800359c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035a0:	e7fe      	b.n	80035a0 <NMI_Handler+0x4>

080035a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a6:	e7fe      	b.n	80035a6 <HardFault_Handler+0x4>

080035a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035ac:	e7fe      	b.n	80035ac <MemManage_Handler+0x4>

080035ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b2:	e7fe      	b.n	80035b2 <BusFault_Handler+0x4>

080035b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <UsageFault_Handler+0x4>

080035ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035d6:	b480      	push	{r7}
 80035d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035e8:	f000 fef2 	bl	80043d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035f4:	4803      	ldr	r0, [pc, #12]	; (8003604 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80035f6:	f003 ff73 	bl	80074e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80035fa:	4803      	ldr	r0, [pc, #12]	; (8003608 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80035fc:	f003 ff70 	bl	80074e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003600:	bf00      	nop
 8003602:	bd80      	pop	{r7, pc}
 8003604:	200005fc 	.word	0x200005fc
 8003608:	20000454 	.word	0x20000454

0800360c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003610:	4803      	ldr	r0, [pc, #12]	; (8003620 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003612:	f003 ff65 	bl	80074e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003616:	4803      	ldr	r0, [pc, #12]	; (8003624 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003618:	f003 ff62 	bl	80074e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800361c:	bf00      	nop
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200005fc 	.word	0x200005fc
 8003624:	2000051c 	.word	0x2000051c

08003628 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <TIM6_DAC_IRQHandler+0x10>)
 800362e:	f003 ff57 	bl	80074e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200005bc 	.word	0x200005bc

0800363c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <DMA2_Stream0_IRQHandler+0x10>)
 8003642:	f001 fdc5 	bl	80051d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	2000055c 	.word	0x2000055c

08003650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
	return 1;
 8003654:	2301      	movs	r3, #1
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <_kill>:

int _kill(int pid, int sig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800366a:	f005 f901 	bl	8008870 <__errno>
 800366e:	4603      	mov	r3, r0
 8003670:	2216      	movs	r2, #22
 8003672:	601a      	str	r2, [r3, #0]
	return -1;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <_exit>:

void _exit (int status)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003688:	f04f 31ff 	mov.w	r1, #4294967295
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ffe7 	bl	8003660 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003692:	e7fe      	b.n	8003692 <_exit+0x12>

08003694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	e00a      	b.n	80036bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036a6:	f3af 8000 	nop.w
 80036aa:	4601      	mov	r1, r0
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	60ba      	str	r2, [r7, #8]
 80036b2:	b2ca      	uxtb	r2, r1
 80036b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	3301      	adds	r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	dbf0      	blt.n	80036a6 <_read+0x12>
	}

return len;
 80036c4:	687b      	ldr	r3, [r7, #4]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e009      	b.n	80036f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	60ba      	str	r2, [r7, #8]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fa19 	bl	8002b20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	3301      	adds	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	dbf1      	blt.n	80036e0 <_write+0x12>
	}
	return len;
 80036fc:	687b      	ldr	r3, [r7, #4]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_close>:

int _close(int file)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
	return -1;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800372e:	605a      	str	r2, [r3, #4]
	return 0;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <_isatty>:

int _isatty(int file)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
	return 1;
 8003746:	2301      	movs	r3, #1
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
	return 0;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <_sbrk+0x5c>)
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <_sbrk+0x60>)
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <_sbrk+0x64>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <_sbrk+0x64>)
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <_sbrk+0x68>)
 8003790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <_sbrk+0x64>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	429a      	cmp	r2, r3
 800379e:	d207      	bcs.n	80037b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037a0:	f005 f866 	bl	8008870 <__errno>
 80037a4:	4603      	mov	r3, r0
 80037a6:	220c      	movs	r2, #12
 80037a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	e009      	b.n	80037c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <_sbrk+0x64>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <_sbrk+0x64>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <_sbrk+0x64>)
 80037c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20020000 	.word	0x20020000
 80037d0:	00000400 	.word	0x00000400
 80037d4:	200001fc 	.word	0x200001fc
 80037d8:	20000748 	.word	0x20000748

080037dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <SystemInit+0x28>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	4a07      	ldr	r2, [pc, #28]	; (8003804 <SystemInit+0x28>)
 80037e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <SystemInit+0x28>)
 80037f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037f6:	609a      	str	r2, [r3, #8]
#endif
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <tim10_length_init>:
/* lengths is updated only in tim10 file. */
double length, length_left, length_right;
double velocity_left, velocity_right, velocity;

void tim10_length_init()
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  length_left = 0;
 800380c:	490c      	ldr	r1, [pc, #48]	; (8003840 <tim10_length_init+0x38>)
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9c1 2300 	strd	r2, r3, [r1]
  length_right = 0;
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <tim10_length_init+0x3c>)
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9c1 2300 	strd	r2, r3, [r1]
  length = 0;
 8003828:	4907      	ldr	r1, [pc, #28]	; (8003848 <tim10_length_init+0x40>)
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003836:	bf00      	nop
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	200006c8 	.word	0x200006c8
 8003844:	200006f0 	.word	0x200006f0
 8003848:	200006d0 	.word	0x200006d0

0800384c <tim10_init>:

void tim10_init()
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  tim10_length_init();
 8003850:	f7ff ffda 	bl	8003808 <tim10_length_init>
	encoder_init();
 8003854:	f7fe f8ec 	bl	8001a30 <encoder_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <tim10_init+0x18>)
 800385a:	f003 fc42 	bl	80070e2 <HAL_TIM_Base_Stop_IT>
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000454 	.word	0x20000454

08003868 <tim10_start>:

void tim10_start()
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* encoder_set_middle, HAL_TIM_Encoder_Start */
  encoder_start();
 800386c:	f7fe f908 	bl	8001a80 <encoder_start>
  /* marker = subsensbuf = sidedeltacount = markerstate = rightmarkercount = 0 */
  sidesensor_start();
 8003870:	f7ff fac8 	bl	8002e04 <sidesensor_start>
  HAL_TIM_Base_Start_IT(&htim10);
 8003874:	4802      	ldr	r0, [pc, #8]	; (8003880 <tim10_start+0x18>)
 8003876:	f003 fc10 	bl	800709a <HAL_TIM_Base_Start_IT>
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000454 	.word	0x20000454

08003884 <tim10_stop>:

void tim10_stop()
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 8003888:	4804      	ldr	r0, [pc, #16]	; (800389c <tim10_stop+0x18>)
 800388a:	f003 fc2a 	bl	80070e2 <HAL_TIM_Base_Stop_IT>
  sidesensor_stop();
 800388e:	f7ff fad9 	bl	8002e44 <sidesensor_stop>
  encoder_stop();
 8003892:	f7fe f90d 	bl	8001ab0 <encoder_stop>
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000454 	.word	0x20000454

080038a0 <tim10_read_velocity>:
{
  return velocity_right;
}

double tim10_read_velocity()
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return velocity;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <tim10_read_velocity+0x20>)
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80038ae:	eeb0 0a47 	vmov.f32	s0, s14
 80038b2:	eef0 0a67 	vmov.f32	s1, s15
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	200006d8 	.word	0x200006d8
 80038c4:	00000000 	.word	0x00000000

080038c8 <tim10_main>:

void tim10_main()
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* set encoder middle and update velocities */
  encoder_set();
 80038cc:	f7fe f936 	bl	8001b3c <encoder_set>

  /* update velocity */
  velocity_left = encoder_read_left() * (double) LENGTHPERPULSE * (double) TIM10_Hz;
 80038d0:	f7fe f910 	bl	8001af4 <encoder_read_left>
 80038d4:	ec51 0b10 	vmov	r0, r1, d0
 80038d8:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <tim10_main+0x130>)
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f7fc fe8b 	bl	80005f8 <__aeabi_dmul>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4610      	mov	r0, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	a341      	add	r3, pc, #260	; (adr r3, 80039f0 <tim10_main+0x128>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f7fc fe82 	bl	80005f8 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4940      	ldr	r1, [pc, #256]	; (80039fc <tim10_main+0x134>)
 80038fa:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = encoder_read_right() * (double) LENGTHPERPULSE * (double) TIM10_Hz;
 80038fe:	f7fe f90b 	bl	8001b18 <encoder_read_right>
 8003902:	ec51 0b10 	vmov	r0, r1, d0
 8003906:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <tim10_main+0x130>)
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f7fc fe74 	bl	80005f8 <__aeabi_dmul>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	a335      	add	r3, pc, #212	; (adr r3, 80039f0 <tim10_main+0x128>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f7fc fe6b 	bl	80005f8 <__aeabi_dmul>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4936      	ldr	r1, [pc, #216]	; (8003a00 <tim10_main+0x138>)
 8003928:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = encoder_read() * (double) LENGTHPERPULSE * (double) TIM10_Hz;
 800392c:	f7fe f8d0 	bl	8001ad0 <encoder_read>
 8003930:	ec51 0b10 	vmov	r0, r1, d0
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <tim10_main+0x130>)
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f7fc fe5d 	bl	80005f8 <__aeabi_dmul>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4610      	mov	r0, r2
 8003944:	4619      	mov	r1, r3
 8003946:	a32a      	add	r3, pc, #168	; (adr r3, 80039f0 <tim10_main+0x128>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f7fc fe54 	bl	80005f8 <__aeabi_dmul>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	492b      	ldr	r1, [pc, #172]	; (8003a04 <tim10_main+0x13c>)
 8003956:	e9c1 2300 	strd	r2, r3, [r1]

  /* update lengths */
  length_left += (double) encoder_read_left() * (double) LENGTHPERPULSE;
 800395a:	f7fe f8cb 	bl	8001af4 <encoder_read_left>
 800395e:	ec51 0b10 	vmov	r0, r1, d0
 8003962:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <tim10_main+0x130>)
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f7fc fe46 	bl	80005f8 <__aeabi_dmul>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <tim10_main+0x140>)
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f7fc fc87 	bl	800028c <__adddf3>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4921      	ldr	r1, [pc, #132]	; (8003a08 <tim10_main+0x140>)
 8003984:	e9c1 2300 	strd	r2, r3, [r1]
  length_right += (double) encoder_read_right() * (double) LENGTHPERPULSE;
 8003988:	f7fe f8c6 	bl	8001b18 <encoder_read_right>
 800398c:	ec51 0b10 	vmov	r0, r1, d0
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <tim10_main+0x130>)
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	f7fc fe2f 	bl	80005f8 <__aeabi_dmul>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <tim10_main+0x144>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f7fc fc70 	bl	800028c <__adddf3>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4916      	ldr	r1, [pc, #88]	; (8003a0c <tim10_main+0x144>)
 80039b2:	e9c1 2300 	strd	r2, r3, [r1]
  length += (double) encoder_read() * (double) LENGTHPERPULSE;
 80039b6:	f7fe f88b 	bl	8001ad0 <encoder_read>
 80039ba:	ec51 0b10 	vmov	r0, r1, d0
 80039be:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <tim10_main+0x130>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f7fc fe18 	bl	80005f8 <__aeabi_dmul>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <tim10_main+0x148>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	f7fc fc59 	bl	800028c <__adddf3>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	490c      	ldr	r1, [pc, #48]	; (8003a10 <tim10_main+0x148>)
 80039e0:	e9c1 2300 	strd	r2, r3, [r1]
  {
    course_state_function();
  }
  */

  sidesensor_function();
 80039e4:	f7ff fa66 	bl	8002eb4 <sidesensor_function>
}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	f3af 8000 	nop.w
 80039f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80039f4:	3f50624d 	.word	0x3f50624d
 80039f8:	20000300 	.word	0x20000300
 80039fc:	200006e8 	.word	0x200006e8
 8003a00:	200006e0 	.word	0x200006e0
 8003a04:	200006d8 	.word	0x200006d8
 8003a08:	200006c8 	.word	0x200006c8
 8003a0c:	200006f0 	.word	0x200006f0
 8003a10:	200006d0 	.word	0x200006d0

08003a14 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
    switch_init();
 8003a18:	f7fd fccc 	bl	80013b4 <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8003a1c:	4803      	ldr	r0, [pc, #12]	; (8003a2c <tim11_init+0x18>)
 8003a1e:	f003 fb3c 	bl	800709a <HAL_TIM_Base_Start_IT>
    rotary_init();
 8003a22:	f7fd fc2d 	bl	8001280 <rotary_init>
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	2000051c 	.word	0x2000051c

08003a30 <tim11_main>:

void tim11_main()
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
    switch_enter();
 8003a34:	f7fd fd0d 	bl	8001452 <switch_enter>
    rotary_set_value();
 8003a38:	f7fd fc42 	bl	80012c0 <rotary_set_value>
}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <tim6_init>:
#include "tim6.h"

void tim6_init()
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
    motor_init();
 8003a44:	f7fe ff8b 	bl	800295e <motor_init>
    analog_init();
 8003a48:	f7fd fea6 	bl	8001798 <analog_init>
    velotrace_init(1);
 8003a4c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8003a60 <tim6_init+0x20>
 8003a50:	f000 fa96 	bl	8003f80 <velotrace_init>
    tracer_init(1);
 8003a54:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8003a60 <tim6_init+0x20>
 8003a58:	f000 f906 	bl	8003c68 <tracer_init>
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	00000000 	.word	0x00000000
 8003a64:	3ff00000 	.word	0x3ff00000

08003a68 <tim6_start>:

void tim6_start()
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
    /* analogmin/max = FlashBuffer.analogmin/max */
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8003a6c:	490a      	ldr	r1, [pc, #40]	; (8003a98 <tim6_start+0x30>)
 8003a6e:	480b      	ldr	r0, [pc, #44]	; (8003a9c <tim6_start+0x34>)
 8003a70:	f7fd fe12 	bl	8001698 <analog_set_from_flash>
    HAL_Delay(3000);
 8003a74:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003a78:	f000 fcca 	bl	8004410 <HAL_Delay>
    /* sensgettime = 0, HAL_ADC_Start_DMA() */
    analog_start();
 8003a7c:	f7fd fe9e 	bl	80017bc <analog_start>
    /* samplingtime = 0, s_error = 0, before_error = 0, if search ( p/i/d = [0], target = [0] ) */
    velotrace_start();
 8003a80:	f000 fa66 	bl	8003f50 <velotrace_start>
    /* samplingtime = 0, s_error = 0, before_error = 0 */
    tracer_start();
 8003a84:	f000 f8d0 	bl	8003c28 <tracer_start>

    motor_start();
 8003a88:	f7fe ff70 	bl	800296c <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8003a8c:	4804      	ldr	r0, [pc, #16]	; (8003aa0 <tim6_start+0x38>)
 8003a8e:	f003 fb04 	bl	800709a <HAL_TIM_Base_Start_IT>
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	2000032a 	.word	0x2000032a
 8003a9c:	2000030a 	.word	0x2000030a
 8003aa0:	200005bc 	.word	0x200005bc

08003aa4 <tim6_stop>:

void tim6_stop()
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8003aa8:	4804      	ldr	r0, [pc, #16]	; (8003abc <tim6_stop+0x18>)
 8003aaa:	f003 fb1a 	bl	80070e2 <HAL_TIM_Base_Stop_IT>
    analog_stop();
 8003aae:	f7fd fe8b 	bl	80017c8 <analog_stop>
    motor_stop();
 8003ab2:	f7fe ff6d 	bl	8002990 <motor_stop>
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200005bc 	.word	0x200005bc

08003ac0 <tim6_main>:

void tim6_main()
{
 8003ac0:	b5b0      	push	{r4, r5, r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
    uint16_t analogl, analogr;
    int direction;
    double leftmotor, rightmotor;
    analogl = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	83fb      	strh	r3, [r7, #30]
    analogr = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	83bb      	strh	r3, [r7, #28]

    for(unsigned char i = 0; i < analog_read_calibrationsize(); i++)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	71fb      	strb	r3, [r7, #7]
 8003ad2:	e01b      	b.n	8003b0c <tim6_main+0x4c>
    {
        if(i % 2 == 0)
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <tim6_main+0x34>
        {
            analogl += analog_sensor_get(i);
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd fe9c 	bl	8001820 <analog_sensor_get>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	461a      	mov	r2, r3
 8003aec:	8bfb      	ldrh	r3, [r7, #30]
 8003aee:	4413      	add	r3, r2
 8003af0:	83fb      	strh	r3, [r7, #30]
 8003af2:	e008      	b.n	8003b06 <tim6_main+0x46>
        }
        else
        {
            analogr += analog_sensor_get(i);
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd fe92 	bl	8001820 <analog_sensor_get>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	8bbb      	ldrh	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	83bb      	strh	r3, [r7, #28]
    for(unsigned char i = 0; i < analog_read_calibrationsize(); i++)
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	71fb      	strb	r3, [r7, #7]
 8003b0c:	f7fd fe02 	bl	8001714 <analog_read_calibrationsize>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d3dc      	bcc.n	8003ad4 <tim6_main+0x14>
        }
    }

    if(analogl + analogr >= 980 * analog_read_calibrationsize())
 8003b1a:	8bfa      	ldrh	r2, [r7, #30]
 8003b1c:	8bbb      	ldrh	r3, [r7, #28]
 8003b1e:	18d4      	adds	r4, r2, r3
 8003b20:	f7fd fdf8 	bl	8001714 <analog_read_calibrationsize>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8003b2c:	fb03 f302 	mul.w	r3, r3, r2
 8003b30:	429c      	cmp	r4, r3
 8003b32:	db05      	blt.n	8003b40 <tim6_main+0x80>
    {
        velotrace_set_target(0);
 8003b34:	2000      	movs	r0, #0
 8003b36:	f000 fb39 	bl	80041ac <velotrace_set_target>
        motor_enable(0);
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7fe ff3a 	bl	80029b4 <motor_enable>
    }

    // ( direction > 0 ) is ( analogl > analogr ) i.e. left is black, right is white.
    // When ( direction > 0 ) , must turn right.
    direction = (analogl - analogr);	// difference
 8003b40:	8bfa      	ldrh	r2, [r7, #30]
 8003b42:	8bbb      	ldrh	r3, [r7, #28]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	61bb      	str	r3, [r7, #24]

    if(analogl + analogr <= 700 * analog_read_calibrationsize())
 8003b48:	8bfa      	ldrh	r2, [r7, #30]
 8003b4a:	8bbb      	ldrh	r3, [r7, #28]
 8003b4c:	18d4      	adds	r4, r2, r3
 8003b4e:	f7fd fde1 	bl	8001714 <analog_read_calibrationsize>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003b5a:	fb03 f302 	mul.w	r3, r3, r2
 8003b5e:	429c      	cmp	r4, r3
 8003b60:	dc01      	bgt.n	8003b66 <tim6_main+0xa6>
    {
        direction = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
    }

    if(motor_read_enable())
 8003b66:	f7fe ff3b 	bl	80029e0 <motor_read_enable>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d042      	beq.n	8003bf6 <tim6_main+0x136>
    {
        leftmotor   = velotrace_solve(tim10_read_velocity()) + tracer_solve(direction);
 8003b70:	f7ff fe96 	bl	80038a0 <tim10_read_velocity>
 8003b74:	eeb0 7a40 	vmov.f32	s14, s0
 8003b78:	eef0 7a60 	vmov.f32	s15, s1
 8003b7c:	eeb0 0a47 	vmov.f32	s0, s14
 8003b80:	eef0 0a67 	vmov.f32	s1, s15
 8003b84:	f000 fb28 	bl	80041d8 <velotrace_solve>
 8003b88:	ec55 4b10 	vmov	r4, r5, d0
 8003b8c:	69b8      	ldr	r0, [r7, #24]
 8003b8e:	f7fc fcc9 	bl	8000524 <__aeabi_i2d>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	ec43 2b10 	vmov	d0, r2, r3
 8003b9a:	f000 f959 	bl	8003e50 <tracer_solve>
 8003b9e:	ec53 2b10 	vmov	r2, r3, d0
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	f7fc fb71 	bl	800028c <__adddf3>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	e9c7 2304 	strd	r2, r3, [r7, #16]
        rightmotor  = velotrace_solve(tim10_read_velocity()) - tracer_solve(direction);
 8003bb2:	f7ff fe75 	bl	80038a0 <tim10_read_velocity>
 8003bb6:	eeb0 7a40 	vmov.f32	s14, s0
 8003bba:	eef0 7a60 	vmov.f32	s15, s1
 8003bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8003bc2:	eef0 0a67 	vmov.f32	s1, s15
 8003bc6:	f000 fb07 	bl	80041d8 <velotrace_solve>
 8003bca:	ec55 4b10 	vmov	r4, r5, d0
 8003bce:	69b8      	ldr	r0, [r7, #24]
 8003bd0:	f7fc fca8 	bl	8000524 <__aeabi_i2d>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	ec43 2b10 	vmov	d0, r2, r3
 8003bdc:	f000 f938 	bl	8003e50 <tracer_solve>
 8003be0:	ec53 2b10 	vmov	r2, r3, d0
 8003be4:	4620      	mov	r0, r4
 8003be6:	4629      	mov	r1, r5
 8003be8:	f7fc fb4e 	bl	8000288 <__aeabi_dsub>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8003bf4:	e00b      	b.n	8003c0e <tim6_main+0x14e>
    }
    else
    {
        leftmotor = 0;
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
        rightmotor = 0;
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    motor_set(leftmotor, rightmotor);
 8003c0e:	ed97 1b02 	vldr	d1, [r7, #8]
 8003c12:	ed97 0b04 	vldr	d0, [r7, #16]
 8003c16:	f7fe feef 	bl	80029f8 <motor_set>
}
 8003c1a:	bf00      	nop
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bdb0      	pop	{r4, r5, r7, pc}
 8003c22:	0000      	movs	r0, r0
 8003c24:	0000      	movs	r0, r0
	...

08003c28 <tracer_start>:
double samplingtime;

PID pid;

void tracer_start()
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
    tracer_init(1);
 8003c2c:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8003c58 <tracer_start+0x30>
 8003c30:	f000 f81a 	bl	8003c68 <tracer_init>
    if(rotary_read_playmode() == search)
 8003c34:	f7fd fb38 	bl	80012a8 <rotary_read_playmode>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d10a      	bne.n	8003c54 <tracer_start+0x2c>
    {
        tracer_set_gain(rotary_read_value());
 8003c3e:	f7fd fb4b 	bl	80012d8 <rotary_read_value>
 8003c42:	4603      	mov	r3, r0
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f8c4 	bl	8003dd4 <tracer_set_gain>
        tracer_set_target(0);
 8003c4c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8003c60 <tracer_start+0x38>
 8003c50:	f000 f8ec 	bl	8003e2c <tracer_set_target>
    }
}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	00000000 	.word	0x00000000
 8003c5c:	3ff00000 	.word	0x3ff00000
	...

08003c68 <tracer_init>:

void tracer_init(double samplingtime_)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	ed87 0b00 	vstr	d0, [r7]
    samplingtime = samplingtime_;
 8003c72:	490c      	ldr	r1, [pc, #48]	; (8003ca4 <tracer_init+0x3c>)
 8003c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c78:	e9c1 2300 	strd	r2, r3, [r1]
    s_error = 0;
 8003c7c:	490a      	ldr	r1, [pc, #40]	; (8003ca8 <tracer_init+0x40>)
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	e9c1 2300 	strd	r2, r3, [r1]
    before_error = 0;
 8003c8a:	4908      	ldr	r1, [pc, #32]	; (8003cac <tracer_init+0x44>)
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000720 	.word	0x20000720
 8003ca8:	20000718 	.word	0x20000718
 8003cac:	20000728 	.word	0x20000728

08003cb0 <tracer_read_gain_kp>:

double tracer_read_gain_kp(unsigned short int i)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KP_MAX - TRACER_KP_MIN) / (double) (TRACER_STEP_SIZE - 1);
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	f1c3 030f 	rsb	r3, r3, #15
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fc fc2f 	bl	8000524 <__aeabi_i2d>
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	f7fc fc93 	bl	80005f8 <__aeabi_dmul>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <tracer_read_gain_kp+0x58>)
 8003ce0:	f7fc fdb4 	bl	800084c <__aeabi_ddiv>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	4907      	ldr	r1, [pc, #28]	; (8003d0c <tracer_read_gain_kp+0x5c>)
 8003cee:	f7fc facb 	bl	8000288 <__aeabi_dsub>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	ec43 2b17 	vmov	d7, r2, r3
}
 8003cfa:	eeb0 0a47 	vmov.f32	s0, s14
 8003cfe:	eef0 0a67 	vmov.f32	s1, s15
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	402e0000 	.word	0x402e0000
 8003d0c:	40318000 	.word	0x40318000

08003d10 <tracer_read_gain_ki>:

double tracer_read_gain_ki(unsigned short int i)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KI_MAX - TRACER_KI_MIN) / (double) (TRACER_STEP_SIZE - 1);
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	f1c3 030f 	rsb	r3, r3, #15
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fc fbff 	bl	8000524 <__aeabi_i2d>
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	f7fc fc63 	bl	80005f8 <__aeabi_dmul>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <tracer_read_gain_ki+0x5c>)
 8003d40:	f7fc fd84 	bl	800084c <__aeabi_ddiv>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	f04f 0000 	mov.w	r0, #0
 8003d4c:	f04f 0100 	mov.w	r1, #0
 8003d50:	f7fc fa9a 	bl	8000288 <__aeabi_dsub>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	ec43 2b17 	vmov	d7, r2, r3
}
 8003d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d60:	eef0 0a67 	vmov.f32	s1, s15
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	402e0000 	.word	0x402e0000

08003d70 <tracer_read_gain_kd>:

double tracer_read_gain_kd(unsigned short int i)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KD_MAX - TRACER_KD_MIN) / (double) (TRACER_STEP_SIZE - 1);
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	f1c3 030f 	rsb	r3, r3, #15
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc fbcf 	bl	8000524 <__aeabi_i2d>
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	f7fc fc33 	bl	80005f8 <__aeabi_dmul>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4610      	mov	r0, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <tracer_read_gain_kd+0x60>)
 8003da0:	f7fc fd54 	bl	800084c <__aeabi_ddiv>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	a107      	add	r1, pc, #28	; (adr r1, 8003dc8 <tracer_read_gain_kd+0x58>)
 8003daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dae:	f7fc fa6b 	bl	8000288 <__aeabi_dsub>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	ec43 2b17 	vmov	d7, r2, r3
}
 8003dba:	eeb0 0a47 	vmov.f32	s0, s14
 8003dbe:	eef0 0a67 	vmov.f32	s1, s15
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	4074fb5c 	.word	0x4074fb5c
 8003dd0:	402e0000 	.word	0x402e0000

08003dd4 <tracer_set_gain>:

void tracer_set_gain(unsigned short int i)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	80fb      	strh	r3, [r7, #6]
    pid.kp = tracer_read_gain_kp(i);
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff65 	bl	8003cb0 <tracer_read_gain_kp>
 8003de6:	eeb0 7a40 	vmov.f32	s14, s0
 8003dea:	eef0 7a60 	vmov.f32	s15, s1
 8003dee:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <tracer_set_gain+0x54>)
 8003df0:	ed83 7b02 	vstr	d7, [r3, #8]
    pid.ki = tracer_read_gain_ki(i);
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ff8a 	bl	8003d10 <tracer_read_gain_ki>
 8003dfc:	eeb0 7a40 	vmov.f32	s14, s0
 8003e00:	eef0 7a60 	vmov.f32	s15, s1
 8003e04:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <tracer_set_gain+0x54>)
 8003e06:	ed83 7b04 	vstr	d7, [r3, #16]
    pid.kd = tracer_read_gain_kd(i);
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ffaf 	bl	8003d70 <tracer_read_gain_kd>
 8003e12:	eeb0 7a40 	vmov.f32	s14, s0
 8003e16:	eef0 7a60 	vmov.f32	s15, s1
 8003e1a:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <tracer_set_gain+0x54>)
 8003e1c:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	200006f8 	.word	0x200006f8

08003e2c <tracer_set_target>:

void tracer_set_target(double target_)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	ed87 0b00 	vstr	d0, [r7]
    pid.target = target_;
 8003e36:	4905      	ldr	r1, [pc, #20]	; (8003e4c <tracer_set_target+0x20>)
 8003e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e3c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	200006f8 	.word	0x200006f8

08003e50 <tracer_solve>:

double tracer_solve(double reference_)
{
 8003e50:	b5b0      	push	{r4, r5, r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	ed87 0b00 	vstr	d0, [r7]
    double error = reference_ - pid.target;
 8003e5a:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <tracer_solve+0xf0>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e64:	f7fc fa10 	bl	8000288 <__aeabi_dsub>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double d_error = error - before_error;
 8003e70:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <tracer_solve+0xf4>)
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e7a:	f7fc fa05 	bl	8000288 <__aeabi_dsub>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_error += error;
 8003e86:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <tracer_solve+0xf8>)
 8003e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e90:	f7fc f9fc 	bl	800028c <__adddf3>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	492b      	ldr	r1, [pc, #172]	; (8003f48 <tracer_solve+0xf8>)
 8003e9a:	e9c1 2300 	strd	r2, r3, [r1]
    double result = pid.kp * error + pid.ki * s_error * samplingtime + pid.kd * d_error / samplingtime;
 8003e9e:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <tracer_solve+0xf0>)
 8003ea0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea8:	f7fc fba6 	bl	80005f8 <__aeabi_dmul>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	461d      	mov	r5, r3
 8003eb4:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <tracer_solve+0xf0>)
 8003eb6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003eba:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <tracer_solve+0xf8>)
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f7fc fb9a 	bl	80005f8 <__aeabi_dmul>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <tracer_solve+0xfc>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f7fc fb91 	bl	80005f8 <__aeabi_dmul>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4620      	mov	r0, r4
 8003edc:	4629      	mov	r1, r5
 8003ede:	f7fc f9d5 	bl	800028c <__adddf3>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	461d      	mov	r5, r3
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <tracer_solve+0xf0>)
 8003eec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003ef0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ef4:	f7fc fb80 	bl	80005f8 <__aeabi_dmul>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <tracer_solve+0xfc>)
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	f7fc fca1 	bl	800084c <__aeabi_ddiv>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4620      	mov	r0, r4
 8003f10:	4629      	mov	r1, r5
 8003f12:	f7fc f9bb 	bl	800028c <__adddf3>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    error = before_error;
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <tracer_solve+0xf4>)
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result;
 8003f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f2c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003f30:	eeb0 0a47 	vmov.f32	s0, s14
 8003f34:	eef0 0a67 	vmov.f32	s1, s15
 8003f38:	3720      	adds	r7, #32
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200006f8 	.word	0x200006f8
 8003f44:	20000728 	.word	0x20000728
 8003f48:	20000718 	.word	0x20000718
 8003f4c:	20000720 	.word	0x20000720

08003f50 <velotrace_start>:
double samplingtime;

PID pid;

void velotrace_start()
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
    velotrace_init(1);
 8003f54:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8003f78 <velotrace_start+0x28>
 8003f58:	f000 f812 	bl	8003f80 <velotrace_init>
    if(rotary_read_playmode() == search)
 8003f5c:	f7fd f9a4 	bl	80012a8 <rotary_read_playmode>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d105      	bne.n	8003f72 <velotrace_start+0x22>
    {
        velotrace_set_gain(0);
 8003f66:	2000      	movs	r0, #0
 8003f68:	f000 f8f4 	bl	8004154 <velotrace_set_gain>
        velotrace_set_target(0);
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f000 f91d 	bl	80041ac <velotrace_set_target>
    }
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	00000000 	.word	0x00000000
 8003f7c:	3ff00000 	.word	0x3ff00000

08003f80 <velotrace_init>:

void velotrace_init(double samplingtime_)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	ed87 0b00 	vstr	d0, [r7]
    samplingtime = samplingtime_;
 8003f8a:	490c      	ldr	r1, [pc, #48]	; (8003fbc <velotrace_init+0x3c>)
 8003f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f90:	e9c1 2300 	strd	r2, r3, [r1]
    s_error = 0;
 8003f94:	490a      	ldr	r1, [pc, #40]	; (8003fc0 <velotrace_init+0x40>)
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	e9c1 2300 	strd	r2, r3, [r1]
    before_error = 0;
 8003fa2:	4908      	ldr	r1, [pc, #32]	; (8003fc4 <velotrace_init+0x44>)
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	20000720 	.word	0x20000720
 8003fc0:	20000718 	.word	0x20000718
 8003fc4:	20000728 	.word	0x20000728

08003fc8 <velotrace_read_target>:

double velotrace_read_target(unsigned short int i)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	f1c3 030f 	rsb	r3, r3, #15
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fc faa3 	bl	8000524 <__aeabi_i2d>
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <velotrace_read_target+0x58>)
 8003fe4:	f7fc fb08 	bl	80005f8 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <velotrace_read_target+0x5c>)
 8003ff6:	f7fc fc29 	bl	800084c <__aeabi_ddiv>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	f04f 0000 	mov.w	r0, #0
 8004002:	4909      	ldr	r1, [pc, #36]	; (8004028 <velotrace_read_target+0x60>)
 8004004:	f7fc f940 	bl	8000288 <__aeabi_dsub>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	ec43 2b17 	vmov	d7, r2, r3
}
 8004010:	eeb0 0a47 	vmov.f32	s0, s14
 8004014:	eef0 0a67 	vmov.f32	s1, s15
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	408f4000 	.word	0x408f4000
 8004024:	402e0000 	.word	0x402e0000
 8004028:	409f4000 	.word	0x409f4000

0800402c <velotrace_read_gain_kp>:

double velotrace_read_gain_kp(unsigned short int i)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	f1c3 030f 	rsb	r3, r3, #15
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fa71 	bl	8000524 <__aeabi_i2d>
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	f7fc fad5 	bl	80005f8 <__aeabi_dmul>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <velotrace_read_gain_kp+0x58>)
 800405c:	f7fc fbf6 	bl	800084c <__aeabi_ddiv>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	f04f 0000 	mov.w	r0, #0
 8004068:	4907      	ldr	r1, [pc, #28]	; (8004088 <velotrace_read_gain_kp+0x5c>)
 800406a:	f7fc f90d 	bl	8000288 <__aeabi_dsub>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	ec43 2b17 	vmov	d7, r2, r3
}
 8004076:	eeb0 0a47 	vmov.f32	s0, s14
 800407a:	eef0 0a67 	vmov.f32	s1, s15
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	402e0000 	.word	0x402e0000
 8004088:	40180000 	.word	0x40180000
 800408c:	00000000 	.word	0x00000000

08004090 <velotrace_read_gain_ki>:

double velotrace_read_gain_ki(unsigned short int i)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	f1c3 030f 	rsb	r3, r3, #15
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fc fa3f 	bl	8000524 <__aeabi_i2d>
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	f7fc faa3 	bl	80005f8 <__aeabi_dmul>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <velotrace_read_gain_ki+0x60>)
 80040c0:	f7fc fbc4 	bl	800084c <__aeabi_ddiv>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	a107      	add	r1, pc, #28	; (adr r1, 80040e8 <velotrace_read_gain_ki+0x58>)
 80040ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040ce:	f7fc f8db 	bl	8000288 <__aeabi_dsub>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80040da:	eeb0 0a47 	vmov.f32	s0, s14
 80040de:	eef0 0a67 	vmov.f32	s1, s15
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	e0000000 	.word	0xe0000000
 80040ec:	3faeb851 	.word	0x3faeb851
 80040f0:	402e0000 	.word	0x402e0000

080040f4 <velotrace_read_gain_kd>:

double velotrace_read_gain_kd(unsigned short int i)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	f1c3 030f 	rsb	r3, r3, #15
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fa0d 	bl	8000524 <__aeabi_i2d>
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	f7fc fa71 	bl	80005f8 <__aeabi_dmul>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4610      	mov	r0, r2
 800411c:	4619      	mov	r1, r3
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <velotrace_read_gain_kd+0x5c>)
 8004124:	f7fc fb92 	bl	800084c <__aeabi_ddiv>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	f04f 0000 	mov.w	r0, #0
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	f7fc f8a8 	bl	8000288 <__aeabi_dsub>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	ec43 2b17 	vmov	d7, r2, r3
}
 8004140:	eeb0 0a47 	vmov.f32	s0, s14
 8004144:	eef0 0a67 	vmov.f32	s1, s15
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	402e0000 	.word	0x402e0000

08004154 <velotrace_set_gain>:

void velotrace_set_gain(unsigned short int i)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	80fb      	strh	r3, [r7, #6]
    pid.kp = velotrace_read_gain_kp(i);
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ff63 	bl	800402c <velotrace_read_gain_kp>
 8004166:	eeb0 7a40 	vmov.f32	s14, s0
 800416a:	eef0 7a60 	vmov.f32	s15, s1
 800416e:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <velotrace_set_gain+0x54>)
 8004170:	ed83 7b02 	vstr	d7, [r3, #8]
    pid.ki = velotrace_read_gain_ki(i);
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff ff8a 	bl	8004090 <velotrace_read_gain_ki>
 800417c:	eeb0 7a40 	vmov.f32	s14, s0
 8004180:	eef0 7a60 	vmov.f32	s15, s1
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <velotrace_set_gain+0x54>)
 8004186:	ed83 7b04 	vstr	d7, [r3, #16]
    pid.kd = velotrace_read_gain_kd(i);
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ffb1 	bl	80040f4 <velotrace_read_gain_kd>
 8004192:	eeb0 7a40 	vmov.f32	s14, s0
 8004196:	eef0 7a60 	vmov.f32	s15, s1
 800419a:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <velotrace_set_gain+0x54>)
 800419c:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200006f8 	.word	0x200006f8

080041ac <velotrace_set_target>:

void velotrace_set_target(unsigned short int i)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	80fb      	strh	r3, [r7, #6]
    pid.target = velotrace_read_target(i);
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ff05 	bl	8003fc8 <velotrace_read_target>
 80041be:	eeb0 7a40 	vmov.f32	s14, s0
 80041c2:	eef0 7a60 	vmov.f32	s15, s1
 80041c6:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <velotrace_set_target+0x28>)
 80041c8:	ed83 7b00 	vstr	d7, [r3]
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	200006f8 	.word	0x200006f8

080041d8 <velotrace_solve>:

double velotrace_solve(double reference_)
{
 80041d8:	b5b0      	push	{r4, r5, r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	ed87 0b00 	vstr	d0, [r7]
    double error = reference_ - pid.target;
 80041e2:	4b39      	ldr	r3, [pc, #228]	; (80042c8 <velotrace_solve+0xf0>)
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041ec:	f7fc f84c 	bl	8000288 <__aeabi_dsub>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double d_error = error - before_error;
 80041f8:	4b34      	ldr	r3, [pc, #208]	; (80042cc <velotrace_solve+0xf4>)
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004202:	f7fc f841 	bl	8000288 <__aeabi_dsub>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_error += error;
 800420e:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <velotrace_solve+0xf8>)
 8004210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004218:	f7fc f838 	bl	800028c <__adddf3>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	492b      	ldr	r1, [pc, #172]	; (80042d0 <velotrace_solve+0xf8>)
 8004222:	e9c1 2300 	strd	r2, r3, [r1]
    double result = pid.kp * error + pid. ki * s_error * samplingtime + pid.kd * d_error / samplingtime;
 8004226:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <velotrace_solve+0xf0>)
 8004228:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800422c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004230:	f7fc f9e2 	bl	80005f8 <__aeabi_dmul>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4614      	mov	r4, r2
 800423a:	461d      	mov	r5, r3
 800423c:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <velotrace_solve+0xf0>)
 800423e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004242:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <velotrace_solve+0xf8>)
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f7fc f9d6 	bl	80005f8 <__aeabi_dmul>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <velotrace_solve+0xfc>)
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f7fc f9cd 	bl	80005f8 <__aeabi_dmul>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f7fc f811 	bl	800028c <__adddf3>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4614      	mov	r4, r2
 8004270:	461d      	mov	r5, r3
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <velotrace_solve+0xf0>)
 8004274:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004278:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800427c:	f7fc f9bc 	bl	80005f8 <__aeabi_dmul>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4610      	mov	r0, r2
 8004286:	4619      	mov	r1, r3
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <velotrace_solve+0xfc>)
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f7fc fadd 	bl	800084c <__aeabi_ddiv>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4620      	mov	r0, r4
 8004298:	4629      	mov	r1, r5
 800429a:	f7fb fff7 	bl	800028c <__adddf3>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    error = before_error;
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <velotrace_solve+0xf4>)
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result;
 80042b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b4:	ec43 2b17 	vmov	d7, r2, r3
}
 80042b8:	eeb0 0a47 	vmov.f32	s0, s14
 80042bc:	eef0 0a67 	vmov.f32	s1, s15
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bdb0      	pop	{r4, r5, r7, pc}
 80042c6:	bf00      	nop
 80042c8:	200006f8 	.word	0x200006f8
 80042cc:	20000728 	.word	0x20000728
 80042d0:	20000718 	.word	0x20000718
 80042d4:	20000720 	.word	0x20000720

080042d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004310 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042de:	e003      	b.n	80042e8 <LoopCopyDataInit>

080042e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042e6:	3104      	adds	r1, #4

080042e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042e8:	480b      	ldr	r0, [pc, #44]	; (8004318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042f0:	d3f6      	bcc.n	80042e0 <CopyDataInit>
  ldr  r2, =_sbss
 80042f2:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042f4:	e002      	b.n	80042fc <LoopFillZerobss>

080042f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042f8:	f842 3b04 	str.w	r3, [r2], #4

080042fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004300:	d3f9      	bcc.n	80042f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004302:	f7ff fa6b 	bl	80037dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004306:	f004 fab9 	bl	800887c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800430a:	f7fd fc7b 	bl	8001c04 <main>
  bx  lr    
 800430e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004310:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004314:	0800d9cc 	.word	0x0800d9cc
  ldr  r0, =_sdata
 8004318:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800431c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8004320:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8004324:	20000744 	.word	0x20000744

08004328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004328:	e7fe      	b.n	8004328 <ADC_IRQHandler>
	...

0800432c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <HAL_Init+0x40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0d      	ldr	r2, [pc, #52]	; (800436c <HAL_Init+0x40>)
 8004336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_Init+0x40>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <HAL_Init+0x40>)
 8004342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004348:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_Init+0x40>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a07      	ldr	r2, [pc, #28]	; (800436c <HAL_Init+0x40>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004354:	2003      	movs	r0, #3
 8004356:	f000 fd83 	bl	8004e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800435a:	2000      	movs	r0, #0
 800435c:	f000 f808 	bl	8004370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004360:	f7fe fe04 	bl	8002f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023c00 	.word	0x40023c00

08004370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004378:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_InitTick+0x54>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_InitTick+0x58>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	4619      	mov	r1, r3
 8004382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004386:	fbb3 f3f1 	udiv	r3, r3, r1
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fd9b 	bl	8004eca <HAL_SYSTICK_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e00e      	b.n	80043bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b0f      	cmp	r3, #15
 80043a2:	d80a      	bhi.n	80043ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043a4:	2200      	movs	r2, #0
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	f000 fd63 	bl	8004e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043b0:	4a06      	ldr	r2, [pc, #24]	; (80043cc <HAL_InitTick+0x5c>)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000000 	.word	0x20000000
 80043c8:	20000008 	.word	0x20000008
 80043cc:	20000004 	.word	0x20000004

080043d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_IncTick+0x20>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_IncTick+0x24>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4413      	add	r3, r2
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <HAL_IncTick+0x24>)
 80043e2:	6013      	str	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000008 	.word	0x20000008
 80043f4:	20000730 	.word	0x20000730

080043f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return uwTick;
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <HAL_GetTick+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000730 	.word	0x20000730

08004410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004418:	f7ff ffee 	bl	80043f8 <HAL_GetTick>
 800441c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d005      	beq.n	8004436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_Delay+0x44>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004436:	bf00      	nop
 8004438:	f7ff ffde 	bl	80043f8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d8f7      	bhi.n	8004438 <HAL_Delay+0x28>
  {
  }
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000008 	.word	0x20000008

08004458 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e033      	b.n	80044d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fe fda4 	bl	8002fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	d118      	bne.n	80044c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800449e:	f023 0302 	bic.w	r3, r3, #2
 80044a2:	f043 0202 	orr.w	r2, r3, #2
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa8a 	bl	80049c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	f043 0201 	orr.w	r2, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
 80044c6:	e001      	b.n	80044cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_Start_DMA+0x1e>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e0cc      	b.n	8004698 <HAL_ADC_Start_DMA+0x1b8>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d018      	beq.n	8004546 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004524:	4b5e      	ldr	r3, [pc, #376]	; (80046a0 <HAL_ADC_Start_DMA+0x1c0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a5e      	ldr	r2, [pc, #376]	; (80046a4 <HAL_ADC_Start_DMA+0x1c4>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0c9a      	lsrs	r2, r3, #18
 8004530:	4613      	mov	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4413      	add	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004538:	e002      	b.n	8004540 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3b01      	subs	r3, #1
 800453e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f9      	bne.n	800453a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 80a0 	bne.w	8004696 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004580:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d106      	bne.n	80045a4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f023 0206 	bic.w	r2, r3, #6
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
 80045a2:	e002      	b.n	80045aa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045b2:	4b3d      	ldr	r3, [pc, #244]	; (80046a8 <HAL_ADC_Start_DMA+0x1c8>)
 80045b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	4a3c      	ldr	r2, [pc, #240]	; (80046ac <HAL_ADC_Start_DMA+0x1cc>)
 80045bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	4a3b      	ldr	r2, [pc, #236]	; (80046b0 <HAL_ADC_Start_DMA+0x1d0>)
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	4a3a      	ldr	r2, [pc, #232]	; (80046b4 <HAL_ADC_Start_DMA+0x1d4>)
 80045cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80045d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80045e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	334c      	adds	r3, #76	; 0x4c
 8004602:	4619      	mov	r1, r3
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f000 fd1a 	bl	8005040 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	2b00      	cmp	r3, #0
 8004616:	d12a      	bne.n	800466e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a26      	ldr	r2, [pc, #152]	; (80046b8 <HAL_ADC_Start_DMA+0x1d8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d015      	beq.n	800464e <HAL_ADC_Start_DMA+0x16e>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a25      	ldr	r2, [pc, #148]	; (80046bc <HAL_ADC_Start_DMA+0x1dc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d105      	bne.n	8004638 <HAL_ADC_Start_DMA+0x158>
 800462c:	4b1e      	ldr	r3, [pc, #120]	; (80046a8 <HAL_ADC_Start_DMA+0x1c8>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <HAL_ADC_Start_DMA+0x1e0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d129      	bne.n	8004696 <HAL_ADC_Start_DMA+0x1b6>
 8004642:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_ADC_Start_DMA+0x1c8>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b00      	cmp	r3, #0
 800464c:	d123      	bne.n	8004696 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11c      	bne.n	8004696 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	e013      	b.n	8004696 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a11      	ldr	r2, [pc, #68]	; (80046b8 <HAL_ADC_Start_DMA+0x1d8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d10e      	bne.n	8004696 <HAL_ADC_Start_DMA+0x1b6>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d107      	bne.n	8004696 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004694:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000000 	.word	0x20000000
 80046a4:	431bde83 	.word	0x431bde83
 80046a8:	40012300 	.word	0x40012300
 80046ac:	08004bbd 	.word	0x08004bbd
 80046b0:	08004c77 	.word	0x08004c77
 80046b4:	08004c93 	.word	0x08004c93
 80046b8:	40012000 	.word	0x40012000
 80046bc:	40012100 	.word	0x40012100
 80046c0:	40012200 	.word	0x40012200

080046c4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_ADC_Stop_DMA+0x1a>
 80046da:	2302      	movs	r3, #2
 80046dc:	e038      	b.n	8004750 <HAL_ADC_Stop_DMA+0x8c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d120      	bne.n	8004746 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004712:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	4618      	mov	r0, r3
 800471a:	f000 fce9 	bl	80050f0 <HAL_DMA_Abort>
 800471e:	4603      	mov	r3, r0
 8004720:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004730:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	f043 0201 	orr.w	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_ADC_ConfigChannel+0x1c>
 8004798:	2302      	movs	r3, #2
 800479a:	e105      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x228>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b09      	cmp	r3, #9
 80047aa:	d925      	bls.n	80047f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68d9      	ldr	r1, [r3, #12]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	4613      	mov	r3, r2
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	4413      	add	r3, r2
 80047c0:	3b1e      	subs	r3, #30
 80047c2:	2207      	movs	r2, #7
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43da      	mvns	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	400a      	ands	r2, r1
 80047d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68d9      	ldr	r1, [r3, #12]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	4618      	mov	r0, r3
 80047e4:	4603      	mov	r3, r0
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4403      	add	r3, r0
 80047ea:	3b1e      	subs	r3, #30
 80047ec:	409a      	lsls	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	60da      	str	r2, [r3, #12]
 80047f6:	e022      	b.n	800483e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6919      	ldr	r1, [r3, #16]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	4613      	mov	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	4413      	add	r3, r2
 800480c:	2207      	movs	r2, #7
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43da      	mvns	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	400a      	ands	r2, r1
 800481a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6919      	ldr	r1, [r3, #16]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	4618      	mov	r0, r3
 800482e:	4603      	mov	r3, r0
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4403      	add	r3, r0
 8004834:	409a      	lsls	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b06      	cmp	r3, #6
 8004844:	d824      	bhi.n	8004890 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	3b05      	subs	r3, #5
 8004858:	221f      	movs	r2, #31
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43da      	mvns	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	400a      	ands	r2, r1
 8004866:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	b29b      	uxth	r3, r3
 8004874:	4618      	mov	r0, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	3b05      	subs	r3, #5
 8004882:	fa00 f203 	lsl.w	r2, r0, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	635a      	str	r2, [r3, #52]	; 0x34
 800488e:	e04c      	b.n	800492a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d824      	bhi.n	80048e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	3b23      	subs	r3, #35	; 0x23
 80048aa:	221f      	movs	r2, #31
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43da      	mvns	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	400a      	ands	r2, r1
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	4618      	mov	r0, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	3b23      	subs	r3, #35	; 0x23
 80048d4:	fa00 f203 	lsl.w	r2, r0, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
 80048e0:	e023      	b.n	800492a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	3b41      	subs	r3, #65	; 0x41
 80048f4:	221f      	movs	r2, #31
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43da      	mvns	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	400a      	ands	r2, r1
 8004902:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	4618      	mov	r0, r3
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	3b41      	subs	r3, #65	; 0x41
 800491e:	fa00 f203 	lsl.w	r2, r0, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800492a:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <HAL_ADC_ConfigChannel+0x234>)
 800492c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_ADC_ConfigChannel+0x238>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d109      	bne.n	800494c <HAL_ADC_ConfigChannel+0x1cc>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b12      	cmp	r3, #18
 800493e:	d105      	bne.n	800494c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <HAL_ADC_ConfigChannel+0x238>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d123      	bne.n	800499e <HAL_ADC_ConfigChannel+0x21e>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b10      	cmp	r3, #16
 800495c:	d003      	beq.n	8004966 <HAL_ADC_ConfigChannel+0x1e6>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b11      	cmp	r3, #17
 8004964:	d11b      	bne.n	800499e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b10      	cmp	r3, #16
 8004978:	d111      	bne.n	800499e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <HAL_ADC_ConfigChannel+0x23c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <HAL_ADC_ConfigChannel+0x240>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	0c9a      	lsrs	r2, r3, #18
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004990:	e002      	b.n	8004998 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	3b01      	subs	r3, #1
 8004996:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f9      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40012300 	.word	0x40012300
 80049b8:	40012000 	.word	0x40012000
 80049bc:	20000000 	.word	0x20000000
 80049c0:	431bde83 	.word	0x431bde83

080049c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049cc:	4b79      	ldr	r3, [pc, #484]	; (8004bb4 <ADC_Init+0x1f0>)
 80049ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6859      	ldr	r1, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	021a      	lsls	r2, r3, #8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6859      	ldr	r1, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6899      	ldr	r1, [r3, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	4a58      	ldr	r2, [pc, #352]	; (8004bb8 <ADC_Init+0x1f4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d022      	beq.n	8004aa2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6899      	ldr	r1, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6899      	ldr	r1, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	e00f      	b.n	8004ac2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ac0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0202 	bic.w	r2, r2, #2
 8004ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6899      	ldr	r1, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	7e1b      	ldrb	r3, [r3, #24]
 8004adc:	005a      	lsls	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01b      	beq.n	8004b28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004afe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6859      	ldr	r1, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	035a      	lsls	r2, r3, #13
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	e007      	b.n	8004b38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	051a      	lsls	r2, r3, #20
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6899      	ldr	r1, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b7a:	025a      	lsls	r2, r3, #9
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6899      	ldr	r1, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	029a      	lsls	r2, r3, #10
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	609a      	str	r2, [r3, #8]
}
 8004ba8:	bf00      	nop
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40012300 	.word	0x40012300
 8004bb8:	0f000001 	.word	0x0f000001

08004bbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d13c      	bne.n	8004c50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d12b      	bne.n	8004c48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d127      	bne.n	8004c48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d119      	bne.n	8004c48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0220 	bic.w	r2, r2, #32
 8004c22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d105      	bne.n	8004c48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	f043 0201 	orr.w	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7fc fe1f 	bl	800188c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c4e:	e00e      	b.n	8004c6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff fd85 	bl	800476c <HAL_ADC_ErrorCallback>
}
 8004c62:	e004      	b.n	8004c6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	4798      	blx	r3
}
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff fd67 	bl	8004758 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2240      	movs	r2, #64	; 0x40
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004caa:	f043 0204 	orr.w	r2, r3, #4
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7ff fd5a 	bl	800476c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <__NVIC_SetPriorityGrouping+0x44>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cf2:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	60d3      	str	r3, [r2, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <__NVIC_GetPriorityGrouping+0x18>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	f003 0307 	and.w	r3, r3, #7
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	e000ed00 	.word	0xe000ed00

08004d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	db0b      	blt.n	8004d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	f003 021f 	and.w	r2, r3, #31
 8004d3c:	4907      	ldr	r1, [pc, #28]	; (8004d5c <__NVIC_EnableIRQ+0x38>)
 8004d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	2001      	movs	r0, #1
 8004d46:	fa00 f202 	lsl.w	r2, r0, r2
 8004d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	e000e100 	.word	0xe000e100

08004d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	6039      	str	r1, [r7, #0]
 8004d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	db0a      	blt.n	8004d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	490c      	ldr	r1, [pc, #48]	; (8004dac <__NVIC_SetPriority+0x4c>)
 8004d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7e:	0112      	lsls	r2, r2, #4
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	440b      	add	r3, r1
 8004d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d88:	e00a      	b.n	8004da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	4908      	ldr	r1, [pc, #32]	; (8004db0 <__NVIC_SetPriority+0x50>)
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	3b04      	subs	r3, #4
 8004d98:	0112      	lsls	r2, r2, #4
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	761a      	strb	r2, [r3, #24]
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	e000e100 	.word	0xe000e100
 8004db0:	e000ed00 	.word	0xe000ed00

08004db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	; 0x24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f1c3 0307 	rsb	r3, r3, #7
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	bf28      	it	cs
 8004dd2:	2304      	movcs	r3, #4
 8004dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	2b06      	cmp	r3, #6
 8004ddc:	d902      	bls.n	8004de4 <NVIC_EncodePriority+0x30>
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	3b03      	subs	r3, #3
 8004de2:	e000      	b.n	8004de6 <NVIC_EncodePriority+0x32>
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43da      	mvns	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	401a      	ands	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	43d9      	mvns	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e0c:	4313      	orrs	r3, r2
         );
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3724      	adds	r7, #36	; 0x24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e2c:	d301      	bcc.n	8004e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e00f      	b.n	8004e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <SysTick_Config+0x40>)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e3a:	210f      	movs	r1, #15
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	f7ff ff8e 	bl	8004d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <SysTick_Config+0x40>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e4a:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <SysTick_Config+0x40>)
 8004e4c:	2207      	movs	r2, #7
 8004e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	e000e010 	.word	0xe000e010

08004e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ff29 	bl	8004cc0 <__NVIC_SetPriorityGrouping>
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b086      	sub	sp, #24
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e88:	f7ff ff3e 	bl	8004d08 <__NVIC_GetPriorityGrouping>
 8004e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	f7ff ff8e 	bl	8004db4 <NVIC_EncodePriority>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff ff5d 	bl	8004d60 <__NVIC_SetPriority>
}
 8004ea6:	bf00      	nop
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff ff31 	bl	8004d24 <__NVIC_EnableIRQ>
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff ffa2 	bl	8004e1c <SysTick_Config>
 8004ed8:	4603      	mov	r3, r0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ef0:	f7ff fa82 	bl	80043f8 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e099      	b.n	8005034 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f20:	e00f      	b.n	8004f42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f22:	f7ff fa69 	bl	80043f8 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	d908      	bls.n	8004f42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2203      	movs	r2, #3
 8004f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e078      	b.n	8005034 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e8      	bne.n	8004f22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4b38      	ldr	r3, [pc, #224]	; (800503c <HAL_DMA_Init+0x158>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d107      	bne.n	8004fac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0307 	bic.w	r3, r3, #7
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d117      	bne.n	8005006 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00e      	beq.n	8005006 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fadf 	bl	80055ac <DMA_CheckFifoParam>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2240      	movs	r2, #64	; 0x40
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005002:	2301      	movs	r3, #1
 8005004:	e016      	b.n	8005034 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fa96 	bl	8005540 <DMA_CalcBaseAndBitshift>
 8005014:	4603      	mov	r3, r0
 8005016:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501c:	223f      	movs	r2, #63	; 0x3f
 800501e:	409a      	lsls	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	f010803f 	.word	0xf010803f

08005040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_DMA_Start_IT+0x26>
 8005062:	2302      	movs	r3, #2
 8005064:	e040      	b.n	80050e8 <HAL_DMA_Start_IT+0xa8>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b01      	cmp	r3, #1
 8005078:	d12f      	bne.n	80050da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fa28 	bl	80054e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005098:	223f      	movs	r2, #63	; 0x3f
 800509a:	409a      	lsls	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0216 	orr.w	r2, r2, #22
 80050ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d007      	beq.n	80050c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0208 	orr.w	r2, r2, #8
 80050c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e005      	b.n	80050e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
 80050e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050fe:	f7ff f97b 	bl	80043f8 <HAL_GetTick>
 8005102:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d008      	beq.n	8005122 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e052      	b.n	80051c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0216 	bic.w	r2, r2, #22
 8005130:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005140:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <HAL_DMA_Abort+0x62>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0208 	bic.w	r2, r2, #8
 8005160:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005172:	e013      	b.n	800519c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005174:	f7ff f940 	bl	80043f8 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b05      	cmp	r3, #5
 8005180:	d90c      	bls.n	800519c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2203      	movs	r2, #3
 8005194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e015      	b.n	80051c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e4      	bne.n	8005174 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ae:	223f      	movs	r2, #63	; 0x3f
 80051b0:	409a      	lsls	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80051dc:	4b92      	ldr	r3, [pc, #584]	; (8005428 <HAL_DMA_IRQHandler+0x258>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a92      	ldr	r2, [pc, #584]	; (800542c <HAL_DMA_IRQHandler+0x25c>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	0a9b      	lsrs	r3, r3, #10
 80051e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	2208      	movs	r2, #8
 80051fc:	409a      	lsls	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4013      	ands	r3, r2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01a      	beq.n	800523c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d013      	beq.n	800523c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0204 	bic.w	r2, r2, #4
 8005222:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005228:	2208      	movs	r2, #8
 800522a:	409a      	lsls	r2, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005234:	f043 0201 	orr.w	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005240:	2201      	movs	r2, #1
 8005242:	409a      	lsls	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d012      	beq.n	8005272 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525e:	2201      	movs	r2, #1
 8005260:	409a      	lsls	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f043 0202 	orr.w	r2, r3, #2
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005276:	2204      	movs	r2, #4
 8005278:	409a      	lsls	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4013      	ands	r3, r2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d012      	beq.n	80052a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005294:	2204      	movs	r2, #4
 8005296:	409a      	lsls	r2, r3
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	f043 0204 	orr.w	r2, r3, #4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ac:	2210      	movs	r2, #16
 80052ae:	409a      	lsls	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d043      	beq.n	8005340 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d03c      	beq.n	8005340 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ca:	2210      	movs	r2, #16
 80052cc:	409a      	lsls	r2, r3
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d018      	beq.n	8005312 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d108      	bne.n	8005300 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d024      	beq.n	8005340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
 80052fe:	e01f      	b.n	8005340 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01b      	beq.n	8005340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
 8005310:	e016      	b.n	8005340 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d107      	bne.n	8005330 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0208 	bic.w	r2, r2, #8
 800532e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005344:	2220      	movs	r2, #32
 8005346:	409a      	lsls	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 808e 	beq.w	800546e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8086 	beq.w	800546e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	2220      	movs	r2, #32
 8005368:	409a      	lsls	r2, r3
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b05      	cmp	r3, #5
 8005378:	d136      	bne.n	80053e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0216 	bic.w	r2, r2, #22
 8005388:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005398:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <HAL_DMA_IRQHandler+0x1da>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0208 	bic.w	r2, r2, #8
 80053b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053be:	223f      	movs	r2, #63	; 0x3f
 80053c0:	409a      	lsls	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d07d      	beq.n	80054da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	4798      	blx	r3
        }
        return;
 80053e6:	e078      	b.n	80054da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01c      	beq.n	8005430 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d108      	bne.n	8005416 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	2b00      	cmp	r3, #0
 800540a:	d030      	beq.n	800546e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
 8005414:	e02b      	b.n	800546e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d027      	beq.n	800546e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4798      	blx	r3
 8005426:	e022      	b.n	800546e <HAL_DMA_IRQHandler+0x29e>
 8005428:	20000000 	.word	0x20000000
 800542c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10f      	bne.n	800545e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0210 	bic.w	r2, r2, #16
 800544c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	2b00      	cmp	r3, #0
 8005474:	d032      	beq.n	80054dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d022      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2205      	movs	r2, #5
 8005486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0201 	bic.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3301      	adds	r3, #1
 800549e:	60bb      	str	r3, [r7, #8]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d307      	bcc.n	80054b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1f2      	bne.n	800549a <HAL_DMA_IRQHandler+0x2ca>
 80054b4:	e000      	b.n	80054b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80054b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
 80054d8:	e000      	b.n	80054dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80054da:	bf00      	nop
    }
  }
}
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop

080054e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005500:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d108      	bne.n	8005524 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005522:	e007      	b.n	8005534 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	3b10      	subs	r3, #16
 8005550:	4a14      	ldr	r2, [pc, #80]	; (80055a4 <DMA_CalcBaseAndBitshift+0x64>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	091b      	lsrs	r3, r3, #4
 8005558:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800555a:	4a13      	ldr	r2, [pc, #76]	; (80055a8 <DMA_CalcBaseAndBitshift+0x68>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d909      	bls.n	8005582 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005576:	f023 0303 	bic.w	r3, r3, #3
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	659a      	str	r2, [r3, #88]	; 0x58
 8005580:	e007      	b.n	8005592 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800558a:	f023 0303 	bic.w	r3, r3, #3
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	aaaaaaab 	.word	0xaaaaaaab
 80055a8:	0800d4fc 	.word	0x0800d4fc

080055ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d11f      	bne.n	8005606 <DMA_CheckFifoParam+0x5a>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d856      	bhi.n	800567a <DMA_CheckFifoParam+0xce>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <DMA_CheckFifoParam+0x28>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	080055f7 	.word	0x080055f7
 80055dc:	080055e5 	.word	0x080055e5
 80055e0:	0800567b 	.word	0x0800567b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d046      	beq.n	800567e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f4:	e043      	b.n	800567e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055fe:	d140      	bne.n	8005682 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005604:	e03d      	b.n	8005682 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560e:	d121      	bne.n	8005654 <DMA_CheckFifoParam+0xa8>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b03      	cmp	r3, #3
 8005614:	d837      	bhi.n	8005686 <DMA_CheckFifoParam+0xda>
 8005616:	a201      	add	r2, pc, #4	; (adr r2, 800561c <DMA_CheckFifoParam+0x70>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	0800562d 	.word	0x0800562d
 8005620:	08005633 	.word	0x08005633
 8005624:	0800562d 	.word	0x0800562d
 8005628:	08005645 	.word	0x08005645
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
      break;
 8005630:	e030      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d025      	beq.n	800568a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005642:	e022      	b.n	800568a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800564c:	d11f      	bne.n	800568e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005652:	e01c      	b.n	800568e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d903      	bls.n	8005662 <DMA_CheckFifoParam+0xb6>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b03      	cmp	r3, #3
 800565e:	d003      	beq.n	8005668 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005660:	e018      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
      break;
 8005666:	e015      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00e      	beq.n	8005692 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
      break;
 8005678:	e00b      	b.n	8005692 <DMA_CheckFifoParam+0xe6>
      break;
 800567a:	bf00      	nop
 800567c:	e00a      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
      break;
 800567e:	bf00      	nop
 8005680:	e008      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
      break;
 8005682:	bf00      	nop
 8005684:	e006      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
      break;
 8005686:	bf00      	nop
 8005688:	e004      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
      break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
      break;   
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <DMA_CheckFifoParam+0xe8>
      break;
 8005692:	bf00      	nop
    }
  } 
  
  return status; 
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop

080056a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b089      	sub	sp, #36	; 0x24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	e16b      	b.n	8005998 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056c0:	2201      	movs	r2, #1
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4013      	ands	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	429a      	cmp	r2, r3
 80056da:	f040 815a 	bne.w	8005992 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d00b      	beq.n	80056fe <HAL_GPIO_Init+0x5a>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d007      	beq.n	80056fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056f2:	2b11      	cmp	r3, #17
 80056f4:	d003      	beq.n	80056fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b12      	cmp	r3, #18
 80056fc:	d130      	bne.n	8005760 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	2203      	movs	r2, #3
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43db      	mvns	r3, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4013      	ands	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005734:	2201      	movs	r2, #1
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4013      	ands	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	f003 0201 	and.w	r2, r3, #1
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	2203      	movs	r2, #3
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43db      	mvns	r3, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4013      	ands	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d003      	beq.n	80057a0 <HAL_GPIO_Init+0xfc>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b12      	cmp	r3, #18
 800579e:	d123      	bne.n	80057e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	08da      	lsrs	r2, r3, #3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3208      	adds	r2, #8
 80057a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	220f      	movs	r2, #15
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	43db      	mvns	r3, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4013      	ands	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	08da      	lsrs	r2, r3, #3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3208      	adds	r2, #8
 80057e2:	69b9      	ldr	r1, [r7, #24]
 80057e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	2203      	movs	r2, #3
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f003 0203 	and.w	r2, r3, #3
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	4313      	orrs	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80b4 	beq.w	8005992 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	4b60      	ldr	r3, [pc, #384]	; (80059b0 <HAL_GPIO_Init+0x30c>)
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	4a5f      	ldr	r2, [pc, #380]	; (80059b0 <HAL_GPIO_Init+0x30c>)
 8005834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005838:	6453      	str	r3, [r2, #68]	; 0x44
 800583a:	4b5d      	ldr	r3, [pc, #372]	; (80059b0 <HAL_GPIO_Init+0x30c>)
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005846:	4a5b      	ldr	r2, [pc, #364]	; (80059b4 <HAL_GPIO_Init+0x310>)
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	089b      	lsrs	r3, r3, #2
 800584c:	3302      	adds	r3, #2
 800584e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	220f      	movs	r2, #15
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	43db      	mvns	r3, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a52      	ldr	r2, [pc, #328]	; (80059b8 <HAL_GPIO_Init+0x314>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02b      	beq.n	80058ca <HAL_GPIO_Init+0x226>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a51      	ldr	r2, [pc, #324]	; (80059bc <HAL_GPIO_Init+0x318>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d025      	beq.n	80058c6 <HAL_GPIO_Init+0x222>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a50      	ldr	r2, [pc, #320]	; (80059c0 <HAL_GPIO_Init+0x31c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01f      	beq.n	80058c2 <HAL_GPIO_Init+0x21e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a4f      	ldr	r2, [pc, #316]	; (80059c4 <HAL_GPIO_Init+0x320>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d019      	beq.n	80058be <HAL_GPIO_Init+0x21a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a4e      	ldr	r2, [pc, #312]	; (80059c8 <HAL_GPIO_Init+0x324>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <HAL_GPIO_Init+0x216>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a4d      	ldr	r2, [pc, #308]	; (80059cc <HAL_GPIO_Init+0x328>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00d      	beq.n	80058b6 <HAL_GPIO_Init+0x212>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a4c      	ldr	r2, [pc, #304]	; (80059d0 <HAL_GPIO_Init+0x32c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <HAL_GPIO_Init+0x20e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a4b      	ldr	r2, [pc, #300]	; (80059d4 <HAL_GPIO_Init+0x330>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d101      	bne.n	80058ae <HAL_GPIO_Init+0x20a>
 80058aa:	2307      	movs	r3, #7
 80058ac:	e00e      	b.n	80058cc <HAL_GPIO_Init+0x228>
 80058ae:	2308      	movs	r3, #8
 80058b0:	e00c      	b.n	80058cc <HAL_GPIO_Init+0x228>
 80058b2:	2306      	movs	r3, #6
 80058b4:	e00a      	b.n	80058cc <HAL_GPIO_Init+0x228>
 80058b6:	2305      	movs	r3, #5
 80058b8:	e008      	b.n	80058cc <HAL_GPIO_Init+0x228>
 80058ba:	2304      	movs	r3, #4
 80058bc:	e006      	b.n	80058cc <HAL_GPIO_Init+0x228>
 80058be:	2303      	movs	r3, #3
 80058c0:	e004      	b.n	80058cc <HAL_GPIO_Init+0x228>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e002      	b.n	80058cc <HAL_GPIO_Init+0x228>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <HAL_GPIO_Init+0x228>
 80058ca:	2300      	movs	r3, #0
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	f002 0203 	and.w	r2, r2, #3
 80058d2:	0092      	lsls	r2, r2, #2
 80058d4:	4093      	lsls	r3, r2
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4313      	orrs	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058dc:	4935      	ldr	r1, [pc, #212]	; (80059b4 <HAL_GPIO_Init+0x310>)
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	089b      	lsrs	r3, r3, #2
 80058e2:	3302      	adds	r3, #2
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058ea:	4b3b      	ldr	r3, [pc, #236]	; (80059d8 <HAL_GPIO_Init+0x334>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	43db      	mvns	r3, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4013      	ands	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800590e:	4a32      	ldr	r2, [pc, #200]	; (80059d8 <HAL_GPIO_Init+0x334>)
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005914:	4b30      	ldr	r3, [pc, #192]	; (80059d8 <HAL_GPIO_Init+0x334>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	43db      	mvns	r3, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4013      	ands	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005938:	4a27      	ldr	r2, [pc, #156]	; (80059d8 <HAL_GPIO_Init+0x334>)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800593e:	4b26      	ldr	r3, [pc, #152]	; (80059d8 <HAL_GPIO_Init+0x334>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	43db      	mvns	r3, r3
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4013      	ands	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005962:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <HAL_GPIO_Init+0x334>)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005968:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <HAL_GPIO_Init+0x334>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800598c:	4a12      	ldr	r2, [pc, #72]	; (80059d8 <HAL_GPIO_Init+0x334>)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3301      	adds	r3, #1
 8005996:	61fb      	str	r3, [r7, #28]
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	2b0f      	cmp	r3, #15
 800599c:	f67f ae90 	bls.w	80056c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	3724      	adds	r7, #36	; 0x24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40013800 	.word	0x40013800
 80059b8:	40020000 	.word	0x40020000
 80059bc:	40020400 	.word	0x40020400
 80059c0:	40020800 	.word	0x40020800
 80059c4:	40020c00 	.word	0x40020c00
 80059c8:	40021000 	.word	0x40021000
 80059cc:	40021400 	.word	0x40021400
 80059d0:	40021800 	.word	0x40021800
 80059d4:	40021c00 	.word	0x40021c00
 80059d8:	40013c00 	.word	0x40013c00

080059dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059f4:	2301      	movs	r3, #1
 80059f6:	73fb      	strb	r3, [r7, #15]
 80059f8:	e001      	b.n	80059fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	807b      	strh	r3, [r7, #2]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a1c:	787b      	ldrb	r3, [r7, #1]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a22:	887a      	ldrh	r2, [r7, #2]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a28:	e003      	b.n	8005a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	041a      	lsls	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	619a      	str	r2, [r3, #24]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e12b      	b.n	8005caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fd fb5c 	bl	8003124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2224      	movs	r2, #36	; 0x24
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005aa4:	f000 fd52 	bl	800654c <HAL_RCC_GetPCLK1Freq>
 8005aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4a81      	ldr	r2, [pc, #516]	; (8005cb4 <HAL_I2C_Init+0x274>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d807      	bhi.n	8005ac4 <HAL_I2C_Init+0x84>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4a80      	ldr	r2, [pc, #512]	; (8005cb8 <HAL_I2C_Init+0x278>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	bf94      	ite	ls
 8005abc:	2301      	movls	r3, #1
 8005abe:	2300      	movhi	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	e006      	b.n	8005ad2 <HAL_I2C_Init+0x92>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a7d      	ldr	r2, [pc, #500]	; (8005cbc <HAL_I2C_Init+0x27c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	bf94      	ite	ls
 8005acc:	2301      	movls	r3, #1
 8005ace:	2300      	movhi	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e0e7      	b.n	8005caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4a78      	ldr	r2, [pc, #480]	; (8005cc0 <HAL_I2C_Init+0x280>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	0c9b      	lsrs	r3, r3, #18
 8005ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	4a6a      	ldr	r2, [pc, #424]	; (8005cb4 <HAL_I2C_Init+0x274>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d802      	bhi.n	8005b14 <HAL_I2C_Init+0xd4>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	3301      	adds	r3, #1
 8005b12:	e009      	b.n	8005b28 <HAL_I2C_Init+0xe8>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
 8005b1e:	4a69      	ldr	r2, [pc, #420]	; (8005cc4 <HAL_I2C_Init+0x284>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	099b      	lsrs	r3, r3, #6
 8005b26:	3301      	adds	r3, #1
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6812      	ldr	r2, [r2, #0]
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	495c      	ldr	r1, [pc, #368]	; (8005cb4 <HAL_I2C_Init+0x274>)
 8005b44:	428b      	cmp	r3, r1
 8005b46:	d819      	bhi.n	8005b7c <HAL_I2C_Init+0x13c>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1e59      	subs	r1, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b56:	1c59      	adds	r1, r3, #1
 8005b58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b5c:	400b      	ands	r3, r1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <HAL_I2C_Init+0x138>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1e59      	subs	r1, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b70:	3301      	adds	r3, #1
 8005b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b76:	e051      	b.n	8005c1c <HAL_I2C_Init+0x1dc>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	e04f      	b.n	8005c1c <HAL_I2C_Init+0x1dc>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d111      	bne.n	8005ba8 <HAL_I2C_Init+0x168>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	1e58      	subs	r0, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	440b      	add	r3, r1
 8005b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b96:	3301      	adds	r3, #1
 8005b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2301      	moveq	r3, #1
 8005ba2:	2300      	movne	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	e012      	b.n	8005bce <HAL_I2C_Init+0x18e>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1e58      	subs	r0, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6859      	ldr	r1, [r3, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	0099      	lsls	r1, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_I2C_Init+0x196>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e022      	b.n	8005c1c <HAL_I2C_Init+0x1dc>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10e      	bne.n	8005bfc <HAL_I2C_Init+0x1bc>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1e58      	subs	r0, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6859      	ldr	r1, [r3, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	440b      	add	r3, r1
 8005bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfa:	e00f      	b.n	8005c1c <HAL_I2C_Init+0x1dc>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1e58      	subs	r0, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6859      	ldr	r1, [r3, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	0099      	lsls	r1, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c12:	3301      	adds	r3, #1
 8005c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	6809      	ldr	r1, [r1, #0]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69da      	ldr	r2, [r3, #28]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6911      	ldr	r1, [r2, #16]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	68d2      	ldr	r2, [r2, #12]
 8005c56:	4311      	orrs	r1, r2
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6812      	ldr	r2, [r2, #0]
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	000186a0 	.word	0x000186a0
 8005cb8:	001e847f 	.word	0x001e847f
 8005cbc:	003d08ff 	.word	0x003d08ff
 8005cc0:	431bde83 	.word	0x431bde83
 8005cc4:	10624dd3 	.word	0x10624dd3

08005cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e25b      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d075      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ce6:	4ba3      	ldr	r3, [pc, #652]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d00c      	beq.n	8005d0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cf2:	4ba0      	ldr	r3, [pc, #640]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d112      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cfe:	4b9d      	ldr	r3, [pc, #628]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d0a:	d10b      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0c:	4b99      	ldr	r3, [pc, #612]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d05b      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x108>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d157      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e236      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2c:	d106      	bne.n	8005d3c <HAL_RCC_OscConfig+0x74>
 8005d2e:	4b91      	ldr	r3, [pc, #580]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a90      	ldr	r2, [pc, #576]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e01d      	b.n	8005d78 <HAL_RCC_OscConfig+0xb0>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d44:	d10c      	bne.n	8005d60 <HAL_RCC_OscConfig+0x98>
 8005d46:	4b8b      	ldr	r3, [pc, #556]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a8a      	ldr	r2, [pc, #552]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	4b88      	ldr	r3, [pc, #544]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a87      	ldr	r2, [pc, #540]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	e00b      	b.n	8005d78 <HAL_RCC_OscConfig+0xb0>
 8005d60:	4b84      	ldr	r3, [pc, #528]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a83      	ldr	r2, [pc, #524]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	4b81      	ldr	r3, [pc, #516]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a80      	ldr	r2, [pc, #512]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d013      	beq.n	8005da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fe fb3a 	bl	80043f8 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d88:	f7fe fb36 	bl	80043f8 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b64      	cmp	r3, #100	; 0x64
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e1fb      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9a:	4b76      	ldr	r3, [pc, #472]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0xc0>
 8005da6:	e014      	b.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da8:	f7fe fb26 	bl	80043f8 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db0:	f7fe fb22 	bl	80043f8 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e1e7      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc2:	4b6c      	ldr	r3, [pc, #432]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f0      	bne.n	8005db0 <HAL_RCC_OscConfig+0xe8>
 8005dce:	e000      	b.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d063      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dde:	4b65      	ldr	r3, [pc, #404]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dea:	4b62      	ldr	r3, [pc, #392]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d11c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005df6:	4b5f      	ldr	r3, [pc, #380]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d116      	bne.n	8005e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e02:	4b5c      	ldr	r3, [pc, #368]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_RCC_OscConfig+0x152>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d001      	beq.n	8005e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e1bb      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1a:	4b56      	ldr	r3, [pc, #344]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4952      	ldr	r1, [pc, #328]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e2e:	e03a      	b.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d020      	beq.n	8005e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e38:	4b4f      	ldr	r3, [pc, #316]	; (8005f78 <HAL_RCC_OscConfig+0x2b0>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3e:	f7fe fadb 	bl	80043f8 <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e46:	f7fe fad7 	bl	80043f8 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e19c      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e58:	4b46      	ldr	r3, [pc, #280]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0f0      	beq.n	8005e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e64:	4b43      	ldr	r3, [pc, #268]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4940      	ldr	r1, [pc, #256]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	600b      	str	r3, [r1, #0]
 8005e78:	e015      	b.n	8005ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e7a:	4b3f      	ldr	r3, [pc, #252]	; (8005f78 <HAL_RCC_OscConfig+0x2b0>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fe faba 	bl	80043f8 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e88:	f7fe fab6 	bl	80043f8 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e17b      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9a:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d030      	beq.n	8005f14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eba:	4b30      	ldr	r3, [pc, #192]	; (8005f7c <HAL_RCC_OscConfig+0x2b4>)
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec0:	f7fe fa9a 	bl	80043f8 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec8:	f7fe fa96 	bl	80043f8 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e15b      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eda:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x200>
 8005ee6:	e015      	b.n	8005f14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee8:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <HAL_RCC_OscConfig+0x2b4>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eee:	f7fe fa83 	bl	80043f8 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ef6:	f7fe fa7f 	bl	80043f8 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e144      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f0      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80a0 	beq.w	8006062 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f26:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10f      	bne.n	8005f52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	4a0e      	ldr	r2, [pc, #56]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f40:	6413      	str	r3, [r2, #64]	; 0x40
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_RCC_OscConfig+0x2b8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d121      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <HAL_RCC_OscConfig+0x2b8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a07      	ldr	r2, [pc, #28]	; (8005f80 <HAL_RCC_OscConfig+0x2b8>)
 8005f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f6a:	f7fe fa45 	bl	80043f8 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f70:	e011      	b.n	8005f96 <HAL_RCC_OscConfig+0x2ce>
 8005f72:	bf00      	nop
 8005f74:	40023800 	.word	0x40023800
 8005f78:	42470000 	.word	0x42470000
 8005f7c:	42470e80 	.word	0x42470e80
 8005f80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f84:	f7fe fa38 	bl	80043f8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e0fd      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f96:	4b81      	ldr	r3, [pc, #516]	; (800619c <HAL_RCC_OscConfig+0x4d4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x2f0>
 8005faa:	4b7d      	ldr	r3, [pc, #500]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	4a7c      	ldr	r2, [pc, #496]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb6:	e01c      	b.n	8005ff2 <HAL_RCC_OscConfig+0x32a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b05      	cmp	r3, #5
 8005fbe:	d10c      	bne.n	8005fda <HAL_RCC_OscConfig+0x312>
 8005fc0:	4b77      	ldr	r3, [pc, #476]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	4a76      	ldr	r2, [pc, #472]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fc6:	f043 0304 	orr.w	r3, r3, #4
 8005fca:	6713      	str	r3, [r2, #112]	; 0x70
 8005fcc:	4b74      	ldr	r3, [pc, #464]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	4a73      	ldr	r2, [pc, #460]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd8:	e00b      	b.n	8005ff2 <HAL_RCC_OscConfig+0x32a>
 8005fda:	4b71      	ldr	r3, [pc, #452]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	4a70      	ldr	r2, [pc, #448]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe6:	4b6e      	ldr	r3, [pc, #440]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	4a6d      	ldr	r2, [pc, #436]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8005fec:	f023 0304 	bic.w	r3, r3, #4
 8005ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d015      	beq.n	8006026 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffa:	f7fe f9fd 	bl	80043f8 <HAL_GetTick>
 8005ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006000:	e00a      	b.n	8006018 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006002:	f7fe f9f9 	bl	80043f8 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006010:	4293      	cmp	r3, r2
 8006012:	d901      	bls.n	8006018 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e0bc      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006018:	4b61      	ldr	r3, [pc, #388]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0ee      	beq.n	8006002 <HAL_RCC_OscConfig+0x33a>
 8006024:	e014      	b.n	8006050 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006026:	f7fe f9e7 	bl	80043f8 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800602c:	e00a      	b.n	8006044 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602e:	f7fe f9e3 	bl	80043f8 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	f241 3288 	movw	r2, #5000	; 0x1388
 800603c:	4293      	cmp	r3, r2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e0a6      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006044:	4b56      	ldr	r3, [pc, #344]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ee      	bne.n	800602e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d105      	bne.n	8006062 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006056:	4b52      	ldr	r3, [pc, #328]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	4a51      	ldr	r2, [pc, #324]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 800605c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006060:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 8092 	beq.w	8006190 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800606c:	4b4c      	ldr	r3, [pc, #304]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	2b08      	cmp	r3, #8
 8006076:	d05c      	beq.n	8006132 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d141      	bne.n	8006104 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006080:	4b48      	ldr	r3, [pc, #288]	; (80061a4 <HAL_RCC_OscConfig+0x4dc>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7fe f9b7 	bl	80043f8 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800608e:	f7fe f9b3 	bl	80043f8 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e078      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a0:	4b3f      	ldr	r3, [pc, #252]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f0      	bne.n	800608e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	019b      	lsls	r3, r3, #6
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	3b01      	subs	r3, #1
 80060c6:	041b      	lsls	r3, r3, #16
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	061b      	lsls	r3, r3, #24
 80060d0:	4933      	ldr	r1, [pc, #204]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060d6:	4b33      	ldr	r3, [pc, #204]	; (80061a4 <HAL_RCC_OscConfig+0x4dc>)
 80060d8:	2201      	movs	r2, #1
 80060da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060dc:	f7fe f98c 	bl	80043f8 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e4:	f7fe f988 	bl	80043f8 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e04d      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f6:	4b2a      	ldr	r3, [pc, #168]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x41c>
 8006102:	e045      	b.n	8006190 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006104:	4b27      	ldr	r3, [pc, #156]	; (80061a4 <HAL_RCC_OscConfig+0x4dc>)
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610a:	f7fe f975 	bl	80043f8 <HAL_GetTick>
 800610e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006110:	e008      	b.n	8006124 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006112:	f7fe f971 	bl	80043f8 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e036      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006124:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1f0      	bne.n	8006112 <HAL_RCC_OscConfig+0x44a>
 8006130:	e02e      	b.n	8006190 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e029      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800613e:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <HAL_RCC_OscConfig+0x4d8>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	429a      	cmp	r2, r3
 8006150:	d11c      	bne.n	800618c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d115      	bne.n	800618c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006166:	4013      	ands	r3, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800616c:	4293      	cmp	r3, r2
 800616e:	d10d      	bne.n	800618c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800617a:	429a      	cmp	r2, r3
 800617c:	d106      	bne.n	800618c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40007000 	.word	0x40007000
 80061a0:	40023800 	.word	0x40023800
 80061a4:	42470060 	.word	0x42470060

080061a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0cc      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061bc:	4b68      	ldr	r3, [pc, #416]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d90c      	bls.n	80061e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ca:	4b65      	ldr	r3, [pc, #404]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d2:	4b63      	ldr	r3, [pc, #396]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d001      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0b8      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d020      	beq.n	8006232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061fc:	4b59      	ldr	r3, [pc, #356]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	4a58      	ldr	r2, [pc, #352]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006206:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006214:	4b53      	ldr	r3, [pc, #332]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4a52      	ldr	r2, [pc, #328]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800621e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006220:	4b50      	ldr	r3, [pc, #320]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	494d      	ldr	r1, [pc, #308]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800622e:	4313      	orrs	r3, r2
 8006230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d044      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d107      	bne.n	8006256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006246:	4b47      	ldr	r3, [pc, #284]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d119      	bne.n	8006286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e07f      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d003      	beq.n	8006266 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006262:	2b03      	cmp	r3, #3
 8006264:	d107      	bne.n	8006276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006266:	4b3f      	ldr	r3, [pc, #252]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e06f      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006276:	4b3b      	ldr	r3, [pc, #236]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e067      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006286:	4b37      	ldr	r3, [pc, #220]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f023 0203 	bic.w	r2, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	4934      	ldr	r1, [pc, #208]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	4313      	orrs	r3, r2
 8006296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006298:	f7fe f8ae 	bl	80043f8 <HAL_GetTick>
 800629c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800629e:	e00a      	b.n	80062b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a0:	f7fe f8aa 	bl	80043f8 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e04f      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062b6:	4b2b      	ldr	r3, [pc, #172]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 020c 	and.w	r2, r3, #12
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d1eb      	bne.n	80062a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062c8:	4b25      	ldr	r3, [pc, #148]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d20c      	bcs.n	80062f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	4b22      	ldr	r3, [pc, #136]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062de:	4b20      	ldr	r3, [pc, #128]	; (8006360 <HAL_RCC_ClockConfig+0x1b8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d001      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e032      	b.n	8006356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d008      	beq.n	800630e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	4916      	ldr	r1, [pc, #88]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	490e      	ldr	r1, [pc, #56]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	4313      	orrs	r3, r2
 800632c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800632e:	f000 f821 	bl	8006374 <HAL_RCC_GetSysClockFreq>
 8006332:	4602      	mov	r2, r0
 8006334:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	091b      	lsrs	r3, r3, #4
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	490a      	ldr	r1, [pc, #40]	; (8006368 <HAL_RCC_ClockConfig+0x1c0>)
 8006340:	5ccb      	ldrb	r3, [r1, r3]
 8006342:	fa22 f303 	lsr.w	r3, r2, r3
 8006346:	4a09      	ldr	r2, [pc, #36]	; (800636c <HAL_RCC_ClockConfig+0x1c4>)
 8006348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <HAL_RCC_ClockConfig+0x1c8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe f80e 	bl	8004370 <HAL_InitTick>

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40023c00 	.word	0x40023c00
 8006364:	40023800 	.word	0x40023800
 8006368:	0800d4e4 	.word	0x0800d4e4
 800636c:	20000000 	.word	0x20000000
 8006370:	20000004 	.word	0x20000004

08006374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006374:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	607b      	str	r3, [r7, #4]
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	2300      	movs	r3, #0
 8006386:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800638c:	4b67      	ldr	r3, [pc, #412]	; (800652c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 030c 	and.w	r3, r3, #12
 8006394:	2b08      	cmp	r3, #8
 8006396:	d00d      	beq.n	80063b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006398:	2b08      	cmp	r3, #8
 800639a:	f200 80bd 	bhi.w	8006518 <HAL_RCC_GetSysClockFreq+0x1a4>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_RCC_GetSysClockFreq+0x34>
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d003      	beq.n	80063ae <HAL_RCC_GetSysClockFreq+0x3a>
 80063a6:	e0b7      	b.n	8006518 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063a8:	4b61      	ldr	r3, [pc, #388]	; (8006530 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063aa:	60bb      	str	r3, [r7, #8]
       break;
 80063ac:	e0b7      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063ae:	4b60      	ldr	r3, [pc, #384]	; (8006530 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063b0:	60bb      	str	r3, [r7, #8]
      break;
 80063b2:	e0b4      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063b4:	4b5d      	ldr	r3, [pc, #372]	; (800652c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063be:	4b5b      	ldr	r3, [pc, #364]	; (800652c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d04d      	beq.n	8006466 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063ca:	4b58      	ldr	r3, [pc, #352]	; (800652c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	099b      	lsrs	r3, r3, #6
 80063d0:	461a      	mov	r2, r3
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063da:	f04f 0100 	mov.w	r1, #0
 80063de:	ea02 0800 	and.w	r8, r2, r0
 80063e2:	ea03 0901 	and.w	r9, r3, r1
 80063e6:	4640      	mov	r0, r8
 80063e8:	4649      	mov	r1, r9
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	014b      	lsls	r3, r1, #5
 80063f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80063f8:	0142      	lsls	r2, r0, #5
 80063fa:	4610      	mov	r0, r2
 80063fc:	4619      	mov	r1, r3
 80063fe:	ebb0 0008 	subs.w	r0, r0, r8
 8006402:	eb61 0109 	sbc.w	r1, r1, r9
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	018b      	lsls	r3, r1, #6
 8006410:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006414:	0182      	lsls	r2, r0, #6
 8006416:	1a12      	subs	r2, r2, r0
 8006418:	eb63 0301 	sbc.w	r3, r3, r1
 800641c:	f04f 0000 	mov.w	r0, #0
 8006420:	f04f 0100 	mov.w	r1, #0
 8006424:	00d9      	lsls	r1, r3, #3
 8006426:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800642a:	00d0      	lsls	r0, r2, #3
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	eb12 0208 	adds.w	r2, r2, r8
 8006434:	eb43 0309 	adc.w	r3, r3, r9
 8006438:	f04f 0000 	mov.w	r0, #0
 800643c:	f04f 0100 	mov.w	r1, #0
 8006440:	0299      	lsls	r1, r3, #10
 8006442:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006446:	0290      	lsls	r0, r2, #10
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	461a      	mov	r2, r3
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	f7fa fc16 	bl	8000c88 <__aeabi_uldivmod>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4613      	mov	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e04a      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006466:	4b31      	ldr	r3, [pc, #196]	; (800652c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	099b      	lsrs	r3, r3, #6
 800646c:	461a      	mov	r2, r3
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006476:	f04f 0100 	mov.w	r1, #0
 800647a:	ea02 0400 	and.w	r4, r2, r0
 800647e:	ea03 0501 	and.w	r5, r3, r1
 8006482:	4620      	mov	r0, r4
 8006484:	4629      	mov	r1, r5
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	014b      	lsls	r3, r1, #5
 8006490:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006494:	0142      	lsls	r2, r0, #5
 8006496:	4610      	mov	r0, r2
 8006498:	4619      	mov	r1, r3
 800649a:	1b00      	subs	r0, r0, r4
 800649c:	eb61 0105 	sbc.w	r1, r1, r5
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	018b      	lsls	r3, r1, #6
 80064aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064ae:	0182      	lsls	r2, r0, #6
 80064b0:	1a12      	subs	r2, r2, r0
 80064b2:	eb63 0301 	sbc.w	r3, r3, r1
 80064b6:	f04f 0000 	mov.w	r0, #0
 80064ba:	f04f 0100 	mov.w	r1, #0
 80064be:	00d9      	lsls	r1, r3, #3
 80064c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064c4:	00d0      	lsls	r0, r2, #3
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	1912      	adds	r2, r2, r4
 80064cc:	eb45 0303 	adc.w	r3, r5, r3
 80064d0:	f04f 0000 	mov.w	r0, #0
 80064d4:	f04f 0100 	mov.w	r1, #0
 80064d8:	0299      	lsls	r1, r3, #10
 80064da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80064de:	0290      	lsls	r0, r2, #10
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4610      	mov	r0, r2
 80064e6:	4619      	mov	r1, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	461a      	mov	r2, r3
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	f7fa fbca 	bl	8000c88 <__aeabi_uldivmod>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4613      	mov	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064fc:	4b0b      	ldr	r3, [pc, #44]	; (800652c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	3301      	adds	r3, #1
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	fbb2 f3f3 	udiv	r3, r2, r3
 8006514:	60bb      	str	r3, [r7, #8]
      break;
 8006516:	e002      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800651a:	60bb      	str	r3, [r7, #8]
      break;
 800651c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800651e:	68bb      	ldr	r3, [r7, #8]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800652a:	bf00      	nop
 800652c:	40023800 	.word	0x40023800
 8006530:	00f42400 	.word	0x00f42400

08006534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006534:	b480      	push	{r7}
 8006536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006538:	4b03      	ldr	r3, [pc, #12]	; (8006548 <HAL_RCC_GetHCLKFreq+0x14>)
 800653a:	681b      	ldr	r3, [r3, #0]
}
 800653c:	4618      	mov	r0, r3
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	20000000 	.word	0x20000000

0800654c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006550:	f7ff fff0 	bl	8006534 <HAL_RCC_GetHCLKFreq>
 8006554:	4602      	mov	r2, r0
 8006556:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	0a9b      	lsrs	r3, r3, #10
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	4903      	ldr	r1, [pc, #12]	; (8006570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006562:	5ccb      	ldrb	r3, [r1, r3]
 8006564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006568:	4618      	mov	r0, r3
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40023800 	.word	0x40023800
 8006570:	0800d4f4 	.word	0x0800d4f4

08006574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006578:	f7ff ffdc 	bl	8006534 <HAL_RCC_GetHCLKFreq>
 800657c:	4602      	mov	r2, r0
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	0b5b      	lsrs	r3, r3, #13
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	4903      	ldr	r1, [pc, #12]	; (8006598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800658a:	5ccb      	ldrb	r3, [r1, r3]
 800658c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006590:	4618      	mov	r0, r3
 8006592:	bd80      	pop	{r7, pc}
 8006594:	40023800 	.word	0x40023800
 8006598:	0800d4f4 	.word	0x0800d4f4

0800659c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e056      	b.n	800665c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d106      	bne.n	80065ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7fc fdf3 	bl	80031b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	ea42 0103 	orr.w	r1, r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	f003 0104 	and.w	r1, r3, #4
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69da      	ldr	r2, [r3, #28]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800664a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_SPI_Transmit+0x22>
 8006682:	2302      	movs	r3, #2
 8006684:	e11e      	b.n	80068c4 <HAL_SPI_Transmit+0x260>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800668e:	f7fd feb3 	bl	80043f8 <HAL_GetTick>
 8006692:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006694:	88fb      	ldrh	r3, [r7, #6]
 8006696:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d002      	beq.n	80066aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
 80066a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066a8:	e103      	b.n	80068b2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <HAL_SPI_Transmit+0x52>
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066ba:	e0fa      	b.n	80068b2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2203      	movs	r2, #3
 80066c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	88fa      	ldrh	r2, [r7, #6]
 80066d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	88fa      	ldrh	r2, [r7, #6]
 80066da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006702:	d107      	bne.n	8006714 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006712:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d007      	beq.n	8006732 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006730:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800673a:	d14b      	bne.n	80067d4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_SPI_Transmit+0xe6>
 8006744:	8afb      	ldrh	r3, [r7, #22]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d13e      	bne.n	80067c8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	881a      	ldrh	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	1c9a      	adds	r2, r3, #2
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006764:	b29b      	uxth	r3, r3
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800676e:	e02b      	b.n	80067c8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d112      	bne.n	80067a4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	881a      	ldrh	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	1c9a      	adds	r2, r3, #2
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80067a2:	e011      	b.n	80067c8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067a4:	f7fd fe28 	bl	80043f8 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d803      	bhi.n	80067bc <HAL_SPI_Transmit+0x158>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d102      	bne.n	80067c2 <HAL_SPI_Transmit+0x15e>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067c6:	e074      	b.n	80068b2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1ce      	bne.n	8006770 <HAL_SPI_Transmit+0x10c>
 80067d2:	e04c      	b.n	800686e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <HAL_SPI_Transmit+0x17e>
 80067dc:	8afb      	ldrh	r3, [r7, #22]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d140      	bne.n	8006864 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006808:	e02c      	b.n	8006864 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b02      	cmp	r3, #2
 8006816:	d113      	bne.n	8006840 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330c      	adds	r3, #12
 8006822:	7812      	ldrb	r2, [r2, #0]
 8006824:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	86da      	strh	r2, [r3, #54]	; 0x36
 800683e:	e011      	b.n	8006864 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006840:	f7fd fdda 	bl	80043f8 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d803      	bhi.n	8006858 <HAL_SPI_Transmit+0x1f4>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d102      	bne.n	800685e <HAL_SPI_Transmit+0x1fa>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d102      	bne.n	8006864 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006862:	e026      	b.n	80068b2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006868:	b29b      	uxth	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1cd      	bne.n	800680a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fba4 	bl	8006fc0 <SPI_EndRxTxTransaction>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800688c:	2300      	movs	r3, #0
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	77fb      	strb	r3, [r7, #31]
 80068ae:	e000      	b.n	80068b2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80068b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	4613      	mov	r3, r2
 80068da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e8:	d112      	bne.n	8006910 <HAL_SPI_Receive+0x44>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10e      	bne.n	8006910 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2204      	movs	r2, #4
 80068f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	68b9      	ldr	r1, [r7, #8]
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f8e9 	bl	8006ade <HAL_SPI_TransmitReceive>
 800690c:	4603      	mov	r3, r0
 800690e:	e0e2      	b.n	8006ad6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_SPI_Receive+0x52>
 800691a:	2302      	movs	r3, #2
 800691c:	e0db      	b.n	8006ad6 <HAL_SPI_Receive+0x20a>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006926:	f7fd fd67 	bl	80043f8 <HAL_GetTick>
 800692a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	d002      	beq.n	800693e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006938:	2302      	movs	r3, #2
 800693a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800693c:	e0c2      	b.n	8006ac4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_SPI_Receive+0x7e>
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800694e:	e0b9      	b.n	8006ac4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2204      	movs	r2, #4
 8006954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	88fa      	ldrh	r2, [r7, #6]
 8006968:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	88fa      	ldrh	r2, [r7, #6]
 800696e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006996:	d107      	bne.n	80069a8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d007      	beq.n	80069c6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d162      	bne.n	8006a94 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80069ce:	e02e      	b.n	8006a2e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d115      	bne.n	8006a0a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f103 020c 	add.w	r2, r3, #12
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	7812      	ldrb	r2, [r2, #0]
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a08:	e011      	b.n	8006a2e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a0a:	f7fd fcf5 	bl	80043f8 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d803      	bhi.n	8006a22 <HAL_SPI_Receive+0x156>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d102      	bne.n	8006a28 <HAL_SPI_Receive+0x15c>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d102      	bne.n	8006a2e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a2c:	e04a      	b.n	8006ac4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1cb      	bne.n	80069d0 <HAL_SPI_Receive+0x104>
 8006a38:	e031      	b.n	8006a9e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d113      	bne.n	8006a70 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	b292      	uxth	r2, r2
 8006a54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	1c9a      	adds	r2, r3, #2
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a6e:	e011      	b.n	8006a94 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a70:	f7fd fcc2 	bl	80043f8 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d803      	bhi.n	8006a88 <HAL_SPI_Receive+0x1bc>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d102      	bne.n	8006a8e <HAL_SPI_Receive+0x1c2>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a92:	e017      	b.n	8006ac4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1cd      	bne.n	8006a3a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fa27 	bl	8006ef6 <SPI_EndRxTransaction>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	75fb      	strb	r3, [r7, #23]
 8006ac0:	e000      	b.n	8006ac4 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006ac2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b08c      	sub	sp, #48	; 0x30
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006aec:	2301      	movs	r3, #1
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x26>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e18a      	b.n	8006e1a <HAL_SPI_TransmitReceive+0x33c>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b0c:	f7fd fc74 	bl	80043f8 <HAL_GetTick>
 8006b10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006b22:	887b      	ldrh	r3, [r7, #2]
 8006b24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d00f      	beq.n	8006b4e <HAL_SPI_TransmitReceive+0x70>
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b34:	d107      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x68>
 8006b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d003      	beq.n	8006b4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b46:	2302      	movs	r3, #2
 8006b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b4c:	e15b      	b.n	8006e06 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <HAL_SPI_TransmitReceive+0x82>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <HAL_SPI_TransmitReceive+0x82>
 8006b5a:	887b      	ldrh	r3, [r7, #2]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d103      	bne.n	8006b68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b66:	e14e      	b.n	8006e06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d003      	beq.n	8006b7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2205      	movs	r2, #5
 8006b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	887a      	ldrh	r2, [r7, #2]
 8006b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	887a      	ldrh	r2, [r7, #2]
 8006b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	887a      	ldrh	r2, [r7, #2]
 8006b9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	887a      	ldrh	r2, [r7, #2]
 8006ba4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d007      	beq.n	8006bd0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd8:	d178      	bne.n	8006ccc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_SPI_TransmitReceive+0x10a>
 8006be2:	8b7b      	ldrh	r3, [r7, #26]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d166      	bne.n	8006cb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	881a      	ldrh	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf8:	1c9a      	adds	r2, r3, #2
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c0c:	e053      	b.n	8006cb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d11b      	bne.n	8006c54 <HAL_SPI_TransmitReceive+0x176>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d016      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x176>
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d113      	bne.n	8006c54 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c30:	881a      	ldrh	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	1c9a      	adds	r2, r3, #2
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d119      	bne.n	8006c96 <HAL_SPI_TransmitReceive+0x1b8>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d014      	beq.n	8006c96 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	b292      	uxth	r2, r2
 8006c78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	1c9a      	adds	r2, r3, #2
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c92:	2301      	movs	r3, #1
 8006c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c96:	f7fd fbaf 	bl	80043f8 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d807      	bhi.n	8006cb6 <HAL_SPI_TransmitReceive+0x1d8>
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cac:	d003      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006cb4:	e0a7      	b.n	8006e06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1a6      	bne.n	8006c0e <HAL_SPI_TransmitReceive+0x130>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1a1      	bne.n	8006c0e <HAL_SPI_TransmitReceive+0x130>
 8006cca:	e07c      	b.n	8006dc6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <HAL_SPI_TransmitReceive+0x1fc>
 8006cd4:	8b7b      	ldrh	r3, [r7, #26]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d16b      	bne.n	8006db2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	7812      	ldrb	r2, [r2, #0]
 8006ce6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d00:	e057      	b.n	8006db2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d11c      	bne.n	8006d4a <HAL_SPI_TransmitReceive+0x26c>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d017      	beq.n	8006d4a <HAL_SPI_TransmitReceive+0x26c>
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d114      	bne.n	8006d4a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	330c      	adds	r3, #12
 8006d2a:	7812      	ldrb	r2, [r2, #0]
 8006d2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d119      	bne.n	8006d8c <HAL_SPI_TransmitReceive+0x2ae>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d014      	beq.n	8006d8c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d8c:	f7fd fb34 	bl	80043f8 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d803      	bhi.n	8006da4 <HAL_SPI_TransmitReceive+0x2c6>
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da2:	d102      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x2cc>
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006db0:	e029      	b.n	8006e06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1a2      	bne.n	8006d02 <HAL_SPI_TransmitReceive+0x224>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d19d      	bne.n	8006d02 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f8f8 	bl	8006fc0 <SPI_EndRxTxTransaction>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d006      	beq.n	8006de4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006de2:	e010      	b.n	8006e06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	e000      	b.n	8006e06 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006e04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3730      	adds	r7, #48	; 0x30
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e32:	e04c      	b.n	8006ece <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3a:	d048      	beq.n	8006ece <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006e3c:	f7fd fadc 	bl	80043f8 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d902      	bls.n	8006e52 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d13d      	bne.n	8006ece <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e6a:	d111      	bne.n	8006e90 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e74:	d004      	beq.n	8006e80 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7e:	d107      	bne.n	8006e90 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e98:	d10f      	bne.n	8006eba <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006eb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e00f      	b.n	8006eee <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	bf0c      	ite	eq
 8006ede:	2301      	moveq	r3, #1
 8006ee0:	2300      	movne	r3, #0
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d1a3      	bne.n	8006e34 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b086      	sub	sp, #24
 8006efa:	af02      	add	r7, sp, #8
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f0a:	d111      	bne.n	8006f30 <SPI_EndRxTransaction+0x3a>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f14:	d004      	beq.n	8006f20 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1e:	d107      	bne.n	8006f30 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f2e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f38:	d12a      	bne.n	8006f90 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f42:	d012      	beq.n	8006f6a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f7ff ff67 	bl	8006e22 <SPI_WaitFlagStateUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d02d      	beq.n	8006fb6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5e:	f043 0220 	orr.w	r2, r3, #32
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e026      	b.n	8006fb8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2200      	movs	r2, #0
 8006f72:	2101      	movs	r1, #1
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff ff54 	bl	8006e22 <SPI_WaitFlagStateUntilTimeout>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01a      	beq.n	8006fb6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f84:	f043 0220 	orr.w	r2, r3, #32
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e013      	b.n	8006fb8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2200      	movs	r2, #0
 8006f98:	2101      	movs	r1, #1
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7ff ff41 	bl	8006e22 <SPI_WaitFlagStateUntilTimeout>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	f043 0220 	orr.w	r2, r3, #32
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e000      	b.n	8006fb8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af02      	add	r7, sp, #8
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fcc:	4b1b      	ldr	r3, [pc, #108]	; (800703c <SPI_EndRxTxTransaction+0x7c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <SPI_EndRxTxTransaction+0x80>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	0d5b      	lsrs	r3, r3, #21
 8006fd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fdc:	fb02 f303 	mul.w	r3, r2, r3
 8006fe0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fea:	d112      	bne.n	8007012 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2180      	movs	r1, #128	; 0x80
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff ff13 	bl	8006e22 <SPI_WaitFlagStateUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d016      	beq.n	8007030 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f043 0220 	orr.w	r2, r3, #32
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e00f      	b.n	8007032 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	3b01      	subs	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007028:	2b80      	cmp	r3, #128	; 0x80
 800702a:	d0f2      	beq.n	8007012 <SPI_EndRxTxTransaction+0x52>
 800702c:	e000      	b.n	8007030 <SPI_EndRxTxTransaction+0x70>
        break;
 800702e:	bf00      	nop
  }

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20000000 	.word	0x20000000
 8007040:	165e9f81 	.word	0x165e9f81

08007044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e01d      	b.n	8007092 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fc f99a 	bl	80033a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f000 fc22 	bl	80078cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b06      	cmp	r3, #6
 80070c2:	d007      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0201 	orr.w	r2, r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0201 	bic.w	r2, r2, #1
 80070f8:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a1a      	ldr	r2, [r3, #32]
 8007100:	f241 1311 	movw	r3, #4369	; 0x1111
 8007104:	4013      	ands	r3, r2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10f      	bne.n	800712a <HAL_TIM_Base_Stop_IT+0x48>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a1a      	ldr	r2, [r3, #32]
 8007110:	f240 4344 	movw	r3, #1092	; 0x444
 8007114:	4013      	ands	r3, r2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d107      	bne.n	800712a <HAL_TIM_Base_Stop_IT+0x48>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0201 	bic.w	r2, r2, #1
 8007128:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e01d      	b.n	8007186 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fc f8fe 	bl	8003360 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3304      	adds	r3, #4
 8007174:	4619      	mov	r1, r3
 8007176:	4610      	mov	r0, r2
 8007178:	f000 fba8 	bl	80078cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2201      	movs	r2, #1
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fde2 	bl	8007d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a15      	ldr	r2, [pc, #84]	; (8007204 <HAL_TIM_PWM_Start+0x74>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <HAL_TIM_PWM_Start+0x2c>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a14      	ldr	r2, [pc, #80]	; (8007208 <HAL_TIM_PWM_Start+0x78>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d101      	bne.n	80071c0 <HAL_TIM_PWM_Start+0x30>
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <HAL_TIM_PWM_Start+0x32>
 80071c0:	2300      	movs	r3, #0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d007      	beq.n	80071d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b06      	cmp	r3, #6
 80071e6:	d007      	beq.n	80071f8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	40010000 	.word	0x40010000
 8007208:	40010400 	.word	0x40010400

0800720c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2200      	movs	r2, #0
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fda4 	bl	8007d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a22      	ldr	r2, [pc, #136]	; (80072b4 <HAL_TIM_PWM_Stop+0xa8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d004      	beq.n	8007238 <HAL_TIM_PWM_Stop+0x2c>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a21      	ldr	r2, [pc, #132]	; (80072b8 <HAL_TIM_PWM_Stop+0xac>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d101      	bne.n	800723c <HAL_TIM_PWM_Stop+0x30>
 8007238:	2301      	movs	r3, #1
 800723a:	e000      	b.n	800723e <HAL_TIM_PWM_Stop+0x32>
 800723c:	2300      	movs	r3, #0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d017      	beq.n	8007272 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a1a      	ldr	r2, [r3, #32]
 8007248:	f241 1311 	movw	r3, #4369	; 0x1111
 800724c:	4013      	ands	r3, r2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10f      	bne.n	8007272 <HAL_TIM_PWM_Stop+0x66>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6a1a      	ldr	r2, [r3, #32]
 8007258:	f240 4344 	movw	r3, #1092	; 0x444
 800725c:	4013      	ands	r3, r2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d107      	bne.n	8007272 <HAL_TIM_PWM_Stop+0x66>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007270:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6a1a      	ldr	r2, [r3, #32]
 8007278:	f241 1311 	movw	r3, #4369	; 0x1111
 800727c:	4013      	ands	r3, r2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10f      	bne.n	80072a2 <HAL_TIM_PWM_Stop+0x96>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a1a      	ldr	r2, [r3, #32]
 8007288:	f240 4344 	movw	r3, #1092	; 0x444
 800728c:	4013      	ands	r3, r2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d107      	bne.n	80072a2 <HAL_TIM_PWM_Stop+0x96>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0201 	bic.w	r2, r2, #1
 80072a0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40010000 	.word	0x40010000
 80072b8:	40010400 	.word	0x40010400

080072bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e083      	b.n	80073d8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d106      	bne.n	80072ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7fb ffad 	bl	8003244 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2202      	movs	r2, #2
 80072ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6812      	ldr	r2, [r2, #0]
 80072fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007300:	f023 0307 	bic.w	r3, r3, #7
 8007304:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3304      	adds	r3, #4
 800730e:	4619      	mov	r1, r3
 8007310:	4610      	mov	r0, r2
 8007312:	f000 fadb 	bl	80078cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800733e:	f023 0303 	bic.w	r3, r3, #3
 8007342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	4313      	orrs	r3, r2
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800735c:	f023 030c 	bic.w	r3, r3, #12
 8007360:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800736c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	4313      	orrs	r3, r2
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	011a      	lsls	r2, r3, #4
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	031b      	lsls	r3, r3, #12
 800738c:	4313      	orrs	r3, r2
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800739a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	4313      	orrs	r3, r2
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_TIM_Encoder_Start+0x18>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d008      	beq.n	8007408 <HAL_TIM_Encoder_Start+0x28>
 80073f6:	e00f      	b.n	8007418 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2201      	movs	r2, #1
 80073fe:	2100      	movs	r1, #0
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fcb3 	bl	8007d6c <TIM_CCxChannelCmd>
      break;
 8007406:	e016      	b.n	8007436 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2201      	movs	r2, #1
 800740e:	2104      	movs	r1, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fcab 	bl	8007d6c <TIM_CCxChannelCmd>
      break;
 8007416:	e00e      	b.n	8007436 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2201      	movs	r2, #1
 800741e:	2100      	movs	r1, #0
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fca3 	bl	8007d6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2201      	movs	r2, #1
 800742c:	2104      	movs	r1, #4
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fc9c 	bl	8007d6c <TIM_CCxChannelCmd>
      break;
 8007434:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0201 	orr.w	r2, r2, #1
 8007444:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_TIM_Encoder_Stop+0x18>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b04      	cmp	r3, #4
 8007464:	d008      	beq.n	8007478 <HAL_TIM_Encoder_Stop+0x28>
 8007466:	e00f      	b.n	8007488 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2200      	movs	r2, #0
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fc7b 	bl	8007d6c <TIM_CCxChannelCmd>
      break;
 8007476:	e016      	b.n	80074a6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2200      	movs	r2, #0
 800747e:	2104      	movs	r1, #4
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fc73 	bl	8007d6c <TIM_CCxChannelCmd>
      break;
 8007486:	e00e      	b.n	80074a6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2200      	movs	r2, #0
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fc6b 	bl	8007d6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	2104      	movs	r1, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fc64 	bl	8007d6c <TIM_CCxChannelCmd>
      break;
 80074a4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6a1a      	ldr	r2, [r3, #32]
 80074ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80074b0:	4013      	ands	r3, r2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10f      	bne.n	80074d6 <HAL_TIM_Encoder_Stop+0x86>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	f240 4344 	movw	r3, #1092	; 0x444
 80074c0:	4013      	ands	r3, r2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d107      	bne.n	80074d6 <HAL_TIM_Encoder_Stop+0x86>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0201 	bic.w	r2, r2, #1
 80074d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d122      	bne.n	800753c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b02      	cmp	r3, #2
 8007502:	d11b      	bne.n	800753c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0202 	mvn.w	r2, #2
 800750c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f9b4 	bl	8007890 <HAL_TIM_IC_CaptureCallback>
 8007528:	e005      	b.n	8007536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f9a6 	bl	800787c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f9b7 	bl	80078a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f003 0304 	and.w	r3, r3, #4
 8007546:	2b04      	cmp	r3, #4
 8007548:	d122      	bne.n	8007590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b04      	cmp	r3, #4
 8007556:	d11b      	bne.n	8007590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0204 	mvn.w	r2, #4
 8007560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2202      	movs	r2, #2
 8007566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f98a 	bl	8007890 <HAL_TIM_IC_CaptureCallback>
 800757c:	e005      	b.n	800758a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f97c 	bl	800787c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f98d 	bl	80078a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0308 	and.w	r3, r3, #8
 800759a:	2b08      	cmp	r3, #8
 800759c:	d122      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0308 	and.w	r3, r3, #8
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d11b      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0208 	mvn.w	r2, #8
 80075b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2204      	movs	r2, #4
 80075ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f960 	bl	8007890 <HAL_TIM_IC_CaptureCallback>
 80075d0:	e005      	b.n	80075de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f952 	bl	800787c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f963 	bl	80078a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	2b10      	cmp	r3, #16
 80075f0:	d122      	bne.n	8007638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	2b10      	cmp	r3, #16
 80075fe:	d11b      	bne.n	8007638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0210 	mvn.w	r2, #16
 8007608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2208      	movs	r2, #8
 800760e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f936 	bl	8007890 <HAL_TIM_IC_CaptureCallback>
 8007624:	e005      	b.n	8007632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f928 	bl	800787c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f939 	bl	80078a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b01      	cmp	r3, #1
 8007644:	d10e      	bne.n	8007664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b01      	cmp	r3, #1
 8007652:	d107      	bne.n	8007664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f06f 0201 	mvn.w	r2, #1
 800765c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7fa faac 	bl	8001bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766e:	2b80      	cmp	r3, #128	; 0x80
 8007670:	d10e      	bne.n	8007690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767c:	2b80      	cmp	r3, #128	; 0x80
 800767e:	d107      	bne.n	8007690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fc1a 	bl	8007ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	d10e      	bne.n	80076bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a8:	2b40      	cmp	r3, #64	; 0x40
 80076aa:	d107      	bne.n	80076bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f8fe 	bl	80078b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d10e      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0320 	and.w	r3, r3, #32
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	d107      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0220 	mvn.w	r2, #32
 80076e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fbe4 	bl	8007eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007706:	2302      	movs	r3, #2
 8007708:	e0b4      	b.n	8007874 <HAL_TIM_PWM_ConfigChannel+0x184>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2202      	movs	r2, #2
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b0c      	cmp	r3, #12
 800771e:	f200 809f 	bhi.w	8007860 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007722:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	0800775d 	.word	0x0800775d
 800772c:	08007861 	.word	0x08007861
 8007730:	08007861 	.word	0x08007861
 8007734:	08007861 	.word	0x08007861
 8007738:	0800779d 	.word	0x0800779d
 800773c:	08007861 	.word	0x08007861
 8007740:	08007861 	.word	0x08007861
 8007744:	08007861 	.word	0x08007861
 8007748:	080077df 	.word	0x080077df
 800774c:	08007861 	.word	0x08007861
 8007750:	08007861 	.word	0x08007861
 8007754:	08007861 	.word	0x08007861
 8007758:	0800781f 	.word	0x0800781f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f952 	bl	8007a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0208 	orr.w	r2, r2, #8
 8007776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699a      	ldr	r2, [r3, #24]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0204 	bic.w	r2, r2, #4
 8007786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6999      	ldr	r1, [r3, #24]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	691a      	ldr	r2, [r3, #16]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	619a      	str	r2, [r3, #24]
      break;
 800779a:	e062      	b.n	8007862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 f9a2 	bl	8007aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6999      	ldr	r1, [r3, #24]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	021a      	lsls	r2, r3, #8
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	619a      	str	r2, [r3, #24]
      break;
 80077dc:	e041      	b.n	8007862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68b9      	ldr	r1, [r7, #8]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 f9f7 	bl	8007bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f042 0208 	orr.w	r2, r2, #8
 80077f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0204 	bic.w	r2, r2, #4
 8007808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69d9      	ldr	r1, [r3, #28]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	61da      	str	r2, [r3, #28]
      break;
 800781c:	e021      	b.n	8007862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	4618      	mov	r0, r3
 8007826:	f000 fa4b 	bl	8007cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69d9      	ldr	r1, [r3, #28]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	021a      	lsls	r2, r3, #8
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	61da      	str	r2, [r3, #28]
      break;
 800785e:	e000      	b.n	8007862 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007860:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a40      	ldr	r2, [pc, #256]	; (80079e0 <TIM_Base_SetConfig+0x114>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d013      	beq.n	800790c <TIM_Base_SetConfig+0x40>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ea:	d00f      	beq.n	800790c <TIM_Base_SetConfig+0x40>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a3d      	ldr	r2, [pc, #244]	; (80079e4 <TIM_Base_SetConfig+0x118>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00b      	beq.n	800790c <TIM_Base_SetConfig+0x40>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a3c      	ldr	r2, [pc, #240]	; (80079e8 <TIM_Base_SetConfig+0x11c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d007      	beq.n	800790c <TIM_Base_SetConfig+0x40>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a3b      	ldr	r2, [pc, #236]	; (80079ec <TIM_Base_SetConfig+0x120>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d003      	beq.n	800790c <TIM_Base_SetConfig+0x40>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a3a      	ldr	r2, [pc, #232]	; (80079f0 <TIM_Base_SetConfig+0x124>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d108      	bne.n	800791e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a2f      	ldr	r2, [pc, #188]	; (80079e0 <TIM_Base_SetConfig+0x114>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d02b      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792c:	d027      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a2c      	ldr	r2, [pc, #176]	; (80079e4 <TIM_Base_SetConfig+0x118>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d023      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a2b      	ldr	r2, [pc, #172]	; (80079e8 <TIM_Base_SetConfig+0x11c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d01f      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a2a      	ldr	r2, [pc, #168]	; (80079ec <TIM_Base_SetConfig+0x120>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d01b      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a29      	ldr	r2, [pc, #164]	; (80079f0 <TIM_Base_SetConfig+0x124>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d017      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a28      	ldr	r2, [pc, #160]	; (80079f4 <TIM_Base_SetConfig+0x128>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d013      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a27      	ldr	r2, [pc, #156]	; (80079f8 <TIM_Base_SetConfig+0x12c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00f      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a26      	ldr	r2, [pc, #152]	; (80079fc <TIM_Base_SetConfig+0x130>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00b      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a25      	ldr	r2, [pc, #148]	; (8007a00 <TIM_Base_SetConfig+0x134>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d007      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a24      	ldr	r2, [pc, #144]	; (8007a04 <TIM_Base_SetConfig+0x138>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d003      	beq.n	800797e <TIM_Base_SetConfig+0xb2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a23      	ldr	r2, [pc, #140]	; (8007a08 <TIM_Base_SetConfig+0x13c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d108      	bne.n	8007990 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a0a      	ldr	r2, [pc, #40]	; (80079e0 <TIM_Base_SetConfig+0x114>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_Base_SetConfig+0xf8>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a0c      	ldr	r2, [pc, #48]	; (80079f0 <TIM_Base_SetConfig+0x124>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d103      	bne.n	80079cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	615a      	str	r2, [r3, #20]
}
 80079d2:	bf00      	nop
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800
 80079ec:	40000c00 	.word	0x40000c00
 80079f0:	40010400 	.word	0x40010400
 80079f4:	40014000 	.word	0x40014000
 80079f8:	40014400 	.word	0x40014400
 80079fc:	40014800 	.word	0x40014800
 8007a00:	40001800 	.word	0x40001800
 8007a04:	40001c00 	.word	0x40001c00
 8007a08:	40002000 	.word	0x40002000

08007a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	f023 0201 	bic.w	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0303 	bic.w	r3, r3, #3
 8007a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f023 0302 	bic.w	r3, r3, #2
 8007a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a20      	ldr	r2, [pc, #128]	; (8007ae4 <TIM_OC1_SetConfig+0xd8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d003      	beq.n	8007a70 <TIM_OC1_SetConfig+0x64>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a1f      	ldr	r2, [pc, #124]	; (8007ae8 <TIM_OC1_SetConfig+0xdc>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d10c      	bne.n	8007a8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f023 0308 	bic.w	r3, r3, #8
 8007a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f023 0304 	bic.w	r3, r3, #4
 8007a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a15      	ldr	r2, [pc, #84]	; (8007ae4 <TIM_OC1_SetConfig+0xd8>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d003      	beq.n	8007a9a <TIM_OC1_SetConfig+0x8e>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <TIM_OC1_SetConfig+0xdc>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d111      	bne.n	8007abe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	621a      	str	r2, [r3, #32]
}
 8007ad8:	bf00      	nop
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40010400 	.word	0x40010400

08007aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	f023 0210 	bic.w	r2, r3, #16
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0320 	bic.w	r3, r3, #32
 8007b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a22      	ldr	r2, [pc, #136]	; (8007bd0 <TIM_OC2_SetConfig+0xe4>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d003      	beq.n	8007b54 <TIM_OC2_SetConfig+0x68>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a21      	ldr	r2, [pc, #132]	; (8007bd4 <TIM_OC2_SetConfig+0xe8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d10d      	bne.n	8007b70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a17      	ldr	r2, [pc, #92]	; (8007bd0 <TIM_OC2_SetConfig+0xe4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_OC2_SetConfig+0x94>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a16      	ldr	r2, [pc, #88]	; (8007bd4 <TIM_OC2_SetConfig+0xe8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d113      	bne.n	8007ba8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	621a      	str	r2, [r3, #32]
}
 8007bc2:	bf00      	nop
 8007bc4:	371c      	adds	r7, #28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	40010000 	.word	0x40010000
 8007bd4:	40010400 	.word	0x40010400

08007bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0303 	bic.w	r3, r3, #3
 8007c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a21      	ldr	r2, [pc, #132]	; (8007cb8 <TIM_OC3_SetConfig+0xe0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d003      	beq.n	8007c3e <TIM_OC3_SetConfig+0x66>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a20      	ldr	r2, [pc, #128]	; (8007cbc <TIM_OC3_SetConfig+0xe4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d10d      	bne.n	8007c5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a16      	ldr	r2, [pc, #88]	; (8007cb8 <TIM_OC3_SetConfig+0xe0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d003      	beq.n	8007c6a <TIM_OC3_SetConfig+0x92>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a15      	ldr	r2, [pc, #84]	; (8007cbc <TIM_OC3_SetConfig+0xe4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d113      	bne.n	8007c92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	621a      	str	r2, [r3, #32]
}
 8007cac:	bf00      	nop
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	40010000 	.word	0x40010000
 8007cbc:	40010400 	.word	0x40010400

08007cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	021b      	lsls	r3, r3, #8
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	031b      	lsls	r3, r3, #12
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a12      	ldr	r2, [pc, #72]	; (8007d64 <TIM_OC4_SetConfig+0xa4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_OC4_SetConfig+0x68>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a11      	ldr	r2, [pc, #68]	; (8007d68 <TIM_OC4_SetConfig+0xa8>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d109      	bne.n	8007d3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	019b      	lsls	r3, r3, #6
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	621a      	str	r2, [r3, #32]
}
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40010000 	.word	0x40010000
 8007d68:	40010400 	.word	0x40010400

08007d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f003 031f 	and.w	r3, r3, #31
 8007d7e:	2201      	movs	r2, #1
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a1a      	ldr	r2, [r3, #32]
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	401a      	ands	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a1a      	ldr	r2, [r3, #32]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f003 031f 	and.w	r3, r3, #31
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	fa01 f303 	lsl.w	r3, r1, r3
 8007da4:	431a      	orrs	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
	...

08007db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d101      	bne.n	8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e05a      	b.n	8007e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a21      	ldr	r2, [pc, #132]	; (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d022      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1c:	d01d      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a1d      	ldr	r2, [pc, #116]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d018      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1b      	ldr	r2, [pc, #108]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d013      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1a      	ldr	r2, [pc, #104]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00e      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a18      	ldr	r2, [pc, #96]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d009      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a17      	ldr	r2, [pc, #92]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d004      	beq.n	8007e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a15      	ldr	r2, [pc, #84]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d10c      	bne.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40010000 	.word	0x40010000
 8007e98:	40000400 	.word	0x40000400
 8007e9c:	40000800 	.word	0x40000800
 8007ea0:	40000c00 	.word	0x40000c00
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40014000 	.word	0x40014000
 8007eac:	40001800 	.word	0x40001800

08007eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e03f      	b.n	8007f6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7fb fb04 	bl	800350c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2224      	movs	r2, #36	; 0x24
 8007f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f90b 	bl	8008138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	695a      	ldr	r2, [r3, #20]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b088      	sub	sp, #32
 8007f76:	af02      	add	r7, sp, #8
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	603b      	str	r3, [r7, #0]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	f040 8083 	bne.w	800809a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_UART_Transmit+0x2e>
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e07b      	b.n	800809c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <HAL_UART_Transmit+0x40>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e074      	b.n	800809c <HAL_UART_Transmit+0x12a>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2221      	movs	r2, #33	; 0x21
 8007fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007fc8:	f7fc fa16 	bl	80043f8 <HAL_GetTick>
 8007fcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	88fa      	ldrh	r2, [r7, #6]
 8007fd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	88fa      	ldrh	r2, [r7, #6]
 8007fd8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007fe2:	e042      	b.n	800806a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffa:	d122      	bne.n	8008042 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2200      	movs	r2, #0
 8008004:	2180      	movs	r1, #128	; 0x80
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 f84c 	bl	80080a4 <UART_WaitOnFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e042      	b.n	800809c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008028:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d103      	bne.n	800803a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	3302      	adds	r3, #2
 8008036:	60bb      	str	r3, [r7, #8]
 8008038:	e017      	b.n	800806a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	3301      	adds	r3, #1
 800803e:	60bb      	str	r3, [r7, #8]
 8008040:	e013      	b.n	800806a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2200      	movs	r2, #0
 800804a:	2180      	movs	r1, #128	; 0x80
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f829 	bl	80080a4 <UART_WaitOnFlagUntilTimeout>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e01f      	b.n	800809c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	60ba      	str	r2, [r7, #8]
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800806e:	b29b      	uxth	r3, r3
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1b7      	bne.n	8007fe4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2200      	movs	r2, #0
 800807c:	2140      	movs	r1, #64	; 0x40
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 f810 	bl	80080a4 <UART_WaitOnFlagUntilTimeout>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e006      	b.n	800809c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	e000      	b.n	800809c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800809a:	2302      	movs	r3, #2
  }
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	4613      	mov	r3, r2
 80080b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b4:	e02c      	b.n	8008110 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080bc:	d028      	beq.n	8008110 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80080c4:	f7fc f998 	bl	80043f8 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d21d      	bcs.n	8008110 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	695a      	ldr	r2, [r3, #20]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0201 	bic.w	r2, r2, #1
 80080f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e00f      	b.n	8008130 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	4013      	ands	r3, r2
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	429a      	cmp	r2, r3
 800811e:	bf0c      	ite	eq
 8008120:	2301      	moveq	r3, #1
 8008122:	2300      	movne	r3, #0
 8008124:	b2db      	uxtb	r3, r3
 8008126:	461a      	mov	r2, r3
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	429a      	cmp	r2, r3
 800812c:	d0c3      	beq.n	80080b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	b0bd      	sub	sp, #244	; 0xf4
 800813e:	af00      	add	r7, sp, #0
 8008140:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008154:	68d9      	ldr	r1, [r3, #12]
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	ea40 0301 	orr.w	r3, r0, r1
 8008160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	431a      	orrs	r2, r3
 8008170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	431a      	orrs	r2, r3
 8008178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	4313      	orrs	r3, r2
 8008180:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008190:	f021 010c 	bic.w	r1, r1, #12
 8008194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800819e:	430b      	orrs	r3, r1
 80081a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	6999      	ldr	r1, [r3, #24]
 80081b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	ea40 0301 	orr.w	r3, r0, r1
 80081be:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ca:	f040 81a5 	bne.w	8008518 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	4bcd      	ldr	r3, [pc, #820]	; (800850c <UART_SetConfig+0x3d4>)
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d006      	beq.n	80081e8 <UART_SetConfig+0xb0>
 80081da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	4bcb      	ldr	r3, [pc, #812]	; (8008510 <UART_SetConfig+0x3d8>)
 80081e2:	429a      	cmp	r2, r3
 80081e4:	f040 80cb 	bne.w	800837e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081e8:	f7fe f9c4 	bl	8006574 <HAL_RCC_GetPCLK2Freq>
 80081ec:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081f4:	461c      	mov	r4, r3
 80081f6:	f04f 0500 	mov.w	r5, #0
 80081fa:	4622      	mov	r2, r4
 80081fc:	462b      	mov	r3, r5
 80081fe:	1891      	adds	r1, r2, r2
 8008200:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008204:	415b      	adcs	r3, r3
 8008206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800820a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800820e:	1912      	adds	r2, r2, r4
 8008210:	eb45 0303 	adc.w	r3, r5, r3
 8008214:	f04f 0000 	mov.w	r0, #0
 8008218:	f04f 0100 	mov.w	r1, #0
 800821c:	00d9      	lsls	r1, r3, #3
 800821e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008222:	00d0      	lsls	r0, r2, #3
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	1911      	adds	r1, r2, r4
 800822a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800822e:	416b      	adcs	r3, r5
 8008230:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	461a      	mov	r2, r3
 800823c:	f04f 0300 	mov.w	r3, #0
 8008240:	1891      	adds	r1, r2, r2
 8008242:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008246:	415b      	adcs	r3, r3
 8008248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800824c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008250:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008254:	f7f8 fd18 	bl	8000c88 <__aeabi_uldivmod>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4bad      	ldr	r3, [pc, #692]	; (8008514 <UART_SetConfig+0x3dc>)
 800825e:	fba3 2302 	umull	r2, r3, r3, r2
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	011e      	lsls	r6, r3, #4
 8008266:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800826a:	461c      	mov	r4, r3
 800826c:	f04f 0500 	mov.w	r5, #0
 8008270:	4622      	mov	r2, r4
 8008272:	462b      	mov	r3, r5
 8008274:	1891      	adds	r1, r2, r2
 8008276:	67b9      	str	r1, [r7, #120]	; 0x78
 8008278:	415b      	adcs	r3, r3
 800827a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800827c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008280:	1912      	adds	r2, r2, r4
 8008282:	eb45 0303 	adc.w	r3, r5, r3
 8008286:	f04f 0000 	mov.w	r0, #0
 800828a:	f04f 0100 	mov.w	r1, #0
 800828e:	00d9      	lsls	r1, r3, #3
 8008290:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008294:	00d0      	lsls	r0, r2, #3
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	1911      	adds	r1, r2, r4
 800829c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80082a0:	416b      	adcs	r3, r5
 80082a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	461a      	mov	r2, r3
 80082ae:	f04f 0300 	mov.w	r3, #0
 80082b2:	1891      	adds	r1, r2, r2
 80082b4:	6739      	str	r1, [r7, #112]	; 0x70
 80082b6:	415b      	adcs	r3, r3
 80082b8:	677b      	str	r3, [r7, #116]	; 0x74
 80082ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80082be:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80082c2:	f7f8 fce1 	bl	8000c88 <__aeabi_uldivmod>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4b92      	ldr	r3, [pc, #584]	; (8008514 <UART_SetConfig+0x3dc>)
 80082cc:	fba3 1302 	umull	r1, r3, r3, r2
 80082d0:	095b      	lsrs	r3, r3, #5
 80082d2:	2164      	movs	r1, #100	; 0x64
 80082d4:	fb01 f303 	mul.w	r3, r1, r3
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	3332      	adds	r3, #50	; 0x32
 80082de:	4a8d      	ldr	r2, [pc, #564]	; (8008514 <UART_SetConfig+0x3dc>)
 80082e0:	fba2 2303 	umull	r2, r3, r2, r3
 80082e4:	095b      	lsrs	r3, r3, #5
 80082e6:	005b      	lsls	r3, r3, #1
 80082e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082ec:	441e      	add	r6, r3
 80082ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082f2:	4618      	mov	r0, r3
 80082f4:	f04f 0100 	mov.w	r1, #0
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	1894      	adds	r4, r2, r2
 80082fe:	66bc      	str	r4, [r7, #104]	; 0x68
 8008300:	415b      	adcs	r3, r3
 8008302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008304:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008308:	1812      	adds	r2, r2, r0
 800830a:	eb41 0303 	adc.w	r3, r1, r3
 800830e:	f04f 0400 	mov.w	r4, #0
 8008312:	f04f 0500 	mov.w	r5, #0
 8008316:	00dd      	lsls	r5, r3, #3
 8008318:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800831c:	00d4      	lsls	r4, r2, #3
 800831e:	4622      	mov	r2, r4
 8008320:	462b      	mov	r3, r5
 8008322:	1814      	adds	r4, r2, r0
 8008324:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008328:	414b      	adcs	r3, r1
 800832a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800832e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	461a      	mov	r2, r3
 8008336:	f04f 0300 	mov.w	r3, #0
 800833a:	1891      	adds	r1, r2, r2
 800833c:	6639      	str	r1, [r7, #96]	; 0x60
 800833e:	415b      	adcs	r3, r3
 8008340:	667b      	str	r3, [r7, #100]	; 0x64
 8008342:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800834a:	f7f8 fc9d 	bl	8000c88 <__aeabi_uldivmod>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4b70      	ldr	r3, [pc, #448]	; (8008514 <UART_SetConfig+0x3dc>)
 8008354:	fba3 1302 	umull	r1, r3, r3, r2
 8008358:	095b      	lsrs	r3, r3, #5
 800835a:	2164      	movs	r1, #100	; 0x64
 800835c:	fb01 f303 	mul.w	r3, r1, r3
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	3332      	adds	r3, #50	; 0x32
 8008366:	4a6b      	ldr	r2, [pc, #428]	; (8008514 <UART_SetConfig+0x3dc>)
 8008368:	fba2 2303 	umull	r2, r3, r2, r3
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	f003 0207 	and.w	r2, r3, #7
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4432      	add	r2, r6
 800837a:	609a      	str	r2, [r3, #8]
 800837c:	e26d      	b.n	800885a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800837e:	f7fe f8e5 	bl	800654c <HAL_RCC_GetPCLK1Freq>
 8008382:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008386:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800838a:	461c      	mov	r4, r3
 800838c:	f04f 0500 	mov.w	r5, #0
 8008390:	4622      	mov	r2, r4
 8008392:	462b      	mov	r3, r5
 8008394:	1891      	adds	r1, r2, r2
 8008396:	65b9      	str	r1, [r7, #88]	; 0x58
 8008398:	415b      	adcs	r3, r3
 800839a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800839c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083a0:	1912      	adds	r2, r2, r4
 80083a2:	eb45 0303 	adc.w	r3, r5, r3
 80083a6:	f04f 0000 	mov.w	r0, #0
 80083aa:	f04f 0100 	mov.w	r1, #0
 80083ae:	00d9      	lsls	r1, r3, #3
 80083b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083b4:	00d0      	lsls	r0, r2, #3
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	1911      	adds	r1, r2, r4
 80083bc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80083c0:	416b      	adcs	r3, r5
 80083c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	461a      	mov	r2, r3
 80083ce:	f04f 0300 	mov.w	r3, #0
 80083d2:	1891      	adds	r1, r2, r2
 80083d4:	6539      	str	r1, [r7, #80]	; 0x50
 80083d6:	415b      	adcs	r3, r3
 80083d8:	657b      	str	r3, [r7, #84]	; 0x54
 80083da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80083de:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80083e2:	f7f8 fc51 	bl	8000c88 <__aeabi_uldivmod>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4b4a      	ldr	r3, [pc, #296]	; (8008514 <UART_SetConfig+0x3dc>)
 80083ec:	fba3 2302 	umull	r2, r3, r3, r2
 80083f0:	095b      	lsrs	r3, r3, #5
 80083f2:	011e      	lsls	r6, r3, #4
 80083f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083f8:	461c      	mov	r4, r3
 80083fa:	f04f 0500 	mov.w	r5, #0
 80083fe:	4622      	mov	r2, r4
 8008400:	462b      	mov	r3, r5
 8008402:	1891      	adds	r1, r2, r2
 8008404:	64b9      	str	r1, [r7, #72]	; 0x48
 8008406:	415b      	adcs	r3, r3
 8008408:	64fb      	str	r3, [r7, #76]	; 0x4c
 800840a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800840e:	1912      	adds	r2, r2, r4
 8008410:	eb45 0303 	adc.w	r3, r5, r3
 8008414:	f04f 0000 	mov.w	r0, #0
 8008418:	f04f 0100 	mov.w	r1, #0
 800841c:	00d9      	lsls	r1, r3, #3
 800841e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008422:	00d0      	lsls	r0, r2, #3
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	1911      	adds	r1, r2, r4
 800842a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800842e:	416b      	adcs	r3, r5
 8008430:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	461a      	mov	r2, r3
 800843c:	f04f 0300 	mov.w	r3, #0
 8008440:	1891      	adds	r1, r2, r2
 8008442:	6439      	str	r1, [r7, #64]	; 0x40
 8008444:	415b      	adcs	r3, r3
 8008446:	647b      	str	r3, [r7, #68]	; 0x44
 8008448:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800844c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008450:	f7f8 fc1a 	bl	8000c88 <__aeabi_uldivmod>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4b2e      	ldr	r3, [pc, #184]	; (8008514 <UART_SetConfig+0x3dc>)
 800845a:	fba3 1302 	umull	r1, r3, r3, r2
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	2164      	movs	r1, #100	; 0x64
 8008462:	fb01 f303 	mul.w	r3, r1, r3
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	3332      	adds	r3, #50	; 0x32
 800846c:	4a29      	ldr	r2, [pc, #164]	; (8008514 <UART_SetConfig+0x3dc>)
 800846e:	fba2 2303 	umull	r2, r3, r2, r3
 8008472:	095b      	lsrs	r3, r3, #5
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800847a:	441e      	add	r6, r3
 800847c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008480:	4618      	mov	r0, r3
 8008482:	f04f 0100 	mov.w	r1, #0
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	1894      	adds	r4, r2, r2
 800848c:	63bc      	str	r4, [r7, #56]	; 0x38
 800848e:	415b      	adcs	r3, r3
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008492:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008496:	1812      	adds	r2, r2, r0
 8008498:	eb41 0303 	adc.w	r3, r1, r3
 800849c:	f04f 0400 	mov.w	r4, #0
 80084a0:	f04f 0500 	mov.w	r5, #0
 80084a4:	00dd      	lsls	r5, r3, #3
 80084a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084aa:	00d4      	lsls	r4, r2, #3
 80084ac:	4622      	mov	r2, r4
 80084ae:	462b      	mov	r3, r5
 80084b0:	1814      	adds	r4, r2, r0
 80084b2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80084b6:	414b      	adcs	r3, r1
 80084b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	461a      	mov	r2, r3
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	1891      	adds	r1, r2, r2
 80084ca:	6339      	str	r1, [r7, #48]	; 0x30
 80084cc:	415b      	adcs	r3, r3
 80084ce:	637b      	str	r3, [r7, #52]	; 0x34
 80084d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80084d4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084d8:	f7f8 fbd6 	bl	8000c88 <__aeabi_uldivmod>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <UART_SetConfig+0x3dc>)
 80084e2:	fba3 1302 	umull	r1, r3, r3, r2
 80084e6:	095b      	lsrs	r3, r3, #5
 80084e8:	2164      	movs	r1, #100	; 0x64
 80084ea:	fb01 f303 	mul.w	r3, r1, r3
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	3332      	adds	r3, #50	; 0x32
 80084f4:	4a07      	ldr	r2, [pc, #28]	; (8008514 <UART_SetConfig+0x3dc>)
 80084f6:	fba2 2303 	umull	r2, r3, r2, r3
 80084fa:	095b      	lsrs	r3, r3, #5
 80084fc:	f003 0207 	and.w	r2, r3, #7
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4432      	add	r2, r6
 8008508:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800850a:	e1a6      	b.n	800885a <UART_SetConfig+0x722>
 800850c:	40011000 	.word	0x40011000
 8008510:	40011400 	.word	0x40011400
 8008514:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	4bd1      	ldr	r3, [pc, #836]	; (8008864 <UART_SetConfig+0x72c>)
 8008520:	429a      	cmp	r2, r3
 8008522:	d006      	beq.n	8008532 <UART_SetConfig+0x3fa>
 8008524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	4bcf      	ldr	r3, [pc, #828]	; (8008868 <UART_SetConfig+0x730>)
 800852c:	429a      	cmp	r2, r3
 800852e:	f040 80ca 	bne.w	80086c6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008532:	f7fe f81f 	bl	8006574 <HAL_RCC_GetPCLK2Freq>
 8008536:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800853a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800853e:	461c      	mov	r4, r3
 8008540:	f04f 0500 	mov.w	r5, #0
 8008544:	4622      	mov	r2, r4
 8008546:	462b      	mov	r3, r5
 8008548:	1891      	adds	r1, r2, r2
 800854a:	62b9      	str	r1, [r7, #40]	; 0x28
 800854c:	415b      	adcs	r3, r3
 800854e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008550:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008554:	1912      	adds	r2, r2, r4
 8008556:	eb45 0303 	adc.w	r3, r5, r3
 800855a:	f04f 0000 	mov.w	r0, #0
 800855e:	f04f 0100 	mov.w	r1, #0
 8008562:	00d9      	lsls	r1, r3, #3
 8008564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008568:	00d0      	lsls	r0, r2, #3
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	eb12 0a04 	adds.w	sl, r2, r4
 8008572:	eb43 0b05 	adc.w	fp, r3, r5
 8008576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	4618      	mov	r0, r3
 800857e:	f04f 0100 	mov.w	r1, #0
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	008b      	lsls	r3, r1, #2
 800858c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008590:	0082      	lsls	r2, r0, #2
 8008592:	4650      	mov	r0, sl
 8008594:	4659      	mov	r1, fp
 8008596:	f7f8 fb77 	bl	8000c88 <__aeabi_uldivmod>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4bb3      	ldr	r3, [pc, #716]	; (800886c <UART_SetConfig+0x734>)
 80085a0:	fba3 2302 	umull	r2, r3, r3, r2
 80085a4:	095b      	lsrs	r3, r3, #5
 80085a6:	011e      	lsls	r6, r3, #4
 80085a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085ac:	4618      	mov	r0, r3
 80085ae:	f04f 0100 	mov.w	r1, #0
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	1894      	adds	r4, r2, r2
 80085b8:	623c      	str	r4, [r7, #32]
 80085ba:	415b      	adcs	r3, r3
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
 80085be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085c2:	1812      	adds	r2, r2, r0
 80085c4:	eb41 0303 	adc.w	r3, r1, r3
 80085c8:	f04f 0400 	mov.w	r4, #0
 80085cc:	f04f 0500 	mov.w	r5, #0
 80085d0:	00dd      	lsls	r5, r3, #3
 80085d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085d6:	00d4      	lsls	r4, r2, #3
 80085d8:	4622      	mov	r2, r4
 80085da:	462b      	mov	r3, r5
 80085dc:	1814      	adds	r4, r2, r0
 80085de:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80085e2:	414b      	adcs	r3, r1
 80085e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f04f 0100 	mov.w	r1, #0
 80085f4:	f04f 0200 	mov.w	r2, #0
 80085f8:	f04f 0300 	mov.w	r3, #0
 80085fc:	008b      	lsls	r3, r1, #2
 80085fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008602:	0082      	lsls	r2, r0, #2
 8008604:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008608:	f7f8 fb3e 	bl	8000c88 <__aeabi_uldivmod>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4b96      	ldr	r3, [pc, #600]	; (800886c <UART_SetConfig+0x734>)
 8008612:	fba3 1302 	umull	r1, r3, r3, r2
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	2164      	movs	r1, #100	; 0x64
 800861a:	fb01 f303 	mul.w	r3, r1, r3
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	3332      	adds	r3, #50	; 0x32
 8008624:	4a91      	ldr	r2, [pc, #580]	; (800886c <UART_SetConfig+0x734>)
 8008626:	fba2 2303 	umull	r2, r3, r2, r3
 800862a:	095b      	lsrs	r3, r3, #5
 800862c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008630:	441e      	add	r6, r3
 8008632:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008636:	4618      	mov	r0, r3
 8008638:	f04f 0100 	mov.w	r1, #0
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	1894      	adds	r4, r2, r2
 8008642:	61bc      	str	r4, [r7, #24]
 8008644:	415b      	adcs	r3, r3
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800864c:	1812      	adds	r2, r2, r0
 800864e:	eb41 0303 	adc.w	r3, r1, r3
 8008652:	f04f 0400 	mov.w	r4, #0
 8008656:	f04f 0500 	mov.w	r5, #0
 800865a:	00dd      	lsls	r5, r3, #3
 800865c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008660:	00d4      	lsls	r4, r2, #3
 8008662:	4622      	mov	r2, r4
 8008664:	462b      	mov	r3, r5
 8008666:	1814      	adds	r4, r2, r0
 8008668:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800866c:	414b      	adcs	r3, r1
 800866e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	4618      	mov	r0, r3
 800867a:	f04f 0100 	mov.w	r1, #0
 800867e:	f04f 0200 	mov.w	r2, #0
 8008682:	f04f 0300 	mov.w	r3, #0
 8008686:	008b      	lsls	r3, r1, #2
 8008688:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800868c:	0082      	lsls	r2, r0, #2
 800868e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008692:	f7f8 faf9 	bl	8000c88 <__aeabi_uldivmod>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4b74      	ldr	r3, [pc, #464]	; (800886c <UART_SetConfig+0x734>)
 800869c:	fba3 1302 	umull	r1, r3, r3, r2
 80086a0:	095b      	lsrs	r3, r3, #5
 80086a2:	2164      	movs	r1, #100	; 0x64
 80086a4:	fb01 f303 	mul.w	r3, r1, r3
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	011b      	lsls	r3, r3, #4
 80086ac:	3332      	adds	r3, #50	; 0x32
 80086ae:	4a6f      	ldr	r2, [pc, #444]	; (800886c <UART_SetConfig+0x734>)
 80086b0:	fba2 2303 	umull	r2, r3, r2, r3
 80086b4:	095b      	lsrs	r3, r3, #5
 80086b6:	f003 020f 	and.w	r2, r3, #15
 80086ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4432      	add	r2, r6
 80086c2:	609a      	str	r2, [r3, #8]
 80086c4:	e0c9      	b.n	800885a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80086c6:	f7fd ff41 	bl	800654c <HAL_RCC_GetPCLK1Freq>
 80086ca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086d2:	461c      	mov	r4, r3
 80086d4:	f04f 0500 	mov.w	r5, #0
 80086d8:	4622      	mov	r2, r4
 80086da:	462b      	mov	r3, r5
 80086dc:	1891      	adds	r1, r2, r2
 80086de:	6139      	str	r1, [r7, #16]
 80086e0:	415b      	adcs	r3, r3
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80086e8:	1912      	adds	r2, r2, r4
 80086ea:	eb45 0303 	adc.w	r3, r5, r3
 80086ee:	f04f 0000 	mov.w	r0, #0
 80086f2:	f04f 0100 	mov.w	r1, #0
 80086f6:	00d9      	lsls	r1, r3, #3
 80086f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086fc:	00d0      	lsls	r0, r2, #3
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	eb12 0804 	adds.w	r8, r2, r4
 8008706:	eb43 0905 	adc.w	r9, r3, r5
 800870a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	4618      	mov	r0, r3
 8008712:	f04f 0100 	mov.w	r1, #0
 8008716:	f04f 0200 	mov.w	r2, #0
 800871a:	f04f 0300 	mov.w	r3, #0
 800871e:	008b      	lsls	r3, r1, #2
 8008720:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008724:	0082      	lsls	r2, r0, #2
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f8 faad 	bl	8000c88 <__aeabi_uldivmod>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	4b4e      	ldr	r3, [pc, #312]	; (800886c <UART_SetConfig+0x734>)
 8008734:	fba3 2302 	umull	r2, r3, r3, r2
 8008738:	095b      	lsrs	r3, r3, #5
 800873a:	011e      	lsls	r6, r3, #4
 800873c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008740:	4618      	mov	r0, r3
 8008742:	f04f 0100 	mov.w	r1, #0
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	1894      	adds	r4, r2, r2
 800874c:	60bc      	str	r4, [r7, #8]
 800874e:	415b      	adcs	r3, r3
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008756:	1812      	adds	r2, r2, r0
 8008758:	eb41 0303 	adc.w	r3, r1, r3
 800875c:	f04f 0400 	mov.w	r4, #0
 8008760:	f04f 0500 	mov.w	r5, #0
 8008764:	00dd      	lsls	r5, r3, #3
 8008766:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800876a:	00d4      	lsls	r4, r2, #3
 800876c:	4622      	mov	r2, r4
 800876e:	462b      	mov	r3, r5
 8008770:	1814      	adds	r4, r2, r0
 8008772:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008776:	414b      	adcs	r3, r1
 8008778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800877c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	4618      	mov	r0, r3
 8008784:	f04f 0100 	mov.w	r1, #0
 8008788:	f04f 0200 	mov.w	r2, #0
 800878c:	f04f 0300 	mov.w	r3, #0
 8008790:	008b      	lsls	r3, r1, #2
 8008792:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008796:	0082      	lsls	r2, r0, #2
 8008798:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800879c:	f7f8 fa74 	bl	8000c88 <__aeabi_uldivmod>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4b31      	ldr	r3, [pc, #196]	; (800886c <UART_SetConfig+0x734>)
 80087a6:	fba3 1302 	umull	r1, r3, r3, r2
 80087aa:	095b      	lsrs	r3, r3, #5
 80087ac:	2164      	movs	r1, #100	; 0x64
 80087ae:	fb01 f303 	mul.w	r3, r1, r3
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	3332      	adds	r3, #50	; 0x32
 80087b8:	4a2c      	ldr	r2, [pc, #176]	; (800886c <UART_SetConfig+0x734>)
 80087ba:	fba2 2303 	umull	r2, r3, r2, r3
 80087be:	095b      	lsrs	r3, r3, #5
 80087c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087c4:	441e      	add	r6, r3
 80087c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f04f 0100 	mov.w	r1, #0
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	1894      	adds	r4, r2, r2
 80087d6:	603c      	str	r4, [r7, #0]
 80087d8:	415b      	adcs	r3, r3
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e0:	1812      	adds	r2, r2, r0
 80087e2:	eb41 0303 	adc.w	r3, r1, r3
 80087e6:	f04f 0400 	mov.w	r4, #0
 80087ea:	f04f 0500 	mov.w	r5, #0
 80087ee:	00dd      	lsls	r5, r3, #3
 80087f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80087f4:	00d4      	lsls	r4, r2, #3
 80087f6:	4622      	mov	r2, r4
 80087f8:	462b      	mov	r3, r5
 80087fa:	1814      	adds	r4, r2, r0
 80087fc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008800:	414b      	adcs	r3, r1
 8008802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	4618      	mov	r0, r3
 800880e:	f04f 0100 	mov.w	r1, #0
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	008b      	lsls	r3, r1, #2
 800881c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008820:	0082      	lsls	r2, r0, #2
 8008822:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008826:	f7f8 fa2f 	bl	8000c88 <__aeabi_uldivmod>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	4b0f      	ldr	r3, [pc, #60]	; (800886c <UART_SetConfig+0x734>)
 8008830:	fba3 1302 	umull	r1, r3, r3, r2
 8008834:	095b      	lsrs	r3, r3, #5
 8008836:	2164      	movs	r1, #100	; 0x64
 8008838:	fb01 f303 	mul.w	r3, r1, r3
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	3332      	adds	r3, #50	; 0x32
 8008842:	4a0a      	ldr	r2, [pc, #40]	; (800886c <UART_SetConfig+0x734>)
 8008844:	fba2 2303 	umull	r2, r3, r2, r3
 8008848:	095b      	lsrs	r3, r3, #5
 800884a:	f003 020f 	and.w	r2, r3, #15
 800884e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4432      	add	r2, r6
 8008856:	609a      	str	r2, [r3, #8]
}
 8008858:	e7ff      	b.n	800885a <UART_SetConfig+0x722>
 800885a:	bf00      	nop
 800885c:	37f4      	adds	r7, #244	; 0xf4
 800885e:	46bd      	mov	sp, r7
 8008860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008864:	40011000 	.word	0x40011000
 8008868:	40011400 	.word	0x40011400
 800886c:	51eb851f 	.word	0x51eb851f

08008870 <__errno>:
 8008870:	4b01      	ldr	r3, [pc, #4]	; (8008878 <__errno+0x8>)
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	2000000c 	.word	0x2000000c

0800887c <__libc_init_array>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4d0d      	ldr	r5, [pc, #52]	; (80088b4 <__libc_init_array+0x38>)
 8008880:	4c0d      	ldr	r4, [pc, #52]	; (80088b8 <__libc_init_array+0x3c>)
 8008882:	1b64      	subs	r4, r4, r5
 8008884:	10a4      	asrs	r4, r4, #2
 8008886:	2600      	movs	r6, #0
 8008888:	42a6      	cmp	r6, r4
 800888a:	d109      	bne.n	80088a0 <__libc_init_array+0x24>
 800888c:	4d0b      	ldr	r5, [pc, #44]	; (80088bc <__libc_init_array+0x40>)
 800888e:	4c0c      	ldr	r4, [pc, #48]	; (80088c0 <__libc_init_array+0x44>)
 8008890:	f004 fcd4 	bl	800d23c <_init>
 8008894:	1b64      	subs	r4, r4, r5
 8008896:	10a4      	asrs	r4, r4, #2
 8008898:	2600      	movs	r6, #0
 800889a:	42a6      	cmp	r6, r4
 800889c:	d105      	bne.n	80088aa <__libc_init_array+0x2e>
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a4:	4798      	blx	r3
 80088a6:	3601      	adds	r6, #1
 80088a8:	e7ee      	b.n	8008888 <__libc_init_array+0xc>
 80088aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ae:	4798      	blx	r3
 80088b0:	3601      	adds	r6, #1
 80088b2:	e7f2      	b.n	800889a <__libc_init_array+0x1e>
 80088b4:	0800d9c4 	.word	0x0800d9c4
 80088b8:	0800d9c4 	.word	0x0800d9c4
 80088bc:	0800d9c4 	.word	0x0800d9c4
 80088c0:	0800d9c8 	.word	0x0800d9c8

080088c4 <memcpy>:
 80088c4:	440a      	add	r2, r1
 80088c6:	4291      	cmp	r1, r2
 80088c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088cc:	d100      	bne.n	80088d0 <memcpy+0xc>
 80088ce:	4770      	bx	lr
 80088d0:	b510      	push	{r4, lr}
 80088d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088da:	4291      	cmp	r1, r2
 80088dc:	d1f9      	bne.n	80088d2 <memcpy+0xe>
 80088de:	bd10      	pop	{r4, pc}

080088e0 <memset>:
 80088e0:	4402      	add	r2, r0
 80088e2:	4603      	mov	r3, r0
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d100      	bne.n	80088ea <memset+0xa>
 80088e8:	4770      	bx	lr
 80088ea:	f803 1b01 	strb.w	r1, [r3], #1
 80088ee:	e7f9      	b.n	80088e4 <memset+0x4>

080088f0 <__cvt>:
 80088f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	ec55 4b10 	vmov	r4, r5, d0
 80088f8:	2d00      	cmp	r5, #0
 80088fa:	460e      	mov	r6, r1
 80088fc:	4619      	mov	r1, r3
 80088fe:	462b      	mov	r3, r5
 8008900:	bfbb      	ittet	lt
 8008902:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008906:	461d      	movlt	r5, r3
 8008908:	2300      	movge	r3, #0
 800890a:	232d      	movlt	r3, #45	; 0x2d
 800890c:	700b      	strb	r3, [r1, #0]
 800890e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008910:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008914:	4691      	mov	r9, r2
 8008916:	f023 0820 	bic.w	r8, r3, #32
 800891a:	bfbc      	itt	lt
 800891c:	4622      	movlt	r2, r4
 800891e:	4614      	movlt	r4, r2
 8008920:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008924:	d005      	beq.n	8008932 <__cvt+0x42>
 8008926:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800892a:	d100      	bne.n	800892e <__cvt+0x3e>
 800892c:	3601      	adds	r6, #1
 800892e:	2102      	movs	r1, #2
 8008930:	e000      	b.n	8008934 <__cvt+0x44>
 8008932:	2103      	movs	r1, #3
 8008934:	ab03      	add	r3, sp, #12
 8008936:	9301      	str	r3, [sp, #4]
 8008938:	ab02      	add	r3, sp, #8
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	ec45 4b10 	vmov	d0, r4, r5
 8008940:	4653      	mov	r3, sl
 8008942:	4632      	mov	r2, r6
 8008944:	f001 ff04 	bl	800a750 <_dtoa_r>
 8008948:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800894c:	4607      	mov	r7, r0
 800894e:	d102      	bne.n	8008956 <__cvt+0x66>
 8008950:	f019 0f01 	tst.w	r9, #1
 8008954:	d022      	beq.n	800899c <__cvt+0xac>
 8008956:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800895a:	eb07 0906 	add.w	r9, r7, r6
 800895e:	d110      	bne.n	8008982 <__cvt+0x92>
 8008960:	783b      	ldrb	r3, [r7, #0]
 8008962:	2b30      	cmp	r3, #48	; 0x30
 8008964:	d10a      	bne.n	800897c <__cvt+0x8c>
 8008966:	2200      	movs	r2, #0
 8008968:	2300      	movs	r3, #0
 800896a:	4620      	mov	r0, r4
 800896c:	4629      	mov	r1, r5
 800896e:	f7f8 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8008972:	b918      	cbnz	r0, 800897c <__cvt+0x8c>
 8008974:	f1c6 0601 	rsb	r6, r6, #1
 8008978:	f8ca 6000 	str.w	r6, [sl]
 800897c:	f8da 3000 	ldr.w	r3, [sl]
 8008980:	4499      	add	r9, r3
 8008982:	2200      	movs	r2, #0
 8008984:	2300      	movs	r3, #0
 8008986:	4620      	mov	r0, r4
 8008988:	4629      	mov	r1, r5
 800898a:	f7f8 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800898e:	b108      	cbz	r0, 8008994 <__cvt+0xa4>
 8008990:	f8cd 900c 	str.w	r9, [sp, #12]
 8008994:	2230      	movs	r2, #48	; 0x30
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	454b      	cmp	r3, r9
 800899a:	d307      	bcc.n	80089ac <__cvt+0xbc>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089a0:	1bdb      	subs	r3, r3, r7
 80089a2:	4638      	mov	r0, r7
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	b004      	add	sp, #16
 80089a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ac:	1c59      	adds	r1, r3, #1
 80089ae:	9103      	str	r1, [sp, #12]
 80089b0:	701a      	strb	r2, [r3, #0]
 80089b2:	e7f0      	b.n	8008996 <__cvt+0xa6>

080089b4 <__exponent>:
 80089b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089b6:	4603      	mov	r3, r0
 80089b8:	2900      	cmp	r1, #0
 80089ba:	bfb8      	it	lt
 80089bc:	4249      	neglt	r1, r1
 80089be:	f803 2b02 	strb.w	r2, [r3], #2
 80089c2:	bfb4      	ite	lt
 80089c4:	222d      	movlt	r2, #45	; 0x2d
 80089c6:	222b      	movge	r2, #43	; 0x2b
 80089c8:	2909      	cmp	r1, #9
 80089ca:	7042      	strb	r2, [r0, #1]
 80089cc:	dd2a      	ble.n	8008a24 <__exponent+0x70>
 80089ce:	f10d 0407 	add.w	r4, sp, #7
 80089d2:	46a4      	mov	ip, r4
 80089d4:	270a      	movs	r7, #10
 80089d6:	46a6      	mov	lr, r4
 80089d8:	460a      	mov	r2, r1
 80089da:	fb91 f6f7 	sdiv	r6, r1, r7
 80089de:	fb07 1516 	mls	r5, r7, r6, r1
 80089e2:	3530      	adds	r5, #48	; 0x30
 80089e4:	2a63      	cmp	r2, #99	; 0x63
 80089e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80089ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80089ee:	4631      	mov	r1, r6
 80089f0:	dcf1      	bgt.n	80089d6 <__exponent+0x22>
 80089f2:	3130      	adds	r1, #48	; 0x30
 80089f4:	f1ae 0502 	sub.w	r5, lr, #2
 80089f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80089fc:	1c44      	adds	r4, r0, #1
 80089fe:	4629      	mov	r1, r5
 8008a00:	4561      	cmp	r1, ip
 8008a02:	d30a      	bcc.n	8008a1a <__exponent+0x66>
 8008a04:	f10d 0209 	add.w	r2, sp, #9
 8008a08:	eba2 020e 	sub.w	r2, r2, lr
 8008a0c:	4565      	cmp	r5, ip
 8008a0e:	bf88      	it	hi
 8008a10:	2200      	movhi	r2, #0
 8008a12:	4413      	add	r3, r2
 8008a14:	1a18      	subs	r0, r3, r0
 8008a16:	b003      	add	sp, #12
 8008a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008a22:	e7ed      	b.n	8008a00 <__exponent+0x4c>
 8008a24:	2330      	movs	r3, #48	; 0x30
 8008a26:	3130      	adds	r1, #48	; 0x30
 8008a28:	7083      	strb	r3, [r0, #2]
 8008a2a:	70c1      	strb	r1, [r0, #3]
 8008a2c:	1d03      	adds	r3, r0, #4
 8008a2e:	e7f1      	b.n	8008a14 <__exponent+0x60>

08008a30 <_printf_float>:
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	ed2d 8b02 	vpush	{d8}
 8008a38:	b08d      	sub	sp, #52	; 0x34
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008a40:	4616      	mov	r6, r2
 8008a42:	461f      	mov	r7, r3
 8008a44:	4605      	mov	r5, r0
 8008a46:	f003 f995 	bl	800bd74 <_localeconv_r>
 8008a4a:	f8d0 a000 	ldr.w	sl, [r0]
 8008a4e:	4650      	mov	r0, sl
 8008a50:	f7f7 fbbe 	bl	80001d0 <strlen>
 8008a54:	2300      	movs	r3, #0
 8008a56:	930a      	str	r3, [sp, #40]	; 0x28
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	9305      	str	r3, [sp, #20]
 8008a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008a64:	3307      	adds	r3, #7
 8008a66:	f023 0307 	bic.w	r3, r3, #7
 8008a6a:	f103 0208 	add.w	r2, r3, #8
 8008a6e:	f8c8 2000 	str.w	r2, [r8]
 8008a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a82:	9307      	str	r3, [sp, #28]
 8008a84:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a88:	ee08 0a10 	vmov	s16, r0
 8008a8c:	4b9f      	ldr	r3, [pc, #636]	; (8008d0c <_printf_float+0x2dc>)
 8008a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a92:	f04f 32ff 	mov.w	r2, #4294967295
 8008a96:	f7f8 f849 	bl	8000b2c <__aeabi_dcmpun>
 8008a9a:	bb88      	cbnz	r0, 8008b00 <_printf_float+0xd0>
 8008a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008aa0:	4b9a      	ldr	r3, [pc, #616]	; (8008d0c <_printf_float+0x2dc>)
 8008aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa6:	f7f8 f823 	bl	8000af0 <__aeabi_dcmple>
 8008aaa:	bb48      	cbnz	r0, 8008b00 <_printf_float+0xd0>
 8008aac:	2200      	movs	r2, #0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	f7f8 f812 	bl	8000adc <__aeabi_dcmplt>
 8008ab8:	b110      	cbz	r0, 8008ac0 <_printf_float+0x90>
 8008aba:	232d      	movs	r3, #45	; 0x2d
 8008abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac0:	4b93      	ldr	r3, [pc, #588]	; (8008d10 <_printf_float+0x2e0>)
 8008ac2:	4894      	ldr	r0, [pc, #592]	; (8008d14 <_printf_float+0x2e4>)
 8008ac4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ac8:	bf94      	ite	ls
 8008aca:	4698      	movls	r8, r3
 8008acc:	4680      	movhi	r8, r0
 8008ace:	2303      	movs	r3, #3
 8008ad0:	6123      	str	r3, [r4, #16]
 8008ad2:	9b05      	ldr	r3, [sp, #20]
 8008ad4:	f023 0204 	bic.w	r2, r3, #4
 8008ad8:	6022      	str	r2, [r4, #0]
 8008ada:	f04f 0900 	mov.w	r9, #0
 8008ade:	9700      	str	r7, [sp, #0]
 8008ae0:	4633      	mov	r3, r6
 8008ae2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 f9d8 	bl	8008e9c <_printf_common>
 8008aec:	3001      	adds	r0, #1
 8008aee:	f040 8090 	bne.w	8008c12 <_printf_float+0x1e2>
 8008af2:	f04f 30ff 	mov.w	r0, #4294967295
 8008af6:	b00d      	add	sp, #52	; 0x34
 8008af8:	ecbd 8b02 	vpop	{d8}
 8008afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	4642      	mov	r2, r8
 8008b02:	464b      	mov	r3, r9
 8008b04:	4640      	mov	r0, r8
 8008b06:	4649      	mov	r1, r9
 8008b08:	f7f8 f810 	bl	8000b2c <__aeabi_dcmpun>
 8008b0c:	b140      	cbz	r0, 8008b20 <_printf_float+0xf0>
 8008b0e:	464b      	mov	r3, r9
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bfbc      	itt	lt
 8008b14:	232d      	movlt	r3, #45	; 0x2d
 8008b16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008b1a:	487f      	ldr	r0, [pc, #508]	; (8008d18 <_printf_float+0x2e8>)
 8008b1c:	4b7f      	ldr	r3, [pc, #508]	; (8008d1c <_printf_float+0x2ec>)
 8008b1e:	e7d1      	b.n	8008ac4 <_printf_float+0x94>
 8008b20:	6863      	ldr	r3, [r4, #4]
 8008b22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008b26:	9206      	str	r2, [sp, #24]
 8008b28:	1c5a      	adds	r2, r3, #1
 8008b2a:	d13f      	bne.n	8008bac <_printf_float+0x17c>
 8008b2c:	2306      	movs	r3, #6
 8008b2e:	6063      	str	r3, [r4, #4]
 8008b30:	9b05      	ldr	r3, [sp, #20]
 8008b32:	6861      	ldr	r1, [r4, #4]
 8008b34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008b38:	2300      	movs	r3, #0
 8008b3a:	9303      	str	r3, [sp, #12]
 8008b3c:	ab0a      	add	r3, sp, #40	; 0x28
 8008b3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008b42:	ab09      	add	r3, sp, #36	; 0x24
 8008b44:	ec49 8b10 	vmov	d0, r8, r9
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	6022      	str	r2, [r4, #0]
 8008b4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b50:	4628      	mov	r0, r5
 8008b52:	f7ff fecd 	bl	80088f0 <__cvt>
 8008b56:	9b06      	ldr	r3, [sp, #24]
 8008b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b5a:	2b47      	cmp	r3, #71	; 0x47
 8008b5c:	4680      	mov	r8, r0
 8008b5e:	d108      	bne.n	8008b72 <_printf_float+0x142>
 8008b60:	1cc8      	adds	r0, r1, #3
 8008b62:	db02      	blt.n	8008b6a <_printf_float+0x13a>
 8008b64:	6863      	ldr	r3, [r4, #4]
 8008b66:	4299      	cmp	r1, r3
 8008b68:	dd41      	ble.n	8008bee <_printf_float+0x1be>
 8008b6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008b6e:	fa5f fb8b 	uxtb.w	fp, fp
 8008b72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b76:	d820      	bhi.n	8008bba <_printf_float+0x18a>
 8008b78:	3901      	subs	r1, #1
 8008b7a:	465a      	mov	r2, fp
 8008b7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b80:	9109      	str	r1, [sp, #36]	; 0x24
 8008b82:	f7ff ff17 	bl	80089b4 <__exponent>
 8008b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b88:	1813      	adds	r3, r2, r0
 8008b8a:	2a01      	cmp	r2, #1
 8008b8c:	4681      	mov	r9, r0
 8008b8e:	6123      	str	r3, [r4, #16]
 8008b90:	dc02      	bgt.n	8008b98 <_printf_float+0x168>
 8008b92:	6822      	ldr	r2, [r4, #0]
 8008b94:	07d2      	lsls	r2, r2, #31
 8008b96:	d501      	bpl.n	8008b9c <_printf_float+0x16c>
 8008b98:	3301      	adds	r3, #1
 8008b9a:	6123      	str	r3, [r4, #16]
 8008b9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d09c      	beq.n	8008ade <_printf_float+0xae>
 8008ba4:	232d      	movs	r3, #45	; 0x2d
 8008ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008baa:	e798      	b.n	8008ade <_printf_float+0xae>
 8008bac:	9a06      	ldr	r2, [sp, #24]
 8008bae:	2a47      	cmp	r2, #71	; 0x47
 8008bb0:	d1be      	bne.n	8008b30 <_printf_float+0x100>
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1bc      	bne.n	8008b30 <_printf_float+0x100>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e7b9      	b.n	8008b2e <_printf_float+0xfe>
 8008bba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008bbe:	d118      	bne.n	8008bf2 <_printf_float+0x1c2>
 8008bc0:	2900      	cmp	r1, #0
 8008bc2:	6863      	ldr	r3, [r4, #4]
 8008bc4:	dd0b      	ble.n	8008bde <_printf_float+0x1ae>
 8008bc6:	6121      	str	r1, [r4, #16]
 8008bc8:	b913      	cbnz	r3, 8008bd0 <_printf_float+0x1a0>
 8008bca:	6822      	ldr	r2, [r4, #0]
 8008bcc:	07d0      	lsls	r0, r2, #31
 8008bce:	d502      	bpl.n	8008bd6 <_printf_float+0x1a6>
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	440b      	add	r3, r1
 8008bd4:	6123      	str	r3, [r4, #16]
 8008bd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008bd8:	f04f 0900 	mov.w	r9, #0
 8008bdc:	e7de      	b.n	8008b9c <_printf_float+0x16c>
 8008bde:	b913      	cbnz	r3, 8008be6 <_printf_float+0x1b6>
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	07d2      	lsls	r2, r2, #31
 8008be4:	d501      	bpl.n	8008bea <_printf_float+0x1ba>
 8008be6:	3302      	adds	r3, #2
 8008be8:	e7f4      	b.n	8008bd4 <_printf_float+0x1a4>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e7f2      	b.n	8008bd4 <_printf_float+0x1a4>
 8008bee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf4:	4299      	cmp	r1, r3
 8008bf6:	db05      	blt.n	8008c04 <_printf_float+0x1d4>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	6121      	str	r1, [r4, #16]
 8008bfc:	07d8      	lsls	r0, r3, #31
 8008bfe:	d5ea      	bpl.n	8008bd6 <_printf_float+0x1a6>
 8008c00:	1c4b      	adds	r3, r1, #1
 8008c02:	e7e7      	b.n	8008bd4 <_printf_float+0x1a4>
 8008c04:	2900      	cmp	r1, #0
 8008c06:	bfd4      	ite	le
 8008c08:	f1c1 0202 	rsble	r2, r1, #2
 8008c0c:	2201      	movgt	r2, #1
 8008c0e:	4413      	add	r3, r2
 8008c10:	e7e0      	b.n	8008bd4 <_printf_float+0x1a4>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	055a      	lsls	r2, r3, #21
 8008c16:	d407      	bmi.n	8008c28 <_printf_float+0x1f8>
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	4642      	mov	r2, r8
 8008c1c:	4631      	mov	r1, r6
 8008c1e:	4628      	mov	r0, r5
 8008c20:	47b8      	blx	r7
 8008c22:	3001      	adds	r0, #1
 8008c24:	d12c      	bne.n	8008c80 <_printf_float+0x250>
 8008c26:	e764      	b.n	8008af2 <_printf_float+0xc2>
 8008c28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c2c:	f240 80e0 	bls.w	8008df0 <_printf_float+0x3c0>
 8008c30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c34:	2200      	movs	r2, #0
 8008c36:	2300      	movs	r3, #0
 8008c38:	f7f7 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d034      	beq.n	8008caa <_printf_float+0x27a>
 8008c40:	4a37      	ldr	r2, [pc, #220]	; (8008d20 <_printf_float+0x2f0>)
 8008c42:	2301      	movs	r3, #1
 8008c44:	4631      	mov	r1, r6
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	f43f af51 	beq.w	8008af2 <_printf_float+0xc2>
 8008c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c54:	429a      	cmp	r2, r3
 8008c56:	db02      	blt.n	8008c5e <_printf_float+0x22e>
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	07d8      	lsls	r0, r3, #31
 8008c5c:	d510      	bpl.n	8008c80 <_printf_float+0x250>
 8008c5e:	ee18 3a10 	vmov	r3, s16
 8008c62:	4652      	mov	r2, sl
 8008c64:	4631      	mov	r1, r6
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f43f af41 	beq.w	8008af2 <_printf_float+0xc2>
 8008c70:	f04f 0800 	mov.w	r8, #0
 8008c74:	f104 091a 	add.w	r9, r4, #26
 8008c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	4543      	cmp	r3, r8
 8008c7e:	dc09      	bgt.n	8008c94 <_printf_float+0x264>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	079b      	lsls	r3, r3, #30
 8008c84:	f100 8105 	bmi.w	8008e92 <_printf_float+0x462>
 8008c88:	68e0      	ldr	r0, [r4, #12]
 8008c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c8c:	4298      	cmp	r0, r3
 8008c8e:	bfb8      	it	lt
 8008c90:	4618      	movlt	r0, r3
 8008c92:	e730      	b.n	8008af6 <_printf_float+0xc6>
 8008c94:	2301      	movs	r3, #1
 8008c96:	464a      	mov	r2, r9
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	47b8      	blx	r7
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	f43f af27 	beq.w	8008af2 <_printf_float+0xc2>
 8008ca4:	f108 0801 	add.w	r8, r8, #1
 8008ca8:	e7e6      	b.n	8008c78 <_printf_float+0x248>
 8008caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dc39      	bgt.n	8008d24 <_printf_float+0x2f4>
 8008cb0:	4a1b      	ldr	r2, [pc, #108]	; (8008d20 <_printf_float+0x2f0>)
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	47b8      	blx	r7
 8008cba:	3001      	adds	r0, #1
 8008cbc:	f43f af19 	beq.w	8008af2 <_printf_float+0xc2>
 8008cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	d102      	bne.n	8008cce <_printf_float+0x29e>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	07d9      	lsls	r1, r3, #31
 8008ccc:	d5d8      	bpl.n	8008c80 <_printf_float+0x250>
 8008cce:	ee18 3a10 	vmov	r3, s16
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	47b8      	blx	r7
 8008cda:	3001      	adds	r0, #1
 8008cdc:	f43f af09 	beq.w	8008af2 <_printf_float+0xc2>
 8008ce0:	f04f 0900 	mov.w	r9, #0
 8008ce4:	f104 0a1a 	add.w	sl, r4, #26
 8008ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cea:	425b      	negs	r3, r3
 8008cec:	454b      	cmp	r3, r9
 8008cee:	dc01      	bgt.n	8008cf4 <_printf_float+0x2c4>
 8008cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf2:	e792      	b.n	8008c1a <_printf_float+0x1ea>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	4652      	mov	r2, sl
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	47b8      	blx	r7
 8008cfe:	3001      	adds	r0, #1
 8008d00:	f43f aef7 	beq.w	8008af2 <_printf_float+0xc2>
 8008d04:	f109 0901 	add.w	r9, r9, #1
 8008d08:	e7ee      	b.n	8008ce8 <_printf_float+0x2b8>
 8008d0a:	bf00      	nop
 8008d0c:	7fefffff 	.word	0x7fefffff
 8008d10:	0800d508 	.word	0x0800d508
 8008d14:	0800d50c 	.word	0x0800d50c
 8008d18:	0800d514 	.word	0x0800d514
 8008d1c:	0800d510 	.word	0x0800d510
 8008d20:	0800d518 	.word	0x0800d518
 8008d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	bfa8      	it	ge
 8008d2c:	461a      	movge	r2, r3
 8008d2e:	2a00      	cmp	r2, #0
 8008d30:	4691      	mov	r9, r2
 8008d32:	dc37      	bgt.n	8008da4 <_printf_float+0x374>
 8008d34:	f04f 0b00 	mov.w	fp, #0
 8008d38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d3c:	f104 021a 	add.w	r2, r4, #26
 8008d40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d42:	9305      	str	r3, [sp, #20]
 8008d44:	eba3 0309 	sub.w	r3, r3, r9
 8008d48:	455b      	cmp	r3, fp
 8008d4a:	dc33      	bgt.n	8008db4 <_printf_float+0x384>
 8008d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d50:	429a      	cmp	r2, r3
 8008d52:	db3b      	blt.n	8008dcc <_printf_float+0x39c>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	07da      	lsls	r2, r3, #31
 8008d58:	d438      	bmi.n	8008dcc <_printf_float+0x39c>
 8008d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d5c:	9b05      	ldr	r3, [sp, #20]
 8008d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	eba2 0901 	sub.w	r9, r2, r1
 8008d66:	4599      	cmp	r9, r3
 8008d68:	bfa8      	it	ge
 8008d6a:	4699      	movge	r9, r3
 8008d6c:	f1b9 0f00 	cmp.w	r9, #0
 8008d70:	dc35      	bgt.n	8008dde <_printf_float+0x3ae>
 8008d72:	f04f 0800 	mov.w	r8, #0
 8008d76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d7a:	f104 0a1a 	add.w	sl, r4, #26
 8008d7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d82:	1a9b      	subs	r3, r3, r2
 8008d84:	eba3 0309 	sub.w	r3, r3, r9
 8008d88:	4543      	cmp	r3, r8
 8008d8a:	f77f af79 	ble.w	8008c80 <_printf_float+0x250>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4652      	mov	r2, sl
 8008d92:	4631      	mov	r1, r6
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b8      	blx	r7
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f43f aeaa 	beq.w	8008af2 <_printf_float+0xc2>
 8008d9e:	f108 0801 	add.w	r8, r8, #1
 8008da2:	e7ec      	b.n	8008d7e <_printf_float+0x34e>
 8008da4:	4613      	mov	r3, r2
 8008da6:	4631      	mov	r1, r6
 8008da8:	4642      	mov	r2, r8
 8008daa:	4628      	mov	r0, r5
 8008dac:	47b8      	blx	r7
 8008dae:	3001      	adds	r0, #1
 8008db0:	d1c0      	bne.n	8008d34 <_printf_float+0x304>
 8008db2:	e69e      	b.n	8008af2 <_printf_float+0xc2>
 8008db4:	2301      	movs	r3, #1
 8008db6:	4631      	mov	r1, r6
 8008db8:	4628      	mov	r0, r5
 8008dba:	9205      	str	r2, [sp, #20]
 8008dbc:	47b8      	blx	r7
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	f43f ae97 	beq.w	8008af2 <_printf_float+0xc2>
 8008dc4:	9a05      	ldr	r2, [sp, #20]
 8008dc6:	f10b 0b01 	add.w	fp, fp, #1
 8008dca:	e7b9      	b.n	8008d40 <_printf_float+0x310>
 8008dcc:	ee18 3a10 	vmov	r3, s16
 8008dd0:	4652      	mov	r2, sl
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	47b8      	blx	r7
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d1be      	bne.n	8008d5a <_printf_float+0x32a>
 8008ddc:	e689      	b.n	8008af2 <_printf_float+0xc2>
 8008dde:	9a05      	ldr	r2, [sp, #20]
 8008de0:	464b      	mov	r3, r9
 8008de2:	4442      	add	r2, r8
 8008de4:	4631      	mov	r1, r6
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b8      	blx	r7
 8008dea:	3001      	adds	r0, #1
 8008dec:	d1c1      	bne.n	8008d72 <_printf_float+0x342>
 8008dee:	e680      	b.n	8008af2 <_printf_float+0xc2>
 8008df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008df2:	2a01      	cmp	r2, #1
 8008df4:	dc01      	bgt.n	8008dfa <_printf_float+0x3ca>
 8008df6:	07db      	lsls	r3, r3, #31
 8008df8:	d538      	bpl.n	8008e6c <_printf_float+0x43c>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4642      	mov	r2, r8
 8008dfe:	4631      	mov	r1, r6
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b8      	blx	r7
 8008e04:	3001      	adds	r0, #1
 8008e06:	f43f ae74 	beq.w	8008af2 <_printf_float+0xc2>
 8008e0a:	ee18 3a10 	vmov	r3, s16
 8008e0e:	4652      	mov	r2, sl
 8008e10:	4631      	mov	r1, r6
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b8      	blx	r7
 8008e16:	3001      	adds	r0, #1
 8008e18:	f43f ae6b 	beq.w	8008af2 <_printf_float+0xc2>
 8008e1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e20:	2200      	movs	r2, #0
 8008e22:	2300      	movs	r3, #0
 8008e24:	f7f7 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e28:	b9d8      	cbnz	r0, 8008e62 <_printf_float+0x432>
 8008e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e2c:	f108 0201 	add.w	r2, r8, #1
 8008e30:	3b01      	subs	r3, #1
 8008e32:	4631      	mov	r1, r6
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b8      	blx	r7
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d10e      	bne.n	8008e5a <_printf_float+0x42a>
 8008e3c:	e659      	b.n	8008af2 <_printf_float+0xc2>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4652      	mov	r2, sl
 8008e42:	4631      	mov	r1, r6
 8008e44:	4628      	mov	r0, r5
 8008e46:	47b8      	blx	r7
 8008e48:	3001      	adds	r0, #1
 8008e4a:	f43f ae52 	beq.w	8008af2 <_printf_float+0xc2>
 8008e4e:	f108 0801 	add.w	r8, r8, #1
 8008e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e54:	3b01      	subs	r3, #1
 8008e56:	4543      	cmp	r3, r8
 8008e58:	dcf1      	bgt.n	8008e3e <_printf_float+0x40e>
 8008e5a:	464b      	mov	r3, r9
 8008e5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e60:	e6dc      	b.n	8008c1c <_printf_float+0x1ec>
 8008e62:	f04f 0800 	mov.w	r8, #0
 8008e66:	f104 0a1a 	add.w	sl, r4, #26
 8008e6a:	e7f2      	b.n	8008e52 <_printf_float+0x422>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	4642      	mov	r2, r8
 8008e70:	e7df      	b.n	8008e32 <_printf_float+0x402>
 8008e72:	2301      	movs	r3, #1
 8008e74:	464a      	mov	r2, r9
 8008e76:	4631      	mov	r1, r6
 8008e78:	4628      	mov	r0, r5
 8008e7a:	47b8      	blx	r7
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	f43f ae38 	beq.w	8008af2 <_printf_float+0xc2>
 8008e82:	f108 0801 	add.w	r8, r8, #1
 8008e86:	68e3      	ldr	r3, [r4, #12]
 8008e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e8a:	1a5b      	subs	r3, r3, r1
 8008e8c:	4543      	cmp	r3, r8
 8008e8e:	dcf0      	bgt.n	8008e72 <_printf_float+0x442>
 8008e90:	e6fa      	b.n	8008c88 <_printf_float+0x258>
 8008e92:	f04f 0800 	mov.w	r8, #0
 8008e96:	f104 0919 	add.w	r9, r4, #25
 8008e9a:	e7f4      	b.n	8008e86 <_printf_float+0x456>

08008e9c <_printf_common>:
 8008e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea0:	4616      	mov	r6, r2
 8008ea2:	4699      	mov	r9, r3
 8008ea4:	688a      	ldr	r2, [r1, #8]
 8008ea6:	690b      	ldr	r3, [r1, #16]
 8008ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008eac:	4293      	cmp	r3, r2
 8008eae:	bfb8      	it	lt
 8008eb0:	4613      	movlt	r3, r2
 8008eb2:	6033      	str	r3, [r6, #0]
 8008eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008eb8:	4607      	mov	r7, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	b10a      	cbz	r2, 8008ec2 <_printf_common+0x26>
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	6033      	str	r3, [r6, #0]
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	0699      	lsls	r1, r3, #26
 8008ec6:	bf42      	ittt	mi
 8008ec8:	6833      	ldrmi	r3, [r6, #0]
 8008eca:	3302      	addmi	r3, #2
 8008ecc:	6033      	strmi	r3, [r6, #0]
 8008ece:	6825      	ldr	r5, [r4, #0]
 8008ed0:	f015 0506 	ands.w	r5, r5, #6
 8008ed4:	d106      	bne.n	8008ee4 <_printf_common+0x48>
 8008ed6:	f104 0a19 	add.w	sl, r4, #25
 8008eda:	68e3      	ldr	r3, [r4, #12]
 8008edc:	6832      	ldr	r2, [r6, #0]
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	42ab      	cmp	r3, r5
 8008ee2:	dc26      	bgt.n	8008f32 <_printf_common+0x96>
 8008ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ee8:	1e13      	subs	r3, r2, #0
 8008eea:	6822      	ldr	r2, [r4, #0]
 8008eec:	bf18      	it	ne
 8008eee:	2301      	movne	r3, #1
 8008ef0:	0692      	lsls	r2, r2, #26
 8008ef2:	d42b      	bmi.n	8008f4c <_printf_common+0xb0>
 8008ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ef8:	4649      	mov	r1, r9
 8008efa:	4638      	mov	r0, r7
 8008efc:	47c0      	blx	r8
 8008efe:	3001      	adds	r0, #1
 8008f00:	d01e      	beq.n	8008f40 <_printf_common+0xa4>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	68e5      	ldr	r5, [r4, #12]
 8008f06:	6832      	ldr	r2, [r6, #0]
 8008f08:	f003 0306 	and.w	r3, r3, #6
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	bf08      	it	eq
 8008f10:	1aad      	subeq	r5, r5, r2
 8008f12:	68a3      	ldr	r3, [r4, #8]
 8008f14:	6922      	ldr	r2, [r4, #16]
 8008f16:	bf0c      	ite	eq
 8008f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f1c:	2500      	movne	r5, #0
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	bfc4      	itt	gt
 8008f22:	1a9b      	subgt	r3, r3, r2
 8008f24:	18ed      	addgt	r5, r5, r3
 8008f26:	2600      	movs	r6, #0
 8008f28:	341a      	adds	r4, #26
 8008f2a:	42b5      	cmp	r5, r6
 8008f2c:	d11a      	bne.n	8008f64 <_printf_common+0xc8>
 8008f2e:	2000      	movs	r0, #0
 8008f30:	e008      	b.n	8008f44 <_printf_common+0xa8>
 8008f32:	2301      	movs	r3, #1
 8008f34:	4652      	mov	r2, sl
 8008f36:	4649      	mov	r1, r9
 8008f38:	4638      	mov	r0, r7
 8008f3a:	47c0      	blx	r8
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d103      	bne.n	8008f48 <_printf_common+0xac>
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f48:	3501      	adds	r5, #1
 8008f4a:	e7c6      	b.n	8008eda <_printf_common+0x3e>
 8008f4c:	18e1      	adds	r1, r4, r3
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	2030      	movs	r0, #48	; 0x30
 8008f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f56:	4422      	add	r2, r4
 8008f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f60:	3302      	adds	r3, #2
 8008f62:	e7c7      	b.n	8008ef4 <_printf_common+0x58>
 8008f64:	2301      	movs	r3, #1
 8008f66:	4622      	mov	r2, r4
 8008f68:	4649      	mov	r1, r9
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	47c0      	blx	r8
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d0e6      	beq.n	8008f40 <_printf_common+0xa4>
 8008f72:	3601      	adds	r6, #1
 8008f74:	e7d9      	b.n	8008f2a <_printf_common+0x8e>
	...

08008f78 <_printf_i>:
 8008f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	4691      	mov	r9, r2
 8008f80:	7e27      	ldrb	r7, [r4, #24]
 8008f82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f84:	2f78      	cmp	r7, #120	; 0x78
 8008f86:	4680      	mov	r8, r0
 8008f88:	469a      	mov	sl, r3
 8008f8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f8e:	d807      	bhi.n	8008fa0 <_printf_i+0x28>
 8008f90:	2f62      	cmp	r7, #98	; 0x62
 8008f92:	d80a      	bhi.n	8008faa <_printf_i+0x32>
 8008f94:	2f00      	cmp	r7, #0
 8008f96:	f000 80d8 	beq.w	800914a <_printf_i+0x1d2>
 8008f9a:	2f58      	cmp	r7, #88	; 0x58
 8008f9c:	f000 80a3 	beq.w	80090e6 <_printf_i+0x16e>
 8008fa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fa8:	e03a      	b.n	8009020 <_printf_i+0xa8>
 8008faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fae:	2b15      	cmp	r3, #21
 8008fb0:	d8f6      	bhi.n	8008fa0 <_printf_i+0x28>
 8008fb2:	a001      	add	r0, pc, #4	; (adr r0, 8008fb8 <_printf_i+0x40>)
 8008fb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008fb8:	08009011 	.word	0x08009011
 8008fbc:	08009025 	.word	0x08009025
 8008fc0:	08008fa1 	.word	0x08008fa1
 8008fc4:	08008fa1 	.word	0x08008fa1
 8008fc8:	08008fa1 	.word	0x08008fa1
 8008fcc:	08008fa1 	.word	0x08008fa1
 8008fd0:	08009025 	.word	0x08009025
 8008fd4:	08008fa1 	.word	0x08008fa1
 8008fd8:	08008fa1 	.word	0x08008fa1
 8008fdc:	08008fa1 	.word	0x08008fa1
 8008fe0:	08008fa1 	.word	0x08008fa1
 8008fe4:	08009131 	.word	0x08009131
 8008fe8:	08009055 	.word	0x08009055
 8008fec:	08009113 	.word	0x08009113
 8008ff0:	08008fa1 	.word	0x08008fa1
 8008ff4:	08008fa1 	.word	0x08008fa1
 8008ff8:	08009153 	.word	0x08009153
 8008ffc:	08008fa1 	.word	0x08008fa1
 8009000:	08009055 	.word	0x08009055
 8009004:	08008fa1 	.word	0x08008fa1
 8009008:	08008fa1 	.word	0x08008fa1
 800900c:	0800911b 	.word	0x0800911b
 8009010:	680b      	ldr	r3, [r1, #0]
 8009012:	1d1a      	adds	r2, r3, #4
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	600a      	str	r2, [r1, #0]
 8009018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800901c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009020:	2301      	movs	r3, #1
 8009022:	e0a3      	b.n	800916c <_printf_i+0x1f4>
 8009024:	6825      	ldr	r5, [r4, #0]
 8009026:	6808      	ldr	r0, [r1, #0]
 8009028:	062e      	lsls	r6, r5, #24
 800902a:	f100 0304 	add.w	r3, r0, #4
 800902e:	d50a      	bpl.n	8009046 <_printf_i+0xce>
 8009030:	6805      	ldr	r5, [r0, #0]
 8009032:	600b      	str	r3, [r1, #0]
 8009034:	2d00      	cmp	r5, #0
 8009036:	da03      	bge.n	8009040 <_printf_i+0xc8>
 8009038:	232d      	movs	r3, #45	; 0x2d
 800903a:	426d      	negs	r5, r5
 800903c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009040:	485e      	ldr	r0, [pc, #376]	; (80091bc <_printf_i+0x244>)
 8009042:	230a      	movs	r3, #10
 8009044:	e019      	b.n	800907a <_printf_i+0x102>
 8009046:	f015 0f40 	tst.w	r5, #64	; 0x40
 800904a:	6805      	ldr	r5, [r0, #0]
 800904c:	600b      	str	r3, [r1, #0]
 800904e:	bf18      	it	ne
 8009050:	b22d      	sxthne	r5, r5
 8009052:	e7ef      	b.n	8009034 <_printf_i+0xbc>
 8009054:	680b      	ldr	r3, [r1, #0]
 8009056:	6825      	ldr	r5, [r4, #0]
 8009058:	1d18      	adds	r0, r3, #4
 800905a:	6008      	str	r0, [r1, #0]
 800905c:	0628      	lsls	r0, r5, #24
 800905e:	d501      	bpl.n	8009064 <_printf_i+0xec>
 8009060:	681d      	ldr	r5, [r3, #0]
 8009062:	e002      	b.n	800906a <_printf_i+0xf2>
 8009064:	0669      	lsls	r1, r5, #25
 8009066:	d5fb      	bpl.n	8009060 <_printf_i+0xe8>
 8009068:	881d      	ldrh	r5, [r3, #0]
 800906a:	4854      	ldr	r0, [pc, #336]	; (80091bc <_printf_i+0x244>)
 800906c:	2f6f      	cmp	r7, #111	; 0x6f
 800906e:	bf0c      	ite	eq
 8009070:	2308      	moveq	r3, #8
 8009072:	230a      	movne	r3, #10
 8009074:	2100      	movs	r1, #0
 8009076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800907a:	6866      	ldr	r6, [r4, #4]
 800907c:	60a6      	str	r6, [r4, #8]
 800907e:	2e00      	cmp	r6, #0
 8009080:	bfa2      	ittt	ge
 8009082:	6821      	ldrge	r1, [r4, #0]
 8009084:	f021 0104 	bicge.w	r1, r1, #4
 8009088:	6021      	strge	r1, [r4, #0]
 800908a:	b90d      	cbnz	r5, 8009090 <_printf_i+0x118>
 800908c:	2e00      	cmp	r6, #0
 800908e:	d04d      	beq.n	800912c <_printf_i+0x1b4>
 8009090:	4616      	mov	r6, r2
 8009092:	fbb5 f1f3 	udiv	r1, r5, r3
 8009096:	fb03 5711 	mls	r7, r3, r1, r5
 800909a:	5dc7      	ldrb	r7, [r0, r7]
 800909c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090a0:	462f      	mov	r7, r5
 80090a2:	42bb      	cmp	r3, r7
 80090a4:	460d      	mov	r5, r1
 80090a6:	d9f4      	bls.n	8009092 <_printf_i+0x11a>
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d10b      	bne.n	80090c4 <_printf_i+0x14c>
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	07df      	lsls	r7, r3, #31
 80090b0:	d508      	bpl.n	80090c4 <_printf_i+0x14c>
 80090b2:	6923      	ldr	r3, [r4, #16]
 80090b4:	6861      	ldr	r1, [r4, #4]
 80090b6:	4299      	cmp	r1, r3
 80090b8:	bfde      	ittt	le
 80090ba:	2330      	movle	r3, #48	; 0x30
 80090bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090c4:	1b92      	subs	r2, r2, r6
 80090c6:	6122      	str	r2, [r4, #16]
 80090c8:	f8cd a000 	str.w	sl, [sp]
 80090cc:	464b      	mov	r3, r9
 80090ce:	aa03      	add	r2, sp, #12
 80090d0:	4621      	mov	r1, r4
 80090d2:	4640      	mov	r0, r8
 80090d4:	f7ff fee2 	bl	8008e9c <_printf_common>
 80090d8:	3001      	adds	r0, #1
 80090da:	d14c      	bne.n	8009176 <_printf_i+0x1fe>
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	b004      	add	sp, #16
 80090e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e6:	4835      	ldr	r0, [pc, #212]	; (80091bc <_printf_i+0x244>)
 80090e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	680e      	ldr	r6, [r1, #0]
 80090f0:	061f      	lsls	r7, r3, #24
 80090f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80090f6:	600e      	str	r6, [r1, #0]
 80090f8:	d514      	bpl.n	8009124 <_printf_i+0x1ac>
 80090fa:	07d9      	lsls	r1, r3, #31
 80090fc:	bf44      	itt	mi
 80090fe:	f043 0320 	orrmi.w	r3, r3, #32
 8009102:	6023      	strmi	r3, [r4, #0]
 8009104:	b91d      	cbnz	r5, 800910e <_printf_i+0x196>
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	f023 0320 	bic.w	r3, r3, #32
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	2310      	movs	r3, #16
 8009110:	e7b0      	b.n	8009074 <_printf_i+0xfc>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	f043 0320 	orr.w	r3, r3, #32
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	2378      	movs	r3, #120	; 0x78
 800911c:	4828      	ldr	r0, [pc, #160]	; (80091c0 <_printf_i+0x248>)
 800911e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009122:	e7e3      	b.n	80090ec <_printf_i+0x174>
 8009124:	065e      	lsls	r6, r3, #25
 8009126:	bf48      	it	mi
 8009128:	b2ad      	uxthmi	r5, r5
 800912a:	e7e6      	b.n	80090fa <_printf_i+0x182>
 800912c:	4616      	mov	r6, r2
 800912e:	e7bb      	b.n	80090a8 <_printf_i+0x130>
 8009130:	680b      	ldr	r3, [r1, #0]
 8009132:	6826      	ldr	r6, [r4, #0]
 8009134:	6960      	ldr	r0, [r4, #20]
 8009136:	1d1d      	adds	r5, r3, #4
 8009138:	600d      	str	r5, [r1, #0]
 800913a:	0635      	lsls	r5, r6, #24
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	d501      	bpl.n	8009144 <_printf_i+0x1cc>
 8009140:	6018      	str	r0, [r3, #0]
 8009142:	e002      	b.n	800914a <_printf_i+0x1d2>
 8009144:	0671      	lsls	r1, r6, #25
 8009146:	d5fb      	bpl.n	8009140 <_printf_i+0x1c8>
 8009148:	8018      	strh	r0, [r3, #0]
 800914a:	2300      	movs	r3, #0
 800914c:	6123      	str	r3, [r4, #16]
 800914e:	4616      	mov	r6, r2
 8009150:	e7ba      	b.n	80090c8 <_printf_i+0x150>
 8009152:	680b      	ldr	r3, [r1, #0]
 8009154:	1d1a      	adds	r2, r3, #4
 8009156:	600a      	str	r2, [r1, #0]
 8009158:	681e      	ldr	r6, [r3, #0]
 800915a:	6862      	ldr	r2, [r4, #4]
 800915c:	2100      	movs	r1, #0
 800915e:	4630      	mov	r0, r6
 8009160:	f7f7 f83e 	bl	80001e0 <memchr>
 8009164:	b108      	cbz	r0, 800916a <_printf_i+0x1f2>
 8009166:	1b80      	subs	r0, r0, r6
 8009168:	6060      	str	r0, [r4, #4]
 800916a:	6863      	ldr	r3, [r4, #4]
 800916c:	6123      	str	r3, [r4, #16]
 800916e:	2300      	movs	r3, #0
 8009170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009174:	e7a8      	b.n	80090c8 <_printf_i+0x150>
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	4632      	mov	r2, r6
 800917a:	4649      	mov	r1, r9
 800917c:	4640      	mov	r0, r8
 800917e:	47d0      	blx	sl
 8009180:	3001      	adds	r0, #1
 8009182:	d0ab      	beq.n	80090dc <_printf_i+0x164>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	079b      	lsls	r3, r3, #30
 8009188:	d413      	bmi.n	80091b2 <_printf_i+0x23a>
 800918a:	68e0      	ldr	r0, [r4, #12]
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	4298      	cmp	r0, r3
 8009190:	bfb8      	it	lt
 8009192:	4618      	movlt	r0, r3
 8009194:	e7a4      	b.n	80090e0 <_printf_i+0x168>
 8009196:	2301      	movs	r3, #1
 8009198:	4632      	mov	r2, r6
 800919a:	4649      	mov	r1, r9
 800919c:	4640      	mov	r0, r8
 800919e:	47d0      	blx	sl
 80091a0:	3001      	adds	r0, #1
 80091a2:	d09b      	beq.n	80090dc <_printf_i+0x164>
 80091a4:	3501      	adds	r5, #1
 80091a6:	68e3      	ldr	r3, [r4, #12]
 80091a8:	9903      	ldr	r1, [sp, #12]
 80091aa:	1a5b      	subs	r3, r3, r1
 80091ac:	42ab      	cmp	r3, r5
 80091ae:	dcf2      	bgt.n	8009196 <_printf_i+0x21e>
 80091b0:	e7eb      	b.n	800918a <_printf_i+0x212>
 80091b2:	2500      	movs	r5, #0
 80091b4:	f104 0619 	add.w	r6, r4, #25
 80091b8:	e7f5      	b.n	80091a6 <_printf_i+0x22e>
 80091ba:	bf00      	nop
 80091bc:	0800d51a 	.word	0x0800d51a
 80091c0:	0800d52b 	.word	0x0800d52b

080091c4 <_scanf_float>:
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	b087      	sub	sp, #28
 80091ca:	4617      	mov	r7, r2
 80091cc:	9303      	str	r3, [sp, #12]
 80091ce:	688b      	ldr	r3, [r1, #8]
 80091d0:	1e5a      	subs	r2, r3, #1
 80091d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80091d6:	bf83      	ittte	hi
 80091d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80091dc:	195b      	addhi	r3, r3, r5
 80091de:	9302      	strhi	r3, [sp, #8]
 80091e0:	2300      	movls	r3, #0
 80091e2:	bf86      	itte	hi
 80091e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80091e8:	608b      	strhi	r3, [r1, #8]
 80091ea:	9302      	strls	r3, [sp, #8]
 80091ec:	680b      	ldr	r3, [r1, #0]
 80091ee:	468b      	mov	fp, r1
 80091f0:	2500      	movs	r5, #0
 80091f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80091f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80091fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80091fe:	4680      	mov	r8, r0
 8009200:	460c      	mov	r4, r1
 8009202:	465e      	mov	r6, fp
 8009204:	46aa      	mov	sl, r5
 8009206:	46a9      	mov	r9, r5
 8009208:	9501      	str	r5, [sp, #4]
 800920a:	68a2      	ldr	r2, [r4, #8]
 800920c:	b152      	cbz	r2, 8009224 <_scanf_float+0x60>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	2b4e      	cmp	r3, #78	; 0x4e
 8009214:	d864      	bhi.n	80092e0 <_scanf_float+0x11c>
 8009216:	2b40      	cmp	r3, #64	; 0x40
 8009218:	d83c      	bhi.n	8009294 <_scanf_float+0xd0>
 800921a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800921e:	b2c8      	uxtb	r0, r1
 8009220:	280e      	cmp	r0, #14
 8009222:	d93a      	bls.n	800929a <_scanf_float+0xd6>
 8009224:	f1b9 0f00 	cmp.w	r9, #0
 8009228:	d003      	beq.n	8009232 <_scanf_float+0x6e>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009236:	f1ba 0f01 	cmp.w	sl, #1
 800923a:	f200 8113 	bhi.w	8009464 <_scanf_float+0x2a0>
 800923e:	455e      	cmp	r6, fp
 8009240:	f200 8105 	bhi.w	800944e <_scanf_float+0x28a>
 8009244:	2501      	movs	r5, #1
 8009246:	4628      	mov	r0, r5
 8009248:	b007      	add	sp, #28
 800924a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009252:	2a0d      	cmp	r2, #13
 8009254:	d8e6      	bhi.n	8009224 <_scanf_float+0x60>
 8009256:	a101      	add	r1, pc, #4	; (adr r1, 800925c <_scanf_float+0x98>)
 8009258:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800925c:	0800939b 	.word	0x0800939b
 8009260:	08009225 	.word	0x08009225
 8009264:	08009225 	.word	0x08009225
 8009268:	08009225 	.word	0x08009225
 800926c:	080093fb 	.word	0x080093fb
 8009270:	080093d3 	.word	0x080093d3
 8009274:	08009225 	.word	0x08009225
 8009278:	08009225 	.word	0x08009225
 800927c:	080093a9 	.word	0x080093a9
 8009280:	08009225 	.word	0x08009225
 8009284:	08009225 	.word	0x08009225
 8009288:	08009225 	.word	0x08009225
 800928c:	08009225 	.word	0x08009225
 8009290:	08009361 	.word	0x08009361
 8009294:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009298:	e7db      	b.n	8009252 <_scanf_float+0x8e>
 800929a:	290e      	cmp	r1, #14
 800929c:	d8c2      	bhi.n	8009224 <_scanf_float+0x60>
 800929e:	a001      	add	r0, pc, #4	; (adr r0, 80092a4 <_scanf_float+0xe0>)
 80092a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80092a4:	08009353 	.word	0x08009353
 80092a8:	08009225 	.word	0x08009225
 80092ac:	08009353 	.word	0x08009353
 80092b0:	080093e7 	.word	0x080093e7
 80092b4:	08009225 	.word	0x08009225
 80092b8:	08009301 	.word	0x08009301
 80092bc:	0800933d 	.word	0x0800933d
 80092c0:	0800933d 	.word	0x0800933d
 80092c4:	0800933d 	.word	0x0800933d
 80092c8:	0800933d 	.word	0x0800933d
 80092cc:	0800933d 	.word	0x0800933d
 80092d0:	0800933d 	.word	0x0800933d
 80092d4:	0800933d 	.word	0x0800933d
 80092d8:	0800933d 	.word	0x0800933d
 80092dc:	0800933d 	.word	0x0800933d
 80092e0:	2b6e      	cmp	r3, #110	; 0x6e
 80092e2:	d809      	bhi.n	80092f8 <_scanf_float+0x134>
 80092e4:	2b60      	cmp	r3, #96	; 0x60
 80092e6:	d8b2      	bhi.n	800924e <_scanf_float+0x8a>
 80092e8:	2b54      	cmp	r3, #84	; 0x54
 80092ea:	d077      	beq.n	80093dc <_scanf_float+0x218>
 80092ec:	2b59      	cmp	r3, #89	; 0x59
 80092ee:	d199      	bne.n	8009224 <_scanf_float+0x60>
 80092f0:	2d07      	cmp	r5, #7
 80092f2:	d197      	bne.n	8009224 <_scanf_float+0x60>
 80092f4:	2508      	movs	r5, #8
 80092f6:	e029      	b.n	800934c <_scanf_float+0x188>
 80092f8:	2b74      	cmp	r3, #116	; 0x74
 80092fa:	d06f      	beq.n	80093dc <_scanf_float+0x218>
 80092fc:	2b79      	cmp	r3, #121	; 0x79
 80092fe:	e7f6      	b.n	80092ee <_scanf_float+0x12a>
 8009300:	6821      	ldr	r1, [r4, #0]
 8009302:	05c8      	lsls	r0, r1, #23
 8009304:	d51a      	bpl.n	800933c <_scanf_float+0x178>
 8009306:	9b02      	ldr	r3, [sp, #8]
 8009308:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800930c:	6021      	str	r1, [r4, #0]
 800930e:	f109 0901 	add.w	r9, r9, #1
 8009312:	b11b      	cbz	r3, 800931c <_scanf_float+0x158>
 8009314:	3b01      	subs	r3, #1
 8009316:	3201      	adds	r2, #1
 8009318:	9302      	str	r3, [sp, #8]
 800931a:	60a2      	str	r2, [r4, #8]
 800931c:	68a3      	ldr	r3, [r4, #8]
 800931e:	3b01      	subs	r3, #1
 8009320:	60a3      	str	r3, [r4, #8]
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	3301      	adds	r3, #1
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3b01      	subs	r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	607b      	str	r3, [r7, #4]
 8009330:	f340 8084 	ble.w	800943c <_scanf_float+0x278>
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	3301      	adds	r3, #1
 8009338:	603b      	str	r3, [r7, #0]
 800933a:	e766      	b.n	800920a <_scanf_float+0x46>
 800933c:	eb1a 0f05 	cmn.w	sl, r5
 8009340:	f47f af70 	bne.w	8009224 <_scanf_float+0x60>
 8009344:	6822      	ldr	r2, [r4, #0]
 8009346:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800934a:	6022      	str	r2, [r4, #0]
 800934c:	f806 3b01 	strb.w	r3, [r6], #1
 8009350:	e7e4      	b.n	800931c <_scanf_float+0x158>
 8009352:	6822      	ldr	r2, [r4, #0]
 8009354:	0610      	lsls	r0, r2, #24
 8009356:	f57f af65 	bpl.w	8009224 <_scanf_float+0x60>
 800935a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800935e:	e7f4      	b.n	800934a <_scanf_float+0x186>
 8009360:	f1ba 0f00 	cmp.w	sl, #0
 8009364:	d10e      	bne.n	8009384 <_scanf_float+0x1c0>
 8009366:	f1b9 0f00 	cmp.w	r9, #0
 800936a:	d10e      	bne.n	800938a <_scanf_float+0x1c6>
 800936c:	6822      	ldr	r2, [r4, #0]
 800936e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009372:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009376:	d108      	bne.n	800938a <_scanf_float+0x1c6>
 8009378:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800937c:	6022      	str	r2, [r4, #0]
 800937e:	f04f 0a01 	mov.w	sl, #1
 8009382:	e7e3      	b.n	800934c <_scanf_float+0x188>
 8009384:	f1ba 0f02 	cmp.w	sl, #2
 8009388:	d055      	beq.n	8009436 <_scanf_float+0x272>
 800938a:	2d01      	cmp	r5, #1
 800938c:	d002      	beq.n	8009394 <_scanf_float+0x1d0>
 800938e:	2d04      	cmp	r5, #4
 8009390:	f47f af48 	bne.w	8009224 <_scanf_float+0x60>
 8009394:	3501      	adds	r5, #1
 8009396:	b2ed      	uxtb	r5, r5
 8009398:	e7d8      	b.n	800934c <_scanf_float+0x188>
 800939a:	f1ba 0f01 	cmp.w	sl, #1
 800939e:	f47f af41 	bne.w	8009224 <_scanf_float+0x60>
 80093a2:	f04f 0a02 	mov.w	sl, #2
 80093a6:	e7d1      	b.n	800934c <_scanf_float+0x188>
 80093a8:	b97d      	cbnz	r5, 80093ca <_scanf_float+0x206>
 80093aa:	f1b9 0f00 	cmp.w	r9, #0
 80093ae:	f47f af3c 	bne.w	800922a <_scanf_float+0x66>
 80093b2:	6822      	ldr	r2, [r4, #0]
 80093b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80093b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80093bc:	f47f af39 	bne.w	8009232 <_scanf_float+0x6e>
 80093c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093c4:	6022      	str	r2, [r4, #0]
 80093c6:	2501      	movs	r5, #1
 80093c8:	e7c0      	b.n	800934c <_scanf_float+0x188>
 80093ca:	2d03      	cmp	r5, #3
 80093cc:	d0e2      	beq.n	8009394 <_scanf_float+0x1d0>
 80093ce:	2d05      	cmp	r5, #5
 80093d0:	e7de      	b.n	8009390 <_scanf_float+0x1cc>
 80093d2:	2d02      	cmp	r5, #2
 80093d4:	f47f af26 	bne.w	8009224 <_scanf_float+0x60>
 80093d8:	2503      	movs	r5, #3
 80093da:	e7b7      	b.n	800934c <_scanf_float+0x188>
 80093dc:	2d06      	cmp	r5, #6
 80093de:	f47f af21 	bne.w	8009224 <_scanf_float+0x60>
 80093e2:	2507      	movs	r5, #7
 80093e4:	e7b2      	b.n	800934c <_scanf_float+0x188>
 80093e6:	6822      	ldr	r2, [r4, #0]
 80093e8:	0591      	lsls	r1, r2, #22
 80093ea:	f57f af1b 	bpl.w	8009224 <_scanf_float+0x60>
 80093ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80093f2:	6022      	str	r2, [r4, #0]
 80093f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80093f8:	e7a8      	b.n	800934c <_scanf_float+0x188>
 80093fa:	6822      	ldr	r2, [r4, #0]
 80093fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009400:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009404:	d006      	beq.n	8009414 <_scanf_float+0x250>
 8009406:	0550      	lsls	r0, r2, #21
 8009408:	f57f af0c 	bpl.w	8009224 <_scanf_float+0x60>
 800940c:	f1b9 0f00 	cmp.w	r9, #0
 8009410:	f43f af0f 	beq.w	8009232 <_scanf_float+0x6e>
 8009414:	0591      	lsls	r1, r2, #22
 8009416:	bf58      	it	pl
 8009418:	9901      	ldrpl	r1, [sp, #4]
 800941a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800941e:	bf58      	it	pl
 8009420:	eba9 0101 	subpl.w	r1, r9, r1
 8009424:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009428:	bf58      	it	pl
 800942a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800942e:	6022      	str	r2, [r4, #0]
 8009430:	f04f 0900 	mov.w	r9, #0
 8009434:	e78a      	b.n	800934c <_scanf_float+0x188>
 8009436:	f04f 0a03 	mov.w	sl, #3
 800943a:	e787      	b.n	800934c <_scanf_float+0x188>
 800943c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009440:	4639      	mov	r1, r7
 8009442:	4640      	mov	r0, r8
 8009444:	4798      	blx	r3
 8009446:	2800      	cmp	r0, #0
 8009448:	f43f aedf 	beq.w	800920a <_scanf_float+0x46>
 800944c:	e6ea      	b.n	8009224 <_scanf_float+0x60>
 800944e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009452:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009456:	463a      	mov	r2, r7
 8009458:	4640      	mov	r0, r8
 800945a:	4798      	blx	r3
 800945c:	6923      	ldr	r3, [r4, #16]
 800945e:	3b01      	subs	r3, #1
 8009460:	6123      	str	r3, [r4, #16]
 8009462:	e6ec      	b.n	800923e <_scanf_float+0x7a>
 8009464:	1e6b      	subs	r3, r5, #1
 8009466:	2b06      	cmp	r3, #6
 8009468:	d825      	bhi.n	80094b6 <_scanf_float+0x2f2>
 800946a:	2d02      	cmp	r5, #2
 800946c:	d836      	bhi.n	80094dc <_scanf_float+0x318>
 800946e:	455e      	cmp	r6, fp
 8009470:	f67f aee8 	bls.w	8009244 <_scanf_float+0x80>
 8009474:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009478:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800947c:	463a      	mov	r2, r7
 800947e:	4640      	mov	r0, r8
 8009480:	4798      	blx	r3
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	3b01      	subs	r3, #1
 8009486:	6123      	str	r3, [r4, #16]
 8009488:	e7f1      	b.n	800946e <_scanf_float+0x2aa>
 800948a:	9802      	ldr	r0, [sp, #8]
 800948c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009490:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009494:	9002      	str	r0, [sp, #8]
 8009496:	463a      	mov	r2, r7
 8009498:	4640      	mov	r0, r8
 800949a:	4798      	blx	r3
 800949c:	6923      	ldr	r3, [r4, #16]
 800949e:	3b01      	subs	r3, #1
 80094a0:	6123      	str	r3, [r4, #16]
 80094a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094a6:	fa5f fa8a 	uxtb.w	sl, sl
 80094aa:	f1ba 0f02 	cmp.w	sl, #2
 80094ae:	d1ec      	bne.n	800948a <_scanf_float+0x2c6>
 80094b0:	3d03      	subs	r5, #3
 80094b2:	b2ed      	uxtb	r5, r5
 80094b4:	1b76      	subs	r6, r6, r5
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	05da      	lsls	r2, r3, #23
 80094ba:	d52f      	bpl.n	800951c <_scanf_float+0x358>
 80094bc:	055b      	lsls	r3, r3, #21
 80094be:	d510      	bpl.n	80094e2 <_scanf_float+0x31e>
 80094c0:	455e      	cmp	r6, fp
 80094c2:	f67f aebf 	bls.w	8009244 <_scanf_float+0x80>
 80094c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094ce:	463a      	mov	r2, r7
 80094d0:	4640      	mov	r0, r8
 80094d2:	4798      	blx	r3
 80094d4:	6923      	ldr	r3, [r4, #16]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	6123      	str	r3, [r4, #16]
 80094da:	e7f1      	b.n	80094c0 <_scanf_float+0x2fc>
 80094dc:	46aa      	mov	sl, r5
 80094de:	9602      	str	r6, [sp, #8]
 80094e0:	e7df      	b.n	80094a2 <_scanf_float+0x2de>
 80094e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	2965      	cmp	r1, #101	; 0x65
 80094ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80094ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80094f2:	6123      	str	r3, [r4, #16]
 80094f4:	d00c      	beq.n	8009510 <_scanf_float+0x34c>
 80094f6:	2945      	cmp	r1, #69	; 0x45
 80094f8:	d00a      	beq.n	8009510 <_scanf_float+0x34c>
 80094fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094fe:	463a      	mov	r2, r7
 8009500:	4640      	mov	r0, r8
 8009502:	4798      	blx	r3
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800950a:	3b01      	subs	r3, #1
 800950c:	1eb5      	subs	r5, r6, #2
 800950e:	6123      	str	r3, [r4, #16]
 8009510:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009514:	463a      	mov	r2, r7
 8009516:	4640      	mov	r0, r8
 8009518:	4798      	blx	r3
 800951a:	462e      	mov	r6, r5
 800951c:	6825      	ldr	r5, [r4, #0]
 800951e:	f015 0510 	ands.w	r5, r5, #16
 8009522:	d158      	bne.n	80095d6 <_scanf_float+0x412>
 8009524:	7035      	strb	r5, [r6, #0]
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800952c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009530:	d11c      	bne.n	800956c <_scanf_float+0x3a8>
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	454b      	cmp	r3, r9
 8009536:	eba3 0209 	sub.w	r2, r3, r9
 800953a:	d124      	bne.n	8009586 <_scanf_float+0x3c2>
 800953c:	2200      	movs	r2, #0
 800953e:	4659      	mov	r1, fp
 8009540:	4640      	mov	r0, r8
 8009542:	f000 ff2b 	bl	800a39c <_strtod_r>
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	6821      	ldr	r1, [r4, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f011 0f02 	tst.w	r1, #2
 8009550:	ec57 6b10 	vmov	r6, r7, d0
 8009554:	f103 0204 	add.w	r2, r3, #4
 8009558:	d020      	beq.n	800959c <_scanf_float+0x3d8>
 800955a:	9903      	ldr	r1, [sp, #12]
 800955c:	600a      	str	r2, [r1, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	e9c3 6700 	strd	r6, r7, [r3]
 8009564:	68e3      	ldr	r3, [r4, #12]
 8009566:	3301      	adds	r3, #1
 8009568:	60e3      	str	r3, [r4, #12]
 800956a:	e66c      	b.n	8009246 <_scanf_float+0x82>
 800956c:	9b04      	ldr	r3, [sp, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0e4      	beq.n	800953c <_scanf_float+0x378>
 8009572:	9905      	ldr	r1, [sp, #20]
 8009574:	230a      	movs	r3, #10
 8009576:	462a      	mov	r2, r5
 8009578:	3101      	adds	r1, #1
 800957a:	4640      	mov	r0, r8
 800957c:	f000 ff98 	bl	800a4b0 <_strtol_r>
 8009580:	9b04      	ldr	r3, [sp, #16]
 8009582:	9e05      	ldr	r6, [sp, #20]
 8009584:	1ac2      	subs	r2, r0, r3
 8009586:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800958a:	429e      	cmp	r6, r3
 800958c:	bf28      	it	cs
 800958e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009592:	4912      	ldr	r1, [pc, #72]	; (80095dc <_scanf_float+0x418>)
 8009594:	4630      	mov	r0, r6
 8009596:	f000 f8b9 	bl	800970c <siprintf>
 800959a:	e7cf      	b.n	800953c <_scanf_float+0x378>
 800959c:	f011 0f04 	tst.w	r1, #4
 80095a0:	9903      	ldr	r1, [sp, #12]
 80095a2:	600a      	str	r2, [r1, #0]
 80095a4:	d1db      	bne.n	800955e <_scanf_float+0x39a>
 80095a6:	f8d3 8000 	ldr.w	r8, [r3]
 80095aa:	ee10 2a10 	vmov	r2, s0
 80095ae:	ee10 0a10 	vmov	r0, s0
 80095b2:	463b      	mov	r3, r7
 80095b4:	4639      	mov	r1, r7
 80095b6:	f7f7 fab9 	bl	8000b2c <__aeabi_dcmpun>
 80095ba:	b128      	cbz	r0, 80095c8 <_scanf_float+0x404>
 80095bc:	4808      	ldr	r0, [pc, #32]	; (80095e0 <_scanf_float+0x41c>)
 80095be:	f000 f89f 	bl	8009700 <nanf>
 80095c2:	ed88 0a00 	vstr	s0, [r8]
 80095c6:	e7cd      	b.n	8009564 <_scanf_float+0x3a0>
 80095c8:	4630      	mov	r0, r6
 80095ca:	4639      	mov	r1, r7
 80095cc:	f7f7 fb0c 	bl	8000be8 <__aeabi_d2f>
 80095d0:	f8c8 0000 	str.w	r0, [r8]
 80095d4:	e7c6      	b.n	8009564 <_scanf_float+0x3a0>
 80095d6:	2500      	movs	r5, #0
 80095d8:	e635      	b.n	8009246 <_scanf_float+0x82>
 80095da:	bf00      	nop
 80095dc:	0800d53c 	.word	0x0800d53c
 80095e0:	0800d9b8 	.word	0x0800d9b8

080095e4 <iprintf>:
 80095e4:	b40f      	push	{r0, r1, r2, r3}
 80095e6:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <iprintf+0x2c>)
 80095e8:	b513      	push	{r0, r1, r4, lr}
 80095ea:	681c      	ldr	r4, [r3, #0]
 80095ec:	b124      	cbz	r4, 80095f8 <iprintf+0x14>
 80095ee:	69a3      	ldr	r3, [r4, #24]
 80095f0:	b913      	cbnz	r3, 80095f8 <iprintf+0x14>
 80095f2:	4620      	mov	r0, r4
 80095f4:	f001 ffb2 	bl	800b55c <__sinit>
 80095f8:	ab05      	add	r3, sp, #20
 80095fa:	9a04      	ldr	r2, [sp, #16]
 80095fc:	68a1      	ldr	r1, [r4, #8]
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	4620      	mov	r0, r4
 8009602:	f003 fb37 	bl	800cc74 <_vfiprintf_r>
 8009606:	b002      	add	sp, #8
 8009608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800960c:	b004      	add	sp, #16
 800960e:	4770      	bx	lr
 8009610:	2000000c 	.word	0x2000000c

08009614 <_puts_r>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	460e      	mov	r6, r1
 8009618:	4605      	mov	r5, r0
 800961a:	b118      	cbz	r0, 8009624 <_puts_r+0x10>
 800961c:	6983      	ldr	r3, [r0, #24]
 800961e:	b90b      	cbnz	r3, 8009624 <_puts_r+0x10>
 8009620:	f001 ff9c 	bl	800b55c <__sinit>
 8009624:	69ab      	ldr	r3, [r5, #24]
 8009626:	68ac      	ldr	r4, [r5, #8]
 8009628:	b913      	cbnz	r3, 8009630 <_puts_r+0x1c>
 800962a:	4628      	mov	r0, r5
 800962c:	f001 ff96 	bl	800b55c <__sinit>
 8009630:	4b2c      	ldr	r3, [pc, #176]	; (80096e4 <_puts_r+0xd0>)
 8009632:	429c      	cmp	r4, r3
 8009634:	d120      	bne.n	8009678 <_puts_r+0x64>
 8009636:	686c      	ldr	r4, [r5, #4]
 8009638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800963a:	07db      	lsls	r3, r3, #31
 800963c:	d405      	bmi.n	800964a <_puts_r+0x36>
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	0598      	lsls	r0, r3, #22
 8009642:	d402      	bmi.n	800964a <_puts_r+0x36>
 8009644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009646:	f002 fb9a 	bl	800bd7e <__retarget_lock_acquire_recursive>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	0719      	lsls	r1, r3, #28
 800964e:	d51d      	bpl.n	800968c <_puts_r+0x78>
 8009650:	6923      	ldr	r3, [r4, #16]
 8009652:	b1db      	cbz	r3, 800968c <_puts_r+0x78>
 8009654:	3e01      	subs	r6, #1
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800965c:	3b01      	subs	r3, #1
 800965e:	60a3      	str	r3, [r4, #8]
 8009660:	bb39      	cbnz	r1, 80096b2 <_puts_r+0x9e>
 8009662:	2b00      	cmp	r3, #0
 8009664:	da38      	bge.n	80096d8 <_puts_r+0xc4>
 8009666:	4622      	mov	r2, r4
 8009668:	210a      	movs	r1, #10
 800966a:	4628      	mov	r0, r5
 800966c:	f000 ff22 	bl	800a4b4 <__swbuf_r>
 8009670:	3001      	adds	r0, #1
 8009672:	d011      	beq.n	8009698 <_puts_r+0x84>
 8009674:	250a      	movs	r5, #10
 8009676:	e011      	b.n	800969c <_puts_r+0x88>
 8009678:	4b1b      	ldr	r3, [pc, #108]	; (80096e8 <_puts_r+0xd4>)
 800967a:	429c      	cmp	r4, r3
 800967c:	d101      	bne.n	8009682 <_puts_r+0x6e>
 800967e:	68ac      	ldr	r4, [r5, #8]
 8009680:	e7da      	b.n	8009638 <_puts_r+0x24>
 8009682:	4b1a      	ldr	r3, [pc, #104]	; (80096ec <_puts_r+0xd8>)
 8009684:	429c      	cmp	r4, r3
 8009686:	bf08      	it	eq
 8009688:	68ec      	ldreq	r4, [r5, #12]
 800968a:	e7d5      	b.n	8009638 <_puts_r+0x24>
 800968c:	4621      	mov	r1, r4
 800968e:	4628      	mov	r0, r5
 8009690:	f000 ff62 	bl	800a558 <__swsetup_r>
 8009694:	2800      	cmp	r0, #0
 8009696:	d0dd      	beq.n	8009654 <_puts_r+0x40>
 8009698:	f04f 35ff 	mov.w	r5, #4294967295
 800969c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800969e:	07da      	lsls	r2, r3, #31
 80096a0:	d405      	bmi.n	80096ae <_puts_r+0x9a>
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	059b      	lsls	r3, r3, #22
 80096a6:	d402      	bmi.n	80096ae <_puts_r+0x9a>
 80096a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096aa:	f002 fb69 	bl	800bd80 <__retarget_lock_release_recursive>
 80096ae:	4628      	mov	r0, r5
 80096b0:	bd70      	pop	{r4, r5, r6, pc}
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	da04      	bge.n	80096c0 <_puts_r+0xac>
 80096b6:	69a2      	ldr	r2, [r4, #24]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	dc06      	bgt.n	80096ca <_puts_r+0xb6>
 80096bc:	290a      	cmp	r1, #10
 80096be:	d004      	beq.n	80096ca <_puts_r+0xb6>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	6022      	str	r2, [r4, #0]
 80096c6:	7019      	strb	r1, [r3, #0]
 80096c8:	e7c5      	b.n	8009656 <_puts_r+0x42>
 80096ca:	4622      	mov	r2, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 fef1 	bl	800a4b4 <__swbuf_r>
 80096d2:	3001      	adds	r0, #1
 80096d4:	d1bf      	bne.n	8009656 <_puts_r+0x42>
 80096d6:	e7df      	b.n	8009698 <_puts_r+0x84>
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	250a      	movs	r5, #10
 80096dc:	1c5a      	adds	r2, r3, #1
 80096de:	6022      	str	r2, [r4, #0]
 80096e0:	701d      	strb	r5, [r3, #0]
 80096e2:	e7db      	b.n	800969c <_puts_r+0x88>
 80096e4:	0800d750 	.word	0x0800d750
 80096e8:	0800d770 	.word	0x0800d770
 80096ec:	0800d730 	.word	0x0800d730

080096f0 <puts>:
 80096f0:	4b02      	ldr	r3, [pc, #8]	; (80096fc <puts+0xc>)
 80096f2:	4601      	mov	r1, r0
 80096f4:	6818      	ldr	r0, [r3, #0]
 80096f6:	f7ff bf8d 	b.w	8009614 <_puts_r>
 80096fa:	bf00      	nop
 80096fc:	2000000c 	.word	0x2000000c

08009700 <nanf>:
 8009700:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009708 <nanf+0x8>
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	7fc00000 	.word	0x7fc00000

0800970c <siprintf>:
 800970c:	b40e      	push	{r1, r2, r3}
 800970e:	b500      	push	{lr}
 8009710:	b09c      	sub	sp, #112	; 0x70
 8009712:	ab1d      	add	r3, sp, #116	; 0x74
 8009714:	9002      	str	r0, [sp, #8]
 8009716:	9006      	str	r0, [sp, #24]
 8009718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800971c:	4809      	ldr	r0, [pc, #36]	; (8009744 <siprintf+0x38>)
 800971e:	9107      	str	r1, [sp, #28]
 8009720:	9104      	str	r1, [sp, #16]
 8009722:	4909      	ldr	r1, [pc, #36]	; (8009748 <siprintf+0x3c>)
 8009724:	f853 2b04 	ldr.w	r2, [r3], #4
 8009728:	9105      	str	r1, [sp, #20]
 800972a:	6800      	ldr	r0, [r0, #0]
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	a902      	add	r1, sp, #8
 8009730:	f003 f976 	bl	800ca20 <_svfiprintf_r>
 8009734:	9b02      	ldr	r3, [sp, #8]
 8009736:	2200      	movs	r2, #0
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	b01c      	add	sp, #112	; 0x70
 800973c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009740:	b003      	add	sp, #12
 8009742:	4770      	bx	lr
 8009744:	2000000c 	.word	0x2000000c
 8009748:	ffff0208 	.word	0xffff0208

0800974c <sulp>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	4604      	mov	r4, r0
 8009750:	460d      	mov	r5, r1
 8009752:	ec45 4b10 	vmov	d0, r4, r5
 8009756:	4616      	mov	r6, r2
 8009758:	f002 fefe 	bl	800c558 <__ulp>
 800975c:	ec51 0b10 	vmov	r0, r1, d0
 8009760:	b17e      	cbz	r6, 8009782 <sulp+0x36>
 8009762:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009766:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800976a:	2b00      	cmp	r3, #0
 800976c:	dd09      	ble.n	8009782 <sulp+0x36>
 800976e:	051b      	lsls	r3, r3, #20
 8009770:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009774:	2400      	movs	r4, #0
 8009776:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800977a:	4622      	mov	r2, r4
 800977c:	462b      	mov	r3, r5
 800977e:	f7f6 ff3b 	bl	80005f8 <__aeabi_dmul>
 8009782:	bd70      	pop	{r4, r5, r6, pc}
 8009784:	0000      	movs	r0, r0
	...

08009788 <_strtod_l>:
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	b0a3      	sub	sp, #140	; 0x8c
 800978e:	461f      	mov	r7, r3
 8009790:	2300      	movs	r3, #0
 8009792:	931e      	str	r3, [sp, #120]	; 0x78
 8009794:	4ba4      	ldr	r3, [pc, #656]	; (8009a28 <_strtod_l+0x2a0>)
 8009796:	9219      	str	r2, [sp, #100]	; 0x64
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	9307      	str	r3, [sp, #28]
 800979c:	4604      	mov	r4, r0
 800979e:	4618      	mov	r0, r3
 80097a0:	4688      	mov	r8, r1
 80097a2:	f7f6 fd15 	bl	80001d0 <strlen>
 80097a6:	f04f 0a00 	mov.w	sl, #0
 80097aa:	4605      	mov	r5, r0
 80097ac:	f04f 0b00 	mov.w	fp, #0
 80097b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80097b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	2a2b      	cmp	r2, #43	; 0x2b
 80097ba:	d04c      	beq.n	8009856 <_strtod_l+0xce>
 80097bc:	d839      	bhi.n	8009832 <_strtod_l+0xaa>
 80097be:	2a0d      	cmp	r2, #13
 80097c0:	d832      	bhi.n	8009828 <_strtod_l+0xa0>
 80097c2:	2a08      	cmp	r2, #8
 80097c4:	d832      	bhi.n	800982c <_strtod_l+0xa4>
 80097c6:	2a00      	cmp	r2, #0
 80097c8:	d03c      	beq.n	8009844 <_strtod_l+0xbc>
 80097ca:	2300      	movs	r3, #0
 80097cc:	930e      	str	r3, [sp, #56]	; 0x38
 80097ce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80097d0:	7833      	ldrb	r3, [r6, #0]
 80097d2:	2b30      	cmp	r3, #48	; 0x30
 80097d4:	f040 80b4 	bne.w	8009940 <_strtod_l+0x1b8>
 80097d8:	7873      	ldrb	r3, [r6, #1]
 80097da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097de:	2b58      	cmp	r3, #88	; 0x58
 80097e0:	d16c      	bne.n	80098bc <_strtod_l+0x134>
 80097e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097e4:	9301      	str	r3, [sp, #4]
 80097e6:	ab1e      	add	r3, sp, #120	; 0x78
 80097e8:	9702      	str	r7, [sp, #8]
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	4a8f      	ldr	r2, [pc, #572]	; (8009a2c <_strtod_l+0x2a4>)
 80097ee:	ab1f      	add	r3, sp, #124	; 0x7c
 80097f0:	a91d      	add	r1, sp, #116	; 0x74
 80097f2:	4620      	mov	r0, r4
 80097f4:	f001 ffb6 	bl	800b764 <__gethex>
 80097f8:	f010 0707 	ands.w	r7, r0, #7
 80097fc:	4605      	mov	r5, r0
 80097fe:	d005      	beq.n	800980c <_strtod_l+0x84>
 8009800:	2f06      	cmp	r7, #6
 8009802:	d12a      	bne.n	800985a <_strtod_l+0xd2>
 8009804:	3601      	adds	r6, #1
 8009806:	2300      	movs	r3, #0
 8009808:	961d      	str	r6, [sp, #116]	; 0x74
 800980a:	930e      	str	r3, [sp, #56]	; 0x38
 800980c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800980e:	2b00      	cmp	r3, #0
 8009810:	f040 8596 	bne.w	800a340 <_strtod_l+0xbb8>
 8009814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009816:	b1db      	cbz	r3, 8009850 <_strtod_l+0xc8>
 8009818:	4652      	mov	r2, sl
 800981a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800981e:	ec43 2b10 	vmov	d0, r2, r3
 8009822:	b023      	add	sp, #140	; 0x8c
 8009824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009828:	2a20      	cmp	r2, #32
 800982a:	d1ce      	bne.n	80097ca <_strtod_l+0x42>
 800982c:	3301      	adds	r3, #1
 800982e:	931d      	str	r3, [sp, #116]	; 0x74
 8009830:	e7c0      	b.n	80097b4 <_strtod_l+0x2c>
 8009832:	2a2d      	cmp	r2, #45	; 0x2d
 8009834:	d1c9      	bne.n	80097ca <_strtod_l+0x42>
 8009836:	2201      	movs	r2, #1
 8009838:	920e      	str	r2, [sp, #56]	; 0x38
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	921d      	str	r2, [sp, #116]	; 0x74
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1c4      	bne.n	80097ce <_strtod_l+0x46>
 8009844:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009846:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800984a:	2b00      	cmp	r3, #0
 800984c:	f040 8576 	bne.w	800a33c <_strtod_l+0xbb4>
 8009850:	4652      	mov	r2, sl
 8009852:	465b      	mov	r3, fp
 8009854:	e7e3      	b.n	800981e <_strtod_l+0x96>
 8009856:	2200      	movs	r2, #0
 8009858:	e7ee      	b.n	8009838 <_strtod_l+0xb0>
 800985a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800985c:	b13a      	cbz	r2, 800986e <_strtod_l+0xe6>
 800985e:	2135      	movs	r1, #53	; 0x35
 8009860:	a820      	add	r0, sp, #128	; 0x80
 8009862:	f002 ff84 	bl	800c76e <__copybits>
 8009866:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009868:	4620      	mov	r0, r4
 800986a:	f002 fb49 	bl	800bf00 <_Bfree>
 800986e:	3f01      	subs	r7, #1
 8009870:	2f05      	cmp	r7, #5
 8009872:	d807      	bhi.n	8009884 <_strtod_l+0xfc>
 8009874:	e8df f007 	tbb	[pc, r7]
 8009878:	1d180b0e 	.word	0x1d180b0e
 800987c:	030e      	.short	0x030e
 800987e:	f04f 0b00 	mov.w	fp, #0
 8009882:	46da      	mov	sl, fp
 8009884:	0728      	lsls	r0, r5, #28
 8009886:	d5c1      	bpl.n	800980c <_strtod_l+0x84>
 8009888:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800988c:	e7be      	b.n	800980c <_strtod_l+0x84>
 800988e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009892:	e7f7      	b.n	8009884 <_strtod_l+0xfc>
 8009894:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009898:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800989a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800989e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80098a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80098a6:	e7ed      	b.n	8009884 <_strtod_l+0xfc>
 80098a8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009a30 <_strtod_l+0x2a8>
 80098ac:	f04f 0a00 	mov.w	sl, #0
 80098b0:	e7e8      	b.n	8009884 <_strtod_l+0xfc>
 80098b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80098b6:	f04f 3aff 	mov.w	sl, #4294967295
 80098ba:	e7e3      	b.n	8009884 <_strtod_l+0xfc>
 80098bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	921d      	str	r2, [sp, #116]	; 0x74
 80098c2:	785b      	ldrb	r3, [r3, #1]
 80098c4:	2b30      	cmp	r3, #48	; 0x30
 80098c6:	d0f9      	beq.n	80098bc <_strtod_l+0x134>
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d09f      	beq.n	800980c <_strtod_l+0x84>
 80098cc:	2301      	movs	r3, #1
 80098ce:	f04f 0900 	mov.w	r9, #0
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098d6:	930a      	str	r3, [sp, #40]	; 0x28
 80098d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80098dc:	464f      	mov	r7, r9
 80098de:	220a      	movs	r2, #10
 80098e0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80098e2:	7806      	ldrb	r6, [r0, #0]
 80098e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80098e8:	b2d9      	uxtb	r1, r3
 80098ea:	2909      	cmp	r1, #9
 80098ec:	d92a      	bls.n	8009944 <_strtod_l+0x1bc>
 80098ee:	9907      	ldr	r1, [sp, #28]
 80098f0:	462a      	mov	r2, r5
 80098f2:	f003 fb4c 	bl	800cf8e <strncmp>
 80098f6:	b398      	cbz	r0, 8009960 <_strtod_l+0x1d8>
 80098f8:	2000      	movs	r0, #0
 80098fa:	4633      	mov	r3, r6
 80098fc:	463d      	mov	r5, r7
 80098fe:	9007      	str	r0, [sp, #28]
 8009900:	4602      	mov	r2, r0
 8009902:	2b65      	cmp	r3, #101	; 0x65
 8009904:	d001      	beq.n	800990a <_strtod_l+0x182>
 8009906:	2b45      	cmp	r3, #69	; 0x45
 8009908:	d118      	bne.n	800993c <_strtod_l+0x1b4>
 800990a:	b91d      	cbnz	r5, 8009914 <_strtod_l+0x18c>
 800990c:	9b04      	ldr	r3, [sp, #16]
 800990e:	4303      	orrs	r3, r0
 8009910:	d098      	beq.n	8009844 <_strtod_l+0xbc>
 8009912:	2500      	movs	r5, #0
 8009914:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009918:	f108 0301 	add.w	r3, r8, #1
 800991c:	931d      	str	r3, [sp, #116]	; 0x74
 800991e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009922:	2b2b      	cmp	r3, #43	; 0x2b
 8009924:	d075      	beq.n	8009a12 <_strtod_l+0x28a>
 8009926:	2b2d      	cmp	r3, #45	; 0x2d
 8009928:	d07b      	beq.n	8009a22 <_strtod_l+0x29a>
 800992a:	f04f 0c00 	mov.w	ip, #0
 800992e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009932:	2909      	cmp	r1, #9
 8009934:	f240 8082 	bls.w	8009a3c <_strtod_l+0x2b4>
 8009938:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800993c:	2600      	movs	r6, #0
 800993e:	e09d      	b.n	8009a7c <_strtod_l+0x2f4>
 8009940:	2300      	movs	r3, #0
 8009942:	e7c4      	b.n	80098ce <_strtod_l+0x146>
 8009944:	2f08      	cmp	r7, #8
 8009946:	bfd8      	it	le
 8009948:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800994a:	f100 0001 	add.w	r0, r0, #1
 800994e:	bfda      	itte	le
 8009950:	fb02 3301 	mlale	r3, r2, r1, r3
 8009954:	9309      	strle	r3, [sp, #36]	; 0x24
 8009956:	fb02 3909 	mlagt	r9, r2, r9, r3
 800995a:	3701      	adds	r7, #1
 800995c:	901d      	str	r0, [sp, #116]	; 0x74
 800995e:	e7bf      	b.n	80098e0 <_strtod_l+0x158>
 8009960:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009962:	195a      	adds	r2, r3, r5
 8009964:	921d      	str	r2, [sp, #116]	; 0x74
 8009966:	5d5b      	ldrb	r3, [r3, r5]
 8009968:	2f00      	cmp	r7, #0
 800996a:	d037      	beq.n	80099dc <_strtod_l+0x254>
 800996c:	9007      	str	r0, [sp, #28]
 800996e:	463d      	mov	r5, r7
 8009970:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009974:	2a09      	cmp	r2, #9
 8009976:	d912      	bls.n	800999e <_strtod_l+0x216>
 8009978:	2201      	movs	r2, #1
 800997a:	e7c2      	b.n	8009902 <_strtod_l+0x17a>
 800997c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800997e:	1c5a      	adds	r2, r3, #1
 8009980:	921d      	str	r2, [sp, #116]	; 0x74
 8009982:	785b      	ldrb	r3, [r3, #1]
 8009984:	3001      	adds	r0, #1
 8009986:	2b30      	cmp	r3, #48	; 0x30
 8009988:	d0f8      	beq.n	800997c <_strtod_l+0x1f4>
 800998a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800998e:	2a08      	cmp	r2, #8
 8009990:	f200 84db 	bhi.w	800a34a <_strtod_l+0xbc2>
 8009994:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009996:	9007      	str	r0, [sp, #28]
 8009998:	2000      	movs	r0, #0
 800999a:	920a      	str	r2, [sp, #40]	; 0x28
 800999c:	4605      	mov	r5, r0
 800999e:	3b30      	subs	r3, #48	; 0x30
 80099a0:	f100 0201 	add.w	r2, r0, #1
 80099a4:	d014      	beq.n	80099d0 <_strtod_l+0x248>
 80099a6:	9907      	ldr	r1, [sp, #28]
 80099a8:	4411      	add	r1, r2
 80099aa:	9107      	str	r1, [sp, #28]
 80099ac:	462a      	mov	r2, r5
 80099ae:	eb00 0e05 	add.w	lr, r0, r5
 80099b2:	210a      	movs	r1, #10
 80099b4:	4572      	cmp	r2, lr
 80099b6:	d113      	bne.n	80099e0 <_strtod_l+0x258>
 80099b8:	182a      	adds	r2, r5, r0
 80099ba:	2a08      	cmp	r2, #8
 80099bc:	f105 0501 	add.w	r5, r5, #1
 80099c0:	4405      	add	r5, r0
 80099c2:	dc1c      	bgt.n	80099fe <_strtod_l+0x276>
 80099c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099c6:	220a      	movs	r2, #10
 80099c8:	fb02 3301 	mla	r3, r2, r1, r3
 80099cc:	9309      	str	r3, [sp, #36]	; 0x24
 80099ce:	2200      	movs	r2, #0
 80099d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099d2:	1c59      	adds	r1, r3, #1
 80099d4:	911d      	str	r1, [sp, #116]	; 0x74
 80099d6:	785b      	ldrb	r3, [r3, #1]
 80099d8:	4610      	mov	r0, r2
 80099da:	e7c9      	b.n	8009970 <_strtod_l+0x1e8>
 80099dc:	4638      	mov	r0, r7
 80099de:	e7d2      	b.n	8009986 <_strtod_l+0x1fe>
 80099e0:	2a08      	cmp	r2, #8
 80099e2:	dc04      	bgt.n	80099ee <_strtod_l+0x266>
 80099e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80099e6:	434e      	muls	r6, r1
 80099e8:	9609      	str	r6, [sp, #36]	; 0x24
 80099ea:	3201      	adds	r2, #1
 80099ec:	e7e2      	b.n	80099b4 <_strtod_l+0x22c>
 80099ee:	f102 0c01 	add.w	ip, r2, #1
 80099f2:	f1bc 0f10 	cmp.w	ip, #16
 80099f6:	bfd8      	it	le
 80099f8:	fb01 f909 	mulle.w	r9, r1, r9
 80099fc:	e7f5      	b.n	80099ea <_strtod_l+0x262>
 80099fe:	2d10      	cmp	r5, #16
 8009a00:	bfdc      	itt	le
 8009a02:	220a      	movle	r2, #10
 8009a04:	fb02 3909 	mlale	r9, r2, r9, r3
 8009a08:	e7e1      	b.n	80099ce <_strtod_l+0x246>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	9307      	str	r3, [sp, #28]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	e77c      	b.n	800990c <_strtod_l+0x184>
 8009a12:	f04f 0c00 	mov.w	ip, #0
 8009a16:	f108 0302 	add.w	r3, r8, #2
 8009a1a:	931d      	str	r3, [sp, #116]	; 0x74
 8009a1c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009a20:	e785      	b.n	800992e <_strtod_l+0x1a6>
 8009a22:	f04f 0c01 	mov.w	ip, #1
 8009a26:	e7f6      	b.n	8009a16 <_strtod_l+0x28e>
 8009a28:	0800d7fc 	.word	0x0800d7fc
 8009a2c:	0800d544 	.word	0x0800d544
 8009a30:	7ff00000 	.word	0x7ff00000
 8009a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a36:	1c59      	adds	r1, r3, #1
 8009a38:	911d      	str	r1, [sp, #116]	; 0x74
 8009a3a:	785b      	ldrb	r3, [r3, #1]
 8009a3c:	2b30      	cmp	r3, #48	; 0x30
 8009a3e:	d0f9      	beq.n	8009a34 <_strtod_l+0x2ac>
 8009a40:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009a44:	2908      	cmp	r1, #8
 8009a46:	f63f af79 	bhi.w	800993c <_strtod_l+0x1b4>
 8009a4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009a4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a50:	9308      	str	r3, [sp, #32]
 8009a52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a54:	1c59      	adds	r1, r3, #1
 8009a56:	911d      	str	r1, [sp, #116]	; 0x74
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009a5e:	2e09      	cmp	r6, #9
 8009a60:	d937      	bls.n	8009ad2 <_strtod_l+0x34a>
 8009a62:	9e08      	ldr	r6, [sp, #32]
 8009a64:	1b89      	subs	r1, r1, r6
 8009a66:	2908      	cmp	r1, #8
 8009a68:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009a6c:	dc02      	bgt.n	8009a74 <_strtod_l+0x2ec>
 8009a6e:	4576      	cmp	r6, lr
 8009a70:	bfa8      	it	ge
 8009a72:	4676      	movge	r6, lr
 8009a74:	f1bc 0f00 	cmp.w	ip, #0
 8009a78:	d000      	beq.n	8009a7c <_strtod_l+0x2f4>
 8009a7a:	4276      	negs	r6, r6
 8009a7c:	2d00      	cmp	r5, #0
 8009a7e:	d14f      	bne.n	8009b20 <_strtod_l+0x398>
 8009a80:	9904      	ldr	r1, [sp, #16]
 8009a82:	4301      	orrs	r1, r0
 8009a84:	f47f aec2 	bne.w	800980c <_strtod_l+0x84>
 8009a88:	2a00      	cmp	r2, #0
 8009a8a:	f47f aedb 	bne.w	8009844 <_strtod_l+0xbc>
 8009a8e:	2b69      	cmp	r3, #105	; 0x69
 8009a90:	d027      	beq.n	8009ae2 <_strtod_l+0x35a>
 8009a92:	dc24      	bgt.n	8009ade <_strtod_l+0x356>
 8009a94:	2b49      	cmp	r3, #73	; 0x49
 8009a96:	d024      	beq.n	8009ae2 <_strtod_l+0x35a>
 8009a98:	2b4e      	cmp	r3, #78	; 0x4e
 8009a9a:	f47f aed3 	bne.w	8009844 <_strtod_l+0xbc>
 8009a9e:	499e      	ldr	r1, [pc, #632]	; (8009d18 <_strtod_l+0x590>)
 8009aa0:	a81d      	add	r0, sp, #116	; 0x74
 8009aa2:	f002 f8b7 	bl	800bc14 <__match>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	f43f aecc 	beq.w	8009844 <_strtod_l+0xbc>
 8009aac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b28      	cmp	r3, #40	; 0x28
 8009ab2:	d12d      	bne.n	8009b10 <_strtod_l+0x388>
 8009ab4:	4999      	ldr	r1, [pc, #612]	; (8009d1c <_strtod_l+0x594>)
 8009ab6:	aa20      	add	r2, sp, #128	; 0x80
 8009ab8:	a81d      	add	r0, sp, #116	; 0x74
 8009aba:	f002 f8bf 	bl	800bc3c <__hexnan>
 8009abe:	2805      	cmp	r0, #5
 8009ac0:	d126      	bne.n	8009b10 <_strtod_l+0x388>
 8009ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ac4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009ac8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009acc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009ad0:	e69c      	b.n	800980c <_strtod_l+0x84>
 8009ad2:	210a      	movs	r1, #10
 8009ad4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009ad8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009adc:	e7b9      	b.n	8009a52 <_strtod_l+0x2ca>
 8009ade:	2b6e      	cmp	r3, #110	; 0x6e
 8009ae0:	e7db      	b.n	8009a9a <_strtod_l+0x312>
 8009ae2:	498f      	ldr	r1, [pc, #572]	; (8009d20 <_strtod_l+0x598>)
 8009ae4:	a81d      	add	r0, sp, #116	; 0x74
 8009ae6:	f002 f895 	bl	800bc14 <__match>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f43f aeaa 	beq.w	8009844 <_strtod_l+0xbc>
 8009af0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009af2:	498c      	ldr	r1, [pc, #560]	; (8009d24 <_strtod_l+0x59c>)
 8009af4:	3b01      	subs	r3, #1
 8009af6:	a81d      	add	r0, sp, #116	; 0x74
 8009af8:	931d      	str	r3, [sp, #116]	; 0x74
 8009afa:	f002 f88b 	bl	800bc14 <__match>
 8009afe:	b910      	cbnz	r0, 8009b06 <_strtod_l+0x37e>
 8009b00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b02:	3301      	adds	r3, #1
 8009b04:	931d      	str	r3, [sp, #116]	; 0x74
 8009b06:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009d34 <_strtod_l+0x5ac>
 8009b0a:	f04f 0a00 	mov.w	sl, #0
 8009b0e:	e67d      	b.n	800980c <_strtod_l+0x84>
 8009b10:	4885      	ldr	r0, [pc, #532]	; (8009d28 <_strtod_l+0x5a0>)
 8009b12:	f003 f9e1 	bl	800ced8 <nan>
 8009b16:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009b1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009b1e:	e675      	b.n	800980c <_strtod_l+0x84>
 8009b20:	9b07      	ldr	r3, [sp, #28]
 8009b22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b24:	1af3      	subs	r3, r6, r3
 8009b26:	2f00      	cmp	r7, #0
 8009b28:	bf08      	it	eq
 8009b2a:	462f      	moveq	r7, r5
 8009b2c:	2d10      	cmp	r5, #16
 8009b2e:	9308      	str	r3, [sp, #32]
 8009b30:	46a8      	mov	r8, r5
 8009b32:	bfa8      	it	ge
 8009b34:	f04f 0810 	movge.w	r8, #16
 8009b38:	f7f6 fce4 	bl	8000504 <__aeabi_ui2d>
 8009b3c:	2d09      	cmp	r5, #9
 8009b3e:	4682      	mov	sl, r0
 8009b40:	468b      	mov	fp, r1
 8009b42:	dd13      	ble.n	8009b6c <_strtod_l+0x3e4>
 8009b44:	4b79      	ldr	r3, [pc, #484]	; (8009d2c <_strtod_l+0x5a4>)
 8009b46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009b4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b4e:	f7f6 fd53 	bl	80005f8 <__aeabi_dmul>
 8009b52:	4682      	mov	sl, r0
 8009b54:	4648      	mov	r0, r9
 8009b56:	468b      	mov	fp, r1
 8009b58:	f7f6 fcd4 	bl	8000504 <__aeabi_ui2d>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4650      	mov	r0, sl
 8009b62:	4659      	mov	r1, fp
 8009b64:	f7f6 fb92 	bl	800028c <__adddf3>
 8009b68:	4682      	mov	sl, r0
 8009b6a:	468b      	mov	fp, r1
 8009b6c:	2d0f      	cmp	r5, #15
 8009b6e:	dc38      	bgt.n	8009be2 <_strtod_l+0x45a>
 8009b70:	9b08      	ldr	r3, [sp, #32]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f43f ae4a 	beq.w	800980c <_strtod_l+0x84>
 8009b78:	dd24      	ble.n	8009bc4 <_strtod_l+0x43c>
 8009b7a:	2b16      	cmp	r3, #22
 8009b7c:	dc0b      	bgt.n	8009b96 <_strtod_l+0x40e>
 8009b7e:	4d6b      	ldr	r5, [pc, #428]	; (8009d2c <_strtod_l+0x5a4>)
 8009b80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009b84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009b88:	4652      	mov	r2, sl
 8009b8a:	465b      	mov	r3, fp
 8009b8c:	f7f6 fd34 	bl	80005f8 <__aeabi_dmul>
 8009b90:	4682      	mov	sl, r0
 8009b92:	468b      	mov	fp, r1
 8009b94:	e63a      	b.n	800980c <_strtod_l+0x84>
 8009b96:	9a08      	ldr	r2, [sp, #32]
 8009b98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	db20      	blt.n	8009be2 <_strtod_l+0x45a>
 8009ba0:	4c62      	ldr	r4, [pc, #392]	; (8009d2c <_strtod_l+0x5a4>)
 8009ba2:	f1c5 050f 	rsb	r5, r5, #15
 8009ba6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009baa:	4652      	mov	r2, sl
 8009bac:	465b      	mov	r3, fp
 8009bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb2:	f7f6 fd21 	bl	80005f8 <__aeabi_dmul>
 8009bb6:	9b08      	ldr	r3, [sp, #32]
 8009bb8:	1b5d      	subs	r5, r3, r5
 8009bba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009bbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009bc2:	e7e3      	b.n	8009b8c <_strtod_l+0x404>
 8009bc4:	9b08      	ldr	r3, [sp, #32]
 8009bc6:	3316      	adds	r3, #22
 8009bc8:	db0b      	blt.n	8009be2 <_strtod_l+0x45a>
 8009bca:	9b07      	ldr	r3, [sp, #28]
 8009bcc:	4a57      	ldr	r2, [pc, #348]	; (8009d2c <_strtod_l+0x5a4>)
 8009bce:	1b9e      	subs	r6, r3, r6
 8009bd0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009bd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bd8:	4650      	mov	r0, sl
 8009bda:	4659      	mov	r1, fp
 8009bdc:	f7f6 fe36 	bl	800084c <__aeabi_ddiv>
 8009be0:	e7d6      	b.n	8009b90 <_strtod_l+0x408>
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	eba5 0808 	sub.w	r8, r5, r8
 8009be8:	4498      	add	r8, r3
 8009bea:	f1b8 0f00 	cmp.w	r8, #0
 8009bee:	dd71      	ble.n	8009cd4 <_strtod_l+0x54c>
 8009bf0:	f018 030f 	ands.w	r3, r8, #15
 8009bf4:	d00a      	beq.n	8009c0c <_strtod_l+0x484>
 8009bf6:	494d      	ldr	r1, [pc, #308]	; (8009d2c <_strtod_l+0x5a4>)
 8009bf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	465b      	mov	r3, fp
 8009c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c04:	f7f6 fcf8 	bl	80005f8 <__aeabi_dmul>
 8009c08:	4682      	mov	sl, r0
 8009c0a:	468b      	mov	fp, r1
 8009c0c:	f038 080f 	bics.w	r8, r8, #15
 8009c10:	d04d      	beq.n	8009cae <_strtod_l+0x526>
 8009c12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009c16:	dd22      	ble.n	8009c5e <_strtod_l+0x4d6>
 8009c18:	2500      	movs	r5, #0
 8009c1a:	462e      	mov	r6, r5
 8009c1c:	9509      	str	r5, [sp, #36]	; 0x24
 8009c1e:	9507      	str	r5, [sp, #28]
 8009c20:	2322      	movs	r3, #34	; 0x22
 8009c22:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009d34 <_strtod_l+0x5ac>
 8009c26:	6023      	str	r3, [r4, #0]
 8009c28:	f04f 0a00 	mov.w	sl, #0
 8009c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f43f adec 	beq.w	800980c <_strtod_l+0x84>
 8009c34:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009c36:	4620      	mov	r0, r4
 8009c38:	f002 f962 	bl	800bf00 <_Bfree>
 8009c3c:	9907      	ldr	r1, [sp, #28]
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f002 f95e 	bl	800bf00 <_Bfree>
 8009c44:	4631      	mov	r1, r6
 8009c46:	4620      	mov	r0, r4
 8009c48:	f002 f95a 	bl	800bf00 <_Bfree>
 8009c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f002 f956 	bl	800bf00 <_Bfree>
 8009c54:	4629      	mov	r1, r5
 8009c56:	4620      	mov	r0, r4
 8009c58:	f002 f952 	bl	800bf00 <_Bfree>
 8009c5c:	e5d6      	b.n	800980c <_strtod_l+0x84>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009c64:	4650      	mov	r0, sl
 8009c66:	4659      	mov	r1, fp
 8009c68:	4699      	mov	r9, r3
 8009c6a:	f1b8 0f01 	cmp.w	r8, #1
 8009c6e:	dc21      	bgt.n	8009cb4 <_strtod_l+0x52c>
 8009c70:	b10b      	cbz	r3, 8009c76 <_strtod_l+0x4ee>
 8009c72:	4682      	mov	sl, r0
 8009c74:	468b      	mov	fp, r1
 8009c76:	4b2e      	ldr	r3, [pc, #184]	; (8009d30 <_strtod_l+0x5a8>)
 8009c78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c7c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009c80:	4652      	mov	r2, sl
 8009c82:	465b      	mov	r3, fp
 8009c84:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009c88:	f7f6 fcb6 	bl	80005f8 <__aeabi_dmul>
 8009c8c:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <_strtod_l+0x5ac>)
 8009c8e:	460a      	mov	r2, r1
 8009c90:	400b      	ands	r3, r1
 8009c92:	4929      	ldr	r1, [pc, #164]	; (8009d38 <_strtod_l+0x5b0>)
 8009c94:	428b      	cmp	r3, r1
 8009c96:	4682      	mov	sl, r0
 8009c98:	d8be      	bhi.n	8009c18 <_strtod_l+0x490>
 8009c9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c9e:	428b      	cmp	r3, r1
 8009ca0:	bf86      	itte	hi
 8009ca2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009d3c <_strtod_l+0x5b4>
 8009ca6:	f04f 3aff 	movhi.w	sl, #4294967295
 8009caa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9304      	str	r3, [sp, #16]
 8009cb2:	e081      	b.n	8009db8 <_strtod_l+0x630>
 8009cb4:	f018 0f01 	tst.w	r8, #1
 8009cb8:	d007      	beq.n	8009cca <_strtod_l+0x542>
 8009cba:	4b1d      	ldr	r3, [pc, #116]	; (8009d30 <_strtod_l+0x5a8>)
 8009cbc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	f7f6 fc98 	bl	80005f8 <__aeabi_dmul>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f109 0901 	add.w	r9, r9, #1
 8009cce:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009cd2:	e7ca      	b.n	8009c6a <_strtod_l+0x4e2>
 8009cd4:	d0eb      	beq.n	8009cae <_strtod_l+0x526>
 8009cd6:	f1c8 0800 	rsb	r8, r8, #0
 8009cda:	f018 020f 	ands.w	r2, r8, #15
 8009cde:	d00a      	beq.n	8009cf6 <_strtod_l+0x56e>
 8009ce0:	4b12      	ldr	r3, [pc, #72]	; (8009d2c <_strtod_l+0x5a4>)
 8009ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ce6:	4650      	mov	r0, sl
 8009ce8:	4659      	mov	r1, fp
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 fdad 	bl	800084c <__aeabi_ddiv>
 8009cf2:	4682      	mov	sl, r0
 8009cf4:	468b      	mov	fp, r1
 8009cf6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009cfa:	d0d8      	beq.n	8009cae <_strtod_l+0x526>
 8009cfc:	f1b8 0f1f 	cmp.w	r8, #31
 8009d00:	dd1e      	ble.n	8009d40 <_strtod_l+0x5b8>
 8009d02:	2500      	movs	r5, #0
 8009d04:	462e      	mov	r6, r5
 8009d06:	9509      	str	r5, [sp, #36]	; 0x24
 8009d08:	9507      	str	r5, [sp, #28]
 8009d0a:	2322      	movs	r3, #34	; 0x22
 8009d0c:	f04f 0a00 	mov.w	sl, #0
 8009d10:	f04f 0b00 	mov.w	fp, #0
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	e789      	b.n	8009c2c <_strtod_l+0x4a4>
 8009d18:	0800d515 	.word	0x0800d515
 8009d1c:	0800d558 	.word	0x0800d558
 8009d20:	0800d50d 	.word	0x0800d50d
 8009d24:	0800d69c 	.word	0x0800d69c
 8009d28:	0800d9b8 	.word	0x0800d9b8
 8009d2c:	0800d898 	.word	0x0800d898
 8009d30:	0800d870 	.word	0x0800d870
 8009d34:	7ff00000 	.word	0x7ff00000
 8009d38:	7ca00000 	.word	0x7ca00000
 8009d3c:	7fefffff 	.word	0x7fefffff
 8009d40:	f018 0310 	ands.w	r3, r8, #16
 8009d44:	bf18      	it	ne
 8009d46:	236a      	movne	r3, #106	; 0x6a
 8009d48:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a100 <_strtod_l+0x978>
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	4650      	mov	r0, sl
 8009d50:	4659      	mov	r1, fp
 8009d52:	2300      	movs	r3, #0
 8009d54:	f018 0f01 	tst.w	r8, #1
 8009d58:	d004      	beq.n	8009d64 <_strtod_l+0x5dc>
 8009d5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d5e:	f7f6 fc4b 	bl	80005f8 <__aeabi_dmul>
 8009d62:	2301      	movs	r3, #1
 8009d64:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009d68:	f109 0908 	add.w	r9, r9, #8
 8009d6c:	d1f2      	bne.n	8009d54 <_strtod_l+0x5cc>
 8009d6e:	b10b      	cbz	r3, 8009d74 <_strtod_l+0x5ec>
 8009d70:	4682      	mov	sl, r0
 8009d72:	468b      	mov	fp, r1
 8009d74:	9b04      	ldr	r3, [sp, #16]
 8009d76:	b1bb      	cbz	r3, 8009da8 <_strtod_l+0x620>
 8009d78:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009d7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	4659      	mov	r1, fp
 8009d84:	dd10      	ble.n	8009da8 <_strtod_l+0x620>
 8009d86:	2b1f      	cmp	r3, #31
 8009d88:	f340 8128 	ble.w	8009fdc <_strtod_l+0x854>
 8009d8c:	2b34      	cmp	r3, #52	; 0x34
 8009d8e:	bfde      	ittt	le
 8009d90:	3b20      	suble	r3, #32
 8009d92:	f04f 32ff 	movle.w	r2, #4294967295
 8009d96:	fa02 f303 	lslle.w	r3, r2, r3
 8009d9a:	f04f 0a00 	mov.w	sl, #0
 8009d9e:	bfcc      	ite	gt
 8009da0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009da4:	ea03 0b01 	andle.w	fp, r3, r1
 8009da8:	2200      	movs	r2, #0
 8009daa:	2300      	movs	r3, #0
 8009dac:	4650      	mov	r0, sl
 8009dae:	4659      	mov	r1, fp
 8009db0:	f7f6 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d1a4      	bne.n	8009d02 <_strtod_l+0x57a>
 8009db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009dbe:	462b      	mov	r3, r5
 8009dc0:	463a      	mov	r2, r7
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f002 f908 	bl	800bfd8 <__s2b>
 8009dc8:	9009      	str	r0, [sp, #36]	; 0x24
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	f43f af24 	beq.w	8009c18 <_strtod_l+0x490>
 8009dd0:	9b07      	ldr	r3, [sp, #28]
 8009dd2:	1b9e      	subs	r6, r3, r6
 8009dd4:	9b08      	ldr	r3, [sp, #32]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	bfb4      	ite	lt
 8009dda:	4633      	movlt	r3, r6
 8009ddc:	2300      	movge	r3, #0
 8009dde:	9310      	str	r3, [sp, #64]	; 0x40
 8009de0:	9b08      	ldr	r3, [sp, #32]
 8009de2:	2500      	movs	r5, #0
 8009de4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009de8:	9318      	str	r3, [sp, #96]	; 0x60
 8009dea:	462e      	mov	r6, r5
 8009dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dee:	4620      	mov	r0, r4
 8009df0:	6859      	ldr	r1, [r3, #4]
 8009df2:	f002 f845 	bl	800be80 <_Balloc>
 8009df6:	9007      	str	r0, [sp, #28]
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	f43f af11 	beq.w	8009c20 <_strtod_l+0x498>
 8009dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e00:	691a      	ldr	r2, [r3, #16]
 8009e02:	3202      	adds	r2, #2
 8009e04:	f103 010c 	add.w	r1, r3, #12
 8009e08:	0092      	lsls	r2, r2, #2
 8009e0a:	300c      	adds	r0, #12
 8009e0c:	f7fe fd5a 	bl	80088c4 <memcpy>
 8009e10:	ec4b ab10 	vmov	d0, sl, fp
 8009e14:	aa20      	add	r2, sp, #128	; 0x80
 8009e16:	a91f      	add	r1, sp, #124	; 0x7c
 8009e18:	4620      	mov	r0, r4
 8009e1a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009e1e:	f002 fc17 	bl	800c650 <__d2b>
 8009e22:	901e      	str	r0, [sp, #120]	; 0x78
 8009e24:	2800      	cmp	r0, #0
 8009e26:	f43f aefb 	beq.w	8009c20 <_strtod_l+0x498>
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f002 f96d 	bl	800c10c <__i2b>
 8009e32:	4606      	mov	r6, r0
 8009e34:	2800      	cmp	r0, #0
 8009e36:	f43f aef3 	beq.w	8009c20 <_strtod_l+0x498>
 8009e3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e3c:	9904      	ldr	r1, [sp, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bfab      	itete	ge
 8009e42:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009e44:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009e46:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009e48:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009e4c:	bfac      	ite	ge
 8009e4e:	eb03 0902 	addge.w	r9, r3, r2
 8009e52:	1ad7      	sublt	r7, r2, r3
 8009e54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e56:	eba3 0801 	sub.w	r8, r3, r1
 8009e5a:	4490      	add	r8, r2
 8009e5c:	4ba3      	ldr	r3, [pc, #652]	; (800a0ec <_strtod_l+0x964>)
 8009e5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e62:	4598      	cmp	r8, r3
 8009e64:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e68:	f280 80cc 	bge.w	800a004 <_strtod_l+0x87c>
 8009e6c:	eba3 0308 	sub.w	r3, r3, r8
 8009e70:	2b1f      	cmp	r3, #31
 8009e72:	eba2 0203 	sub.w	r2, r2, r3
 8009e76:	f04f 0101 	mov.w	r1, #1
 8009e7a:	f300 80b6 	bgt.w	8009fea <_strtod_l+0x862>
 8009e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e82:	9311      	str	r3, [sp, #68]	; 0x44
 8009e84:	2300      	movs	r3, #0
 8009e86:	930c      	str	r3, [sp, #48]	; 0x30
 8009e88:	eb09 0802 	add.w	r8, r9, r2
 8009e8c:	9b04      	ldr	r3, [sp, #16]
 8009e8e:	45c1      	cmp	r9, r8
 8009e90:	4417      	add	r7, r2
 8009e92:	441f      	add	r7, r3
 8009e94:	464b      	mov	r3, r9
 8009e96:	bfa8      	it	ge
 8009e98:	4643      	movge	r3, r8
 8009e9a:	42bb      	cmp	r3, r7
 8009e9c:	bfa8      	it	ge
 8009e9e:	463b      	movge	r3, r7
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bfc2      	ittt	gt
 8009ea4:	eba8 0803 	subgt.w	r8, r8, r3
 8009ea8:	1aff      	subgt	r7, r7, r3
 8009eaa:	eba9 0903 	subgt.w	r9, r9, r3
 8009eae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dd17      	ble.n	8009ee4 <_strtod_l+0x75c>
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f002 f9e3 	bl	800c284 <__pow5mult>
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	f43f aead 	beq.w	8009c20 <_strtod_l+0x498>
 8009ec6:	4601      	mov	r1, r0
 8009ec8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f002 f934 	bl	800c138 <__multiply>
 8009ed0:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f43f aea4 	beq.w	8009c20 <_strtod_l+0x498>
 8009ed8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009eda:	4620      	mov	r0, r4
 8009edc:	f002 f810 	bl	800bf00 <_Bfree>
 8009ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ee2:	931e      	str	r3, [sp, #120]	; 0x78
 8009ee4:	f1b8 0f00 	cmp.w	r8, #0
 8009ee8:	f300 8091 	bgt.w	800a00e <_strtod_l+0x886>
 8009eec:	9b08      	ldr	r3, [sp, #32]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	dd08      	ble.n	8009f04 <_strtod_l+0x77c>
 8009ef2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ef4:	9907      	ldr	r1, [sp, #28]
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f002 f9c4 	bl	800c284 <__pow5mult>
 8009efc:	9007      	str	r0, [sp, #28]
 8009efe:	2800      	cmp	r0, #0
 8009f00:	f43f ae8e 	beq.w	8009c20 <_strtod_l+0x498>
 8009f04:	2f00      	cmp	r7, #0
 8009f06:	dd08      	ble.n	8009f1a <_strtod_l+0x792>
 8009f08:	9907      	ldr	r1, [sp, #28]
 8009f0a:	463a      	mov	r2, r7
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f002 fa13 	bl	800c338 <__lshift>
 8009f12:	9007      	str	r0, [sp, #28]
 8009f14:	2800      	cmp	r0, #0
 8009f16:	f43f ae83 	beq.w	8009c20 <_strtod_l+0x498>
 8009f1a:	f1b9 0f00 	cmp.w	r9, #0
 8009f1e:	dd08      	ble.n	8009f32 <_strtod_l+0x7aa>
 8009f20:	4631      	mov	r1, r6
 8009f22:	464a      	mov	r2, r9
 8009f24:	4620      	mov	r0, r4
 8009f26:	f002 fa07 	bl	800c338 <__lshift>
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	f43f ae77 	beq.w	8009c20 <_strtod_l+0x498>
 8009f32:	9a07      	ldr	r2, [sp, #28]
 8009f34:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009f36:	4620      	mov	r0, r4
 8009f38:	f002 fa86 	bl	800c448 <__mdiff>
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f43f ae6e 	beq.w	8009c20 <_strtod_l+0x498>
 8009f44:	68c3      	ldr	r3, [r0, #12]
 8009f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60c3      	str	r3, [r0, #12]
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	f002 fa5f 	bl	800c410 <__mcmp>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	da65      	bge.n	800a022 <_strtod_l+0x89a>
 8009f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f58:	ea53 030a 	orrs.w	r3, r3, sl
 8009f5c:	f040 8087 	bne.w	800a06e <_strtod_l+0x8e6>
 8009f60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f040 8082 	bne.w	800a06e <_strtod_l+0x8e6>
 8009f6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f6e:	0d1b      	lsrs	r3, r3, #20
 8009f70:	051b      	lsls	r3, r3, #20
 8009f72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f76:	d97a      	bls.n	800a06e <_strtod_l+0x8e6>
 8009f78:	696b      	ldr	r3, [r5, #20]
 8009f7a:	b913      	cbnz	r3, 8009f82 <_strtod_l+0x7fa>
 8009f7c:	692b      	ldr	r3, [r5, #16]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	dd75      	ble.n	800a06e <_strtod_l+0x8e6>
 8009f82:	4629      	mov	r1, r5
 8009f84:	2201      	movs	r2, #1
 8009f86:	4620      	mov	r0, r4
 8009f88:	f002 f9d6 	bl	800c338 <__lshift>
 8009f8c:	4631      	mov	r1, r6
 8009f8e:	4605      	mov	r5, r0
 8009f90:	f002 fa3e 	bl	800c410 <__mcmp>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	dd6a      	ble.n	800a06e <_strtod_l+0x8e6>
 8009f98:	9904      	ldr	r1, [sp, #16]
 8009f9a:	4a55      	ldr	r2, [pc, #340]	; (800a0f0 <_strtod_l+0x968>)
 8009f9c:	465b      	mov	r3, fp
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	f000 8085 	beq.w	800a0ae <_strtod_l+0x926>
 8009fa4:	ea02 010b 	and.w	r1, r2, fp
 8009fa8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009fac:	dc7f      	bgt.n	800a0ae <_strtod_l+0x926>
 8009fae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009fb2:	f77f aeaa 	ble.w	8009d0a <_strtod_l+0x582>
 8009fb6:	4a4f      	ldr	r2, [pc, #316]	; (800a0f4 <_strtod_l+0x96c>)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009fbe:	4650      	mov	r0, sl
 8009fc0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009fc4:	4659      	mov	r1, fp
 8009fc6:	f7f6 fb17 	bl	80005f8 <__aeabi_dmul>
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4303      	orrs	r3, r0
 8009fce:	bf08      	it	eq
 8009fd0:	2322      	moveq	r3, #34	; 0x22
 8009fd2:	4682      	mov	sl, r0
 8009fd4:	468b      	mov	fp, r1
 8009fd6:	bf08      	it	eq
 8009fd8:	6023      	streq	r3, [r4, #0]
 8009fda:	e62b      	b.n	8009c34 <_strtod_l+0x4ac>
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe4:	ea03 0a0a 	and.w	sl, r3, sl
 8009fe8:	e6de      	b.n	8009da8 <_strtod_l+0x620>
 8009fea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009fee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009ff2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009ff6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009ffa:	fa01 f308 	lsl.w	r3, r1, r8
 8009ffe:	930c      	str	r3, [sp, #48]	; 0x30
 800a000:	9111      	str	r1, [sp, #68]	; 0x44
 800a002:	e741      	b.n	8009e88 <_strtod_l+0x700>
 800a004:	2300      	movs	r3, #0
 800a006:	930c      	str	r3, [sp, #48]	; 0x30
 800a008:	2301      	movs	r3, #1
 800a00a:	9311      	str	r3, [sp, #68]	; 0x44
 800a00c:	e73c      	b.n	8009e88 <_strtod_l+0x700>
 800a00e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a010:	4642      	mov	r2, r8
 800a012:	4620      	mov	r0, r4
 800a014:	f002 f990 	bl	800c338 <__lshift>
 800a018:	901e      	str	r0, [sp, #120]	; 0x78
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f47f af66 	bne.w	8009eec <_strtod_l+0x764>
 800a020:	e5fe      	b.n	8009c20 <_strtod_l+0x498>
 800a022:	465f      	mov	r7, fp
 800a024:	d16e      	bne.n	800a104 <_strtod_l+0x97c>
 800a026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a028:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a02c:	b342      	cbz	r2, 800a080 <_strtod_l+0x8f8>
 800a02e:	4a32      	ldr	r2, [pc, #200]	; (800a0f8 <_strtod_l+0x970>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d128      	bne.n	800a086 <_strtod_l+0x8fe>
 800a034:	9b04      	ldr	r3, [sp, #16]
 800a036:	4650      	mov	r0, sl
 800a038:	b1eb      	cbz	r3, 800a076 <_strtod_l+0x8ee>
 800a03a:	4a2d      	ldr	r2, [pc, #180]	; (800a0f0 <_strtod_l+0x968>)
 800a03c:	403a      	ands	r2, r7
 800a03e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a042:	f04f 31ff 	mov.w	r1, #4294967295
 800a046:	d819      	bhi.n	800a07c <_strtod_l+0x8f4>
 800a048:	0d12      	lsrs	r2, r2, #20
 800a04a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a04e:	fa01 f303 	lsl.w	r3, r1, r3
 800a052:	4298      	cmp	r0, r3
 800a054:	d117      	bne.n	800a086 <_strtod_l+0x8fe>
 800a056:	4b29      	ldr	r3, [pc, #164]	; (800a0fc <_strtod_l+0x974>)
 800a058:	429f      	cmp	r7, r3
 800a05a:	d102      	bne.n	800a062 <_strtod_l+0x8da>
 800a05c:	3001      	adds	r0, #1
 800a05e:	f43f addf 	beq.w	8009c20 <_strtod_l+0x498>
 800a062:	4b23      	ldr	r3, [pc, #140]	; (800a0f0 <_strtod_l+0x968>)
 800a064:	403b      	ands	r3, r7
 800a066:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a06a:	f04f 0a00 	mov.w	sl, #0
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1a0      	bne.n	8009fb6 <_strtod_l+0x82e>
 800a074:	e5de      	b.n	8009c34 <_strtod_l+0x4ac>
 800a076:	f04f 33ff 	mov.w	r3, #4294967295
 800a07a:	e7ea      	b.n	800a052 <_strtod_l+0x8ca>
 800a07c:	460b      	mov	r3, r1
 800a07e:	e7e8      	b.n	800a052 <_strtod_l+0x8ca>
 800a080:	ea53 030a 	orrs.w	r3, r3, sl
 800a084:	d088      	beq.n	8009f98 <_strtod_l+0x810>
 800a086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a088:	b1db      	cbz	r3, 800a0c2 <_strtod_l+0x93a>
 800a08a:	423b      	tst	r3, r7
 800a08c:	d0ef      	beq.n	800a06e <_strtod_l+0x8e6>
 800a08e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a090:	9a04      	ldr	r2, [sp, #16]
 800a092:	4650      	mov	r0, sl
 800a094:	4659      	mov	r1, fp
 800a096:	b1c3      	cbz	r3, 800a0ca <_strtod_l+0x942>
 800a098:	f7ff fb58 	bl	800974c <sulp>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0a4:	f7f6 f8f2 	bl	800028c <__adddf3>
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	468b      	mov	fp, r1
 800a0ac:	e7df      	b.n	800a06e <_strtod_l+0x8e6>
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a0b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a0b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a0bc:	f04f 3aff 	mov.w	sl, #4294967295
 800a0c0:	e7d5      	b.n	800a06e <_strtod_l+0x8e6>
 800a0c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0c4:	ea13 0f0a 	tst.w	r3, sl
 800a0c8:	e7e0      	b.n	800a08c <_strtod_l+0x904>
 800a0ca:	f7ff fb3f 	bl	800974c <sulp>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0d6:	f7f6 f8d7 	bl	8000288 <__aeabi_dsub>
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4682      	mov	sl, r0
 800a0e0:	468b      	mov	fp, r1
 800a0e2:	f7f6 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d0c1      	beq.n	800a06e <_strtod_l+0x8e6>
 800a0ea:	e60e      	b.n	8009d0a <_strtod_l+0x582>
 800a0ec:	fffffc02 	.word	0xfffffc02
 800a0f0:	7ff00000 	.word	0x7ff00000
 800a0f4:	39500000 	.word	0x39500000
 800a0f8:	000fffff 	.word	0x000fffff
 800a0fc:	7fefffff 	.word	0x7fefffff
 800a100:	0800d570 	.word	0x0800d570
 800a104:	4631      	mov	r1, r6
 800a106:	4628      	mov	r0, r5
 800a108:	f002 fafe 	bl	800c708 <__ratio>
 800a10c:	ec59 8b10 	vmov	r8, r9, d0
 800a110:	ee10 0a10 	vmov	r0, s0
 800a114:	2200      	movs	r2, #0
 800a116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a11a:	4649      	mov	r1, r9
 800a11c:	f7f6 fce8 	bl	8000af0 <__aeabi_dcmple>
 800a120:	2800      	cmp	r0, #0
 800a122:	d07c      	beq.n	800a21e <_strtod_l+0xa96>
 800a124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d04c      	beq.n	800a1c4 <_strtod_l+0xa3c>
 800a12a:	4b95      	ldr	r3, [pc, #596]	; (800a380 <_strtod_l+0xbf8>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a132:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a380 <_strtod_l+0xbf8>
 800a136:	f04f 0800 	mov.w	r8, #0
 800a13a:	4b92      	ldr	r3, [pc, #584]	; (800a384 <_strtod_l+0xbfc>)
 800a13c:	403b      	ands	r3, r7
 800a13e:	9311      	str	r3, [sp, #68]	; 0x44
 800a140:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a142:	4b91      	ldr	r3, [pc, #580]	; (800a388 <_strtod_l+0xc00>)
 800a144:	429a      	cmp	r2, r3
 800a146:	f040 80b2 	bne.w	800a2ae <_strtod_l+0xb26>
 800a14a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a14e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a152:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a156:	ec4b ab10 	vmov	d0, sl, fp
 800a15a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a15e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a162:	f002 f9f9 	bl	800c558 <__ulp>
 800a166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a16a:	ec53 2b10 	vmov	r2, r3, d0
 800a16e:	f7f6 fa43 	bl	80005f8 <__aeabi_dmul>
 800a172:	4652      	mov	r2, sl
 800a174:	465b      	mov	r3, fp
 800a176:	f7f6 f889 	bl	800028c <__adddf3>
 800a17a:	460b      	mov	r3, r1
 800a17c:	4981      	ldr	r1, [pc, #516]	; (800a384 <_strtod_l+0xbfc>)
 800a17e:	4a83      	ldr	r2, [pc, #524]	; (800a38c <_strtod_l+0xc04>)
 800a180:	4019      	ands	r1, r3
 800a182:	4291      	cmp	r1, r2
 800a184:	4682      	mov	sl, r0
 800a186:	d95e      	bls.n	800a246 <_strtod_l+0xabe>
 800a188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a18a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a18e:	4293      	cmp	r3, r2
 800a190:	d103      	bne.n	800a19a <_strtod_l+0xa12>
 800a192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a194:	3301      	adds	r3, #1
 800a196:	f43f ad43 	beq.w	8009c20 <_strtod_l+0x498>
 800a19a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a398 <_strtod_l+0xc10>
 800a19e:	f04f 3aff 	mov.w	sl, #4294967295
 800a1a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f001 feab 	bl	800bf00 <_Bfree>
 800a1aa:	9907      	ldr	r1, [sp, #28]
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f001 fea7 	bl	800bf00 <_Bfree>
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f001 fea3 	bl	800bf00 <_Bfree>
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f001 fe9f 	bl	800bf00 <_Bfree>
 800a1c2:	e613      	b.n	8009dec <_strtod_l+0x664>
 800a1c4:	f1ba 0f00 	cmp.w	sl, #0
 800a1c8:	d11b      	bne.n	800a202 <_strtod_l+0xa7a>
 800a1ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1ce:	b9f3      	cbnz	r3, 800a20e <_strtod_l+0xa86>
 800a1d0:	4b6b      	ldr	r3, [pc, #428]	; (800a380 <_strtod_l+0xbf8>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	f7f6 fc80 	bl	8000adc <__aeabi_dcmplt>
 800a1dc:	b9d0      	cbnz	r0, 800a214 <_strtod_l+0xa8c>
 800a1de:	4640      	mov	r0, r8
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	4b6b      	ldr	r3, [pc, #428]	; (800a390 <_strtod_l+0xc08>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f7f6 fa07 	bl	80005f8 <__aeabi_dmul>
 800a1ea:	4680      	mov	r8, r0
 800a1ec:	4689      	mov	r9, r1
 800a1ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a1f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a1f6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a1f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a1fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a200:	e79b      	b.n	800a13a <_strtod_l+0x9b2>
 800a202:	f1ba 0f01 	cmp.w	sl, #1
 800a206:	d102      	bne.n	800a20e <_strtod_l+0xa86>
 800a208:	2f00      	cmp	r7, #0
 800a20a:	f43f ad7e 	beq.w	8009d0a <_strtod_l+0x582>
 800a20e:	4b61      	ldr	r3, [pc, #388]	; (800a394 <_strtod_l+0xc0c>)
 800a210:	2200      	movs	r2, #0
 800a212:	e78c      	b.n	800a12e <_strtod_l+0x9a6>
 800a214:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a390 <_strtod_l+0xc08>
 800a218:	f04f 0800 	mov.w	r8, #0
 800a21c:	e7e7      	b.n	800a1ee <_strtod_l+0xa66>
 800a21e:	4b5c      	ldr	r3, [pc, #368]	; (800a390 <_strtod_l+0xc08>)
 800a220:	4640      	mov	r0, r8
 800a222:	4649      	mov	r1, r9
 800a224:	2200      	movs	r2, #0
 800a226:	f7f6 f9e7 	bl	80005f8 <__aeabi_dmul>
 800a22a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a22c:	4680      	mov	r8, r0
 800a22e:	4689      	mov	r9, r1
 800a230:	b933      	cbnz	r3, 800a240 <_strtod_l+0xab8>
 800a232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a236:	9012      	str	r0, [sp, #72]	; 0x48
 800a238:	9313      	str	r3, [sp, #76]	; 0x4c
 800a23a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a23e:	e7dd      	b.n	800a1fc <_strtod_l+0xa74>
 800a240:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a244:	e7f9      	b.n	800a23a <_strtod_l+0xab2>
 800a246:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a24a:	9b04      	ldr	r3, [sp, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1a8      	bne.n	800a1a2 <_strtod_l+0xa1a>
 800a250:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a254:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a256:	0d1b      	lsrs	r3, r3, #20
 800a258:	051b      	lsls	r3, r3, #20
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d1a1      	bne.n	800a1a2 <_strtod_l+0xa1a>
 800a25e:	4640      	mov	r0, r8
 800a260:	4649      	mov	r1, r9
 800a262:	f7f6 fd29 	bl	8000cb8 <__aeabi_d2lz>
 800a266:	f7f6 f999 	bl	800059c <__aeabi_l2d>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4640      	mov	r0, r8
 800a270:	4649      	mov	r1, r9
 800a272:	f7f6 f809 	bl	8000288 <__aeabi_dsub>
 800a276:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a27c:	ea43 030a 	orr.w	r3, r3, sl
 800a280:	4313      	orrs	r3, r2
 800a282:	4680      	mov	r8, r0
 800a284:	4689      	mov	r9, r1
 800a286:	d053      	beq.n	800a330 <_strtod_l+0xba8>
 800a288:	a335      	add	r3, pc, #212	; (adr r3, 800a360 <_strtod_l+0xbd8>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f7f6 fc25 	bl	8000adc <__aeabi_dcmplt>
 800a292:	2800      	cmp	r0, #0
 800a294:	f47f acce 	bne.w	8009c34 <_strtod_l+0x4ac>
 800a298:	a333      	add	r3, pc, #204	; (adr r3, 800a368 <_strtod_l+0xbe0>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	4640      	mov	r0, r8
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	f7f6 fc39 	bl	8000b18 <__aeabi_dcmpgt>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f43f af7b 	beq.w	800a1a2 <_strtod_l+0xa1a>
 800a2ac:	e4c2      	b.n	8009c34 <_strtod_l+0x4ac>
 800a2ae:	9b04      	ldr	r3, [sp, #16]
 800a2b0:	b333      	cbz	r3, 800a300 <_strtod_l+0xb78>
 800a2b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2b8:	d822      	bhi.n	800a300 <_strtod_l+0xb78>
 800a2ba:	a32d      	add	r3, pc, #180	; (adr r3, 800a370 <_strtod_l+0xbe8>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	f7f6 fc14 	bl	8000af0 <__aeabi_dcmple>
 800a2c8:	b1a0      	cbz	r0, 800a2f4 <_strtod_l+0xb6c>
 800a2ca:	4649      	mov	r1, r9
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	f7f6 fc6b 	bl	8000ba8 <__aeabi_d2uiz>
 800a2d2:	2801      	cmp	r0, #1
 800a2d4:	bf38      	it	cc
 800a2d6:	2001      	movcc	r0, #1
 800a2d8:	f7f6 f914 	bl	8000504 <__aeabi_ui2d>
 800a2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2de:	4680      	mov	r8, r0
 800a2e0:	4689      	mov	r9, r1
 800a2e2:	bb13      	cbnz	r3, 800a32a <_strtod_l+0xba2>
 800a2e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2e8:	9014      	str	r0, [sp, #80]	; 0x50
 800a2ea:	9315      	str	r3, [sp, #84]	; 0x54
 800a2ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a2f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a2f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a2fc:	1a9b      	subs	r3, r3, r2
 800a2fe:	930d      	str	r3, [sp, #52]	; 0x34
 800a300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a304:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a308:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a30c:	f002 f924 	bl	800c558 <__ulp>
 800a310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a314:	ec53 2b10 	vmov	r2, r3, d0
 800a318:	f7f6 f96e 	bl	80005f8 <__aeabi_dmul>
 800a31c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a320:	f7f5 ffb4 	bl	800028c <__adddf3>
 800a324:	4682      	mov	sl, r0
 800a326:	468b      	mov	fp, r1
 800a328:	e78f      	b.n	800a24a <_strtod_l+0xac2>
 800a32a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a32e:	e7dd      	b.n	800a2ec <_strtod_l+0xb64>
 800a330:	a311      	add	r3, pc, #68	; (adr r3, 800a378 <_strtod_l+0xbf0>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	f7f6 fbd1 	bl	8000adc <__aeabi_dcmplt>
 800a33a:	e7b4      	b.n	800a2a6 <_strtod_l+0xb1e>
 800a33c:	2300      	movs	r3, #0
 800a33e:	930e      	str	r3, [sp, #56]	; 0x38
 800a340:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a342:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a344:	6013      	str	r3, [r2, #0]
 800a346:	f7ff ba65 	b.w	8009814 <_strtod_l+0x8c>
 800a34a:	2b65      	cmp	r3, #101	; 0x65
 800a34c:	f43f ab5d 	beq.w	8009a0a <_strtod_l+0x282>
 800a350:	2b45      	cmp	r3, #69	; 0x45
 800a352:	f43f ab5a 	beq.w	8009a0a <_strtod_l+0x282>
 800a356:	2201      	movs	r2, #1
 800a358:	f7ff bb92 	b.w	8009a80 <_strtod_l+0x2f8>
 800a35c:	f3af 8000 	nop.w
 800a360:	94a03595 	.word	0x94a03595
 800a364:	3fdfffff 	.word	0x3fdfffff
 800a368:	35afe535 	.word	0x35afe535
 800a36c:	3fe00000 	.word	0x3fe00000
 800a370:	ffc00000 	.word	0xffc00000
 800a374:	41dfffff 	.word	0x41dfffff
 800a378:	94a03595 	.word	0x94a03595
 800a37c:	3fcfffff 	.word	0x3fcfffff
 800a380:	3ff00000 	.word	0x3ff00000
 800a384:	7ff00000 	.word	0x7ff00000
 800a388:	7fe00000 	.word	0x7fe00000
 800a38c:	7c9fffff 	.word	0x7c9fffff
 800a390:	3fe00000 	.word	0x3fe00000
 800a394:	bff00000 	.word	0xbff00000
 800a398:	7fefffff 	.word	0x7fefffff

0800a39c <_strtod_r>:
 800a39c:	4b01      	ldr	r3, [pc, #4]	; (800a3a4 <_strtod_r+0x8>)
 800a39e:	f7ff b9f3 	b.w	8009788 <_strtod_l>
 800a3a2:	bf00      	nop
 800a3a4:	20000074 	.word	0x20000074

0800a3a8 <_strtol_l.isra.0>:
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ae:	d001      	beq.n	800a3b4 <_strtol_l.isra.0+0xc>
 800a3b0:	2b24      	cmp	r3, #36	; 0x24
 800a3b2:	d906      	bls.n	800a3c2 <_strtol_l.isra.0+0x1a>
 800a3b4:	f7fe fa5c 	bl	8008870 <__errno>
 800a3b8:	2316      	movs	r3, #22
 800a3ba:	6003      	str	r3, [r0, #0]
 800a3bc:	2000      	movs	r0, #0
 800a3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c2:	4f3a      	ldr	r7, [pc, #232]	; (800a4ac <_strtol_l.isra.0+0x104>)
 800a3c4:	468e      	mov	lr, r1
 800a3c6:	4676      	mov	r6, lr
 800a3c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a3cc:	5de5      	ldrb	r5, [r4, r7]
 800a3ce:	f015 0508 	ands.w	r5, r5, #8
 800a3d2:	d1f8      	bne.n	800a3c6 <_strtol_l.isra.0+0x1e>
 800a3d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a3d6:	d134      	bne.n	800a442 <_strtol_l.isra.0+0x9a>
 800a3d8:	f89e 4000 	ldrb.w	r4, [lr]
 800a3dc:	f04f 0801 	mov.w	r8, #1
 800a3e0:	f106 0e02 	add.w	lr, r6, #2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d05c      	beq.n	800a4a2 <_strtol_l.isra.0+0xfa>
 800a3e8:	2b10      	cmp	r3, #16
 800a3ea:	d10c      	bne.n	800a406 <_strtol_l.isra.0+0x5e>
 800a3ec:	2c30      	cmp	r4, #48	; 0x30
 800a3ee:	d10a      	bne.n	800a406 <_strtol_l.isra.0+0x5e>
 800a3f0:	f89e 4000 	ldrb.w	r4, [lr]
 800a3f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a3f8:	2c58      	cmp	r4, #88	; 0x58
 800a3fa:	d14d      	bne.n	800a498 <_strtol_l.isra.0+0xf0>
 800a3fc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a400:	2310      	movs	r3, #16
 800a402:	f10e 0e02 	add.w	lr, lr, #2
 800a406:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a40a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a40e:	2600      	movs	r6, #0
 800a410:	fbbc f9f3 	udiv	r9, ip, r3
 800a414:	4635      	mov	r5, r6
 800a416:	fb03 ca19 	mls	sl, r3, r9, ip
 800a41a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a41e:	2f09      	cmp	r7, #9
 800a420:	d818      	bhi.n	800a454 <_strtol_l.isra.0+0xac>
 800a422:	463c      	mov	r4, r7
 800a424:	42a3      	cmp	r3, r4
 800a426:	dd24      	ble.n	800a472 <_strtol_l.isra.0+0xca>
 800a428:	2e00      	cmp	r6, #0
 800a42a:	db1f      	blt.n	800a46c <_strtol_l.isra.0+0xc4>
 800a42c:	45a9      	cmp	r9, r5
 800a42e:	d31d      	bcc.n	800a46c <_strtol_l.isra.0+0xc4>
 800a430:	d101      	bne.n	800a436 <_strtol_l.isra.0+0x8e>
 800a432:	45a2      	cmp	sl, r4
 800a434:	db1a      	blt.n	800a46c <_strtol_l.isra.0+0xc4>
 800a436:	fb05 4503 	mla	r5, r5, r3, r4
 800a43a:	2601      	movs	r6, #1
 800a43c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a440:	e7eb      	b.n	800a41a <_strtol_l.isra.0+0x72>
 800a442:	2c2b      	cmp	r4, #43	; 0x2b
 800a444:	bf08      	it	eq
 800a446:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a44a:	46a8      	mov	r8, r5
 800a44c:	bf08      	it	eq
 800a44e:	f106 0e02 	addeq.w	lr, r6, #2
 800a452:	e7c7      	b.n	800a3e4 <_strtol_l.isra.0+0x3c>
 800a454:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a458:	2f19      	cmp	r7, #25
 800a45a:	d801      	bhi.n	800a460 <_strtol_l.isra.0+0xb8>
 800a45c:	3c37      	subs	r4, #55	; 0x37
 800a45e:	e7e1      	b.n	800a424 <_strtol_l.isra.0+0x7c>
 800a460:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a464:	2f19      	cmp	r7, #25
 800a466:	d804      	bhi.n	800a472 <_strtol_l.isra.0+0xca>
 800a468:	3c57      	subs	r4, #87	; 0x57
 800a46a:	e7db      	b.n	800a424 <_strtol_l.isra.0+0x7c>
 800a46c:	f04f 36ff 	mov.w	r6, #4294967295
 800a470:	e7e4      	b.n	800a43c <_strtol_l.isra.0+0x94>
 800a472:	2e00      	cmp	r6, #0
 800a474:	da05      	bge.n	800a482 <_strtol_l.isra.0+0xda>
 800a476:	2322      	movs	r3, #34	; 0x22
 800a478:	6003      	str	r3, [r0, #0]
 800a47a:	4665      	mov	r5, ip
 800a47c:	b942      	cbnz	r2, 800a490 <_strtol_l.isra.0+0xe8>
 800a47e:	4628      	mov	r0, r5
 800a480:	e79d      	b.n	800a3be <_strtol_l.isra.0+0x16>
 800a482:	f1b8 0f00 	cmp.w	r8, #0
 800a486:	d000      	beq.n	800a48a <_strtol_l.isra.0+0xe2>
 800a488:	426d      	negs	r5, r5
 800a48a:	2a00      	cmp	r2, #0
 800a48c:	d0f7      	beq.n	800a47e <_strtol_l.isra.0+0xd6>
 800a48e:	b10e      	cbz	r6, 800a494 <_strtol_l.isra.0+0xec>
 800a490:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a494:	6011      	str	r1, [r2, #0]
 800a496:	e7f2      	b.n	800a47e <_strtol_l.isra.0+0xd6>
 800a498:	2430      	movs	r4, #48	; 0x30
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1b3      	bne.n	800a406 <_strtol_l.isra.0+0x5e>
 800a49e:	2308      	movs	r3, #8
 800a4a0:	e7b1      	b.n	800a406 <_strtol_l.isra.0+0x5e>
 800a4a2:	2c30      	cmp	r4, #48	; 0x30
 800a4a4:	d0a4      	beq.n	800a3f0 <_strtol_l.isra.0+0x48>
 800a4a6:	230a      	movs	r3, #10
 800a4a8:	e7ad      	b.n	800a406 <_strtol_l.isra.0+0x5e>
 800a4aa:	bf00      	nop
 800a4ac:	0800d599 	.word	0x0800d599

0800a4b0 <_strtol_r>:
 800a4b0:	f7ff bf7a 	b.w	800a3a8 <_strtol_l.isra.0>

0800a4b4 <__swbuf_r>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	460e      	mov	r6, r1
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	b118      	cbz	r0, 800a4c6 <__swbuf_r+0x12>
 800a4be:	6983      	ldr	r3, [r0, #24]
 800a4c0:	b90b      	cbnz	r3, 800a4c6 <__swbuf_r+0x12>
 800a4c2:	f001 f84b 	bl	800b55c <__sinit>
 800a4c6:	4b21      	ldr	r3, [pc, #132]	; (800a54c <__swbuf_r+0x98>)
 800a4c8:	429c      	cmp	r4, r3
 800a4ca:	d12b      	bne.n	800a524 <__swbuf_r+0x70>
 800a4cc:	686c      	ldr	r4, [r5, #4]
 800a4ce:	69a3      	ldr	r3, [r4, #24]
 800a4d0:	60a3      	str	r3, [r4, #8]
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	071a      	lsls	r2, r3, #28
 800a4d6:	d52f      	bpl.n	800a538 <__swbuf_r+0x84>
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	b36b      	cbz	r3, 800a538 <__swbuf_r+0x84>
 800a4dc:	6923      	ldr	r3, [r4, #16]
 800a4de:	6820      	ldr	r0, [r4, #0]
 800a4e0:	1ac0      	subs	r0, r0, r3
 800a4e2:	6963      	ldr	r3, [r4, #20]
 800a4e4:	b2f6      	uxtb	r6, r6
 800a4e6:	4283      	cmp	r3, r0
 800a4e8:	4637      	mov	r7, r6
 800a4ea:	dc04      	bgt.n	800a4f6 <__swbuf_r+0x42>
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f000 ffa0 	bl	800b434 <_fflush_r>
 800a4f4:	bb30      	cbnz	r0, 800a544 <__swbuf_r+0x90>
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	60a3      	str	r3, [r4, #8]
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	6022      	str	r2, [r4, #0]
 800a502:	701e      	strb	r6, [r3, #0]
 800a504:	6963      	ldr	r3, [r4, #20]
 800a506:	3001      	adds	r0, #1
 800a508:	4283      	cmp	r3, r0
 800a50a:	d004      	beq.n	800a516 <__swbuf_r+0x62>
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	07db      	lsls	r3, r3, #31
 800a510:	d506      	bpl.n	800a520 <__swbuf_r+0x6c>
 800a512:	2e0a      	cmp	r6, #10
 800a514:	d104      	bne.n	800a520 <__swbuf_r+0x6c>
 800a516:	4621      	mov	r1, r4
 800a518:	4628      	mov	r0, r5
 800a51a:	f000 ff8b 	bl	800b434 <_fflush_r>
 800a51e:	b988      	cbnz	r0, 800a544 <__swbuf_r+0x90>
 800a520:	4638      	mov	r0, r7
 800a522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a524:	4b0a      	ldr	r3, [pc, #40]	; (800a550 <__swbuf_r+0x9c>)
 800a526:	429c      	cmp	r4, r3
 800a528:	d101      	bne.n	800a52e <__swbuf_r+0x7a>
 800a52a:	68ac      	ldr	r4, [r5, #8]
 800a52c:	e7cf      	b.n	800a4ce <__swbuf_r+0x1a>
 800a52e:	4b09      	ldr	r3, [pc, #36]	; (800a554 <__swbuf_r+0xa0>)
 800a530:	429c      	cmp	r4, r3
 800a532:	bf08      	it	eq
 800a534:	68ec      	ldreq	r4, [r5, #12]
 800a536:	e7ca      	b.n	800a4ce <__swbuf_r+0x1a>
 800a538:	4621      	mov	r1, r4
 800a53a:	4628      	mov	r0, r5
 800a53c:	f000 f80c 	bl	800a558 <__swsetup_r>
 800a540:	2800      	cmp	r0, #0
 800a542:	d0cb      	beq.n	800a4dc <__swbuf_r+0x28>
 800a544:	f04f 37ff 	mov.w	r7, #4294967295
 800a548:	e7ea      	b.n	800a520 <__swbuf_r+0x6c>
 800a54a:	bf00      	nop
 800a54c:	0800d750 	.word	0x0800d750
 800a550:	0800d770 	.word	0x0800d770
 800a554:	0800d730 	.word	0x0800d730

0800a558 <__swsetup_r>:
 800a558:	4b32      	ldr	r3, [pc, #200]	; (800a624 <__swsetup_r+0xcc>)
 800a55a:	b570      	push	{r4, r5, r6, lr}
 800a55c:	681d      	ldr	r5, [r3, #0]
 800a55e:	4606      	mov	r6, r0
 800a560:	460c      	mov	r4, r1
 800a562:	b125      	cbz	r5, 800a56e <__swsetup_r+0x16>
 800a564:	69ab      	ldr	r3, [r5, #24]
 800a566:	b913      	cbnz	r3, 800a56e <__swsetup_r+0x16>
 800a568:	4628      	mov	r0, r5
 800a56a:	f000 fff7 	bl	800b55c <__sinit>
 800a56e:	4b2e      	ldr	r3, [pc, #184]	; (800a628 <__swsetup_r+0xd0>)
 800a570:	429c      	cmp	r4, r3
 800a572:	d10f      	bne.n	800a594 <__swsetup_r+0x3c>
 800a574:	686c      	ldr	r4, [r5, #4]
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a57c:	0719      	lsls	r1, r3, #28
 800a57e:	d42c      	bmi.n	800a5da <__swsetup_r+0x82>
 800a580:	06dd      	lsls	r5, r3, #27
 800a582:	d411      	bmi.n	800a5a8 <__swsetup_r+0x50>
 800a584:	2309      	movs	r3, #9
 800a586:	6033      	str	r3, [r6, #0]
 800a588:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	f04f 30ff 	mov.w	r0, #4294967295
 800a592:	e03e      	b.n	800a612 <__swsetup_r+0xba>
 800a594:	4b25      	ldr	r3, [pc, #148]	; (800a62c <__swsetup_r+0xd4>)
 800a596:	429c      	cmp	r4, r3
 800a598:	d101      	bne.n	800a59e <__swsetup_r+0x46>
 800a59a:	68ac      	ldr	r4, [r5, #8]
 800a59c:	e7eb      	b.n	800a576 <__swsetup_r+0x1e>
 800a59e:	4b24      	ldr	r3, [pc, #144]	; (800a630 <__swsetup_r+0xd8>)
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	bf08      	it	eq
 800a5a4:	68ec      	ldreq	r4, [r5, #12]
 800a5a6:	e7e6      	b.n	800a576 <__swsetup_r+0x1e>
 800a5a8:	0758      	lsls	r0, r3, #29
 800a5aa:	d512      	bpl.n	800a5d2 <__swsetup_r+0x7a>
 800a5ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5ae:	b141      	cbz	r1, 800a5c2 <__swsetup_r+0x6a>
 800a5b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5b4:	4299      	cmp	r1, r3
 800a5b6:	d002      	beq.n	800a5be <__swsetup_r+0x66>
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f002 f92b 	bl	800c814 <_free_r>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5c8:	81a3      	strh	r3, [r4, #12]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6063      	str	r3, [r4, #4]
 800a5ce:	6923      	ldr	r3, [r4, #16]
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	f043 0308 	orr.w	r3, r3, #8
 800a5d8:	81a3      	strh	r3, [r4, #12]
 800a5da:	6923      	ldr	r3, [r4, #16]
 800a5dc:	b94b      	cbnz	r3, 800a5f2 <__swsetup_r+0x9a>
 800a5de:	89a3      	ldrh	r3, [r4, #12]
 800a5e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5e8:	d003      	beq.n	800a5f2 <__swsetup_r+0x9a>
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f001 fbed 	bl	800bdcc <__smakebuf_r>
 800a5f2:	89a0      	ldrh	r0, [r4, #12]
 800a5f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5f8:	f010 0301 	ands.w	r3, r0, #1
 800a5fc:	d00a      	beq.n	800a614 <__swsetup_r+0xbc>
 800a5fe:	2300      	movs	r3, #0
 800a600:	60a3      	str	r3, [r4, #8]
 800a602:	6963      	ldr	r3, [r4, #20]
 800a604:	425b      	negs	r3, r3
 800a606:	61a3      	str	r3, [r4, #24]
 800a608:	6923      	ldr	r3, [r4, #16]
 800a60a:	b943      	cbnz	r3, 800a61e <__swsetup_r+0xc6>
 800a60c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a610:	d1ba      	bne.n	800a588 <__swsetup_r+0x30>
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	0781      	lsls	r1, r0, #30
 800a616:	bf58      	it	pl
 800a618:	6963      	ldrpl	r3, [r4, #20]
 800a61a:	60a3      	str	r3, [r4, #8]
 800a61c:	e7f4      	b.n	800a608 <__swsetup_r+0xb0>
 800a61e:	2000      	movs	r0, #0
 800a620:	e7f7      	b.n	800a612 <__swsetup_r+0xba>
 800a622:	bf00      	nop
 800a624:	2000000c 	.word	0x2000000c
 800a628:	0800d750 	.word	0x0800d750
 800a62c:	0800d770 	.word	0x0800d770
 800a630:	0800d730 	.word	0x0800d730

0800a634 <quorem>:
 800a634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	6903      	ldr	r3, [r0, #16]
 800a63a:	690c      	ldr	r4, [r1, #16]
 800a63c:	42a3      	cmp	r3, r4
 800a63e:	4607      	mov	r7, r0
 800a640:	f2c0 8081 	blt.w	800a746 <quorem+0x112>
 800a644:	3c01      	subs	r4, #1
 800a646:	f101 0814 	add.w	r8, r1, #20
 800a64a:	f100 0514 	add.w	r5, r0, #20
 800a64e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a65c:	3301      	adds	r3, #1
 800a65e:	429a      	cmp	r2, r3
 800a660:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a664:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a668:	fbb2 f6f3 	udiv	r6, r2, r3
 800a66c:	d331      	bcc.n	800a6d2 <quorem+0x9e>
 800a66e:	f04f 0e00 	mov.w	lr, #0
 800a672:	4640      	mov	r0, r8
 800a674:	46ac      	mov	ip, r5
 800a676:	46f2      	mov	sl, lr
 800a678:	f850 2b04 	ldr.w	r2, [r0], #4
 800a67c:	b293      	uxth	r3, r2
 800a67e:	fb06 e303 	mla	r3, r6, r3, lr
 800a682:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a686:	b29b      	uxth	r3, r3
 800a688:	ebaa 0303 	sub.w	r3, sl, r3
 800a68c:	0c12      	lsrs	r2, r2, #16
 800a68e:	f8dc a000 	ldr.w	sl, [ip]
 800a692:	fb06 e202 	mla	r2, r6, r2, lr
 800a696:	fa13 f38a 	uxtah	r3, r3, sl
 800a69a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a69e:	fa1f fa82 	uxth.w	sl, r2
 800a6a2:	f8dc 2000 	ldr.w	r2, [ip]
 800a6a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a6aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6b4:	4581      	cmp	r9, r0
 800a6b6:	f84c 3b04 	str.w	r3, [ip], #4
 800a6ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6be:	d2db      	bcs.n	800a678 <quorem+0x44>
 800a6c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6c4:	b92b      	cbnz	r3, 800a6d2 <quorem+0x9e>
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	3b04      	subs	r3, #4
 800a6ca:	429d      	cmp	r5, r3
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	d32e      	bcc.n	800a72e <quorem+0xfa>
 800a6d0:	613c      	str	r4, [r7, #16]
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	f001 fe9c 	bl	800c410 <__mcmp>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	db24      	blt.n	800a726 <quorem+0xf2>
 800a6dc:	3601      	adds	r6, #1
 800a6de:	4628      	mov	r0, r5
 800a6e0:	f04f 0c00 	mov.w	ip, #0
 800a6e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6e8:	f8d0 e000 	ldr.w	lr, [r0]
 800a6ec:	b293      	uxth	r3, r2
 800a6ee:	ebac 0303 	sub.w	r3, ip, r3
 800a6f2:	0c12      	lsrs	r2, r2, #16
 800a6f4:	fa13 f38e 	uxtah	r3, r3, lr
 800a6f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a700:	b29b      	uxth	r3, r3
 800a702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a706:	45c1      	cmp	r9, r8
 800a708:	f840 3b04 	str.w	r3, [r0], #4
 800a70c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a710:	d2e8      	bcs.n	800a6e4 <quorem+0xb0>
 800a712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a71a:	b922      	cbnz	r2, 800a726 <quorem+0xf2>
 800a71c:	3b04      	subs	r3, #4
 800a71e:	429d      	cmp	r5, r3
 800a720:	461a      	mov	r2, r3
 800a722:	d30a      	bcc.n	800a73a <quorem+0x106>
 800a724:	613c      	str	r4, [r7, #16]
 800a726:	4630      	mov	r0, r6
 800a728:	b003      	add	sp, #12
 800a72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72e:	6812      	ldr	r2, [r2, #0]
 800a730:	3b04      	subs	r3, #4
 800a732:	2a00      	cmp	r2, #0
 800a734:	d1cc      	bne.n	800a6d0 <quorem+0x9c>
 800a736:	3c01      	subs	r4, #1
 800a738:	e7c7      	b.n	800a6ca <quorem+0x96>
 800a73a:	6812      	ldr	r2, [r2, #0]
 800a73c:	3b04      	subs	r3, #4
 800a73e:	2a00      	cmp	r2, #0
 800a740:	d1f0      	bne.n	800a724 <quorem+0xf0>
 800a742:	3c01      	subs	r4, #1
 800a744:	e7eb      	b.n	800a71e <quorem+0xea>
 800a746:	2000      	movs	r0, #0
 800a748:	e7ee      	b.n	800a728 <quorem+0xf4>
 800a74a:	0000      	movs	r0, r0
 800a74c:	0000      	movs	r0, r0
	...

0800a750 <_dtoa_r>:
 800a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	ed2d 8b02 	vpush	{d8}
 800a758:	ec57 6b10 	vmov	r6, r7, d0
 800a75c:	b095      	sub	sp, #84	; 0x54
 800a75e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a760:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a764:	9105      	str	r1, [sp, #20]
 800a766:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a76a:	4604      	mov	r4, r0
 800a76c:	9209      	str	r2, [sp, #36]	; 0x24
 800a76e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a770:	b975      	cbnz	r5, 800a790 <_dtoa_r+0x40>
 800a772:	2010      	movs	r0, #16
 800a774:	f001 fb6a 	bl	800be4c <malloc>
 800a778:	4602      	mov	r2, r0
 800a77a:	6260      	str	r0, [r4, #36]	; 0x24
 800a77c:	b920      	cbnz	r0, 800a788 <_dtoa_r+0x38>
 800a77e:	4bb2      	ldr	r3, [pc, #712]	; (800aa48 <_dtoa_r+0x2f8>)
 800a780:	21ea      	movs	r1, #234	; 0xea
 800a782:	48b2      	ldr	r0, [pc, #712]	; (800aa4c <_dtoa_r+0x2fc>)
 800a784:	f002 fc34 	bl	800cff0 <__assert_func>
 800a788:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a78c:	6005      	str	r5, [r0, #0]
 800a78e:	60c5      	str	r5, [r0, #12]
 800a790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a792:	6819      	ldr	r1, [r3, #0]
 800a794:	b151      	cbz	r1, 800a7ac <_dtoa_r+0x5c>
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	604a      	str	r2, [r1, #4]
 800a79a:	2301      	movs	r3, #1
 800a79c:	4093      	lsls	r3, r2
 800a79e:	608b      	str	r3, [r1, #8]
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f001 fbad 	bl	800bf00 <_Bfree>
 800a7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	1e3b      	subs	r3, r7, #0
 800a7ae:	bfb9      	ittee	lt
 800a7b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7b4:	9303      	strlt	r3, [sp, #12]
 800a7b6:	2300      	movge	r3, #0
 800a7b8:	f8c8 3000 	strge.w	r3, [r8]
 800a7bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a7c0:	4ba3      	ldr	r3, [pc, #652]	; (800aa50 <_dtoa_r+0x300>)
 800a7c2:	bfbc      	itt	lt
 800a7c4:	2201      	movlt	r2, #1
 800a7c6:	f8c8 2000 	strlt.w	r2, [r8]
 800a7ca:	ea33 0309 	bics.w	r3, r3, r9
 800a7ce:	d11b      	bne.n	800a808 <_dtoa_r+0xb8>
 800a7d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7dc:	4333      	orrs	r3, r6
 800a7de:	f000 857a 	beq.w	800b2d6 <_dtoa_r+0xb86>
 800a7e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7e4:	b963      	cbnz	r3, 800a800 <_dtoa_r+0xb0>
 800a7e6:	4b9b      	ldr	r3, [pc, #620]	; (800aa54 <_dtoa_r+0x304>)
 800a7e8:	e024      	b.n	800a834 <_dtoa_r+0xe4>
 800a7ea:	4b9b      	ldr	r3, [pc, #620]	; (800aa58 <_dtoa_r+0x308>)
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	3308      	adds	r3, #8
 800a7f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	9800      	ldr	r0, [sp, #0]
 800a7f6:	b015      	add	sp, #84	; 0x54
 800a7f8:	ecbd 8b02 	vpop	{d8}
 800a7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a800:	4b94      	ldr	r3, [pc, #592]	; (800aa54 <_dtoa_r+0x304>)
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	3303      	adds	r3, #3
 800a806:	e7f3      	b.n	800a7f0 <_dtoa_r+0xa0>
 800a808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a80c:	2200      	movs	r2, #0
 800a80e:	ec51 0b17 	vmov	r0, r1, d7
 800a812:	2300      	movs	r3, #0
 800a814:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a818:	f7f6 f956 	bl	8000ac8 <__aeabi_dcmpeq>
 800a81c:	4680      	mov	r8, r0
 800a81e:	b158      	cbz	r0, 800a838 <_dtoa_r+0xe8>
 800a820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a822:	2301      	movs	r3, #1
 800a824:	6013      	str	r3, [r2, #0]
 800a826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f000 8551 	beq.w	800b2d0 <_dtoa_r+0xb80>
 800a82e:	488b      	ldr	r0, [pc, #556]	; (800aa5c <_dtoa_r+0x30c>)
 800a830:	6018      	str	r0, [r3, #0]
 800a832:	1e43      	subs	r3, r0, #1
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	e7dd      	b.n	800a7f4 <_dtoa_r+0xa4>
 800a838:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a83c:	aa12      	add	r2, sp, #72	; 0x48
 800a83e:	a913      	add	r1, sp, #76	; 0x4c
 800a840:	4620      	mov	r0, r4
 800a842:	f001 ff05 	bl	800c650 <__d2b>
 800a846:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a84a:	4683      	mov	fp, r0
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	d07c      	beq.n	800a94a <_dtoa_r+0x1fa>
 800a850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a852:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a85a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a85e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a862:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a86a:	4b7d      	ldr	r3, [pc, #500]	; (800aa60 <_dtoa_r+0x310>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	4630      	mov	r0, r6
 800a870:	4639      	mov	r1, r7
 800a872:	f7f5 fd09 	bl	8000288 <__aeabi_dsub>
 800a876:	a36e      	add	r3, pc, #440	; (adr r3, 800aa30 <_dtoa_r+0x2e0>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f7f5 febc 	bl	80005f8 <__aeabi_dmul>
 800a880:	a36d      	add	r3, pc, #436	; (adr r3, 800aa38 <_dtoa_r+0x2e8>)
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	f7f5 fd01 	bl	800028c <__adddf3>
 800a88a:	4606      	mov	r6, r0
 800a88c:	4628      	mov	r0, r5
 800a88e:	460f      	mov	r7, r1
 800a890:	f7f5 fe48 	bl	8000524 <__aeabi_i2d>
 800a894:	a36a      	add	r3, pc, #424	; (adr r3, 800aa40 <_dtoa_r+0x2f0>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f5 fead 	bl	80005f8 <__aeabi_dmul>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	4639      	mov	r1, r7
 800a8a6:	f7f5 fcf1 	bl	800028c <__adddf3>
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	460f      	mov	r7, r1
 800a8ae:	f7f6 f953 	bl	8000b58 <__aeabi_d2iz>
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	4682      	mov	sl, r0
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	f7f6 f90e 	bl	8000adc <__aeabi_dcmplt>
 800a8c0:	b148      	cbz	r0, 800a8d6 <_dtoa_r+0x186>
 800a8c2:	4650      	mov	r0, sl
 800a8c4:	f7f5 fe2e 	bl	8000524 <__aeabi_i2d>
 800a8c8:	4632      	mov	r2, r6
 800a8ca:	463b      	mov	r3, r7
 800a8cc:	f7f6 f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8d0:	b908      	cbnz	r0, 800a8d6 <_dtoa_r+0x186>
 800a8d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8d6:	f1ba 0f16 	cmp.w	sl, #22
 800a8da:	d854      	bhi.n	800a986 <_dtoa_r+0x236>
 800a8dc:	4b61      	ldr	r3, [pc, #388]	; (800aa64 <_dtoa_r+0x314>)
 800a8de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8ea:	f7f6 f8f7 	bl	8000adc <__aeabi_dcmplt>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d04b      	beq.n	800a98a <_dtoa_r+0x23a>
 800a8f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	930e      	str	r3, [sp, #56]	; 0x38
 800a8fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8fc:	1b5d      	subs	r5, r3, r5
 800a8fe:	1e6b      	subs	r3, r5, #1
 800a900:	9304      	str	r3, [sp, #16]
 800a902:	bf43      	ittte	mi
 800a904:	2300      	movmi	r3, #0
 800a906:	f1c5 0801 	rsbmi	r8, r5, #1
 800a90a:	9304      	strmi	r3, [sp, #16]
 800a90c:	f04f 0800 	movpl.w	r8, #0
 800a910:	f1ba 0f00 	cmp.w	sl, #0
 800a914:	db3b      	blt.n	800a98e <_dtoa_r+0x23e>
 800a916:	9b04      	ldr	r3, [sp, #16]
 800a918:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a91c:	4453      	add	r3, sl
 800a91e:	9304      	str	r3, [sp, #16]
 800a920:	2300      	movs	r3, #0
 800a922:	9306      	str	r3, [sp, #24]
 800a924:	9b05      	ldr	r3, [sp, #20]
 800a926:	2b09      	cmp	r3, #9
 800a928:	d869      	bhi.n	800a9fe <_dtoa_r+0x2ae>
 800a92a:	2b05      	cmp	r3, #5
 800a92c:	bfc4      	itt	gt
 800a92e:	3b04      	subgt	r3, #4
 800a930:	9305      	strgt	r3, [sp, #20]
 800a932:	9b05      	ldr	r3, [sp, #20]
 800a934:	f1a3 0302 	sub.w	r3, r3, #2
 800a938:	bfcc      	ite	gt
 800a93a:	2500      	movgt	r5, #0
 800a93c:	2501      	movle	r5, #1
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d869      	bhi.n	800aa16 <_dtoa_r+0x2c6>
 800a942:	e8df f003 	tbb	[pc, r3]
 800a946:	4e2c      	.short	0x4e2c
 800a948:	5a4c      	.short	0x5a4c
 800a94a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a94e:	441d      	add	r5, r3
 800a950:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a954:	2b20      	cmp	r3, #32
 800a956:	bfc1      	itttt	gt
 800a958:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a95c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a960:	fa09 f303 	lslgt.w	r3, r9, r3
 800a964:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a968:	bfda      	itte	le
 800a96a:	f1c3 0320 	rsble	r3, r3, #32
 800a96e:	fa06 f003 	lslle.w	r0, r6, r3
 800a972:	4318      	orrgt	r0, r3
 800a974:	f7f5 fdc6 	bl	8000504 <__aeabi_ui2d>
 800a978:	2301      	movs	r3, #1
 800a97a:	4606      	mov	r6, r0
 800a97c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a980:	3d01      	subs	r5, #1
 800a982:	9310      	str	r3, [sp, #64]	; 0x40
 800a984:	e771      	b.n	800a86a <_dtoa_r+0x11a>
 800a986:	2301      	movs	r3, #1
 800a988:	e7b6      	b.n	800a8f8 <_dtoa_r+0x1a8>
 800a98a:	900e      	str	r0, [sp, #56]	; 0x38
 800a98c:	e7b5      	b.n	800a8fa <_dtoa_r+0x1aa>
 800a98e:	f1ca 0300 	rsb	r3, sl, #0
 800a992:	9306      	str	r3, [sp, #24]
 800a994:	2300      	movs	r3, #0
 800a996:	eba8 080a 	sub.w	r8, r8, sl
 800a99a:	930d      	str	r3, [sp, #52]	; 0x34
 800a99c:	e7c2      	b.n	800a924 <_dtoa_r+0x1d4>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9308      	str	r3, [sp, #32]
 800a9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dc39      	bgt.n	800aa1c <_dtoa_r+0x2cc>
 800a9a8:	f04f 0901 	mov.w	r9, #1
 800a9ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9b0:	464b      	mov	r3, r9
 800a9b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a9b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	6042      	str	r2, [r0, #4]
 800a9bc:	2204      	movs	r2, #4
 800a9be:	f102 0614 	add.w	r6, r2, #20
 800a9c2:	429e      	cmp	r6, r3
 800a9c4:	6841      	ldr	r1, [r0, #4]
 800a9c6:	d92f      	bls.n	800aa28 <_dtoa_r+0x2d8>
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f001 fa59 	bl	800be80 <_Balloc>
 800a9ce:	9000      	str	r0, [sp, #0]
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d14b      	bne.n	800aa6c <_dtoa_r+0x31c>
 800a9d4:	4b24      	ldr	r3, [pc, #144]	; (800aa68 <_dtoa_r+0x318>)
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a9dc:	e6d1      	b.n	800a782 <_dtoa_r+0x32>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e7de      	b.n	800a9a0 <_dtoa_r+0x250>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	9308      	str	r3, [sp, #32]
 800a9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e8:	eb0a 0903 	add.w	r9, sl, r3
 800a9ec:	f109 0301 	add.w	r3, r9, #1
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	9301      	str	r3, [sp, #4]
 800a9f4:	bfb8      	it	lt
 800a9f6:	2301      	movlt	r3, #1
 800a9f8:	e7dd      	b.n	800a9b6 <_dtoa_r+0x266>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e7f2      	b.n	800a9e4 <_dtoa_r+0x294>
 800a9fe:	2501      	movs	r5, #1
 800aa00:	2300      	movs	r3, #0
 800aa02:	9305      	str	r3, [sp, #20]
 800aa04:	9508      	str	r5, [sp, #32]
 800aa06:	f04f 39ff 	mov.w	r9, #4294967295
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa10:	2312      	movs	r3, #18
 800aa12:	9209      	str	r2, [sp, #36]	; 0x24
 800aa14:	e7cf      	b.n	800a9b6 <_dtoa_r+0x266>
 800aa16:	2301      	movs	r3, #1
 800aa18:	9308      	str	r3, [sp, #32]
 800aa1a:	e7f4      	b.n	800aa06 <_dtoa_r+0x2b6>
 800aa1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800aa20:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa24:	464b      	mov	r3, r9
 800aa26:	e7c6      	b.n	800a9b6 <_dtoa_r+0x266>
 800aa28:	3101      	adds	r1, #1
 800aa2a:	6041      	str	r1, [r0, #4]
 800aa2c:	0052      	lsls	r2, r2, #1
 800aa2e:	e7c6      	b.n	800a9be <_dtoa_r+0x26e>
 800aa30:	636f4361 	.word	0x636f4361
 800aa34:	3fd287a7 	.word	0x3fd287a7
 800aa38:	8b60c8b3 	.word	0x8b60c8b3
 800aa3c:	3fc68a28 	.word	0x3fc68a28
 800aa40:	509f79fb 	.word	0x509f79fb
 800aa44:	3fd34413 	.word	0x3fd34413
 800aa48:	0800d6a6 	.word	0x0800d6a6
 800aa4c:	0800d6bd 	.word	0x0800d6bd
 800aa50:	7ff00000 	.word	0x7ff00000
 800aa54:	0800d6a2 	.word	0x0800d6a2
 800aa58:	0800d699 	.word	0x0800d699
 800aa5c:	0800d519 	.word	0x0800d519
 800aa60:	3ff80000 	.word	0x3ff80000
 800aa64:	0800d898 	.word	0x0800d898
 800aa68:	0800d71c 	.word	0x0800d71c
 800aa6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa6e:	9a00      	ldr	r2, [sp, #0]
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	9b01      	ldr	r3, [sp, #4]
 800aa74:	2b0e      	cmp	r3, #14
 800aa76:	f200 80ad 	bhi.w	800abd4 <_dtoa_r+0x484>
 800aa7a:	2d00      	cmp	r5, #0
 800aa7c:	f000 80aa 	beq.w	800abd4 <_dtoa_r+0x484>
 800aa80:	f1ba 0f00 	cmp.w	sl, #0
 800aa84:	dd36      	ble.n	800aaf4 <_dtoa_r+0x3a4>
 800aa86:	4ac3      	ldr	r2, [pc, #780]	; (800ad94 <_dtoa_r+0x644>)
 800aa88:	f00a 030f 	and.w	r3, sl, #15
 800aa8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa90:	ed93 7b00 	vldr	d7, [r3]
 800aa94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aa98:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aa9c:	eeb0 8a47 	vmov.f32	s16, s14
 800aaa0:	eef0 8a67 	vmov.f32	s17, s15
 800aaa4:	d016      	beq.n	800aad4 <_dtoa_r+0x384>
 800aaa6:	4bbc      	ldr	r3, [pc, #752]	; (800ad98 <_dtoa_r+0x648>)
 800aaa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aaac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aab0:	f7f5 fecc 	bl	800084c <__aeabi_ddiv>
 800aab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab8:	f007 070f 	and.w	r7, r7, #15
 800aabc:	2503      	movs	r5, #3
 800aabe:	4eb6      	ldr	r6, [pc, #728]	; (800ad98 <_dtoa_r+0x648>)
 800aac0:	b957      	cbnz	r7, 800aad8 <_dtoa_r+0x388>
 800aac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aac6:	ec53 2b18 	vmov	r2, r3, d8
 800aaca:	f7f5 febf 	bl	800084c <__aeabi_ddiv>
 800aace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aad2:	e029      	b.n	800ab28 <_dtoa_r+0x3d8>
 800aad4:	2502      	movs	r5, #2
 800aad6:	e7f2      	b.n	800aabe <_dtoa_r+0x36e>
 800aad8:	07f9      	lsls	r1, r7, #31
 800aada:	d508      	bpl.n	800aaee <_dtoa_r+0x39e>
 800aadc:	ec51 0b18 	vmov	r0, r1, d8
 800aae0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aae4:	f7f5 fd88 	bl	80005f8 <__aeabi_dmul>
 800aae8:	ec41 0b18 	vmov	d8, r0, r1
 800aaec:	3501      	adds	r5, #1
 800aaee:	107f      	asrs	r7, r7, #1
 800aaf0:	3608      	adds	r6, #8
 800aaf2:	e7e5      	b.n	800aac0 <_dtoa_r+0x370>
 800aaf4:	f000 80a6 	beq.w	800ac44 <_dtoa_r+0x4f4>
 800aaf8:	f1ca 0600 	rsb	r6, sl, #0
 800aafc:	4ba5      	ldr	r3, [pc, #660]	; (800ad94 <_dtoa_r+0x644>)
 800aafe:	4fa6      	ldr	r7, [pc, #664]	; (800ad98 <_dtoa_r+0x648>)
 800ab00:	f006 020f 	and.w	r2, r6, #15
 800ab04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab10:	f7f5 fd72 	bl	80005f8 <__aeabi_dmul>
 800ab14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab18:	1136      	asrs	r6, r6, #4
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	2502      	movs	r5, #2
 800ab1e:	2e00      	cmp	r6, #0
 800ab20:	f040 8085 	bne.w	800ac2e <_dtoa_r+0x4de>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1d2      	bne.n	800aace <_dtoa_r+0x37e>
 800ab28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f000 808c 	beq.w	800ac48 <_dtoa_r+0x4f8>
 800ab30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab34:	4b99      	ldr	r3, [pc, #612]	; (800ad9c <_dtoa_r+0x64c>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	4630      	mov	r0, r6
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	f7f5 ffce 	bl	8000adc <__aeabi_dcmplt>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	f000 8081 	beq.w	800ac48 <_dtoa_r+0x4f8>
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d07d      	beq.n	800ac48 <_dtoa_r+0x4f8>
 800ab4c:	f1b9 0f00 	cmp.w	r9, #0
 800ab50:	dd3c      	ble.n	800abcc <_dtoa_r+0x47c>
 800ab52:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ab56:	9307      	str	r3, [sp, #28]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	4b91      	ldr	r3, [pc, #580]	; (800ada0 <_dtoa_r+0x650>)
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	4639      	mov	r1, r7
 800ab60:	f7f5 fd4a 	bl	80005f8 <__aeabi_dmul>
 800ab64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab68:	3501      	adds	r5, #1
 800ab6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ab6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab72:	4628      	mov	r0, r5
 800ab74:	f7f5 fcd6 	bl	8000524 <__aeabi_i2d>
 800ab78:	4632      	mov	r2, r6
 800ab7a:	463b      	mov	r3, r7
 800ab7c:	f7f5 fd3c 	bl	80005f8 <__aeabi_dmul>
 800ab80:	4b88      	ldr	r3, [pc, #544]	; (800ada4 <_dtoa_r+0x654>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	f7f5 fb82 	bl	800028c <__adddf3>
 800ab88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab90:	9303      	str	r3, [sp, #12]
 800ab92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d15c      	bne.n	800ac52 <_dtoa_r+0x502>
 800ab98:	4b83      	ldr	r3, [pc, #524]	; (800ada8 <_dtoa_r+0x658>)
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	4639      	mov	r1, r7
 800aba0:	f7f5 fb72 	bl	8000288 <__aeabi_dsub>
 800aba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aba8:	4606      	mov	r6, r0
 800abaa:	460f      	mov	r7, r1
 800abac:	f7f5 ffb4 	bl	8000b18 <__aeabi_dcmpgt>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	f040 8296 	bne.w	800b0e2 <_dtoa_r+0x992>
 800abb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800abba:	4630      	mov	r0, r6
 800abbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abc0:	4639      	mov	r1, r7
 800abc2:	f7f5 ff8b 	bl	8000adc <__aeabi_dcmplt>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f040 8288 	bne.w	800b0dc <_dtoa_r+0x98c>
 800abcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800abd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f2c0 8158 	blt.w	800ae8c <_dtoa_r+0x73c>
 800abdc:	f1ba 0f0e 	cmp.w	sl, #14
 800abe0:	f300 8154 	bgt.w	800ae8c <_dtoa_r+0x73c>
 800abe4:	4b6b      	ldr	r3, [pc, #428]	; (800ad94 <_dtoa_r+0x644>)
 800abe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f280 80e3 	bge.w	800adbc <_dtoa_r+0x66c>
 800abf6:	9b01      	ldr	r3, [sp, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f300 80df 	bgt.w	800adbc <_dtoa_r+0x66c>
 800abfe:	f040 826d 	bne.w	800b0dc <_dtoa_r+0x98c>
 800ac02:	4b69      	ldr	r3, [pc, #420]	; (800ada8 <_dtoa_r+0x658>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	4640      	mov	r0, r8
 800ac08:	4649      	mov	r1, r9
 800ac0a:	f7f5 fcf5 	bl	80005f8 <__aeabi_dmul>
 800ac0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac12:	f7f5 ff77 	bl	8000b04 <__aeabi_dcmpge>
 800ac16:	9e01      	ldr	r6, [sp, #4]
 800ac18:	4637      	mov	r7, r6
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	f040 8243 	bne.w	800b0a6 <_dtoa_r+0x956>
 800ac20:	9d00      	ldr	r5, [sp, #0]
 800ac22:	2331      	movs	r3, #49	; 0x31
 800ac24:	f805 3b01 	strb.w	r3, [r5], #1
 800ac28:	f10a 0a01 	add.w	sl, sl, #1
 800ac2c:	e23f      	b.n	800b0ae <_dtoa_r+0x95e>
 800ac2e:	07f2      	lsls	r2, r6, #31
 800ac30:	d505      	bpl.n	800ac3e <_dtoa_r+0x4ee>
 800ac32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac36:	f7f5 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ac3a:	3501      	adds	r5, #1
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	1076      	asrs	r6, r6, #1
 800ac40:	3708      	adds	r7, #8
 800ac42:	e76c      	b.n	800ab1e <_dtoa_r+0x3ce>
 800ac44:	2502      	movs	r5, #2
 800ac46:	e76f      	b.n	800ab28 <_dtoa_r+0x3d8>
 800ac48:	9b01      	ldr	r3, [sp, #4]
 800ac4a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ac4e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac50:	e78d      	b.n	800ab6e <_dtoa_r+0x41e>
 800ac52:	9900      	ldr	r1, [sp, #0]
 800ac54:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac58:	4b4e      	ldr	r3, [pc, #312]	; (800ad94 <_dtoa_r+0x644>)
 800ac5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac5e:	4401      	add	r1, r0
 800ac60:	9102      	str	r1, [sp, #8]
 800ac62:	9908      	ldr	r1, [sp, #32]
 800ac64:	eeb0 8a47 	vmov.f32	s16, s14
 800ac68:	eef0 8a67 	vmov.f32	s17, s15
 800ac6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac74:	2900      	cmp	r1, #0
 800ac76:	d045      	beq.n	800ad04 <_dtoa_r+0x5b4>
 800ac78:	494c      	ldr	r1, [pc, #304]	; (800adac <_dtoa_r+0x65c>)
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	f7f5 fde6 	bl	800084c <__aeabi_ddiv>
 800ac80:	ec53 2b18 	vmov	r2, r3, d8
 800ac84:	f7f5 fb00 	bl	8000288 <__aeabi_dsub>
 800ac88:	9d00      	ldr	r5, [sp, #0]
 800ac8a:	ec41 0b18 	vmov	d8, r0, r1
 800ac8e:	4639      	mov	r1, r7
 800ac90:	4630      	mov	r0, r6
 800ac92:	f7f5 ff61 	bl	8000b58 <__aeabi_d2iz>
 800ac96:	900c      	str	r0, [sp, #48]	; 0x30
 800ac98:	f7f5 fc44 	bl	8000524 <__aeabi_i2d>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4630      	mov	r0, r6
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 faf0 	bl	8000288 <__aeabi_dsub>
 800aca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acaa:	3330      	adds	r3, #48	; 0x30
 800acac:	f805 3b01 	strb.w	r3, [r5], #1
 800acb0:	ec53 2b18 	vmov	r2, r3, d8
 800acb4:	4606      	mov	r6, r0
 800acb6:	460f      	mov	r7, r1
 800acb8:	f7f5 ff10 	bl	8000adc <__aeabi_dcmplt>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d165      	bne.n	800ad8c <_dtoa_r+0x63c>
 800acc0:	4632      	mov	r2, r6
 800acc2:	463b      	mov	r3, r7
 800acc4:	4935      	ldr	r1, [pc, #212]	; (800ad9c <_dtoa_r+0x64c>)
 800acc6:	2000      	movs	r0, #0
 800acc8:	f7f5 fade 	bl	8000288 <__aeabi_dsub>
 800accc:	ec53 2b18 	vmov	r2, r3, d8
 800acd0:	f7f5 ff04 	bl	8000adc <__aeabi_dcmplt>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	f040 80b9 	bne.w	800ae4c <_dtoa_r+0x6fc>
 800acda:	9b02      	ldr	r3, [sp, #8]
 800acdc:	429d      	cmp	r5, r3
 800acde:	f43f af75 	beq.w	800abcc <_dtoa_r+0x47c>
 800ace2:	4b2f      	ldr	r3, [pc, #188]	; (800ada0 <_dtoa_r+0x650>)
 800ace4:	ec51 0b18 	vmov	r0, r1, d8
 800ace8:	2200      	movs	r2, #0
 800acea:	f7f5 fc85 	bl	80005f8 <__aeabi_dmul>
 800acee:	4b2c      	ldr	r3, [pc, #176]	; (800ada0 <_dtoa_r+0x650>)
 800acf0:	ec41 0b18 	vmov	d8, r0, r1
 800acf4:	2200      	movs	r2, #0
 800acf6:	4630      	mov	r0, r6
 800acf8:	4639      	mov	r1, r7
 800acfa:	f7f5 fc7d 	bl	80005f8 <__aeabi_dmul>
 800acfe:	4606      	mov	r6, r0
 800ad00:	460f      	mov	r7, r1
 800ad02:	e7c4      	b.n	800ac8e <_dtoa_r+0x53e>
 800ad04:	ec51 0b17 	vmov	r0, r1, d7
 800ad08:	f7f5 fc76 	bl	80005f8 <__aeabi_dmul>
 800ad0c:	9b02      	ldr	r3, [sp, #8]
 800ad0e:	9d00      	ldr	r5, [sp, #0]
 800ad10:	930c      	str	r3, [sp, #48]	; 0x30
 800ad12:	ec41 0b18 	vmov	d8, r0, r1
 800ad16:	4639      	mov	r1, r7
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f7f5 ff1d 	bl	8000b58 <__aeabi_d2iz>
 800ad1e:	9011      	str	r0, [sp, #68]	; 0x44
 800ad20:	f7f5 fc00 	bl	8000524 <__aeabi_i2d>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4630      	mov	r0, r6
 800ad2a:	4639      	mov	r1, r7
 800ad2c:	f7f5 faac 	bl	8000288 <__aeabi_dsub>
 800ad30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad32:	3330      	adds	r3, #48	; 0x30
 800ad34:	f805 3b01 	strb.w	r3, [r5], #1
 800ad38:	9b02      	ldr	r3, [sp, #8]
 800ad3a:	429d      	cmp	r5, r3
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	460f      	mov	r7, r1
 800ad40:	f04f 0200 	mov.w	r2, #0
 800ad44:	d134      	bne.n	800adb0 <_dtoa_r+0x660>
 800ad46:	4b19      	ldr	r3, [pc, #100]	; (800adac <_dtoa_r+0x65c>)
 800ad48:	ec51 0b18 	vmov	r0, r1, d8
 800ad4c:	f7f5 fa9e 	bl	800028c <__adddf3>
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	4630      	mov	r0, r6
 800ad56:	4639      	mov	r1, r7
 800ad58:	f7f5 fede 	bl	8000b18 <__aeabi_dcmpgt>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d175      	bne.n	800ae4c <_dtoa_r+0x6fc>
 800ad60:	ec53 2b18 	vmov	r2, r3, d8
 800ad64:	4911      	ldr	r1, [pc, #68]	; (800adac <_dtoa_r+0x65c>)
 800ad66:	2000      	movs	r0, #0
 800ad68:	f7f5 fa8e 	bl	8000288 <__aeabi_dsub>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4630      	mov	r0, r6
 800ad72:	4639      	mov	r1, r7
 800ad74:	f7f5 feb2 	bl	8000adc <__aeabi_dcmplt>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	f43f af27 	beq.w	800abcc <_dtoa_r+0x47c>
 800ad7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad80:	1e6b      	subs	r3, r5, #1
 800ad82:	930c      	str	r3, [sp, #48]	; 0x30
 800ad84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad88:	2b30      	cmp	r3, #48	; 0x30
 800ad8a:	d0f8      	beq.n	800ad7e <_dtoa_r+0x62e>
 800ad8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad90:	e04a      	b.n	800ae28 <_dtoa_r+0x6d8>
 800ad92:	bf00      	nop
 800ad94:	0800d898 	.word	0x0800d898
 800ad98:	0800d870 	.word	0x0800d870
 800ad9c:	3ff00000 	.word	0x3ff00000
 800ada0:	40240000 	.word	0x40240000
 800ada4:	401c0000 	.word	0x401c0000
 800ada8:	40140000 	.word	0x40140000
 800adac:	3fe00000 	.word	0x3fe00000
 800adb0:	4baf      	ldr	r3, [pc, #700]	; (800b070 <_dtoa_r+0x920>)
 800adb2:	f7f5 fc21 	bl	80005f8 <__aeabi_dmul>
 800adb6:	4606      	mov	r6, r0
 800adb8:	460f      	mov	r7, r1
 800adba:	e7ac      	b.n	800ad16 <_dtoa_r+0x5c6>
 800adbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adc0:	9d00      	ldr	r5, [sp, #0]
 800adc2:	4642      	mov	r2, r8
 800adc4:	464b      	mov	r3, r9
 800adc6:	4630      	mov	r0, r6
 800adc8:	4639      	mov	r1, r7
 800adca:	f7f5 fd3f 	bl	800084c <__aeabi_ddiv>
 800adce:	f7f5 fec3 	bl	8000b58 <__aeabi_d2iz>
 800add2:	9002      	str	r0, [sp, #8]
 800add4:	f7f5 fba6 	bl	8000524 <__aeabi_i2d>
 800add8:	4642      	mov	r2, r8
 800adda:	464b      	mov	r3, r9
 800addc:	f7f5 fc0c 	bl	80005f8 <__aeabi_dmul>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	4630      	mov	r0, r6
 800ade6:	4639      	mov	r1, r7
 800ade8:	f7f5 fa4e 	bl	8000288 <__aeabi_dsub>
 800adec:	9e02      	ldr	r6, [sp, #8]
 800adee:	9f01      	ldr	r7, [sp, #4]
 800adf0:	3630      	adds	r6, #48	; 0x30
 800adf2:	f805 6b01 	strb.w	r6, [r5], #1
 800adf6:	9e00      	ldr	r6, [sp, #0]
 800adf8:	1bae      	subs	r6, r5, r6
 800adfa:	42b7      	cmp	r7, r6
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	d137      	bne.n	800ae72 <_dtoa_r+0x722>
 800ae02:	f7f5 fa43 	bl	800028c <__adddf3>
 800ae06:	4642      	mov	r2, r8
 800ae08:	464b      	mov	r3, r9
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	460f      	mov	r7, r1
 800ae0e:	f7f5 fe83 	bl	8000b18 <__aeabi_dcmpgt>
 800ae12:	b9c8      	cbnz	r0, 800ae48 <_dtoa_r+0x6f8>
 800ae14:	4642      	mov	r2, r8
 800ae16:	464b      	mov	r3, r9
 800ae18:	4630      	mov	r0, r6
 800ae1a:	4639      	mov	r1, r7
 800ae1c:	f7f5 fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae20:	b110      	cbz	r0, 800ae28 <_dtoa_r+0x6d8>
 800ae22:	9b02      	ldr	r3, [sp, #8]
 800ae24:	07d9      	lsls	r1, r3, #31
 800ae26:	d40f      	bmi.n	800ae48 <_dtoa_r+0x6f8>
 800ae28:	4620      	mov	r0, r4
 800ae2a:	4659      	mov	r1, fp
 800ae2c:	f001 f868 	bl	800bf00 <_Bfree>
 800ae30:	2300      	movs	r3, #0
 800ae32:	702b      	strb	r3, [r5, #0]
 800ae34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae36:	f10a 0001 	add.w	r0, sl, #1
 800ae3a:	6018      	str	r0, [r3, #0]
 800ae3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f43f acd8 	beq.w	800a7f4 <_dtoa_r+0xa4>
 800ae44:	601d      	str	r5, [r3, #0]
 800ae46:	e4d5      	b.n	800a7f4 <_dtoa_r+0xa4>
 800ae48:	f8cd a01c 	str.w	sl, [sp, #28]
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	461d      	mov	r5, r3
 800ae50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae54:	2a39      	cmp	r2, #57	; 0x39
 800ae56:	d108      	bne.n	800ae6a <_dtoa_r+0x71a>
 800ae58:	9a00      	ldr	r2, [sp, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d1f7      	bne.n	800ae4e <_dtoa_r+0x6fe>
 800ae5e:	9a07      	ldr	r2, [sp, #28]
 800ae60:	9900      	ldr	r1, [sp, #0]
 800ae62:	3201      	adds	r2, #1
 800ae64:	9207      	str	r2, [sp, #28]
 800ae66:	2230      	movs	r2, #48	; 0x30
 800ae68:	700a      	strb	r2, [r1, #0]
 800ae6a:	781a      	ldrb	r2, [r3, #0]
 800ae6c:	3201      	adds	r2, #1
 800ae6e:	701a      	strb	r2, [r3, #0]
 800ae70:	e78c      	b.n	800ad8c <_dtoa_r+0x63c>
 800ae72:	4b7f      	ldr	r3, [pc, #508]	; (800b070 <_dtoa_r+0x920>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	f7f5 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	f7f5 fe21 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d09b      	beq.n	800adc2 <_dtoa_r+0x672>
 800ae8a:	e7cd      	b.n	800ae28 <_dtoa_r+0x6d8>
 800ae8c:	9a08      	ldr	r2, [sp, #32]
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	f000 80c4 	beq.w	800b01c <_dtoa_r+0x8cc>
 800ae94:	9a05      	ldr	r2, [sp, #20]
 800ae96:	2a01      	cmp	r2, #1
 800ae98:	f300 80a8 	bgt.w	800afec <_dtoa_r+0x89c>
 800ae9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae9e:	2a00      	cmp	r2, #0
 800aea0:	f000 80a0 	beq.w	800afe4 <_dtoa_r+0x894>
 800aea4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aea8:	9e06      	ldr	r6, [sp, #24]
 800aeaa:	4645      	mov	r5, r8
 800aeac:	9a04      	ldr	r2, [sp, #16]
 800aeae:	2101      	movs	r1, #1
 800aeb0:	441a      	add	r2, r3
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4498      	add	r8, r3
 800aeb6:	9204      	str	r2, [sp, #16]
 800aeb8:	f001 f928 	bl	800c10c <__i2b>
 800aebc:	4607      	mov	r7, r0
 800aebe:	2d00      	cmp	r5, #0
 800aec0:	dd0b      	ble.n	800aeda <_dtoa_r+0x78a>
 800aec2:	9b04      	ldr	r3, [sp, #16]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	dd08      	ble.n	800aeda <_dtoa_r+0x78a>
 800aec8:	42ab      	cmp	r3, r5
 800aeca:	9a04      	ldr	r2, [sp, #16]
 800aecc:	bfa8      	it	ge
 800aece:	462b      	movge	r3, r5
 800aed0:	eba8 0803 	sub.w	r8, r8, r3
 800aed4:	1aed      	subs	r5, r5, r3
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	9304      	str	r3, [sp, #16]
 800aeda:	9b06      	ldr	r3, [sp, #24]
 800aedc:	b1fb      	cbz	r3, 800af1e <_dtoa_r+0x7ce>
 800aede:	9b08      	ldr	r3, [sp, #32]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 809f 	beq.w	800b024 <_dtoa_r+0x8d4>
 800aee6:	2e00      	cmp	r6, #0
 800aee8:	dd11      	ble.n	800af0e <_dtoa_r+0x7be>
 800aeea:	4639      	mov	r1, r7
 800aeec:	4632      	mov	r2, r6
 800aeee:	4620      	mov	r0, r4
 800aef0:	f001 f9c8 	bl	800c284 <__pow5mult>
 800aef4:	465a      	mov	r2, fp
 800aef6:	4601      	mov	r1, r0
 800aef8:	4607      	mov	r7, r0
 800aefa:	4620      	mov	r0, r4
 800aefc:	f001 f91c 	bl	800c138 <__multiply>
 800af00:	4659      	mov	r1, fp
 800af02:	9007      	str	r0, [sp, #28]
 800af04:	4620      	mov	r0, r4
 800af06:	f000 fffb 	bl	800bf00 <_Bfree>
 800af0a:	9b07      	ldr	r3, [sp, #28]
 800af0c:	469b      	mov	fp, r3
 800af0e:	9b06      	ldr	r3, [sp, #24]
 800af10:	1b9a      	subs	r2, r3, r6
 800af12:	d004      	beq.n	800af1e <_dtoa_r+0x7ce>
 800af14:	4659      	mov	r1, fp
 800af16:	4620      	mov	r0, r4
 800af18:	f001 f9b4 	bl	800c284 <__pow5mult>
 800af1c:	4683      	mov	fp, r0
 800af1e:	2101      	movs	r1, #1
 800af20:	4620      	mov	r0, r4
 800af22:	f001 f8f3 	bl	800c10c <__i2b>
 800af26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af28:	2b00      	cmp	r3, #0
 800af2a:	4606      	mov	r6, r0
 800af2c:	dd7c      	ble.n	800b028 <_dtoa_r+0x8d8>
 800af2e:	461a      	mov	r2, r3
 800af30:	4601      	mov	r1, r0
 800af32:	4620      	mov	r0, r4
 800af34:	f001 f9a6 	bl	800c284 <__pow5mult>
 800af38:	9b05      	ldr	r3, [sp, #20]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	4606      	mov	r6, r0
 800af3e:	dd76      	ble.n	800b02e <_dtoa_r+0x8de>
 800af40:	2300      	movs	r3, #0
 800af42:	9306      	str	r3, [sp, #24]
 800af44:	6933      	ldr	r3, [r6, #16]
 800af46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af4a:	6918      	ldr	r0, [r3, #16]
 800af4c:	f001 f88e 	bl	800c06c <__hi0bits>
 800af50:	f1c0 0020 	rsb	r0, r0, #32
 800af54:	9b04      	ldr	r3, [sp, #16]
 800af56:	4418      	add	r0, r3
 800af58:	f010 001f 	ands.w	r0, r0, #31
 800af5c:	f000 8086 	beq.w	800b06c <_dtoa_r+0x91c>
 800af60:	f1c0 0320 	rsb	r3, r0, #32
 800af64:	2b04      	cmp	r3, #4
 800af66:	dd7f      	ble.n	800b068 <_dtoa_r+0x918>
 800af68:	f1c0 001c 	rsb	r0, r0, #28
 800af6c:	9b04      	ldr	r3, [sp, #16]
 800af6e:	4403      	add	r3, r0
 800af70:	4480      	add	r8, r0
 800af72:	4405      	add	r5, r0
 800af74:	9304      	str	r3, [sp, #16]
 800af76:	f1b8 0f00 	cmp.w	r8, #0
 800af7a:	dd05      	ble.n	800af88 <_dtoa_r+0x838>
 800af7c:	4659      	mov	r1, fp
 800af7e:	4642      	mov	r2, r8
 800af80:	4620      	mov	r0, r4
 800af82:	f001 f9d9 	bl	800c338 <__lshift>
 800af86:	4683      	mov	fp, r0
 800af88:	9b04      	ldr	r3, [sp, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	dd05      	ble.n	800af9a <_dtoa_r+0x84a>
 800af8e:	4631      	mov	r1, r6
 800af90:	461a      	mov	r2, r3
 800af92:	4620      	mov	r0, r4
 800af94:	f001 f9d0 	bl	800c338 <__lshift>
 800af98:	4606      	mov	r6, r0
 800af9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d069      	beq.n	800b074 <_dtoa_r+0x924>
 800afa0:	4631      	mov	r1, r6
 800afa2:	4658      	mov	r0, fp
 800afa4:	f001 fa34 	bl	800c410 <__mcmp>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	da63      	bge.n	800b074 <_dtoa_r+0x924>
 800afac:	2300      	movs	r3, #0
 800afae:	4659      	mov	r1, fp
 800afb0:	220a      	movs	r2, #10
 800afb2:	4620      	mov	r0, r4
 800afb4:	f000 ffc6 	bl	800bf44 <__multadd>
 800afb8:	9b08      	ldr	r3, [sp, #32]
 800afba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afbe:	4683      	mov	fp, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 818f 	beq.w	800b2e4 <_dtoa_r+0xb94>
 800afc6:	4639      	mov	r1, r7
 800afc8:	2300      	movs	r3, #0
 800afca:	220a      	movs	r2, #10
 800afcc:	4620      	mov	r0, r4
 800afce:	f000 ffb9 	bl	800bf44 <__multadd>
 800afd2:	f1b9 0f00 	cmp.w	r9, #0
 800afd6:	4607      	mov	r7, r0
 800afd8:	f300 808e 	bgt.w	800b0f8 <_dtoa_r+0x9a8>
 800afdc:	9b05      	ldr	r3, [sp, #20]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	dc50      	bgt.n	800b084 <_dtoa_r+0x934>
 800afe2:	e089      	b.n	800b0f8 <_dtoa_r+0x9a8>
 800afe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afea:	e75d      	b.n	800aea8 <_dtoa_r+0x758>
 800afec:	9b01      	ldr	r3, [sp, #4]
 800afee:	1e5e      	subs	r6, r3, #1
 800aff0:	9b06      	ldr	r3, [sp, #24]
 800aff2:	42b3      	cmp	r3, r6
 800aff4:	bfbf      	itttt	lt
 800aff6:	9b06      	ldrlt	r3, [sp, #24]
 800aff8:	9606      	strlt	r6, [sp, #24]
 800affa:	1af2      	sublt	r2, r6, r3
 800affc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800affe:	bfb6      	itet	lt
 800b000:	189b      	addlt	r3, r3, r2
 800b002:	1b9e      	subge	r6, r3, r6
 800b004:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b006:	9b01      	ldr	r3, [sp, #4]
 800b008:	bfb8      	it	lt
 800b00a:	2600      	movlt	r6, #0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	bfb5      	itete	lt
 800b010:	eba8 0503 	sublt.w	r5, r8, r3
 800b014:	9b01      	ldrge	r3, [sp, #4]
 800b016:	2300      	movlt	r3, #0
 800b018:	4645      	movge	r5, r8
 800b01a:	e747      	b.n	800aeac <_dtoa_r+0x75c>
 800b01c:	9e06      	ldr	r6, [sp, #24]
 800b01e:	9f08      	ldr	r7, [sp, #32]
 800b020:	4645      	mov	r5, r8
 800b022:	e74c      	b.n	800aebe <_dtoa_r+0x76e>
 800b024:	9a06      	ldr	r2, [sp, #24]
 800b026:	e775      	b.n	800af14 <_dtoa_r+0x7c4>
 800b028:	9b05      	ldr	r3, [sp, #20]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	dc18      	bgt.n	800b060 <_dtoa_r+0x910>
 800b02e:	9b02      	ldr	r3, [sp, #8]
 800b030:	b9b3      	cbnz	r3, 800b060 <_dtoa_r+0x910>
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b038:	b9a3      	cbnz	r3, 800b064 <_dtoa_r+0x914>
 800b03a:	9b03      	ldr	r3, [sp, #12]
 800b03c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b040:	0d1b      	lsrs	r3, r3, #20
 800b042:	051b      	lsls	r3, r3, #20
 800b044:	b12b      	cbz	r3, 800b052 <_dtoa_r+0x902>
 800b046:	9b04      	ldr	r3, [sp, #16]
 800b048:	3301      	adds	r3, #1
 800b04a:	9304      	str	r3, [sp, #16]
 800b04c:	f108 0801 	add.w	r8, r8, #1
 800b050:	2301      	movs	r3, #1
 800b052:	9306      	str	r3, [sp, #24]
 800b054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b056:	2b00      	cmp	r3, #0
 800b058:	f47f af74 	bne.w	800af44 <_dtoa_r+0x7f4>
 800b05c:	2001      	movs	r0, #1
 800b05e:	e779      	b.n	800af54 <_dtoa_r+0x804>
 800b060:	2300      	movs	r3, #0
 800b062:	e7f6      	b.n	800b052 <_dtoa_r+0x902>
 800b064:	9b02      	ldr	r3, [sp, #8]
 800b066:	e7f4      	b.n	800b052 <_dtoa_r+0x902>
 800b068:	d085      	beq.n	800af76 <_dtoa_r+0x826>
 800b06a:	4618      	mov	r0, r3
 800b06c:	301c      	adds	r0, #28
 800b06e:	e77d      	b.n	800af6c <_dtoa_r+0x81c>
 800b070:	40240000 	.word	0x40240000
 800b074:	9b01      	ldr	r3, [sp, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	dc38      	bgt.n	800b0ec <_dtoa_r+0x99c>
 800b07a:	9b05      	ldr	r3, [sp, #20]
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	dd35      	ble.n	800b0ec <_dtoa_r+0x99c>
 800b080:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b084:	f1b9 0f00 	cmp.w	r9, #0
 800b088:	d10d      	bne.n	800b0a6 <_dtoa_r+0x956>
 800b08a:	4631      	mov	r1, r6
 800b08c:	464b      	mov	r3, r9
 800b08e:	2205      	movs	r2, #5
 800b090:	4620      	mov	r0, r4
 800b092:	f000 ff57 	bl	800bf44 <__multadd>
 800b096:	4601      	mov	r1, r0
 800b098:	4606      	mov	r6, r0
 800b09a:	4658      	mov	r0, fp
 800b09c:	f001 f9b8 	bl	800c410 <__mcmp>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	f73f adbd 	bgt.w	800ac20 <_dtoa_r+0x4d0>
 800b0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a8:	9d00      	ldr	r5, [sp, #0]
 800b0aa:	ea6f 0a03 	mvn.w	sl, r3
 800b0ae:	f04f 0800 	mov.w	r8, #0
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f000 ff23 	bl	800bf00 <_Bfree>
 800b0ba:	2f00      	cmp	r7, #0
 800b0bc:	f43f aeb4 	beq.w	800ae28 <_dtoa_r+0x6d8>
 800b0c0:	f1b8 0f00 	cmp.w	r8, #0
 800b0c4:	d005      	beq.n	800b0d2 <_dtoa_r+0x982>
 800b0c6:	45b8      	cmp	r8, r7
 800b0c8:	d003      	beq.n	800b0d2 <_dtoa_r+0x982>
 800b0ca:	4641      	mov	r1, r8
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 ff17 	bl	800bf00 <_Bfree>
 800b0d2:	4639      	mov	r1, r7
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f000 ff13 	bl	800bf00 <_Bfree>
 800b0da:	e6a5      	b.n	800ae28 <_dtoa_r+0x6d8>
 800b0dc:	2600      	movs	r6, #0
 800b0de:	4637      	mov	r7, r6
 800b0e0:	e7e1      	b.n	800b0a6 <_dtoa_r+0x956>
 800b0e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b0e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b0e8:	4637      	mov	r7, r6
 800b0ea:	e599      	b.n	800ac20 <_dtoa_r+0x4d0>
 800b0ec:	9b08      	ldr	r3, [sp, #32]
 800b0ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 80fd 	beq.w	800b2f2 <_dtoa_r+0xba2>
 800b0f8:	2d00      	cmp	r5, #0
 800b0fa:	dd05      	ble.n	800b108 <_dtoa_r+0x9b8>
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	462a      	mov	r2, r5
 800b100:	4620      	mov	r0, r4
 800b102:	f001 f919 	bl	800c338 <__lshift>
 800b106:	4607      	mov	r7, r0
 800b108:	9b06      	ldr	r3, [sp, #24]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d05c      	beq.n	800b1c8 <_dtoa_r+0xa78>
 800b10e:	6879      	ldr	r1, [r7, #4]
 800b110:	4620      	mov	r0, r4
 800b112:	f000 feb5 	bl	800be80 <_Balloc>
 800b116:	4605      	mov	r5, r0
 800b118:	b928      	cbnz	r0, 800b126 <_dtoa_r+0x9d6>
 800b11a:	4b80      	ldr	r3, [pc, #512]	; (800b31c <_dtoa_r+0xbcc>)
 800b11c:	4602      	mov	r2, r0
 800b11e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b122:	f7ff bb2e 	b.w	800a782 <_dtoa_r+0x32>
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	3202      	adds	r2, #2
 800b12a:	0092      	lsls	r2, r2, #2
 800b12c:	f107 010c 	add.w	r1, r7, #12
 800b130:	300c      	adds	r0, #12
 800b132:	f7fd fbc7 	bl	80088c4 <memcpy>
 800b136:	2201      	movs	r2, #1
 800b138:	4629      	mov	r1, r5
 800b13a:	4620      	mov	r0, r4
 800b13c:	f001 f8fc 	bl	800c338 <__lshift>
 800b140:	9b00      	ldr	r3, [sp, #0]
 800b142:	3301      	adds	r3, #1
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	9b00      	ldr	r3, [sp, #0]
 800b148:	444b      	add	r3, r9
 800b14a:	9307      	str	r3, [sp, #28]
 800b14c:	9b02      	ldr	r3, [sp, #8]
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	46b8      	mov	r8, r7
 800b154:	9306      	str	r3, [sp, #24]
 800b156:	4607      	mov	r7, r0
 800b158:	9b01      	ldr	r3, [sp, #4]
 800b15a:	4631      	mov	r1, r6
 800b15c:	3b01      	subs	r3, #1
 800b15e:	4658      	mov	r0, fp
 800b160:	9302      	str	r3, [sp, #8]
 800b162:	f7ff fa67 	bl	800a634 <quorem>
 800b166:	4603      	mov	r3, r0
 800b168:	3330      	adds	r3, #48	; 0x30
 800b16a:	9004      	str	r0, [sp, #16]
 800b16c:	4641      	mov	r1, r8
 800b16e:	4658      	mov	r0, fp
 800b170:	9308      	str	r3, [sp, #32]
 800b172:	f001 f94d 	bl	800c410 <__mcmp>
 800b176:	463a      	mov	r2, r7
 800b178:	4681      	mov	r9, r0
 800b17a:	4631      	mov	r1, r6
 800b17c:	4620      	mov	r0, r4
 800b17e:	f001 f963 	bl	800c448 <__mdiff>
 800b182:	68c2      	ldr	r2, [r0, #12]
 800b184:	9b08      	ldr	r3, [sp, #32]
 800b186:	4605      	mov	r5, r0
 800b188:	bb02      	cbnz	r2, 800b1cc <_dtoa_r+0xa7c>
 800b18a:	4601      	mov	r1, r0
 800b18c:	4658      	mov	r0, fp
 800b18e:	f001 f93f 	bl	800c410 <__mcmp>
 800b192:	9b08      	ldr	r3, [sp, #32]
 800b194:	4602      	mov	r2, r0
 800b196:	4629      	mov	r1, r5
 800b198:	4620      	mov	r0, r4
 800b19a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b19e:	f000 feaf 	bl	800bf00 <_Bfree>
 800b1a2:	9b05      	ldr	r3, [sp, #20]
 800b1a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1a6:	9d01      	ldr	r5, [sp, #4]
 800b1a8:	ea43 0102 	orr.w	r1, r3, r2
 800b1ac:	9b06      	ldr	r3, [sp, #24]
 800b1ae:	430b      	orrs	r3, r1
 800b1b0:	9b08      	ldr	r3, [sp, #32]
 800b1b2:	d10d      	bne.n	800b1d0 <_dtoa_r+0xa80>
 800b1b4:	2b39      	cmp	r3, #57	; 0x39
 800b1b6:	d029      	beq.n	800b20c <_dtoa_r+0xabc>
 800b1b8:	f1b9 0f00 	cmp.w	r9, #0
 800b1bc:	dd01      	ble.n	800b1c2 <_dtoa_r+0xa72>
 800b1be:	9b04      	ldr	r3, [sp, #16]
 800b1c0:	3331      	adds	r3, #49	; 0x31
 800b1c2:	9a02      	ldr	r2, [sp, #8]
 800b1c4:	7013      	strb	r3, [r2, #0]
 800b1c6:	e774      	b.n	800b0b2 <_dtoa_r+0x962>
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	e7b9      	b.n	800b140 <_dtoa_r+0x9f0>
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	e7e2      	b.n	800b196 <_dtoa_r+0xa46>
 800b1d0:	f1b9 0f00 	cmp.w	r9, #0
 800b1d4:	db06      	blt.n	800b1e4 <_dtoa_r+0xa94>
 800b1d6:	9905      	ldr	r1, [sp, #20]
 800b1d8:	ea41 0909 	orr.w	r9, r1, r9
 800b1dc:	9906      	ldr	r1, [sp, #24]
 800b1de:	ea59 0101 	orrs.w	r1, r9, r1
 800b1e2:	d120      	bne.n	800b226 <_dtoa_r+0xad6>
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	ddec      	ble.n	800b1c2 <_dtoa_r+0xa72>
 800b1e8:	4659      	mov	r1, fp
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	9301      	str	r3, [sp, #4]
 800b1f0:	f001 f8a2 	bl	800c338 <__lshift>
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	4683      	mov	fp, r0
 800b1f8:	f001 f90a 	bl	800c410 <__mcmp>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	9b01      	ldr	r3, [sp, #4]
 800b200:	dc02      	bgt.n	800b208 <_dtoa_r+0xab8>
 800b202:	d1de      	bne.n	800b1c2 <_dtoa_r+0xa72>
 800b204:	07da      	lsls	r2, r3, #31
 800b206:	d5dc      	bpl.n	800b1c2 <_dtoa_r+0xa72>
 800b208:	2b39      	cmp	r3, #57	; 0x39
 800b20a:	d1d8      	bne.n	800b1be <_dtoa_r+0xa6e>
 800b20c:	9a02      	ldr	r2, [sp, #8]
 800b20e:	2339      	movs	r3, #57	; 0x39
 800b210:	7013      	strb	r3, [r2, #0]
 800b212:	462b      	mov	r3, r5
 800b214:	461d      	mov	r5, r3
 800b216:	3b01      	subs	r3, #1
 800b218:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b21c:	2a39      	cmp	r2, #57	; 0x39
 800b21e:	d050      	beq.n	800b2c2 <_dtoa_r+0xb72>
 800b220:	3201      	adds	r2, #1
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	e745      	b.n	800b0b2 <_dtoa_r+0x962>
 800b226:	2a00      	cmp	r2, #0
 800b228:	dd03      	ble.n	800b232 <_dtoa_r+0xae2>
 800b22a:	2b39      	cmp	r3, #57	; 0x39
 800b22c:	d0ee      	beq.n	800b20c <_dtoa_r+0xabc>
 800b22e:	3301      	adds	r3, #1
 800b230:	e7c7      	b.n	800b1c2 <_dtoa_r+0xa72>
 800b232:	9a01      	ldr	r2, [sp, #4]
 800b234:	9907      	ldr	r1, [sp, #28]
 800b236:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b23a:	428a      	cmp	r2, r1
 800b23c:	d02a      	beq.n	800b294 <_dtoa_r+0xb44>
 800b23e:	4659      	mov	r1, fp
 800b240:	2300      	movs	r3, #0
 800b242:	220a      	movs	r2, #10
 800b244:	4620      	mov	r0, r4
 800b246:	f000 fe7d 	bl	800bf44 <__multadd>
 800b24a:	45b8      	cmp	r8, r7
 800b24c:	4683      	mov	fp, r0
 800b24e:	f04f 0300 	mov.w	r3, #0
 800b252:	f04f 020a 	mov.w	r2, #10
 800b256:	4641      	mov	r1, r8
 800b258:	4620      	mov	r0, r4
 800b25a:	d107      	bne.n	800b26c <_dtoa_r+0xb1c>
 800b25c:	f000 fe72 	bl	800bf44 <__multadd>
 800b260:	4680      	mov	r8, r0
 800b262:	4607      	mov	r7, r0
 800b264:	9b01      	ldr	r3, [sp, #4]
 800b266:	3301      	adds	r3, #1
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	e775      	b.n	800b158 <_dtoa_r+0xa08>
 800b26c:	f000 fe6a 	bl	800bf44 <__multadd>
 800b270:	4639      	mov	r1, r7
 800b272:	4680      	mov	r8, r0
 800b274:	2300      	movs	r3, #0
 800b276:	220a      	movs	r2, #10
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 fe63 	bl	800bf44 <__multadd>
 800b27e:	4607      	mov	r7, r0
 800b280:	e7f0      	b.n	800b264 <_dtoa_r+0xb14>
 800b282:	f1b9 0f00 	cmp.w	r9, #0
 800b286:	9a00      	ldr	r2, [sp, #0]
 800b288:	bfcc      	ite	gt
 800b28a:	464d      	movgt	r5, r9
 800b28c:	2501      	movle	r5, #1
 800b28e:	4415      	add	r5, r2
 800b290:	f04f 0800 	mov.w	r8, #0
 800b294:	4659      	mov	r1, fp
 800b296:	2201      	movs	r2, #1
 800b298:	4620      	mov	r0, r4
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	f001 f84c 	bl	800c338 <__lshift>
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	4683      	mov	fp, r0
 800b2a4:	f001 f8b4 	bl	800c410 <__mcmp>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	dcb2      	bgt.n	800b212 <_dtoa_r+0xac2>
 800b2ac:	d102      	bne.n	800b2b4 <_dtoa_r+0xb64>
 800b2ae:	9b01      	ldr	r3, [sp, #4]
 800b2b0:	07db      	lsls	r3, r3, #31
 800b2b2:	d4ae      	bmi.n	800b212 <_dtoa_r+0xac2>
 800b2b4:	462b      	mov	r3, r5
 800b2b6:	461d      	mov	r5, r3
 800b2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2bc:	2a30      	cmp	r2, #48	; 0x30
 800b2be:	d0fa      	beq.n	800b2b6 <_dtoa_r+0xb66>
 800b2c0:	e6f7      	b.n	800b0b2 <_dtoa_r+0x962>
 800b2c2:	9a00      	ldr	r2, [sp, #0]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d1a5      	bne.n	800b214 <_dtoa_r+0xac4>
 800b2c8:	f10a 0a01 	add.w	sl, sl, #1
 800b2cc:	2331      	movs	r3, #49	; 0x31
 800b2ce:	e779      	b.n	800b1c4 <_dtoa_r+0xa74>
 800b2d0:	4b13      	ldr	r3, [pc, #76]	; (800b320 <_dtoa_r+0xbd0>)
 800b2d2:	f7ff baaf 	b.w	800a834 <_dtoa_r+0xe4>
 800b2d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f47f aa86 	bne.w	800a7ea <_dtoa_r+0x9a>
 800b2de:	4b11      	ldr	r3, [pc, #68]	; (800b324 <_dtoa_r+0xbd4>)
 800b2e0:	f7ff baa8 	b.w	800a834 <_dtoa_r+0xe4>
 800b2e4:	f1b9 0f00 	cmp.w	r9, #0
 800b2e8:	dc03      	bgt.n	800b2f2 <_dtoa_r+0xba2>
 800b2ea:	9b05      	ldr	r3, [sp, #20]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	f73f aec9 	bgt.w	800b084 <_dtoa_r+0x934>
 800b2f2:	9d00      	ldr	r5, [sp, #0]
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4658      	mov	r0, fp
 800b2f8:	f7ff f99c 	bl	800a634 <quorem>
 800b2fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b300:	f805 3b01 	strb.w	r3, [r5], #1
 800b304:	9a00      	ldr	r2, [sp, #0]
 800b306:	1aaa      	subs	r2, r5, r2
 800b308:	4591      	cmp	r9, r2
 800b30a:	ddba      	ble.n	800b282 <_dtoa_r+0xb32>
 800b30c:	4659      	mov	r1, fp
 800b30e:	2300      	movs	r3, #0
 800b310:	220a      	movs	r2, #10
 800b312:	4620      	mov	r0, r4
 800b314:	f000 fe16 	bl	800bf44 <__multadd>
 800b318:	4683      	mov	fp, r0
 800b31a:	e7eb      	b.n	800b2f4 <_dtoa_r+0xba4>
 800b31c:	0800d71c 	.word	0x0800d71c
 800b320:	0800d518 	.word	0x0800d518
 800b324:	0800d699 	.word	0x0800d699

0800b328 <__sflush_r>:
 800b328:	898a      	ldrh	r2, [r1, #12]
 800b32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b32e:	4605      	mov	r5, r0
 800b330:	0710      	lsls	r0, r2, #28
 800b332:	460c      	mov	r4, r1
 800b334:	d458      	bmi.n	800b3e8 <__sflush_r+0xc0>
 800b336:	684b      	ldr	r3, [r1, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	dc05      	bgt.n	800b348 <__sflush_r+0x20>
 800b33c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b33e:	2b00      	cmp	r3, #0
 800b340:	dc02      	bgt.n	800b348 <__sflush_r+0x20>
 800b342:	2000      	movs	r0, #0
 800b344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	d0f9      	beq.n	800b342 <__sflush_r+0x1a>
 800b34e:	2300      	movs	r3, #0
 800b350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b354:	682f      	ldr	r7, [r5, #0]
 800b356:	602b      	str	r3, [r5, #0]
 800b358:	d032      	beq.n	800b3c0 <__sflush_r+0x98>
 800b35a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	075a      	lsls	r2, r3, #29
 800b360:	d505      	bpl.n	800b36e <__sflush_r+0x46>
 800b362:	6863      	ldr	r3, [r4, #4]
 800b364:	1ac0      	subs	r0, r0, r3
 800b366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b368:	b10b      	cbz	r3, 800b36e <__sflush_r+0x46>
 800b36a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b36c:	1ac0      	subs	r0, r0, r3
 800b36e:	2300      	movs	r3, #0
 800b370:	4602      	mov	r2, r0
 800b372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b374:	6a21      	ldr	r1, [r4, #32]
 800b376:	4628      	mov	r0, r5
 800b378:	47b0      	blx	r6
 800b37a:	1c43      	adds	r3, r0, #1
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	d106      	bne.n	800b38e <__sflush_r+0x66>
 800b380:	6829      	ldr	r1, [r5, #0]
 800b382:	291d      	cmp	r1, #29
 800b384:	d82c      	bhi.n	800b3e0 <__sflush_r+0xb8>
 800b386:	4a2a      	ldr	r2, [pc, #168]	; (800b430 <__sflush_r+0x108>)
 800b388:	40ca      	lsrs	r2, r1
 800b38a:	07d6      	lsls	r6, r2, #31
 800b38c:	d528      	bpl.n	800b3e0 <__sflush_r+0xb8>
 800b38e:	2200      	movs	r2, #0
 800b390:	6062      	str	r2, [r4, #4]
 800b392:	04d9      	lsls	r1, r3, #19
 800b394:	6922      	ldr	r2, [r4, #16]
 800b396:	6022      	str	r2, [r4, #0]
 800b398:	d504      	bpl.n	800b3a4 <__sflush_r+0x7c>
 800b39a:	1c42      	adds	r2, r0, #1
 800b39c:	d101      	bne.n	800b3a2 <__sflush_r+0x7a>
 800b39e:	682b      	ldr	r3, [r5, #0]
 800b3a0:	b903      	cbnz	r3, 800b3a4 <__sflush_r+0x7c>
 800b3a2:	6560      	str	r0, [r4, #84]	; 0x54
 800b3a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3a6:	602f      	str	r7, [r5, #0]
 800b3a8:	2900      	cmp	r1, #0
 800b3aa:	d0ca      	beq.n	800b342 <__sflush_r+0x1a>
 800b3ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3b0:	4299      	cmp	r1, r3
 800b3b2:	d002      	beq.n	800b3ba <__sflush_r+0x92>
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f001 fa2d 	bl	800c814 <_free_r>
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	6360      	str	r0, [r4, #52]	; 0x34
 800b3be:	e7c1      	b.n	800b344 <__sflush_r+0x1c>
 800b3c0:	6a21      	ldr	r1, [r4, #32]
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b0      	blx	r6
 800b3c8:	1c41      	adds	r1, r0, #1
 800b3ca:	d1c7      	bne.n	800b35c <__sflush_r+0x34>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0c4      	beq.n	800b35c <__sflush_r+0x34>
 800b3d2:	2b1d      	cmp	r3, #29
 800b3d4:	d001      	beq.n	800b3da <__sflush_r+0xb2>
 800b3d6:	2b16      	cmp	r3, #22
 800b3d8:	d101      	bne.n	800b3de <__sflush_r+0xb6>
 800b3da:	602f      	str	r7, [r5, #0]
 800b3dc:	e7b1      	b.n	800b342 <__sflush_r+0x1a>
 800b3de:	89a3      	ldrh	r3, [r4, #12]
 800b3e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e4:	81a3      	strh	r3, [r4, #12]
 800b3e6:	e7ad      	b.n	800b344 <__sflush_r+0x1c>
 800b3e8:	690f      	ldr	r7, [r1, #16]
 800b3ea:	2f00      	cmp	r7, #0
 800b3ec:	d0a9      	beq.n	800b342 <__sflush_r+0x1a>
 800b3ee:	0793      	lsls	r3, r2, #30
 800b3f0:	680e      	ldr	r6, [r1, #0]
 800b3f2:	bf08      	it	eq
 800b3f4:	694b      	ldreq	r3, [r1, #20]
 800b3f6:	600f      	str	r7, [r1, #0]
 800b3f8:	bf18      	it	ne
 800b3fa:	2300      	movne	r3, #0
 800b3fc:	eba6 0807 	sub.w	r8, r6, r7
 800b400:	608b      	str	r3, [r1, #8]
 800b402:	f1b8 0f00 	cmp.w	r8, #0
 800b406:	dd9c      	ble.n	800b342 <__sflush_r+0x1a>
 800b408:	6a21      	ldr	r1, [r4, #32]
 800b40a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b40c:	4643      	mov	r3, r8
 800b40e:	463a      	mov	r2, r7
 800b410:	4628      	mov	r0, r5
 800b412:	47b0      	blx	r6
 800b414:	2800      	cmp	r0, #0
 800b416:	dc06      	bgt.n	800b426 <__sflush_r+0xfe>
 800b418:	89a3      	ldrh	r3, [r4, #12]
 800b41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b41e:	81a3      	strh	r3, [r4, #12]
 800b420:	f04f 30ff 	mov.w	r0, #4294967295
 800b424:	e78e      	b.n	800b344 <__sflush_r+0x1c>
 800b426:	4407      	add	r7, r0
 800b428:	eba8 0800 	sub.w	r8, r8, r0
 800b42c:	e7e9      	b.n	800b402 <__sflush_r+0xda>
 800b42e:	bf00      	nop
 800b430:	20400001 	.word	0x20400001

0800b434 <_fflush_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	690b      	ldr	r3, [r1, #16]
 800b438:	4605      	mov	r5, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	b913      	cbnz	r3, 800b444 <_fflush_r+0x10>
 800b43e:	2500      	movs	r5, #0
 800b440:	4628      	mov	r0, r5
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	b118      	cbz	r0, 800b44e <_fflush_r+0x1a>
 800b446:	6983      	ldr	r3, [r0, #24]
 800b448:	b90b      	cbnz	r3, 800b44e <_fflush_r+0x1a>
 800b44a:	f000 f887 	bl	800b55c <__sinit>
 800b44e:	4b14      	ldr	r3, [pc, #80]	; (800b4a0 <_fflush_r+0x6c>)
 800b450:	429c      	cmp	r4, r3
 800b452:	d11b      	bne.n	800b48c <_fflush_r+0x58>
 800b454:	686c      	ldr	r4, [r5, #4]
 800b456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0ef      	beq.n	800b43e <_fflush_r+0xa>
 800b45e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b460:	07d0      	lsls	r0, r2, #31
 800b462:	d404      	bmi.n	800b46e <_fflush_r+0x3a>
 800b464:	0599      	lsls	r1, r3, #22
 800b466:	d402      	bmi.n	800b46e <_fflush_r+0x3a>
 800b468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b46a:	f000 fc88 	bl	800bd7e <__retarget_lock_acquire_recursive>
 800b46e:	4628      	mov	r0, r5
 800b470:	4621      	mov	r1, r4
 800b472:	f7ff ff59 	bl	800b328 <__sflush_r>
 800b476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b478:	07da      	lsls	r2, r3, #31
 800b47a:	4605      	mov	r5, r0
 800b47c:	d4e0      	bmi.n	800b440 <_fflush_r+0xc>
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	059b      	lsls	r3, r3, #22
 800b482:	d4dd      	bmi.n	800b440 <_fflush_r+0xc>
 800b484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b486:	f000 fc7b 	bl	800bd80 <__retarget_lock_release_recursive>
 800b48a:	e7d9      	b.n	800b440 <_fflush_r+0xc>
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <_fflush_r+0x70>)
 800b48e:	429c      	cmp	r4, r3
 800b490:	d101      	bne.n	800b496 <_fflush_r+0x62>
 800b492:	68ac      	ldr	r4, [r5, #8]
 800b494:	e7df      	b.n	800b456 <_fflush_r+0x22>
 800b496:	4b04      	ldr	r3, [pc, #16]	; (800b4a8 <_fflush_r+0x74>)
 800b498:	429c      	cmp	r4, r3
 800b49a:	bf08      	it	eq
 800b49c:	68ec      	ldreq	r4, [r5, #12]
 800b49e:	e7da      	b.n	800b456 <_fflush_r+0x22>
 800b4a0:	0800d750 	.word	0x0800d750
 800b4a4:	0800d770 	.word	0x0800d770
 800b4a8:	0800d730 	.word	0x0800d730

0800b4ac <std>:
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	b510      	push	{r4, lr}
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b4b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4ba:	6083      	str	r3, [r0, #8]
 800b4bc:	8181      	strh	r1, [r0, #12]
 800b4be:	6643      	str	r3, [r0, #100]	; 0x64
 800b4c0:	81c2      	strh	r2, [r0, #14]
 800b4c2:	6183      	str	r3, [r0, #24]
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	2208      	movs	r2, #8
 800b4c8:	305c      	adds	r0, #92	; 0x5c
 800b4ca:	f7fd fa09 	bl	80088e0 <memset>
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <std+0x38>)
 800b4d0:	6263      	str	r3, [r4, #36]	; 0x24
 800b4d2:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <std+0x3c>)
 800b4d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4d6:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <std+0x40>)
 800b4d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4da:	4b05      	ldr	r3, [pc, #20]	; (800b4f0 <std+0x44>)
 800b4dc:	6224      	str	r4, [r4, #32]
 800b4de:	6323      	str	r3, [r4, #48]	; 0x30
 800b4e0:	bd10      	pop	{r4, pc}
 800b4e2:	bf00      	nop
 800b4e4:	0800cf09 	.word	0x0800cf09
 800b4e8:	0800cf2b 	.word	0x0800cf2b
 800b4ec:	0800cf63 	.word	0x0800cf63
 800b4f0:	0800cf87 	.word	0x0800cf87

0800b4f4 <_cleanup_r>:
 800b4f4:	4901      	ldr	r1, [pc, #4]	; (800b4fc <_cleanup_r+0x8>)
 800b4f6:	f000 b8af 	b.w	800b658 <_fwalk_reent>
 800b4fa:	bf00      	nop
 800b4fc:	0800b435 	.word	0x0800b435

0800b500 <__sfmoreglue>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	1e4a      	subs	r2, r1, #1
 800b504:	2568      	movs	r5, #104	; 0x68
 800b506:	4355      	muls	r5, r2
 800b508:	460e      	mov	r6, r1
 800b50a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b50e:	f001 f9d1 	bl	800c8b4 <_malloc_r>
 800b512:	4604      	mov	r4, r0
 800b514:	b140      	cbz	r0, 800b528 <__sfmoreglue+0x28>
 800b516:	2100      	movs	r1, #0
 800b518:	e9c0 1600 	strd	r1, r6, [r0]
 800b51c:	300c      	adds	r0, #12
 800b51e:	60a0      	str	r0, [r4, #8]
 800b520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b524:	f7fd f9dc 	bl	80088e0 <memset>
 800b528:	4620      	mov	r0, r4
 800b52a:	bd70      	pop	{r4, r5, r6, pc}

0800b52c <__sfp_lock_acquire>:
 800b52c:	4801      	ldr	r0, [pc, #4]	; (800b534 <__sfp_lock_acquire+0x8>)
 800b52e:	f000 bc26 	b.w	800bd7e <__retarget_lock_acquire_recursive>
 800b532:	bf00      	nop
 800b534:	2000073c 	.word	0x2000073c

0800b538 <__sfp_lock_release>:
 800b538:	4801      	ldr	r0, [pc, #4]	; (800b540 <__sfp_lock_release+0x8>)
 800b53a:	f000 bc21 	b.w	800bd80 <__retarget_lock_release_recursive>
 800b53e:	bf00      	nop
 800b540:	2000073c 	.word	0x2000073c

0800b544 <__sinit_lock_acquire>:
 800b544:	4801      	ldr	r0, [pc, #4]	; (800b54c <__sinit_lock_acquire+0x8>)
 800b546:	f000 bc1a 	b.w	800bd7e <__retarget_lock_acquire_recursive>
 800b54a:	bf00      	nop
 800b54c:	20000737 	.word	0x20000737

0800b550 <__sinit_lock_release>:
 800b550:	4801      	ldr	r0, [pc, #4]	; (800b558 <__sinit_lock_release+0x8>)
 800b552:	f000 bc15 	b.w	800bd80 <__retarget_lock_release_recursive>
 800b556:	bf00      	nop
 800b558:	20000737 	.word	0x20000737

0800b55c <__sinit>:
 800b55c:	b510      	push	{r4, lr}
 800b55e:	4604      	mov	r4, r0
 800b560:	f7ff fff0 	bl	800b544 <__sinit_lock_acquire>
 800b564:	69a3      	ldr	r3, [r4, #24]
 800b566:	b11b      	cbz	r3, 800b570 <__sinit+0x14>
 800b568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b56c:	f7ff bff0 	b.w	800b550 <__sinit_lock_release>
 800b570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b574:	6523      	str	r3, [r4, #80]	; 0x50
 800b576:	4b13      	ldr	r3, [pc, #76]	; (800b5c4 <__sinit+0x68>)
 800b578:	4a13      	ldr	r2, [pc, #76]	; (800b5c8 <__sinit+0x6c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b57e:	42a3      	cmp	r3, r4
 800b580:	bf04      	itt	eq
 800b582:	2301      	moveq	r3, #1
 800b584:	61a3      	streq	r3, [r4, #24]
 800b586:	4620      	mov	r0, r4
 800b588:	f000 f820 	bl	800b5cc <__sfp>
 800b58c:	6060      	str	r0, [r4, #4]
 800b58e:	4620      	mov	r0, r4
 800b590:	f000 f81c 	bl	800b5cc <__sfp>
 800b594:	60a0      	str	r0, [r4, #8]
 800b596:	4620      	mov	r0, r4
 800b598:	f000 f818 	bl	800b5cc <__sfp>
 800b59c:	2200      	movs	r2, #0
 800b59e:	60e0      	str	r0, [r4, #12]
 800b5a0:	2104      	movs	r1, #4
 800b5a2:	6860      	ldr	r0, [r4, #4]
 800b5a4:	f7ff ff82 	bl	800b4ac <std>
 800b5a8:	68a0      	ldr	r0, [r4, #8]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	2109      	movs	r1, #9
 800b5ae:	f7ff ff7d 	bl	800b4ac <std>
 800b5b2:	68e0      	ldr	r0, [r4, #12]
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	2112      	movs	r1, #18
 800b5b8:	f7ff ff78 	bl	800b4ac <std>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	61a3      	str	r3, [r4, #24]
 800b5c0:	e7d2      	b.n	800b568 <__sinit+0xc>
 800b5c2:	bf00      	nop
 800b5c4:	0800d504 	.word	0x0800d504
 800b5c8:	0800b4f5 	.word	0x0800b4f5

0800b5cc <__sfp>:
 800b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	f7ff ffac 	bl	800b52c <__sfp_lock_acquire>
 800b5d4:	4b1e      	ldr	r3, [pc, #120]	; (800b650 <__sfp+0x84>)
 800b5d6:	681e      	ldr	r6, [r3, #0]
 800b5d8:	69b3      	ldr	r3, [r6, #24]
 800b5da:	b913      	cbnz	r3, 800b5e2 <__sfp+0x16>
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f7ff ffbd 	bl	800b55c <__sinit>
 800b5e2:	3648      	adds	r6, #72	; 0x48
 800b5e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	d503      	bpl.n	800b5f4 <__sfp+0x28>
 800b5ec:	6833      	ldr	r3, [r6, #0]
 800b5ee:	b30b      	cbz	r3, 800b634 <__sfp+0x68>
 800b5f0:	6836      	ldr	r6, [r6, #0]
 800b5f2:	e7f7      	b.n	800b5e4 <__sfp+0x18>
 800b5f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5f8:	b9d5      	cbnz	r5, 800b630 <__sfp+0x64>
 800b5fa:	4b16      	ldr	r3, [pc, #88]	; (800b654 <__sfp+0x88>)
 800b5fc:	60e3      	str	r3, [r4, #12]
 800b5fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b602:	6665      	str	r5, [r4, #100]	; 0x64
 800b604:	f000 fbba 	bl	800bd7c <__retarget_lock_init_recursive>
 800b608:	f7ff ff96 	bl	800b538 <__sfp_lock_release>
 800b60c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b610:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b614:	6025      	str	r5, [r4, #0]
 800b616:	61a5      	str	r5, [r4, #24]
 800b618:	2208      	movs	r2, #8
 800b61a:	4629      	mov	r1, r5
 800b61c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b620:	f7fd f95e 	bl	80088e0 <memset>
 800b624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b62c:	4620      	mov	r0, r4
 800b62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b630:	3468      	adds	r4, #104	; 0x68
 800b632:	e7d9      	b.n	800b5e8 <__sfp+0x1c>
 800b634:	2104      	movs	r1, #4
 800b636:	4638      	mov	r0, r7
 800b638:	f7ff ff62 	bl	800b500 <__sfmoreglue>
 800b63c:	4604      	mov	r4, r0
 800b63e:	6030      	str	r0, [r6, #0]
 800b640:	2800      	cmp	r0, #0
 800b642:	d1d5      	bne.n	800b5f0 <__sfp+0x24>
 800b644:	f7ff ff78 	bl	800b538 <__sfp_lock_release>
 800b648:	230c      	movs	r3, #12
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	e7ee      	b.n	800b62c <__sfp+0x60>
 800b64e:	bf00      	nop
 800b650:	0800d504 	.word	0x0800d504
 800b654:	ffff0001 	.word	0xffff0001

0800b658 <_fwalk_reent>:
 800b658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b65c:	4606      	mov	r6, r0
 800b65e:	4688      	mov	r8, r1
 800b660:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b664:	2700      	movs	r7, #0
 800b666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b66a:	f1b9 0901 	subs.w	r9, r9, #1
 800b66e:	d505      	bpl.n	800b67c <_fwalk_reent+0x24>
 800b670:	6824      	ldr	r4, [r4, #0]
 800b672:	2c00      	cmp	r4, #0
 800b674:	d1f7      	bne.n	800b666 <_fwalk_reent+0xe>
 800b676:	4638      	mov	r0, r7
 800b678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67c:	89ab      	ldrh	r3, [r5, #12]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d907      	bls.n	800b692 <_fwalk_reent+0x3a>
 800b682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b686:	3301      	adds	r3, #1
 800b688:	d003      	beq.n	800b692 <_fwalk_reent+0x3a>
 800b68a:	4629      	mov	r1, r5
 800b68c:	4630      	mov	r0, r6
 800b68e:	47c0      	blx	r8
 800b690:	4307      	orrs	r7, r0
 800b692:	3568      	adds	r5, #104	; 0x68
 800b694:	e7e9      	b.n	800b66a <_fwalk_reent+0x12>

0800b696 <rshift>:
 800b696:	6903      	ldr	r3, [r0, #16]
 800b698:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b69c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6a0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b6a4:	f100 0414 	add.w	r4, r0, #20
 800b6a8:	dd45      	ble.n	800b736 <rshift+0xa0>
 800b6aa:	f011 011f 	ands.w	r1, r1, #31
 800b6ae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b6b2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b6b6:	d10c      	bne.n	800b6d2 <rshift+0x3c>
 800b6b8:	f100 0710 	add.w	r7, r0, #16
 800b6bc:	4629      	mov	r1, r5
 800b6be:	42b1      	cmp	r1, r6
 800b6c0:	d334      	bcc.n	800b72c <rshift+0x96>
 800b6c2:	1a9b      	subs	r3, r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	1eea      	subs	r2, r5, #3
 800b6c8:	4296      	cmp	r6, r2
 800b6ca:	bf38      	it	cc
 800b6cc:	2300      	movcc	r3, #0
 800b6ce:	4423      	add	r3, r4
 800b6d0:	e015      	b.n	800b6fe <rshift+0x68>
 800b6d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b6d6:	f1c1 0820 	rsb	r8, r1, #32
 800b6da:	40cf      	lsrs	r7, r1
 800b6dc:	f105 0e04 	add.w	lr, r5, #4
 800b6e0:	46a1      	mov	r9, r4
 800b6e2:	4576      	cmp	r6, lr
 800b6e4:	46f4      	mov	ip, lr
 800b6e6:	d815      	bhi.n	800b714 <rshift+0x7e>
 800b6e8:	1a9b      	subs	r3, r3, r2
 800b6ea:	009a      	lsls	r2, r3, #2
 800b6ec:	3a04      	subs	r2, #4
 800b6ee:	3501      	adds	r5, #1
 800b6f0:	42ae      	cmp	r6, r5
 800b6f2:	bf38      	it	cc
 800b6f4:	2200      	movcc	r2, #0
 800b6f6:	18a3      	adds	r3, r4, r2
 800b6f8:	50a7      	str	r7, [r4, r2]
 800b6fa:	b107      	cbz	r7, 800b6fe <rshift+0x68>
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	1b1a      	subs	r2, r3, r4
 800b700:	42a3      	cmp	r3, r4
 800b702:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b706:	bf08      	it	eq
 800b708:	2300      	moveq	r3, #0
 800b70a:	6102      	str	r2, [r0, #16]
 800b70c:	bf08      	it	eq
 800b70e:	6143      	streq	r3, [r0, #20]
 800b710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b714:	f8dc c000 	ldr.w	ip, [ip]
 800b718:	fa0c fc08 	lsl.w	ip, ip, r8
 800b71c:	ea4c 0707 	orr.w	r7, ip, r7
 800b720:	f849 7b04 	str.w	r7, [r9], #4
 800b724:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b728:	40cf      	lsrs	r7, r1
 800b72a:	e7da      	b.n	800b6e2 <rshift+0x4c>
 800b72c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b730:	f847 cf04 	str.w	ip, [r7, #4]!
 800b734:	e7c3      	b.n	800b6be <rshift+0x28>
 800b736:	4623      	mov	r3, r4
 800b738:	e7e1      	b.n	800b6fe <rshift+0x68>

0800b73a <__hexdig_fun>:
 800b73a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b73e:	2b09      	cmp	r3, #9
 800b740:	d802      	bhi.n	800b748 <__hexdig_fun+0xe>
 800b742:	3820      	subs	r0, #32
 800b744:	b2c0      	uxtb	r0, r0
 800b746:	4770      	bx	lr
 800b748:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b74c:	2b05      	cmp	r3, #5
 800b74e:	d801      	bhi.n	800b754 <__hexdig_fun+0x1a>
 800b750:	3847      	subs	r0, #71	; 0x47
 800b752:	e7f7      	b.n	800b744 <__hexdig_fun+0xa>
 800b754:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b758:	2b05      	cmp	r3, #5
 800b75a:	d801      	bhi.n	800b760 <__hexdig_fun+0x26>
 800b75c:	3827      	subs	r0, #39	; 0x27
 800b75e:	e7f1      	b.n	800b744 <__hexdig_fun+0xa>
 800b760:	2000      	movs	r0, #0
 800b762:	4770      	bx	lr

0800b764 <__gethex>:
 800b764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b768:	ed2d 8b02 	vpush	{d8}
 800b76c:	b089      	sub	sp, #36	; 0x24
 800b76e:	ee08 0a10 	vmov	s16, r0
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	4bbc      	ldr	r3, [pc, #752]	; (800ba68 <__gethex+0x304>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	9301      	str	r3, [sp, #4]
 800b77a:	4618      	mov	r0, r3
 800b77c:	468b      	mov	fp, r1
 800b77e:	4690      	mov	r8, r2
 800b780:	f7f4 fd26 	bl	80001d0 <strlen>
 800b784:	9b01      	ldr	r3, [sp, #4]
 800b786:	f8db 2000 	ldr.w	r2, [fp]
 800b78a:	4403      	add	r3, r0
 800b78c:	4682      	mov	sl, r0
 800b78e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b792:	9305      	str	r3, [sp, #20]
 800b794:	1c93      	adds	r3, r2, #2
 800b796:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b79a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b79e:	32fe      	adds	r2, #254	; 0xfe
 800b7a0:	18d1      	adds	r1, r2, r3
 800b7a2:	461f      	mov	r7, r3
 800b7a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b7a8:	9100      	str	r1, [sp, #0]
 800b7aa:	2830      	cmp	r0, #48	; 0x30
 800b7ac:	d0f8      	beq.n	800b7a0 <__gethex+0x3c>
 800b7ae:	f7ff ffc4 	bl	800b73a <__hexdig_fun>
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d13a      	bne.n	800b82e <__gethex+0xca>
 800b7b8:	9901      	ldr	r1, [sp, #4]
 800b7ba:	4652      	mov	r2, sl
 800b7bc:	4638      	mov	r0, r7
 800b7be:	f001 fbe6 	bl	800cf8e <strncmp>
 800b7c2:	4605      	mov	r5, r0
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d168      	bne.n	800b89a <__gethex+0x136>
 800b7c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b7cc:	eb07 060a 	add.w	r6, r7, sl
 800b7d0:	f7ff ffb3 	bl	800b73a <__hexdig_fun>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d062      	beq.n	800b89e <__gethex+0x13a>
 800b7d8:	4633      	mov	r3, r6
 800b7da:	7818      	ldrb	r0, [r3, #0]
 800b7dc:	2830      	cmp	r0, #48	; 0x30
 800b7de:	461f      	mov	r7, r3
 800b7e0:	f103 0301 	add.w	r3, r3, #1
 800b7e4:	d0f9      	beq.n	800b7da <__gethex+0x76>
 800b7e6:	f7ff ffa8 	bl	800b73a <__hexdig_fun>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	fab0 f480 	clz	r4, r0
 800b7f0:	0964      	lsrs	r4, r4, #5
 800b7f2:	4635      	mov	r5, r6
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	463a      	mov	r2, r7
 800b7f8:	4616      	mov	r6, r2
 800b7fa:	3201      	adds	r2, #1
 800b7fc:	7830      	ldrb	r0, [r6, #0]
 800b7fe:	f7ff ff9c 	bl	800b73a <__hexdig_fun>
 800b802:	2800      	cmp	r0, #0
 800b804:	d1f8      	bne.n	800b7f8 <__gethex+0x94>
 800b806:	9901      	ldr	r1, [sp, #4]
 800b808:	4652      	mov	r2, sl
 800b80a:	4630      	mov	r0, r6
 800b80c:	f001 fbbf 	bl	800cf8e <strncmp>
 800b810:	b980      	cbnz	r0, 800b834 <__gethex+0xd0>
 800b812:	b94d      	cbnz	r5, 800b828 <__gethex+0xc4>
 800b814:	eb06 050a 	add.w	r5, r6, sl
 800b818:	462a      	mov	r2, r5
 800b81a:	4616      	mov	r6, r2
 800b81c:	3201      	adds	r2, #1
 800b81e:	7830      	ldrb	r0, [r6, #0]
 800b820:	f7ff ff8b 	bl	800b73a <__hexdig_fun>
 800b824:	2800      	cmp	r0, #0
 800b826:	d1f8      	bne.n	800b81a <__gethex+0xb6>
 800b828:	1bad      	subs	r5, r5, r6
 800b82a:	00ad      	lsls	r5, r5, #2
 800b82c:	e004      	b.n	800b838 <__gethex+0xd4>
 800b82e:	2400      	movs	r4, #0
 800b830:	4625      	mov	r5, r4
 800b832:	e7e0      	b.n	800b7f6 <__gethex+0x92>
 800b834:	2d00      	cmp	r5, #0
 800b836:	d1f7      	bne.n	800b828 <__gethex+0xc4>
 800b838:	7833      	ldrb	r3, [r6, #0]
 800b83a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b83e:	2b50      	cmp	r3, #80	; 0x50
 800b840:	d13b      	bne.n	800b8ba <__gethex+0x156>
 800b842:	7873      	ldrb	r3, [r6, #1]
 800b844:	2b2b      	cmp	r3, #43	; 0x2b
 800b846:	d02c      	beq.n	800b8a2 <__gethex+0x13e>
 800b848:	2b2d      	cmp	r3, #45	; 0x2d
 800b84a:	d02e      	beq.n	800b8aa <__gethex+0x146>
 800b84c:	1c71      	adds	r1, r6, #1
 800b84e:	f04f 0900 	mov.w	r9, #0
 800b852:	7808      	ldrb	r0, [r1, #0]
 800b854:	f7ff ff71 	bl	800b73a <__hexdig_fun>
 800b858:	1e43      	subs	r3, r0, #1
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b18      	cmp	r3, #24
 800b85e:	d82c      	bhi.n	800b8ba <__gethex+0x156>
 800b860:	f1a0 0210 	sub.w	r2, r0, #16
 800b864:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b868:	f7ff ff67 	bl	800b73a <__hexdig_fun>
 800b86c:	1e43      	subs	r3, r0, #1
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	2b18      	cmp	r3, #24
 800b872:	d91d      	bls.n	800b8b0 <__gethex+0x14c>
 800b874:	f1b9 0f00 	cmp.w	r9, #0
 800b878:	d000      	beq.n	800b87c <__gethex+0x118>
 800b87a:	4252      	negs	r2, r2
 800b87c:	4415      	add	r5, r2
 800b87e:	f8cb 1000 	str.w	r1, [fp]
 800b882:	b1e4      	cbz	r4, 800b8be <__gethex+0x15a>
 800b884:	9b00      	ldr	r3, [sp, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	bf14      	ite	ne
 800b88a:	2700      	movne	r7, #0
 800b88c:	2706      	moveq	r7, #6
 800b88e:	4638      	mov	r0, r7
 800b890:	b009      	add	sp, #36	; 0x24
 800b892:	ecbd 8b02 	vpop	{d8}
 800b896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89a:	463e      	mov	r6, r7
 800b89c:	4625      	mov	r5, r4
 800b89e:	2401      	movs	r4, #1
 800b8a0:	e7ca      	b.n	800b838 <__gethex+0xd4>
 800b8a2:	f04f 0900 	mov.w	r9, #0
 800b8a6:	1cb1      	adds	r1, r6, #2
 800b8a8:	e7d3      	b.n	800b852 <__gethex+0xee>
 800b8aa:	f04f 0901 	mov.w	r9, #1
 800b8ae:	e7fa      	b.n	800b8a6 <__gethex+0x142>
 800b8b0:	230a      	movs	r3, #10
 800b8b2:	fb03 0202 	mla	r2, r3, r2, r0
 800b8b6:	3a10      	subs	r2, #16
 800b8b8:	e7d4      	b.n	800b864 <__gethex+0x100>
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	e7df      	b.n	800b87e <__gethex+0x11a>
 800b8be:	1bf3      	subs	r3, r6, r7
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	2b07      	cmp	r3, #7
 800b8c6:	dc0b      	bgt.n	800b8e0 <__gethex+0x17c>
 800b8c8:	ee18 0a10 	vmov	r0, s16
 800b8cc:	f000 fad8 	bl	800be80 <_Balloc>
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	b940      	cbnz	r0, 800b8e6 <__gethex+0x182>
 800b8d4:	4b65      	ldr	r3, [pc, #404]	; (800ba6c <__gethex+0x308>)
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	21de      	movs	r1, #222	; 0xde
 800b8da:	4865      	ldr	r0, [pc, #404]	; (800ba70 <__gethex+0x30c>)
 800b8dc:	f001 fb88 	bl	800cff0 <__assert_func>
 800b8e0:	3101      	adds	r1, #1
 800b8e2:	105b      	asrs	r3, r3, #1
 800b8e4:	e7ee      	b.n	800b8c4 <__gethex+0x160>
 800b8e6:	f100 0914 	add.w	r9, r0, #20
 800b8ea:	f04f 0b00 	mov.w	fp, #0
 800b8ee:	f1ca 0301 	rsb	r3, sl, #1
 800b8f2:	f8cd 9008 	str.w	r9, [sp, #8]
 800b8f6:	f8cd b000 	str.w	fp, [sp]
 800b8fa:	9306      	str	r3, [sp, #24]
 800b8fc:	42b7      	cmp	r7, r6
 800b8fe:	d340      	bcc.n	800b982 <__gethex+0x21e>
 800b900:	9802      	ldr	r0, [sp, #8]
 800b902:	9b00      	ldr	r3, [sp, #0]
 800b904:	f840 3b04 	str.w	r3, [r0], #4
 800b908:	eba0 0009 	sub.w	r0, r0, r9
 800b90c:	1080      	asrs	r0, r0, #2
 800b90e:	0146      	lsls	r6, r0, #5
 800b910:	6120      	str	r0, [r4, #16]
 800b912:	4618      	mov	r0, r3
 800b914:	f000 fbaa 	bl	800c06c <__hi0bits>
 800b918:	1a30      	subs	r0, r6, r0
 800b91a:	f8d8 6000 	ldr.w	r6, [r8]
 800b91e:	42b0      	cmp	r0, r6
 800b920:	dd63      	ble.n	800b9ea <__gethex+0x286>
 800b922:	1b87      	subs	r7, r0, r6
 800b924:	4639      	mov	r1, r7
 800b926:	4620      	mov	r0, r4
 800b928:	f000 ff44 	bl	800c7b4 <__any_on>
 800b92c:	4682      	mov	sl, r0
 800b92e:	b1a8      	cbz	r0, 800b95c <__gethex+0x1f8>
 800b930:	1e7b      	subs	r3, r7, #1
 800b932:	1159      	asrs	r1, r3, #5
 800b934:	f003 021f 	and.w	r2, r3, #31
 800b938:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b93c:	f04f 0a01 	mov.w	sl, #1
 800b940:	fa0a f202 	lsl.w	r2, sl, r2
 800b944:	420a      	tst	r2, r1
 800b946:	d009      	beq.n	800b95c <__gethex+0x1f8>
 800b948:	4553      	cmp	r3, sl
 800b94a:	dd05      	ble.n	800b958 <__gethex+0x1f4>
 800b94c:	1eb9      	subs	r1, r7, #2
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 ff30 	bl	800c7b4 <__any_on>
 800b954:	2800      	cmp	r0, #0
 800b956:	d145      	bne.n	800b9e4 <__gethex+0x280>
 800b958:	f04f 0a02 	mov.w	sl, #2
 800b95c:	4639      	mov	r1, r7
 800b95e:	4620      	mov	r0, r4
 800b960:	f7ff fe99 	bl	800b696 <rshift>
 800b964:	443d      	add	r5, r7
 800b966:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b96a:	42ab      	cmp	r3, r5
 800b96c:	da4c      	bge.n	800ba08 <__gethex+0x2a4>
 800b96e:	ee18 0a10 	vmov	r0, s16
 800b972:	4621      	mov	r1, r4
 800b974:	f000 fac4 	bl	800bf00 <_Bfree>
 800b978:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b97a:	2300      	movs	r3, #0
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	27a3      	movs	r7, #163	; 0xa3
 800b980:	e785      	b.n	800b88e <__gethex+0x12a>
 800b982:	1e73      	subs	r3, r6, #1
 800b984:	9a05      	ldr	r2, [sp, #20]
 800b986:	9303      	str	r3, [sp, #12]
 800b988:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d019      	beq.n	800b9c4 <__gethex+0x260>
 800b990:	f1bb 0f20 	cmp.w	fp, #32
 800b994:	d107      	bne.n	800b9a6 <__gethex+0x242>
 800b996:	9b02      	ldr	r3, [sp, #8]
 800b998:	9a00      	ldr	r2, [sp, #0]
 800b99a:	f843 2b04 	str.w	r2, [r3], #4
 800b99e:	9302      	str	r3, [sp, #8]
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	469b      	mov	fp, r3
 800b9a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b9aa:	f7ff fec6 	bl	800b73a <__hexdig_fun>
 800b9ae:	9b00      	ldr	r3, [sp, #0]
 800b9b0:	f000 000f 	and.w	r0, r0, #15
 800b9b4:	fa00 f00b 	lsl.w	r0, r0, fp
 800b9b8:	4303      	orrs	r3, r0
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	f10b 0b04 	add.w	fp, fp, #4
 800b9c0:	9b03      	ldr	r3, [sp, #12]
 800b9c2:	e00d      	b.n	800b9e0 <__gethex+0x27c>
 800b9c4:	9b03      	ldr	r3, [sp, #12]
 800b9c6:	9a06      	ldr	r2, [sp, #24]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	42bb      	cmp	r3, r7
 800b9cc:	d3e0      	bcc.n	800b990 <__gethex+0x22c>
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	9901      	ldr	r1, [sp, #4]
 800b9d2:	9307      	str	r3, [sp, #28]
 800b9d4:	4652      	mov	r2, sl
 800b9d6:	f001 fada 	bl	800cf8e <strncmp>
 800b9da:	9b07      	ldr	r3, [sp, #28]
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d1d7      	bne.n	800b990 <__gethex+0x22c>
 800b9e0:	461e      	mov	r6, r3
 800b9e2:	e78b      	b.n	800b8fc <__gethex+0x198>
 800b9e4:	f04f 0a03 	mov.w	sl, #3
 800b9e8:	e7b8      	b.n	800b95c <__gethex+0x1f8>
 800b9ea:	da0a      	bge.n	800ba02 <__gethex+0x29e>
 800b9ec:	1a37      	subs	r7, r6, r0
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	ee18 0a10 	vmov	r0, s16
 800b9f4:	463a      	mov	r2, r7
 800b9f6:	f000 fc9f 	bl	800c338 <__lshift>
 800b9fa:	1bed      	subs	r5, r5, r7
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	f100 0914 	add.w	r9, r0, #20
 800ba02:	f04f 0a00 	mov.w	sl, #0
 800ba06:	e7ae      	b.n	800b966 <__gethex+0x202>
 800ba08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ba0c:	42a8      	cmp	r0, r5
 800ba0e:	dd72      	ble.n	800baf6 <__gethex+0x392>
 800ba10:	1b45      	subs	r5, r0, r5
 800ba12:	42ae      	cmp	r6, r5
 800ba14:	dc36      	bgt.n	800ba84 <__gethex+0x320>
 800ba16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d02a      	beq.n	800ba74 <__gethex+0x310>
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d02c      	beq.n	800ba7c <__gethex+0x318>
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d115      	bne.n	800ba52 <__gethex+0x2ee>
 800ba26:	42ae      	cmp	r6, r5
 800ba28:	d113      	bne.n	800ba52 <__gethex+0x2ee>
 800ba2a:	2e01      	cmp	r6, #1
 800ba2c:	d10b      	bne.n	800ba46 <__gethex+0x2e2>
 800ba2e:	9a04      	ldr	r2, [sp, #16]
 800ba30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	2301      	movs	r3, #1
 800ba38:	6123      	str	r3, [r4, #16]
 800ba3a:	f8c9 3000 	str.w	r3, [r9]
 800ba3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba40:	2762      	movs	r7, #98	; 0x62
 800ba42:	601c      	str	r4, [r3, #0]
 800ba44:	e723      	b.n	800b88e <__gethex+0x12a>
 800ba46:	1e71      	subs	r1, r6, #1
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 feb3 	bl	800c7b4 <__any_on>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d1ed      	bne.n	800ba2e <__gethex+0x2ca>
 800ba52:	ee18 0a10 	vmov	r0, s16
 800ba56:	4621      	mov	r1, r4
 800ba58:	f000 fa52 	bl	800bf00 <_Bfree>
 800ba5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6013      	str	r3, [r2, #0]
 800ba62:	2750      	movs	r7, #80	; 0x50
 800ba64:	e713      	b.n	800b88e <__gethex+0x12a>
 800ba66:	bf00      	nop
 800ba68:	0800d7fc 	.word	0x0800d7fc
 800ba6c:	0800d71c 	.word	0x0800d71c
 800ba70:	0800d790 	.word	0x0800d790
 800ba74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1eb      	bne.n	800ba52 <__gethex+0x2ee>
 800ba7a:	e7d8      	b.n	800ba2e <__gethex+0x2ca>
 800ba7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1d5      	bne.n	800ba2e <__gethex+0x2ca>
 800ba82:	e7e6      	b.n	800ba52 <__gethex+0x2ee>
 800ba84:	1e6f      	subs	r7, r5, #1
 800ba86:	f1ba 0f00 	cmp.w	sl, #0
 800ba8a:	d131      	bne.n	800baf0 <__gethex+0x38c>
 800ba8c:	b127      	cbz	r7, 800ba98 <__gethex+0x334>
 800ba8e:	4639      	mov	r1, r7
 800ba90:	4620      	mov	r0, r4
 800ba92:	f000 fe8f 	bl	800c7b4 <__any_on>
 800ba96:	4682      	mov	sl, r0
 800ba98:	117b      	asrs	r3, r7, #5
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800baa0:	f007 071f 	and.w	r7, r7, #31
 800baa4:	fa01 f707 	lsl.w	r7, r1, r7
 800baa8:	421f      	tst	r7, r3
 800baaa:	4629      	mov	r1, r5
 800baac:	4620      	mov	r0, r4
 800baae:	bf18      	it	ne
 800bab0:	f04a 0a02 	orrne.w	sl, sl, #2
 800bab4:	1b76      	subs	r6, r6, r5
 800bab6:	f7ff fdee 	bl	800b696 <rshift>
 800baba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800babe:	2702      	movs	r7, #2
 800bac0:	f1ba 0f00 	cmp.w	sl, #0
 800bac4:	d048      	beq.n	800bb58 <__gethex+0x3f4>
 800bac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d015      	beq.n	800bafa <__gethex+0x396>
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d017      	beq.n	800bb02 <__gethex+0x39e>
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d109      	bne.n	800baea <__gethex+0x386>
 800bad6:	f01a 0f02 	tst.w	sl, #2
 800bada:	d006      	beq.n	800baea <__gethex+0x386>
 800badc:	f8d9 0000 	ldr.w	r0, [r9]
 800bae0:	ea4a 0a00 	orr.w	sl, sl, r0
 800bae4:	f01a 0f01 	tst.w	sl, #1
 800bae8:	d10e      	bne.n	800bb08 <__gethex+0x3a4>
 800baea:	f047 0710 	orr.w	r7, r7, #16
 800baee:	e033      	b.n	800bb58 <__gethex+0x3f4>
 800baf0:	f04f 0a01 	mov.w	sl, #1
 800baf4:	e7d0      	b.n	800ba98 <__gethex+0x334>
 800baf6:	2701      	movs	r7, #1
 800baf8:	e7e2      	b.n	800bac0 <__gethex+0x35c>
 800bafa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bafc:	f1c3 0301 	rsb	r3, r3, #1
 800bb00:	9315      	str	r3, [sp, #84]	; 0x54
 800bb02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d0f0      	beq.n	800baea <__gethex+0x386>
 800bb08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bb0c:	f104 0314 	add.w	r3, r4, #20
 800bb10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bb14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bb18:	f04f 0c00 	mov.w	ip, #0
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb22:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bb26:	d01c      	beq.n	800bb62 <__gethex+0x3fe>
 800bb28:	3201      	adds	r2, #1
 800bb2a:	6002      	str	r2, [r0, #0]
 800bb2c:	2f02      	cmp	r7, #2
 800bb2e:	f104 0314 	add.w	r3, r4, #20
 800bb32:	d13f      	bne.n	800bbb4 <__gethex+0x450>
 800bb34:	f8d8 2000 	ldr.w	r2, [r8]
 800bb38:	3a01      	subs	r2, #1
 800bb3a:	42b2      	cmp	r2, r6
 800bb3c:	d10a      	bne.n	800bb54 <__gethex+0x3f0>
 800bb3e:	1171      	asrs	r1, r6, #5
 800bb40:	2201      	movs	r2, #1
 800bb42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb46:	f006 061f 	and.w	r6, r6, #31
 800bb4a:	fa02 f606 	lsl.w	r6, r2, r6
 800bb4e:	421e      	tst	r6, r3
 800bb50:	bf18      	it	ne
 800bb52:	4617      	movne	r7, r2
 800bb54:	f047 0720 	orr.w	r7, r7, #32
 800bb58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb5a:	601c      	str	r4, [r3, #0]
 800bb5c:	9b04      	ldr	r3, [sp, #16]
 800bb5e:	601d      	str	r5, [r3, #0]
 800bb60:	e695      	b.n	800b88e <__gethex+0x12a>
 800bb62:	4299      	cmp	r1, r3
 800bb64:	f843 cc04 	str.w	ip, [r3, #-4]
 800bb68:	d8d8      	bhi.n	800bb1c <__gethex+0x3b8>
 800bb6a:	68a3      	ldr	r3, [r4, #8]
 800bb6c:	459b      	cmp	fp, r3
 800bb6e:	db19      	blt.n	800bba4 <__gethex+0x440>
 800bb70:	6861      	ldr	r1, [r4, #4]
 800bb72:	ee18 0a10 	vmov	r0, s16
 800bb76:	3101      	adds	r1, #1
 800bb78:	f000 f982 	bl	800be80 <_Balloc>
 800bb7c:	4681      	mov	r9, r0
 800bb7e:	b918      	cbnz	r0, 800bb88 <__gethex+0x424>
 800bb80:	4b1a      	ldr	r3, [pc, #104]	; (800bbec <__gethex+0x488>)
 800bb82:	4602      	mov	r2, r0
 800bb84:	2184      	movs	r1, #132	; 0x84
 800bb86:	e6a8      	b.n	800b8da <__gethex+0x176>
 800bb88:	6922      	ldr	r2, [r4, #16]
 800bb8a:	3202      	adds	r2, #2
 800bb8c:	f104 010c 	add.w	r1, r4, #12
 800bb90:	0092      	lsls	r2, r2, #2
 800bb92:	300c      	adds	r0, #12
 800bb94:	f7fc fe96 	bl	80088c4 <memcpy>
 800bb98:	4621      	mov	r1, r4
 800bb9a:	ee18 0a10 	vmov	r0, s16
 800bb9e:	f000 f9af 	bl	800bf00 <_Bfree>
 800bba2:	464c      	mov	r4, r9
 800bba4:	6923      	ldr	r3, [r4, #16]
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbac:	6122      	str	r2, [r4, #16]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	615a      	str	r2, [r3, #20]
 800bbb2:	e7bb      	b.n	800bb2c <__gethex+0x3c8>
 800bbb4:	6922      	ldr	r2, [r4, #16]
 800bbb6:	455a      	cmp	r2, fp
 800bbb8:	dd0b      	ble.n	800bbd2 <__gethex+0x46e>
 800bbba:	2101      	movs	r1, #1
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f7ff fd6a 	bl	800b696 <rshift>
 800bbc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bbc6:	3501      	adds	r5, #1
 800bbc8:	42ab      	cmp	r3, r5
 800bbca:	f6ff aed0 	blt.w	800b96e <__gethex+0x20a>
 800bbce:	2701      	movs	r7, #1
 800bbd0:	e7c0      	b.n	800bb54 <__gethex+0x3f0>
 800bbd2:	f016 061f 	ands.w	r6, r6, #31
 800bbd6:	d0fa      	beq.n	800bbce <__gethex+0x46a>
 800bbd8:	449a      	add	sl, r3
 800bbda:	f1c6 0620 	rsb	r6, r6, #32
 800bbde:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bbe2:	f000 fa43 	bl	800c06c <__hi0bits>
 800bbe6:	42b0      	cmp	r0, r6
 800bbe8:	dbe7      	blt.n	800bbba <__gethex+0x456>
 800bbea:	e7f0      	b.n	800bbce <__gethex+0x46a>
 800bbec:	0800d71c 	.word	0x0800d71c

0800bbf0 <L_shift>:
 800bbf0:	f1c2 0208 	rsb	r2, r2, #8
 800bbf4:	0092      	lsls	r2, r2, #2
 800bbf6:	b570      	push	{r4, r5, r6, lr}
 800bbf8:	f1c2 0620 	rsb	r6, r2, #32
 800bbfc:	6843      	ldr	r3, [r0, #4]
 800bbfe:	6804      	ldr	r4, [r0, #0]
 800bc00:	fa03 f506 	lsl.w	r5, r3, r6
 800bc04:	432c      	orrs	r4, r5
 800bc06:	40d3      	lsrs	r3, r2
 800bc08:	6004      	str	r4, [r0, #0]
 800bc0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bc0e:	4288      	cmp	r0, r1
 800bc10:	d3f4      	bcc.n	800bbfc <L_shift+0xc>
 800bc12:	bd70      	pop	{r4, r5, r6, pc}

0800bc14 <__match>:
 800bc14:	b530      	push	{r4, r5, lr}
 800bc16:	6803      	ldr	r3, [r0, #0]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc1e:	b914      	cbnz	r4, 800bc26 <__match+0x12>
 800bc20:	6003      	str	r3, [r0, #0]
 800bc22:	2001      	movs	r0, #1
 800bc24:	bd30      	pop	{r4, r5, pc}
 800bc26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bc2e:	2d19      	cmp	r5, #25
 800bc30:	bf98      	it	ls
 800bc32:	3220      	addls	r2, #32
 800bc34:	42a2      	cmp	r2, r4
 800bc36:	d0f0      	beq.n	800bc1a <__match+0x6>
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e7f3      	b.n	800bc24 <__match+0x10>

0800bc3c <__hexnan>:
 800bc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc40:	680b      	ldr	r3, [r1, #0]
 800bc42:	6801      	ldr	r1, [r0, #0]
 800bc44:	115e      	asrs	r6, r3, #5
 800bc46:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bc4a:	f013 031f 	ands.w	r3, r3, #31
 800bc4e:	b087      	sub	sp, #28
 800bc50:	bf18      	it	ne
 800bc52:	3604      	addne	r6, #4
 800bc54:	2500      	movs	r5, #0
 800bc56:	1f37      	subs	r7, r6, #4
 800bc58:	4682      	mov	sl, r0
 800bc5a:	4690      	mov	r8, r2
 800bc5c:	9301      	str	r3, [sp, #4]
 800bc5e:	f846 5c04 	str.w	r5, [r6, #-4]
 800bc62:	46b9      	mov	r9, r7
 800bc64:	463c      	mov	r4, r7
 800bc66:	9502      	str	r5, [sp, #8]
 800bc68:	46ab      	mov	fp, r5
 800bc6a:	784a      	ldrb	r2, [r1, #1]
 800bc6c:	1c4b      	adds	r3, r1, #1
 800bc6e:	9303      	str	r3, [sp, #12]
 800bc70:	b342      	cbz	r2, 800bcc4 <__hexnan+0x88>
 800bc72:	4610      	mov	r0, r2
 800bc74:	9105      	str	r1, [sp, #20]
 800bc76:	9204      	str	r2, [sp, #16]
 800bc78:	f7ff fd5f 	bl	800b73a <__hexdig_fun>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d14f      	bne.n	800bd20 <__hexnan+0xe4>
 800bc80:	9a04      	ldr	r2, [sp, #16]
 800bc82:	9905      	ldr	r1, [sp, #20]
 800bc84:	2a20      	cmp	r2, #32
 800bc86:	d818      	bhi.n	800bcba <__hexnan+0x7e>
 800bc88:	9b02      	ldr	r3, [sp, #8]
 800bc8a:	459b      	cmp	fp, r3
 800bc8c:	dd13      	ble.n	800bcb6 <__hexnan+0x7a>
 800bc8e:	454c      	cmp	r4, r9
 800bc90:	d206      	bcs.n	800bca0 <__hexnan+0x64>
 800bc92:	2d07      	cmp	r5, #7
 800bc94:	dc04      	bgt.n	800bca0 <__hexnan+0x64>
 800bc96:	462a      	mov	r2, r5
 800bc98:	4649      	mov	r1, r9
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f7ff ffa8 	bl	800bbf0 <L_shift>
 800bca0:	4544      	cmp	r4, r8
 800bca2:	d950      	bls.n	800bd46 <__hexnan+0x10a>
 800bca4:	2300      	movs	r3, #0
 800bca6:	f1a4 0904 	sub.w	r9, r4, #4
 800bcaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcae:	f8cd b008 	str.w	fp, [sp, #8]
 800bcb2:	464c      	mov	r4, r9
 800bcb4:	461d      	mov	r5, r3
 800bcb6:	9903      	ldr	r1, [sp, #12]
 800bcb8:	e7d7      	b.n	800bc6a <__hexnan+0x2e>
 800bcba:	2a29      	cmp	r2, #41	; 0x29
 800bcbc:	d156      	bne.n	800bd6c <__hexnan+0x130>
 800bcbe:	3102      	adds	r1, #2
 800bcc0:	f8ca 1000 	str.w	r1, [sl]
 800bcc4:	f1bb 0f00 	cmp.w	fp, #0
 800bcc8:	d050      	beq.n	800bd6c <__hexnan+0x130>
 800bcca:	454c      	cmp	r4, r9
 800bccc:	d206      	bcs.n	800bcdc <__hexnan+0xa0>
 800bcce:	2d07      	cmp	r5, #7
 800bcd0:	dc04      	bgt.n	800bcdc <__hexnan+0xa0>
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f7ff ff8a 	bl	800bbf0 <L_shift>
 800bcdc:	4544      	cmp	r4, r8
 800bcde:	d934      	bls.n	800bd4a <__hexnan+0x10e>
 800bce0:	f1a8 0204 	sub.w	r2, r8, #4
 800bce4:	4623      	mov	r3, r4
 800bce6:	f853 1b04 	ldr.w	r1, [r3], #4
 800bcea:	f842 1f04 	str.w	r1, [r2, #4]!
 800bcee:	429f      	cmp	r7, r3
 800bcf0:	d2f9      	bcs.n	800bce6 <__hexnan+0xaa>
 800bcf2:	1b3b      	subs	r3, r7, r4
 800bcf4:	f023 0303 	bic.w	r3, r3, #3
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	3401      	adds	r4, #1
 800bcfc:	3e03      	subs	r6, #3
 800bcfe:	42b4      	cmp	r4, r6
 800bd00:	bf88      	it	hi
 800bd02:	2304      	movhi	r3, #4
 800bd04:	4443      	add	r3, r8
 800bd06:	2200      	movs	r2, #0
 800bd08:	f843 2b04 	str.w	r2, [r3], #4
 800bd0c:	429f      	cmp	r7, r3
 800bd0e:	d2fb      	bcs.n	800bd08 <__hexnan+0xcc>
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	b91b      	cbnz	r3, 800bd1c <__hexnan+0xe0>
 800bd14:	4547      	cmp	r7, r8
 800bd16:	d127      	bne.n	800bd68 <__hexnan+0x12c>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	603b      	str	r3, [r7, #0]
 800bd1c:	2005      	movs	r0, #5
 800bd1e:	e026      	b.n	800bd6e <__hexnan+0x132>
 800bd20:	3501      	adds	r5, #1
 800bd22:	2d08      	cmp	r5, #8
 800bd24:	f10b 0b01 	add.w	fp, fp, #1
 800bd28:	dd06      	ble.n	800bd38 <__hexnan+0xfc>
 800bd2a:	4544      	cmp	r4, r8
 800bd2c:	d9c3      	bls.n	800bcb6 <__hexnan+0x7a>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd34:	2501      	movs	r5, #1
 800bd36:	3c04      	subs	r4, #4
 800bd38:	6822      	ldr	r2, [r4, #0]
 800bd3a:	f000 000f 	and.w	r0, r0, #15
 800bd3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bd42:	6022      	str	r2, [r4, #0]
 800bd44:	e7b7      	b.n	800bcb6 <__hexnan+0x7a>
 800bd46:	2508      	movs	r5, #8
 800bd48:	e7b5      	b.n	800bcb6 <__hexnan+0x7a>
 800bd4a:	9b01      	ldr	r3, [sp, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0df      	beq.n	800bd10 <__hexnan+0xd4>
 800bd50:	f04f 32ff 	mov.w	r2, #4294967295
 800bd54:	f1c3 0320 	rsb	r3, r3, #32
 800bd58:	fa22 f303 	lsr.w	r3, r2, r3
 800bd5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bd60:	401a      	ands	r2, r3
 800bd62:	f846 2c04 	str.w	r2, [r6, #-4]
 800bd66:	e7d3      	b.n	800bd10 <__hexnan+0xd4>
 800bd68:	3f04      	subs	r7, #4
 800bd6a:	e7d1      	b.n	800bd10 <__hexnan+0xd4>
 800bd6c:	2004      	movs	r0, #4
 800bd6e:	b007      	add	sp, #28
 800bd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd74 <_localeconv_r>:
 800bd74:	4800      	ldr	r0, [pc, #0]	; (800bd78 <_localeconv_r+0x4>)
 800bd76:	4770      	bx	lr
 800bd78:	20000164 	.word	0x20000164

0800bd7c <__retarget_lock_init_recursive>:
 800bd7c:	4770      	bx	lr

0800bd7e <__retarget_lock_acquire_recursive>:
 800bd7e:	4770      	bx	lr

0800bd80 <__retarget_lock_release_recursive>:
 800bd80:	4770      	bx	lr

0800bd82 <__swhatbuf_r>:
 800bd82:	b570      	push	{r4, r5, r6, lr}
 800bd84:	460e      	mov	r6, r1
 800bd86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd8a:	2900      	cmp	r1, #0
 800bd8c:	b096      	sub	sp, #88	; 0x58
 800bd8e:	4614      	mov	r4, r2
 800bd90:	461d      	mov	r5, r3
 800bd92:	da07      	bge.n	800bda4 <__swhatbuf_r+0x22>
 800bd94:	2300      	movs	r3, #0
 800bd96:	602b      	str	r3, [r5, #0]
 800bd98:	89b3      	ldrh	r3, [r6, #12]
 800bd9a:	061a      	lsls	r2, r3, #24
 800bd9c:	d410      	bmi.n	800bdc0 <__swhatbuf_r+0x3e>
 800bd9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bda2:	e00e      	b.n	800bdc2 <__swhatbuf_r+0x40>
 800bda4:	466a      	mov	r2, sp
 800bda6:	f001 f963 	bl	800d070 <_fstat_r>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	dbf2      	blt.n	800bd94 <__swhatbuf_r+0x12>
 800bdae:	9a01      	ldr	r2, [sp, #4]
 800bdb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bdb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bdb8:	425a      	negs	r2, r3
 800bdba:	415a      	adcs	r2, r3
 800bdbc:	602a      	str	r2, [r5, #0]
 800bdbe:	e7ee      	b.n	800bd9e <__swhatbuf_r+0x1c>
 800bdc0:	2340      	movs	r3, #64	; 0x40
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	b016      	add	sp, #88	; 0x58
 800bdc8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bdcc <__smakebuf_r>:
 800bdcc:	898b      	ldrh	r3, [r1, #12]
 800bdce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdd0:	079d      	lsls	r5, r3, #30
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	460c      	mov	r4, r1
 800bdd6:	d507      	bpl.n	800bde8 <__smakebuf_r+0x1c>
 800bdd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	6123      	str	r3, [r4, #16]
 800bde0:	2301      	movs	r3, #1
 800bde2:	6163      	str	r3, [r4, #20]
 800bde4:	b002      	add	sp, #8
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
 800bde8:	ab01      	add	r3, sp, #4
 800bdea:	466a      	mov	r2, sp
 800bdec:	f7ff ffc9 	bl	800bd82 <__swhatbuf_r>
 800bdf0:	9900      	ldr	r1, [sp, #0]
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f000 fd5d 	bl	800c8b4 <_malloc_r>
 800bdfa:	b948      	cbnz	r0, 800be10 <__smakebuf_r+0x44>
 800bdfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be00:	059a      	lsls	r2, r3, #22
 800be02:	d4ef      	bmi.n	800bde4 <__smakebuf_r+0x18>
 800be04:	f023 0303 	bic.w	r3, r3, #3
 800be08:	f043 0302 	orr.w	r3, r3, #2
 800be0c:	81a3      	strh	r3, [r4, #12]
 800be0e:	e7e3      	b.n	800bdd8 <__smakebuf_r+0xc>
 800be10:	4b0d      	ldr	r3, [pc, #52]	; (800be48 <__smakebuf_r+0x7c>)
 800be12:	62b3      	str	r3, [r6, #40]	; 0x28
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	6020      	str	r0, [r4, #0]
 800be18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be1c:	81a3      	strh	r3, [r4, #12]
 800be1e:	9b00      	ldr	r3, [sp, #0]
 800be20:	6163      	str	r3, [r4, #20]
 800be22:	9b01      	ldr	r3, [sp, #4]
 800be24:	6120      	str	r0, [r4, #16]
 800be26:	b15b      	cbz	r3, 800be40 <__smakebuf_r+0x74>
 800be28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be2c:	4630      	mov	r0, r6
 800be2e:	f001 f931 	bl	800d094 <_isatty_r>
 800be32:	b128      	cbz	r0, 800be40 <__smakebuf_r+0x74>
 800be34:	89a3      	ldrh	r3, [r4, #12]
 800be36:	f023 0303 	bic.w	r3, r3, #3
 800be3a:	f043 0301 	orr.w	r3, r3, #1
 800be3e:	81a3      	strh	r3, [r4, #12]
 800be40:	89a0      	ldrh	r0, [r4, #12]
 800be42:	4305      	orrs	r5, r0
 800be44:	81a5      	strh	r5, [r4, #12]
 800be46:	e7cd      	b.n	800bde4 <__smakebuf_r+0x18>
 800be48:	0800b4f5 	.word	0x0800b4f5

0800be4c <malloc>:
 800be4c:	4b02      	ldr	r3, [pc, #8]	; (800be58 <malloc+0xc>)
 800be4e:	4601      	mov	r1, r0
 800be50:	6818      	ldr	r0, [r3, #0]
 800be52:	f000 bd2f 	b.w	800c8b4 <_malloc_r>
 800be56:	bf00      	nop
 800be58:	2000000c 	.word	0x2000000c

0800be5c <__ascii_mbtowc>:
 800be5c:	b082      	sub	sp, #8
 800be5e:	b901      	cbnz	r1, 800be62 <__ascii_mbtowc+0x6>
 800be60:	a901      	add	r1, sp, #4
 800be62:	b142      	cbz	r2, 800be76 <__ascii_mbtowc+0x1a>
 800be64:	b14b      	cbz	r3, 800be7a <__ascii_mbtowc+0x1e>
 800be66:	7813      	ldrb	r3, [r2, #0]
 800be68:	600b      	str	r3, [r1, #0]
 800be6a:	7812      	ldrb	r2, [r2, #0]
 800be6c:	1e10      	subs	r0, r2, #0
 800be6e:	bf18      	it	ne
 800be70:	2001      	movne	r0, #1
 800be72:	b002      	add	sp, #8
 800be74:	4770      	bx	lr
 800be76:	4610      	mov	r0, r2
 800be78:	e7fb      	b.n	800be72 <__ascii_mbtowc+0x16>
 800be7a:	f06f 0001 	mvn.w	r0, #1
 800be7e:	e7f8      	b.n	800be72 <__ascii_mbtowc+0x16>

0800be80 <_Balloc>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be84:	4604      	mov	r4, r0
 800be86:	460d      	mov	r5, r1
 800be88:	b976      	cbnz	r6, 800bea8 <_Balloc+0x28>
 800be8a:	2010      	movs	r0, #16
 800be8c:	f7ff ffde 	bl	800be4c <malloc>
 800be90:	4602      	mov	r2, r0
 800be92:	6260      	str	r0, [r4, #36]	; 0x24
 800be94:	b920      	cbnz	r0, 800bea0 <_Balloc+0x20>
 800be96:	4b18      	ldr	r3, [pc, #96]	; (800bef8 <_Balloc+0x78>)
 800be98:	4818      	ldr	r0, [pc, #96]	; (800befc <_Balloc+0x7c>)
 800be9a:	2166      	movs	r1, #102	; 0x66
 800be9c:	f001 f8a8 	bl	800cff0 <__assert_func>
 800bea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bea4:	6006      	str	r6, [r0, #0]
 800bea6:	60c6      	str	r6, [r0, #12]
 800bea8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800beaa:	68f3      	ldr	r3, [r6, #12]
 800beac:	b183      	cbz	r3, 800bed0 <_Balloc+0x50>
 800beae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800beb6:	b9b8      	cbnz	r0, 800bee8 <_Balloc+0x68>
 800beb8:	2101      	movs	r1, #1
 800beba:	fa01 f605 	lsl.w	r6, r1, r5
 800bebe:	1d72      	adds	r2, r6, #5
 800bec0:	0092      	lsls	r2, r2, #2
 800bec2:	4620      	mov	r0, r4
 800bec4:	f000 fc97 	bl	800c7f6 <_calloc_r>
 800bec8:	b160      	cbz	r0, 800bee4 <_Balloc+0x64>
 800beca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bece:	e00e      	b.n	800beee <_Balloc+0x6e>
 800bed0:	2221      	movs	r2, #33	; 0x21
 800bed2:	2104      	movs	r1, #4
 800bed4:	4620      	mov	r0, r4
 800bed6:	f000 fc8e 	bl	800c7f6 <_calloc_r>
 800beda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bedc:	60f0      	str	r0, [r6, #12]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1e4      	bne.n	800beae <_Balloc+0x2e>
 800bee4:	2000      	movs	r0, #0
 800bee6:	bd70      	pop	{r4, r5, r6, pc}
 800bee8:	6802      	ldr	r2, [r0, #0]
 800beea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800beee:	2300      	movs	r3, #0
 800bef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bef4:	e7f7      	b.n	800bee6 <_Balloc+0x66>
 800bef6:	bf00      	nop
 800bef8:	0800d6a6 	.word	0x0800d6a6
 800befc:	0800d810 	.word	0x0800d810

0800bf00 <_Bfree>:
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf04:	4605      	mov	r5, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	b976      	cbnz	r6, 800bf28 <_Bfree+0x28>
 800bf0a:	2010      	movs	r0, #16
 800bf0c:	f7ff ff9e 	bl	800be4c <malloc>
 800bf10:	4602      	mov	r2, r0
 800bf12:	6268      	str	r0, [r5, #36]	; 0x24
 800bf14:	b920      	cbnz	r0, 800bf20 <_Bfree+0x20>
 800bf16:	4b09      	ldr	r3, [pc, #36]	; (800bf3c <_Bfree+0x3c>)
 800bf18:	4809      	ldr	r0, [pc, #36]	; (800bf40 <_Bfree+0x40>)
 800bf1a:	218a      	movs	r1, #138	; 0x8a
 800bf1c:	f001 f868 	bl	800cff0 <__assert_func>
 800bf20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf24:	6006      	str	r6, [r0, #0]
 800bf26:	60c6      	str	r6, [r0, #12]
 800bf28:	b13c      	cbz	r4, 800bf3a <_Bfree+0x3a>
 800bf2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf2c:	6862      	ldr	r2, [r4, #4]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf34:	6021      	str	r1, [r4, #0]
 800bf36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf3a:	bd70      	pop	{r4, r5, r6, pc}
 800bf3c:	0800d6a6 	.word	0x0800d6a6
 800bf40:	0800d810 	.word	0x0800d810

0800bf44 <__multadd>:
 800bf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf48:	690e      	ldr	r6, [r1, #16]
 800bf4a:	4607      	mov	r7, r0
 800bf4c:	4698      	mov	r8, r3
 800bf4e:	460c      	mov	r4, r1
 800bf50:	f101 0014 	add.w	r0, r1, #20
 800bf54:	2300      	movs	r3, #0
 800bf56:	6805      	ldr	r5, [r0, #0]
 800bf58:	b2a9      	uxth	r1, r5
 800bf5a:	fb02 8101 	mla	r1, r2, r1, r8
 800bf5e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bf62:	0c2d      	lsrs	r5, r5, #16
 800bf64:	fb02 c505 	mla	r5, r2, r5, ip
 800bf68:	b289      	uxth	r1, r1
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bf70:	429e      	cmp	r6, r3
 800bf72:	f840 1b04 	str.w	r1, [r0], #4
 800bf76:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bf7a:	dcec      	bgt.n	800bf56 <__multadd+0x12>
 800bf7c:	f1b8 0f00 	cmp.w	r8, #0
 800bf80:	d022      	beq.n	800bfc8 <__multadd+0x84>
 800bf82:	68a3      	ldr	r3, [r4, #8]
 800bf84:	42b3      	cmp	r3, r6
 800bf86:	dc19      	bgt.n	800bfbc <__multadd+0x78>
 800bf88:	6861      	ldr	r1, [r4, #4]
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	3101      	adds	r1, #1
 800bf8e:	f7ff ff77 	bl	800be80 <_Balloc>
 800bf92:	4605      	mov	r5, r0
 800bf94:	b928      	cbnz	r0, 800bfa2 <__multadd+0x5e>
 800bf96:	4602      	mov	r2, r0
 800bf98:	4b0d      	ldr	r3, [pc, #52]	; (800bfd0 <__multadd+0x8c>)
 800bf9a:	480e      	ldr	r0, [pc, #56]	; (800bfd4 <__multadd+0x90>)
 800bf9c:	21b5      	movs	r1, #181	; 0xb5
 800bf9e:	f001 f827 	bl	800cff0 <__assert_func>
 800bfa2:	6922      	ldr	r2, [r4, #16]
 800bfa4:	3202      	adds	r2, #2
 800bfa6:	f104 010c 	add.w	r1, r4, #12
 800bfaa:	0092      	lsls	r2, r2, #2
 800bfac:	300c      	adds	r0, #12
 800bfae:	f7fc fc89 	bl	80088c4 <memcpy>
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4638      	mov	r0, r7
 800bfb6:	f7ff ffa3 	bl	800bf00 <_Bfree>
 800bfba:	462c      	mov	r4, r5
 800bfbc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bfc0:	3601      	adds	r6, #1
 800bfc2:	f8c3 8014 	str.w	r8, [r3, #20]
 800bfc6:	6126      	str	r6, [r4, #16]
 800bfc8:	4620      	mov	r0, r4
 800bfca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfce:	bf00      	nop
 800bfd0:	0800d71c 	.word	0x0800d71c
 800bfd4:	0800d810 	.word	0x0800d810

0800bfd8 <__s2b>:
 800bfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfdc:	460c      	mov	r4, r1
 800bfde:	4615      	mov	r5, r2
 800bfe0:	461f      	mov	r7, r3
 800bfe2:	2209      	movs	r2, #9
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfec:	2100      	movs	r1, #0
 800bfee:	2201      	movs	r2, #1
 800bff0:	429a      	cmp	r2, r3
 800bff2:	db09      	blt.n	800c008 <__s2b+0x30>
 800bff4:	4630      	mov	r0, r6
 800bff6:	f7ff ff43 	bl	800be80 <_Balloc>
 800bffa:	b940      	cbnz	r0, 800c00e <__s2b+0x36>
 800bffc:	4602      	mov	r2, r0
 800bffe:	4b19      	ldr	r3, [pc, #100]	; (800c064 <__s2b+0x8c>)
 800c000:	4819      	ldr	r0, [pc, #100]	; (800c068 <__s2b+0x90>)
 800c002:	21ce      	movs	r1, #206	; 0xce
 800c004:	f000 fff4 	bl	800cff0 <__assert_func>
 800c008:	0052      	lsls	r2, r2, #1
 800c00a:	3101      	adds	r1, #1
 800c00c:	e7f0      	b.n	800bff0 <__s2b+0x18>
 800c00e:	9b08      	ldr	r3, [sp, #32]
 800c010:	6143      	str	r3, [r0, #20]
 800c012:	2d09      	cmp	r5, #9
 800c014:	f04f 0301 	mov.w	r3, #1
 800c018:	6103      	str	r3, [r0, #16]
 800c01a:	dd16      	ble.n	800c04a <__s2b+0x72>
 800c01c:	f104 0909 	add.w	r9, r4, #9
 800c020:	46c8      	mov	r8, r9
 800c022:	442c      	add	r4, r5
 800c024:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c028:	4601      	mov	r1, r0
 800c02a:	3b30      	subs	r3, #48	; 0x30
 800c02c:	220a      	movs	r2, #10
 800c02e:	4630      	mov	r0, r6
 800c030:	f7ff ff88 	bl	800bf44 <__multadd>
 800c034:	45a0      	cmp	r8, r4
 800c036:	d1f5      	bne.n	800c024 <__s2b+0x4c>
 800c038:	f1a5 0408 	sub.w	r4, r5, #8
 800c03c:	444c      	add	r4, r9
 800c03e:	1b2d      	subs	r5, r5, r4
 800c040:	1963      	adds	r3, r4, r5
 800c042:	42bb      	cmp	r3, r7
 800c044:	db04      	blt.n	800c050 <__s2b+0x78>
 800c046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04a:	340a      	adds	r4, #10
 800c04c:	2509      	movs	r5, #9
 800c04e:	e7f6      	b.n	800c03e <__s2b+0x66>
 800c050:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c054:	4601      	mov	r1, r0
 800c056:	3b30      	subs	r3, #48	; 0x30
 800c058:	220a      	movs	r2, #10
 800c05a:	4630      	mov	r0, r6
 800c05c:	f7ff ff72 	bl	800bf44 <__multadd>
 800c060:	e7ee      	b.n	800c040 <__s2b+0x68>
 800c062:	bf00      	nop
 800c064:	0800d71c 	.word	0x0800d71c
 800c068:	0800d810 	.word	0x0800d810

0800c06c <__hi0bits>:
 800c06c:	0c03      	lsrs	r3, r0, #16
 800c06e:	041b      	lsls	r3, r3, #16
 800c070:	b9d3      	cbnz	r3, 800c0a8 <__hi0bits+0x3c>
 800c072:	0400      	lsls	r0, r0, #16
 800c074:	2310      	movs	r3, #16
 800c076:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c07a:	bf04      	itt	eq
 800c07c:	0200      	lsleq	r0, r0, #8
 800c07e:	3308      	addeq	r3, #8
 800c080:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c084:	bf04      	itt	eq
 800c086:	0100      	lsleq	r0, r0, #4
 800c088:	3304      	addeq	r3, #4
 800c08a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c08e:	bf04      	itt	eq
 800c090:	0080      	lsleq	r0, r0, #2
 800c092:	3302      	addeq	r3, #2
 800c094:	2800      	cmp	r0, #0
 800c096:	db05      	blt.n	800c0a4 <__hi0bits+0x38>
 800c098:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c09c:	f103 0301 	add.w	r3, r3, #1
 800c0a0:	bf08      	it	eq
 800c0a2:	2320      	moveq	r3, #32
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	4770      	bx	lr
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	e7e4      	b.n	800c076 <__hi0bits+0xa>

0800c0ac <__lo0bits>:
 800c0ac:	6803      	ldr	r3, [r0, #0]
 800c0ae:	f013 0207 	ands.w	r2, r3, #7
 800c0b2:	4601      	mov	r1, r0
 800c0b4:	d00b      	beq.n	800c0ce <__lo0bits+0x22>
 800c0b6:	07da      	lsls	r2, r3, #31
 800c0b8:	d424      	bmi.n	800c104 <__lo0bits+0x58>
 800c0ba:	0798      	lsls	r0, r3, #30
 800c0bc:	bf49      	itett	mi
 800c0be:	085b      	lsrmi	r3, r3, #1
 800c0c0:	089b      	lsrpl	r3, r3, #2
 800c0c2:	2001      	movmi	r0, #1
 800c0c4:	600b      	strmi	r3, [r1, #0]
 800c0c6:	bf5c      	itt	pl
 800c0c8:	600b      	strpl	r3, [r1, #0]
 800c0ca:	2002      	movpl	r0, #2
 800c0cc:	4770      	bx	lr
 800c0ce:	b298      	uxth	r0, r3
 800c0d0:	b9b0      	cbnz	r0, 800c100 <__lo0bits+0x54>
 800c0d2:	0c1b      	lsrs	r3, r3, #16
 800c0d4:	2010      	movs	r0, #16
 800c0d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c0da:	bf04      	itt	eq
 800c0dc:	0a1b      	lsreq	r3, r3, #8
 800c0de:	3008      	addeq	r0, #8
 800c0e0:	071a      	lsls	r2, r3, #28
 800c0e2:	bf04      	itt	eq
 800c0e4:	091b      	lsreq	r3, r3, #4
 800c0e6:	3004      	addeq	r0, #4
 800c0e8:	079a      	lsls	r2, r3, #30
 800c0ea:	bf04      	itt	eq
 800c0ec:	089b      	lsreq	r3, r3, #2
 800c0ee:	3002      	addeq	r0, #2
 800c0f0:	07da      	lsls	r2, r3, #31
 800c0f2:	d403      	bmi.n	800c0fc <__lo0bits+0x50>
 800c0f4:	085b      	lsrs	r3, r3, #1
 800c0f6:	f100 0001 	add.w	r0, r0, #1
 800c0fa:	d005      	beq.n	800c108 <__lo0bits+0x5c>
 800c0fc:	600b      	str	r3, [r1, #0]
 800c0fe:	4770      	bx	lr
 800c100:	4610      	mov	r0, r2
 800c102:	e7e8      	b.n	800c0d6 <__lo0bits+0x2a>
 800c104:	2000      	movs	r0, #0
 800c106:	4770      	bx	lr
 800c108:	2020      	movs	r0, #32
 800c10a:	4770      	bx	lr

0800c10c <__i2b>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	460c      	mov	r4, r1
 800c110:	2101      	movs	r1, #1
 800c112:	f7ff feb5 	bl	800be80 <_Balloc>
 800c116:	4602      	mov	r2, r0
 800c118:	b928      	cbnz	r0, 800c126 <__i2b+0x1a>
 800c11a:	4b05      	ldr	r3, [pc, #20]	; (800c130 <__i2b+0x24>)
 800c11c:	4805      	ldr	r0, [pc, #20]	; (800c134 <__i2b+0x28>)
 800c11e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c122:	f000 ff65 	bl	800cff0 <__assert_func>
 800c126:	2301      	movs	r3, #1
 800c128:	6144      	str	r4, [r0, #20]
 800c12a:	6103      	str	r3, [r0, #16]
 800c12c:	bd10      	pop	{r4, pc}
 800c12e:	bf00      	nop
 800c130:	0800d71c 	.word	0x0800d71c
 800c134:	0800d810 	.word	0x0800d810

0800c138 <__multiply>:
 800c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	4614      	mov	r4, r2
 800c13e:	690a      	ldr	r2, [r1, #16]
 800c140:	6923      	ldr	r3, [r4, #16]
 800c142:	429a      	cmp	r2, r3
 800c144:	bfb8      	it	lt
 800c146:	460b      	movlt	r3, r1
 800c148:	460d      	mov	r5, r1
 800c14a:	bfbc      	itt	lt
 800c14c:	4625      	movlt	r5, r4
 800c14e:	461c      	movlt	r4, r3
 800c150:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c154:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c158:	68ab      	ldr	r3, [r5, #8]
 800c15a:	6869      	ldr	r1, [r5, #4]
 800c15c:	eb0a 0709 	add.w	r7, sl, r9
 800c160:	42bb      	cmp	r3, r7
 800c162:	b085      	sub	sp, #20
 800c164:	bfb8      	it	lt
 800c166:	3101      	addlt	r1, #1
 800c168:	f7ff fe8a 	bl	800be80 <_Balloc>
 800c16c:	b930      	cbnz	r0, 800c17c <__multiply+0x44>
 800c16e:	4602      	mov	r2, r0
 800c170:	4b42      	ldr	r3, [pc, #264]	; (800c27c <__multiply+0x144>)
 800c172:	4843      	ldr	r0, [pc, #268]	; (800c280 <__multiply+0x148>)
 800c174:	f240 115d 	movw	r1, #349	; 0x15d
 800c178:	f000 ff3a 	bl	800cff0 <__assert_func>
 800c17c:	f100 0614 	add.w	r6, r0, #20
 800c180:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c184:	4633      	mov	r3, r6
 800c186:	2200      	movs	r2, #0
 800c188:	4543      	cmp	r3, r8
 800c18a:	d31e      	bcc.n	800c1ca <__multiply+0x92>
 800c18c:	f105 0c14 	add.w	ip, r5, #20
 800c190:	f104 0314 	add.w	r3, r4, #20
 800c194:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c198:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c19c:	9202      	str	r2, [sp, #8]
 800c19e:	ebac 0205 	sub.w	r2, ip, r5
 800c1a2:	3a15      	subs	r2, #21
 800c1a4:	f022 0203 	bic.w	r2, r2, #3
 800c1a8:	3204      	adds	r2, #4
 800c1aa:	f105 0115 	add.w	r1, r5, #21
 800c1ae:	458c      	cmp	ip, r1
 800c1b0:	bf38      	it	cc
 800c1b2:	2204      	movcc	r2, #4
 800c1b4:	9201      	str	r2, [sp, #4]
 800c1b6:	9a02      	ldr	r2, [sp, #8]
 800c1b8:	9303      	str	r3, [sp, #12]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d808      	bhi.n	800c1d0 <__multiply+0x98>
 800c1be:	2f00      	cmp	r7, #0
 800c1c0:	dc55      	bgt.n	800c26e <__multiply+0x136>
 800c1c2:	6107      	str	r7, [r0, #16]
 800c1c4:	b005      	add	sp, #20
 800c1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ca:	f843 2b04 	str.w	r2, [r3], #4
 800c1ce:	e7db      	b.n	800c188 <__multiply+0x50>
 800c1d0:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1d4:	f1ba 0f00 	cmp.w	sl, #0
 800c1d8:	d020      	beq.n	800c21c <__multiply+0xe4>
 800c1da:	f105 0e14 	add.w	lr, r5, #20
 800c1de:	46b1      	mov	r9, r6
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c1e6:	f8d9 b000 	ldr.w	fp, [r9]
 800c1ea:	b2a1      	uxth	r1, r4
 800c1ec:	fa1f fb8b 	uxth.w	fp, fp
 800c1f0:	fb0a b101 	mla	r1, sl, r1, fp
 800c1f4:	4411      	add	r1, r2
 800c1f6:	f8d9 2000 	ldr.w	r2, [r9]
 800c1fa:	0c24      	lsrs	r4, r4, #16
 800c1fc:	0c12      	lsrs	r2, r2, #16
 800c1fe:	fb0a 2404 	mla	r4, sl, r4, r2
 800c202:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c206:	b289      	uxth	r1, r1
 800c208:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c20c:	45f4      	cmp	ip, lr
 800c20e:	f849 1b04 	str.w	r1, [r9], #4
 800c212:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c216:	d8e4      	bhi.n	800c1e2 <__multiply+0xaa>
 800c218:	9901      	ldr	r1, [sp, #4]
 800c21a:	5072      	str	r2, [r6, r1]
 800c21c:	9a03      	ldr	r2, [sp, #12]
 800c21e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c222:	3304      	adds	r3, #4
 800c224:	f1b9 0f00 	cmp.w	r9, #0
 800c228:	d01f      	beq.n	800c26a <__multiply+0x132>
 800c22a:	6834      	ldr	r4, [r6, #0]
 800c22c:	f105 0114 	add.w	r1, r5, #20
 800c230:	46b6      	mov	lr, r6
 800c232:	f04f 0a00 	mov.w	sl, #0
 800c236:	880a      	ldrh	r2, [r1, #0]
 800c238:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c23c:	fb09 b202 	mla	r2, r9, r2, fp
 800c240:	4492      	add	sl, r2
 800c242:	b2a4      	uxth	r4, r4
 800c244:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c248:	f84e 4b04 	str.w	r4, [lr], #4
 800c24c:	f851 4b04 	ldr.w	r4, [r1], #4
 800c250:	f8be 2000 	ldrh.w	r2, [lr]
 800c254:	0c24      	lsrs	r4, r4, #16
 800c256:	fb09 2404 	mla	r4, r9, r4, r2
 800c25a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c25e:	458c      	cmp	ip, r1
 800c260:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c264:	d8e7      	bhi.n	800c236 <__multiply+0xfe>
 800c266:	9a01      	ldr	r2, [sp, #4]
 800c268:	50b4      	str	r4, [r6, r2]
 800c26a:	3604      	adds	r6, #4
 800c26c:	e7a3      	b.n	800c1b6 <__multiply+0x7e>
 800c26e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1a5      	bne.n	800c1c2 <__multiply+0x8a>
 800c276:	3f01      	subs	r7, #1
 800c278:	e7a1      	b.n	800c1be <__multiply+0x86>
 800c27a:	bf00      	nop
 800c27c:	0800d71c 	.word	0x0800d71c
 800c280:	0800d810 	.word	0x0800d810

0800c284 <__pow5mult>:
 800c284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c288:	4615      	mov	r5, r2
 800c28a:	f012 0203 	ands.w	r2, r2, #3
 800c28e:	4606      	mov	r6, r0
 800c290:	460f      	mov	r7, r1
 800c292:	d007      	beq.n	800c2a4 <__pow5mult+0x20>
 800c294:	4c25      	ldr	r4, [pc, #148]	; (800c32c <__pow5mult+0xa8>)
 800c296:	3a01      	subs	r2, #1
 800c298:	2300      	movs	r3, #0
 800c29a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c29e:	f7ff fe51 	bl	800bf44 <__multadd>
 800c2a2:	4607      	mov	r7, r0
 800c2a4:	10ad      	asrs	r5, r5, #2
 800c2a6:	d03d      	beq.n	800c324 <__pow5mult+0xa0>
 800c2a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c2aa:	b97c      	cbnz	r4, 800c2cc <__pow5mult+0x48>
 800c2ac:	2010      	movs	r0, #16
 800c2ae:	f7ff fdcd 	bl	800be4c <malloc>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	6270      	str	r0, [r6, #36]	; 0x24
 800c2b6:	b928      	cbnz	r0, 800c2c4 <__pow5mult+0x40>
 800c2b8:	4b1d      	ldr	r3, [pc, #116]	; (800c330 <__pow5mult+0xac>)
 800c2ba:	481e      	ldr	r0, [pc, #120]	; (800c334 <__pow5mult+0xb0>)
 800c2bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c2c0:	f000 fe96 	bl	800cff0 <__assert_func>
 800c2c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2c8:	6004      	str	r4, [r0, #0]
 800c2ca:	60c4      	str	r4, [r0, #12]
 800c2cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2d4:	b94c      	cbnz	r4, 800c2ea <__pow5mult+0x66>
 800c2d6:	f240 2171 	movw	r1, #625	; 0x271
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f7ff ff16 	bl	800c10c <__i2b>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	6003      	str	r3, [r0, #0]
 800c2ea:	f04f 0900 	mov.w	r9, #0
 800c2ee:	07eb      	lsls	r3, r5, #31
 800c2f0:	d50a      	bpl.n	800c308 <__pow5mult+0x84>
 800c2f2:	4639      	mov	r1, r7
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	f7ff ff1e 	bl	800c138 <__multiply>
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4680      	mov	r8, r0
 800c300:	4630      	mov	r0, r6
 800c302:	f7ff fdfd 	bl	800bf00 <_Bfree>
 800c306:	4647      	mov	r7, r8
 800c308:	106d      	asrs	r5, r5, #1
 800c30a:	d00b      	beq.n	800c324 <__pow5mult+0xa0>
 800c30c:	6820      	ldr	r0, [r4, #0]
 800c30e:	b938      	cbnz	r0, 800c320 <__pow5mult+0x9c>
 800c310:	4622      	mov	r2, r4
 800c312:	4621      	mov	r1, r4
 800c314:	4630      	mov	r0, r6
 800c316:	f7ff ff0f 	bl	800c138 <__multiply>
 800c31a:	6020      	str	r0, [r4, #0]
 800c31c:	f8c0 9000 	str.w	r9, [r0]
 800c320:	4604      	mov	r4, r0
 800c322:	e7e4      	b.n	800c2ee <__pow5mult+0x6a>
 800c324:	4638      	mov	r0, r7
 800c326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c32a:	bf00      	nop
 800c32c:	0800d960 	.word	0x0800d960
 800c330:	0800d6a6 	.word	0x0800d6a6
 800c334:	0800d810 	.word	0x0800d810

0800c338 <__lshift>:
 800c338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c33c:	460c      	mov	r4, r1
 800c33e:	6849      	ldr	r1, [r1, #4]
 800c340:	6923      	ldr	r3, [r4, #16]
 800c342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c346:	68a3      	ldr	r3, [r4, #8]
 800c348:	4607      	mov	r7, r0
 800c34a:	4691      	mov	r9, r2
 800c34c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c350:	f108 0601 	add.w	r6, r8, #1
 800c354:	42b3      	cmp	r3, r6
 800c356:	db0b      	blt.n	800c370 <__lshift+0x38>
 800c358:	4638      	mov	r0, r7
 800c35a:	f7ff fd91 	bl	800be80 <_Balloc>
 800c35e:	4605      	mov	r5, r0
 800c360:	b948      	cbnz	r0, 800c376 <__lshift+0x3e>
 800c362:	4602      	mov	r2, r0
 800c364:	4b28      	ldr	r3, [pc, #160]	; (800c408 <__lshift+0xd0>)
 800c366:	4829      	ldr	r0, [pc, #164]	; (800c40c <__lshift+0xd4>)
 800c368:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c36c:	f000 fe40 	bl	800cff0 <__assert_func>
 800c370:	3101      	adds	r1, #1
 800c372:	005b      	lsls	r3, r3, #1
 800c374:	e7ee      	b.n	800c354 <__lshift+0x1c>
 800c376:	2300      	movs	r3, #0
 800c378:	f100 0114 	add.w	r1, r0, #20
 800c37c:	f100 0210 	add.w	r2, r0, #16
 800c380:	4618      	mov	r0, r3
 800c382:	4553      	cmp	r3, sl
 800c384:	db33      	blt.n	800c3ee <__lshift+0xb6>
 800c386:	6920      	ldr	r0, [r4, #16]
 800c388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c38c:	f104 0314 	add.w	r3, r4, #20
 800c390:	f019 091f 	ands.w	r9, r9, #31
 800c394:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c398:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c39c:	d02b      	beq.n	800c3f6 <__lshift+0xbe>
 800c39e:	f1c9 0e20 	rsb	lr, r9, #32
 800c3a2:	468a      	mov	sl, r1
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	6818      	ldr	r0, [r3, #0]
 800c3a8:	fa00 f009 	lsl.w	r0, r0, r9
 800c3ac:	4302      	orrs	r2, r0
 800c3ae:	f84a 2b04 	str.w	r2, [sl], #4
 800c3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b6:	459c      	cmp	ip, r3
 800c3b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3bc:	d8f3      	bhi.n	800c3a6 <__lshift+0x6e>
 800c3be:	ebac 0304 	sub.w	r3, ip, r4
 800c3c2:	3b15      	subs	r3, #21
 800c3c4:	f023 0303 	bic.w	r3, r3, #3
 800c3c8:	3304      	adds	r3, #4
 800c3ca:	f104 0015 	add.w	r0, r4, #21
 800c3ce:	4584      	cmp	ip, r0
 800c3d0:	bf38      	it	cc
 800c3d2:	2304      	movcc	r3, #4
 800c3d4:	50ca      	str	r2, [r1, r3]
 800c3d6:	b10a      	cbz	r2, 800c3dc <__lshift+0xa4>
 800c3d8:	f108 0602 	add.w	r6, r8, #2
 800c3dc:	3e01      	subs	r6, #1
 800c3de:	4638      	mov	r0, r7
 800c3e0:	612e      	str	r6, [r5, #16]
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	f7ff fd8c 	bl	800bf00 <_Bfree>
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	e7c5      	b.n	800c382 <__lshift+0x4a>
 800c3f6:	3904      	subs	r1, #4
 800c3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c400:	459c      	cmp	ip, r3
 800c402:	d8f9      	bhi.n	800c3f8 <__lshift+0xc0>
 800c404:	e7ea      	b.n	800c3dc <__lshift+0xa4>
 800c406:	bf00      	nop
 800c408:	0800d71c 	.word	0x0800d71c
 800c40c:	0800d810 	.word	0x0800d810

0800c410 <__mcmp>:
 800c410:	b530      	push	{r4, r5, lr}
 800c412:	6902      	ldr	r2, [r0, #16]
 800c414:	690c      	ldr	r4, [r1, #16]
 800c416:	1b12      	subs	r2, r2, r4
 800c418:	d10e      	bne.n	800c438 <__mcmp+0x28>
 800c41a:	f100 0314 	add.w	r3, r0, #20
 800c41e:	3114      	adds	r1, #20
 800c420:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c424:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c428:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c42c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c430:	42a5      	cmp	r5, r4
 800c432:	d003      	beq.n	800c43c <__mcmp+0x2c>
 800c434:	d305      	bcc.n	800c442 <__mcmp+0x32>
 800c436:	2201      	movs	r2, #1
 800c438:	4610      	mov	r0, r2
 800c43a:	bd30      	pop	{r4, r5, pc}
 800c43c:	4283      	cmp	r3, r0
 800c43e:	d3f3      	bcc.n	800c428 <__mcmp+0x18>
 800c440:	e7fa      	b.n	800c438 <__mcmp+0x28>
 800c442:	f04f 32ff 	mov.w	r2, #4294967295
 800c446:	e7f7      	b.n	800c438 <__mcmp+0x28>

0800c448 <__mdiff>:
 800c448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44c:	460c      	mov	r4, r1
 800c44e:	4606      	mov	r6, r0
 800c450:	4611      	mov	r1, r2
 800c452:	4620      	mov	r0, r4
 800c454:	4617      	mov	r7, r2
 800c456:	f7ff ffdb 	bl	800c410 <__mcmp>
 800c45a:	1e05      	subs	r5, r0, #0
 800c45c:	d110      	bne.n	800c480 <__mdiff+0x38>
 800c45e:	4629      	mov	r1, r5
 800c460:	4630      	mov	r0, r6
 800c462:	f7ff fd0d 	bl	800be80 <_Balloc>
 800c466:	b930      	cbnz	r0, 800c476 <__mdiff+0x2e>
 800c468:	4b39      	ldr	r3, [pc, #228]	; (800c550 <__mdiff+0x108>)
 800c46a:	4602      	mov	r2, r0
 800c46c:	f240 2132 	movw	r1, #562	; 0x232
 800c470:	4838      	ldr	r0, [pc, #224]	; (800c554 <__mdiff+0x10c>)
 800c472:	f000 fdbd 	bl	800cff0 <__assert_func>
 800c476:	2301      	movs	r3, #1
 800c478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c47c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c480:	bfa4      	itt	ge
 800c482:	463b      	movge	r3, r7
 800c484:	4627      	movge	r7, r4
 800c486:	4630      	mov	r0, r6
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	bfa6      	itte	ge
 800c48c:	461c      	movge	r4, r3
 800c48e:	2500      	movge	r5, #0
 800c490:	2501      	movlt	r5, #1
 800c492:	f7ff fcf5 	bl	800be80 <_Balloc>
 800c496:	b920      	cbnz	r0, 800c4a2 <__mdiff+0x5a>
 800c498:	4b2d      	ldr	r3, [pc, #180]	; (800c550 <__mdiff+0x108>)
 800c49a:	4602      	mov	r2, r0
 800c49c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c4a0:	e7e6      	b.n	800c470 <__mdiff+0x28>
 800c4a2:	693e      	ldr	r6, [r7, #16]
 800c4a4:	60c5      	str	r5, [r0, #12]
 800c4a6:	6925      	ldr	r5, [r4, #16]
 800c4a8:	f107 0114 	add.w	r1, r7, #20
 800c4ac:	f104 0914 	add.w	r9, r4, #20
 800c4b0:	f100 0e14 	add.w	lr, r0, #20
 800c4b4:	f107 0210 	add.w	r2, r7, #16
 800c4b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c4bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c4c0:	46f2      	mov	sl, lr
 800c4c2:	2700      	movs	r7, #0
 800c4c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4cc:	fa1f f883 	uxth.w	r8, r3
 800c4d0:	fa17 f78b 	uxtah	r7, r7, fp
 800c4d4:	0c1b      	lsrs	r3, r3, #16
 800c4d6:	eba7 0808 	sub.w	r8, r7, r8
 800c4da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4e2:	fa1f f888 	uxth.w	r8, r8
 800c4e6:	141f      	asrs	r7, r3, #16
 800c4e8:	454d      	cmp	r5, r9
 800c4ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4ee:	f84a 3b04 	str.w	r3, [sl], #4
 800c4f2:	d8e7      	bhi.n	800c4c4 <__mdiff+0x7c>
 800c4f4:	1b2b      	subs	r3, r5, r4
 800c4f6:	3b15      	subs	r3, #21
 800c4f8:	f023 0303 	bic.w	r3, r3, #3
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	3415      	adds	r4, #21
 800c500:	42a5      	cmp	r5, r4
 800c502:	bf38      	it	cc
 800c504:	2304      	movcc	r3, #4
 800c506:	4419      	add	r1, r3
 800c508:	4473      	add	r3, lr
 800c50a:	469e      	mov	lr, r3
 800c50c:	460d      	mov	r5, r1
 800c50e:	4565      	cmp	r5, ip
 800c510:	d30e      	bcc.n	800c530 <__mdiff+0xe8>
 800c512:	f10c 0203 	add.w	r2, ip, #3
 800c516:	1a52      	subs	r2, r2, r1
 800c518:	f022 0203 	bic.w	r2, r2, #3
 800c51c:	3903      	subs	r1, #3
 800c51e:	458c      	cmp	ip, r1
 800c520:	bf38      	it	cc
 800c522:	2200      	movcc	r2, #0
 800c524:	441a      	add	r2, r3
 800c526:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c52a:	b17b      	cbz	r3, 800c54c <__mdiff+0x104>
 800c52c:	6106      	str	r6, [r0, #16]
 800c52e:	e7a5      	b.n	800c47c <__mdiff+0x34>
 800c530:	f855 8b04 	ldr.w	r8, [r5], #4
 800c534:	fa17 f488 	uxtah	r4, r7, r8
 800c538:	1422      	asrs	r2, r4, #16
 800c53a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c53e:	b2a4      	uxth	r4, r4
 800c540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c544:	f84e 4b04 	str.w	r4, [lr], #4
 800c548:	1417      	asrs	r7, r2, #16
 800c54a:	e7e0      	b.n	800c50e <__mdiff+0xc6>
 800c54c:	3e01      	subs	r6, #1
 800c54e:	e7ea      	b.n	800c526 <__mdiff+0xde>
 800c550:	0800d71c 	.word	0x0800d71c
 800c554:	0800d810 	.word	0x0800d810

0800c558 <__ulp>:
 800c558:	b082      	sub	sp, #8
 800c55a:	ed8d 0b00 	vstr	d0, [sp]
 800c55e:	9b01      	ldr	r3, [sp, #4]
 800c560:	4912      	ldr	r1, [pc, #72]	; (800c5ac <__ulp+0x54>)
 800c562:	4019      	ands	r1, r3
 800c564:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c568:	2900      	cmp	r1, #0
 800c56a:	dd05      	ble.n	800c578 <__ulp+0x20>
 800c56c:	2200      	movs	r2, #0
 800c56e:	460b      	mov	r3, r1
 800c570:	ec43 2b10 	vmov	d0, r2, r3
 800c574:	b002      	add	sp, #8
 800c576:	4770      	bx	lr
 800c578:	4249      	negs	r1, r1
 800c57a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c57e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c582:	f04f 0200 	mov.w	r2, #0
 800c586:	f04f 0300 	mov.w	r3, #0
 800c58a:	da04      	bge.n	800c596 <__ulp+0x3e>
 800c58c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c590:	fa41 f300 	asr.w	r3, r1, r0
 800c594:	e7ec      	b.n	800c570 <__ulp+0x18>
 800c596:	f1a0 0114 	sub.w	r1, r0, #20
 800c59a:	291e      	cmp	r1, #30
 800c59c:	bfda      	itte	le
 800c59e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c5a2:	fa20 f101 	lsrle.w	r1, r0, r1
 800c5a6:	2101      	movgt	r1, #1
 800c5a8:	460a      	mov	r2, r1
 800c5aa:	e7e1      	b.n	800c570 <__ulp+0x18>
 800c5ac:	7ff00000 	.word	0x7ff00000

0800c5b0 <__b2d>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	6905      	ldr	r5, [r0, #16]
 800c5b4:	f100 0714 	add.w	r7, r0, #20
 800c5b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c5bc:	1f2e      	subs	r6, r5, #4
 800c5be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f7ff fd52 	bl	800c06c <__hi0bits>
 800c5c8:	f1c0 0320 	rsb	r3, r0, #32
 800c5cc:	280a      	cmp	r0, #10
 800c5ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c64c <__b2d+0x9c>
 800c5d2:	600b      	str	r3, [r1, #0]
 800c5d4:	dc14      	bgt.n	800c600 <__b2d+0x50>
 800c5d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800c5da:	fa24 f10e 	lsr.w	r1, r4, lr
 800c5de:	42b7      	cmp	r7, r6
 800c5e0:	ea41 030c 	orr.w	r3, r1, ip
 800c5e4:	bf34      	ite	cc
 800c5e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c5ea:	2100      	movcs	r1, #0
 800c5ec:	3015      	adds	r0, #21
 800c5ee:	fa04 f000 	lsl.w	r0, r4, r0
 800c5f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800c5f6:	ea40 0201 	orr.w	r2, r0, r1
 800c5fa:	ec43 2b10 	vmov	d0, r2, r3
 800c5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c600:	42b7      	cmp	r7, r6
 800c602:	bf3a      	itte	cc
 800c604:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c608:	f1a5 0608 	subcc.w	r6, r5, #8
 800c60c:	2100      	movcs	r1, #0
 800c60e:	380b      	subs	r0, #11
 800c610:	d017      	beq.n	800c642 <__b2d+0x92>
 800c612:	f1c0 0c20 	rsb	ip, r0, #32
 800c616:	fa04 f500 	lsl.w	r5, r4, r0
 800c61a:	42be      	cmp	r6, r7
 800c61c:	fa21 f40c 	lsr.w	r4, r1, ip
 800c620:	ea45 0504 	orr.w	r5, r5, r4
 800c624:	bf8c      	ite	hi
 800c626:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c62a:	2400      	movls	r4, #0
 800c62c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c630:	fa01 f000 	lsl.w	r0, r1, r0
 800c634:	fa24 f40c 	lsr.w	r4, r4, ip
 800c638:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c63c:	ea40 0204 	orr.w	r2, r0, r4
 800c640:	e7db      	b.n	800c5fa <__b2d+0x4a>
 800c642:	ea44 030c 	orr.w	r3, r4, ip
 800c646:	460a      	mov	r2, r1
 800c648:	e7d7      	b.n	800c5fa <__b2d+0x4a>
 800c64a:	bf00      	nop
 800c64c:	3ff00000 	.word	0x3ff00000

0800c650 <__d2b>:
 800c650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c654:	4689      	mov	r9, r1
 800c656:	2101      	movs	r1, #1
 800c658:	ec57 6b10 	vmov	r6, r7, d0
 800c65c:	4690      	mov	r8, r2
 800c65e:	f7ff fc0f 	bl	800be80 <_Balloc>
 800c662:	4604      	mov	r4, r0
 800c664:	b930      	cbnz	r0, 800c674 <__d2b+0x24>
 800c666:	4602      	mov	r2, r0
 800c668:	4b25      	ldr	r3, [pc, #148]	; (800c700 <__d2b+0xb0>)
 800c66a:	4826      	ldr	r0, [pc, #152]	; (800c704 <__d2b+0xb4>)
 800c66c:	f240 310a 	movw	r1, #778	; 0x30a
 800c670:	f000 fcbe 	bl	800cff0 <__assert_func>
 800c674:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c678:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c67c:	bb35      	cbnz	r5, 800c6cc <__d2b+0x7c>
 800c67e:	2e00      	cmp	r6, #0
 800c680:	9301      	str	r3, [sp, #4]
 800c682:	d028      	beq.n	800c6d6 <__d2b+0x86>
 800c684:	4668      	mov	r0, sp
 800c686:	9600      	str	r6, [sp, #0]
 800c688:	f7ff fd10 	bl	800c0ac <__lo0bits>
 800c68c:	9900      	ldr	r1, [sp, #0]
 800c68e:	b300      	cbz	r0, 800c6d2 <__d2b+0x82>
 800c690:	9a01      	ldr	r2, [sp, #4]
 800c692:	f1c0 0320 	rsb	r3, r0, #32
 800c696:	fa02 f303 	lsl.w	r3, r2, r3
 800c69a:	430b      	orrs	r3, r1
 800c69c:	40c2      	lsrs	r2, r0
 800c69e:	6163      	str	r3, [r4, #20]
 800c6a0:	9201      	str	r2, [sp, #4]
 800c6a2:	9b01      	ldr	r3, [sp, #4]
 800c6a4:	61a3      	str	r3, [r4, #24]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	bf14      	ite	ne
 800c6aa:	2202      	movne	r2, #2
 800c6ac:	2201      	moveq	r2, #1
 800c6ae:	6122      	str	r2, [r4, #16]
 800c6b0:	b1d5      	cbz	r5, 800c6e8 <__d2b+0x98>
 800c6b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c6b6:	4405      	add	r5, r0
 800c6b8:	f8c9 5000 	str.w	r5, [r9]
 800c6bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6c0:	f8c8 0000 	str.w	r0, [r8]
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	b003      	add	sp, #12
 800c6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6d0:	e7d5      	b.n	800c67e <__d2b+0x2e>
 800c6d2:	6161      	str	r1, [r4, #20]
 800c6d4:	e7e5      	b.n	800c6a2 <__d2b+0x52>
 800c6d6:	a801      	add	r0, sp, #4
 800c6d8:	f7ff fce8 	bl	800c0ac <__lo0bits>
 800c6dc:	9b01      	ldr	r3, [sp, #4]
 800c6de:	6163      	str	r3, [r4, #20]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	6122      	str	r2, [r4, #16]
 800c6e4:	3020      	adds	r0, #32
 800c6e6:	e7e3      	b.n	800c6b0 <__d2b+0x60>
 800c6e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6f0:	f8c9 0000 	str.w	r0, [r9]
 800c6f4:	6918      	ldr	r0, [r3, #16]
 800c6f6:	f7ff fcb9 	bl	800c06c <__hi0bits>
 800c6fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6fe:	e7df      	b.n	800c6c0 <__d2b+0x70>
 800c700:	0800d71c 	.word	0x0800d71c
 800c704:	0800d810 	.word	0x0800d810

0800c708 <__ratio>:
 800c708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70c:	4688      	mov	r8, r1
 800c70e:	4669      	mov	r1, sp
 800c710:	4681      	mov	r9, r0
 800c712:	f7ff ff4d 	bl	800c5b0 <__b2d>
 800c716:	a901      	add	r1, sp, #4
 800c718:	4640      	mov	r0, r8
 800c71a:	ec55 4b10 	vmov	r4, r5, d0
 800c71e:	f7ff ff47 	bl	800c5b0 <__b2d>
 800c722:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c726:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c72a:	eba3 0c02 	sub.w	ip, r3, r2
 800c72e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c732:	1a9b      	subs	r3, r3, r2
 800c734:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c738:	ec51 0b10 	vmov	r0, r1, d0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	bfd6      	itet	le
 800c740:	460a      	movle	r2, r1
 800c742:	462a      	movgt	r2, r5
 800c744:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c748:	468b      	mov	fp, r1
 800c74a:	462f      	mov	r7, r5
 800c74c:	bfd4      	ite	le
 800c74e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c752:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c756:	4620      	mov	r0, r4
 800c758:	ee10 2a10 	vmov	r2, s0
 800c75c:	465b      	mov	r3, fp
 800c75e:	4639      	mov	r1, r7
 800c760:	f7f4 f874 	bl	800084c <__aeabi_ddiv>
 800c764:	ec41 0b10 	vmov	d0, r0, r1
 800c768:	b003      	add	sp, #12
 800c76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c76e <__copybits>:
 800c76e:	3901      	subs	r1, #1
 800c770:	b570      	push	{r4, r5, r6, lr}
 800c772:	1149      	asrs	r1, r1, #5
 800c774:	6914      	ldr	r4, [r2, #16]
 800c776:	3101      	adds	r1, #1
 800c778:	f102 0314 	add.w	r3, r2, #20
 800c77c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c780:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c784:	1f05      	subs	r5, r0, #4
 800c786:	42a3      	cmp	r3, r4
 800c788:	d30c      	bcc.n	800c7a4 <__copybits+0x36>
 800c78a:	1aa3      	subs	r3, r4, r2
 800c78c:	3b11      	subs	r3, #17
 800c78e:	f023 0303 	bic.w	r3, r3, #3
 800c792:	3211      	adds	r2, #17
 800c794:	42a2      	cmp	r2, r4
 800c796:	bf88      	it	hi
 800c798:	2300      	movhi	r3, #0
 800c79a:	4418      	add	r0, r3
 800c79c:	2300      	movs	r3, #0
 800c79e:	4288      	cmp	r0, r1
 800c7a0:	d305      	bcc.n	800c7ae <__copybits+0x40>
 800c7a2:	bd70      	pop	{r4, r5, r6, pc}
 800c7a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800c7a8:	f845 6f04 	str.w	r6, [r5, #4]!
 800c7ac:	e7eb      	b.n	800c786 <__copybits+0x18>
 800c7ae:	f840 3b04 	str.w	r3, [r0], #4
 800c7b2:	e7f4      	b.n	800c79e <__copybits+0x30>

0800c7b4 <__any_on>:
 800c7b4:	f100 0214 	add.w	r2, r0, #20
 800c7b8:	6900      	ldr	r0, [r0, #16]
 800c7ba:	114b      	asrs	r3, r1, #5
 800c7bc:	4298      	cmp	r0, r3
 800c7be:	b510      	push	{r4, lr}
 800c7c0:	db11      	blt.n	800c7e6 <__any_on+0x32>
 800c7c2:	dd0a      	ble.n	800c7da <__any_on+0x26>
 800c7c4:	f011 011f 	ands.w	r1, r1, #31
 800c7c8:	d007      	beq.n	800c7da <__any_on+0x26>
 800c7ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c7ce:	fa24 f001 	lsr.w	r0, r4, r1
 800c7d2:	fa00 f101 	lsl.w	r1, r0, r1
 800c7d6:	428c      	cmp	r4, r1
 800c7d8:	d10b      	bne.n	800c7f2 <__any_on+0x3e>
 800c7da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d803      	bhi.n	800c7ea <__any_on+0x36>
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	bd10      	pop	{r4, pc}
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	e7f7      	b.n	800c7da <__any_on+0x26>
 800c7ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7ee:	2900      	cmp	r1, #0
 800c7f0:	d0f5      	beq.n	800c7de <__any_on+0x2a>
 800c7f2:	2001      	movs	r0, #1
 800c7f4:	e7f6      	b.n	800c7e4 <__any_on+0x30>

0800c7f6 <_calloc_r>:
 800c7f6:	b513      	push	{r0, r1, r4, lr}
 800c7f8:	434a      	muls	r2, r1
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	9201      	str	r2, [sp, #4]
 800c7fe:	f000 f859 	bl	800c8b4 <_malloc_r>
 800c802:	4604      	mov	r4, r0
 800c804:	b118      	cbz	r0, 800c80e <_calloc_r+0x18>
 800c806:	9a01      	ldr	r2, [sp, #4]
 800c808:	2100      	movs	r1, #0
 800c80a:	f7fc f869 	bl	80088e0 <memset>
 800c80e:	4620      	mov	r0, r4
 800c810:	b002      	add	sp, #8
 800c812:	bd10      	pop	{r4, pc}

0800c814 <_free_r>:
 800c814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c816:	2900      	cmp	r1, #0
 800c818:	d048      	beq.n	800c8ac <_free_r+0x98>
 800c81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c81e:	9001      	str	r0, [sp, #4]
 800c820:	2b00      	cmp	r3, #0
 800c822:	f1a1 0404 	sub.w	r4, r1, #4
 800c826:	bfb8      	it	lt
 800c828:	18e4      	addlt	r4, r4, r3
 800c82a:	f000 fc6f 	bl	800d10c <__malloc_lock>
 800c82e:	4a20      	ldr	r2, [pc, #128]	; (800c8b0 <_free_r+0x9c>)
 800c830:	9801      	ldr	r0, [sp, #4]
 800c832:	6813      	ldr	r3, [r2, #0]
 800c834:	4615      	mov	r5, r2
 800c836:	b933      	cbnz	r3, 800c846 <_free_r+0x32>
 800c838:	6063      	str	r3, [r4, #4]
 800c83a:	6014      	str	r4, [r2, #0]
 800c83c:	b003      	add	sp, #12
 800c83e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c842:	f000 bc69 	b.w	800d118 <__malloc_unlock>
 800c846:	42a3      	cmp	r3, r4
 800c848:	d90b      	bls.n	800c862 <_free_r+0x4e>
 800c84a:	6821      	ldr	r1, [r4, #0]
 800c84c:	1862      	adds	r2, r4, r1
 800c84e:	4293      	cmp	r3, r2
 800c850:	bf04      	itt	eq
 800c852:	681a      	ldreq	r2, [r3, #0]
 800c854:	685b      	ldreq	r3, [r3, #4]
 800c856:	6063      	str	r3, [r4, #4]
 800c858:	bf04      	itt	eq
 800c85a:	1852      	addeq	r2, r2, r1
 800c85c:	6022      	streq	r2, [r4, #0]
 800c85e:	602c      	str	r4, [r5, #0]
 800c860:	e7ec      	b.n	800c83c <_free_r+0x28>
 800c862:	461a      	mov	r2, r3
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	b10b      	cbz	r3, 800c86c <_free_r+0x58>
 800c868:	42a3      	cmp	r3, r4
 800c86a:	d9fa      	bls.n	800c862 <_free_r+0x4e>
 800c86c:	6811      	ldr	r1, [r2, #0]
 800c86e:	1855      	adds	r5, r2, r1
 800c870:	42a5      	cmp	r5, r4
 800c872:	d10b      	bne.n	800c88c <_free_r+0x78>
 800c874:	6824      	ldr	r4, [r4, #0]
 800c876:	4421      	add	r1, r4
 800c878:	1854      	adds	r4, r2, r1
 800c87a:	42a3      	cmp	r3, r4
 800c87c:	6011      	str	r1, [r2, #0]
 800c87e:	d1dd      	bne.n	800c83c <_free_r+0x28>
 800c880:	681c      	ldr	r4, [r3, #0]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	6053      	str	r3, [r2, #4]
 800c886:	4421      	add	r1, r4
 800c888:	6011      	str	r1, [r2, #0]
 800c88a:	e7d7      	b.n	800c83c <_free_r+0x28>
 800c88c:	d902      	bls.n	800c894 <_free_r+0x80>
 800c88e:	230c      	movs	r3, #12
 800c890:	6003      	str	r3, [r0, #0]
 800c892:	e7d3      	b.n	800c83c <_free_r+0x28>
 800c894:	6825      	ldr	r5, [r4, #0]
 800c896:	1961      	adds	r1, r4, r5
 800c898:	428b      	cmp	r3, r1
 800c89a:	bf04      	itt	eq
 800c89c:	6819      	ldreq	r1, [r3, #0]
 800c89e:	685b      	ldreq	r3, [r3, #4]
 800c8a0:	6063      	str	r3, [r4, #4]
 800c8a2:	bf04      	itt	eq
 800c8a4:	1949      	addeq	r1, r1, r5
 800c8a6:	6021      	streq	r1, [r4, #0]
 800c8a8:	6054      	str	r4, [r2, #4]
 800c8aa:	e7c7      	b.n	800c83c <_free_r+0x28>
 800c8ac:	b003      	add	sp, #12
 800c8ae:	bd30      	pop	{r4, r5, pc}
 800c8b0:	20000200 	.word	0x20000200

0800c8b4 <_malloc_r>:
 800c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b6:	1ccd      	adds	r5, r1, #3
 800c8b8:	f025 0503 	bic.w	r5, r5, #3
 800c8bc:	3508      	adds	r5, #8
 800c8be:	2d0c      	cmp	r5, #12
 800c8c0:	bf38      	it	cc
 800c8c2:	250c      	movcc	r5, #12
 800c8c4:	2d00      	cmp	r5, #0
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	db01      	blt.n	800c8ce <_malloc_r+0x1a>
 800c8ca:	42a9      	cmp	r1, r5
 800c8cc:	d903      	bls.n	800c8d6 <_malloc_r+0x22>
 800c8ce:	230c      	movs	r3, #12
 800c8d0:	6033      	str	r3, [r6, #0]
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8d6:	f000 fc19 	bl	800d10c <__malloc_lock>
 800c8da:	4921      	ldr	r1, [pc, #132]	; (800c960 <_malloc_r+0xac>)
 800c8dc:	680a      	ldr	r2, [r1, #0]
 800c8de:	4614      	mov	r4, r2
 800c8e0:	b99c      	cbnz	r4, 800c90a <_malloc_r+0x56>
 800c8e2:	4f20      	ldr	r7, [pc, #128]	; (800c964 <_malloc_r+0xb0>)
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	b923      	cbnz	r3, 800c8f2 <_malloc_r+0x3e>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f000 fafc 	bl	800cee8 <_sbrk_r>
 800c8f0:	6038      	str	r0, [r7, #0]
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f000 faf7 	bl	800cee8 <_sbrk_r>
 800c8fa:	1c43      	adds	r3, r0, #1
 800c8fc:	d123      	bne.n	800c946 <_malloc_r+0x92>
 800c8fe:	230c      	movs	r3, #12
 800c900:	6033      	str	r3, [r6, #0]
 800c902:	4630      	mov	r0, r6
 800c904:	f000 fc08 	bl	800d118 <__malloc_unlock>
 800c908:	e7e3      	b.n	800c8d2 <_malloc_r+0x1e>
 800c90a:	6823      	ldr	r3, [r4, #0]
 800c90c:	1b5b      	subs	r3, r3, r5
 800c90e:	d417      	bmi.n	800c940 <_malloc_r+0x8c>
 800c910:	2b0b      	cmp	r3, #11
 800c912:	d903      	bls.n	800c91c <_malloc_r+0x68>
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	441c      	add	r4, r3
 800c918:	6025      	str	r5, [r4, #0]
 800c91a:	e004      	b.n	800c926 <_malloc_r+0x72>
 800c91c:	6863      	ldr	r3, [r4, #4]
 800c91e:	42a2      	cmp	r2, r4
 800c920:	bf0c      	ite	eq
 800c922:	600b      	streq	r3, [r1, #0]
 800c924:	6053      	strne	r3, [r2, #4]
 800c926:	4630      	mov	r0, r6
 800c928:	f000 fbf6 	bl	800d118 <__malloc_unlock>
 800c92c:	f104 000b 	add.w	r0, r4, #11
 800c930:	1d23      	adds	r3, r4, #4
 800c932:	f020 0007 	bic.w	r0, r0, #7
 800c936:	1ac2      	subs	r2, r0, r3
 800c938:	d0cc      	beq.n	800c8d4 <_malloc_r+0x20>
 800c93a:	1a1b      	subs	r3, r3, r0
 800c93c:	50a3      	str	r3, [r4, r2]
 800c93e:	e7c9      	b.n	800c8d4 <_malloc_r+0x20>
 800c940:	4622      	mov	r2, r4
 800c942:	6864      	ldr	r4, [r4, #4]
 800c944:	e7cc      	b.n	800c8e0 <_malloc_r+0x2c>
 800c946:	1cc4      	adds	r4, r0, #3
 800c948:	f024 0403 	bic.w	r4, r4, #3
 800c94c:	42a0      	cmp	r0, r4
 800c94e:	d0e3      	beq.n	800c918 <_malloc_r+0x64>
 800c950:	1a21      	subs	r1, r4, r0
 800c952:	4630      	mov	r0, r6
 800c954:	f000 fac8 	bl	800cee8 <_sbrk_r>
 800c958:	3001      	adds	r0, #1
 800c95a:	d1dd      	bne.n	800c918 <_malloc_r+0x64>
 800c95c:	e7cf      	b.n	800c8fe <_malloc_r+0x4a>
 800c95e:	bf00      	nop
 800c960:	20000200 	.word	0x20000200
 800c964:	20000204 	.word	0x20000204

0800c968 <__ssputs_r>:
 800c968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c96c:	688e      	ldr	r6, [r1, #8]
 800c96e:	429e      	cmp	r6, r3
 800c970:	4682      	mov	sl, r0
 800c972:	460c      	mov	r4, r1
 800c974:	4690      	mov	r8, r2
 800c976:	461f      	mov	r7, r3
 800c978:	d838      	bhi.n	800c9ec <__ssputs_r+0x84>
 800c97a:	898a      	ldrh	r2, [r1, #12]
 800c97c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c980:	d032      	beq.n	800c9e8 <__ssputs_r+0x80>
 800c982:	6825      	ldr	r5, [r4, #0]
 800c984:	6909      	ldr	r1, [r1, #16]
 800c986:	eba5 0901 	sub.w	r9, r5, r1
 800c98a:	6965      	ldr	r5, [r4, #20]
 800c98c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c994:	3301      	adds	r3, #1
 800c996:	444b      	add	r3, r9
 800c998:	106d      	asrs	r5, r5, #1
 800c99a:	429d      	cmp	r5, r3
 800c99c:	bf38      	it	cc
 800c99e:	461d      	movcc	r5, r3
 800c9a0:	0553      	lsls	r3, r2, #21
 800c9a2:	d531      	bpl.n	800ca08 <__ssputs_r+0xa0>
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	f7ff ff85 	bl	800c8b4 <_malloc_r>
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	b950      	cbnz	r0, 800c9c4 <__ssputs_r+0x5c>
 800c9ae:	230c      	movs	r3, #12
 800c9b0:	f8ca 3000 	str.w	r3, [sl]
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ba:	81a3      	strh	r3, [r4, #12]
 800c9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c4:	6921      	ldr	r1, [r4, #16]
 800c9c6:	464a      	mov	r2, r9
 800c9c8:	f7fb ff7c 	bl	80088c4 <memcpy>
 800c9cc:	89a3      	ldrh	r3, [r4, #12]
 800c9ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9d6:	81a3      	strh	r3, [r4, #12]
 800c9d8:	6126      	str	r6, [r4, #16]
 800c9da:	6165      	str	r5, [r4, #20]
 800c9dc:	444e      	add	r6, r9
 800c9de:	eba5 0509 	sub.w	r5, r5, r9
 800c9e2:	6026      	str	r6, [r4, #0]
 800c9e4:	60a5      	str	r5, [r4, #8]
 800c9e6:	463e      	mov	r6, r7
 800c9e8:	42be      	cmp	r6, r7
 800c9ea:	d900      	bls.n	800c9ee <__ssputs_r+0x86>
 800c9ec:	463e      	mov	r6, r7
 800c9ee:	4632      	mov	r2, r6
 800c9f0:	6820      	ldr	r0, [r4, #0]
 800c9f2:	4641      	mov	r1, r8
 800c9f4:	f000 fb70 	bl	800d0d8 <memmove>
 800c9f8:	68a3      	ldr	r3, [r4, #8]
 800c9fa:	6822      	ldr	r2, [r4, #0]
 800c9fc:	1b9b      	subs	r3, r3, r6
 800c9fe:	4432      	add	r2, r6
 800ca00:	60a3      	str	r3, [r4, #8]
 800ca02:	6022      	str	r2, [r4, #0]
 800ca04:	2000      	movs	r0, #0
 800ca06:	e7db      	b.n	800c9c0 <__ssputs_r+0x58>
 800ca08:	462a      	mov	r2, r5
 800ca0a:	f000 fb8b 	bl	800d124 <_realloc_r>
 800ca0e:	4606      	mov	r6, r0
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d1e1      	bne.n	800c9d8 <__ssputs_r+0x70>
 800ca14:	6921      	ldr	r1, [r4, #16]
 800ca16:	4650      	mov	r0, sl
 800ca18:	f7ff fefc 	bl	800c814 <_free_r>
 800ca1c:	e7c7      	b.n	800c9ae <__ssputs_r+0x46>
	...

0800ca20 <_svfiprintf_r>:
 800ca20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	4698      	mov	r8, r3
 800ca26:	898b      	ldrh	r3, [r1, #12]
 800ca28:	061b      	lsls	r3, r3, #24
 800ca2a:	b09d      	sub	sp, #116	; 0x74
 800ca2c:	4607      	mov	r7, r0
 800ca2e:	460d      	mov	r5, r1
 800ca30:	4614      	mov	r4, r2
 800ca32:	d50e      	bpl.n	800ca52 <_svfiprintf_r+0x32>
 800ca34:	690b      	ldr	r3, [r1, #16]
 800ca36:	b963      	cbnz	r3, 800ca52 <_svfiprintf_r+0x32>
 800ca38:	2140      	movs	r1, #64	; 0x40
 800ca3a:	f7ff ff3b 	bl	800c8b4 <_malloc_r>
 800ca3e:	6028      	str	r0, [r5, #0]
 800ca40:	6128      	str	r0, [r5, #16]
 800ca42:	b920      	cbnz	r0, 800ca4e <_svfiprintf_r+0x2e>
 800ca44:	230c      	movs	r3, #12
 800ca46:	603b      	str	r3, [r7, #0]
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	e0d1      	b.n	800cbf2 <_svfiprintf_r+0x1d2>
 800ca4e:	2340      	movs	r3, #64	; 0x40
 800ca50:	616b      	str	r3, [r5, #20]
 800ca52:	2300      	movs	r3, #0
 800ca54:	9309      	str	r3, [sp, #36]	; 0x24
 800ca56:	2320      	movs	r3, #32
 800ca58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca60:	2330      	movs	r3, #48	; 0x30
 800ca62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cc0c <_svfiprintf_r+0x1ec>
 800ca66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca6a:	f04f 0901 	mov.w	r9, #1
 800ca6e:	4623      	mov	r3, r4
 800ca70:	469a      	mov	sl, r3
 800ca72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca76:	b10a      	cbz	r2, 800ca7c <_svfiprintf_r+0x5c>
 800ca78:	2a25      	cmp	r2, #37	; 0x25
 800ca7a:	d1f9      	bne.n	800ca70 <_svfiprintf_r+0x50>
 800ca7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca80:	d00b      	beq.n	800ca9a <_svfiprintf_r+0x7a>
 800ca82:	465b      	mov	r3, fp
 800ca84:	4622      	mov	r2, r4
 800ca86:	4629      	mov	r1, r5
 800ca88:	4638      	mov	r0, r7
 800ca8a:	f7ff ff6d 	bl	800c968 <__ssputs_r>
 800ca8e:	3001      	adds	r0, #1
 800ca90:	f000 80aa 	beq.w	800cbe8 <_svfiprintf_r+0x1c8>
 800ca94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca96:	445a      	add	r2, fp
 800ca98:	9209      	str	r2, [sp, #36]	; 0x24
 800ca9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f000 80a2 	beq.w	800cbe8 <_svfiprintf_r+0x1c8>
 800caa4:	2300      	movs	r3, #0
 800caa6:	f04f 32ff 	mov.w	r2, #4294967295
 800caaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caae:	f10a 0a01 	add.w	sl, sl, #1
 800cab2:	9304      	str	r3, [sp, #16]
 800cab4:	9307      	str	r3, [sp, #28]
 800cab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caba:	931a      	str	r3, [sp, #104]	; 0x68
 800cabc:	4654      	mov	r4, sl
 800cabe:	2205      	movs	r2, #5
 800cac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cac4:	4851      	ldr	r0, [pc, #324]	; (800cc0c <_svfiprintf_r+0x1ec>)
 800cac6:	f7f3 fb8b 	bl	80001e0 <memchr>
 800caca:	9a04      	ldr	r2, [sp, #16]
 800cacc:	b9d8      	cbnz	r0, 800cb06 <_svfiprintf_r+0xe6>
 800cace:	06d0      	lsls	r0, r2, #27
 800cad0:	bf44      	itt	mi
 800cad2:	2320      	movmi	r3, #32
 800cad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cad8:	0711      	lsls	r1, r2, #28
 800cada:	bf44      	itt	mi
 800cadc:	232b      	movmi	r3, #43	; 0x2b
 800cade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cae2:	f89a 3000 	ldrb.w	r3, [sl]
 800cae6:	2b2a      	cmp	r3, #42	; 0x2a
 800cae8:	d015      	beq.n	800cb16 <_svfiprintf_r+0xf6>
 800caea:	9a07      	ldr	r2, [sp, #28]
 800caec:	4654      	mov	r4, sl
 800caee:	2000      	movs	r0, #0
 800caf0:	f04f 0c0a 	mov.w	ip, #10
 800caf4:	4621      	mov	r1, r4
 800caf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cafa:	3b30      	subs	r3, #48	; 0x30
 800cafc:	2b09      	cmp	r3, #9
 800cafe:	d94e      	bls.n	800cb9e <_svfiprintf_r+0x17e>
 800cb00:	b1b0      	cbz	r0, 800cb30 <_svfiprintf_r+0x110>
 800cb02:	9207      	str	r2, [sp, #28]
 800cb04:	e014      	b.n	800cb30 <_svfiprintf_r+0x110>
 800cb06:	eba0 0308 	sub.w	r3, r0, r8
 800cb0a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	9304      	str	r3, [sp, #16]
 800cb12:	46a2      	mov	sl, r4
 800cb14:	e7d2      	b.n	800cabc <_svfiprintf_r+0x9c>
 800cb16:	9b03      	ldr	r3, [sp, #12]
 800cb18:	1d19      	adds	r1, r3, #4
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	9103      	str	r1, [sp, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	bfbb      	ittet	lt
 800cb22:	425b      	neglt	r3, r3
 800cb24:	f042 0202 	orrlt.w	r2, r2, #2
 800cb28:	9307      	strge	r3, [sp, #28]
 800cb2a:	9307      	strlt	r3, [sp, #28]
 800cb2c:	bfb8      	it	lt
 800cb2e:	9204      	strlt	r2, [sp, #16]
 800cb30:	7823      	ldrb	r3, [r4, #0]
 800cb32:	2b2e      	cmp	r3, #46	; 0x2e
 800cb34:	d10c      	bne.n	800cb50 <_svfiprintf_r+0x130>
 800cb36:	7863      	ldrb	r3, [r4, #1]
 800cb38:	2b2a      	cmp	r3, #42	; 0x2a
 800cb3a:	d135      	bne.n	800cba8 <_svfiprintf_r+0x188>
 800cb3c:	9b03      	ldr	r3, [sp, #12]
 800cb3e:	1d1a      	adds	r2, r3, #4
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	9203      	str	r2, [sp, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	bfb8      	it	lt
 800cb48:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb4c:	3402      	adds	r4, #2
 800cb4e:	9305      	str	r3, [sp, #20]
 800cb50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc1c <_svfiprintf_r+0x1fc>
 800cb54:	7821      	ldrb	r1, [r4, #0]
 800cb56:	2203      	movs	r2, #3
 800cb58:	4650      	mov	r0, sl
 800cb5a:	f7f3 fb41 	bl	80001e0 <memchr>
 800cb5e:	b140      	cbz	r0, 800cb72 <_svfiprintf_r+0x152>
 800cb60:	2340      	movs	r3, #64	; 0x40
 800cb62:	eba0 000a 	sub.w	r0, r0, sl
 800cb66:	fa03 f000 	lsl.w	r0, r3, r0
 800cb6a:	9b04      	ldr	r3, [sp, #16]
 800cb6c:	4303      	orrs	r3, r0
 800cb6e:	3401      	adds	r4, #1
 800cb70:	9304      	str	r3, [sp, #16]
 800cb72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb76:	4826      	ldr	r0, [pc, #152]	; (800cc10 <_svfiprintf_r+0x1f0>)
 800cb78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb7c:	2206      	movs	r2, #6
 800cb7e:	f7f3 fb2f 	bl	80001e0 <memchr>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d038      	beq.n	800cbf8 <_svfiprintf_r+0x1d8>
 800cb86:	4b23      	ldr	r3, [pc, #140]	; (800cc14 <_svfiprintf_r+0x1f4>)
 800cb88:	bb1b      	cbnz	r3, 800cbd2 <_svfiprintf_r+0x1b2>
 800cb8a:	9b03      	ldr	r3, [sp, #12]
 800cb8c:	3307      	adds	r3, #7
 800cb8e:	f023 0307 	bic.w	r3, r3, #7
 800cb92:	3308      	adds	r3, #8
 800cb94:	9303      	str	r3, [sp, #12]
 800cb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb98:	4433      	add	r3, r6
 800cb9a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb9c:	e767      	b.n	800ca6e <_svfiprintf_r+0x4e>
 800cb9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cba2:	460c      	mov	r4, r1
 800cba4:	2001      	movs	r0, #1
 800cba6:	e7a5      	b.n	800caf4 <_svfiprintf_r+0xd4>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	3401      	adds	r4, #1
 800cbac:	9305      	str	r3, [sp, #20]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	f04f 0c0a 	mov.w	ip, #10
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbba:	3a30      	subs	r2, #48	; 0x30
 800cbbc:	2a09      	cmp	r2, #9
 800cbbe:	d903      	bls.n	800cbc8 <_svfiprintf_r+0x1a8>
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d0c5      	beq.n	800cb50 <_svfiprintf_r+0x130>
 800cbc4:	9105      	str	r1, [sp, #20]
 800cbc6:	e7c3      	b.n	800cb50 <_svfiprintf_r+0x130>
 800cbc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbcc:	4604      	mov	r4, r0
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e7f0      	b.n	800cbb4 <_svfiprintf_r+0x194>
 800cbd2:	ab03      	add	r3, sp, #12
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	462a      	mov	r2, r5
 800cbd8:	4b0f      	ldr	r3, [pc, #60]	; (800cc18 <_svfiprintf_r+0x1f8>)
 800cbda:	a904      	add	r1, sp, #16
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f7fb ff27 	bl	8008a30 <_printf_float>
 800cbe2:	1c42      	adds	r2, r0, #1
 800cbe4:	4606      	mov	r6, r0
 800cbe6:	d1d6      	bne.n	800cb96 <_svfiprintf_r+0x176>
 800cbe8:	89ab      	ldrh	r3, [r5, #12]
 800cbea:	065b      	lsls	r3, r3, #25
 800cbec:	f53f af2c 	bmi.w	800ca48 <_svfiprintf_r+0x28>
 800cbf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbf2:	b01d      	add	sp, #116	; 0x74
 800cbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf8:	ab03      	add	r3, sp, #12
 800cbfa:	9300      	str	r3, [sp, #0]
 800cbfc:	462a      	mov	r2, r5
 800cbfe:	4b06      	ldr	r3, [pc, #24]	; (800cc18 <_svfiprintf_r+0x1f8>)
 800cc00:	a904      	add	r1, sp, #16
 800cc02:	4638      	mov	r0, r7
 800cc04:	f7fc f9b8 	bl	8008f78 <_printf_i>
 800cc08:	e7eb      	b.n	800cbe2 <_svfiprintf_r+0x1c2>
 800cc0a:	bf00      	nop
 800cc0c:	0800d96c 	.word	0x0800d96c
 800cc10:	0800d976 	.word	0x0800d976
 800cc14:	08008a31 	.word	0x08008a31
 800cc18:	0800c969 	.word	0x0800c969
 800cc1c:	0800d972 	.word	0x0800d972

0800cc20 <__sfputc_r>:
 800cc20:	6893      	ldr	r3, [r2, #8]
 800cc22:	3b01      	subs	r3, #1
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	b410      	push	{r4}
 800cc28:	6093      	str	r3, [r2, #8]
 800cc2a:	da08      	bge.n	800cc3e <__sfputc_r+0x1e>
 800cc2c:	6994      	ldr	r4, [r2, #24]
 800cc2e:	42a3      	cmp	r3, r4
 800cc30:	db01      	blt.n	800cc36 <__sfputc_r+0x16>
 800cc32:	290a      	cmp	r1, #10
 800cc34:	d103      	bne.n	800cc3e <__sfputc_r+0x1e>
 800cc36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc3a:	f7fd bc3b 	b.w	800a4b4 <__swbuf_r>
 800cc3e:	6813      	ldr	r3, [r2, #0]
 800cc40:	1c58      	adds	r0, r3, #1
 800cc42:	6010      	str	r0, [r2, #0]
 800cc44:	7019      	strb	r1, [r3, #0]
 800cc46:	4608      	mov	r0, r1
 800cc48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc4c:	4770      	bx	lr

0800cc4e <__sfputs_r>:
 800cc4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc50:	4606      	mov	r6, r0
 800cc52:	460f      	mov	r7, r1
 800cc54:	4614      	mov	r4, r2
 800cc56:	18d5      	adds	r5, r2, r3
 800cc58:	42ac      	cmp	r4, r5
 800cc5a:	d101      	bne.n	800cc60 <__sfputs_r+0x12>
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	e007      	b.n	800cc70 <__sfputs_r+0x22>
 800cc60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc64:	463a      	mov	r2, r7
 800cc66:	4630      	mov	r0, r6
 800cc68:	f7ff ffda 	bl	800cc20 <__sfputc_r>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	d1f3      	bne.n	800cc58 <__sfputs_r+0xa>
 800cc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc74 <_vfiprintf_r>:
 800cc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc78:	460d      	mov	r5, r1
 800cc7a:	b09d      	sub	sp, #116	; 0x74
 800cc7c:	4614      	mov	r4, r2
 800cc7e:	4698      	mov	r8, r3
 800cc80:	4606      	mov	r6, r0
 800cc82:	b118      	cbz	r0, 800cc8c <_vfiprintf_r+0x18>
 800cc84:	6983      	ldr	r3, [r0, #24]
 800cc86:	b90b      	cbnz	r3, 800cc8c <_vfiprintf_r+0x18>
 800cc88:	f7fe fc68 	bl	800b55c <__sinit>
 800cc8c:	4b89      	ldr	r3, [pc, #548]	; (800ceb4 <_vfiprintf_r+0x240>)
 800cc8e:	429d      	cmp	r5, r3
 800cc90:	d11b      	bne.n	800ccca <_vfiprintf_r+0x56>
 800cc92:	6875      	ldr	r5, [r6, #4]
 800cc94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc96:	07d9      	lsls	r1, r3, #31
 800cc98:	d405      	bmi.n	800cca6 <_vfiprintf_r+0x32>
 800cc9a:	89ab      	ldrh	r3, [r5, #12]
 800cc9c:	059a      	lsls	r2, r3, #22
 800cc9e:	d402      	bmi.n	800cca6 <_vfiprintf_r+0x32>
 800cca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cca2:	f7ff f86c 	bl	800bd7e <__retarget_lock_acquire_recursive>
 800cca6:	89ab      	ldrh	r3, [r5, #12]
 800cca8:	071b      	lsls	r3, r3, #28
 800ccaa:	d501      	bpl.n	800ccb0 <_vfiprintf_r+0x3c>
 800ccac:	692b      	ldr	r3, [r5, #16]
 800ccae:	b9eb      	cbnz	r3, 800ccec <_vfiprintf_r+0x78>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f7fd fc50 	bl	800a558 <__swsetup_r>
 800ccb8:	b1c0      	cbz	r0, 800ccec <_vfiprintf_r+0x78>
 800ccba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccbc:	07dc      	lsls	r4, r3, #31
 800ccbe:	d50e      	bpl.n	800ccde <_vfiprintf_r+0x6a>
 800ccc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc4:	b01d      	add	sp, #116	; 0x74
 800ccc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccca:	4b7b      	ldr	r3, [pc, #492]	; (800ceb8 <_vfiprintf_r+0x244>)
 800cccc:	429d      	cmp	r5, r3
 800ccce:	d101      	bne.n	800ccd4 <_vfiprintf_r+0x60>
 800ccd0:	68b5      	ldr	r5, [r6, #8]
 800ccd2:	e7df      	b.n	800cc94 <_vfiprintf_r+0x20>
 800ccd4:	4b79      	ldr	r3, [pc, #484]	; (800cebc <_vfiprintf_r+0x248>)
 800ccd6:	429d      	cmp	r5, r3
 800ccd8:	bf08      	it	eq
 800ccda:	68f5      	ldreq	r5, [r6, #12]
 800ccdc:	e7da      	b.n	800cc94 <_vfiprintf_r+0x20>
 800ccde:	89ab      	ldrh	r3, [r5, #12]
 800cce0:	0598      	lsls	r0, r3, #22
 800cce2:	d4ed      	bmi.n	800ccc0 <_vfiprintf_r+0x4c>
 800cce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cce6:	f7ff f84b 	bl	800bd80 <__retarget_lock_release_recursive>
 800ccea:	e7e9      	b.n	800ccc0 <_vfiprintf_r+0x4c>
 800ccec:	2300      	movs	r3, #0
 800ccee:	9309      	str	r3, [sp, #36]	; 0x24
 800ccf0:	2320      	movs	r3, #32
 800ccf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccfa:	2330      	movs	r3, #48	; 0x30
 800ccfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cec0 <_vfiprintf_r+0x24c>
 800cd00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd04:	f04f 0901 	mov.w	r9, #1
 800cd08:	4623      	mov	r3, r4
 800cd0a:	469a      	mov	sl, r3
 800cd0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd10:	b10a      	cbz	r2, 800cd16 <_vfiprintf_r+0xa2>
 800cd12:	2a25      	cmp	r2, #37	; 0x25
 800cd14:	d1f9      	bne.n	800cd0a <_vfiprintf_r+0x96>
 800cd16:	ebba 0b04 	subs.w	fp, sl, r4
 800cd1a:	d00b      	beq.n	800cd34 <_vfiprintf_r+0xc0>
 800cd1c:	465b      	mov	r3, fp
 800cd1e:	4622      	mov	r2, r4
 800cd20:	4629      	mov	r1, r5
 800cd22:	4630      	mov	r0, r6
 800cd24:	f7ff ff93 	bl	800cc4e <__sfputs_r>
 800cd28:	3001      	adds	r0, #1
 800cd2a:	f000 80aa 	beq.w	800ce82 <_vfiprintf_r+0x20e>
 800cd2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd30:	445a      	add	r2, fp
 800cd32:	9209      	str	r2, [sp, #36]	; 0x24
 800cd34:	f89a 3000 	ldrb.w	r3, [sl]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f000 80a2 	beq.w	800ce82 <_vfiprintf_r+0x20e>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	f04f 32ff 	mov.w	r2, #4294967295
 800cd44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd48:	f10a 0a01 	add.w	sl, sl, #1
 800cd4c:	9304      	str	r3, [sp, #16]
 800cd4e:	9307      	str	r3, [sp, #28]
 800cd50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd54:	931a      	str	r3, [sp, #104]	; 0x68
 800cd56:	4654      	mov	r4, sl
 800cd58:	2205      	movs	r2, #5
 800cd5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd5e:	4858      	ldr	r0, [pc, #352]	; (800cec0 <_vfiprintf_r+0x24c>)
 800cd60:	f7f3 fa3e 	bl	80001e0 <memchr>
 800cd64:	9a04      	ldr	r2, [sp, #16]
 800cd66:	b9d8      	cbnz	r0, 800cda0 <_vfiprintf_r+0x12c>
 800cd68:	06d1      	lsls	r1, r2, #27
 800cd6a:	bf44      	itt	mi
 800cd6c:	2320      	movmi	r3, #32
 800cd6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd72:	0713      	lsls	r3, r2, #28
 800cd74:	bf44      	itt	mi
 800cd76:	232b      	movmi	r3, #43	; 0x2b
 800cd78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd7c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd80:	2b2a      	cmp	r3, #42	; 0x2a
 800cd82:	d015      	beq.n	800cdb0 <_vfiprintf_r+0x13c>
 800cd84:	9a07      	ldr	r2, [sp, #28]
 800cd86:	4654      	mov	r4, sl
 800cd88:	2000      	movs	r0, #0
 800cd8a:	f04f 0c0a 	mov.w	ip, #10
 800cd8e:	4621      	mov	r1, r4
 800cd90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd94:	3b30      	subs	r3, #48	; 0x30
 800cd96:	2b09      	cmp	r3, #9
 800cd98:	d94e      	bls.n	800ce38 <_vfiprintf_r+0x1c4>
 800cd9a:	b1b0      	cbz	r0, 800cdca <_vfiprintf_r+0x156>
 800cd9c:	9207      	str	r2, [sp, #28]
 800cd9e:	e014      	b.n	800cdca <_vfiprintf_r+0x156>
 800cda0:	eba0 0308 	sub.w	r3, r0, r8
 800cda4:	fa09 f303 	lsl.w	r3, r9, r3
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	9304      	str	r3, [sp, #16]
 800cdac:	46a2      	mov	sl, r4
 800cdae:	e7d2      	b.n	800cd56 <_vfiprintf_r+0xe2>
 800cdb0:	9b03      	ldr	r3, [sp, #12]
 800cdb2:	1d19      	adds	r1, r3, #4
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	9103      	str	r1, [sp, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	bfbb      	ittet	lt
 800cdbc:	425b      	neglt	r3, r3
 800cdbe:	f042 0202 	orrlt.w	r2, r2, #2
 800cdc2:	9307      	strge	r3, [sp, #28]
 800cdc4:	9307      	strlt	r3, [sp, #28]
 800cdc6:	bfb8      	it	lt
 800cdc8:	9204      	strlt	r2, [sp, #16]
 800cdca:	7823      	ldrb	r3, [r4, #0]
 800cdcc:	2b2e      	cmp	r3, #46	; 0x2e
 800cdce:	d10c      	bne.n	800cdea <_vfiprintf_r+0x176>
 800cdd0:	7863      	ldrb	r3, [r4, #1]
 800cdd2:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd4:	d135      	bne.n	800ce42 <_vfiprintf_r+0x1ce>
 800cdd6:	9b03      	ldr	r3, [sp, #12]
 800cdd8:	1d1a      	adds	r2, r3, #4
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	9203      	str	r2, [sp, #12]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	bfb8      	it	lt
 800cde2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cde6:	3402      	adds	r4, #2
 800cde8:	9305      	str	r3, [sp, #20]
 800cdea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ced0 <_vfiprintf_r+0x25c>
 800cdee:	7821      	ldrb	r1, [r4, #0]
 800cdf0:	2203      	movs	r2, #3
 800cdf2:	4650      	mov	r0, sl
 800cdf4:	f7f3 f9f4 	bl	80001e0 <memchr>
 800cdf8:	b140      	cbz	r0, 800ce0c <_vfiprintf_r+0x198>
 800cdfa:	2340      	movs	r3, #64	; 0x40
 800cdfc:	eba0 000a 	sub.w	r0, r0, sl
 800ce00:	fa03 f000 	lsl.w	r0, r3, r0
 800ce04:	9b04      	ldr	r3, [sp, #16]
 800ce06:	4303      	orrs	r3, r0
 800ce08:	3401      	adds	r4, #1
 800ce0a:	9304      	str	r3, [sp, #16]
 800ce0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce10:	482c      	ldr	r0, [pc, #176]	; (800cec4 <_vfiprintf_r+0x250>)
 800ce12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce16:	2206      	movs	r2, #6
 800ce18:	f7f3 f9e2 	bl	80001e0 <memchr>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d03f      	beq.n	800cea0 <_vfiprintf_r+0x22c>
 800ce20:	4b29      	ldr	r3, [pc, #164]	; (800cec8 <_vfiprintf_r+0x254>)
 800ce22:	bb1b      	cbnz	r3, 800ce6c <_vfiprintf_r+0x1f8>
 800ce24:	9b03      	ldr	r3, [sp, #12]
 800ce26:	3307      	adds	r3, #7
 800ce28:	f023 0307 	bic.w	r3, r3, #7
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	9303      	str	r3, [sp, #12]
 800ce30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce32:	443b      	add	r3, r7
 800ce34:	9309      	str	r3, [sp, #36]	; 0x24
 800ce36:	e767      	b.n	800cd08 <_vfiprintf_r+0x94>
 800ce38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	2001      	movs	r0, #1
 800ce40:	e7a5      	b.n	800cd8e <_vfiprintf_r+0x11a>
 800ce42:	2300      	movs	r3, #0
 800ce44:	3401      	adds	r4, #1
 800ce46:	9305      	str	r3, [sp, #20]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	f04f 0c0a 	mov.w	ip, #10
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce54:	3a30      	subs	r2, #48	; 0x30
 800ce56:	2a09      	cmp	r2, #9
 800ce58:	d903      	bls.n	800ce62 <_vfiprintf_r+0x1ee>
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d0c5      	beq.n	800cdea <_vfiprintf_r+0x176>
 800ce5e:	9105      	str	r1, [sp, #20]
 800ce60:	e7c3      	b.n	800cdea <_vfiprintf_r+0x176>
 800ce62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce66:	4604      	mov	r4, r0
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e7f0      	b.n	800ce4e <_vfiprintf_r+0x1da>
 800ce6c:	ab03      	add	r3, sp, #12
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	462a      	mov	r2, r5
 800ce72:	4b16      	ldr	r3, [pc, #88]	; (800cecc <_vfiprintf_r+0x258>)
 800ce74:	a904      	add	r1, sp, #16
 800ce76:	4630      	mov	r0, r6
 800ce78:	f7fb fdda 	bl	8008a30 <_printf_float>
 800ce7c:	4607      	mov	r7, r0
 800ce7e:	1c78      	adds	r0, r7, #1
 800ce80:	d1d6      	bne.n	800ce30 <_vfiprintf_r+0x1bc>
 800ce82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce84:	07d9      	lsls	r1, r3, #31
 800ce86:	d405      	bmi.n	800ce94 <_vfiprintf_r+0x220>
 800ce88:	89ab      	ldrh	r3, [r5, #12]
 800ce8a:	059a      	lsls	r2, r3, #22
 800ce8c:	d402      	bmi.n	800ce94 <_vfiprintf_r+0x220>
 800ce8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce90:	f7fe ff76 	bl	800bd80 <__retarget_lock_release_recursive>
 800ce94:	89ab      	ldrh	r3, [r5, #12]
 800ce96:	065b      	lsls	r3, r3, #25
 800ce98:	f53f af12 	bmi.w	800ccc0 <_vfiprintf_r+0x4c>
 800ce9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce9e:	e711      	b.n	800ccc4 <_vfiprintf_r+0x50>
 800cea0:	ab03      	add	r3, sp, #12
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	462a      	mov	r2, r5
 800cea6:	4b09      	ldr	r3, [pc, #36]	; (800cecc <_vfiprintf_r+0x258>)
 800cea8:	a904      	add	r1, sp, #16
 800ceaa:	4630      	mov	r0, r6
 800ceac:	f7fc f864 	bl	8008f78 <_printf_i>
 800ceb0:	e7e4      	b.n	800ce7c <_vfiprintf_r+0x208>
 800ceb2:	bf00      	nop
 800ceb4:	0800d750 	.word	0x0800d750
 800ceb8:	0800d770 	.word	0x0800d770
 800cebc:	0800d730 	.word	0x0800d730
 800cec0:	0800d96c 	.word	0x0800d96c
 800cec4:	0800d976 	.word	0x0800d976
 800cec8:	08008a31 	.word	0x08008a31
 800cecc:	0800cc4f 	.word	0x0800cc4f
 800ced0:	0800d972 	.word	0x0800d972
 800ced4:	00000000 	.word	0x00000000

0800ced8 <nan>:
 800ced8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cee0 <nan+0x8>
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	00000000 	.word	0x00000000
 800cee4:	7ff80000 	.word	0x7ff80000

0800cee8 <_sbrk_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4d06      	ldr	r5, [pc, #24]	; (800cf04 <_sbrk_r+0x1c>)
 800ceec:	2300      	movs	r3, #0
 800ceee:	4604      	mov	r4, r0
 800cef0:	4608      	mov	r0, r1
 800cef2:	602b      	str	r3, [r5, #0]
 800cef4:	f7f6 fc3c 	bl	8003770 <_sbrk>
 800cef8:	1c43      	adds	r3, r0, #1
 800cefa:	d102      	bne.n	800cf02 <_sbrk_r+0x1a>
 800cefc:	682b      	ldr	r3, [r5, #0]
 800cefe:	b103      	cbz	r3, 800cf02 <_sbrk_r+0x1a>
 800cf00:	6023      	str	r3, [r4, #0]
 800cf02:	bd38      	pop	{r3, r4, r5, pc}
 800cf04:	20000740 	.word	0x20000740

0800cf08 <__sread>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf10:	f000 f92e 	bl	800d170 <_read_r>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	bfab      	itete	ge
 800cf18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf1a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf1c:	181b      	addge	r3, r3, r0
 800cf1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf22:	bfac      	ite	ge
 800cf24:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf26:	81a3      	strhlt	r3, [r4, #12]
 800cf28:	bd10      	pop	{r4, pc}

0800cf2a <__swrite>:
 800cf2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf2e:	461f      	mov	r7, r3
 800cf30:	898b      	ldrh	r3, [r1, #12]
 800cf32:	05db      	lsls	r3, r3, #23
 800cf34:	4605      	mov	r5, r0
 800cf36:	460c      	mov	r4, r1
 800cf38:	4616      	mov	r6, r2
 800cf3a:	d505      	bpl.n	800cf48 <__swrite+0x1e>
 800cf3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf40:	2302      	movs	r3, #2
 800cf42:	2200      	movs	r2, #0
 800cf44:	f000 f8b6 	bl	800d0b4 <_lseek_r>
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf52:	81a3      	strh	r3, [r4, #12]
 800cf54:	4632      	mov	r2, r6
 800cf56:	463b      	mov	r3, r7
 800cf58:	4628      	mov	r0, r5
 800cf5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5e:	f000 b835 	b.w	800cfcc <_write_r>

0800cf62 <__sseek>:
 800cf62:	b510      	push	{r4, lr}
 800cf64:	460c      	mov	r4, r1
 800cf66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf6a:	f000 f8a3 	bl	800d0b4 <_lseek_r>
 800cf6e:	1c43      	adds	r3, r0, #1
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	bf15      	itete	ne
 800cf74:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf7e:	81a3      	strheq	r3, [r4, #12]
 800cf80:	bf18      	it	ne
 800cf82:	81a3      	strhne	r3, [r4, #12]
 800cf84:	bd10      	pop	{r4, pc}

0800cf86 <__sclose>:
 800cf86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf8a:	f000 b84f 	b.w	800d02c <_close_r>

0800cf8e <strncmp>:
 800cf8e:	b510      	push	{r4, lr}
 800cf90:	b16a      	cbz	r2, 800cfae <strncmp+0x20>
 800cf92:	3901      	subs	r1, #1
 800cf94:	1884      	adds	r4, r0, r2
 800cf96:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cf9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d103      	bne.n	800cfaa <strncmp+0x1c>
 800cfa2:	42a0      	cmp	r0, r4
 800cfa4:	d001      	beq.n	800cfaa <strncmp+0x1c>
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1f5      	bne.n	800cf96 <strncmp+0x8>
 800cfaa:	1a98      	subs	r0, r3, r2
 800cfac:	bd10      	pop	{r4, pc}
 800cfae:	4610      	mov	r0, r2
 800cfb0:	e7fc      	b.n	800cfac <strncmp+0x1e>

0800cfb2 <__ascii_wctomb>:
 800cfb2:	b149      	cbz	r1, 800cfc8 <__ascii_wctomb+0x16>
 800cfb4:	2aff      	cmp	r2, #255	; 0xff
 800cfb6:	bf85      	ittet	hi
 800cfb8:	238a      	movhi	r3, #138	; 0x8a
 800cfba:	6003      	strhi	r3, [r0, #0]
 800cfbc:	700a      	strbls	r2, [r1, #0]
 800cfbe:	f04f 30ff 	movhi.w	r0, #4294967295
 800cfc2:	bf98      	it	ls
 800cfc4:	2001      	movls	r0, #1
 800cfc6:	4770      	bx	lr
 800cfc8:	4608      	mov	r0, r1
 800cfca:	4770      	bx	lr

0800cfcc <_write_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d07      	ldr	r5, [pc, #28]	; (800cfec <_write_r+0x20>)
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	4608      	mov	r0, r1
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	602a      	str	r2, [r5, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	f7f6 fb77 	bl	80036ce <_write>
 800cfe0:	1c43      	adds	r3, r0, #1
 800cfe2:	d102      	bne.n	800cfea <_write_r+0x1e>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	b103      	cbz	r3, 800cfea <_write_r+0x1e>
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	bd38      	pop	{r3, r4, r5, pc}
 800cfec:	20000740 	.word	0x20000740

0800cff0 <__assert_func>:
 800cff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cff2:	4614      	mov	r4, r2
 800cff4:	461a      	mov	r2, r3
 800cff6:	4b09      	ldr	r3, [pc, #36]	; (800d01c <__assert_func+0x2c>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4605      	mov	r5, r0
 800cffc:	68d8      	ldr	r0, [r3, #12]
 800cffe:	b14c      	cbz	r4, 800d014 <__assert_func+0x24>
 800d000:	4b07      	ldr	r3, [pc, #28]	; (800d020 <__assert_func+0x30>)
 800d002:	9100      	str	r1, [sp, #0]
 800d004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d008:	4906      	ldr	r1, [pc, #24]	; (800d024 <__assert_func+0x34>)
 800d00a:	462b      	mov	r3, r5
 800d00c:	f000 f81e 	bl	800d04c <fiprintf>
 800d010:	f000 f8c0 	bl	800d194 <abort>
 800d014:	4b04      	ldr	r3, [pc, #16]	; (800d028 <__assert_func+0x38>)
 800d016:	461c      	mov	r4, r3
 800d018:	e7f3      	b.n	800d002 <__assert_func+0x12>
 800d01a:	bf00      	nop
 800d01c:	2000000c 	.word	0x2000000c
 800d020:	0800d97d 	.word	0x0800d97d
 800d024:	0800d98a 	.word	0x0800d98a
 800d028:	0800d9b8 	.word	0x0800d9b8

0800d02c <_close_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	4d06      	ldr	r5, [pc, #24]	; (800d048 <_close_r+0x1c>)
 800d030:	2300      	movs	r3, #0
 800d032:	4604      	mov	r4, r0
 800d034:	4608      	mov	r0, r1
 800d036:	602b      	str	r3, [r5, #0]
 800d038:	f7f6 fb65 	bl	8003706 <_close>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d102      	bne.n	800d046 <_close_r+0x1a>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	b103      	cbz	r3, 800d046 <_close_r+0x1a>
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	20000740 	.word	0x20000740

0800d04c <fiprintf>:
 800d04c:	b40e      	push	{r1, r2, r3}
 800d04e:	b503      	push	{r0, r1, lr}
 800d050:	4601      	mov	r1, r0
 800d052:	ab03      	add	r3, sp, #12
 800d054:	4805      	ldr	r0, [pc, #20]	; (800d06c <fiprintf+0x20>)
 800d056:	f853 2b04 	ldr.w	r2, [r3], #4
 800d05a:	6800      	ldr	r0, [r0, #0]
 800d05c:	9301      	str	r3, [sp, #4]
 800d05e:	f7ff fe09 	bl	800cc74 <_vfiprintf_r>
 800d062:	b002      	add	sp, #8
 800d064:	f85d eb04 	ldr.w	lr, [sp], #4
 800d068:	b003      	add	sp, #12
 800d06a:	4770      	bx	lr
 800d06c:	2000000c 	.word	0x2000000c

0800d070 <_fstat_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4d07      	ldr	r5, [pc, #28]	; (800d090 <_fstat_r+0x20>)
 800d074:	2300      	movs	r3, #0
 800d076:	4604      	mov	r4, r0
 800d078:	4608      	mov	r0, r1
 800d07a:	4611      	mov	r1, r2
 800d07c:	602b      	str	r3, [r5, #0]
 800d07e:	f7f6 fb4e 	bl	800371e <_fstat>
 800d082:	1c43      	adds	r3, r0, #1
 800d084:	d102      	bne.n	800d08c <_fstat_r+0x1c>
 800d086:	682b      	ldr	r3, [r5, #0]
 800d088:	b103      	cbz	r3, 800d08c <_fstat_r+0x1c>
 800d08a:	6023      	str	r3, [r4, #0]
 800d08c:	bd38      	pop	{r3, r4, r5, pc}
 800d08e:	bf00      	nop
 800d090:	20000740 	.word	0x20000740

0800d094 <_isatty_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	4d06      	ldr	r5, [pc, #24]	; (800d0b0 <_isatty_r+0x1c>)
 800d098:	2300      	movs	r3, #0
 800d09a:	4604      	mov	r4, r0
 800d09c:	4608      	mov	r0, r1
 800d09e:	602b      	str	r3, [r5, #0]
 800d0a0:	f7f6 fb4d 	bl	800373e <_isatty>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d102      	bne.n	800d0ae <_isatty_r+0x1a>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	b103      	cbz	r3, 800d0ae <_isatty_r+0x1a>
 800d0ac:	6023      	str	r3, [r4, #0]
 800d0ae:	bd38      	pop	{r3, r4, r5, pc}
 800d0b0:	20000740 	.word	0x20000740

0800d0b4 <_lseek_r>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	4d07      	ldr	r5, [pc, #28]	; (800d0d4 <_lseek_r+0x20>)
 800d0b8:	4604      	mov	r4, r0
 800d0ba:	4608      	mov	r0, r1
 800d0bc:	4611      	mov	r1, r2
 800d0be:	2200      	movs	r2, #0
 800d0c0:	602a      	str	r2, [r5, #0]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	f7f6 fb46 	bl	8003754 <_lseek>
 800d0c8:	1c43      	adds	r3, r0, #1
 800d0ca:	d102      	bne.n	800d0d2 <_lseek_r+0x1e>
 800d0cc:	682b      	ldr	r3, [r5, #0]
 800d0ce:	b103      	cbz	r3, 800d0d2 <_lseek_r+0x1e>
 800d0d0:	6023      	str	r3, [r4, #0]
 800d0d2:	bd38      	pop	{r3, r4, r5, pc}
 800d0d4:	20000740 	.word	0x20000740

0800d0d8 <memmove>:
 800d0d8:	4288      	cmp	r0, r1
 800d0da:	b510      	push	{r4, lr}
 800d0dc:	eb01 0402 	add.w	r4, r1, r2
 800d0e0:	d902      	bls.n	800d0e8 <memmove+0x10>
 800d0e2:	4284      	cmp	r4, r0
 800d0e4:	4623      	mov	r3, r4
 800d0e6:	d807      	bhi.n	800d0f8 <memmove+0x20>
 800d0e8:	1e43      	subs	r3, r0, #1
 800d0ea:	42a1      	cmp	r1, r4
 800d0ec:	d008      	beq.n	800d100 <memmove+0x28>
 800d0ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0f6:	e7f8      	b.n	800d0ea <memmove+0x12>
 800d0f8:	4402      	add	r2, r0
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	428a      	cmp	r2, r1
 800d0fe:	d100      	bne.n	800d102 <memmove+0x2a>
 800d100:	bd10      	pop	{r4, pc}
 800d102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d10a:	e7f7      	b.n	800d0fc <memmove+0x24>

0800d10c <__malloc_lock>:
 800d10c:	4801      	ldr	r0, [pc, #4]	; (800d114 <__malloc_lock+0x8>)
 800d10e:	f7fe be36 	b.w	800bd7e <__retarget_lock_acquire_recursive>
 800d112:	bf00      	nop
 800d114:	20000738 	.word	0x20000738

0800d118 <__malloc_unlock>:
 800d118:	4801      	ldr	r0, [pc, #4]	; (800d120 <__malloc_unlock+0x8>)
 800d11a:	f7fe be31 	b.w	800bd80 <__retarget_lock_release_recursive>
 800d11e:	bf00      	nop
 800d120:	20000738 	.word	0x20000738

0800d124 <_realloc_r>:
 800d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d126:	4607      	mov	r7, r0
 800d128:	4614      	mov	r4, r2
 800d12a:	460e      	mov	r6, r1
 800d12c:	b921      	cbnz	r1, 800d138 <_realloc_r+0x14>
 800d12e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d132:	4611      	mov	r1, r2
 800d134:	f7ff bbbe 	b.w	800c8b4 <_malloc_r>
 800d138:	b922      	cbnz	r2, 800d144 <_realloc_r+0x20>
 800d13a:	f7ff fb6b 	bl	800c814 <_free_r>
 800d13e:	4625      	mov	r5, r4
 800d140:	4628      	mov	r0, r5
 800d142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d144:	f000 f82d 	bl	800d1a2 <_malloc_usable_size_r>
 800d148:	42a0      	cmp	r0, r4
 800d14a:	d20f      	bcs.n	800d16c <_realloc_r+0x48>
 800d14c:	4621      	mov	r1, r4
 800d14e:	4638      	mov	r0, r7
 800d150:	f7ff fbb0 	bl	800c8b4 <_malloc_r>
 800d154:	4605      	mov	r5, r0
 800d156:	2800      	cmp	r0, #0
 800d158:	d0f2      	beq.n	800d140 <_realloc_r+0x1c>
 800d15a:	4631      	mov	r1, r6
 800d15c:	4622      	mov	r2, r4
 800d15e:	f7fb fbb1 	bl	80088c4 <memcpy>
 800d162:	4631      	mov	r1, r6
 800d164:	4638      	mov	r0, r7
 800d166:	f7ff fb55 	bl	800c814 <_free_r>
 800d16a:	e7e9      	b.n	800d140 <_realloc_r+0x1c>
 800d16c:	4635      	mov	r5, r6
 800d16e:	e7e7      	b.n	800d140 <_realloc_r+0x1c>

0800d170 <_read_r>:
 800d170:	b538      	push	{r3, r4, r5, lr}
 800d172:	4d07      	ldr	r5, [pc, #28]	; (800d190 <_read_r+0x20>)
 800d174:	4604      	mov	r4, r0
 800d176:	4608      	mov	r0, r1
 800d178:	4611      	mov	r1, r2
 800d17a:	2200      	movs	r2, #0
 800d17c:	602a      	str	r2, [r5, #0]
 800d17e:	461a      	mov	r2, r3
 800d180:	f7f6 fa88 	bl	8003694 <_read>
 800d184:	1c43      	adds	r3, r0, #1
 800d186:	d102      	bne.n	800d18e <_read_r+0x1e>
 800d188:	682b      	ldr	r3, [r5, #0]
 800d18a:	b103      	cbz	r3, 800d18e <_read_r+0x1e>
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	bd38      	pop	{r3, r4, r5, pc}
 800d190:	20000740 	.word	0x20000740

0800d194 <abort>:
 800d194:	b508      	push	{r3, lr}
 800d196:	2006      	movs	r0, #6
 800d198:	f000 f834 	bl	800d204 <raise>
 800d19c:	2001      	movs	r0, #1
 800d19e:	f7f6 fa6f 	bl	8003680 <_exit>

0800d1a2 <_malloc_usable_size_r>:
 800d1a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1a6:	1f18      	subs	r0, r3, #4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	bfbc      	itt	lt
 800d1ac:	580b      	ldrlt	r3, [r1, r0]
 800d1ae:	18c0      	addlt	r0, r0, r3
 800d1b0:	4770      	bx	lr

0800d1b2 <_raise_r>:
 800d1b2:	291f      	cmp	r1, #31
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	460d      	mov	r5, r1
 800d1ba:	d904      	bls.n	800d1c6 <_raise_r+0x14>
 800d1bc:	2316      	movs	r3, #22
 800d1be:	6003      	str	r3, [r0, #0]
 800d1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c4:	bd38      	pop	{r3, r4, r5, pc}
 800d1c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1c8:	b112      	cbz	r2, 800d1d0 <_raise_r+0x1e>
 800d1ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1ce:	b94b      	cbnz	r3, 800d1e4 <_raise_r+0x32>
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f000 f831 	bl	800d238 <_getpid_r>
 800d1d6:	462a      	mov	r2, r5
 800d1d8:	4601      	mov	r1, r0
 800d1da:	4620      	mov	r0, r4
 800d1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1e0:	f000 b818 	b.w	800d214 <_kill_r>
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d00a      	beq.n	800d1fe <_raise_r+0x4c>
 800d1e8:	1c59      	adds	r1, r3, #1
 800d1ea:	d103      	bne.n	800d1f4 <_raise_r+0x42>
 800d1ec:	2316      	movs	r3, #22
 800d1ee:	6003      	str	r3, [r0, #0]
 800d1f0:	2001      	movs	r0, #1
 800d1f2:	e7e7      	b.n	800d1c4 <_raise_r+0x12>
 800d1f4:	2400      	movs	r4, #0
 800d1f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	4798      	blx	r3
 800d1fe:	2000      	movs	r0, #0
 800d200:	e7e0      	b.n	800d1c4 <_raise_r+0x12>
	...

0800d204 <raise>:
 800d204:	4b02      	ldr	r3, [pc, #8]	; (800d210 <raise+0xc>)
 800d206:	4601      	mov	r1, r0
 800d208:	6818      	ldr	r0, [r3, #0]
 800d20a:	f7ff bfd2 	b.w	800d1b2 <_raise_r>
 800d20e:	bf00      	nop
 800d210:	2000000c 	.word	0x2000000c

0800d214 <_kill_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4d07      	ldr	r5, [pc, #28]	; (800d234 <_kill_r+0x20>)
 800d218:	2300      	movs	r3, #0
 800d21a:	4604      	mov	r4, r0
 800d21c:	4608      	mov	r0, r1
 800d21e:	4611      	mov	r1, r2
 800d220:	602b      	str	r3, [r5, #0]
 800d222:	f7f6 fa1d 	bl	8003660 <_kill>
 800d226:	1c43      	adds	r3, r0, #1
 800d228:	d102      	bne.n	800d230 <_kill_r+0x1c>
 800d22a:	682b      	ldr	r3, [r5, #0]
 800d22c:	b103      	cbz	r3, 800d230 <_kill_r+0x1c>
 800d22e:	6023      	str	r3, [r4, #0]
 800d230:	bd38      	pop	{r3, r4, r5, pc}
 800d232:	bf00      	nop
 800d234:	20000740 	.word	0x20000740

0800d238 <_getpid_r>:
 800d238:	f7f6 ba0a 	b.w	8003650 <_getpid>

0800d23c <_init>:
 800d23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23e:	bf00      	nop
 800d240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d242:	bc08      	pop	{r3}
 800d244:	469e      	mov	lr, r3
 800d246:	4770      	bx	lr

0800d248 <_fini>:
 800d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24a:	bf00      	nop
 800d24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d24e:	bc08      	pop	{r3}
 800d250:	469e      	mov	lr, r3
 800d252:	4770      	bx	lr
