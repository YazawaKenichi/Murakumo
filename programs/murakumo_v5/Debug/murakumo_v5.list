
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a54  08007a54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007a54  08007a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a5c  08007a5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000070  08007ad4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08007ad4  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012843  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023c8  00000000  00000000  000328e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c0  00000000  00000000  00034cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d0  00000000  00000000  00035f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e5b  00000000  00000000  00037140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3b0  00000000  00000000  0003af9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c99d9  00000000  00000000  0004834b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111d24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005994  00000000  00000000  00111da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078c8 	.word	0x080078c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080078c8 	.word	0x080078c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b972 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	4688      	mov	r8, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0803 	orr.w	r8, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c14:	fa1f fc85 	uxth.w	ip, r5
 8000c18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c20:	fb07 f10c 	mul.w	r1, r7, ip
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2e:	f080 811b 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8118 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c50:	45a4      	cmp	ip, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c64:	3802      	subs	r0, #2
 8000c66:	442c      	add	r4, r5
 8000c68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6c:	eba4 040c 	sub.w	r4, r4, ip
 8000c70:	2700      	movs	r7, #0
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80eb 	beq.w	8000e62 <__udivmoddi4+0x286>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d147      	bne.n	8000d32 <__udivmoddi4+0x156>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2c4>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	1b49      	subs	r1, r1, r5
 8000cd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd4:	fa1f f885 	uxth.w	r8, r5
 8000cd8:	2701      	movs	r7, #1
 8000cda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cf0:	18eb      	adds	r3, r5, r3
 8000cf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000cfe:	4684      	mov	ip, r0
 8000d00:	1a59      	subs	r1, r3, r1
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d10:	fb08 f800 	mul.w	r8, r8, r0
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x14c>
 8000d18:	192c      	adds	r4, r5, r4
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x14a>
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	f200 80b6 	bhi.w	8000e92 <__udivmoddi4+0x2b6>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 0408 	sub.w	r4, r4, r8
 8000d2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d30:	e79f      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d32:	f1c7 0c20 	rsb	ip, r7, #32
 8000d36:	40bb      	lsls	r3, r7
 8000d38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d40:	fa01 f407 	lsl.w	r4, r1, r7
 8000d44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d50:	4325      	orrs	r5, r4
 8000d52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d56:	0c2c      	lsrs	r4, r5, #16
 8000d58:	fb08 3319 	mls	r3, r8, r9, r3
 8000d5c:	fa1f fa8e 	uxth.w	sl, lr
 8000d60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d64:	fb09 f40a 	mul.w	r4, r9, sl
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1e 0303 	adds.w	r3, lr, r3
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8087 	bcs.w	8000e8e <__udivmoddi4+0x2b2>
 8000d80:	429c      	cmp	r4, r3
 8000d82:	f240 8084 	bls.w	8000e8e <__udivmoddi4+0x2b2>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4473      	add	r3, lr
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	b2ad      	uxth	r5, r5
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1e 0404 	adds.w	r4, lr, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	d26b      	bcs.n	8000e86 <__udivmoddi4+0x2aa>
 8000dae:	45a2      	cmp	sl, r4
 8000db0:	d969      	bls.n	8000e86 <__udivmoddi4+0x2aa>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4474      	add	r4, lr
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbe:	eba4 040a 	sub.w	r4, r4, sl
 8000dc2:	454c      	cmp	r4, r9
 8000dc4:	46c2      	mov	sl, r8
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	d354      	bcc.n	8000e74 <__udivmoddi4+0x298>
 8000dca:	d051      	beq.n	8000e70 <__udivmoddi4+0x294>
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d069      	beq.n	8000ea4 <__udivmoddi4+0x2c8>
 8000dd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ddc:	40fd      	lsrs	r5, r7
 8000dde:	40fc      	lsrs	r4, r7
 8000de0:	ea4c 0505 	orr.w	r5, ip, r5
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f703 	lsr.w	r7, r0, r3
 8000df4:	4095      	lsls	r5, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e02:	4338      	orrs	r0, r7
 8000e04:	0c01      	lsrs	r1, r0, #16
 8000e06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0a:	fa1f f885 	uxth.w	r8, r5
 8000e0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb07 f308 	mul.w	r3, r7, r8
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x256>
 8000e22:	1869      	adds	r1, r5, r1
 8000e24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e28:	d22f      	bcs.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d92d      	bls.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2e:	3f02      	subs	r7, #2
 8000e30:	4429      	add	r1, r5
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	b281      	uxth	r1, r0
 8000e36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb00 f308 	mul.w	r3, r0, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e50:	d217      	bcs.n	8000e82 <__udivmoddi4+0x2a6>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d915      	bls.n	8000e82 <__udivmoddi4+0x2a6>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e60:	e73b      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e62:	4637      	mov	r7, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e709      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e68:	4607      	mov	r7, r0
 8000e6a:	e6e7      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e70:	4541      	cmp	r1, r8
 8000e72:	d2ab      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e78:	eb69 020e 	sbc.w	r2, r9, lr
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	4613      	mov	r3, r2
 8000e80:	e7a4      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e82:	4660      	mov	r0, ip
 8000e84:	e7e9      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e86:	4618      	mov	r0, r3
 8000e88:	e795      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8a:	4667      	mov	r7, ip
 8000e8c:	e7d1      	b.n	8000e32 <__udivmoddi4+0x256>
 8000e8e:	4681      	mov	r9, r0
 8000e90:	e77c      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	442c      	add	r4, r5
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0x14c>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	442b      	add	r3, r5
 8000e9e:	e72f      	b.n	8000d00 <__udivmoddi4+0x124>
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea4:	4637      	mov	r7, r6
 8000ea6:	e6e9      	b.n	8000c7c <__udivmoddi4+0xa0>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
void IMU_printf(Inertial*);
void IMU_raw_printf();
#endif
int low_pass_filter(int val, int pre_val, unsigned short int gamma);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000eb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a99      	ldr	r2, [pc, #612]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	f040 80b1 	bne.w	8001028 <HAL_TIM_PeriodElapsedCallback+0x178>
			enter = 1;
		}
#else
#if USE_MOTOR
#if D_VELOCITY_CONTROL_TIMER
		if(stoptime < STOPTIME)
 8000ec6:	4b98      	ldr	r3, [pc, #608]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	f243 3283 	movw	r2, #13187	; 0x3383
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d806      	bhi.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			stoptime++;
 8000ed2:	4b95      	ldr	r3, [pc, #596]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	4b93      	ldr	r3, [pc, #588]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000edc:	801a      	strh	r2, [r3, #0]
 8000ede:	e002      	b.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0x36>
		}
		else
		{
			motorenable = 0;
 8000ee0:	4b92      	ldr	r3, [pc, #584]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
		}
#endif // D_VELOCITY_CONTROL_TIMER

		if (motorenable)
 8000ee6:	4b91      	ldr	r3, [pc, #580]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00c      	beq.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x58>
				rightmotor = commonspeed + direction / CALIBRATIONSIZE / 2 * kpr + (direction - beforedirection) * kdr;
			}
#endif	// D_VELOCITY_CONTROL
#endif	// USE_ANALOG
#if !USE_ANALOG && D_VELOCITY_CONTROL
			leftmotor = nextspeed_l;
 8000eee:	4b90      	ldr	r3, [pc, #576]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	498f      	ldr	r1, [pc, #572]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000ef6:	e9c1 2300 	strd	r2, r3, [r1]
			rightmotor = nextspeed_r;
 8000efa:	4b8f      	ldr	r3, [pc, #572]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	498e      	ldr	r1, [pc, #568]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f02:	e9c1 2300 	strd	r2, r3, [r1]
 8000f06:	e00d      	b.n	8000f24 <HAL_TIM_PeriodElapsedCallback+0x74>
			rightmotor = COMMONSPEED1;
#endif	// !STATICMOTORPWM
		}
		else	// if(motorenable)
		{
			leftmotor = 0;
 8000f08:	498a      	ldr	r1, [pc, #552]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	e9c1 2300 	strd	r2, r3, [r1]
			rightmotor = 0;
 8000f16:	4989      	ldr	r1, [pc, #548]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(leftmotor < 0)
 8000f24:	4b83      	ldr	r3, [pc, #524]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	f7ff fdcb 	bl	8000acc <__aeabi_dcmplt>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00e      	beq.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0xaa>
		{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2104      	movs	r1, #4
 8000f40:	487f      	ldr	r0, [pc, #508]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000f42:	f003 fb3d 	bl	80045c0 <HAL_GPIO_WritePin>
		  leftmotor = leftmotor * -1;
 8000f46:	4b7b      	ldr	r3, [pc, #492]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	4690      	mov	r8, r2
 8000f4e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000f54:	e9c3 8900 	strd	r8, r9, [r3]
 8000f58:	e004      	b.n	8000f64 <HAL_TIM_PeriodElapsedCallback+0xb4>
		}
		else
		{
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4878      	ldr	r0, [pc, #480]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000f60:	f003 fb2e 	bl	80045c0 <HAL_GPIO_WritePin>
		}

		if(rightmotor < 0)
 8000f64:	4b75      	ldr	r3, [pc, #468]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	f7ff fdab 	bl	8000acc <__aeabi_dcmplt>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00f      	beq.n	8000f9c <HAL_TIM_PeriodElapsedCallback+0xec>
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f82:	4870      	ldr	r0, [pc, #448]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000f84:	f003 fb1c 	bl	80045c0 <HAL_GPIO_WritePin>
		  rightmotor = rightmotor * -1;
 8000f88:	4b6c      	ldr	r3, [pc, #432]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	4614      	mov	r4, r2
 8000f90:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000f94:	4b69      	ldr	r3, [pc, #420]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000f96:	e9c3 4500 	strd	r4, r5, [r3]
 8000f9a:	e005      	b.n	8000fa8 <HAL_TIM_PeriodElapsedCallback+0xf8>
		}
		else
		{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa2:	4868      	ldr	r0, [pc, #416]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000fa4:	f003 fb0c 	bl	80045c0 <HAL_GPIO_WritePin>
		}

		leftmotor = leftmotor > PWMMAX ? PWMMAX : leftmotor;
 8000fa8:	4b62      	ldr	r3, [pc, #392]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b65      	ldr	r3, [pc, #404]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000fb4:	f7ff fda8 	bl	8000b08 <__aeabi_dcmpgt>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0x116>
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	4c61      	ldr	r4, [pc, #388]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000fc4:	e002      	b.n	8000fcc <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000fc6:	4b5b      	ldr	r3, [pc, #364]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000fc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000fcc:	4a59      	ldr	r2, [pc, #356]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000fce:	e9c2 3400 	strd	r3, r4, [r2]
		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 8000fd2:	4b5a      	ldr	r3, [pc, #360]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000fd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000fde:	f7ff fd93 	bl	8000b08 <__aeabi_dcmpgt>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_TIM_PeriodElapsedCallback+0x140>
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	4c56      	ldr	r4, [pc, #344]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000fee:	e002      	b.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x146>
 8000ff0:	4b52      	ldr	r3, [pc, #328]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000ff2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ff6:	4a51      	ldr	r2, [pc, #324]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000ff8:	e9c2 3400 	strd	r3, r4, [r2]
#endif

#if !D_PWM
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 8000ffc:	4b4d      	ldr	r3, [pc, #308]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000ffe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001002:	4a52      	ldr	r2, [pc, #328]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001004:	6815      	ldr	r5, [r2, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	4621      	mov	r1, r4
 800100a:	f7ff fdaf 	bl	8000b6c <__aeabi_d2uiz>
 800100e:	4603      	mov	r3, r0
 8001010:	636b      	str	r3, [r5, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 8001012:	4b4a      	ldr	r3, [pc, #296]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001014:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800101a:	6815      	ldr	r5, [r2, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	4621      	mov	r1, r4
 8001020:	f7ff fda4 	bl	8000b6c <__aeabi_d2uiz>
 8001024:	4603      	mov	r3, r0
 8001026:	63ab      	str	r3, [r5, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, COMMONSPEED1);
#endif	// STATICPWM
#endif	// D_PWM
#endif	// !     D_LED
	}	// TIM6
	if (htim->Instance == TIM10)	// TIM10 // 1ms
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a48      	ldr	r2, [pc, #288]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	f040 81fb 	bne.w	800142a <HAL_TIM_PeriodElapsedCallback+0x57a>
	{
#if USE_SIDESENSOR
		unsigned char subsens, first, second;

		subsens = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0; // right
 8001034:	2104      	movs	r1, #4
 8001036:	4847      	ldr	r0, [pc, #284]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001038:	f003 faaa 	bl	8004590 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	bf0c      	ite	eq
 8001042:	2301      	moveq	r3, #1
 8001044:	2300      	movne	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	73fb      	strb	r3, [r7, #15]
		subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 800104a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800104e:	4841      	ldr	r0, [pc, #260]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001050:	f003 fa9e 	bl	8004590 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_TIM_PeriodElapsedCallback+0x1ae>
 800105a:	2302      	movs	r3, #2
 800105c:	e000      	b.n	8001060 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 800105e:	2300      	movs	r3, #0
 8001060:	b2da      	uxtb	r2, r3
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4413      	add	r3, r2
 8001066:	73fb      	strb	r3, [r7, #15]

		if (subsens != subsensbuf) {
 8001068:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	429a      	cmp	r2, r3
 8001070:	f000 8084 	beq.w	800117c <HAL_TIM_PeriodElapsedCallback+0x2cc>
			subsensbuf = subsens;
 8001074:	4a38      	ldr	r2, [pc, #224]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	7013      	strb	r3, [r2, #0]
			marker += subsens << (2 * sidedeltacount);
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	4b37      	ldr	r3, [pc, #220]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b35      	ldr	r3, [pc, #212]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4413      	add	r3, r2
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001092:	701a      	strb	r2, [r3, #0]
			if (subsens == 0b00 && sidedeltacount != 0) {
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d16a      	bne.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d066      	beq.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x2c0>
				first = (marker & 0b0011);
 80010a2:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	73bb      	strb	r3, [r7, #14]
				second = (marker & 0b1100) >> 2;
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	109b      	asrs	r3, r3, #2
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	737b      	strb	r3, [r7, #13]
				if (second == 0b00) {
 80010ba:	7b7b      	ldrb	r3, [r7, #13]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d123      	bne.n	8001108 <HAL_TIM_PeriodElapsedCallback+0x258>
					if (first == 0b01) {
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d115      	bne.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x242>
						// right -> stop
						markerstate = 0b01;
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
						if (rightmarkercount == 0) {
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d106      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x232>
							rightmarkercount++;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e015      	b.n	800110e <HAL_TIM_PeriodElapsedCallback+0x25e>
						} else if (rightmarkercount == 1) {
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d111      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x25e>
							enter = 0;
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e00d      	b.n	800110e <HAL_TIM_PeriodElapsedCallback+0x25e>
						}
					} else if (first == 0b10) {
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d103      	bne.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x250>
						// left -> curve
						markerstate = 0b10;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e006      	b.n	800110e <HAL_TIM_PeriodElapsedCallback+0x25e>
							motorenable = 0;
						}
#endif
					} else {
						// cross
						markerstate = 0b11;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001102:	2203      	movs	r2, #3
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e002      	b.n	800110e <HAL_TIM_PeriodElapsedCallback+0x25e>
					}
				} else {
					// cross
					markerstate = 0b11;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800110a:	2203      	movs	r2, #3
 800110c:	701a      	strb	r2, [r3, #0]
				}
				sidedeltacount = 0;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
				marker = 0;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
				markerstate = 0;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e02c      	b.n	800117c <HAL_TIM_PeriodElapsedCallback+0x2cc>
 8001122:	bf00      	nop
 8001124:	40001000 	.word	0x40001000
 8001128:	200005b8 	.word	0x200005b8
 800112c:	200004c8 	.word	0x200004c8
 8001130:	200005c8 	.word	0x200005c8
 8001134:	20000238 	.word	0x20000238
 8001138:	200005a8 	.word	0x200005a8
 800113c:	20000230 	.word	0x20000230
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40020800 	.word	0x40020800
 8001148:	408f4000 	.word	0x408f4000
 800114c:	20000148 	.word	0x20000148
 8001150:	40014400 	.word	0x40014400
 8001154:	40020400 	.word	0x40020400
 8001158:	20000274 	.word	0x20000274
 800115c:	200002c4 	.word	0x200002c4
 8001160:	200003f0 	.word	0x200003f0
 8001164:	20000315 	.word	0x20000315
 8001168:	200005f4 	.word	0x200005f4
 800116c:	200005f5 	.word	0x200005f5
			} else {
				sidedeltacount++;
 8001170:	4bb7      	ldr	r3, [pc, #732]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4bb5      	ldr	r3, [pc, #724]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800117a:	701a      	strb	r2, [r3, #0]
		}
#endif	// USE_SIDESENSOR

#if USE_ENCODER
		// 1ms
		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);	// Left
 800117c:	213c      	movs	r1, #60	; 0x3c
 800117e:	48b5      	ldr	r0, [pc, #724]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8001180:	f004 fa39 	bl	80055f6 <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);	// Right
 8001184:	213c      	movs	r1, #60	; 0x3c
 8001186:	48b4      	ldr	r0, [pc, #720]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8001188:	f004 fa35 	bl	80055f6 <HAL_TIM_Encoder_Stop>

		encoder_l = TIM1->CNT - ENCODER_MIDDLE;
 800118c:	4bb3      	ldr	r3, [pc, #716]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	b29b      	uxth	r3, r3
 8001192:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001196:	b29b      	uxth	r3, r3
 8001198:	b21a      	sxth	r2, r3
 800119a:	4bb1      	ldr	r3, [pc, #708]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800119c:	801a      	strh	r2, [r3, #0]
		encoder_r = - (TIM3->CNT - ENCODER_MIDDLE);
 800119e:	4bb1      	ldr	r3, [pc, #708]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4bb0      	ldr	r3, [pc, #704]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4baf      	ldr	r3, [pc, #700]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80011ae:	801a      	strh	r2, [r3, #0]

		TIM1->CNT = ENCODER_MIDDLE;
 80011b0:	4baa      	ldr	r3, [pc, #680]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80011b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CNT = ENCODER_MIDDLE;
 80011b8:	4baa      	ldr	r3, [pc, #680]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80011ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011be:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// Left
 80011c0:	213c      	movs	r1, #60	; 0x3c
 80011c2:	48a4      	ldr	r0, [pc, #656]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80011c4:	f004 f9e0 	bl	8005588 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	// Right
 80011c8:	213c      	movs	r1, #60	; 0x3c
 80011ca:	48a3      	ldr	r0, [pc, #652]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80011cc:	f004 f9dc 	bl	8005588 <HAL_TIM_Encoder_Start>
		velocity_next = velocity_next / VELOCITY_CONTROL_RATE;
		nextspeed = (VELOCITY_TARGET + velocity_next) * PWMMAX / VELOCITY_MAX;
		*/

		// left
		velocity_l_raw = encoder_l * LENGTHPERPULSE;
 80011d0:	4ba3      	ldr	r3, [pc, #652]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80011d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f99c 	bl	8000514 <__aeabi_i2d>
 80011dc:	4ba4      	ldr	r3, [pc, #656]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80011de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4623      	mov	r3, r4
 80011e6:	f7ff f9ff 	bl	80005e8 <__aeabi_dmul>
 80011ea:	4603      	mov	r3, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	4aa1      	ldr	r2, [pc, #644]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80011f0:	e9c2 3400 	strd	r3, r4, [r2]
		velocity_l = low_pass_filter(velocity_l_raw, velocity_l, 400);
 80011f4:	4b9f      	ldr	r3, [pc, #636]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80011f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011fa:	4618      	mov	r0, r3
 80011fc:	4621      	mov	r1, r4
 80011fe:	f7ff fc8d 	bl	8000b1c <__aeabi_d2iz>
 8001202:	4605      	mov	r5, r0
 8001204:	4b9c      	ldr	r3, [pc, #624]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001206:	e9d3 3400 	ldrd	r3, r4, [r3]
 800120a:	4618      	mov	r0, r3
 800120c:	4621      	mov	r1, r4
 800120e:	f7ff fc85 	bl	8000b1c <__aeabi_d2iz>
 8001212:	4603      	mov	r3, r0
 8001214:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001218:	4619      	mov	r1, r3
 800121a:	4628      	mov	r0, r5
 800121c:	f001 f978 	bl	8002510 <low_pass_filter>
 8001220:	4603      	mov	r3, r0
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f976 	bl	8000514 <__aeabi_i2d>
 8001228:	4603      	mov	r3, r0
 800122a:	460c      	mov	r4, r1
 800122c:	4a92      	ldr	r2, [pc, #584]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800122e:	e9c2 3400 	strd	r3, r4, [r2]
		// Here VELOCITY_TARGET is array from Flash ROM.
		velocity_error_l = (VELOCITY_TARGET*2 - velocity_l);
 8001232:	4b91      	ldr	r3, [pc, #580]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001234:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001238:	461a      	mov	r2, r3
 800123a:	4623      	mov	r3, r4
 800123c:	f04f 0000 	mov.w	r0, #0
 8001240:	f04f 0100 	mov.w	r1, #0
 8001244:	f7ff f818 	bl	8000278 <__aeabi_dsub>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4a8b      	ldr	r2, [pc, #556]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800124e:	e9c2 3400 	strd	r3, r4, [r2]
		s_velocity_error_l = s_velocity_error_l + velocity_error_l;
 8001252:	4b8b      	ldr	r3, [pc, #556]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001258:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800125a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800125e:	461a      	mov	r2, r3
 8001260:	4623      	mov	r3, r4
 8001262:	f7ff f80b 	bl	800027c <__adddf3>
 8001266:	4603      	mov	r3, r0
 8001268:	460c      	mov	r4, r1
 800126a:	4a85      	ldr	r2, [pc, #532]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800126c:	e9c2 3400 	strd	r3, r4, [r2]
		// PI
		velocity_next_l = VKPL * velocity_error_l + VKIL * s_velocity_error_l;
 8001270:	4b82      	ldr	r3, [pc, #520]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	f7ff f9b3 	bl	80005e8 <__aeabi_dmul>
 8001282:	4603      	mov	r3, r0
 8001284:	460c      	mov	r4, r1
 8001286:	4625      	mov	r5, r4
 8001288:	461c      	mov	r4, r3
 800128a:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800128c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	f7ff f9a6 	bl	80005e8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4620      	mov	r0, r4
 80012a2:	4629      	mov	r1, r5
 80012a4:	f7fe ffea 	bl	800027c <__adddf3>
 80012a8:	4603      	mov	r3, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	4a75      	ldr	r2, [pc, #468]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80012ae:	e9c2 3400 	strd	r3, r4, [r2]
		velocity_next_l = velocity_next_l / VELOCITY_CONTROL_RATE;
 80012b2:	4b74      	ldr	r3, [pc, #464]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80012b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012b8:	4a72      	ldr	r2, [pc, #456]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80012ba:	e9c2 3400 	strd	r3, r4, [r2]
		nextspeed_l = (VELOCITY_TARGET + velocity_next_l) * PWMMAX / VELOCITY_MAX;
 80012be:	4b71      	ldr	r3, [pc, #452]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80012c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	f7fe ffd6 	bl	800027c <__adddf3>
 80012d0:	4603      	mov	r3, r0
 80012d2:	460c      	mov	r4, r1
 80012d4:	4618      	mov	r0, r3
 80012d6:	4621      	mov	r1, r4
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b6a      	ldr	r3, [pc, #424]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80012de:	f7ff f983 	bl	80005e8 <__aeabi_dmul>
 80012e2:	4603      	mov	r3, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	4618      	mov	r0, r3
 80012e8:	4621      	mov	r1, r4
 80012ea:	a357      	add	r3, pc, #348	; (adr r3, 8001448 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff faa4 	bl	800083c <__aeabi_ddiv>
 80012f4:	4603      	mov	r3, r0
 80012f6:	460c      	mov	r4, r1
 80012f8:	4a64      	ldr	r2, [pc, #400]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80012fa:	e9c2 3400 	strd	r3, r4, [r2]

		// right
		velocity_r_raw = encoder_r * LENGTHPERPULSE;
 80012fe:	4b5b      	ldr	r3, [pc, #364]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f905 	bl	8000514 <__aeabi_i2d>
 800130a:	4b59      	ldr	r3, [pc, #356]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800130c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001310:	461a      	mov	r2, r3
 8001312:	4623      	mov	r3, r4
 8001314:	f7ff f968 	bl	80005e8 <__aeabi_dmul>
 8001318:	4603      	mov	r3, r0
 800131a:	460c      	mov	r4, r1
 800131c:	4a5c      	ldr	r2, [pc, #368]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800131e:	e9c2 3400 	strd	r3, r4, [r2]
		velocity_r = low_pass_filter(velocity_r_raw, velocity_r, 400);
 8001322:	4b5b      	ldr	r3, [pc, #364]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001324:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fbf6 	bl	8000b1c <__aeabi_d2iz>
 8001330:	4605      	mov	r5, r0
 8001332:	4b58      	ldr	r3, [pc, #352]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001334:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001338:	4618      	mov	r0, r3
 800133a:	4621      	mov	r1, r4
 800133c:	f7ff fbee 	bl	8000b1c <__aeabi_d2iz>
 8001340:	4603      	mov	r3, r0
 8001342:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001346:	4619      	mov	r1, r3
 8001348:	4628      	mov	r0, r5
 800134a:	f001 f8e1 	bl	8002510 <low_pass_filter>
 800134e:	4603      	mov	r3, r0
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8df 	bl	8000514 <__aeabi_i2d>
 8001356:	4603      	mov	r3, r0
 8001358:	460c      	mov	r4, r1
 800135a:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
		// Here VELOCITY_TARGET is array from Flash ROM.
		velocity_error_r = (VELOCITY_TARGET - velocity_r);
 8001360:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001362:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001366:	461a      	mov	r2, r3
 8001368:	4623      	mov	r3, r4
 800136a:	f04f 0000 	mov.w	r0, #0
 800136e:	f04f 0100 	mov.w	r1, #0
 8001372:	f7fe ff81 	bl	8000278 <__aeabi_dsub>
 8001376:	4603      	mov	r3, r0
 8001378:	460c      	mov	r4, r1
 800137a:	4a47      	ldr	r2, [pc, #284]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800137c:	e9c2 3400 	strd	r3, r4, [r2]
		s_velocity_error_r = s_velocity_error_r + velocity_error_r;
 8001380:	4b46      	ldr	r3, [pc, #280]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001382:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001388:	e9d3 3400 	ldrd	r3, r4, [r3]
 800138c:	461a      	mov	r2, r3
 800138e:	4623      	mov	r3, r4
 8001390:	f7fe ff74 	bl	800027c <__adddf3>
 8001394:	4603      	mov	r3, r0
 8001396:	460c      	mov	r4, r1
 8001398:	4a40      	ldr	r2, [pc, #256]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800139a:	e9c2 3400 	strd	r3, r4, [r2]
		// PI
		velocity_next_r = VKPR * velocity_error_r + VKIR * s_velocity_error_r;
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80013a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80013aa:	f7ff f91d 	bl	80005e8 <__aeabi_dmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	460c      	mov	r4, r1
 80013b2:	4625      	mov	r5, r4
 80013b4:	461c      	mov	r4, r3
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80013b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	f7ff f910 	bl	80005e8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7fe ff54 	bl	800027c <__adddf3>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	4a32      	ldr	r2, [pc, #200]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80013da:	e9c2 3400 	strd	r3, r4, [r2]
		velocity_next_r = velocity_next_r / VELOCITY_CONTROL_RATE;
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80013e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013e4:	4a2f      	ldr	r2, [pc, #188]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80013e6:	e9c2 3400 	strd	r3, r4, [r2]
		nextspeed_r = (VELOCITY_TARGET + velocity_next_r) * PWMMAX / VELOCITY_MAX;
 80013ea:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80013ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	f7fe ff40 	bl	800027c <__adddf3>
 80013fc:	4603      	mov	r3, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	4618      	mov	r0, r3
 8001402:	4621      	mov	r1, r4
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800140a:	f7ff f8ed 	bl	80005e8 <__aeabi_dmul>
 800140e:	4603      	mov	r3, r0
 8001410:	460c      	mov	r4, r1
 8001412:	4618      	mov	r0, r3
 8001414:	4621      	mov	r1, r4
 8001416:	a30c      	add	r3, pc, #48	; (adr r3, 8001448 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff fa0e 	bl	800083c <__aeabi_ddiv>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001426:	e9c2 3400 	strd	r3, r4, [r2]
		 velocityr = lengthr / ENCODERPERIOD / 1000;
		 */
#endif	// USE_ENCODER
	}	// TIM10

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001430:	4293      	cmp	r3, r2
 8001432:	f040 809a 	bne.w	800156a <HAL_TIM_PeriodElapsedCallback+0x6ba>
	{
		uint8_t rotary_value_row;
		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 8001436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143a:	481d      	ldr	r0, [pc, #116]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800143c:	f003 f8a8 	bl	8004590 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	e036      	b.n	80014b4 <HAL_TIM_PeriodElapsedCallback+0x604>
 8001446:	bf00      	nop
 8001448:	00000000 	.word	0x00000000
 800144c:	40c09a00 	.word	0x40c09a00
 8001450:	200002c4 	.word	0x200002c4
 8001454:	20000434 	.word	0x20000434
 8001458:	20000284 	.word	0x20000284
 800145c:	40010000 	.word	0x40010000
 8001460:	20000360 	.word	0x20000360
 8001464:	40000400 	.word	0x40000400
 8001468:	ffff8000 	.word	0xffff8000
 800146c:	200005ba 	.word	0x200005ba
 8001470:	20000480 	.word	0x20000480
 8001474:	20000318 	.word	0x20000318
 8001478:	200000b8 	.word	0x200000b8
 800147c:	200005b0 	.word	0x200005b0
 8001480:	20000268 	.word	0x20000268
 8001484:	20000368 	.word	0x20000368
 8001488:	408f4000 	.word	0x408f4000
 800148c:	200005c8 	.word	0x200005c8
 8001490:	200005c0 	.word	0x200005c0
 8001494:	20000098 	.word	0x20000098
 8001498:	20000220 	.word	0x20000220
 800149c:	20000120 	.word	0x20000120
 80014a0:	402e0000 	.word	0x402e0000
 80014a4:	200003e8 	.word	0x200003e8
 80014a8:	200005a8 	.word	0x200005a8
 80014ac:	40014800 	.word	0x40014800
 80014b0:	40020800 	.word	0x40020800
 80014b4:	bf0c      	ite	eq
 80014b6:	2301      	moveq	r3, #1
 80014b8:	2300      	movne	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	733b      	strb	r3, [r7, #12]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 80014be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c2:	482c      	ldr	r0, [pc, #176]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 80014c4:	f003 f864 	bl	8004590 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_TIM_PeriodElapsedCallback+0x622>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e000      	b.n	80014d4 <HAL_TIM_PeriodElapsedCallback+0x624>
 80014d2:	2300      	movs	r3, #0
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	7b3b      	ldrb	r3, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	733b      	strb	r3, [r7, #12]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 80014dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e0:	4825      	ldr	r0, [pc, #148]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 80014e2:	f003 f855 	bl	8004590 <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_TIM_PeriodElapsedCallback+0x640>
 80014ec:	2304      	movs	r3, #4
 80014ee:	e000      	b.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0x642>
 80014f0:	2300      	movs	r3, #0
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	7b3b      	ldrb	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	733b      	strb	r3, [r7, #12]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 80014fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014fe:	481d      	ldr	r0, [pc, #116]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001500:	f003 f846 	bl	8004590 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_TIM_PeriodElapsedCallback+0x65e>
 800150a:	2308      	movs	r3, #8
 800150c:	e000      	b.n	8001510 <HAL_TIM_PeriodElapsedCallback+0x660>
 800150e:	2300      	movs	r3, #0
 8001510:	b2da      	uxtb	r2, r3
 8001512:	7b3b      	ldrb	r3, [r7, #12]
 8001514:	4413      	add	r3, r2
 8001516:	733b      	strb	r3, [r7, #12]
		rotary_value = rotary_value_row;
 8001518:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 800151a:	7b3b      	ldrb	r3, [r7, #12]
 800151c:	7013      	strb	r3, [r2, #0]

#if USE_BUZZER
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1406 * rotary_value_row / 16);
#endif

		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 800151e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001524:	f003 f834 	bl	8004590 <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10a      	bne.n	8001544 <HAL_TIM_PeriodElapsedCallback+0x694>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 800152e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001532:	4810      	ldr	r0, [pc, #64]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001534:	f003 f82c 	bl	8004590 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <HAL_TIM_PeriodElapsedCallback+0x694>
			enter = 1;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 8001544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 800154a:	f003 f821 	bl	8004590 <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00a      	beq.n	800156a <HAL_TIM_PeriodElapsedCallback+0x6ba>
				&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 8001554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001558:	4806      	ldr	r0, [pc, #24]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 800155a:	f003 f819 	bl	8004590 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <HAL_TIM_PeriodElapsedCallback+0x6ba>
			enter = 0;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]

	if (htim->Instance == TIM7)	// F // 0.1ms
	{
	}
	*/
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001574:	40020800 	.word	0x40020800
 8001578:	40020000 	.word	0x40020000
 800157c:	20000270 	.word	0x20000270
 8001580:	200005f5 	.word	0x200005f5

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158a:	f001 fcaf 	bl	8002eec <HAL_Init>
  /* USER CODE BEGIN Init */
#if USE_FLASH
	FlashBuffer readrom;
#endif

	enter = 0;
 800158e:	4bb3      	ldr	r3, [pc, #716]	; (800185c <main+0x2d8>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
	motorenable = 0;
 8001594:	4bb2      	ldr	r3, [pc, #712]	; (8001860 <main+0x2dc>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
	rotary_value = 0;
 800159a:	4bb2      	ldr	r3, [pc, #712]	; (8001864 <main+0x2e0>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
	LENGTHPERPULSE = PI * TIREDIAMETER * PINIONGEAR / SPURGEAR / PULSEPERROTATE;
 80015a0:	4ab1      	ldr	r2, [pc, #708]	; (8001868 <main+0x2e4>)
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	4cb1      	ldr	r4, [pc, #708]	; (800186c <main+0x2e8>)
 80015a8:	e9c2 3400 	strd	r3, r4, [r2]
	commonspeed = 0;
 80015ac:	4bb0      	ldr	r3, [pc, #704]	; (8001870 <main+0x2ec>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	801a      	strh	r2, [r3, #0]
#if D_PWM
	pwmsteptime = 0;
	pwmstepud = 1;
#endif

	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	71fb      	strb	r3, [r7, #7]
 80015b6:	e00d      	b.n	80015d4 <main+0x50>
		analogmax[i] = 0;
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4aae      	ldr	r2, [pc, #696]	; (8001874 <main+0x2f0>)
 80015bc:	2100      	movs	r1, #0
 80015be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmin[i] = 4096;
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4aac      	ldr	r2, [pc, #688]	; (8001878 <main+0x2f4>)
 80015c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	3301      	adds	r3, #1
 80015d2:	71fb      	strb	r3, [r7, #7]
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b0b      	cmp	r3, #11
 80015d8:	d9ee      	bls.n	80015b8 <main+0x34>
	}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015da:	f000 f999 	bl	8001910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015de:	f000 fd61 	bl	80020a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80015e2:	f000 fd3f 	bl	8002064 <MX_DMA_Init>
  MX_ADC1_Init();
 80015e6:	f000 f9fd 	bl	80019e4 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80015ea:	f000 fd11 	bl	8002010 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80015ee:	f000 fc91 	bl	8001f14 <MX_TIM6_Init>
  MX_TIM4_Init();
 80015f2:	f000 fc2b 	bl	8001e4c <MX_TIM4_Init>
  MX_TIM1_Init();
 80015f6:	f000 fb7d 	bl	8001cf4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015fa:	f000 fbd3 	bl	8001da4 <MX_TIM3_Init>
  MX_TIM10_Init();
 80015fe:	f000 fcbf 	bl	8001f80 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001602:	f000 fce1 	bl	8001fc8 <MX_TIM11_Init>
  MX_SPI2_Init();
 8001606:	f000 fb3f 	bl	8001c88 <MX_SPI2_Init>
  MX_I2C1_Init();
 800160a:	f000 fb0f 	bl	8001c2c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 800160e:	489b      	ldr	r0, [pc, #620]	; (800187c <main+0x2f8>)
 8001610:	f005 fa12 	bl	8006a38 <iprintf>
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8001614:	489a      	ldr	r0, [pc, #616]	; (8001880 <main+0x2fc>)
 8001616:	f005 fa83 	bl	8006b20 <puts>

	printf("Starting Analog Read\r\n");
 800161a:	489a      	ldr	r0, [pc, #616]	; (8001884 <main+0x300>)
 800161c:	f005 fa80 	bl	8006b20 <puts>
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001620:	4899      	ldr	r0, [pc, #612]	; (8001888 <main+0x304>)
 8001622:	f001 fcf7 	bl	8003014 <HAL_ADC_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <main+0xac>
		Error_Handler();
 800162c:	f001 f81a 	bl	8002664 <Error_Handler>
	}

	printf("Starting TIM11\r\n");
 8001630:	4896      	ldr	r0, [pc, #600]	; (800188c <main+0x308>)
 8001632:	f005 fa75 	bl	8006b20 <puts>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8001636:	4896      	ldr	r0, [pc, #600]	; (8001890 <main+0x30c>)
 8001638:	f003 fe03 	bl	8005242 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	led_rgb(1, 1, 1);	// White
 800163c:	2201      	movs	r2, #1
 800163e:	2101      	movs	r1, #1
 8001640:	2001      	movs	r0, #1
 8001642:	f000 fe19 	bl	8002278 <led_rgb>
#if D_LED
		HAL_TIM_Base_Start_IT(&htim6);	// PID
#endif
	while (1) {
#if !D_LED
		printf("///// WHILE /////\n\r");
 8001646:	4893      	ldr	r0, [pc, #588]	; (8001894 <main+0x310>)
 8001648:	f005 f9f6 	bl	8006a38 <iprintf>
		printf("enter = %d\r\n", enter);
#endif
#if D_ROTARY
		printf("rotary_value = %x\r\n", rotary_value);
#endif
		if (enter) {
 800164c:	4b83      	ldr	r3, [pc, #524]	; (800185c <main+0x2d8>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f8      	beq.n	8001646 <main+0xc2>
			switch (rotary_value) {
 8001654:	4b83      	ldr	r3, [pc, #524]	; (8001864 <main+0x2e0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d8f4      	bhi.n	8001646 <main+0xc2>
 800165c:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <main+0xe0>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	080016a5 	.word	0x080016a5
 8001668:	08001719 	.word	0x08001719
 800166c:	0800178d 	.word	0x0800178d
 8001670:	08001803 	.word	0x08001803
 8001674:	08001647 	.word	0x08001647
 8001678:	08001647 	.word	0x08001647
 800167c:	08001647 	.word	0x08001647
 8001680:	08001647 	.word	0x08001647
 8001684:	08001647 	.word	0x08001647
 8001688:	08001647 	.word	0x08001647
 800168c:	08001647 	.word	0x08001647
 8001690:	08001647 	.word	0x08001647
 8001694:	08001647 	.word	0x08001647
 8001698:	08001647 	.word	0x08001647
 800169c:	080018dd 	.word	0x080018dd
 80016a0:	08001901 	.word	0x08001901
			case 0x0:
				led_rgb(1, 1, 0);	// Yellow
 80016a4:	2200      	movs	r2, #0
 80016a6:	2101      	movs	r1, #1
 80016a8:	2001      	movs	r0, #1
 80016aa:	f000 fde5 	bl	8002278 <led_rgb>

				sensor_initialize();
 80016ae:	f000 fe19 	bl	80022e4 <sensor_initialize>

				while (enter) {
 80016b2:	e02a      	b.n	800170a <main+0x186>
					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 80016b4:	2300      	movs	r3, #0
 80016b6:	71bb      	strb	r3, [r7, #6]
 80016b8:	e021      	b.n	80016fe <main+0x17a>
						uint16_t analogbuf = analog[j];
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	4a76      	ldr	r2, [pc, #472]	; (8001898 <main+0x314>)
 80016be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016c2:	80bb      	strh	r3, [r7, #4]
						analogmax[j] =
								(analogmax[j] < analogbuf) ?
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	4a6b      	ldr	r2, [pc, #428]	; (8001874 <main+0x2f0>)
 80016c8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
						analogmax[j] =
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	88b9      	ldrh	r1, [r7, #4]
 80016d0:	428a      	cmp	r2, r1
 80016d2:	bf38      	it	cc
 80016d4:	460a      	movcc	r2, r1
 80016d6:	b291      	uxth	r1, r2
 80016d8:	4a66      	ldr	r2, [pc, #408]	; (8001874 <main+0x2f0>)
 80016da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
										analogbuf : analogmax[j];
						analogmin[j] =
								(analogmin[j] > analogbuf) ?
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	4a65      	ldr	r2, [pc, #404]	; (8001878 <main+0x2f4>)
 80016e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
						analogmin[j] =
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	88b9      	ldrh	r1, [r7, #4]
 80016ea:	428a      	cmp	r2, r1
 80016ec:	bf28      	it	cs
 80016ee:	460a      	movcs	r2, r1
 80016f0:	b291      	uxth	r1, r2
 80016f2:	4a61      	ldr	r2, [pc, #388]	; (8001878 <main+0x2f4>)
 80016f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for (unsigned char j = 0; CALIBRATIONSIZE > j; j++) {
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	3301      	adds	r3, #1
 80016fc:	71bb      	strb	r3, [r7, #6]
 80016fe:	79bb      	ldrb	r3, [r7, #6]
 8001700:	2b0b      	cmp	r3, #11
 8001702:	d9da      	bls.n	80016ba <main+0x136>
						} else {
							printf("\r\n");
						}
#endif
					}
					HAL_Delay(250);
 8001704:	20fa      	movs	r0, #250	; 0xfa
 8001706:	f001 fc63 	bl	8002fd0 <HAL_Delay>
				while (enter) {
 800170a:	4b54      	ldr	r3, [pc, #336]	; (800185c <main+0x2d8>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1d0      	bne.n	80016b4 <main+0x130>
				}
				sensor_finalize();
 8001712:	f000 fe03 	bl	800231c <sensor_finalize>
					printf("%4d,", analogmin[i * 2 - 1]);
				}
				printf("\r\n");
				printf(ESC_DEF);
#endif
				break;	// case 0x00:
 8001716:	e0f8      	b.n	800190a <main+0x386>
			case 0x1:
				commonspeed = COMMONSPEED1;
 8001718:	4b55      	ldr	r3, [pc, #340]	; (8001870 <main+0x2ec>)
 800171a:	2264      	movs	r2, #100	; 0x64
 800171c:	801a      	strh	r2, [r3, #0]
				kpl = KPL1;
 800171e:	4a5f      	ldr	r2, [pc, #380]	; (800189c <main+0x318>)
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	4c5e      	ldr	r4, [pc, #376]	; (80018a0 <main+0x31c>)
 8001726:	e9c2 3400 	strd	r3, r4, [r2]
				kpr = KPR1;
 800172a:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <main+0x320>)
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	4c5b      	ldr	r4, [pc, #364]	; (80018a0 <main+0x31c>)
 8001732:	e9c2 3400 	strd	r3, r4, [r2]
				kdl = KDL1;
 8001736:	4a5c      	ldr	r2, [pc, #368]	; (80018a8 <main+0x324>)
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	f04f 0400 	mov.w	r4, #0
 8001740:	e9c2 3400 	strd	r3, r4, [r2]
				kdr = KDR1;
 8001744:	4a59      	ldr	r2, [pc, #356]	; (80018ac <main+0x328>)
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	f04f 0400 	mov.w	r4, #0
 800174e:	e9c2 3400 	strd	r3, r4, [r2]
				kil = KIL1;
 8001752:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <main+0x32c>)
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	f04f 0400 	mov.w	r4, #0
 800175c:	e9c2 3400 	strd	r3, r4, [r2]
				kir = KIR1;
 8001760:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <main+0x330>)
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	f04f 0400 	mov.w	r4, #0
 800176a:	e9c2 3400 	strd	r3, r4, [r2]
				running_initialize();
 800176e:	f000 fddf 	bl	8002330 <running_initialize>

				while (enter) {
 8001772:	e004      	b.n	800177e <main+0x1fa>
					// PI
					velocity_next_r = VKPR * velocity_error_r + VKIR * s_velocity_error_r;
					velocity_next_r = velocity_next_r / VELOCITY_CONTROL_RATE;
					nextspeed_r = (VELOCITY_TARGET + velocity_next_r) * PWMMAX / VELOCITY_MAX;
#endif
					d_print();
 8001774:	f000 fe86 	bl	8002484 <d_print>
					HAL_Delay(250);
 8001778:	20fa      	movs	r0, #250	; 0xfa
 800177a:	f001 fc29 	bl	8002fd0 <HAL_Delay>
				while (enter) {
 800177e:	4b37      	ldr	r3, [pc, #220]	; (800185c <main+0x2d8>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f6      	bne.n	8001774 <main+0x1f0>
				}

				running_finalize();
 8001786:	f000 fe5b 	bl	8002440 <running_finalize>
				for (int i = 0; i < ENC_SIZE; i++) {
				}
				writeFlash(start_address, (uint8_t*) &flash_buffer,
						sizeof(FlashBuffer));
#endif
				break;
 800178a:	e0be      	b.n	800190a <main+0x386>
			case 0x2:
				commonspeed = COMMONSPEED2;
 800178c:	4b38      	ldr	r3, [pc, #224]	; (8001870 <main+0x2ec>)
 800178e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001792:	801a      	strh	r2, [r3, #0]
				kpl = KPL2;
 8001794:	4a41      	ldr	r2, [pc, #260]	; (800189c <main+0x318>)
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	4c47      	ldr	r4, [pc, #284]	; (80018b8 <main+0x334>)
 800179c:	e9c2 3400 	strd	r3, r4, [r2]
				kpr = KPR2;
 80017a0:	4a40      	ldr	r2, [pc, #256]	; (80018a4 <main+0x320>)
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	4c44      	ldr	r4, [pc, #272]	; (80018b8 <main+0x334>)
 80017a8:	e9c2 3400 	strd	r3, r4, [r2]
				kdl = KDL2;
 80017ac:	4a3e      	ldr	r2, [pc, #248]	; (80018a8 <main+0x324>)
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	f04f 0400 	mov.w	r4, #0
 80017b6:	e9c2 3400 	strd	r3, r4, [r2]
				kdr = KDR2;
 80017ba:	4a3c      	ldr	r2, [pc, #240]	; (80018ac <main+0x328>)
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	f04f 0400 	mov.w	r4, #0
 80017c4:	e9c2 3400 	strd	r3, r4, [r2]
				kil = KIL2;
 80017c8:	4a39      	ldr	r2, [pc, #228]	; (80018b0 <main+0x32c>)
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f04f 0400 	mov.w	r4, #0
 80017d2:	e9c2 3400 	strd	r3, r4, [r2]
				kir = KIR2;
 80017d6:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <main+0x330>)
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	f04f 0400 	mov.w	r4, #0
 80017e0:	e9c2 3400 	strd	r3, r4, [r2]
#if USE_FLASH
				loadFlash(start_address, (uint8_t*) &flash_buffer,
						sizeof(FlashBuffer));
#endif
				running_initialize();
 80017e4:	f000 fda4 	bl	8002330 <running_initialize>

				while (enter) {
 80017e8:	e004      	b.n	80017f4 <main+0x270>
					d_print();
 80017ea:	f000 fe4b 	bl	8002484 <d_print>
					HAL_Delay(250);
 80017ee:	20fa      	movs	r0, #250	; 0xfa
 80017f0:	f001 fbee 	bl	8002fd0 <HAL_Delay>
				while (enter) {
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <main+0x2d8>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f6      	bne.n	80017ea <main+0x266>
				}

				running_finalize();
 80017fc:	f000 fe20 	bl	8002440 <running_finalize>
				break;
 8001800:	e083      	b.n	800190a <main+0x386>
			case 0x3:
				commonspeed = COMMONSPEED3;
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <main+0x2ec>)
 8001804:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001808:	801a      	strh	r2, [r3, #0]
				kpl = KPL3;
 800180a:	4a24      	ldr	r2, [pc, #144]	; (800189c <main+0x318>)
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	4c2a      	ldr	r4, [pc, #168]	; (80018bc <main+0x338>)
 8001812:	e9c2 3400 	strd	r3, r4, [r2]
				kpr = KPR3;
 8001816:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <main+0x320>)
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	4c27      	ldr	r4, [pc, #156]	; (80018bc <main+0x338>)
 800181e:	e9c2 3400 	strd	r3, r4, [r2]
				kdl = KDL3;
 8001822:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <main+0x324>)
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	4c25      	ldr	r4, [pc, #148]	; (80018c0 <main+0x33c>)
 800182a:	e9c2 3400 	strd	r3, r4, [r2]
				kdr = KDR3;
 800182e:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <main+0x328>)
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	4c22      	ldr	r4, [pc, #136]	; (80018c0 <main+0x33c>)
 8001836:	e9c2 3400 	strd	r3, r4, [r2]
				kil = KIL3;
 800183a:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <main+0x32c>)
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	e9c2 3400 	strd	r3, r4, [r2]
				kir = KIR3;
 8001848:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <main+0x330>)
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	f04f 0400 	mov.w	r4, #0
 8001852:	e9c2 3400 	strd	r3, r4, [r2]
				running_initialize();
 8001856:	f000 fd6b 	bl	8002330 <running_initialize>

				while (enter) {
 800185a:	e038      	b.n	80018ce <main+0x34a>
 800185c:	200005f5 	.word	0x200005f5
 8001860:	200004c8 	.word	0x200004c8
 8001864:	20000270 	.word	0x20000270
 8001868:	20000480 	.word	0x20000480
 800186c:	40380000 	.word	0x40380000
 8001870:	20000280 	.word	0x20000280
 8001874:	200005d0 	.word	0x200005d0
 8001878:	20000250 	.word	0x20000250
 800187c:	080078e0 	.word	0x080078e0
 8001880:	080078e8 	.word	0x080078e8
 8001884:	08007908 	.word	0x08007908
 8001888:	200002cc 	.word	0x200002cc
 800188c:	08007920 	.word	0x08007920
 8001890:	20000320 	.word	0x20000320
 8001894:	08007930 	.word	0x08007930
 8001898:	200000a0 	.word	0x200000a0
 800189c:	20000478 	.word	0x20000478
 80018a0:	40200000 	.word	0x40200000
 80018a4:	200005e8 	.word	0x200005e8
 80018a8:	20000228 	.word	0x20000228
 80018ac:	20000240 	.word	0x20000240
 80018b0:	20000248 	.word	0x20000248
 80018b4:	20000278 	.word	0x20000278
 80018b8:	40440000 	.word	0x40440000
 80018bc:	40390000 	.word	0x40390000
 80018c0:	40240000 	.word	0x40240000
					d_print();
 80018c4:	f000 fdde 	bl	8002484 <d_print>
					HAL_Delay(250);
 80018c8:	20fa      	movs	r0, #250	; 0xfa
 80018ca:	f001 fb81 	bl	8002fd0 <HAL_Delay>
				while (enter) {
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <main+0x388>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f6      	bne.n	80018c4 <main+0x340>
				}

				running_finalize();
 80018d6:	f000 fdb3 	bl	8002440 <running_finalize>
				break;
 80018da:	e016      	b.n	800190a <main+0x386>
						HAL_Delay(250);
					}
					running_finalize();
#endif
#if D_VELOCITY_CONTROL
				running_initialize();
 80018dc:	f000 fd28 	bl	8002330 <running_initialize>

				while (enter) {
 80018e0:	e004      	b.n	80018ec <main+0x368>
					d_print();
 80018e2:	f000 fdcf 	bl	8002484 <d_print>
					HAL_Delay(250);
 80018e6:	20fa      	movs	r0, #250	; 0xfa
 80018e8:	f001 fb72 	bl	8002fd0 <HAL_Delay>
				while (enter) {
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <main+0x388>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f6      	bne.n	80018e2 <main+0x35e>
				}

				running_finalize();
 80018f4:	f000 fda4 	bl	8002440 <running_finalize>
#endif
				break;
 80018f8:	e007      	b.n	800190a <main+0x386>
					IMU_printf(&readrom.inertial[i]);
				}
#endif

				while (enter) {
					HAL_Delay(250);
 80018fa:	20fa      	movs	r0, #250	; 0xfa
 80018fc:	f001 fb68 	bl	8002fd0 <HAL_Delay>
				while (enter) {
 8001900:	4b02      	ldr	r3, [pc, #8]	; (800190c <main+0x388>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f8      	bne.n	80018fa <main+0x376>
				}
				break;
 8001908:	bf00      	nop
		printf("///// WHILE /////\n\r");
 800190a:	e69c      	b.n	8001646 <main+0xc2>
 800190c:	200005f5 	.word	0x200005f5

08001910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b094      	sub	sp, #80	; 0x50
 8001914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	2230      	movs	r2, #48	; 0x30
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f005 f882 	bl	8006a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <SystemClock_Config+0xcc>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a27      	ldr	r2, [pc, #156]	; (80019dc <SystemClock_Config+0xcc>)
 800193e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <SystemClock_Config+0xcc>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <SystemClock_Config+0xd0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <SystemClock_Config+0xd0>)
 800195a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <SystemClock_Config+0xd0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800196c:	2301      	movs	r3, #1
 800196e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001970:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001976:	2302      	movs	r3, #2
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001980:	2308      	movs	r3, #8
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001984:	23a8      	movs	r3, #168	; 0xa8
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001988:	2302      	movs	r3, #2
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800198c:	2304      	movs	r3, #4
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f107 0320 	add.w	r3, r7, #32
 8001994:	4618      	mov	r0, r3
 8001996:	f002 ff65 	bl	8004864 <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019a0:	f000 fe60 	bl	8002664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a4:	230f      	movs	r3, #15
 80019a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a8:	2302      	movs	r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019bc:	f107 030c 	add.w	r3, r7, #12
 80019c0:	2105      	movs	r1, #5
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 f9be 	bl	8004d44 <HAL_RCC_ClockConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019ce:	f000 fe49 	bl	8002664 <Error_Handler>
  }
}
 80019d2:	bf00      	nop
 80019d4:	3750      	adds	r7, #80	; 0x50
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000

080019e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019f6:	4b8a      	ldr	r3, [pc, #552]	; (8001c20 <MX_ADC1_Init+0x23c>)
 80019f8:	4a8a      	ldr	r2, [pc, #552]	; (8001c24 <MX_ADC1_Init+0x240>)
 80019fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019fc:	4b88      	ldr	r3, [pc, #544]	; (8001c20 <MX_ADC1_Init+0x23c>)
 80019fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a04:	4b86      	ldr	r3, [pc, #536]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a0a:	4b85      	ldr	r3, [pc, #532]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a10:	4b83      	ldr	r3, [pc, #524]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a16:	4b82      	ldr	r3, [pc, #520]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a1e:	4b80      	ldr	r3, [pc, #512]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a24:	4b7e      	ldr	r3, [pc, #504]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a26:	4a80      	ldr	r2, [pc, #512]	; (8001c28 <MX_ADC1_Init+0x244>)
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2a:	4b7d      	ldr	r3, [pc, #500]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8001a30:	4b7b      	ldr	r3, [pc, #492]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a32:	2210      	movs	r2, #16
 8001a34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a36:	4b7a      	ldr	r3, [pc, #488]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a3e:	4b78      	ldr	r3, [pc, #480]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a44:	4876      	ldr	r0, [pc, #472]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a46:	f001 fae5 	bl	8003014 <HAL_ADC_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a50:	f000 fe08 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a54:	2309      	movs	r3, #9
 8001a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	4619      	mov	r1, r3
 8001a64:	486e      	ldr	r0, [pc, #440]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a66:	f001 fc69 	bl	800333c <HAL_ADC_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a70:	f000 fdf8 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a74:	230a      	movs	r3, #10
 8001a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4867      	ldr	r0, [pc, #412]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a82:	f001 fc5b 	bl	800333c <HAL_ADC_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a8c:	f000 fdea 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001a90:	2308      	movs	r3, #8
 8001a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a94:	2303      	movs	r3, #3
 8001a96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a98:	463b      	mov	r3, r7
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4860      	ldr	r0, [pc, #384]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001a9e:	f001 fc4d 	bl	800333c <HAL_ADC_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001aa8:	f000 fddc 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001aac:	230b      	movs	r3, #11
 8001aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4859      	ldr	r0, [pc, #356]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001aba:	f001 fc3f 	bl	800333c <HAL_ADC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001ac4:	f000 fdce 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001ac8:	230e      	movs	r3, #14
 8001aca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001acc:	2305      	movs	r3, #5
 8001ace:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4852      	ldr	r0, [pc, #328]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001ad6:	f001 fc31 	bl	800333c <HAL_ADC_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001ae0:	f000 fdc0 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001ae8:	2306      	movs	r3, #6
 8001aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	4619      	mov	r1, r3
 8001af0:	484b      	ldr	r0, [pc, #300]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001af2:	f001 fc23 	bl	800333c <HAL_ADC_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001afc:	f000 fdb2 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001b00:	230c      	movs	r3, #12
 8001b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001b04:	2307      	movs	r3, #7
 8001b06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4844      	ldr	r0, [pc, #272]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001b0e:	f001 fc15 	bl	800333c <HAL_ADC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001b18:	f000 fda4 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001b1c:	230d      	movs	r3, #13
 8001b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001b20:	2308      	movs	r3, #8
 8001b22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	4619      	mov	r1, r3
 8001b28:	483d      	ldr	r0, [pc, #244]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001b2a:	f001 fc07 	bl	800333c <HAL_ADC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001b34:	f000 fd96 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001b3c:	2309      	movs	r3, #9
 8001b3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	4619      	mov	r1, r3
 8001b44:	4836      	ldr	r0, [pc, #216]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001b46:	f001 fbf9 	bl	800333c <HAL_ADC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001b50:	f000 fd88 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001b58:	230a      	movs	r3, #10
 8001b5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	482f      	ldr	r0, [pc, #188]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001b62:	f001 fbeb 	bl	800333c <HAL_ADC_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001b6c:	f000 fd7a 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b70:	2306      	movs	r3, #6
 8001b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001b74:	230b      	movs	r3, #11
 8001b76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4828      	ldr	r0, [pc, #160]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001b7e:	f001 fbdd 	bl	800333c <HAL_ADC_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001b88:	f000 fd6c 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001b90:	230c      	movs	r3, #12
 8001b92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	4619      	mov	r1, r3
 8001b98:	4821      	ldr	r0, [pc, #132]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001b9a:	f001 fbcf 	bl	800333c <HAL_ADC_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001ba4:	f000 fd5e 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ba8:	2305      	movs	r3, #5
 8001baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001bac:	230d      	movs	r3, #13
 8001bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481a      	ldr	r0, [pc, #104]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001bb6:	f001 fbc1 	bl	800333c <HAL_ADC_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001bc0:	f000 fd50 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001bc8:	230e      	movs	r3, #14
 8001bca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bcc:	463b      	mov	r3, r7
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4813      	ldr	r0, [pc, #76]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001bd2:	f001 fbb3 	bl	800333c <HAL_ADC_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8001bdc:	f000 fd42 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001be0:	2304      	movs	r3, #4
 8001be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001be4:	230f      	movs	r3, #15
 8001be6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be8:	463b      	mov	r3, r7
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001bee:	f001 fba5 	bl	800333c <HAL_ADC_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001bf8:	f000 fd34 	bl	8002664 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001c00:	2310      	movs	r3, #16
 8001c02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_ADC1_Init+0x23c>)
 8001c0a:	f001 fb97 	bl	800333c <HAL_ADC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8001c14:	f000 fd26 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200002cc 	.word	0x200002cc
 8001c24:	40012000 	.word	0x40012000
 8001c28:	0f000001 	.word	0x0f000001

08001c2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <MX_I2C1_Init+0x54>)
 8001c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c38:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <MX_I2C1_Init+0x58>)
 8001c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <MX_I2C1_Init+0x50>)
 8001c6a:	f002 fcc3 	bl	80045f4 <HAL_I2C_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c74:	f000 fcf6 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000188 	.word	0x20000188
 8001c80:	40005400 	.word	0x40005400
 8001c84:	000186a0 	.word	0x000186a0

08001c88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_SPI2_Init+0x64>)
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <MX_SPI2_Init+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_SPI2_Init+0x64>)
 8001c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_SPI2_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_SPI2_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_SPI2_Init+0x64>)
 8001ca8:	2202      	movs	r2, #2
 8001caa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_SPI2_Init+0x64>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_SPI2_Init+0x64>)
 8001cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_SPI2_Init+0x64>)
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <MX_SPI2_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_SPI2_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <MX_SPI2_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_SPI2_Init+0x64>)
 8001cd4:	220a      	movs	r2, #10
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <MX_SPI2_Init+0x64>)
 8001cda:	f003 fa23 	bl	8005124 <HAL_SPI_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ce4:	f000 fcbe 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200000c0 	.word	0x200000c0
 8001cf0:	40003800 	.word	0x40003800

08001cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 fe90 	bl	8006a28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <MX_TIM1_Init+0xa8>)
 8001d12:	4a23      	ldr	r2, [pc, #140]	; (8001da0 <MX_TIM1_Init+0xac>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <MX_TIM1_Init+0xa8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <MX_TIM1_Init+0xa8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <MX_TIM1_Init+0xa8>)
 8001d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <MX_TIM1_Init+0xa8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MX_TIM1_Init+0xa8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <MX_TIM1_Init+0xa8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d44:	2301      	movs	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d54:	2301      	movs	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <MX_TIM1_Init+0xa8>)
 8001d68:	f003 fb7c 	bl	8005464 <HAL_TIM_Encoder_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001d72:	f000 fc77 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4806      	ldr	r0, [pc, #24]	; (8001d9c <MX_TIM1_Init+0xa8>)
 8001d84:	f004 f8ea 	bl	8005f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d8e:	f000 fc69 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	3730      	adds	r7, #48	; 0x30
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000434 	.word	0x20000434
 8001da0:	40010000 	.word	0x40010000

08001da4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 fe38 	bl	8006a28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <MX_TIM3_Init+0xa0>)
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <MX_TIM3_Init+0xa4>)
 8001dc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <MX_TIM3_Init+0xa0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <MX_TIM3_Init+0xa0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <MX_TIM3_Init+0xa0>)
 8001dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <MX_TIM3_Init+0xa0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <MX_TIM3_Init+0xa0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001de6:	2303      	movs	r3, #3
 8001de8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dee:	2301      	movs	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_TIM3_Init+0xa0>)
 8001e12:	f003 fb27 	bl	8005464 <HAL_TIM_Encoder_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e1c:	f000 fc22 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_TIM3_Init+0xa0>)
 8001e2e:	f004 f895 	bl	8005f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e38:	f000 fc14 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	3730      	adds	r7, #48	; 0x30
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000284 	.word	0x20000284
 8001e48:	40000400 	.word	0x40000400

08001e4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	f107 0320 	add.w	r3, r7, #32
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e6e:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001e70:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <MX_TIM4_Init+0xc4>)
 8001e72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001e82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e94:	481d      	ldr	r0, [pc, #116]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001e96:	f003 fa23 	bl	80052e0 <HAL_TIM_PWM_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001ea0:	f000 fbe0 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eac:	f107 0320 	add.w	r3, r7, #32
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4816      	ldr	r0, [pc, #88]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001eb4:	f004 f852 	bl	8005f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001ebe:	f000 fbd1 	bl	8002664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec2:	2360      	movs	r3, #96	; 0x60
 8001ec4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001eda:	f003 fcdb 	bl	8005894 <HAL_TIM_PWM_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001ee4:	f000 fbbe 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2204      	movs	r2, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001ef0:	f003 fcd0 	bl	8005894 <HAL_TIM_PWM_ConfigChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001efa:	f000 fbb3 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001efe:	4803      	ldr	r0, [pc, #12]	; (8001f0c <MX_TIM4_Init+0xc0>)
 8001f00:	f000 fe34 	bl	8002b6c <HAL_TIM_MspPostInit>

}
 8001f04:	bf00      	nop
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000148 	.word	0x20000148
 8001f10:	40000800 	.word	0x40000800

08001f14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <MX_TIM6_Init+0x64>)
 8001f24:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <MX_TIM6_Init+0x68>)
 8001f26:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <MX_TIM6_Init+0x64>)
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <MX_TIM6_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16799;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <MX_TIM6_Init+0x64>)
 8001f36:	f244 129f 	movw	r2, #16799	; 0x419f
 8001f3a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_TIM6_Init+0x64>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f42:	480d      	ldr	r0, [pc, #52]	; (8001f78 <MX_TIM6_Init+0x64>)
 8001f44:	f003 f952 	bl	80051ec <HAL_TIM_Base_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f4e:	f000 fb89 	bl	8002664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4806      	ldr	r0, [pc, #24]	; (8001f78 <MX_TIM6_Init+0x64>)
 8001f60:	f003 fffc 	bl	8005f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f6a:	f000 fb7b 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200003f4 	.word	0x200003f4
 8001f7c:	40001000 	.word	0x40001000

08001f80 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_TIM10_Init+0x40>)
 8001f86:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <MX_TIM10_Init+0x44>)
 8001f88:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <MX_TIM10_Init+0x40>)
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <MX_TIM10_Init+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 16799;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <MX_TIM10_Init+0x40>)
 8001f98:	f244 129f 	movw	r2, #16799	; 0x419f
 8001f9c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <MX_TIM10_Init+0x40>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_TIM10_Init+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_TIM10_Init+0x40>)
 8001fac:	f003 f91e 	bl	80051ec <HAL_TIM_Base_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001fb6:	f000 fb55 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200001dc 	.word	0x200001dc
 8001fc4:	40014400 	.word	0x40014400

08001fc8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <MX_TIM11_Init+0x40>)
 8001fce:	4a0f      	ldr	r2, [pc, #60]	; (800200c <MX_TIM11_Init+0x44>)
 8001fd0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <MX_TIM11_Init+0x40>)
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <MX_TIM11_Init+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 16799;
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <MX_TIM11_Init+0x40>)
 8001fe0:	f244 129f 	movw	r2, #16799	; 0x419f
 8001fe4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <MX_TIM11_Init+0x40>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_TIM11_Init+0x40>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_TIM11_Init+0x40>)
 8001ff4:	f003 f8fa 	bl	80051ec <HAL_TIM_Base_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001ffe:	f000 fb31 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000320 	.word	0x20000320
 800200c:	40014800 	.word	0x40014800

08002010 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_USART6_UART_Init+0x4c>)
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <MX_USART6_UART_Init+0x50>)
 8002018:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <MX_USART6_UART_Init+0x4c>)
 800201c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002020:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_USART6_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_USART6_UART_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <MX_USART6_UART_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_USART6_UART_Init+0x4c>)
 8002036:	220c      	movs	r2, #12
 8002038:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <MX_USART6_UART_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_USART6_UART_Init+0x4c>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_USART6_UART_Init+0x4c>)
 8002048:	f004 f818 	bl	800607c <HAL_UART_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002052:	f000 fb07 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000488 	.word	0x20000488
 8002060:	40011400 	.word	0x40011400

08002064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MX_DMA_Init+0x3c>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <MX_DMA_Init+0x3c>)
 8002074:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <MX_DMA_Init+0x3c>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2038      	movs	r0, #56	; 0x38
 800208c:	f001 fcd1 	bl	8003a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002090:	2038      	movs	r0, #56	; 0x38
 8002092:	f001 fcea 	bl	8003a6a <HAL_NVIC_EnableIRQ>

}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800

080020a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b69      	ldr	r3, [pc, #420]	; (8002264 <MX_GPIO_Init+0x1c0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a68      	ldr	r2, [pc, #416]	; (8002264 <MX_GPIO_Init+0x1c0>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b66      	ldr	r3, [pc, #408]	; (8002264 <MX_GPIO_Init+0x1c0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b62      	ldr	r3, [pc, #392]	; (8002264 <MX_GPIO_Init+0x1c0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a61      	ldr	r2, [pc, #388]	; (8002264 <MX_GPIO_Init+0x1c0>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <MX_GPIO_Init+0x1c0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <MX_GPIO_Init+0x1c0>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a5a      	ldr	r2, [pc, #360]	; (8002264 <MX_GPIO_Init+0x1c0>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b58      	ldr	r3, [pc, #352]	; (8002264 <MX_GPIO_Init+0x1c0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	4b54      	ldr	r3, [pc, #336]	; (8002264 <MX_GPIO_Init+0x1c0>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a53      	ldr	r2, [pc, #332]	; (8002264 <MX_GPIO_Init+0x1c0>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b51      	ldr	r3, [pc, #324]	; (8002264 <MX_GPIO_Init+0x1c0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	4b4d      	ldr	r3, [pc, #308]	; (8002264 <MX_GPIO_Init+0x1c0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a4c      	ldr	r2, [pc, #304]	; (8002264 <MX_GPIO_Init+0x1c0>)
 8002134:	f043 0308 	orr.w	r3, r3, #8
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b4a      	ldr	r3, [pc, #296]	; (8002264 <MX_GPIO_Init+0x1c0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8002146:	2200      	movs	r2, #0
 8002148:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 800214c:	4846      	ldr	r0, [pc, #280]	; (8002268 <MX_GPIO_Init+0x1c4>)
 800214e:	f002 fa37 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8002152:	2200      	movs	r2, #0
 8002154:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002158:	4844      	ldr	r0, [pc, #272]	; (800226c <MX_GPIO_Init+0x1c8>)
 800215a:	f002 fa31 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002164:	4842      	ldr	r0, [pc, #264]	; (8002270 <MX_GPIO_Init+0x1cc>)
 8002166:	f002 fa2b 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	2104      	movs	r1, #4
 800216e:	4841      	ldr	r0, [pc, #260]	; (8002274 <MX_GPIO_Init+0x1d0>)
 8002170:	f002 fa26 	bl	80045c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8002174:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217a:	2301      	movs	r3, #1
 800217c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	4836      	ldr	r0, [pc, #216]	; (8002268 <MX_GPIO_Init+0x1c4>)
 800218e:	f002 f865 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8002192:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8002196:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002198:	2300      	movs	r3, #0
 800219a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	4830      	ldr	r0, [pc, #192]	; (8002268 <MX_GPIO_Init+0x1c4>)
 80021a8:	f002 f858 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 80021ac:	f640 0304 	movw	r3, #2052	; 0x804
 80021b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	482a      	ldr	r0, [pc, #168]	; (800226c <MX_GPIO_Init+0x1c8>)
 80021c2:	f002 f84b 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 80021c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021cc:	2301      	movs	r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	4823      	ldr	r0, [pc, #140]	; (800226c <MX_GPIO_Init+0x1c8>)
 80021e0:	f002 f83c 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 80021e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	481c      	ldr	r0, [pc, #112]	; (8002270 <MX_GPIO_Init+0x1cc>)
 80021fe:	f002 f82d 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8002202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4816      	ldr	r0, [pc, #88]	; (8002270 <MX_GPIO_Init+0x1cc>)
 8002218:	f002 f820 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800221c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800222e:	2301      	movs	r3, #1
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	480d      	ldr	r0, [pc, #52]	; (8002270 <MX_GPIO_Init+0x1cc>)
 800223a:	f002 f80f 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 800223e:	2304      	movs	r3, #4
 8002240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002242:	2301      	movs	r3, #1
 8002244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	4807      	ldr	r0, [pc, #28]	; (8002274 <MX_GPIO_Init+0x1d0>)
 8002256:	f002 f801 	bl	800425c <HAL_GPIO_Init>

}
 800225a:	bf00      	nop
 800225c:	3728      	adds	r7, #40	; 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40020800 	.word	0x40020800
 800226c:	40020400 	.word	0x40020400
 8002270:	40020000 	.word	0x40020000
 8002274:	40020c00 	.word	0x40020c00

08002278 <led_rgb>:
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 0 : 1;	// Rotary4
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 0 : 1;	// Rotary8
	return _rotaryvalue;
}

void led_rgb(char r, char g, char b) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
 8002282:	460b      	mov	r3, r1
 8002284:	71bb      	strb	r3, [r7, #6]
 8002286:	4613      	mov	r3, r2
 8002288:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (r) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800229c:	480f      	ldr	r0, [pc, #60]	; (80022dc <led_rgb+0x64>)
 800229e:	f002 f98f 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 80022a2:	79bb      	ldrb	r3, [r7, #6]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b4:	4809      	ldr	r0, [pc, #36]	; (80022dc <led_rgb+0x64>)
 80022b6:	f002 f983 	bl	80045c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 80022ba:	797b      	ldrb	r3, [r7, #5]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <led_rgb+0x68>)
 80022ce:	f002 f977 	bl	80045c0 <HAL_GPIO_WritePin>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020800 	.word	0x40020800

080022e4 <sensor_initialize>:

void sensor_initialize() {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	sensgettime = 0;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <sensor_initialize+0x2c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw,
 80022ee:	2210      	movs	r2, #16
 80022f0:	4908      	ldr	r1, [pc, #32]	; (8002314 <sensor_initialize+0x30>)
 80022f2:	4809      	ldr	r0, [pc, #36]	; (8002318 <sensor_initialize+0x34>)
 80022f4:	f000 fed2 	bl	800309c <HAL_ADC_Start_DMA>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <sensor_initialize+0x1e>
	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
		Error_Handler();
 80022fe:	f000 f9b1 	bl	8002664 <Error_Handler>
	}
	HAL_Delay(1000);
 8002302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002306:	f000 fe63 	bl	8002fd0 <HAL_Delay>
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000118 	.word	0x20000118
 8002314:	20000128 	.word	0x20000128
 8002318:	200002cc 	.word	0x200002cc

0800231c <sensor_finalize>:

void sensor_finalize() {
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <sensor_finalize+0x10>)
 8002322:	f000 ffad 	bl	8003280 <HAL_ADC_Stop_DMA>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200002cc 	.word	0x200002cc

08002330 <running_initialize>:

void running_initialize() {
 8002330:	b598      	push	{r3, r4, r7, lr}
 8002332:	af00      	add	r7, sp, #0
	sensor_initialize();
 8002334:	f7ff ffd6 	bl	80022e4 <sensor_initialize>
#if D_VELOCITY_CONTROL
#if D_VELOCITY_CONTROL_TIMER
	stoptime = 0;
 8002338:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <running_initialize+0xbc>)
 800233a:	2200      	movs	r2, #0
 800233c:	801a      	strh	r2, [r3, #0]
#endif
	s_velocity_error_l = 0;
 800233e:	4a2c      	ldr	r2, [pc, #176]	; (80023f0 <running_initialize+0xc0>)
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	f04f 0400 	mov.w	r4, #0
 8002348:	e9c2 3400 	strd	r3, r4, [r2]
	s_velocity_error_r = 0;
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <running_initialize+0xc4>)
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	f04f 0400 	mov.w	r4, #0
 8002356:	e9c2 3400 	strd	r3, r4, [r2]
#endif
	printf("Encoder_Start\r\n");
 800235a:	4827      	ldr	r0, [pc, #156]	; (80023f8 <running_initialize+0xc8>)
 800235c:	f004 fbe0 	bl	8006b20 <puts>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002360:	213c      	movs	r1, #60	; 0x3c
 8002362:	4826      	ldr	r0, [pc, #152]	; (80023fc <running_initialize+0xcc>)
 8002364:	f003 f910 	bl	8005588 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002368:	213c      	movs	r1, #60	; 0x3c
 800236a:	4825      	ldr	r0, [pc, #148]	; (8002400 <running_initialize+0xd0>)
 800236c:	f003 f90c 	bl	8005588 <HAL_TIM_Encoder_Start>
	subsensbuf = 0;
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <running_initialize+0xd4>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
	marker = 0;
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <running_initialize+0xd8>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
	sidedeltacount = 0;
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <running_initialize+0xdc>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
	markerstate = 0;
 8002382:	4b23      	ldr	r3, [pc, #140]	; (8002410 <running_initialize+0xe0>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
	rightmarkercount = 0;
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <running_initialize+0xe4>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
#if USE_FLASH
	course_state_time = 0;
#endif
	printf("SIDESENSOR ENCODER\r\n");
 800238e:	4822      	ldr	r0, [pc, #136]	; (8002418 <running_initialize+0xe8>)
 8002390:	f004 fbc6 	bl	8006b20 <puts>
	HAL_TIM_Base_Start_IT(&htim10);
 8002394:	4821      	ldr	r0, [pc, #132]	; (800241c <running_initialize+0xec>)
 8002396:	f002 ff54 	bl	8005242 <HAL_TIM_Base_Start_IT>
	leftmotor = 0;
 800239a:	4a21      	ldr	r2, [pc, #132]	; (8002420 <running_initialize+0xf0>)
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	f04f 0400 	mov.w	r4, #0
 80023a4:	e9c2 3400 	strd	r3, r4, [r2]
	rightmotor = 0;
 80023a8:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <running_initialize+0xf4>)
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	f04f 0400 	mov.w	r4, #0
 80023b2:	e9c2 3400 	strd	r3, r4, [r2]
	beforedirection = 0;
 80023b6:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <running_initialize+0xf8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
	encoder_initialize();
 80023bc:	f000 f86c 	bl	8002498 <encoder_initialize>
	printf("PWM_Start\r\n");
 80023c0:	481a      	ldr	r0, [pc, #104]	; (800242c <running_initialize+0xfc>)
 80023c2:	f004 fbad 	bl	8006b20 <puts>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 80023c6:	2100      	movs	r1, #0
 80023c8:	4819      	ldr	r0, [pc, #100]	; (8002430 <running_initialize+0x100>)
 80023ca:	f002 ffb5 	bl	8005338 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80023ce:	2104      	movs	r1, #4
 80023d0:	4817      	ldr	r0, [pc, #92]	; (8002430 <running_initialize+0x100>)
 80023d2:	f002 ffb1 	bl	8005338 <HAL_TIM_PWM_Start>
	printf("PID\r\n");
 80023d6:	4817      	ldr	r0, [pc, #92]	; (8002434 <running_initialize+0x104>)
 80023d8:	f004 fba2 	bl	8006b20 <puts>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 80023dc:	4816      	ldr	r0, [pc, #88]	; (8002438 <running_initialize+0x108>)
 80023de:	f002 ff30 	bl	8005242 <HAL_TIM_Base_Start_IT>
#if PLAY
	motorenable = 1;
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <running_initialize+0x10c>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
#endif
}
 80023e8:	bf00      	nop
 80023ea:	bd98      	pop	{r3, r4, r7, pc}
 80023ec:	200005b8 	.word	0x200005b8
 80023f0:	20000268 	.word	0x20000268
 80023f4:	20000120 	.word	0x20000120
 80023f8:	08007944 	.word	0x08007944
 80023fc:	20000434 	.word	0x20000434
 8002400:	20000284 	.word	0x20000284
 8002404:	20000274 	.word	0x20000274
 8002408:	200003f0 	.word	0x200003f0
 800240c:	200002c4 	.word	0x200002c4
 8002410:	20000315 	.word	0x20000315
 8002414:	200005f4 	.word	0x200005f4
 8002418:	08007954 	.word	0x08007954
 800241c:	200001dc 	.word	0x200001dc
 8002420:	20000238 	.word	0x20000238
 8002424:	20000230 	.word	0x20000230
 8002428:	200005f0 	.word	0x200005f0
 800242c:	08007968 	.word	0x08007968
 8002430:	20000148 	.word	0x20000148
 8002434:	08007974 	.word	0x08007974
 8002438:	200003f4 	.word	0x200003f4
 800243c:	200004c8 	.word	0x200004c8

08002440 <running_finalize>:

void running_finalize() {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	motorenable = 0;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <running_finalize+0x34>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
	sensor_finalize();
 800244a:	f7ff ff67 	bl	800231c <sensor_finalize>
	HAL_TIM_Base_Stop_IT(&htim6);
 800244e:	480a      	ldr	r0, [pc, #40]	; (8002478 <running_finalize+0x38>)
 8002450:	f002 ff1b 	bl	800528a <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8002454:	2104      	movs	r1, #4
 8002456:	4809      	ldr	r0, [pc, #36]	; (800247c <running_finalize+0x3c>)
 8002458:	f002 ffac 	bl	80053b4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800245c:	2100      	movs	r1, #0
 800245e:	4807      	ldr	r0, [pc, #28]	; (800247c <running_finalize+0x3c>)
 8002460:	f002 ffa8 	bl	80053b4 <HAL_TIM_PWM_Stop>
	encoder_finalize();
 8002464:	f000 f832 	bl	80024cc <encoder_finalize>
	HAL_TIM_Base_Stop_IT(&htim10);
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <running_finalize+0x40>)
 800246a:	f002 ff0e 	bl	800528a <HAL_TIM_Base_Stop_IT>
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200004c8 	.word	0x200004c8
 8002478:	200003f4 	.word	0x200003f4
 800247c:	20000148 	.word	0x20000148
 8002480:	200001dc 	.word	0x200001dc

08002484 <d_print>:

void d_print() {
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	printf("////////// d_print //////////\r\n");
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <d_print+0x10>)
 800248a:	f004 fb49 	bl	8006b20 <puts>
	printf("velocity_next = %5.3f\r\n", velocity_next_r);
	printf("nextspeed = %5.3f\r\n", nextspeed_r);
	printf("leftmotor = %5.3f, rightmotor = %5.3f\r\n", leftmotor, rightmotor);
	*/
#endif
}	// d_print
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	0800797c 	.word	0x0800797c

08002498 <encoder_initialize>:
	printf("%4d, %4d, %4d\r\n", inertial.gyro.x, inertial.gyro.y,
			inertial.gyro.z);
}
#endif

void encoder_initialize() {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800249c:	213c      	movs	r1, #60	; 0x3c
 800249e:	4807      	ldr	r0, [pc, #28]	; (80024bc <encoder_initialize+0x24>)
 80024a0:	f003 f872 	bl	8005588 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80024a4:	213c      	movs	r1, #60	; 0x3c
 80024a6:	4806      	ldr	r0, [pc, #24]	; (80024c0 <encoder_initialize+0x28>)
 80024a8:	f003 f86e 	bl	8005588 <HAL_TIM_Encoder_Start>

	TIM1->CNT = 0;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <encoder_initialize+0x2c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 0;
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <encoder_initialize+0x30>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000434 	.word	0x20000434
 80024c0:	20000284 	.word	0x20000284
 80024c4:	40010000 	.word	0x40010000
 80024c8:	40000400 	.word	0x40000400

080024cc <encoder_finalize>:

void encoder_finalize() {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 80024d0:	213c      	movs	r1, #60	; 0x3c
 80024d2:	4804      	ldr	r0, [pc, #16]	; (80024e4 <encoder_finalize+0x18>)
 80024d4:	f003 f88f 	bl	80055f6 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 80024d8:	213c      	movs	r1, #60	; 0x3c
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <encoder_finalize+0x1c>)
 80024dc:	f003 f88b 	bl	80055f6 <HAL_TIM_Encoder_Stop>
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000434 	.word	0x20000434
 80024e8:	20000284 	.word	0x20000284

080024ec <__io_putchar>:

PUTCHAR_PROTOTYPE {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 80024f4:	1d39      	adds	r1, r7, #4
 80024f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fa:	2201      	movs	r2, #1
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <__io_putchar+0x20>)
 80024fe:	f003 fe0a 	bl	8006116 <HAL_UART_Transmit>
	return ch;
 8002502:	687b      	ldr	r3, [r7, #4]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000488 	.word	0x20000488

08002510 <low_pass_filter>:

int low_pass_filter(int val, int pre_val, unsigned short int gamma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	4613      	mov	r3, r2
 800251c:	80fb      	strh	r3, [r7, #6]
	return (gamma * pre_val + (1000 - gamma) * val) / 1000;
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	fb02 f203 	mul.w	r2, r2, r3
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	4a05      	ldr	r2, [pc, #20]	; (800254c <low_pass_filter+0x3c>)
 8002536:	fb82 1203 	smull	r1, r2, r2, r3
 800253a:	1192      	asrs	r2, r2, #6
 800253c:	17db      	asrs	r3, r3, #31
 800253e:	1ad3      	subs	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	10624dd3 	.word	0x10624dd3

08002550 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
 8002550:	b4b0      	push	{r4, r5, r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	if (sensgettime >= SENSGETCOUNT) {
 8002558:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <HAL_ADC_ConvCpltCallback+0x104>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b08      	cmp	r3, #8
 800255e:	d954      	bls.n	800260a <HAL_ADC_ConvCpltCallback+0xba>
		sensgettime = 0;
 8002560:	4b3c      	ldr	r3, [pc, #240]	; (8002654 <HAL_ADC_ConvCpltCallback+0x104>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	e04b      	b.n	8002604 <HAL_ADC_ConvCpltCallback+0xb4>
			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 800256c:	2300      	movs	r3, #0
 800256e:	73bb      	strb	r3, [r7, #14]
 8002570:	e039      	b.n	80025e6 <HAL_ADC_ConvCpltCallback+0x96>
				for (unsigned char alphaindex = 0; alphaindex > count;
 8002572:	2300      	movs	r3, #0
 8002574:	737b      	strb	r3, [r7, #13]
 8002576:	e02f      	b.n	80025d8 <HAL_ADC_ConvCpltCallback+0x88>
						alphaindex--) {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8002578:	7b7b      	ldrb	r3, [r7, #13]
 800257a:	1e5a      	subs	r2, r3, #1
 800257c:	7bf9      	ldrb	r1, [r7, #15]
 800257e:	4836      	ldr	r0, [pc, #216]	; (8002658 <HAL_ADC_ConvCpltCallback+0x108>)
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800258e:	817b      	strh	r3, [r7, #10]
					analogbuffers[alphaindex - 1][index] =
							analogbuffers[alphaindex][index];
 8002590:	7b79      	ldrb	r1, [r7, #13]
 8002592:	7bfc      	ldrb	r4, [r7, #15]
					analogbuffers[alphaindex - 1][index] =
 8002594:	7b7b      	ldrb	r3, [r7, #13]
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	7bf8      	ldrb	r0, [r7, #15]
							analogbuffers[alphaindex][index];
 800259a:	4d2f      	ldr	r5, [pc, #188]	; (8002658 <HAL_ADC_ConvCpltCallback+0x108>)
 800259c:	460b      	mov	r3, r1
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	440b      	add	r3, r1
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4423      	add	r3, r4
 80025a6:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
					analogbuffers[alphaindex - 1][index] =
 80025aa:	492b      	ldr	r1, [pc, #172]	; (8002658 <HAL_ADC_ConvCpltCallback+0x108>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4403      	add	r3, r0
 80025b6:	4622      	mov	r2, r4
 80025b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 80025bc:	7b7a      	ldrb	r2, [r7, #13]
 80025be:	7bf9      	ldrb	r1, [r7, #15]
 80025c0:	4825      	ldr	r0, [pc, #148]	; (8002658 <HAL_ADC_ConvCpltCallback+0x108>)
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	897a      	ldrh	r2, [r7, #10]
 80025ce:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						alphaindex--) {
 80025d2:	7b7b      	ldrb	r3, [r7, #13]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	737b      	strb	r3, [r7, #13]
				for (unsigned char alphaindex = 0; alphaindex > count;
 80025d8:	7b7a      	ldrb	r2, [r7, #13]
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d8cb      	bhi.n	8002578 <HAL_ADC_ConvCpltCallback+0x28>
			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 80025e0:	7bbb      	ldrb	r3, [r7, #14]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73bb      	strb	r3, [r7, #14]
 80025e6:	7bbb      	ldrb	r3, [r7, #14]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d9c2      	bls.n	8002572 <HAL_ADC_ConvCpltCallback+0x22>
				}
			}
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	4919      	ldr	r1, [pc, #100]	; (8002658 <HAL_ADC_ConvCpltCallback+0x108>)
 80025f2:	3230      	adds	r2, #48	; 0x30
 80025f4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_ADC_ConvCpltCallback+0x10c>)
 80025fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	3301      	adds	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b0b      	cmp	r3, #11
 8002608:	d9b0      	bls.n	800256c <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
 800260a:	2300      	movs	r3, #0
 800260c:	733b      	strb	r3, [r7, #12]
 800260e:	e013      	b.n	8002638 <HAL_ADC_ConvCpltCallback+0xe8>
		analogbuffers[sensgettime][index] = analograw[index];
 8002610:	7b3b      	ldrb	r3, [r7, #12]
 8002612:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_ADC_ConvCpltCallback+0x104>)
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	4610      	mov	r0, r2
 8002618:	7b3a      	ldrb	r2, [r7, #12]
 800261a:	4911      	ldr	r1, [pc, #68]	; (8002660 <HAL_ADC_ConvCpltCallback+0x110>)
 800261c:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 8002620:	490d      	ldr	r1, [pc, #52]	; (8002658 <HAL_ADC_ConvCpltCallback+0x108>)
 8002622:	4603      	mov	r3, r0
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4403      	add	r3, r0
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	4622      	mov	r2, r4
 800262e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
 8002632:	7b3b      	ldrb	r3, [r7, #12]
 8002634:	3301      	adds	r3, #1
 8002636:	733b      	strb	r3, [r7, #12]
 8002638:	7b3b      	ldrb	r3, [r7, #12]
 800263a:	2b0b      	cmp	r3, #11
 800263c:	d9e8      	bls.n	8002610 <HAL_ADC_ConvCpltCallback+0xc0>
	}
	sensgettime++;
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_ADC_ConvCpltCallback+0x104>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_ADC_ConvCpltCallback+0x104>)
 8002648:	701a      	strb	r2, [r3, #0]
}
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bcb0      	pop	{r4, r5, r7}
 8002652:	4770      	bx	lr
 8002654:	20000118 	.word	0x20000118
 8002658:	200004cc 	.word	0x200004cc
 800265c:	200000a0 	.word	0x200000a0
 8002660:	20000128 	.word	0x20000128

08002664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800266a:	e7fe      	b.n	800266a <Error_Handler+0x6>

0800266c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_MspInit+0x54>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <HAL_MspInit+0x54>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_MspInit+0x54>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_MspInit+0x54>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <HAL_MspInit+0x54>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_MspInit+0x54>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	210f      	movs	r1, #15
 80026ae:	f06f 0003 	mvn.w	r0, #3
 80026b2:	f001 f9be 	bl	8003a32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800

080026c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a49      	ldr	r2, [pc, #292]	; (8002808 <HAL_ADC_MspInit+0x144>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	f040 808c 	bne.w	8002800 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_ADC_MspInit+0x148>)
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	4a46      	ldr	r2, [pc, #280]	; (800280c <HAL_ADC_MspInit+0x148>)
 80026f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f6:	6453      	str	r3, [r2, #68]	; 0x44
 80026f8:	4b44      	ldr	r3, [pc, #272]	; (800280c <HAL_ADC_MspInit+0x148>)
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	4b40      	ldr	r3, [pc, #256]	; (800280c <HAL_ADC_MspInit+0x148>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	4a3f      	ldr	r2, [pc, #252]	; (800280c <HAL_ADC_MspInit+0x148>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	6313      	str	r3, [r2, #48]	; 0x30
 8002714:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_ADC_MspInit+0x148>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_ADC_MspInit+0x148>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	4a38      	ldr	r2, [pc, #224]	; (800280c <HAL_ADC_MspInit+0x148>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6313      	str	r3, [r2, #48]	; 0x30
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <HAL_ADC_MspInit+0x148>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	4b32      	ldr	r3, [pc, #200]	; (800280c <HAL_ADC_MspInit+0x148>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	4a31      	ldr	r2, [pc, #196]	; (800280c <HAL_ADC_MspInit+0x148>)
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	6313      	str	r3, [r2, #48]	; 0x30
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <HAL_ADC_MspInit+0x148>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002758:	233f      	movs	r3, #63	; 0x3f
 800275a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800275c:	2303      	movs	r3, #3
 800275e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	4829      	ldr	r0, [pc, #164]	; (8002810 <HAL_ADC_MspInit+0x14c>)
 800276c:	f001 fd76 	bl	800425c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002770:	23ff      	movs	r3, #255	; 0xff
 8002772:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002774:	2303      	movs	r3, #3
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 031c 	add.w	r3, r7, #28
 8002780:	4619      	mov	r1, r3
 8002782:	4824      	ldr	r0, [pc, #144]	; (8002814 <HAL_ADC_MspInit+0x150>)
 8002784:	f001 fd6a 	bl	800425c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002788:	2303      	movs	r3, #3
 800278a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800278c:	2303      	movs	r3, #3
 800278e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	4619      	mov	r1, r3
 800279a:	481f      	ldr	r0, [pc, #124]	; (8002818 <HAL_ADC_MspInit+0x154>)
 800279c:	f001 fd5e 	bl	800425c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027a0:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027a2:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <HAL_ADC_MspInit+0x15c>)
 80027a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027c0:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027e4:	480d      	ldr	r0, [pc, #52]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027e6:	f001 f95b 	bl	8003aa0 <HAL_DMA_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80027f0:	f7ff ff38 	bl	8002664 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a09      	ldr	r2, [pc, #36]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_ADC_MspInit+0x158>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002800:	bf00      	nop
 8002802:	3730      	adds	r7, #48	; 0x30
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40012000 	.word	0x40012000
 800280c:	40023800 	.word	0x40023800
 8002810:	40020800 	.word	0x40020800
 8002814:	40020000 	.word	0x40020000
 8002818:	40020400 	.word	0x40020400
 800281c:	20000388 	.word	0x20000388
 8002820:	40026410 	.word	0x40026410

08002824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a19      	ldr	r2, [pc, #100]	; (80028a8 <HAL_I2C_MspInit+0x84>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d12c      	bne.n	80028a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_I2C_MspInit+0x88>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <HAL_I2C_MspInit+0x88>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_I2C_MspInit+0x88>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002868:	2312      	movs	r3, #18
 800286a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800286c:	2301      	movs	r3, #1
 800286e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002874:	2304      	movs	r3, #4
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	4619      	mov	r1, r3
 800287e:	480c      	ldr	r0, [pc, #48]	; (80028b0 <HAL_I2C_MspInit+0x8c>)
 8002880:	f001 fcec 	bl	800425c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_I2C_MspInit+0x88>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	4a07      	ldr	r2, [pc, #28]	; (80028ac <HAL_I2C_MspInit+0x88>)
 800288e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002892:	6413      	str	r3, [r2, #64]	; 0x40
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_I2C_MspInit+0x88>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028a0:	bf00      	nop
 80028a2:	3728      	adds	r7, #40	; 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40005400 	.word	0x40005400
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020400 	.word	0x40020400

080028b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <HAL_SPI_MspInit+0x84>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d12c      	bne.n	8002930 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b18      	ldr	r3, [pc, #96]	; (800293c <HAL_SPI_MspInit+0x88>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a17      	ldr	r2, [pc, #92]	; (800293c <HAL_SPI_MspInit+0x88>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <HAL_SPI_MspInit+0x88>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_SPI_MspInit+0x88>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_SPI_MspInit+0x88>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_SPI_MspInit+0x88>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800290e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002920:	2305      	movs	r3, #5
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	4619      	mov	r1, r3
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <HAL_SPI_MspInit+0x8c>)
 800292c:	f001 fc96 	bl	800425c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002930:	bf00      	nop
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40003800 	.word	0x40003800
 800293c:	40023800 	.word	0x40023800
 8002940:	40020400 	.word	0x40020400

08002944 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	; 0x30
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a3a      	ldr	r2, [pc, #232]	; (8002a4c <HAL_TIM_Encoder_MspInit+0x108>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d13d      	bne.n	80029e2 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a31      	ldr	r2, [pc, #196]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 800299e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029b0:	2301      	movs	r3, #1
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	4619      	mov	r1, r3
 80029ba:	4826      	ldr	r0, [pc, #152]	; (8002a54 <HAL_TIM_Encoder_MspInit+0x110>)
 80029bc:	f001 fc4e 	bl	800425c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	2019      	movs	r0, #25
 80029c6:	f001 f834 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029ca:	2019      	movs	r0, #25
 80029cc:	f001 f84d 	bl	8003a6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	201a      	movs	r0, #26
 80029d6:	f001 f82c 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80029da:	201a      	movs	r0, #26
 80029dc:	f001 f845 	bl	8003a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029e0:	e030      	b.n	8002a44 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <HAL_TIM_Encoder_MspInit+0x114>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d12b      	bne.n	8002a44 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	6413      	str	r3, [r2, #64]	; 0x40
 80029fc:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a12:	f043 0302 	orr.w	r3, r3, #2
 8002a16:	6313      	str	r3, [r2, #48]	; 0x30
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8002a24:	2330      	movs	r3, #48	; 0x30
 8002a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a34:	2302      	movs	r3, #2
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4807      	ldr	r0, [pc, #28]	; (8002a5c <HAL_TIM_Encoder_MspInit+0x118>)
 8002a40:	f001 fc0c 	bl	800425c <HAL_GPIO_Init>
}
 8002a44:	bf00      	nop
 8002a46:	3730      	adds	r7, #48	; 0x30
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40020400 	.word	0x40020400

08002a60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10d      	bne.n	8002a8e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_TIM_PWM_MspInit+0x40>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_TIM_PWM_MspInit+0x40>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_TIM_PWM_MspInit+0x40>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <HAL_TIM_Base_MspInit+0xb8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d116      	bne.n	8002ae4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <HAL_TIM_Base_MspInit+0xbc>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a28      	ldr	r2, [pc, #160]	; (8002b60 <HAL_TIM_Base_MspInit+0xbc>)
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <HAL_TIM_Base_MspInit+0xbc>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2036      	movs	r0, #54	; 0x36
 8002ad8:	f000 ffab 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002adc:	2036      	movs	r0, #54	; 0x36
 8002ade:	f000 ffc4 	bl	8003a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002ae2:	e036      	b.n	8002b52 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_TIM_Base_MspInit+0xc0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d116      	bne.n	8002b1c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_TIM_Base_MspInit+0xbc>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_TIM_Base_MspInit+0xbc>)
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afc:	6453      	str	r3, [r2, #68]	; 0x44
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <HAL_TIM_Base_MspInit+0xbc>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2019      	movs	r0, #25
 8002b10:	f000 ff8f 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b14:	2019      	movs	r0, #25
 8002b16:	f000 ffa8 	bl	8003a6a <HAL_NVIC_EnableIRQ>
}
 8002b1a:	e01a      	b.n	8002b52 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <HAL_TIM_Base_MspInit+0xc4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d115      	bne.n	8002b52 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <HAL_TIM_Base_MspInit+0xbc>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <HAL_TIM_Base_MspInit+0xbc>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_TIM_Base_MspInit+0xbc>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	201a      	movs	r0, #26
 8002b48:	f000 ff73 	bl	8003a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b4c:	201a      	movs	r0, #26
 8002b4e:	f000 ff8c 	bl	8003a6a <HAL_NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40001000 	.word	0x40001000
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40014400 	.word	0x40014400
 8002b68:	40014800 	.word	0x40014800

08002b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <HAL_TIM_MspPostInit+0x68>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11d      	bne.n	8002bca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_TIM_MspPostInit+0x6c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <HAL_TIM_MspPostInit+0x6c>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_TIM_MspPostInit+0x6c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8002baa:	23c0      	movs	r3, #192	; 0xc0
 8002bac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4805      	ldr	r0, [pc, #20]	; (8002bdc <HAL_TIM_MspPostInit+0x70>)
 8002bc6:	f001 fb49 	bl	800425c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40000800 	.word	0x40000800
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020400 	.word	0x40020400

08002be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <HAL_UART_MspInit+0x84>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d12b      	bne.n	8002c5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_UART_MspInit+0x88>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <HAL_UART_MspInit+0x88>)
 8002c0c:	f043 0320 	orr.w	r3, r3, #32
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_UART_MspInit+0x88>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_UART_MspInit+0x88>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4a10      	ldr	r2, [pc, #64]	; (8002c68 <HAL_UART_MspInit+0x88>)
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_UART_MspInit+0x88>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c3a:	23c0      	movs	r3, #192	; 0xc0
 8002c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4619      	mov	r1, r3
 8002c54:	4805      	ldr	r0, [pc, #20]	; (8002c6c <HAL_UART_MspInit+0x8c>)
 8002c56:	f001 fb01 	bl	800425c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c5a:	bf00      	nop
 8002c5c:	3728      	adds	r7, #40	; 0x28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40011400 	.word	0x40011400
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020800 	.word	0x40020800

08002c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <NMI_Handler+0x4>

08002c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c7a:	e7fe      	b.n	8002c7a <HardFault_Handler+0x4>

08002c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c80:	e7fe      	b.n	8002c80 <MemManage_Handler+0x4>

08002c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c86:	e7fe      	b.n	8002c86 <BusFault_Handler+0x4>

08002c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <UsageFault_Handler+0x4>

08002c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cbc:	f000 f968 	bl	8002f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cc8:	4803      	ldr	r0, [pc, #12]	; (8002cd8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002cca:	f002 fcdb 	bl	8005684 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002cce:	4803      	ldr	r0, [pc, #12]	; (8002cdc <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002cd0:	f002 fcd8 	bl	8005684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000434 	.word	0x20000434
 8002cdc:	200001dc 	.word	0x200001dc

08002ce0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ce4:	4803      	ldr	r0, [pc, #12]	; (8002cf4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002ce6:	f002 fccd 	bl	8005684 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002cea:	4803      	ldr	r0, [pc, #12]	; (8002cf8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002cec:	f002 fcca 	bl	8005684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000434 	.word	0x20000434
 8002cf8:	20000320 	.word	0x20000320

08002cfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <TIM6_DAC_IRQHandler+0x10>)
 8002d02:	f002 fcbf 	bl	8005684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200003f4 	.word	0x200003f4

08002d10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <DMA2_Stream0_IRQHandler+0x10>)
 8002d16:	f001 f839 	bl	8003d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000388 	.word	0x20000388

08002d24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e00a      	b.n	8002d4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d36:	f3af 8000 	nop.w
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	60ba      	str	r2, [r7, #8]
 8002d42:	b2ca      	uxtb	r2, r1
 8002d44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dbf0      	blt.n	8002d36 <_read+0x12>
	}

return len;
 8002d54:	687b      	ldr	r3, [r7, #4]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e009      	b.n	8002d84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fbb7 	bl	80024ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3301      	adds	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	dbf1      	blt.n	8002d70 <_write+0x12>
	}
	return len;
 8002d8c:	687b      	ldr	r3, [r7, #4]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_close>:

int _close(int file)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_isatty>:

int _isatty(int file)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
	return 0;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <_sbrk+0x5c>)
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <_sbrk+0x60>)
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <_sbrk+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <_sbrk+0x64>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <_sbrk+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e30:	f003 fdd0 	bl	80069d4 <__errno>
 8002e34:	4602      	mov	r2, r0
 8002e36:	230c      	movs	r3, #12
 8002e38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	e009      	b.n	8002e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <_sbrk+0x64>)
 8002e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e52:	68fb      	ldr	r3, [r7, #12]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20020000 	.word	0x20020000
 8002e60:	00000400 	.word	0x00000400
 8002e64:	2000008c 	.word	0x2000008c
 8002e68:	20000600 	.word	0x20000600

08002e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <SystemInit+0x28>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <SystemInit+0x28>)
 8002e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <SystemInit+0x28>)
 8002e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e86:	609a      	str	r2, [r3, #8]
#endif
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ed0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e9e:	e003      	b.n	8002ea8 <LoopCopyDataInit>

08002ea0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ea2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ea4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ea6:	3104      	adds	r1, #4

08002ea8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ea8:	480b      	ldr	r0, [pc, #44]	; (8002ed8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002eac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002eae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002eb0:	d3f6      	bcc.n	8002ea0 <CopyDataInit>
  ldr  r2, =_sbss
 8002eb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002eb4:	e002      	b.n	8002ebc <LoopFillZerobss>

08002eb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002eb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002eb8:	f842 3b04 	str.w	r3, [r2], #4

08002ebc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ebe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ec0:	d3f9      	bcc.n	8002eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ec2:	f7ff ffd3 	bl	8002e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ec6:	f003 fd8b 	bl	80069e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eca:	f7fe fb5b 	bl	8001584 <main>
  bx  lr    
 8002ece:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ed0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ed4:	08007a64 	.word	0x08007a64
  ldr  r0, =_sdata
 8002ed8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002edc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002ee0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002ee4:	20000600 	.word	0x20000600

08002ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee8:	e7fe      	b.n	8002ee8 <ADC_IRQHandler>
	...

08002eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	; (8002f2c <HAL_Init+0x40>)
 8002ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_Init+0x40>)
 8002f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_Init+0x40>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <HAL_Init+0x40>)
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f14:	2003      	movs	r0, #3
 8002f16:	f000 fd81 	bl	8003a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f000 f808 	bl	8002f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f20:	f7ff fba4 	bl	800266c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023c00 	.word	0x40023c00

08002f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_InitTick+0x54>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_InitTick+0x58>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fd99 	bl	8003a86 <HAL_SYSTICK_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e00e      	b.n	8002f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b0f      	cmp	r3, #15
 8002f62:	d80a      	bhi.n	8002f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f64:	2200      	movs	r2, #0
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6c:	f000 fd61 	bl	8003a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f70:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <HAL_InitTick+0x5c>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e000      	b.n	8002f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20000008 	.word	0x20000008
 8002f8c:	20000004 	.word	0x20000004

08002f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_IncTick+0x20>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_IncTick+0x24>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <HAL_IncTick+0x24>)
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000008 	.word	0x20000008
 8002fb4:	200005f8 	.word	0x200005f8

08002fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return uwTick;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <HAL_GetTick+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	200005f8 	.word	0x200005f8

08002fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff ffee 	bl	8002fb8 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d005      	beq.n	8002ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_Delay+0x40>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ff6:	bf00      	nop
 8002ff8:	f7ff ffde 	bl	8002fb8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	d8f7      	bhi.n	8002ff8 <HAL_Delay+0x28>
  {
  }
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000008 	.word	0x20000008

08003014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e033      	b.n	8003092 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff fb46 	bl	80026c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b00      	cmp	r3, #0
 8003050:	d118      	bne.n	8003084 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800305a:	f023 0302 	bic.w	r3, r3, #2
 800305e:	f043 0202 	orr.w	r2, r3, #2
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa8a 	bl	8003580 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
 8003082:	e001      	b.n	8003088 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_Start_DMA+0x1e>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e0cc      	b.n	8003254 <HAL_ADC_Start_DMA+0x1b8>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d018      	beq.n	8003102 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030e0:	4b5e      	ldr	r3, [pc, #376]	; (800325c <HAL_ADC_Start_DMA+0x1c0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a5e      	ldr	r2, [pc, #376]	; (8003260 <HAL_ADC_Start_DMA+0x1c4>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	0c9a      	lsrs	r2, r3, #18
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80030f4:	e002      	b.n	80030fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f9      	bne.n	80030f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	f040 80a0 	bne.w	8003252 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800311a:	f023 0301 	bic.w	r3, r3, #1
 800311e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800313c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003150:	d106      	bne.n	8003160 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f023 0206 	bic.w	r2, r3, #6
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
 800315e:	e002      	b.n	8003166 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_ADC_Start_DMA+0x1c8>)
 8003170:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	4a3c      	ldr	r2, [pc, #240]	; (8003268 <HAL_ADC_Start_DMA+0x1cc>)
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	4a3b      	ldr	r2, [pc, #236]	; (800326c <HAL_ADC_Start_DMA+0x1d0>)
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	4a3a      	ldr	r2, [pc, #232]	; (8003270 <HAL_ADC_Start_DMA+0x1d4>)
 8003188:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003192:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	334c      	adds	r3, #76	; 0x4c
 80031be:	4619      	mov	r1, r3
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f000 fd1a 	bl	8003bfc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d12a      	bne.n	800322a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a26      	ldr	r2, [pc, #152]	; (8003274 <HAL_ADC_Start_DMA+0x1d8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d015      	beq.n	800320a <HAL_ADC_Start_DMA+0x16e>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a25      	ldr	r2, [pc, #148]	; (8003278 <HAL_ADC_Start_DMA+0x1dc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d105      	bne.n	80031f4 <HAL_ADC_Start_DMA+0x158>
 80031e8:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <HAL_ADC_Start_DMA+0x1c8>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a20      	ldr	r2, [pc, #128]	; (800327c <HAL_ADC_Start_DMA+0x1e0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d129      	bne.n	8003252 <HAL_ADC_Start_DMA+0x1b6>
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_ADC_Start_DMA+0x1c8>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2b0f      	cmp	r3, #15
 8003208:	d823      	bhi.n	8003252 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d11c      	bne.n	8003252 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	e013      	b.n	8003252 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a11      	ldr	r2, [pc, #68]	; (8003274 <HAL_ADC_Start_DMA+0x1d8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10e      	bne.n	8003252 <HAL_ADC_Start_DMA+0x1b6>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003250:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000000 	.word	0x20000000
 8003260:	431bde83 	.word	0x431bde83
 8003264:	40012300 	.word	0x40012300
 8003268:	08003779 	.word	0x08003779
 800326c:	08003833 	.word	0x08003833
 8003270:	0800384f 	.word	0x0800384f
 8003274:	40012000 	.word	0x40012000
 8003278:	40012100 	.word	0x40012100
 800327c:	40012200 	.word	0x40012200

08003280 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_ADC_Stop_DMA+0x1a>
 8003296:	2302      	movs	r3, #2
 8003298:	e038      	b.n	800330c <HAL_ADC_Stop_DMA+0x8c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0201 	bic.w	r2, r2, #1
 80032b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d120      	bne.n	8003302 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ce:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fce9 	bl	8003cac <HAL_DMA_Abort>
 80032da:	4603      	mov	r3, r0
 80032dc:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80032ec:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x1c>
 8003354:	2302      	movs	r3, #2
 8003356:	e105      	b.n	8003564 <HAL_ADC_ConfigChannel+0x228>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b09      	cmp	r3, #9
 8003366:	d925      	bls.n	80033b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68d9      	ldr	r1, [r3, #12]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	3b1e      	subs	r3, #30
 800337e:	2207      	movs	r2, #7
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43da      	mvns	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	400a      	ands	r2, r1
 800338c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68d9      	ldr	r1, [r3, #12]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	4603      	mov	r3, r0
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4403      	add	r3, r0
 80033a6:	3b1e      	subs	r3, #30
 80033a8:	409a      	lsls	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	e022      	b.n	80033fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6919      	ldr	r1, [r3, #16]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	4613      	mov	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	2207      	movs	r2, #7
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43da      	mvns	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	400a      	ands	r2, r1
 80033d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6919      	ldr	r1, [r3, #16]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4618      	mov	r0, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4403      	add	r3, r0
 80033f0:	409a      	lsls	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d824      	bhi.n	800344c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	3b05      	subs	r3, #5
 8003414:	221f      	movs	r2, #31
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	400a      	ands	r2, r1
 8003422:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	4618      	mov	r0, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	3b05      	subs	r3, #5
 800343e:	fa00 f203 	lsl.w	r2, r0, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	635a      	str	r2, [r3, #52]	; 0x34
 800344a:	e04c      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b0c      	cmp	r3, #12
 8003452:	d824      	bhi.n	800349e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	3b23      	subs	r3, #35	; 0x23
 8003466:	221f      	movs	r2, #31
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43da      	mvns	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	400a      	ands	r2, r1
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	b29b      	uxth	r3, r3
 8003482:	4618      	mov	r0, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	3b23      	subs	r3, #35	; 0x23
 8003490:	fa00 f203 	lsl.w	r2, r0, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
 800349c:	e023      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	3b41      	subs	r3, #65	; 0x41
 80034b0:	221f      	movs	r2, #31
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	400a      	ands	r2, r1
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4618      	mov	r0, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b41      	subs	r3, #65	; 0x41
 80034da:	fa00 f203 	lsl.w	r2, r0, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034e6:	4b22      	ldr	r3, [pc, #136]	; (8003570 <HAL_ADC_ConfigChannel+0x234>)
 80034e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_ADC_ConfigChannel+0x238>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d109      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1cc>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b12      	cmp	r3, #18
 80034fa:	d105      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <HAL_ADC_ConfigChannel+0x238>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d123      	bne.n	800355a <HAL_ADC_ConfigChannel+0x21e>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b10      	cmp	r3, #16
 8003518:	d003      	beq.n	8003522 <HAL_ADC_ConfigChannel+0x1e6>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b11      	cmp	r3, #17
 8003520:	d11b      	bne.n	800355a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b10      	cmp	r3, #16
 8003534:	d111      	bne.n	800355a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_ADC_ConfigChannel+0x23c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a10      	ldr	r2, [pc, #64]	; (800357c <HAL_ADC_ConfigChannel+0x240>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	0c9a      	lsrs	r2, r3, #18
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800354c:	e002      	b.n	8003554 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3b01      	subs	r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f9      	bne.n	800354e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40012300 	.word	0x40012300
 8003574:	40012000 	.word	0x40012000
 8003578:	20000000 	.word	0x20000000
 800357c:	431bde83 	.word	0x431bde83

08003580 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003588:	4b79      	ldr	r3, [pc, #484]	; (8003770 <ADC_Init+0x1f0>)
 800358a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	021a      	lsls	r2, r3, #8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6899      	ldr	r1, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	4a58      	ldr	r2, [pc, #352]	; (8003774 <ADC_Init+0x1f4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003626:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6899      	ldr	r1, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6899      	ldr	r1, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	e00f      	b.n	800367e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800366c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800367c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0202 	bic.w	r2, r2, #2
 800368c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6899      	ldr	r1, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7e1b      	ldrb	r3, [r3, #24]
 8003698:	005a      	lsls	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01b      	beq.n	80036e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6859      	ldr	r1, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	3b01      	subs	r3, #1
 80036d8:	035a      	lsls	r2, r3, #13
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	e007      	b.n	80036f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	3b01      	subs	r3, #1
 8003710:	051a      	lsls	r2, r3, #20
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6899      	ldr	r1, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003736:	025a      	lsls	r2, r3, #9
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6899      	ldr	r1, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	029a      	lsls	r2, r3, #10
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	609a      	str	r2, [r3, #8]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40012300 	.word	0x40012300
 8003774:	0f000001 	.word	0x0f000001

08003778 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800378e:	2b00      	cmp	r3, #0
 8003790:	d13c      	bne.n	800380c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d12b      	bne.n	8003804 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d127      	bne.n	8003804 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d119      	bne.n	8003804 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0220 	bic.w	r2, r2, #32
 80037de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d105      	bne.n	8003804 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f7fe fea3 	bl	8002550 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800380a:	e00e      	b.n	800382a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff fd85 	bl	8003328 <HAL_ADC_ErrorCallback>
}
 800381e:	e004      	b.n	800382a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	4798      	blx	r3
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7ff fd67 	bl	8003314 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2240      	movs	r2, #64	; 0x40
 8003860:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f043 0204 	orr.w	r2, r3, #4
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff fd5a 	bl	8003328 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003898:	4013      	ands	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ae:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	60d3      	str	r3, [r2, #12]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <__NVIC_GetPriorityGrouping+0x18>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 0307 	and.w	r3, r3, #7
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db0b      	blt.n	800390a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	4907      	ldr	r1, [pc, #28]	; (8003918 <__NVIC_EnableIRQ+0x38>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2001      	movs	r0, #1
 8003902:	fa00 f202 	lsl.w	r2, r0, r2
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000e100 	.word	0xe000e100

0800391c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0a      	blt.n	8003946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	490c      	ldr	r1, [pc, #48]	; (8003968 <__NVIC_SetPriority+0x4c>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	440b      	add	r3, r1
 8003940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003944:	e00a      	b.n	800395c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	4908      	ldr	r1, [pc, #32]	; (800396c <__NVIC_SetPriority+0x50>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3b04      	subs	r3, #4
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	440b      	add	r3, r1
 800395a:	761a      	strb	r2, [r3, #24]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	; 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f1c3 0307 	rsb	r3, r3, #7
 800398a:	2b04      	cmp	r3, #4
 800398c:	bf28      	it	cs
 800398e:	2304      	movcs	r3, #4
 8003990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3304      	adds	r3, #4
 8003996:	2b06      	cmp	r3, #6
 8003998:	d902      	bls.n	80039a0 <NVIC_EncodePriority+0x30>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3b03      	subs	r3, #3
 800399e:	e000      	b.n	80039a2 <NVIC_EncodePriority+0x32>
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	401a      	ands	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b8:	f04f 31ff 	mov.w	r1, #4294967295
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43d9      	mvns	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	4313      	orrs	r3, r2
         );
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e8:	d301      	bcc.n	80039ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ea:	2301      	movs	r3, #1
 80039ec:	e00f      	b.n	8003a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <SysTick_Config+0x40>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f6:	210f      	movs	r1, #15
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	f7ff ff8e 	bl	800391c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <SysTick_Config+0x40>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <SysTick_Config+0x40>)
 8003a08:	2207      	movs	r2, #7
 8003a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	e000e010 	.word	0xe000e010

08003a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff29 	bl	800387c <__NVIC_SetPriorityGrouping>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4603      	mov	r3, r0
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a44:	f7ff ff3e 	bl	80038c4 <__NVIC_GetPriorityGrouping>
 8003a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	6978      	ldr	r0, [r7, #20]
 8003a50:	f7ff ff8e 	bl	8003970 <NVIC_EncodePriority>
 8003a54:	4602      	mov	r2, r0
 8003a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff5d 	bl	800391c <__NVIC_SetPriority>
}
 8003a62:	bf00      	nop
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	4603      	mov	r3, r0
 8003a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff31 	bl	80038e0 <__NVIC_EnableIRQ>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff ffa2 	bl	80039d8 <SysTick_Config>
 8003a94:	4603      	mov	r3, r0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7ff fa84 	bl	8002fb8 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e099      	b.n	8003bf0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003adc:	e00f      	b.n	8003afe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ade:	f7ff fa6b 	bl	8002fb8 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d908      	bls.n	8003afe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2203      	movs	r2, #3
 8003af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e078      	b.n	8003bf0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e8      	bne.n	8003ade <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4b38      	ldr	r3, [pc, #224]	; (8003bf8 <HAL_DMA_Init+0x158>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d107      	bne.n	8003b68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4313      	orrs	r3, r2
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 0307 	bic.w	r3, r3, #7
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d117      	bne.n	8003bc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fadf 	bl	8004168 <DMA_CheckFifoParam>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2240      	movs	r2, #64	; 0x40
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e016      	b.n	8003bf0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa96 	bl	80040fc <DMA_CalcBaseAndBitshift>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	223f      	movs	r2, #63	; 0x3f
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	f010803f 	.word	0xf010803f

08003bfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_DMA_Start_IT+0x26>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e040      	b.n	8003ca4 <HAL_DMA_Start_IT+0xa8>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d12f      	bne.n	8003c96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fa28 	bl	80040a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	223f      	movs	r2, #63	; 0x3f
 8003c56:	409a      	lsls	r2, r3
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0216 	orr.w	r2, r2, #22
 8003c6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0208 	orr.w	r2, r2, #8
 8003c82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e005      	b.n	8003ca2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cba:	f7ff f97d 	bl	8002fb8 <HAL_GetTick>
 8003cbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d008      	beq.n	8003cde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2280      	movs	r2, #128	; 0x80
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e052      	b.n	8003d84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0216 	bic.w	r2, r2, #22
 8003cec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <HAL_DMA_Abort+0x62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0208 	bic.w	r2, r2, #8
 8003d1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d2e:	e013      	b.n	8003d58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d30:	f7ff f942 	bl	8002fb8 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d90c      	bls.n	8003d58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e015      	b.n	8003d84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e4      	bne.n	8003d30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	223f      	movs	r2, #63	; 0x3f
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d98:	4b92      	ldr	r3, [pc, #584]	; (8003fe4 <HAL_DMA_IRQHandler+0x258>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a92      	ldr	r2, [pc, #584]	; (8003fe8 <HAL_DMA_IRQHandler+0x25c>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	0a9b      	lsrs	r3, r3, #10
 8003da4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	2208      	movs	r2, #8
 8003db8:	409a      	lsls	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01a      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0204 	bic.w	r2, r2, #4
 8003dde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	2208      	movs	r2, #8
 8003de6:	409a      	lsls	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	f043 0201 	orr.w	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d012      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	f043 0202 	orr.w	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e32:	2204      	movs	r2, #4
 8003e34:	409a      	lsls	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d012      	beq.n	8003e64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	2204      	movs	r2, #4
 8003e52:	409a      	lsls	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	f043 0204 	orr.w	r2, r3, #4
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	2210      	movs	r2, #16
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d043      	beq.n	8003efc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d03c      	beq.n	8003efc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e86:	2210      	movs	r2, #16
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d018      	beq.n	8003ece <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d108      	bne.n	8003ebc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d024      	beq.n	8003efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
 8003eba:	e01f      	b.n	8003efc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
 8003ecc:	e016      	b.n	8003efc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0208 	bic.w	r2, r2, #8
 8003eea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	2220      	movs	r2, #32
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 808e 	beq.w	800402a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8086 	beq.w	800402a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	2220      	movs	r2, #32
 8003f24:	409a      	lsls	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d136      	bne.n	8003fa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0216 	bic.w	r2, r2, #22
 8003f44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_DMA_IRQHandler+0x1da>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0208 	bic.w	r2, r2, #8
 8003f74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	223f      	movs	r2, #63	; 0x3f
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d07d      	beq.n	8004096 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
        }
        return;
 8003fa2:	e078      	b.n	8004096 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01c      	beq.n	8003fec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d108      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d030      	beq.n	800402a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
 8003fd0:	e02b      	b.n	800402a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d027      	beq.n	800402a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	4798      	blx	r3
 8003fe2:	e022      	b.n	800402a <HAL_DMA_IRQHandler+0x29e>
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10f      	bne.n	800401a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0210 	bic.w	r2, r2, #16
 8004008:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	2b00      	cmp	r3, #0
 8004030:	d032      	beq.n	8004098 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d022      	beq.n	8004084 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2205      	movs	r2, #5
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3301      	adds	r3, #1
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	429a      	cmp	r2, r3
 8004060:	d307      	bcc.n	8004072 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f2      	bne.n	8004056 <HAL_DMA_IRQHandler+0x2ca>
 8004070:	e000      	b.n	8004074 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004072:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
 8004094:	e000      	b.n	8004098 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004096:	bf00      	nop
    }
  }
}
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop

080040a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b40      	cmp	r3, #64	; 0x40
 80040cc:	d108      	bne.n	80040e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040de:	e007      	b.n	80040f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	60da      	str	r2, [r3, #12]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	3b10      	subs	r3, #16
 800410c:	4a14      	ldr	r2, [pc, #80]	; (8004160 <DMA_CalcBaseAndBitshift+0x64>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004116:	4a13      	ldr	r2, [pc, #76]	; (8004164 <DMA_CalcBaseAndBitshift+0x68>)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d909      	bls.n	800413e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	1d1a      	adds	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	659a      	str	r2, [r3, #88]	; 0x58
 800413c:	e007      	b.n	800414e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	aaaaaaab 	.word	0xaaaaaaab
 8004164:	080079b4 	.word	0x080079b4

08004168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d11f      	bne.n	80041c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d855      	bhi.n	8004234 <DMA_CheckFifoParam+0xcc>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <DMA_CheckFifoParam+0x28>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041b3 	.word	0x080041b3
 8004198:	080041a1 	.word	0x080041a1
 800419c:	08004235 	.word	0x08004235
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d045      	beq.n	8004238 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b0:	e042      	b.n	8004238 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ba:	d13f      	bne.n	800423c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c0:	e03c      	b.n	800423c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ca:	d121      	bne.n	8004210 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d836      	bhi.n	8004240 <DMA_CheckFifoParam+0xd8>
 80041d2:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <DMA_CheckFifoParam+0x70>)
 80041d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d8:	080041e9 	.word	0x080041e9
 80041dc:	080041ef 	.word	0x080041ef
 80041e0:	080041e9 	.word	0x080041e9
 80041e4:	08004201 	.word	0x08004201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      break;
 80041ec:	e02f      	b.n	800424e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d024      	beq.n	8004244 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fe:	e021      	b.n	8004244 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004208:	d11e      	bne.n	8004248 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800420e:	e01b      	b.n	8004248 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d902      	bls.n	800421c <DMA_CheckFifoParam+0xb4>
 8004216:	2b03      	cmp	r3, #3
 8004218:	d003      	beq.n	8004222 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800421a:	e018      	b.n	800424e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      break;
 8004220:	e015      	b.n	800424e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00e      	beq.n	800424c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
      break;
 8004232:	e00b      	b.n	800424c <DMA_CheckFifoParam+0xe4>
      break;
 8004234:	bf00      	nop
 8004236:	e00a      	b.n	800424e <DMA_CheckFifoParam+0xe6>
      break;
 8004238:	bf00      	nop
 800423a:	e008      	b.n	800424e <DMA_CheckFifoParam+0xe6>
      break;
 800423c:	bf00      	nop
 800423e:	e006      	b.n	800424e <DMA_CheckFifoParam+0xe6>
      break;
 8004240:	bf00      	nop
 8004242:	e004      	b.n	800424e <DMA_CheckFifoParam+0xe6>
      break;
 8004244:	bf00      	nop
 8004246:	e002      	b.n	800424e <DMA_CheckFifoParam+0xe6>
      break;   
 8004248:	bf00      	nop
 800424a:	e000      	b.n	800424e <DMA_CheckFifoParam+0xe6>
      break;
 800424c:	bf00      	nop
    }
  } 
  
  return status; 
 800424e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800425c:	b480      	push	{r7}
 800425e:	b089      	sub	sp, #36	; 0x24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e16b      	b.n	8004550 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004278:	2201      	movs	r2, #1
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4013      	ands	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	429a      	cmp	r2, r3
 8004292:	f040 815a 	bne.w	800454a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d00b      	beq.n	80042b6 <HAL_GPIO_Init+0x5a>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d007      	beq.n	80042b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042aa:	2b11      	cmp	r3, #17
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b12      	cmp	r3, #18
 80042b4:	d130      	bne.n	8004318 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042ec:	2201      	movs	r2, #1
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 0201 	and.w	r2, r3, #1
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	2203      	movs	r2, #3
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4013      	ands	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0xfc>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b12      	cmp	r3, #18
 8004356:	d123      	bne.n	80043a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	08da      	lsrs	r2, r3, #3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3208      	adds	r2, #8
 8004360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	220f      	movs	r2, #15
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	08da      	lsrs	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3208      	adds	r2, #8
 800439a:	69b9      	ldr	r1, [r7, #24]
 800439c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	2203      	movs	r2, #3
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 0203 	and.w	r2, r3, #3
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80b4 	beq.w	800454a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	4b5f      	ldr	r3, [pc, #380]	; (8004564 <HAL_GPIO_Init+0x308>)
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	4a5e      	ldr	r2, [pc, #376]	; (8004564 <HAL_GPIO_Init+0x308>)
 80043ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043f0:	6453      	str	r3, [r2, #68]	; 0x44
 80043f2:	4b5c      	ldr	r3, [pc, #368]	; (8004564 <HAL_GPIO_Init+0x308>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043fe:	4a5a      	ldr	r2, [pc, #360]	; (8004568 <HAL_GPIO_Init+0x30c>)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	3302      	adds	r3, #2
 8004406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	220f      	movs	r2, #15
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a51      	ldr	r2, [pc, #324]	; (800456c <HAL_GPIO_Init+0x310>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d02b      	beq.n	8004482 <HAL_GPIO_Init+0x226>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a50      	ldr	r2, [pc, #320]	; (8004570 <HAL_GPIO_Init+0x314>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d025      	beq.n	800447e <HAL_GPIO_Init+0x222>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a4f      	ldr	r2, [pc, #316]	; (8004574 <HAL_GPIO_Init+0x318>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01f      	beq.n	800447a <HAL_GPIO_Init+0x21e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4e      	ldr	r2, [pc, #312]	; (8004578 <HAL_GPIO_Init+0x31c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d019      	beq.n	8004476 <HAL_GPIO_Init+0x21a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a4d      	ldr	r2, [pc, #308]	; (800457c <HAL_GPIO_Init+0x320>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d013      	beq.n	8004472 <HAL_GPIO_Init+0x216>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a4c      	ldr	r2, [pc, #304]	; (8004580 <HAL_GPIO_Init+0x324>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00d      	beq.n	800446e <HAL_GPIO_Init+0x212>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a4b      	ldr	r2, [pc, #300]	; (8004584 <HAL_GPIO_Init+0x328>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <HAL_GPIO_Init+0x20e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a4a      	ldr	r2, [pc, #296]	; (8004588 <HAL_GPIO_Init+0x32c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <HAL_GPIO_Init+0x20a>
 8004462:	2307      	movs	r3, #7
 8004464:	e00e      	b.n	8004484 <HAL_GPIO_Init+0x228>
 8004466:	2308      	movs	r3, #8
 8004468:	e00c      	b.n	8004484 <HAL_GPIO_Init+0x228>
 800446a:	2306      	movs	r3, #6
 800446c:	e00a      	b.n	8004484 <HAL_GPIO_Init+0x228>
 800446e:	2305      	movs	r3, #5
 8004470:	e008      	b.n	8004484 <HAL_GPIO_Init+0x228>
 8004472:	2304      	movs	r3, #4
 8004474:	e006      	b.n	8004484 <HAL_GPIO_Init+0x228>
 8004476:	2303      	movs	r3, #3
 8004478:	e004      	b.n	8004484 <HAL_GPIO_Init+0x228>
 800447a:	2302      	movs	r3, #2
 800447c:	e002      	b.n	8004484 <HAL_GPIO_Init+0x228>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <HAL_GPIO_Init+0x228>
 8004482:	2300      	movs	r3, #0
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	f002 0203 	and.w	r2, r2, #3
 800448a:	0092      	lsls	r2, r2, #2
 800448c:	4093      	lsls	r3, r2
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4313      	orrs	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004494:	4934      	ldr	r1, [pc, #208]	; (8004568 <HAL_GPIO_Init+0x30c>)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	3302      	adds	r3, #2
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044a2:	4b3a      	ldr	r3, [pc, #232]	; (800458c <HAL_GPIO_Init+0x330>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044c6:	4a31      	ldr	r2, [pc, #196]	; (800458c <HAL_GPIO_Init+0x330>)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044cc:	4b2f      	ldr	r3, [pc, #188]	; (800458c <HAL_GPIO_Init+0x330>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044f0:	4a26      	ldr	r2, [pc, #152]	; (800458c <HAL_GPIO_Init+0x330>)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044f6:	4b25      	ldr	r3, [pc, #148]	; (800458c <HAL_GPIO_Init+0x330>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800451a:	4a1c      	ldr	r2, [pc, #112]	; (800458c <HAL_GPIO_Init+0x330>)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004520:	4b1a      	ldr	r3, [pc, #104]	; (800458c <HAL_GPIO_Init+0x330>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004544:	4a11      	ldr	r2, [pc, #68]	; (800458c <HAL_GPIO_Init+0x330>)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3301      	adds	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	f67f ae90 	bls.w	8004278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004558:	bf00      	nop
 800455a:	3724      	adds	r7, #36	; 0x24
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	40023800 	.word	0x40023800
 8004568:	40013800 	.word	0x40013800
 800456c:	40020000 	.word	0x40020000
 8004570:	40020400 	.word	0x40020400
 8004574:	40020800 	.word	0x40020800
 8004578:	40020c00 	.word	0x40020c00
 800457c:	40021000 	.word	0x40021000
 8004580:	40021400 	.word	0x40021400
 8004584:	40021800 	.word	0x40021800
 8004588:	40021c00 	.word	0x40021c00
 800458c:	40013c00 	.word	0x40013c00

08004590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	887b      	ldrh	r3, [r7, #2]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
 80045ac:	e001      	b.n	80045b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	807b      	strh	r3, [r7, #2]
 80045cc:	4613      	mov	r3, r2
 80045ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045d0:	787b      	ldrb	r3, [r7, #1]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045dc:	e003      	b.n	80045e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045de:	887b      	ldrh	r3, [r7, #2]
 80045e0:	041a      	lsls	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	619a      	str	r2, [r3, #24]
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e11f      	b.n	8004846 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fe f902 	bl	8002824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004646:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004656:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004658:	f000 fd3c 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 800465c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4a7b      	ldr	r2, [pc, #492]	; (8004850 <HAL_I2C_Init+0x25c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d807      	bhi.n	8004678 <HAL_I2C_Init+0x84>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a7a      	ldr	r2, [pc, #488]	; (8004854 <HAL_I2C_Init+0x260>)
 800466c:	4293      	cmp	r3, r2
 800466e:	bf94      	ite	ls
 8004670:	2301      	movls	r3, #1
 8004672:	2300      	movhi	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e006      	b.n	8004686 <HAL_I2C_Init+0x92>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4a77      	ldr	r2, [pc, #476]	; (8004858 <HAL_I2C_Init+0x264>)
 800467c:	4293      	cmp	r3, r2
 800467e:	bf94      	ite	ls
 8004680:	2301      	movls	r3, #1
 8004682:	2300      	movhi	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0db      	b.n	8004846 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a72      	ldr	r2, [pc, #456]	; (800485c <HAL_I2C_Init+0x268>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	0c9b      	lsrs	r3, r3, #18
 8004698:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4a64      	ldr	r2, [pc, #400]	; (8004850 <HAL_I2C_Init+0x25c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d802      	bhi.n	80046c8 <HAL_I2C_Init+0xd4>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	3301      	adds	r3, #1
 80046c6:	e009      	b.n	80046dc <HAL_I2C_Init+0xe8>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	4a63      	ldr	r2, [pc, #396]	; (8004860 <HAL_I2C_Init+0x26c>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	099b      	lsrs	r3, r3, #6
 80046da:	3301      	adds	r3, #1
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4956      	ldr	r1, [pc, #344]	; (8004850 <HAL_I2C_Init+0x25c>)
 80046f8:	428b      	cmp	r3, r1
 80046fa:	d80d      	bhi.n	8004718 <HAL_I2C_Init+0x124>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1e59      	subs	r1, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	fbb1 f3f3 	udiv	r3, r1, r3
 800470a:	3301      	adds	r3, #1
 800470c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004710:	2b04      	cmp	r3, #4
 8004712:	bf38      	it	cc
 8004714:	2304      	movcc	r3, #4
 8004716:	e04f      	b.n	80047b8 <HAL_I2C_Init+0x1c4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d111      	bne.n	8004744 <HAL_I2C_Init+0x150>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1e58      	subs	r0, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	440b      	add	r3, r1
 800472e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004732:	3301      	adds	r3, #1
 8004734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e012      	b.n	800476a <HAL_I2C_Init+0x176>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e58      	subs	r0, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	0099      	lsls	r1, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	fbb0 f3f3 	udiv	r3, r0, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_I2C_Init+0x17e>
 800476e:	2301      	movs	r3, #1
 8004770:	e022      	b.n	80047b8 <HAL_I2C_Init+0x1c4>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10e      	bne.n	8004798 <HAL_I2C_Init+0x1a4>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1e58      	subs	r0, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	440b      	add	r3, r1
 8004788:	fbb0 f3f3 	udiv	r3, r0, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004796:	e00f      	b.n	80047b8 <HAL_I2C_Init+0x1c4>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1e58      	subs	r0, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	0099      	lsls	r1, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ae:	3301      	adds	r3, #1
 80047b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	6809      	ldr	r1, [r1, #0]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6911      	ldr	r1, [r2, #16]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68d2      	ldr	r2, [r2, #12]
 80047f2:	4311      	orrs	r1, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	000186a0 	.word	0x000186a0
 8004854:	001e847f 	.word	0x001e847f
 8004858:	003d08ff 	.word	0x003d08ff
 800485c:	431bde83 	.word	0x431bde83
 8004860:	10624dd3 	.word	0x10624dd3

08004864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e25b      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d075      	beq.n	800496e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004882:	4ba3      	ldr	r3, [pc, #652]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b04      	cmp	r3, #4
 800488c:	d00c      	beq.n	80048a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800488e:	4ba0      	ldr	r3, [pc, #640]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004896:	2b08      	cmp	r3, #8
 8004898:	d112      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800489a:	4b9d      	ldr	r3, [pc, #628]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a6:	d10b      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	4b99      	ldr	r3, [pc, #612]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d05b      	beq.n	800496c <HAL_RCC_OscConfig+0x108>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d157      	bne.n	800496c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e236      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_OscConfig+0x74>
 80048ca:	4b91      	ldr	r3, [pc, #580]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a90      	ldr	r2, [pc, #576]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e01d      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x98>
 80048e2:	4b8b      	ldr	r3, [pc, #556]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a8a      	ldr	r2, [pc, #552]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b88      	ldr	r3, [pc, #544]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a87      	ldr	r2, [pc, #540]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048fc:	4b84      	ldr	r3, [pc, #528]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a83      	ldr	r2, [pc, #524]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4b81      	ldr	r3, [pc, #516]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a80      	ldr	r2, [pc, #512]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 800490e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d013      	beq.n	8004944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fe fb4c 	bl	8002fb8 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004924:	f7fe fb48 	bl	8002fb8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	; 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1fb      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b76      	ldr	r3, [pc, #472]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0xc0>
 8004942:	e014      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fe fb38 	bl	8002fb8 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494c:	f7fe fb34 	bl	8002fb8 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e1e7      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495e:	4b6c      	ldr	r3, [pc, #432]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0xe8>
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d063      	beq.n	8004a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497a:	4b65      	ldr	r3, [pc, #404]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004986:	4b62      	ldr	r3, [pc, #392]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800498e:	2b08      	cmp	r3, #8
 8004990:	d11c      	bne.n	80049cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004992:	4b5f      	ldr	r3, [pc, #380]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	4b5c      	ldr	r3, [pc, #368]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_RCC_OscConfig+0x152>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e1bb      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b6:	4b56      	ldr	r3, [pc, #344]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4952      	ldr	r1, [pc, #328]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ca:	e03a      	b.n	8004a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d4:	4b4f      	ldr	r3, [pc, #316]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049da:	f7fe faed 	bl	8002fb8 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e2:	f7fe fae9 	bl	8002fb8 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e19c      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	4b46      	ldr	r3, [pc, #280]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a00:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4940      	ldr	r1, [pc, #256]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
 8004a14:	e015      	b.n	8004a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a16:	4b3f      	ldr	r3, [pc, #252]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fe facc 	bl	8002fb8 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a24:	f7fe fac8 	bl	8002fb8 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e17b      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d030      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d016      	beq.n	8004a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a56:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <HAL_RCC_OscConfig+0x2b4>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fe faac 	bl	8002fb8 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fe faa8 	bl	8002fb8 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e15b      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a76:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x200>
 8004a82:	e015      	b.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a84:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <HAL_RCC_OscConfig+0x2b4>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8a:	f7fe fa95 	bl	8002fb8 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fe fa91 	bl	8002fb8 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e144      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa4:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80a0 	beq.w	8004bfe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac2:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10f      	bne.n	8004aee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	4a0e      	ldr	r2, [pc, #56]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004adc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	60bb      	str	r3, [r7, #8]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_OscConfig+0x2b8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d121      	bne.n	8004b3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <HAL_RCC_OscConfig+0x2b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <HAL_RCC_OscConfig+0x2b8>)
 8004b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b06:	f7fe fa57 	bl	8002fb8 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0c:	e011      	b.n	8004b32 <HAL_RCC_OscConfig+0x2ce>
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
 8004b14:	42470000 	.word	0x42470000
 8004b18:	42470e80 	.word	0x42470e80
 8004b1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b20:	f7fe fa4a 	bl	8002fb8 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e0fd      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b32:	4b81      	ldr	r3, [pc, #516]	; (8004d38 <HAL_RCC_OscConfig+0x4d4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d106      	bne.n	8004b54 <HAL_RCC_OscConfig+0x2f0>
 8004b46:	4b7d      	ldr	r3, [pc, #500]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	4a7c      	ldr	r2, [pc, #496]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70
 8004b52:	e01c      	b.n	8004b8e <HAL_RCC_OscConfig+0x32a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b05      	cmp	r3, #5
 8004b5a:	d10c      	bne.n	8004b76 <HAL_RCC_OscConfig+0x312>
 8004b5c:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	4a76      	ldr	r2, [pc, #472]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004b62:	f043 0304 	orr.w	r3, r3, #4
 8004b66:	6713      	str	r3, [r2, #112]	; 0x70
 8004b68:	4b74      	ldr	r3, [pc, #464]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	4a73      	ldr	r2, [pc, #460]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	6713      	str	r3, [r2, #112]	; 0x70
 8004b74:	e00b      	b.n	8004b8e <HAL_RCC_OscConfig+0x32a>
 8004b76:	4b71      	ldr	r3, [pc, #452]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	4a70      	ldr	r2, [pc, #448]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	6713      	str	r3, [r2, #112]	; 0x70
 8004b82:	4b6e      	ldr	r3, [pc, #440]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	4a6d      	ldr	r2, [pc, #436]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004b88:	f023 0304 	bic.w	r3, r3, #4
 8004b8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d015      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b96:	f7fe fa0f 	bl	8002fb8 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9c:	e00a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9e:	f7fe fa0b 	bl	8002fb8 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e0bc      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb4:	4b61      	ldr	r3, [pc, #388]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0ee      	beq.n	8004b9e <HAL_RCC_OscConfig+0x33a>
 8004bc0:	e014      	b.n	8004bec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc2:	f7fe f9f9 	bl	8002fb8 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fe f9f5 	bl	8002fb8 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0a6      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be0:	4b56      	ldr	r3, [pc, #344]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1ee      	bne.n	8004bca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d105      	bne.n	8004bfe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf2:	4b52      	ldr	r3, [pc, #328]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	4a51      	ldr	r2, [pc, #324]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8092 	beq.w	8004d2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c08:	4b4c      	ldr	r3, [pc, #304]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 030c 	and.w	r3, r3, #12
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d05c      	beq.n	8004cce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d141      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1c:	4b48      	ldr	r3, [pc, #288]	; (8004d40 <HAL_RCC_OscConfig+0x4dc>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fe f9c9 	bl	8002fb8 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2a:	f7fe f9c5 	bl	8002fb8 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e078      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3c:	4b3f      	ldr	r3, [pc, #252]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	019b      	lsls	r3, r3, #6
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	4933      	ldr	r1, [pc, #204]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c72:	4b33      	ldr	r3, [pc, #204]	; (8004d40 <HAL_RCC_OscConfig+0x4dc>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fe f99e 	bl	8002fb8 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fe f99a 	bl	8002fb8 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e04d      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c92:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x41c>
 8004c9e:	e045      	b.n	8004d2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <HAL_RCC_OscConfig+0x4dc>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fe f987 	bl	8002fb8 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fe f983 	bl	8002fb8 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e036      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc0:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <HAL_RCC_OscConfig+0x44a>
 8004ccc:	e02e      	b.n	8004d2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e029      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cda:	4b18      	ldr	r3, [pc, #96]	; (8004d3c <HAL_RCC_OscConfig+0x4d8>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d11c      	bne.n	8004d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d115      	bne.n	8004d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d02:	4013      	ands	r3, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d106      	bne.n	8004d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40007000 	.word	0x40007000
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	42470060 	.word	0x42470060

08004d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0cc      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d58:	4b68      	ldr	r3, [pc, #416]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d90c      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d66:	4b65      	ldr	r3, [pc, #404]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b63      	ldr	r3, [pc, #396]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0b8      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d020      	beq.n	8004dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d98:	4b59      	ldr	r3, [pc, #356]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4a58      	ldr	r2, [pc, #352]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004db0:	4b53      	ldr	r3, [pc, #332]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4a52      	ldr	r2, [pc, #328]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dbc:	4b50      	ldr	r3, [pc, #320]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	494d      	ldr	r1, [pc, #308]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d044      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d107      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	4b47      	ldr	r3, [pc, #284]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d119      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e07f      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d003      	beq.n	8004e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d107      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e02:	4b3f      	ldr	r3, [pc, #252]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e06f      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e12:	4b3b      	ldr	r3, [pc, #236]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e067      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e22:	4b37      	ldr	r3, [pc, #220]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f023 0203 	bic.w	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	4934      	ldr	r1, [pc, #208]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e34:	f7fe f8c0 	bl	8002fb8 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3c:	f7fe f8bc 	bl	8002fb8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e04f      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e52:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 020c 	and.w	r2, r3, #12
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d1eb      	bne.n	8004e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e64:	4b25      	ldr	r3, [pc, #148]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d20c      	bcs.n	8004e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b22      	ldr	r3, [pc, #136]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7a:	4b20      	ldr	r3, [pc, #128]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e032      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e98:	4b19      	ldr	r3, [pc, #100]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4916      	ldr	r1, [pc, #88]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	490e      	ldr	r1, [pc, #56]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eca:	f000 f821 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 8004ece:	4601      	mov	r1, r0
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <HAL_RCC_ClockConfig+0x1c0>)
 8004edc:	5cd3      	ldrb	r3, [r2, r3]
 8004ede:	fa21 f303 	lsr.w	r3, r1, r3
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe f820 	bl	8002f30 <HAL_InitTick>

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40023c00 	.word	0x40023c00
 8004f00:	40023800 	.word	0x40023800
 8004f04:	0800799c 	.word	0x0800799c
 8004f08:	20000000 	.word	0x20000000
 8004f0c:	20000004 	.word	0x20000004

08004f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f26:	4b63      	ldr	r3, [pc, #396]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d007      	beq.n	8004f42 <HAL_RCC_GetSysClockFreq+0x32>
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d008      	beq.n	8004f48 <HAL_RCC_GetSysClockFreq+0x38>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f040 80b4 	bne.w	80050a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f3c:	4b5e      	ldr	r3, [pc, #376]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f3e:	60bb      	str	r3, [r7, #8]
       break;
 8004f40:	e0b3      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f42:	4b5d      	ldr	r3, [pc, #372]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f44:	60bb      	str	r3, [r7, #8]
      break;
 8004f46:	e0b0      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f48:	4b5a      	ldr	r3, [pc, #360]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f52:	4b58      	ldr	r3, [pc, #352]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d04a      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f5e:	4b55      	ldr	r3, [pc, #340]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	099b      	lsrs	r3, r3, #6
 8004f64:	f04f 0400 	mov.w	r4, #0
 8004f68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	ea03 0501 	and.w	r5, r3, r1
 8004f74:	ea04 0602 	and.w	r6, r4, r2
 8004f78:	4629      	mov	r1, r5
 8004f7a:	4632      	mov	r2, r6
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	f04f 0400 	mov.w	r4, #0
 8004f84:	0154      	lsls	r4, r2, #5
 8004f86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f8a:	014b      	lsls	r3, r1, #5
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4622      	mov	r2, r4
 8004f90:	1b49      	subs	r1, r1, r5
 8004f92:	eb62 0206 	sbc.w	r2, r2, r6
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	f04f 0400 	mov.w	r4, #0
 8004f9e:	0194      	lsls	r4, r2, #6
 8004fa0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fa4:	018b      	lsls	r3, r1, #6
 8004fa6:	1a5b      	subs	r3, r3, r1
 8004fa8:	eb64 0402 	sbc.w	r4, r4, r2
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	00e2      	lsls	r2, r4, #3
 8004fb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fba:	00d9      	lsls	r1, r3, #3
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4614      	mov	r4, r2
 8004fc0:	195b      	adds	r3, r3, r5
 8004fc2:	eb44 0406 	adc.w	r4, r4, r6
 8004fc6:	f04f 0100 	mov.w	r1, #0
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	02a2      	lsls	r2, r4, #10
 8004fd0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004fd4:	0299      	lsls	r1, r3, #10
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4614      	mov	r4, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	4621      	mov	r1, r4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	f7fb fde0 	bl	8000bac <__aeabi_uldivmod>
 8004fec:	4603      	mov	r3, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	e049      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff4:	4b2f      	ldr	r3, [pc, #188]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	099b      	lsrs	r3, r3, #6
 8004ffa:	f04f 0400 	mov.w	r4, #0
 8004ffe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	ea03 0501 	and.w	r5, r3, r1
 800500a:	ea04 0602 	and.w	r6, r4, r2
 800500e:	4629      	mov	r1, r5
 8005010:	4632      	mov	r2, r6
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	f04f 0400 	mov.w	r4, #0
 800501a:	0154      	lsls	r4, r2, #5
 800501c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005020:	014b      	lsls	r3, r1, #5
 8005022:	4619      	mov	r1, r3
 8005024:	4622      	mov	r2, r4
 8005026:	1b49      	subs	r1, r1, r5
 8005028:	eb62 0206 	sbc.w	r2, r2, r6
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	f04f 0400 	mov.w	r4, #0
 8005034:	0194      	lsls	r4, r2, #6
 8005036:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800503a:	018b      	lsls	r3, r1, #6
 800503c:	1a5b      	subs	r3, r3, r1
 800503e:	eb64 0402 	sbc.w	r4, r4, r2
 8005042:	f04f 0100 	mov.w	r1, #0
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	00e2      	lsls	r2, r4, #3
 800504c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005050:	00d9      	lsls	r1, r3, #3
 8005052:	460b      	mov	r3, r1
 8005054:	4614      	mov	r4, r2
 8005056:	195b      	adds	r3, r3, r5
 8005058:	eb44 0406 	adc.w	r4, r4, r6
 800505c:	f04f 0100 	mov.w	r1, #0
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	02a2      	lsls	r2, r4, #10
 8005066:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800506a:	0299      	lsls	r1, r3, #10
 800506c:	460b      	mov	r3, r1
 800506e:	4614      	mov	r4, r2
 8005070:	4618      	mov	r0, r3
 8005072:	4621      	mov	r1, r4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f04f 0400 	mov.w	r4, #0
 800507a:	461a      	mov	r2, r3
 800507c:	4623      	mov	r3, r4
 800507e:	f7fb fd95 	bl	8000bac <__aeabi_uldivmod>
 8005082:	4603      	mov	r3, r0
 8005084:	460c      	mov	r4, r1
 8005086:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005088:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	3301      	adds	r3, #1
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	60bb      	str	r3, [r7, #8]
      break;
 80050a2:	e002      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050a6:	60bb      	str	r3, [r7, #8]
      break;
 80050a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050aa:	68bb      	ldr	r3, [r7, #8]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b4:	40023800 	.word	0x40023800
 80050b8:	00f42400 	.word	0x00f42400

080050bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c0:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	20000000 	.word	0x20000000

080050d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050d8:	f7ff fff0 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 80050dc:	4601      	mov	r1, r0
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	0a9b      	lsrs	r3, r3, #10
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4a03      	ldr	r2, [pc, #12]	; (80050f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ea:	5cd3      	ldrb	r3, [r2, r3]
 80050ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40023800 	.word	0x40023800
 80050f8:	080079ac 	.word	0x080079ac

080050fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005100:	f7ff ffdc 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8005104:	4601      	mov	r1, r0
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	0b5b      	lsrs	r3, r3, #13
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	4a03      	ldr	r2, [pc, #12]	; (8005120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005112:	5cd3      	ldrb	r3, [r2, r3]
 8005114:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005118:	4618      	mov	r0, r3
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40023800 	.word	0x40023800
 8005120:	080079ac 	.word	0x080079ac

08005124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e056      	b.n	80051e4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7fd fbaf 	bl	80028b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	ea42 0103 	orr.w	r1, r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	f003 0104 	and.w	r1, r3, #4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e01d      	b.n	800523a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fd fc46 	bl	8002aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3304      	adds	r3, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f000 fc20 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0201 	orr.w	r2, r2, #1
 8005258:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b06      	cmp	r3, #6
 800526a:	d007      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80052ac:	4013      	ands	r3, r2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10f      	bne.n	80052d2 <HAL_TIM_Base_Stop_IT+0x48>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	f240 4344 	movw	r3, #1092	; 0x444
 80052bc:	4013      	ands	r3, r2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d107      	bne.n	80052d2 <HAL_TIM_Base_Stop_IT+0x48>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e01d      	b.n	800532e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fd fbaa 	bl	8002a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3304      	adds	r3, #4
 800531c:	4619      	mov	r1, r3
 800531e:	4610      	mov	r0, r2
 8005320:	f000 fba6 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2201      	movs	r2, #1
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fde0 	bl	8005f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <HAL_TIM_PWM_Start+0x74>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_TIM_PWM_Start+0x2c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <HAL_TIM_PWM_Start+0x78>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d101      	bne.n	8005368 <HAL_TIM_PWM_Start+0x30>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_TIM_PWM_Start+0x32>
 8005368:	2300      	movs	r3, #0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800537c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b06      	cmp	r3, #6
 800538e:	d007      	beq.n	80053a0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40010400 	.word	0x40010400

080053b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fda2 	bl	8005f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a22      	ldr	r2, [pc, #136]	; (800545c <HAL_TIM_PWM_Stop+0xa8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_TIM_PWM_Stop+0x2c>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a21      	ldr	r2, [pc, #132]	; (8005460 <HAL_TIM_PWM_Stop+0xac>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d101      	bne.n	80053e4 <HAL_TIM_PWM_Stop+0x30>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e000      	b.n	80053e6 <HAL_TIM_PWM_Stop+0x32>
 80053e4:	2300      	movs	r3, #0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d017      	beq.n	800541a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80053f4:	4013      	ands	r3, r2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <HAL_TIM_PWM_Stop+0x66>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	f240 4344 	movw	r3, #1092	; 0x444
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d107      	bne.n	800541a <HAL_TIM_PWM_Stop+0x66>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005418:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a1a      	ldr	r2, [r3, #32]
 8005420:	f241 1311 	movw	r3, #4369	; 0x1111
 8005424:	4013      	ands	r3, r2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10f      	bne.n	800544a <HAL_TIM_PWM_Stop+0x96>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6a1a      	ldr	r2, [r3, #32]
 8005430:	f240 4344 	movw	r3, #1092	; 0x444
 8005434:	4013      	ands	r3, r2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d107      	bne.n	800544a <HAL_TIM_PWM_Stop+0x96>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40010000 	.word	0x40010000
 8005460:	40010400 	.word	0x40010400

08005464 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e083      	b.n	8005580 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fd fa59 	bl	8002944 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a8:	f023 0307 	bic.w	r3, r3, #7
 80054ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f000 fad9 	bl	8005a70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	4313      	orrs	r3, r2
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005504:	f023 030c 	bic.w	r3, r3, #12
 8005508:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005510:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	4313      	orrs	r3, r2
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	011a      	lsls	r2, r3, #4
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	031b      	lsls	r3, r3, #12
 8005534:	4313      	orrs	r3, r2
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800554a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	4313      	orrs	r3, r2
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_TIM_Encoder_Start+0x16>
 8005598:	2b04      	cmp	r3, #4
 800559a:	d008      	beq.n	80055ae <HAL_TIM_Encoder_Start+0x26>
 800559c:	e00f      	b.n	80055be <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2201      	movs	r2, #1
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fcb2 	bl	8005f10 <TIM_CCxChannelCmd>
      break;
 80055ac:	e016      	b.n	80055dc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2201      	movs	r2, #1
 80055b4:	2104      	movs	r1, #4
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fcaa 	bl	8005f10 <TIM_CCxChannelCmd>
      break;
 80055bc:	e00e      	b.n	80055dc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2201      	movs	r2, #1
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fca2 	bl	8005f10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2201      	movs	r2, #1
 80055d2:	2104      	movs	r1, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fc9b 	bl	8005f10 <TIM_CCxChannelCmd>
      break;
 80055da:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_TIM_Encoder_Stop+0x16>
 8005606:	2b04      	cmp	r3, #4
 8005608:	d008      	beq.n	800561c <HAL_TIM_Encoder_Stop+0x26>
 800560a:	e00f      	b.n	800562c <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2200      	movs	r2, #0
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fc7b 	bl	8005f10 <TIM_CCxChannelCmd>
      break;
 800561a:	e016      	b.n	800564a <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2200      	movs	r2, #0
 8005622:	2104      	movs	r1, #4
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fc73 	bl	8005f10 <TIM_CCxChannelCmd>
      break;
 800562a:	e00e      	b.n	800564a <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2200      	movs	r2, #0
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fc6b 	bl	8005f10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2200      	movs	r2, #0
 8005640:	2104      	movs	r1, #4
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fc64 	bl	8005f10 <TIM_CCxChannelCmd>
      break;
 8005648:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	f241 1311 	movw	r3, #4369	; 0x1111
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10f      	bne.n	800567a <HAL_TIM_Encoder_Stop+0x84>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a1a      	ldr	r2, [r3, #32]
 8005660:	f240 4344 	movw	r3, #1092	; 0x444
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d107      	bne.n	800567a <HAL_TIM_Encoder_Stop+0x84>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0201 	bic.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b02      	cmp	r3, #2
 8005698:	d122      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d11b      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0202 	mvn.w	r2, #2
 80056b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9b4 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9a6 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f9b7 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d122      	bne.n	8005734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d11b      	bne.n	8005734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0204 	mvn.w	r2, #4
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f98a 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f97c 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f98d 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b08      	cmp	r3, #8
 8005740:	d122      	bne.n	8005788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b08      	cmp	r3, #8
 800574e:	d11b      	bne.n	8005788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0208 	mvn.w	r2, #8
 8005758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2204      	movs	r2, #4
 800575e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f960 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 8005774:	e005      	b.n	8005782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f952 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f963 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b10      	cmp	r3, #16
 8005794:	d122      	bne.n	80057dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d11b      	bne.n	80057dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0210 	mvn.w	r2, #16
 80057ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2208      	movs	r2, #8
 80057b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f936 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80057c8:	e005      	b.n	80057d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f928 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f939 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d10e      	bne.n	8005808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d107      	bne.n	8005808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0201 	mvn.w	r2, #1
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fb fb54 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005812:	2b80      	cmp	r3, #128	; 0x80
 8005814:	d10e      	bne.n	8005834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005820:	2b80      	cmp	r3, #128	; 0x80
 8005822:	d107      	bne.n	8005834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fc1a 	bl	8006068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d10e      	bne.n	8005860 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d107      	bne.n	8005860 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8fe 	bl	8005a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b20      	cmp	r3, #32
 800586c:	d10e      	bne.n	800588c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b20      	cmp	r3, #32
 800587a:	d107      	bne.n	800588c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0220 	mvn.w	r2, #32
 8005884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fbe4 	bl	8006054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e0b4      	b.n	8005a18 <HAL_TIM_PWM_ConfigChannel+0x184>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b0c      	cmp	r3, #12
 80058c2:	f200 809f 	bhi.w	8005a04 <HAL_TIM_PWM_ConfigChannel+0x170>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	08005901 	.word	0x08005901
 80058d0:	08005a05 	.word	0x08005a05
 80058d4:	08005a05 	.word	0x08005a05
 80058d8:	08005a05 	.word	0x08005a05
 80058dc:	08005941 	.word	0x08005941
 80058e0:	08005a05 	.word	0x08005a05
 80058e4:	08005a05 	.word	0x08005a05
 80058e8:	08005a05 	.word	0x08005a05
 80058ec:	08005983 	.word	0x08005983
 80058f0:	08005a05 	.word	0x08005a05
 80058f4:	08005a05 	.word	0x08005a05
 80058f8:	08005a05 	.word	0x08005a05
 80058fc:	080059c3 	.word	0x080059c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f952 	bl	8005bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0208 	orr.w	r2, r2, #8
 800591a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0204 	bic.w	r2, r2, #4
 800592a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6999      	ldr	r1, [r3, #24]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	619a      	str	r2, [r3, #24]
      break;
 800593e:	e062      	b.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f9a2 	bl	8005c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800595a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6999      	ldr	r1, [r3, #24]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	021a      	lsls	r2, r3, #8
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	619a      	str	r2, [r3, #24]
      break;
 8005980:	e041      	b.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f9f7 	bl	8005d7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0208 	orr.w	r2, r2, #8
 800599c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0204 	bic.w	r2, r2, #4
 80059ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69d9      	ldr	r1, [r3, #28]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	61da      	str	r2, [r3, #28]
      break;
 80059c0:	e021      	b.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fa4b 	bl	8005e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69d9      	ldr	r1, [r3, #28]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	021a      	lsls	r2, r3, #8
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	61da      	str	r2, [r3, #28]
      break;
 8005a02:	e000      	b.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005a04:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a40      	ldr	r2, [pc, #256]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d00f      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3d      	ldr	r2, [pc, #244]	; (8005b88 <TIM_Base_SetConfig+0x118>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3c      	ldr	r2, [pc, #240]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3b      	ldr	r2, [pc, #236]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3a      	ldr	r2, [pc, #232]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d108      	bne.n	8005ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2f      	ldr	r2, [pc, #188]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d02b      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d027      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2c      	ldr	r2, [pc, #176]	; (8005b88 <TIM_Base_SetConfig+0x118>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d023      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2b      	ldr	r2, [pc, #172]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01f      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01b      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a29      	ldr	r2, [pc, #164]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d017      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <TIM_Base_SetConfig+0x128>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00f      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00b      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a25      	ldr	r2, [pc, #148]	; (8005ba4 <TIM_Base_SetConfig+0x134>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a24      	ldr	r2, [pc, #144]	; (8005ba8 <TIM_Base_SetConfig+0x138>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a23      	ldr	r2, [pc, #140]	; (8005bac <TIM_Base_SetConfig+0x13c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d108      	bne.n	8005b34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a0a      	ldr	r2, [pc, #40]	; (8005b84 <TIM_Base_SetConfig+0x114>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_Base_SetConfig+0xf8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a0c      	ldr	r2, [pc, #48]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d103      	bne.n	8005b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	615a      	str	r2, [r3, #20]
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40010400 	.word	0x40010400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800
 8005ba4:	40001800 	.word	0x40001800
 8005ba8:	40001c00 	.word	0x40001c00
 8005bac:	40002000 	.word	0x40002000

08005bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0201 	bic.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0303 	bic.w	r3, r3, #3
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 0302 	bic.w	r3, r3, #2
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a20      	ldr	r2, [pc, #128]	; (8005c88 <TIM_OC1_SetConfig+0xd8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <TIM_OC1_SetConfig+0x64>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a1f      	ldr	r2, [pc, #124]	; (8005c8c <TIM_OC1_SetConfig+0xdc>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d10c      	bne.n	8005c2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 0308 	bic.w	r3, r3, #8
 8005c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 0304 	bic.w	r3, r3, #4
 8005c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <TIM_OC1_SetConfig+0xd8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC1_SetConfig+0x8e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a14      	ldr	r2, [pc, #80]	; (8005c8c <TIM_OC1_SetConfig+0xdc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d111      	bne.n	8005c62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	621a      	str	r2, [r3, #32]
}
 8005c7c:	bf00      	nop
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40010400 	.word	0x40010400

08005c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0210 	bic.w	r2, r3, #16
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0320 	bic.w	r3, r3, #32
 8005cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a22      	ldr	r2, [pc, #136]	; (8005d74 <TIM_OC2_SetConfig+0xe4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC2_SetConfig+0x68>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <TIM_OC2_SetConfig+0xe8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d10d      	bne.n	8005d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a17      	ldr	r2, [pc, #92]	; (8005d74 <TIM_OC2_SetConfig+0xe4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC2_SetConfig+0x94>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a16      	ldr	r2, [pc, #88]	; (8005d78 <TIM_OC2_SetConfig+0xe8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d113      	bne.n	8005d4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40010400 	.word	0x40010400

08005d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a21      	ldr	r2, [pc, #132]	; (8005e5c <TIM_OC3_SetConfig+0xe0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC3_SetConfig+0x66>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a20      	ldr	r2, [pc, #128]	; (8005e60 <TIM_OC3_SetConfig+0xe4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d10d      	bne.n	8005dfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <TIM_OC3_SetConfig+0xe0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d003      	beq.n	8005e0e <TIM_OC3_SetConfig+0x92>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <TIM_OC3_SetConfig+0xe4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d113      	bne.n	8005e36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40010400 	.word	0x40010400

08005e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	031b      	lsls	r3, r3, #12
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a12      	ldr	r2, [pc, #72]	; (8005f08 <TIM_OC4_SetConfig+0xa4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC4_SetConfig+0x68>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a11      	ldr	r2, [pc, #68]	; (8005f0c <TIM_OC4_SetConfig+0xa8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d109      	bne.n	8005ee0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	019b      	lsls	r3, r3, #6
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	621a      	str	r2, [r3, #32]
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40010400 	.word	0x40010400

08005f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2201      	movs	r2, #1
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1a      	ldr	r2, [r3, #32]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	401a      	ands	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e05a      	b.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a21      	ldr	r2, [pc, #132]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d022      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc0:	d01d      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1d      	ldr	r2, [pc, #116]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d018      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1a      	ldr	r2, [pc, #104]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00e      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a18      	ldr	r2, [pc, #96]	; (8006048 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a17      	ldr	r2, [pc, #92]	; (800604c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a15      	ldr	r2, [pc, #84]	; (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d10c      	bne.n	8006018 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4313      	orrs	r3, r2
 800600e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40000c00 	.word	0x40000c00
 8006048:	40010400 	.word	0x40010400
 800604c:	40014000 	.word	0x40014000
 8006050:	40001800 	.word	0x40001800

08006054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e03f      	b.n	800610e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fc fd9c 	bl	8002be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2224      	movs	r2, #36	; 0x24
 80060ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f90b 	bl	80062dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695a      	ldr	r2, [r3, #20]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b088      	sub	sp, #32
 800611a:	af02      	add	r7, sp, #8
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	4613      	mov	r3, r2
 8006124:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b20      	cmp	r3, #32
 8006134:	f040 8083 	bne.w	800623e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_UART_Transmit+0x2e>
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e07b      	b.n	8006240 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_UART_Transmit+0x40>
 8006152:	2302      	movs	r3, #2
 8006154:	e074      	b.n	8006240 <HAL_UART_Transmit+0x12a>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2221      	movs	r2, #33	; 0x21
 8006168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800616c:	f7fc ff24 	bl	8002fb8 <HAL_GetTick>
 8006170:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	88fa      	ldrh	r2, [r7, #6]
 8006176:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006186:	e042      	b.n	800620e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619e:	d122      	bne.n	80061e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2200      	movs	r2, #0
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 f84c 	bl	8006248 <UART_WaitOnFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e042      	b.n	8006240 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d103      	bne.n	80061de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	3302      	adds	r3, #2
 80061da:	60bb      	str	r3, [r7, #8]
 80061dc:	e017      	b.n	800620e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	3301      	adds	r3, #1
 80061e2:	60bb      	str	r3, [r7, #8]
 80061e4:	e013      	b.n	800620e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	2180      	movs	r1, #128	; 0x80
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f829 	bl	8006248 <UART_WaitOnFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e01f      	b.n	8006240 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	60ba      	str	r2, [r7, #8]
 8006206:	781a      	ldrb	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1b7      	bne.n	8006188 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2200      	movs	r2, #0
 8006220:	2140      	movs	r1, #64	; 0x40
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f810 	bl	8006248 <UART_WaitOnFlagUntilTimeout>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e006      	b.n	8006240 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e000      	b.n	8006240 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800623e:	2302      	movs	r3, #2
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	4613      	mov	r3, r2
 8006256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006258:	e02c      	b.n	80062b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d028      	beq.n	80062b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <UART_WaitOnFlagUntilTimeout+0x30>
 8006268:	f7fc fea6 	bl	8002fb8 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	429a      	cmp	r2, r3
 8006276:	d21d      	bcs.n	80062b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006286:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695a      	ldr	r2, [r3, #20]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e00f      	b.n	80062d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4013      	ands	r3, r2
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	bf0c      	ite	eq
 80062c4:	2301      	moveq	r3, #1
 80062c6:	2300      	movne	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d0c3      	beq.n	800625a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	b085      	sub	sp, #20
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800631e:	f023 030c 	bic.w	r3, r3, #12
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	430b      	orrs	r3, r1
 800632a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634a:	f040 818b 	bne.w	8006664 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4ac1      	ldr	r2, [pc, #772]	; (8006658 <UART_SetConfig+0x37c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d005      	beq.n	8006364 <UART_SetConfig+0x88>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4abf      	ldr	r2, [pc, #764]	; (800665c <UART_SetConfig+0x380>)
 800635e:	4293      	cmp	r3, r2
 8006360:	f040 80bd 	bne.w	80064de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006364:	f7fe feca 	bl	80050fc <HAL_RCC_GetPCLK2Freq>
 8006368:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	461d      	mov	r5, r3
 800636e:	f04f 0600 	mov.w	r6, #0
 8006372:	46a8      	mov	r8, r5
 8006374:	46b1      	mov	r9, r6
 8006376:	eb18 0308 	adds.w	r3, r8, r8
 800637a:	eb49 0409 	adc.w	r4, r9, r9
 800637e:	4698      	mov	r8, r3
 8006380:	46a1      	mov	r9, r4
 8006382:	eb18 0805 	adds.w	r8, r8, r5
 8006386:	eb49 0906 	adc.w	r9, r9, r6
 800638a:	f04f 0100 	mov.w	r1, #0
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006396:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800639a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800639e:	4688      	mov	r8, r1
 80063a0:	4691      	mov	r9, r2
 80063a2:	eb18 0005 	adds.w	r0, r8, r5
 80063a6:	eb49 0106 	adc.w	r1, r9, r6
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	461d      	mov	r5, r3
 80063b0:	f04f 0600 	mov.w	r6, #0
 80063b4:	196b      	adds	r3, r5, r5
 80063b6:	eb46 0406 	adc.w	r4, r6, r6
 80063ba:	461a      	mov	r2, r3
 80063bc:	4623      	mov	r3, r4
 80063be:	f7fa fbf5 	bl	8000bac <__aeabi_uldivmod>
 80063c2:	4603      	mov	r3, r0
 80063c4:	460c      	mov	r4, r1
 80063c6:	461a      	mov	r2, r3
 80063c8:	4ba5      	ldr	r3, [pc, #660]	; (8006660 <UART_SetConfig+0x384>)
 80063ca:	fba3 2302 	umull	r2, r3, r3, r2
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	461d      	mov	r5, r3
 80063d8:	f04f 0600 	mov.w	r6, #0
 80063dc:	46a9      	mov	r9, r5
 80063de:	46b2      	mov	sl, r6
 80063e0:	eb19 0309 	adds.w	r3, r9, r9
 80063e4:	eb4a 040a 	adc.w	r4, sl, sl
 80063e8:	4699      	mov	r9, r3
 80063ea:	46a2      	mov	sl, r4
 80063ec:	eb19 0905 	adds.w	r9, r9, r5
 80063f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80063f4:	f04f 0100 	mov.w	r1, #0
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006400:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006404:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006408:	4689      	mov	r9, r1
 800640a:	4692      	mov	sl, r2
 800640c:	eb19 0005 	adds.w	r0, r9, r5
 8006410:	eb4a 0106 	adc.w	r1, sl, r6
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	461d      	mov	r5, r3
 800641a:	f04f 0600 	mov.w	r6, #0
 800641e:	196b      	adds	r3, r5, r5
 8006420:	eb46 0406 	adc.w	r4, r6, r6
 8006424:	461a      	mov	r2, r3
 8006426:	4623      	mov	r3, r4
 8006428:	f7fa fbc0 	bl	8000bac <__aeabi_uldivmod>
 800642c:	4603      	mov	r3, r0
 800642e:	460c      	mov	r4, r1
 8006430:	461a      	mov	r2, r3
 8006432:	4b8b      	ldr	r3, [pc, #556]	; (8006660 <UART_SetConfig+0x384>)
 8006434:	fba3 1302 	umull	r1, r3, r3, r2
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	2164      	movs	r1, #100	; 0x64
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	3332      	adds	r3, #50	; 0x32
 8006446:	4a86      	ldr	r2, [pc, #536]	; (8006660 <UART_SetConfig+0x384>)
 8006448:	fba2 2303 	umull	r2, r3, r2, r3
 800644c:	095b      	lsrs	r3, r3, #5
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006454:	4498      	add	r8, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	461d      	mov	r5, r3
 800645a:	f04f 0600 	mov.w	r6, #0
 800645e:	46a9      	mov	r9, r5
 8006460:	46b2      	mov	sl, r6
 8006462:	eb19 0309 	adds.w	r3, r9, r9
 8006466:	eb4a 040a 	adc.w	r4, sl, sl
 800646a:	4699      	mov	r9, r3
 800646c:	46a2      	mov	sl, r4
 800646e:	eb19 0905 	adds.w	r9, r9, r5
 8006472:	eb4a 0a06 	adc.w	sl, sl, r6
 8006476:	f04f 0100 	mov.w	r1, #0
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006482:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006486:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800648a:	4689      	mov	r9, r1
 800648c:	4692      	mov	sl, r2
 800648e:	eb19 0005 	adds.w	r0, r9, r5
 8006492:	eb4a 0106 	adc.w	r1, sl, r6
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	461d      	mov	r5, r3
 800649c:	f04f 0600 	mov.w	r6, #0
 80064a0:	196b      	adds	r3, r5, r5
 80064a2:	eb46 0406 	adc.w	r4, r6, r6
 80064a6:	461a      	mov	r2, r3
 80064a8:	4623      	mov	r3, r4
 80064aa:	f7fa fb7f 	bl	8000bac <__aeabi_uldivmod>
 80064ae:	4603      	mov	r3, r0
 80064b0:	460c      	mov	r4, r1
 80064b2:	461a      	mov	r2, r3
 80064b4:	4b6a      	ldr	r3, [pc, #424]	; (8006660 <UART_SetConfig+0x384>)
 80064b6:	fba3 1302 	umull	r1, r3, r3, r2
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	2164      	movs	r1, #100	; 0x64
 80064be:	fb01 f303 	mul.w	r3, r1, r3
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	3332      	adds	r3, #50	; 0x32
 80064c8:	4a65      	ldr	r2, [pc, #404]	; (8006660 <UART_SetConfig+0x384>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	f003 0207 	and.w	r2, r3, #7
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4442      	add	r2, r8
 80064da:	609a      	str	r2, [r3, #8]
 80064dc:	e26f      	b.n	80069be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064de:	f7fe fdf9 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 80064e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	461d      	mov	r5, r3
 80064e8:	f04f 0600 	mov.w	r6, #0
 80064ec:	46a8      	mov	r8, r5
 80064ee:	46b1      	mov	r9, r6
 80064f0:	eb18 0308 	adds.w	r3, r8, r8
 80064f4:	eb49 0409 	adc.w	r4, r9, r9
 80064f8:	4698      	mov	r8, r3
 80064fa:	46a1      	mov	r9, r4
 80064fc:	eb18 0805 	adds.w	r8, r8, r5
 8006500:	eb49 0906 	adc.w	r9, r9, r6
 8006504:	f04f 0100 	mov.w	r1, #0
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006510:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006514:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006518:	4688      	mov	r8, r1
 800651a:	4691      	mov	r9, r2
 800651c:	eb18 0005 	adds.w	r0, r8, r5
 8006520:	eb49 0106 	adc.w	r1, r9, r6
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	461d      	mov	r5, r3
 800652a:	f04f 0600 	mov.w	r6, #0
 800652e:	196b      	adds	r3, r5, r5
 8006530:	eb46 0406 	adc.w	r4, r6, r6
 8006534:	461a      	mov	r2, r3
 8006536:	4623      	mov	r3, r4
 8006538:	f7fa fb38 	bl	8000bac <__aeabi_uldivmod>
 800653c:	4603      	mov	r3, r0
 800653e:	460c      	mov	r4, r1
 8006540:	461a      	mov	r2, r3
 8006542:	4b47      	ldr	r3, [pc, #284]	; (8006660 <UART_SetConfig+0x384>)
 8006544:	fba3 2302 	umull	r2, r3, r3, r2
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	461d      	mov	r5, r3
 8006552:	f04f 0600 	mov.w	r6, #0
 8006556:	46a9      	mov	r9, r5
 8006558:	46b2      	mov	sl, r6
 800655a:	eb19 0309 	adds.w	r3, r9, r9
 800655e:	eb4a 040a 	adc.w	r4, sl, sl
 8006562:	4699      	mov	r9, r3
 8006564:	46a2      	mov	sl, r4
 8006566:	eb19 0905 	adds.w	r9, r9, r5
 800656a:	eb4a 0a06 	adc.w	sl, sl, r6
 800656e:	f04f 0100 	mov.w	r1, #0
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800657a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800657e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006582:	4689      	mov	r9, r1
 8006584:	4692      	mov	sl, r2
 8006586:	eb19 0005 	adds.w	r0, r9, r5
 800658a:	eb4a 0106 	adc.w	r1, sl, r6
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	461d      	mov	r5, r3
 8006594:	f04f 0600 	mov.w	r6, #0
 8006598:	196b      	adds	r3, r5, r5
 800659a:	eb46 0406 	adc.w	r4, r6, r6
 800659e:	461a      	mov	r2, r3
 80065a0:	4623      	mov	r3, r4
 80065a2:	f7fa fb03 	bl	8000bac <__aeabi_uldivmod>
 80065a6:	4603      	mov	r3, r0
 80065a8:	460c      	mov	r4, r1
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b2c      	ldr	r3, [pc, #176]	; (8006660 <UART_SetConfig+0x384>)
 80065ae:	fba3 1302 	umull	r1, r3, r3, r2
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	2164      	movs	r1, #100	; 0x64
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	3332      	adds	r3, #50	; 0x32
 80065c0:	4a27      	ldr	r2, [pc, #156]	; (8006660 <UART_SetConfig+0x384>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065ce:	4498      	add	r8, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	461d      	mov	r5, r3
 80065d4:	f04f 0600 	mov.w	r6, #0
 80065d8:	46a9      	mov	r9, r5
 80065da:	46b2      	mov	sl, r6
 80065dc:	eb19 0309 	adds.w	r3, r9, r9
 80065e0:	eb4a 040a 	adc.w	r4, sl, sl
 80065e4:	4699      	mov	r9, r3
 80065e6:	46a2      	mov	sl, r4
 80065e8:	eb19 0905 	adds.w	r9, r9, r5
 80065ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80065f0:	f04f 0100 	mov.w	r1, #0
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006600:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006604:	4689      	mov	r9, r1
 8006606:	4692      	mov	sl, r2
 8006608:	eb19 0005 	adds.w	r0, r9, r5
 800660c:	eb4a 0106 	adc.w	r1, sl, r6
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	461d      	mov	r5, r3
 8006616:	f04f 0600 	mov.w	r6, #0
 800661a:	196b      	adds	r3, r5, r5
 800661c:	eb46 0406 	adc.w	r4, r6, r6
 8006620:	461a      	mov	r2, r3
 8006622:	4623      	mov	r3, r4
 8006624:	f7fa fac2 	bl	8000bac <__aeabi_uldivmod>
 8006628:	4603      	mov	r3, r0
 800662a:	460c      	mov	r4, r1
 800662c:	461a      	mov	r2, r3
 800662e:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <UART_SetConfig+0x384>)
 8006630:	fba3 1302 	umull	r1, r3, r3, r2
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	2164      	movs	r1, #100	; 0x64
 8006638:	fb01 f303 	mul.w	r3, r1, r3
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	3332      	adds	r3, #50	; 0x32
 8006642:	4a07      	ldr	r2, [pc, #28]	; (8006660 <UART_SetConfig+0x384>)
 8006644:	fba2 2303 	umull	r2, r3, r2, r3
 8006648:	095b      	lsrs	r3, r3, #5
 800664a:	f003 0207 	and.w	r2, r3, #7
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4442      	add	r2, r8
 8006654:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006656:	e1b2      	b.n	80069be <UART_SetConfig+0x6e2>
 8006658:	40011000 	.word	0x40011000
 800665c:	40011400 	.word	0x40011400
 8006660:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4ad7      	ldr	r2, [pc, #860]	; (80069c8 <UART_SetConfig+0x6ec>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d005      	beq.n	800667a <UART_SetConfig+0x39e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4ad6      	ldr	r2, [pc, #856]	; (80069cc <UART_SetConfig+0x6f0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	f040 80d1 	bne.w	800681c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800667a:	f7fe fd3f 	bl	80050fc <HAL_RCC_GetPCLK2Freq>
 800667e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	469a      	mov	sl, r3
 8006684:	f04f 0b00 	mov.w	fp, #0
 8006688:	46d0      	mov	r8, sl
 800668a:	46d9      	mov	r9, fp
 800668c:	eb18 0308 	adds.w	r3, r8, r8
 8006690:	eb49 0409 	adc.w	r4, r9, r9
 8006694:	4698      	mov	r8, r3
 8006696:	46a1      	mov	r9, r4
 8006698:	eb18 080a 	adds.w	r8, r8, sl
 800669c:	eb49 090b 	adc.w	r9, r9, fp
 80066a0:	f04f 0100 	mov.w	r1, #0
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066b4:	4688      	mov	r8, r1
 80066b6:	4691      	mov	r9, r2
 80066b8:	eb1a 0508 	adds.w	r5, sl, r8
 80066bc:	eb4b 0609 	adc.w	r6, fp, r9
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4619      	mov	r1, r3
 80066c6:	f04f 0200 	mov.w	r2, #0
 80066ca:	f04f 0300 	mov.w	r3, #0
 80066ce:	f04f 0400 	mov.w	r4, #0
 80066d2:	0094      	lsls	r4, r2, #2
 80066d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066d8:	008b      	lsls	r3, r1, #2
 80066da:	461a      	mov	r2, r3
 80066dc:	4623      	mov	r3, r4
 80066de:	4628      	mov	r0, r5
 80066e0:	4631      	mov	r1, r6
 80066e2:	f7fa fa63 	bl	8000bac <__aeabi_uldivmod>
 80066e6:	4603      	mov	r3, r0
 80066e8:	460c      	mov	r4, r1
 80066ea:	461a      	mov	r2, r3
 80066ec:	4bb8      	ldr	r3, [pc, #736]	; (80069d0 <UART_SetConfig+0x6f4>)
 80066ee:	fba3 2302 	umull	r2, r3, r3, r2
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	469b      	mov	fp, r3
 80066fc:	f04f 0c00 	mov.w	ip, #0
 8006700:	46d9      	mov	r9, fp
 8006702:	46e2      	mov	sl, ip
 8006704:	eb19 0309 	adds.w	r3, r9, r9
 8006708:	eb4a 040a 	adc.w	r4, sl, sl
 800670c:	4699      	mov	r9, r3
 800670e:	46a2      	mov	sl, r4
 8006710:	eb19 090b 	adds.w	r9, r9, fp
 8006714:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006718:	f04f 0100 	mov.w	r1, #0
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006724:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006728:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800672c:	4689      	mov	r9, r1
 800672e:	4692      	mov	sl, r2
 8006730:	eb1b 0509 	adds.w	r5, fp, r9
 8006734:	eb4c 060a 	adc.w	r6, ip, sl
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4619      	mov	r1, r3
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	f04f 0400 	mov.w	r4, #0
 800674a:	0094      	lsls	r4, r2, #2
 800674c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006750:	008b      	lsls	r3, r1, #2
 8006752:	461a      	mov	r2, r3
 8006754:	4623      	mov	r3, r4
 8006756:	4628      	mov	r0, r5
 8006758:	4631      	mov	r1, r6
 800675a:	f7fa fa27 	bl	8000bac <__aeabi_uldivmod>
 800675e:	4603      	mov	r3, r0
 8006760:	460c      	mov	r4, r1
 8006762:	461a      	mov	r2, r3
 8006764:	4b9a      	ldr	r3, [pc, #616]	; (80069d0 <UART_SetConfig+0x6f4>)
 8006766:	fba3 1302 	umull	r1, r3, r3, r2
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	2164      	movs	r1, #100	; 0x64
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	3332      	adds	r3, #50	; 0x32
 8006778:	4a95      	ldr	r2, [pc, #596]	; (80069d0 <UART_SetConfig+0x6f4>)
 800677a:	fba2 2303 	umull	r2, r3, r2, r3
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006784:	4498      	add	r8, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	469b      	mov	fp, r3
 800678a:	f04f 0c00 	mov.w	ip, #0
 800678e:	46d9      	mov	r9, fp
 8006790:	46e2      	mov	sl, ip
 8006792:	eb19 0309 	adds.w	r3, r9, r9
 8006796:	eb4a 040a 	adc.w	r4, sl, sl
 800679a:	4699      	mov	r9, r3
 800679c:	46a2      	mov	sl, r4
 800679e:	eb19 090b 	adds.w	r9, r9, fp
 80067a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067a6:	f04f 0100 	mov.w	r1, #0
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067ba:	4689      	mov	r9, r1
 80067bc:	4692      	mov	sl, r2
 80067be:	eb1b 0509 	adds.w	r5, fp, r9
 80067c2:	eb4c 060a 	adc.w	r6, ip, sl
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	4619      	mov	r1, r3
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	f04f 0300 	mov.w	r3, #0
 80067d4:	f04f 0400 	mov.w	r4, #0
 80067d8:	0094      	lsls	r4, r2, #2
 80067da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067de:	008b      	lsls	r3, r1, #2
 80067e0:	461a      	mov	r2, r3
 80067e2:	4623      	mov	r3, r4
 80067e4:	4628      	mov	r0, r5
 80067e6:	4631      	mov	r1, r6
 80067e8:	f7fa f9e0 	bl	8000bac <__aeabi_uldivmod>
 80067ec:	4603      	mov	r3, r0
 80067ee:	460c      	mov	r4, r1
 80067f0:	461a      	mov	r2, r3
 80067f2:	4b77      	ldr	r3, [pc, #476]	; (80069d0 <UART_SetConfig+0x6f4>)
 80067f4:	fba3 1302 	umull	r1, r3, r3, r2
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	2164      	movs	r1, #100	; 0x64
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	3332      	adds	r3, #50	; 0x32
 8006806:	4a72      	ldr	r2, [pc, #456]	; (80069d0 <UART_SetConfig+0x6f4>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	f003 020f 	and.w	r2, r3, #15
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4442      	add	r2, r8
 8006818:	609a      	str	r2, [r3, #8]
 800681a:	e0d0      	b.n	80069be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800681c:	f7fe fc5a 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8006820:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	469a      	mov	sl, r3
 8006826:	f04f 0b00 	mov.w	fp, #0
 800682a:	46d0      	mov	r8, sl
 800682c:	46d9      	mov	r9, fp
 800682e:	eb18 0308 	adds.w	r3, r8, r8
 8006832:	eb49 0409 	adc.w	r4, r9, r9
 8006836:	4698      	mov	r8, r3
 8006838:	46a1      	mov	r9, r4
 800683a:	eb18 080a 	adds.w	r8, r8, sl
 800683e:	eb49 090b 	adc.w	r9, r9, fp
 8006842:	f04f 0100 	mov.w	r1, #0
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800684e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006852:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006856:	4688      	mov	r8, r1
 8006858:	4691      	mov	r9, r2
 800685a:	eb1a 0508 	adds.w	r5, sl, r8
 800685e:	eb4b 0609 	adc.w	r6, fp, r9
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	4619      	mov	r1, r3
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	f04f 0400 	mov.w	r4, #0
 8006874:	0094      	lsls	r4, r2, #2
 8006876:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800687a:	008b      	lsls	r3, r1, #2
 800687c:	461a      	mov	r2, r3
 800687e:	4623      	mov	r3, r4
 8006880:	4628      	mov	r0, r5
 8006882:	4631      	mov	r1, r6
 8006884:	f7fa f992 	bl	8000bac <__aeabi_uldivmod>
 8006888:	4603      	mov	r3, r0
 800688a:	460c      	mov	r4, r1
 800688c:	461a      	mov	r2, r3
 800688e:	4b50      	ldr	r3, [pc, #320]	; (80069d0 <UART_SetConfig+0x6f4>)
 8006890:	fba3 2302 	umull	r2, r3, r3, r2
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	469b      	mov	fp, r3
 800689e:	f04f 0c00 	mov.w	ip, #0
 80068a2:	46d9      	mov	r9, fp
 80068a4:	46e2      	mov	sl, ip
 80068a6:	eb19 0309 	adds.w	r3, r9, r9
 80068aa:	eb4a 040a 	adc.w	r4, sl, sl
 80068ae:	4699      	mov	r9, r3
 80068b0:	46a2      	mov	sl, r4
 80068b2:	eb19 090b 	adds.w	r9, r9, fp
 80068b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068ba:	f04f 0100 	mov.w	r1, #0
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ce:	4689      	mov	r9, r1
 80068d0:	4692      	mov	sl, r2
 80068d2:	eb1b 0509 	adds.w	r5, fp, r9
 80068d6:	eb4c 060a 	adc.w	r6, ip, sl
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	4619      	mov	r1, r3
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	f04f 0400 	mov.w	r4, #0
 80068ec:	0094      	lsls	r4, r2, #2
 80068ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068f2:	008b      	lsls	r3, r1, #2
 80068f4:	461a      	mov	r2, r3
 80068f6:	4623      	mov	r3, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	4631      	mov	r1, r6
 80068fc:	f7fa f956 	bl	8000bac <__aeabi_uldivmod>
 8006900:	4603      	mov	r3, r0
 8006902:	460c      	mov	r4, r1
 8006904:	461a      	mov	r2, r3
 8006906:	4b32      	ldr	r3, [pc, #200]	; (80069d0 <UART_SetConfig+0x6f4>)
 8006908:	fba3 1302 	umull	r1, r3, r3, r2
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	2164      	movs	r1, #100	; 0x64
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	3332      	adds	r3, #50	; 0x32
 800691a:	4a2d      	ldr	r2, [pc, #180]	; (80069d0 <UART_SetConfig+0x6f4>)
 800691c:	fba2 2303 	umull	r2, r3, r2, r3
 8006920:	095b      	lsrs	r3, r3, #5
 8006922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006926:	4498      	add	r8, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	469b      	mov	fp, r3
 800692c:	f04f 0c00 	mov.w	ip, #0
 8006930:	46d9      	mov	r9, fp
 8006932:	46e2      	mov	sl, ip
 8006934:	eb19 0309 	adds.w	r3, r9, r9
 8006938:	eb4a 040a 	adc.w	r4, sl, sl
 800693c:	4699      	mov	r9, r3
 800693e:	46a2      	mov	sl, r4
 8006940:	eb19 090b 	adds.w	r9, r9, fp
 8006944:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006948:	f04f 0100 	mov.w	r1, #0
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006954:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006958:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800695c:	4689      	mov	r9, r1
 800695e:	4692      	mov	sl, r2
 8006960:	eb1b 0509 	adds.w	r5, fp, r9
 8006964:	eb4c 060a 	adc.w	r6, ip, sl
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	4619      	mov	r1, r3
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	f04f 0300 	mov.w	r3, #0
 8006976:	f04f 0400 	mov.w	r4, #0
 800697a:	0094      	lsls	r4, r2, #2
 800697c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006980:	008b      	lsls	r3, r1, #2
 8006982:	461a      	mov	r2, r3
 8006984:	4623      	mov	r3, r4
 8006986:	4628      	mov	r0, r5
 8006988:	4631      	mov	r1, r6
 800698a:	f7fa f90f 	bl	8000bac <__aeabi_uldivmod>
 800698e:	4603      	mov	r3, r0
 8006990:	460c      	mov	r4, r1
 8006992:	461a      	mov	r2, r3
 8006994:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <UART_SetConfig+0x6f4>)
 8006996:	fba3 1302 	umull	r1, r3, r3, r2
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	2164      	movs	r1, #100	; 0x64
 800699e:	fb01 f303 	mul.w	r3, r1, r3
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	3332      	adds	r3, #50	; 0x32
 80069a8:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <UART_SetConfig+0x6f4>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	f003 020f 	and.w	r2, r3, #15
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4442      	add	r2, r8
 80069ba:	609a      	str	r2, [r3, #8]
}
 80069bc:	e7ff      	b.n	80069be <UART_SetConfig+0x6e2>
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c8:	40011000 	.word	0x40011000
 80069cc:	40011400 	.word	0x40011400
 80069d0:	51eb851f 	.word	0x51eb851f

080069d4 <__errno>:
 80069d4:	4b01      	ldr	r3, [pc, #4]	; (80069dc <__errno+0x8>)
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	2000000c 	.word	0x2000000c

080069e0 <__libc_init_array>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	4e0d      	ldr	r6, [pc, #52]	; (8006a18 <__libc_init_array+0x38>)
 80069e4:	4c0d      	ldr	r4, [pc, #52]	; (8006a1c <__libc_init_array+0x3c>)
 80069e6:	1ba4      	subs	r4, r4, r6
 80069e8:	10a4      	asrs	r4, r4, #2
 80069ea:	2500      	movs	r5, #0
 80069ec:	42a5      	cmp	r5, r4
 80069ee:	d109      	bne.n	8006a04 <__libc_init_array+0x24>
 80069f0:	4e0b      	ldr	r6, [pc, #44]	; (8006a20 <__libc_init_array+0x40>)
 80069f2:	4c0c      	ldr	r4, [pc, #48]	; (8006a24 <__libc_init_array+0x44>)
 80069f4:	f000 ff68 	bl	80078c8 <_init>
 80069f8:	1ba4      	subs	r4, r4, r6
 80069fa:	10a4      	asrs	r4, r4, #2
 80069fc:	2500      	movs	r5, #0
 80069fe:	42a5      	cmp	r5, r4
 8006a00:	d105      	bne.n	8006a0e <__libc_init_array+0x2e>
 8006a02:	bd70      	pop	{r4, r5, r6, pc}
 8006a04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a08:	4798      	blx	r3
 8006a0a:	3501      	adds	r5, #1
 8006a0c:	e7ee      	b.n	80069ec <__libc_init_array+0xc>
 8006a0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a12:	4798      	blx	r3
 8006a14:	3501      	adds	r5, #1
 8006a16:	e7f2      	b.n	80069fe <__libc_init_array+0x1e>
 8006a18:	08007a5c 	.word	0x08007a5c
 8006a1c:	08007a5c 	.word	0x08007a5c
 8006a20:	08007a5c 	.word	0x08007a5c
 8006a24:	08007a60 	.word	0x08007a60

08006a28 <memset>:
 8006a28:	4402      	add	r2, r0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d100      	bne.n	8006a32 <memset+0xa>
 8006a30:	4770      	bx	lr
 8006a32:	f803 1b01 	strb.w	r1, [r3], #1
 8006a36:	e7f9      	b.n	8006a2c <memset+0x4>

08006a38 <iprintf>:
 8006a38:	b40f      	push	{r0, r1, r2, r3}
 8006a3a:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <iprintf+0x2c>)
 8006a3c:	b513      	push	{r0, r1, r4, lr}
 8006a3e:	681c      	ldr	r4, [r3, #0]
 8006a40:	b124      	cbz	r4, 8006a4c <iprintf+0x14>
 8006a42:	69a3      	ldr	r3, [r4, #24]
 8006a44:	b913      	cbnz	r3, 8006a4c <iprintf+0x14>
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 fa22 	bl	8006e90 <__sinit>
 8006a4c:	ab05      	add	r3, sp, #20
 8006a4e:	9a04      	ldr	r2, [sp, #16]
 8006a50:	68a1      	ldr	r1, [r4, #8]
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 fbdb 	bl	8007210 <_vfiprintf_r>
 8006a5a:	b002      	add	sp, #8
 8006a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a60:	b004      	add	sp, #16
 8006a62:	4770      	bx	lr
 8006a64:	2000000c 	.word	0x2000000c

08006a68 <_puts_r>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	460e      	mov	r6, r1
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	b118      	cbz	r0, 8006a78 <_puts_r+0x10>
 8006a70:	6983      	ldr	r3, [r0, #24]
 8006a72:	b90b      	cbnz	r3, 8006a78 <_puts_r+0x10>
 8006a74:	f000 fa0c 	bl	8006e90 <__sinit>
 8006a78:	69ab      	ldr	r3, [r5, #24]
 8006a7a:	68ac      	ldr	r4, [r5, #8]
 8006a7c:	b913      	cbnz	r3, 8006a84 <_puts_r+0x1c>
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fa06 	bl	8006e90 <__sinit>
 8006a84:	4b23      	ldr	r3, [pc, #140]	; (8006b14 <_puts_r+0xac>)
 8006a86:	429c      	cmp	r4, r3
 8006a88:	d117      	bne.n	8006aba <_puts_r+0x52>
 8006a8a:	686c      	ldr	r4, [r5, #4]
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	071b      	lsls	r3, r3, #28
 8006a90:	d51d      	bpl.n	8006ace <_puts_r+0x66>
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	b1db      	cbz	r3, 8006ace <_puts_r+0x66>
 8006a96:	3e01      	subs	r6, #1
 8006a98:	68a3      	ldr	r3, [r4, #8]
 8006a9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	60a3      	str	r3, [r4, #8]
 8006aa2:	b9e9      	cbnz	r1, 8006ae0 <_puts_r+0x78>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	da2e      	bge.n	8006b06 <_puts_r+0x9e>
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	210a      	movs	r1, #10
 8006aac:	4628      	mov	r0, r5
 8006aae:	f000 f83f 	bl	8006b30 <__swbuf_r>
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d011      	beq.n	8006ada <_puts_r+0x72>
 8006ab6:	200a      	movs	r0, #10
 8006ab8:	e011      	b.n	8006ade <_puts_r+0x76>
 8006aba:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <_puts_r+0xb0>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	d101      	bne.n	8006ac4 <_puts_r+0x5c>
 8006ac0:	68ac      	ldr	r4, [r5, #8]
 8006ac2:	e7e3      	b.n	8006a8c <_puts_r+0x24>
 8006ac4:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <_puts_r+0xb4>)
 8006ac6:	429c      	cmp	r4, r3
 8006ac8:	bf08      	it	eq
 8006aca:	68ec      	ldreq	r4, [r5, #12]
 8006acc:	e7de      	b.n	8006a8c <_puts_r+0x24>
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f000 f87f 	bl	8006bd4 <__swsetup_r>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d0dd      	beq.n	8006a96 <_puts_r+0x2e>
 8006ada:	f04f 30ff 	mov.w	r0, #4294967295
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da04      	bge.n	8006aee <_puts_r+0x86>
 8006ae4:	69a2      	ldr	r2, [r4, #24]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	dc06      	bgt.n	8006af8 <_puts_r+0x90>
 8006aea:	290a      	cmp	r1, #10
 8006aec:	d004      	beq.n	8006af8 <_puts_r+0x90>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	6022      	str	r2, [r4, #0]
 8006af4:	7019      	strb	r1, [r3, #0]
 8006af6:	e7cf      	b.n	8006a98 <_puts_r+0x30>
 8006af8:	4622      	mov	r2, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f818 	bl	8006b30 <__swbuf_r>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d1c9      	bne.n	8006a98 <_puts_r+0x30>
 8006b04:	e7e9      	b.n	8006ada <_puts_r+0x72>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	200a      	movs	r0, #10
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	6022      	str	r2, [r4, #0]
 8006b0e:	7018      	strb	r0, [r3, #0]
 8006b10:	e7e5      	b.n	8006ade <_puts_r+0x76>
 8006b12:	bf00      	nop
 8006b14:	080079e0 	.word	0x080079e0
 8006b18:	08007a00 	.word	0x08007a00
 8006b1c:	080079c0 	.word	0x080079c0

08006b20 <puts>:
 8006b20:	4b02      	ldr	r3, [pc, #8]	; (8006b2c <puts+0xc>)
 8006b22:	4601      	mov	r1, r0
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	f7ff bf9f 	b.w	8006a68 <_puts_r>
 8006b2a:	bf00      	nop
 8006b2c:	2000000c 	.word	0x2000000c

08006b30 <__swbuf_r>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	460e      	mov	r6, r1
 8006b34:	4614      	mov	r4, r2
 8006b36:	4605      	mov	r5, r0
 8006b38:	b118      	cbz	r0, 8006b42 <__swbuf_r+0x12>
 8006b3a:	6983      	ldr	r3, [r0, #24]
 8006b3c:	b90b      	cbnz	r3, 8006b42 <__swbuf_r+0x12>
 8006b3e:	f000 f9a7 	bl	8006e90 <__sinit>
 8006b42:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <__swbuf_r+0x98>)
 8006b44:	429c      	cmp	r4, r3
 8006b46:	d12a      	bne.n	8006b9e <__swbuf_r+0x6e>
 8006b48:	686c      	ldr	r4, [r5, #4]
 8006b4a:	69a3      	ldr	r3, [r4, #24]
 8006b4c:	60a3      	str	r3, [r4, #8]
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	071a      	lsls	r2, r3, #28
 8006b52:	d52e      	bpl.n	8006bb2 <__swbuf_r+0x82>
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	b363      	cbz	r3, 8006bb2 <__swbuf_r+0x82>
 8006b58:	6923      	ldr	r3, [r4, #16]
 8006b5a:	6820      	ldr	r0, [r4, #0]
 8006b5c:	1ac0      	subs	r0, r0, r3
 8006b5e:	6963      	ldr	r3, [r4, #20]
 8006b60:	b2f6      	uxtb	r6, r6
 8006b62:	4283      	cmp	r3, r0
 8006b64:	4637      	mov	r7, r6
 8006b66:	dc04      	bgt.n	8006b72 <__swbuf_r+0x42>
 8006b68:	4621      	mov	r1, r4
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f000 f926 	bl	8006dbc <_fflush_r>
 8006b70:	bb28      	cbnz	r0, 8006bbe <__swbuf_r+0x8e>
 8006b72:	68a3      	ldr	r3, [r4, #8]
 8006b74:	3b01      	subs	r3, #1
 8006b76:	60a3      	str	r3, [r4, #8]
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	6022      	str	r2, [r4, #0]
 8006b7e:	701e      	strb	r6, [r3, #0]
 8006b80:	6963      	ldr	r3, [r4, #20]
 8006b82:	3001      	adds	r0, #1
 8006b84:	4283      	cmp	r3, r0
 8006b86:	d004      	beq.n	8006b92 <__swbuf_r+0x62>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	07db      	lsls	r3, r3, #31
 8006b8c:	d519      	bpl.n	8006bc2 <__swbuf_r+0x92>
 8006b8e:	2e0a      	cmp	r6, #10
 8006b90:	d117      	bne.n	8006bc2 <__swbuf_r+0x92>
 8006b92:	4621      	mov	r1, r4
 8006b94:	4628      	mov	r0, r5
 8006b96:	f000 f911 	bl	8006dbc <_fflush_r>
 8006b9a:	b190      	cbz	r0, 8006bc2 <__swbuf_r+0x92>
 8006b9c:	e00f      	b.n	8006bbe <__swbuf_r+0x8e>
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <__swbuf_r+0x9c>)
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	d101      	bne.n	8006ba8 <__swbuf_r+0x78>
 8006ba4:	68ac      	ldr	r4, [r5, #8]
 8006ba6:	e7d0      	b.n	8006b4a <__swbuf_r+0x1a>
 8006ba8:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <__swbuf_r+0xa0>)
 8006baa:	429c      	cmp	r4, r3
 8006bac:	bf08      	it	eq
 8006bae:	68ec      	ldreq	r4, [r5, #12]
 8006bb0:	e7cb      	b.n	8006b4a <__swbuf_r+0x1a>
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 f80d 	bl	8006bd4 <__swsetup_r>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d0cc      	beq.n	8006b58 <__swbuf_r+0x28>
 8006bbe:	f04f 37ff 	mov.w	r7, #4294967295
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	080079e0 	.word	0x080079e0
 8006bcc:	08007a00 	.word	0x08007a00
 8006bd0:	080079c0 	.word	0x080079c0

08006bd4 <__swsetup_r>:
 8006bd4:	4b32      	ldr	r3, [pc, #200]	; (8006ca0 <__swsetup_r+0xcc>)
 8006bd6:	b570      	push	{r4, r5, r6, lr}
 8006bd8:	681d      	ldr	r5, [r3, #0]
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460c      	mov	r4, r1
 8006bde:	b125      	cbz	r5, 8006bea <__swsetup_r+0x16>
 8006be0:	69ab      	ldr	r3, [r5, #24]
 8006be2:	b913      	cbnz	r3, 8006bea <__swsetup_r+0x16>
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 f953 	bl	8006e90 <__sinit>
 8006bea:	4b2e      	ldr	r3, [pc, #184]	; (8006ca4 <__swsetup_r+0xd0>)
 8006bec:	429c      	cmp	r4, r3
 8006bee:	d10f      	bne.n	8006c10 <__swsetup_r+0x3c>
 8006bf0:	686c      	ldr	r4, [r5, #4]
 8006bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	0715      	lsls	r5, r2, #28
 8006bfa:	d42c      	bmi.n	8006c56 <__swsetup_r+0x82>
 8006bfc:	06d0      	lsls	r0, r2, #27
 8006bfe:	d411      	bmi.n	8006c24 <__swsetup_r+0x50>
 8006c00:	2209      	movs	r2, #9
 8006c02:	6032      	str	r2, [r6, #0]
 8006c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0e:	e03e      	b.n	8006c8e <__swsetup_r+0xba>
 8006c10:	4b25      	ldr	r3, [pc, #148]	; (8006ca8 <__swsetup_r+0xd4>)
 8006c12:	429c      	cmp	r4, r3
 8006c14:	d101      	bne.n	8006c1a <__swsetup_r+0x46>
 8006c16:	68ac      	ldr	r4, [r5, #8]
 8006c18:	e7eb      	b.n	8006bf2 <__swsetup_r+0x1e>
 8006c1a:	4b24      	ldr	r3, [pc, #144]	; (8006cac <__swsetup_r+0xd8>)
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	bf08      	it	eq
 8006c20:	68ec      	ldreq	r4, [r5, #12]
 8006c22:	e7e6      	b.n	8006bf2 <__swsetup_r+0x1e>
 8006c24:	0751      	lsls	r1, r2, #29
 8006c26:	d512      	bpl.n	8006c4e <__swsetup_r+0x7a>
 8006c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c2a:	b141      	cbz	r1, 8006c3e <__swsetup_r+0x6a>
 8006c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c30:	4299      	cmp	r1, r3
 8006c32:	d002      	beq.n	8006c3a <__swsetup_r+0x66>
 8006c34:	4630      	mov	r0, r6
 8006c36:	f000 fa19 	bl	800706c <_free_r>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c44:	81a3      	strh	r3, [r4, #12]
 8006c46:	2300      	movs	r3, #0
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	f043 0308 	orr.w	r3, r3, #8
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	6923      	ldr	r3, [r4, #16]
 8006c58:	b94b      	cbnz	r3, 8006c6e <__swsetup_r+0x9a>
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c64:	d003      	beq.n	8006c6e <__swsetup_r+0x9a>
 8006c66:	4621      	mov	r1, r4
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 f9bf 	bl	8006fec <__smakebuf_r>
 8006c6e:	89a2      	ldrh	r2, [r4, #12]
 8006c70:	f012 0301 	ands.w	r3, r2, #1
 8006c74:	d00c      	beq.n	8006c90 <__swsetup_r+0xbc>
 8006c76:	2300      	movs	r3, #0
 8006c78:	60a3      	str	r3, [r4, #8]
 8006c7a:	6963      	ldr	r3, [r4, #20]
 8006c7c:	425b      	negs	r3, r3
 8006c7e:	61a3      	str	r3, [r4, #24]
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	b953      	cbnz	r3, 8006c9a <__swsetup_r+0xc6>
 8006c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006c8c:	d1ba      	bne.n	8006c04 <__swsetup_r+0x30>
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	0792      	lsls	r2, r2, #30
 8006c92:	bf58      	it	pl
 8006c94:	6963      	ldrpl	r3, [r4, #20]
 8006c96:	60a3      	str	r3, [r4, #8]
 8006c98:	e7f2      	b.n	8006c80 <__swsetup_r+0xac>
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	e7f7      	b.n	8006c8e <__swsetup_r+0xba>
 8006c9e:	bf00      	nop
 8006ca0:	2000000c 	.word	0x2000000c
 8006ca4:	080079e0 	.word	0x080079e0
 8006ca8:	08007a00 	.word	0x08007a00
 8006cac:	080079c0 	.word	0x080079c0

08006cb0 <__sflush_r>:
 8006cb0:	898a      	ldrh	r2, [r1, #12]
 8006cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	0710      	lsls	r0, r2, #28
 8006cba:	460c      	mov	r4, r1
 8006cbc:	d458      	bmi.n	8006d70 <__sflush_r+0xc0>
 8006cbe:	684b      	ldr	r3, [r1, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dc05      	bgt.n	8006cd0 <__sflush_r+0x20>
 8006cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dc02      	bgt.n	8006cd0 <__sflush_r+0x20>
 8006cca:	2000      	movs	r0, #0
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cd2:	2e00      	cmp	r6, #0
 8006cd4:	d0f9      	beq.n	8006cca <__sflush_r+0x1a>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cdc:	682f      	ldr	r7, [r5, #0]
 8006cde:	6a21      	ldr	r1, [r4, #32]
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	d032      	beq.n	8006d4a <__sflush_r+0x9a>
 8006ce4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	075a      	lsls	r2, r3, #29
 8006cea:	d505      	bpl.n	8006cf8 <__sflush_r+0x48>
 8006cec:	6863      	ldr	r3, [r4, #4]
 8006cee:	1ac0      	subs	r0, r0, r3
 8006cf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf2:	b10b      	cbz	r3, 8006cf8 <__sflush_r+0x48>
 8006cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cf6:	1ac0      	subs	r0, r0, r3
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cfe:	6a21      	ldr	r1, [r4, #32]
 8006d00:	4628      	mov	r0, r5
 8006d02:	47b0      	blx	r6
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	d106      	bne.n	8006d18 <__sflush_r+0x68>
 8006d0a:	6829      	ldr	r1, [r5, #0]
 8006d0c:	291d      	cmp	r1, #29
 8006d0e:	d848      	bhi.n	8006da2 <__sflush_r+0xf2>
 8006d10:	4a29      	ldr	r2, [pc, #164]	; (8006db8 <__sflush_r+0x108>)
 8006d12:	40ca      	lsrs	r2, r1
 8006d14:	07d6      	lsls	r6, r2, #31
 8006d16:	d544      	bpl.n	8006da2 <__sflush_r+0xf2>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	6062      	str	r2, [r4, #4]
 8006d1c:	04d9      	lsls	r1, r3, #19
 8006d1e:	6922      	ldr	r2, [r4, #16]
 8006d20:	6022      	str	r2, [r4, #0]
 8006d22:	d504      	bpl.n	8006d2e <__sflush_r+0x7e>
 8006d24:	1c42      	adds	r2, r0, #1
 8006d26:	d101      	bne.n	8006d2c <__sflush_r+0x7c>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	b903      	cbnz	r3, 8006d2e <__sflush_r+0x7e>
 8006d2c:	6560      	str	r0, [r4, #84]	; 0x54
 8006d2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d30:	602f      	str	r7, [r5, #0]
 8006d32:	2900      	cmp	r1, #0
 8006d34:	d0c9      	beq.n	8006cca <__sflush_r+0x1a>
 8006d36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	d002      	beq.n	8006d44 <__sflush_r+0x94>
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f994 	bl	800706c <_free_r>
 8006d44:	2000      	movs	r0, #0
 8006d46:	6360      	str	r0, [r4, #52]	; 0x34
 8006d48:	e7c0      	b.n	8006ccc <__sflush_r+0x1c>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b0      	blx	r6
 8006d50:	1c41      	adds	r1, r0, #1
 8006d52:	d1c8      	bne.n	8006ce6 <__sflush_r+0x36>
 8006d54:	682b      	ldr	r3, [r5, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0c5      	beq.n	8006ce6 <__sflush_r+0x36>
 8006d5a:	2b1d      	cmp	r3, #29
 8006d5c:	d001      	beq.n	8006d62 <__sflush_r+0xb2>
 8006d5e:	2b16      	cmp	r3, #22
 8006d60:	d101      	bne.n	8006d66 <__sflush_r+0xb6>
 8006d62:	602f      	str	r7, [r5, #0]
 8006d64:	e7b1      	b.n	8006cca <__sflush_r+0x1a>
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	e7ad      	b.n	8006ccc <__sflush_r+0x1c>
 8006d70:	690f      	ldr	r7, [r1, #16]
 8006d72:	2f00      	cmp	r7, #0
 8006d74:	d0a9      	beq.n	8006cca <__sflush_r+0x1a>
 8006d76:	0793      	lsls	r3, r2, #30
 8006d78:	680e      	ldr	r6, [r1, #0]
 8006d7a:	bf08      	it	eq
 8006d7c:	694b      	ldreq	r3, [r1, #20]
 8006d7e:	600f      	str	r7, [r1, #0]
 8006d80:	bf18      	it	ne
 8006d82:	2300      	movne	r3, #0
 8006d84:	eba6 0807 	sub.w	r8, r6, r7
 8006d88:	608b      	str	r3, [r1, #8]
 8006d8a:	f1b8 0f00 	cmp.w	r8, #0
 8006d8e:	dd9c      	ble.n	8006cca <__sflush_r+0x1a>
 8006d90:	4643      	mov	r3, r8
 8006d92:	463a      	mov	r2, r7
 8006d94:	6a21      	ldr	r1, [r4, #32]
 8006d96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b0      	blx	r6
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	dc06      	bgt.n	8006dae <__sflush_r+0xfe>
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da6:	81a3      	strh	r3, [r4, #12]
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	e78e      	b.n	8006ccc <__sflush_r+0x1c>
 8006dae:	4407      	add	r7, r0
 8006db0:	eba8 0800 	sub.w	r8, r8, r0
 8006db4:	e7e9      	b.n	8006d8a <__sflush_r+0xda>
 8006db6:	bf00      	nop
 8006db8:	20400001 	.word	0x20400001

08006dbc <_fflush_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	690b      	ldr	r3, [r1, #16]
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b1db      	cbz	r3, 8006dfe <_fflush_r+0x42>
 8006dc6:	b118      	cbz	r0, 8006dd0 <_fflush_r+0x14>
 8006dc8:	6983      	ldr	r3, [r0, #24]
 8006dca:	b90b      	cbnz	r3, 8006dd0 <_fflush_r+0x14>
 8006dcc:	f000 f860 	bl	8006e90 <__sinit>
 8006dd0:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <_fflush_r+0x48>)
 8006dd2:	429c      	cmp	r4, r3
 8006dd4:	d109      	bne.n	8006dea <_fflush_r+0x2e>
 8006dd6:	686c      	ldr	r4, [r5, #4]
 8006dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ddc:	b17b      	cbz	r3, 8006dfe <_fflush_r+0x42>
 8006dde:	4621      	mov	r1, r4
 8006de0:	4628      	mov	r0, r5
 8006de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006de6:	f7ff bf63 	b.w	8006cb0 <__sflush_r>
 8006dea:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <_fflush_r+0x4c>)
 8006dec:	429c      	cmp	r4, r3
 8006dee:	d101      	bne.n	8006df4 <_fflush_r+0x38>
 8006df0:	68ac      	ldr	r4, [r5, #8]
 8006df2:	e7f1      	b.n	8006dd8 <_fflush_r+0x1c>
 8006df4:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <_fflush_r+0x50>)
 8006df6:	429c      	cmp	r4, r3
 8006df8:	bf08      	it	eq
 8006dfa:	68ec      	ldreq	r4, [r5, #12]
 8006dfc:	e7ec      	b.n	8006dd8 <_fflush_r+0x1c>
 8006dfe:	2000      	movs	r0, #0
 8006e00:	bd38      	pop	{r3, r4, r5, pc}
 8006e02:	bf00      	nop
 8006e04:	080079e0 	.word	0x080079e0
 8006e08:	08007a00 	.word	0x08007a00
 8006e0c:	080079c0 	.word	0x080079c0

08006e10 <std>:
 8006e10:	2300      	movs	r3, #0
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	e9c0 3300 	strd	r3, r3, [r0]
 8006e1a:	6083      	str	r3, [r0, #8]
 8006e1c:	8181      	strh	r1, [r0, #12]
 8006e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8006e20:	81c2      	strh	r2, [r0, #14]
 8006e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e26:	6183      	str	r3, [r0, #24]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	305c      	adds	r0, #92	; 0x5c
 8006e2e:	f7ff fdfb 	bl	8006a28 <memset>
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <std+0x38>)
 8006e34:	6263      	str	r3, [r4, #36]	; 0x24
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <std+0x3c>)
 8006e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e3a:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <std+0x40>)
 8006e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e3e:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <std+0x44>)
 8006e40:	6224      	str	r4, [r4, #32]
 8006e42:	6323      	str	r3, [r4, #48]	; 0x30
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	bf00      	nop
 8006e48:	0800776d 	.word	0x0800776d
 8006e4c:	0800778f 	.word	0x0800778f
 8006e50:	080077c7 	.word	0x080077c7
 8006e54:	080077eb 	.word	0x080077eb

08006e58 <_cleanup_r>:
 8006e58:	4901      	ldr	r1, [pc, #4]	; (8006e60 <_cleanup_r+0x8>)
 8006e5a:	f000 b885 	b.w	8006f68 <_fwalk_reent>
 8006e5e:	bf00      	nop
 8006e60:	08006dbd 	.word	0x08006dbd

08006e64 <__sfmoreglue>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	1e4a      	subs	r2, r1, #1
 8006e68:	2568      	movs	r5, #104	; 0x68
 8006e6a:	4355      	muls	r5, r2
 8006e6c:	460e      	mov	r6, r1
 8006e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e72:	f000 f949 	bl	8007108 <_malloc_r>
 8006e76:	4604      	mov	r4, r0
 8006e78:	b140      	cbz	r0, 8006e8c <__sfmoreglue+0x28>
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8006e80:	300c      	adds	r0, #12
 8006e82:	60a0      	str	r0, [r4, #8]
 8006e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e88:	f7ff fdce 	bl	8006a28 <memset>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}

08006e90 <__sinit>:
 8006e90:	6983      	ldr	r3, [r0, #24]
 8006e92:	b510      	push	{r4, lr}
 8006e94:	4604      	mov	r4, r0
 8006e96:	bb33      	cbnz	r3, 8006ee6 <__sinit+0x56>
 8006e98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006e9c:	6503      	str	r3, [r0, #80]	; 0x50
 8006e9e:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <__sinit+0x58>)
 8006ea0:	4a12      	ldr	r2, [pc, #72]	; (8006eec <__sinit+0x5c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6282      	str	r2, [r0, #40]	; 0x28
 8006ea6:	4298      	cmp	r0, r3
 8006ea8:	bf04      	itt	eq
 8006eaa:	2301      	moveq	r3, #1
 8006eac:	6183      	streq	r3, [r0, #24]
 8006eae:	f000 f81f 	bl	8006ef0 <__sfp>
 8006eb2:	6060      	str	r0, [r4, #4]
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 f81b 	bl	8006ef0 <__sfp>
 8006eba:	60a0      	str	r0, [r4, #8]
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 f817 	bl	8006ef0 <__sfp>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	60e0      	str	r0, [r4, #12]
 8006ec6:	2104      	movs	r1, #4
 8006ec8:	6860      	ldr	r0, [r4, #4]
 8006eca:	f7ff ffa1 	bl	8006e10 <std>
 8006ece:	2201      	movs	r2, #1
 8006ed0:	2109      	movs	r1, #9
 8006ed2:	68a0      	ldr	r0, [r4, #8]
 8006ed4:	f7ff ff9c 	bl	8006e10 <std>
 8006ed8:	2202      	movs	r2, #2
 8006eda:	2112      	movs	r1, #18
 8006edc:	68e0      	ldr	r0, [r4, #12]
 8006ede:	f7ff ff97 	bl	8006e10 <std>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	61a3      	str	r3, [r4, #24]
 8006ee6:	bd10      	pop	{r4, pc}
 8006ee8:	080079bc 	.word	0x080079bc
 8006eec:	08006e59 	.word	0x08006e59

08006ef0 <__sfp>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <__sfp+0x70>)
 8006ef4:	681e      	ldr	r6, [r3, #0]
 8006ef6:	69b3      	ldr	r3, [r6, #24]
 8006ef8:	4607      	mov	r7, r0
 8006efa:	b913      	cbnz	r3, 8006f02 <__sfp+0x12>
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7ff ffc7 	bl	8006e90 <__sinit>
 8006f02:	3648      	adds	r6, #72	; 0x48
 8006f04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	d503      	bpl.n	8006f14 <__sfp+0x24>
 8006f0c:	6833      	ldr	r3, [r6, #0]
 8006f0e:	b133      	cbz	r3, 8006f1e <__sfp+0x2e>
 8006f10:	6836      	ldr	r6, [r6, #0]
 8006f12:	e7f7      	b.n	8006f04 <__sfp+0x14>
 8006f14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f18:	b16d      	cbz	r5, 8006f36 <__sfp+0x46>
 8006f1a:	3468      	adds	r4, #104	; 0x68
 8006f1c:	e7f4      	b.n	8006f08 <__sfp+0x18>
 8006f1e:	2104      	movs	r1, #4
 8006f20:	4638      	mov	r0, r7
 8006f22:	f7ff ff9f 	bl	8006e64 <__sfmoreglue>
 8006f26:	6030      	str	r0, [r6, #0]
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d1f1      	bne.n	8006f10 <__sfp+0x20>
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	4604      	mov	r4, r0
 8006f32:	4620      	mov	r0, r4
 8006f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f36:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <__sfp+0x74>)
 8006f38:	6665      	str	r5, [r4, #100]	; 0x64
 8006f3a:	e9c4 5500 	strd	r5, r5, [r4]
 8006f3e:	60a5      	str	r5, [r4, #8]
 8006f40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006f44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006f48:	2208      	movs	r2, #8
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f50:	f7ff fd6a 	bl	8006a28 <memset>
 8006f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f5c:	e7e9      	b.n	8006f32 <__sfp+0x42>
 8006f5e:	bf00      	nop
 8006f60:	080079bc 	.word	0x080079bc
 8006f64:	ffff0001 	.word	0xffff0001

08006f68 <_fwalk_reent>:
 8006f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	4689      	mov	r9, r1
 8006f70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f74:	2600      	movs	r6, #0
 8006f76:	b914      	cbnz	r4, 8006f7e <_fwalk_reent+0x16>
 8006f78:	4630      	mov	r0, r6
 8006f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006f82:	3f01      	subs	r7, #1
 8006f84:	d501      	bpl.n	8006f8a <_fwalk_reent+0x22>
 8006f86:	6824      	ldr	r4, [r4, #0]
 8006f88:	e7f5      	b.n	8006f76 <_fwalk_reent+0xe>
 8006f8a:	89ab      	ldrh	r3, [r5, #12]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d907      	bls.n	8006fa0 <_fwalk_reent+0x38>
 8006f90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f94:	3301      	adds	r3, #1
 8006f96:	d003      	beq.n	8006fa0 <_fwalk_reent+0x38>
 8006f98:	4629      	mov	r1, r5
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	47c8      	blx	r9
 8006f9e:	4306      	orrs	r6, r0
 8006fa0:	3568      	adds	r5, #104	; 0x68
 8006fa2:	e7ee      	b.n	8006f82 <_fwalk_reent+0x1a>

08006fa4 <__swhatbuf_r>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	460e      	mov	r6, r1
 8006fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fac:	2900      	cmp	r1, #0
 8006fae:	b096      	sub	sp, #88	; 0x58
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	461d      	mov	r5, r3
 8006fb4:	da07      	bge.n	8006fc6 <__swhatbuf_r+0x22>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	602b      	str	r3, [r5, #0]
 8006fba:	89b3      	ldrh	r3, [r6, #12]
 8006fbc:	061a      	lsls	r2, r3, #24
 8006fbe:	d410      	bmi.n	8006fe2 <__swhatbuf_r+0x3e>
 8006fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fc4:	e00e      	b.n	8006fe4 <__swhatbuf_r+0x40>
 8006fc6:	466a      	mov	r2, sp
 8006fc8:	f000 fc36 	bl	8007838 <_fstat_r>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	dbf2      	blt.n	8006fb6 <__swhatbuf_r+0x12>
 8006fd0:	9a01      	ldr	r2, [sp, #4]
 8006fd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fda:	425a      	negs	r2, r3
 8006fdc:	415a      	adcs	r2, r3
 8006fde:	602a      	str	r2, [r5, #0]
 8006fe0:	e7ee      	b.n	8006fc0 <__swhatbuf_r+0x1c>
 8006fe2:	2340      	movs	r3, #64	; 0x40
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	6023      	str	r3, [r4, #0]
 8006fe8:	b016      	add	sp, #88	; 0x58
 8006fea:	bd70      	pop	{r4, r5, r6, pc}

08006fec <__smakebuf_r>:
 8006fec:	898b      	ldrh	r3, [r1, #12]
 8006fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ff0:	079d      	lsls	r5, r3, #30
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	d507      	bpl.n	8007008 <__smakebuf_r+0x1c>
 8006ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	6123      	str	r3, [r4, #16]
 8007000:	2301      	movs	r3, #1
 8007002:	6163      	str	r3, [r4, #20]
 8007004:	b002      	add	sp, #8
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	ab01      	add	r3, sp, #4
 800700a:	466a      	mov	r2, sp
 800700c:	f7ff ffca 	bl	8006fa4 <__swhatbuf_r>
 8007010:	9900      	ldr	r1, [sp, #0]
 8007012:	4605      	mov	r5, r0
 8007014:	4630      	mov	r0, r6
 8007016:	f000 f877 	bl	8007108 <_malloc_r>
 800701a:	b948      	cbnz	r0, 8007030 <__smakebuf_r+0x44>
 800701c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007020:	059a      	lsls	r2, r3, #22
 8007022:	d4ef      	bmi.n	8007004 <__smakebuf_r+0x18>
 8007024:	f023 0303 	bic.w	r3, r3, #3
 8007028:	f043 0302 	orr.w	r3, r3, #2
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	e7e3      	b.n	8006ff8 <__smakebuf_r+0xc>
 8007030:	4b0d      	ldr	r3, [pc, #52]	; (8007068 <__smakebuf_r+0x7c>)
 8007032:	62b3      	str	r3, [r6, #40]	; 0x28
 8007034:	89a3      	ldrh	r3, [r4, #12]
 8007036:	6020      	str	r0, [r4, #0]
 8007038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703c:	81a3      	strh	r3, [r4, #12]
 800703e:	9b00      	ldr	r3, [sp, #0]
 8007040:	6163      	str	r3, [r4, #20]
 8007042:	9b01      	ldr	r3, [sp, #4]
 8007044:	6120      	str	r0, [r4, #16]
 8007046:	b15b      	cbz	r3, 8007060 <__smakebuf_r+0x74>
 8007048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800704c:	4630      	mov	r0, r6
 800704e:	f000 fc05 	bl	800785c <_isatty_r>
 8007052:	b128      	cbz	r0, 8007060 <__smakebuf_r+0x74>
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	f023 0303 	bic.w	r3, r3, #3
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	81a3      	strh	r3, [r4, #12]
 8007060:	89a3      	ldrh	r3, [r4, #12]
 8007062:	431d      	orrs	r5, r3
 8007064:	81a5      	strh	r5, [r4, #12]
 8007066:	e7cd      	b.n	8007004 <__smakebuf_r+0x18>
 8007068:	08006e59 	.word	0x08006e59

0800706c <_free_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4605      	mov	r5, r0
 8007070:	2900      	cmp	r1, #0
 8007072:	d045      	beq.n	8007100 <_free_r+0x94>
 8007074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007078:	1f0c      	subs	r4, r1, #4
 800707a:	2b00      	cmp	r3, #0
 800707c:	bfb8      	it	lt
 800707e:	18e4      	addlt	r4, r4, r3
 8007080:	f000 fc0e 	bl	80078a0 <__malloc_lock>
 8007084:	4a1f      	ldr	r2, [pc, #124]	; (8007104 <_free_r+0x98>)
 8007086:	6813      	ldr	r3, [r2, #0]
 8007088:	4610      	mov	r0, r2
 800708a:	b933      	cbnz	r3, 800709a <_free_r+0x2e>
 800708c:	6063      	str	r3, [r4, #4]
 800708e:	6014      	str	r4, [r2, #0]
 8007090:	4628      	mov	r0, r5
 8007092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007096:	f000 bc04 	b.w	80078a2 <__malloc_unlock>
 800709a:	42a3      	cmp	r3, r4
 800709c:	d90c      	bls.n	80070b8 <_free_r+0x4c>
 800709e:	6821      	ldr	r1, [r4, #0]
 80070a0:	1862      	adds	r2, r4, r1
 80070a2:	4293      	cmp	r3, r2
 80070a4:	bf04      	itt	eq
 80070a6:	681a      	ldreq	r2, [r3, #0]
 80070a8:	685b      	ldreq	r3, [r3, #4]
 80070aa:	6063      	str	r3, [r4, #4]
 80070ac:	bf04      	itt	eq
 80070ae:	1852      	addeq	r2, r2, r1
 80070b0:	6022      	streq	r2, [r4, #0]
 80070b2:	6004      	str	r4, [r0, #0]
 80070b4:	e7ec      	b.n	8007090 <_free_r+0x24>
 80070b6:	4613      	mov	r3, r2
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	b10a      	cbz	r2, 80070c0 <_free_r+0x54>
 80070bc:	42a2      	cmp	r2, r4
 80070be:	d9fa      	bls.n	80070b6 <_free_r+0x4a>
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	1858      	adds	r0, r3, r1
 80070c4:	42a0      	cmp	r0, r4
 80070c6:	d10b      	bne.n	80070e0 <_free_r+0x74>
 80070c8:	6820      	ldr	r0, [r4, #0]
 80070ca:	4401      	add	r1, r0
 80070cc:	1858      	adds	r0, r3, r1
 80070ce:	4282      	cmp	r2, r0
 80070d0:	6019      	str	r1, [r3, #0]
 80070d2:	d1dd      	bne.n	8007090 <_free_r+0x24>
 80070d4:	6810      	ldr	r0, [r2, #0]
 80070d6:	6852      	ldr	r2, [r2, #4]
 80070d8:	605a      	str	r2, [r3, #4]
 80070da:	4401      	add	r1, r0
 80070dc:	6019      	str	r1, [r3, #0]
 80070de:	e7d7      	b.n	8007090 <_free_r+0x24>
 80070e0:	d902      	bls.n	80070e8 <_free_r+0x7c>
 80070e2:	230c      	movs	r3, #12
 80070e4:	602b      	str	r3, [r5, #0]
 80070e6:	e7d3      	b.n	8007090 <_free_r+0x24>
 80070e8:	6820      	ldr	r0, [r4, #0]
 80070ea:	1821      	adds	r1, r4, r0
 80070ec:	428a      	cmp	r2, r1
 80070ee:	bf04      	itt	eq
 80070f0:	6811      	ldreq	r1, [r2, #0]
 80070f2:	6852      	ldreq	r2, [r2, #4]
 80070f4:	6062      	str	r2, [r4, #4]
 80070f6:	bf04      	itt	eq
 80070f8:	1809      	addeq	r1, r1, r0
 80070fa:	6021      	streq	r1, [r4, #0]
 80070fc:	605c      	str	r4, [r3, #4]
 80070fe:	e7c7      	b.n	8007090 <_free_r+0x24>
 8007100:	bd38      	pop	{r3, r4, r5, pc}
 8007102:	bf00      	nop
 8007104:	20000090 	.word	0x20000090

08007108 <_malloc_r>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	1ccd      	adds	r5, r1, #3
 800710c:	f025 0503 	bic.w	r5, r5, #3
 8007110:	3508      	adds	r5, #8
 8007112:	2d0c      	cmp	r5, #12
 8007114:	bf38      	it	cc
 8007116:	250c      	movcc	r5, #12
 8007118:	2d00      	cmp	r5, #0
 800711a:	4606      	mov	r6, r0
 800711c:	db01      	blt.n	8007122 <_malloc_r+0x1a>
 800711e:	42a9      	cmp	r1, r5
 8007120:	d903      	bls.n	800712a <_malloc_r+0x22>
 8007122:	230c      	movs	r3, #12
 8007124:	6033      	str	r3, [r6, #0]
 8007126:	2000      	movs	r0, #0
 8007128:	bd70      	pop	{r4, r5, r6, pc}
 800712a:	f000 fbb9 	bl	80078a0 <__malloc_lock>
 800712e:	4a21      	ldr	r2, [pc, #132]	; (80071b4 <_malloc_r+0xac>)
 8007130:	6814      	ldr	r4, [r2, #0]
 8007132:	4621      	mov	r1, r4
 8007134:	b991      	cbnz	r1, 800715c <_malloc_r+0x54>
 8007136:	4c20      	ldr	r4, [pc, #128]	; (80071b8 <_malloc_r+0xb0>)
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	b91b      	cbnz	r3, 8007144 <_malloc_r+0x3c>
 800713c:	4630      	mov	r0, r6
 800713e:	f000 fb05 	bl	800774c <_sbrk_r>
 8007142:	6020      	str	r0, [r4, #0]
 8007144:	4629      	mov	r1, r5
 8007146:	4630      	mov	r0, r6
 8007148:	f000 fb00 	bl	800774c <_sbrk_r>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d124      	bne.n	800719a <_malloc_r+0x92>
 8007150:	230c      	movs	r3, #12
 8007152:	6033      	str	r3, [r6, #0]
 8007154:	4630      	mov	r0, r6
 8007156:	f000 fba4 	bl	80078a2 <__malloc_unlock>
 800715a:	e7e4      	b.n	8007126 <_malloc_r+0x1e>
 800715c:	680b      	ldr	r3, [r1, #0]
 800715e:	1b5b      	subs	r3, r3, r5
 8007160:	d418      	bmi.n	8007194 <_malloc_r+0x8c>
 8007162:	2b0b      	cmp	r3, #11
 8007164:	d90f      	bls.n	8007186 <_malloc_r+0x7e>
 8007166:	600b      	str	r3, [r1, #0]
 8007168:	50cd      	str	r5, [r1, r3]
 800716a:	18cc      	adds	r4, r1, r3
 800716c:	4630      	mov	r0, r6
 800716e:	f000 fb98 	bl	80078a2 <__malloc_unlock>
 8007172:	f104 000b 	add.w	r0, r4, #11
 8007176:	1d23      	adds	r3, r4, #4
 8007178:	f020 0007 	bic.w	r0, r0, #7
 800717c:	1ac3      	subs	r3, r0, r3
 800717e:	d0d3      	beq.n	8007128 <_malloc_r+0x20>
 8007180:	425a      	negs	r2, r3
 8007182:	50e2      	str	r2, [r4, r3]
 8007184:	e7d0      	b.n	8007128 <_malloc_r+0x20>
 8007186:	428c      	cmp	r4, r1
 8007188:	684b      	ldr	r3, [r1, #4]
 800718a:	bf16      	itet	ne
 800718c:	6063      	strne	r3, [r4, #4]
 800718e:	6013      	streq	r3, [r2, #0]
 8007190:	460c      	movne	r4, r1
 8007192:	e7eb      	b.n	800716c <_malloc_r+0x64>
 8007194:	460c      	mov	r4, r1
 8007196:	6849      	ldr	r1, [r1, #4]
 8007198:	e7cc      	b.n	8007134 <_malloc_r+0x2c>
 800719a:	1cc4      	adds	r4, r0, #3
 800719c:	f024 0403 	bic.w	r4, r4, #3
 80071a0:	42a0      	cmp	r0, r4
 80071a2:	d005      	beq.n	80071b0 <_malloc_r+0xa8>
 80071a4:	1a21      	subs	r1, r4, r0
 80071a6:	4630      	mov	r0, r6
 80071a8:	f000 fad0 	bl	800774c <_sbrk_r>
 80071ac:	3001      	adds	r0, #1
 80071ae:	d0cf      	beq.n	8007150 <_malloc_r+0x48>
 80071b0:	6025      	str	r5, [r4, #0]
 80071b2:	e7db      	b.n	800716c <_malloc_r+0x64>
 80071b4:	20000090 	.word	0x20000090
 80071b8:	20000094 	.word	0x20000094

080071bc <__sfputc_r>:
 80071bc:	6893      	ldr	r3, [r2, #8]
 80071be:	3b01      	subs	r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	b410      	push	{r4}
 80071c4:	6093      	str	r3, [r2, #8]
 80071c6:	da08      	bge.n	80071da <__sfputc_r+0x1e>
 80071c8:	6994      	ldr	r4, [r2, #24]
 80071ca:	42a3      	cmp	r3, r4
 80071cc:	db01      	blt.n	80071d2 <__sfputc_r+0x16>
 80071ce:	290a      	cmp	r1, #10
 80071d0:	d103      	bne.n	80071da <__sfputc_r+0x1e>
 80071d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071d6:	f7ff bcab 	b.w	8006b30 <__swbuf_r>
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	1c58      	adds	r0, r3, #1
 80071de:	6010      	str	r0, [r2, #0]
 80071e0:	7019      	strb	r1, [r3, #0]
 80071e2:	4608      	mov	r0, r1
 80071e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <__sfputs_r>:
 80071ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ec:	4606      	mov	r6, r0
 80071ee:	460f      	mov	r7, r1
 80071f0:	4614      	mov	r4, r2
 80071f2:	18d5      	adds	r5, r2, r3
 80071f4:	42ac      	cmp	r4, r5
 80071f6:	d101      	bne.n	80071fc <__sfputs_r+0x12>
 80071f8:	2000      	movs	r0, #0
 80071fa:	e007      	b.n	800720c <__sfputs_r+0x22>
 80071fc:	463a      	mov	r2, r7
 80071fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007202:	4630      	mov	r0, r6
 8007204:	f7ff ffda 	bl	80071bc <__sfputc_r>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d1f3      	bne.n	80071f4 <__sfputs_r+0xa>
 800720c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007210 <_vfiprintf_r>:
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	460c      	mov	r4, r1
 8007216:	b09d      	sub	sp, #116	; 0x74
 8007218:	4617      	mov	r7, r2
 800721a:	461d      	mov	r5, r3
 800721c:	4606      	mov	r6, r0
 800721e:	b118      	cbz	r0, 8007228 <_vfiprintf_r+0x18>
 8007220:	6983      	ldr	r3, [r0, #24]
 8007222:	b90b      	cbnz	r3, 8007228 <_vfiprintf_r+0x18>
 8007224:	f7ff fe34 	bl	8006e90 <__sinit>
 8007228:	4b7c      	ldr	r3, [pc, #496]	; (800741c <_vfiprintf_r+0x20c>)
 800722a:	429c      	cmp	r4, r3
 800722c:	d158      	bne.n	80072e0 <_vfiprintf_r+0xd0>
 800722e:	6874      	ldr	r4, [r6, #4]
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	0718      	lsls	r0, r3, #28
 8007234:	d55e      	bpl.n	80072f4 <_vfiprintf_r+0xe4>
 8007236:	6923      	ldr	r3, [r4, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d05b      	beq.n	80072f4 <_vfiprintf_r+0xe4>
 800723c:	2300      	movs	r3, #0
 800723e:	9309      	str	r3, [sp, #36]	; 0x24
 8007240:	2320      	movs	r3, #32
 8007242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007246:	2330      	movs	r3, #48	; 0x30
 8007248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800724c:	9503      	str	r5, [sp, #12]
 800724e:	f04f 0b01 	mov.w	fp, #1
 8007252:	46b8      	mov	r8, r7
 8007254:	4645      	mov	r5, r8
 8007256:	f815 3b01 	ldrb.w	r3, [r5], #1
 800725a:	b10b      	cbz	r3, 8007260 <_vfiprintf_r+0x50>
 800725c:	2b25      	cmp	r3, #37	; 0x25
 800725e:	d154      	bne.n	800730a <_vfiprintf_r+0xfa>
 8007260:	ebb8 0a07 	subs.w	sl, r8, r7
 8007264:	d00b      	beq.n	800727e <_vfiprintf_r+0x6e>
 8007266:	4653      	mov	r3, sl
 8007268:	463a      	mov	r2, r7
 800726a:	4621      	mov	r1, r4
 800726c:	4630      	mov	r0, r6
 800726e:	f7ff ffbc 	bl	80071ea <__sfputs_r>
 8007272:	3001      	adds	r0, #1
 8007274:	f000 80c2 	beq.w	80073fc <_vfiprintf_r+0x1ec>
 8007278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727a:	4453      	add	r3, sl
 800727c:	9309      	str	r3, [sp, #36]	; 0x24
 800727e:	f898 3000 	ldrb.w	r3, [r8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80ba 	beq.w	80073fc <_vfiprintf_r+0x1ec>
 8007288:	2300      	movs	r3, #0
 800728a:	f04f 32ff 	mov.w	r2, #4294967295
 800728e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007292:	9304      	str	r3, [sp, #16]
 8007294:	9307      	str	r3, [sp, #28]
 8007296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800729a:	931a      	str	r3, [sp, #104]	; 0x68
 800729c:	46a8      	mov	r8, r5
 800729e:	2205      	movs	r2, #5
 80072a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80072a4:	485e      	ldr	r0, [pc, #376]	; (8007420 <_vfiprintf_r+0x210>)
 80072a6:	f7f8 ff93 	bl	80001d0 <memchr>
 80072aa:	9b04      	ldr	r3, [sp, #16]
 80072ac:	bb78      	cbnz	r0, 800730e <_vfiprintf_r+0xfe>
 80072ae:	06d9      	lsls	r1, r3, #27
 80072b0:	bf44      	itt	mi
 80072b2:	2220      	movmi	r2, #32
 80072b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072b8:	071a      	lsls	r2, r3, #28
 80072ba:	bf44      	itt	mi
 80072bc:	222b      	movmi	r2, #43	; 0x2b
 80072be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072c2:	782a      	ldrb	r2, [r5, #0]
 80072c4:	2a2a      	cmp	r2, #42	; 0x2a
 80072c6:	d02a      	beq.n	800731e <_vfiprintf_r+0x10e>
 80072c8:	9a07      	ldr	r2, [sp, #28]
 80072ca:	46a8      	mov	r8, r5
 80072cc:	2000      	movs	r0, #0
 80072ce:	250a      	movs	r5, #10
 80072d0:	4641      	mov	r1, r8
 80072d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072d6:	3b30      	subs	r3, #48	; 0x30
 80072d8:	2b09      	cmp	r3, #9
 80072da:	d969      	bls.n	80073b0 <_vfiprintf_r+0x1a0>
 80072dc:	b360      	cbz	r0, 8007338 <_vfiprintf_r+0x128>
 80072de:	e024      	b.n	800732a <_vfiprintf_r+0x11a>
 80072e0:	4b50      	ldr	r3, [pc, #320]	; (8007424 <_vfiprintf_r+0x214>)
 80072e2:	429c      	cmp	r4, r3
 80072e4:	d101      	bne.n	80072ea <_vfiprintf_r+0xda>
 80072e6:	68b4      	ldr	r4, [r6, #8]
 80072e8:	e7a2      	b.n	8007230 <_vfiprintf_r+0x20>
 80072ea:	4b4f      	ldr	r3, [pc, #316]	; (8007428 <_vfiprintf_r+0x218>)
 80072ec:	429c      	cmp	r4, r3
 80072ee:	bf08      	it	eq
 80072f0:	68f4      	ldreq	r4, [r6, #12]
 80072f2:	e79d      	b.n	8007230 <_vfiprintf_r+0x20>
 80072f4:	4621      	mov	r1, r4
 80072f6:	4630      	mov	r0, r6
 80072f8:	f7ff fc6c 	bl	8006bd4 <__swsetup_r>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d09d      	beq.n	800723c <_vfiprintf_r+0x2c>
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	b01d      	add	sp, #116	; 0x74
 8007306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730a:	46a8      	mov	r8, r5
 800730c:	e7a2      	b.n	8007254 <_vfiprintf_r+0x44>
 800730e:	4a44      	ldr	r2, [pc, #272]	; (8007420 <_vfiprintf_r+0x210>)
 8007310:	1a80      	subs	r0, r0, r2
 8007312:	fa0b f000 	lsl.w	r0, fp, r0
 8007316:	4318      	orrs	r0, r3
 8007318:	9004      	str	r0, [sp, #16]
 800731a:	4645      	mov	r5, r8
 800731c:	e7be      	b.n	800729c <_vfiprintf_r+0x8c>
 800731e:	9a03      	ldr	r2, [sp, #12]
 8007320:	1d11      	adds	r1, r2, #4
 8007322:	6812      	ldr	r2, [r2, #0]
 8007324:	9103      	str	r1, [sp, #12]
 8007326:	2a00      	cmp	r2, #0
 8007328:	db01      	blt.n	800732e <_vfiprintf_r+0x11e>
 800732a:	9207      	str	r2, [sp, #28]
 800732c:	e004      	b.n	8007338 <_vfiprintf_r+0x128>
 800732e:	4252      	negs	r2, r2
 8007330:	f043 0302 	orr.w	r3, r3, #2
 8007334:	9207      	str	r2, [sp, #28]
 8007336:	9304      	str	r3, [sp, #16]
 8007338:	f898 3000 	ldrb.w	r3, [r8]
 800733c:	2b2e      	cmp	r3, #46	; 0x2e
 800733e:	d10e      	bne.n	800735e <_vfiprintf_r+0x14e>
 8007340:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007344:	2b2a      	cmp	r3, #42	; 0x2a
 8007346:	d138      	bne.n	80073ba <_vfiprintf_r+0x1aa>
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	1d1a      	adds	r2, r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	9203      	str	r2, [sp, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	bfb8      	it	lt
 8007354:	f04f 33ff 	movlt.w	r3, #4294967295
 8007358:	f108 0802 	add.w	r8, r8, #2
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	4d33      	ldr	r5, [pc, #204]	; (800742c <_vfiprintf_r+0x21c>)
 8007360:	f898 1000 	ldrb.w	r1, [r8]
 8007364:	2203      	movs	r2, #3
 8007366:	4628      	mov	r0, r5
 8007368:	f7f8 ff32 	bl	80001d0 <memchr>
 800736c:	b140      	cbz	r0, 8007380 <_vfiprintf_r+0x170>
 800736e:	2340      	movs	r3, #64	; 0x40
 8007370:	1b40      	subs	r0, r0, r5
 8007372:	fa03 f000 	lsl.w	r0, r3, r0
 8007376:	9b04      	ldr	r3, [sp, #16]
 8007378:	4303      	orrs	r3, r0
 800737a:	f108 0801 	add.w	r8, r8, #1
 800737e:	9304      	str	r3, [sp, #16]
 8007380:	f898 1000 	ldrb.w	r1, [r8]
 8007384:	482a      	ldr	r0, [pc, #168]	; (8007430 <_vfiprintf_r+0x220>)
 8007386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800738a:	2206      	movs	r2, #6
 800738c:	f108 0701 	add.w	r7, r8, #1
 8007390:	f7f8 ff1e 	bl	80001d0 <memchr>
 8007394:	2800      	cmp	r0, #0
 8007396:	d037      	beq.n	8007408 <_vfiprintf_r+0x1f8>
 8007398:	4b26      	ldr	r3, [pc, #152]	; (8007434 <_vfiprintf_r+0x224>)
 800739a:	bb1b      	cbnz	r3, 80073e4 <_vfiprintf_r+0x1d4>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	3307      	adds	r3, #7
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	3308      	adds	r3, #8
 80073a6:	9303      	str	r3, [sp, #12]
 80073a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073aa:	444b      	add	r3, r9
 80073ac:	9309      	str	r3, [sp, #36]	; 0x24
 80073ae:	e750      	b.n	8007252 <_vfiprintf_r+0x42>
 80073b0:	fb05 3202 	mla	r2, r5, r2, r3
 80073b4:	2001      	movs	r0, #1
 80073b6:	4688      	mov	r8, r1
 80073b8:	e78a      	b.n	80072d0 <_vfiprintf_r+0xc0>
 80073ba:	2300      	movs	r3, #0
 80073bc:	f108 0801 	add.w	r8, r8, #1
 80073c0:	9305      	str	r3, [sp, #20]
 80073c2:	4619      	mov	r1, r3
 80073c4:	250a      	movs	r5, #10
 80073c6:	4640      	mov	r0, r8
 80073c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073cc:	3a30      	subs	r2, #48	; 0x30
 80073ce:	2a09      	cmp	r2, #9
 80073d0:	d903      	bls.n	80073da <_vfiprintf_r+0x1ca>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0c3      	beq.n	800735e <_vfiprintf_r+0x14e>
 80073d6:	9105      	str	r1, [sp, #20]
 80073d8:	e7c1      	b.n	800735e <_vfiprintf_r+0x14e>
 80073da:	fb05 2101 	mla	r1, r5, r1, r2
 80073de:	2301      	movs	r3, #1
 80073e0:	4680      	mov	r8, r0
 80073e2:	e7f0      	b.n	80073c6 <_vfiprintf_r+0x1b6>
 80073e4:	ab03      	add	r3, sp, #12
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	4622      	mov	r2, r4
 80073ea:	4b13      	ldr	r3, [pc, #76]	; (8007438 <_vfiprintf_r+0x228>)
 80073ec:	a904      	add	r1, sp, #16
 80073ee:	4630      	mov	r0, r6
 80073f0:	f3af 8000 	nop.w
 80073f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80073f8:	4681      	mov	r9, r0
 80073fa:	d1d5      	bne.n	80073a8 <_vfiprintf_r+0x198>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	065b      	lsls	r3, r3, #25
 8007400:	f53f af7e 	bmi.w	8007300 <_vfiprintf_r+0xf0>
 8007404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007406:	e77d      	b.n	8007304 <_vfiprintf_r+0xf4>
 8007408:	ab03      	add	r3, sp, #12
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	4622      	mov	r2, r4
 800740e:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <_vfiprintf_r+0x228>)
 8007410:	a904      	add	r1, sp, #16
 8007412:	4630      	mov	r0, r6
 8007414:	f000 f888 	bl	8007528 <_printf_i>
 8007418:	e7ec      	b.n	80073f4 <_vfiprintf_r+0x1e4>
 800741a:	bf00      	nop
 800741c:	080079e0 	.word	0x080079e0
 8007420:	08007a20 	.word	0x08007a20
 8007424:	08007a00 	.word	0x08007a00
 8007428:	080079c0 	.word	0x080079c0
 800742c:	08007a26 	.word	0x08007a26
 8007430:	08007a2a 	.word	0x08007a2a
 8007434:	00000000 	.word	0x00000000
 8007438:	080071eb 	.word	0x080071eb

0800743c <_printf_common>:
 800743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	4691      	mov	r9, r2
 8007442:	461f      	mov	r7, r3
 8007444:	688a      	ldr	r2, [r1, #8]
 8007446:	690b      	ldr	r3, [r1, #16]
 8007448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800744c:	4293      	cmp	r3, r2
 800744e:	bfb8      	it	lt
 8007450:	4613      	movlt	r3, r2
 8007452:	f8c9 3000 	str.w	r3, [r9]
 8007456:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800745a:	4606      	mov	r6, r0
 800745c:	460c      	mov	r4, r1
 800745e:	b112      	cbz	r2, 8007466 <_printf_common+0x2a>
 8007460:	3301      	adds	r3, #1
 8007462:	f8c9 3000 	str.w	r3, [r9]
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	0699      	lsls	r1, r3, #26
 800746a:	bf42      	ittt	mi
 800746c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007470:	3302      	addmi	r3, #2
 8007472:	f8c9 3000 	strmi.w	r3, [r9]
 8007476:	6825      	ldr	r5, [r4, #0]
 8007478:	f015 0506 	ands.w	r5, r5, #6
 800747c:	d107      	bne.n	800748e <_printf_common+0x52>
 800747e:	f104 0a19 	add.w	sl, r4, #25
 8007482:	68e3      	ldr	r3, [r4, #12]
 8007484:	f8d9 2000 	ldr.w	r2, [r9]
 8007488:	1a9b      	subs	r3, r3, r2
 800748a:	42ab      	cmp	r3, r5
 800748c:	dc28      	bgt.n	80074e0 <_printf_common+0xa4>
 800748e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	3300      	adds	r3, #0
 8007496:	bf18      	it	ne
 8007498:	2301      	movne	r3, #1
 800749a:	0692      	lsls	r2, r2, #26
 800749c:	d42d      	bmi.n	80074fa <_printf_common+0xbe>
 800749e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074a2:	4639      	mov	r1, r7
 80074a4:	4630      	mov	r0, r6
 80074a6:	47c0      	blx	r8
 80074a8:	3001      	adds	r0, #1
 80074aa:	d020      	beq.n	80074ee <_printf_common+0xb2>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	68e5      	ldr	r5, [r4, #12]
 80074b0:	f8d9 2000 	ldr.w	r2, [r9]
 80074b4:	f003 0306 	and.w	r3, r3, #6
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	bf08      	it	eq
 80074bc:	1aad      	subeq	r5, r5, r2
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	6922      	ldr	r2, [r4, #16]
 80074c2:	bf0c      	ite	eq
 80074c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c8:	2500      	movne	r5, #0
 80074ca:	4293      	cmp	r3, r2
 80074cc:	bfc4      	itt	gt
 80074ce:	1a9b      	subgt	r3, r3, r2
 80074d0:	18ed      	addgt	r5, r5, r3
 80074d2:	f04f 0900 	mov.w	r9, #0
 80074d6:	341a      	adds	r4, #26
 80074d8:	454d      	cmp	r5, r9
 80074da:	d11a      	bne.n	8007512 <_printf_common+0xd6>
 80074dc:	2000      	movs	r0, #0
 80074de:	e008      	b.n	80074f2 <_printf_common+0xb6>
 80074e0:	2301      	movs	r3, #1
 80074e2:	4652      	mov	r2, sl
 80074e4:	4639      	mov	r1, r7
 80074e6:	4630      	mov	r0, r6
 80074e8:	47c0      	blx	r8
 80074ea:	3001      	adds	r0, #1
 80074ec:	d103      	bne.n	80074f6 <_printf_common+0xba>
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f6:	3501      	adds	r5, #1
 80074f8:	e7c3      	b.n	8007482 <_printf_common+0x46>
 80074fa:	18e1      	adds	r1, r4, r3
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	2030      	movs	r0, #48	; 0x30
 8007500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007504:	4422      	add	r2, r4
 8007506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800750a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800750e:	3302      	adds	r3, #2
 8007510:	e7c5      	b.n	800749e <_printf_common+0x62>
 8007512:	2301      	movs	r3, #1
 8007514:	4622      	mov	r2, r4
 8007516:	4639      	mov	r1, r7
 8007518:	4630      	mov	r0, r6
 800751a:	47c0      	blx	r8
 800751c:	3001      	adds	r0, #1
 800751e:	d0e6      	beq.n	80074ee <_printf_common+0xb2>
 8007520:	f109 0901 	add.w	r9, r9, #1
 8007524:	e7d8      	b.n	80074d8 <_printf_common+0x9c>
	...

08007528 <_printf_i>:
 8007528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800752c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007530:	460c      	mov	r4, r1
 8007532:	7e09      	ldrb	r1, [r1, #24]
 8007534:	b085      	sub	sp, #20
 8007536:	296e      	cmp	r1, #110	; 0x6e
 8007538:	4617      	mov	r7, r2
 800753a:	4606      	mov	r6, r0
 800753c:	4698      	mov	r8, r3
 800753e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007540:	f000 80b3 	beq.w	80076aa <_printf_i+0x182>
 8007544:	d822      	bhi.n	800758c <_printf_i+0x64>
 8007546:	2963      	cmp	r1, #99	; 0x63
 8007548:	d036      	beq.n	80075b8 <_printf_i+0x90>
 800754a:	d80a      	bhi.n	8007562 <_printf_i+0x3a>
 800754c:	2900      	cmp	r1, #0
 800754e:	f000 80b9 	beq.w	80076c4 <_printf_i+0x19c>
 8007552:	2958      	cmp	r1, #88	; 0x58
 8007554:	f000 8083 	beq.w	800765e <_printf_i+0x136>
 8007558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800755c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007560:	e032      	b.n	80075c8 <_printf_i+0xa0>
 8007562:	2964      	cmp	r1, #100	; 0x64
 8007564:	d001      	beq.n	800756a <_printf_i+0x42>
 8007566:	2969      	cmp	r1, #105	; 0x69
 8007568:	d1f6      	bne.n	8007558 <_printf_i+0x30>
 800756a:	6820      	ldr	r0, [r4, #0]
 800756c:	6813      	ldr	r3, [r2, #0]
 800756e:	0605      	lsls	r5, r0, #24
 8007570:	f103 0104 	add.w	r1, r3, #4
 8007574:	d52a      	bpl.n	80075cc <_printf_i+0xa4>
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6011      	str	r1, [r2, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	da03      	bge.n	8007586 <_printf_i+0x5e>
 800757e:	222d      	movs	r2, #45	; 0x2d
 8007580:	425b      	negs	r3, r3
 8007582:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007586:	486f      	ldr	r0, [pc, #444]	; (8007744 <_printf_i+0x21c>)
 8007588:	220a      	movs	r2, #10
 800758a:	e039      	b.n	8007600 <_printf_i+0xd8>
 800758c:	2973      	cmp	r1, #115	; 0x73
 800758e:	f000 809d 	beq.w	80076cc <_printf_i+0x1a4>
 8007592:	d808      	bhi.n	80075a6 <_printf_i+0x7e>
 8007594:	296f      	cmp	r1, #111	; 0x6f
 8007596:	d020      	beq.n	80075da <_printf_i+0xb2>
 8007598:	2970      	cmp	r1, #112	; 0x70
 800759a:	d1dd      	bne.n	8007558 <_printf_i+0x30>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	f043 0320 	orr.w	r3, r3, #32
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	e003      	b.n	80075ae <_printf_i+0x86>
 80075a6:	2975      	cmp	r1, #117	; 0x75
 80075a8:	d017      	beq.n	80075da <_printf_i+0xb2>
 80075aa:	2978      	cmp	r1, #120	; 0x78
 80075ac:	d1d4      	bne.n	8007558 <_printf_i+0x30>
 80075ae:	2378      	movs	r3, #120	; 0x78
 80075b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075b4:	4864      	ldr	r0, [pc, #400]	; (8007748 <_printf_i+0x220>)
 80075b6:	e055      	b.n	8007664 <_printf_i+0x13c>
 80075b8:	6813      	ldr	r3, [r2, #0]
 80075ba:	1d19      	adds	r1, r3, #4
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6011      	str	r1, [r2, #0]
 80075c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075c8:	2301      	movs	r3, #1
 80075ca:	e08c      	b.n	80076e6 <_printf_i+0x1be>
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6011      	str	r1, [r2, #0]
 80075d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075d4:	bf18      	it	ne
 80075d6:	b21b      	sxthne	r3, r3
 80075d8:	e7cf      	b.n	800757a <_printf_i+0x52>
 80075da:	6813      	ldr	r3, [r2, #0]
 80075dc:	6825      	ldr	r5, [r4, #0]
 80075de:	1d18      	adds	r0, r3, #4
 80075e0:	6010      	str	r0, [r2, #0]
 80075e2:	0628      	lsls	r0, r5, #24
 80075e4:	d501      	bpl.n	80075ea <_printf_i+0xc2>
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	e002      	b.n	80075f0 <_printf_i+0xc8>
 80075ea:	0668      	lsls	r0, r5, #25
 80075ec:	d5fb      	bpl.n	80075e6 <_printf_i+0xbe>
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	4854      	ldr	r0, [pc, #336]	; (8007744 <_printf_i+0x21c>)
 80075f2:	296f      	cmp	r1, #111	; 0x6f
 80075f4:	bf14      	ite	ne
 80075f6:	220a      	movne	r2, #10
 80075f8:	2208      	moveq	r2, #8
 80075fa:	2100      	movs	r1, #0
 80075fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007600:	6865      	ldr	r5, [r4, #4]
 8007602:	60a5      	str	r5, [r4, #8]
 8007604:	2d00      	cmp	r5, #0
 8007606:	f2c0 8095 	blt.w	8007734 <_printf_i+0x20c>
 800760a:	6821      	ldr	r1, [r4, #0]
 800760c:	f021 0104 	bic.w	r1, r1, #4
 8007610:	6021      	str	r1, [r4, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d13d      	bne.n	8007692 <_printf_i+0x16a>
 8007616:	2d00      	cmp	r5, #0
 8007618:	f040 808e 	bne.w	8007738 <_printf_i+0x210>
 800761c:	4665      	mov	r5, ip
 800761e:	2a08      	cmp	r2, #8
 8007620:	d10b      	bne.n	800763a <_printf_i+0x112>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	07db      	lsls	r3, r3, #31
 8007626:	d508      	bpl.n	800763a <_printf_i+0x112>
 8007628:	6923      	ldr	r3, [r4, #16]
 800762a:	6862      	ldr	r2, [r4, #4]
 800762c:	429a      	cmp	r2, r3
 800762e:	bfde      	ittt	le
 8007630:	2330      	movle	r3, #48	; 0x30
 8007632:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007636:	f105 35ff 	addle.w	r5, r5, #4294967295
 800763a:	ebac 0305 	sub.w	r3, ip, r5
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	f8cd 8000 	str.w	r8, [sp]
 8007644:	463b      	mov	r3, r7
 8007646:	aa03      	add	r2, sp, #12
 8007648:	4621      	mov	r1, r4
 800764a:	4630      	mov	r0, r6
 800764c:	f7ff fef6 	bl	800743c <_printf_common>
 8007650:	3001      	adds	r0, #1
 8007652:	d14d      	bne.n	80076f0 <_printf_i+0x1c8>
 8007654:	f04f 30ff 	mov.w	r0, #4294967295
 8007658:	b005      	add	sp, #20
 800765a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800765e:	4839      	ldr	r0, [pc, #228]	; (8007744 <_printf_i+0x21c>)
 8007660:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007664:	6813      	ldr	r3, [r2, #0]
 8007666:	6821      	ldr	r1, [r4, #0]
 8007668:	1d1d      	adds	r5, r3, #4
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6015      	str	r5, [r2, #0]
 800766e:	060a      	lsls	r2, r1, #24
 8007670:	d50b      	bpl.n	800768a <_printf_i+0x162>
 8007672:	07ca      	lsls	r2, r1, #31
 8007674:	bf44      	itt	mi
 8007676:	f041 0120 	orrmi.w	r1, r1, #32
 800767a:	6021      	strmi	r1, [r4, #0]
 800767c:	b91b      	cbnz	r3, 8007686 <_printf_i+0x15e>
 800767e:	6822      	ldr	r2, [r4, #0]
 8007680:	f022 0220 	bic.w	r2, r2, #32
 8007684:	6022      	str	r2, [r4, #0]
 8007686:	2210      	movs	r2, #16
 8007688:	e7b7      	b.n	80075fa <_printf_i+0xd2>
 800768a:	064d      	lsls	r5, r1, #25
 800768c:	bf48      	it	mi
 800768e:	b29b      	uxthmi	r3, r3
 8007690:	e7ef      	b.n	8007672 <_printf_i+0x14a>
 8007692:	4665      	mov	r5, ip
 8007694:	fbb3 f1f2 	udiv	r1, r3, r2
 8007698:	fb02 3311 	mls	r3, r2, r1, r3
 800769c:	5cc3      	ldrb	r3, [r0, r3]
 800769e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80076a2:	460b      	mov	r3, r1
 80076a4:	2900      	cmp	r1, #0
 80076a6:	d1f5      	bne.n	8007694 <_printf_i+0x16c>
 80076a8:	e7b9      	b.n	800761e <_printf_i+0xf6>
 80076aa:	6813      	ldr	r3, [r2, #0]
 80076ac:	6825      	ldr	r5, [r4, #0]
 80076ae:	6961      	ldr	r1, [r4, #20]
 80076b0:	1d18      	adds	r0, r3, #4
 80076b2:	6010      	str	r0, [r2, #0]
 80076b4:	0628      	lsls	r0, r5, #24
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	d501      	bpl.n	80076be <_printf_i+0x196>
 80076ba:	6019      	str	r1, [r3, #0]
 80076bc:	e002      	b.n	80076c4 <_printf_i+0x19c>
 80076be:	066a      	lsls	r2, r5, #25
 80076c0:	d5fb      	bpl.n	80076ba <_printf_i+0x192>
 80076c2:	8019      	strh	r1, [r3, #0]
 80076c4:	2300      	movs	r3, #0
 80076c6:	6123      	str	r3, [r4, #16]
 80076c8:	4665      	mov	r5, ip
 80076ca:	e7b9      	b.n	8007640 <_printf_i+0x118>
 80076cc:	6813      	ldr	r3, [r2, #0]
 80076ce:	1d19      	adds	r1, r3, #4
 80076d0:	6011      	str	r1, [r2, #0]
 80076d2:	681d      	ldr	r5, [r3, #0]
 80076d4:	6862      	ldr	r2, [r4, #4]
 80076d6:	2100      	movs	r1, #0
 80076d8:	4628      	mov	r0, r5
 80076da:	f7f8 fd79 	bl	80001d0 <memchr>
 80076de:	b108      	cbz	r0, 80076e4 <_printf_i+0x1bc>
 80076e0:	1b40      	subs	r0, r0, r5
 80076e2:	6060      	str	r0, [r4, #4]
 80076e4:	6863      	ldr	r3, [r4, #4]
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	2300      	movs	r3, #0
 80076ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ee:	e7a7      	b.n	8007640 <_printf_i+0x118>
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	462a      	mov	r2, r5
 80076f4:	4639      	mov	r1, r7
 80076f6:	4630      	mov	r0, r6
 80076f8:	47c0      	blx	r8
 80076fa:	3001      	adds	r0, #1
 80076fc:	d0aa      	beq.n	8007654 <_printf_i+0x12c>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	079b      	lsls	r3, r3, #30
 8007702:	d413      	bmi.n	800772c <_printf_i+0x204>
 8007704:	68e0      	ldr	r0, [r4, #12]
 8007706:	9b03      	ldr	r3, [sp, #12]
 8007708:	4298      	cmp	r0, r3
 800770a:	bfb8      	it	lt
 800770c:	4618      	movlt	r0, r3
 800770e:	e7a3      	b.n	8007658 <_printf_i+0x130>
 8007710:	2301      	movs	r3, #1
 8007712:	464a      	mov	r2, r9
 8007714:	4639      	mov	r1, r7
 8007716:	4630      	mov	r0, r6
 8007718:	47c0      	blx	r8
 800771a:	3001      	adds	r0, #1
 800771c:	d09a      	beq.n	8007654 <_printf_i+0x12c>
 800771e:	3501      	adds	r5, #1
 8007720:	68e3      	ldr	r3, [r4, #12]
 8007722:	9a03      	ldr	r2, [sp, #12]
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	42ab      	cmp	r3, r5
 8007728:	dcf2      	bgt.n	8007710 <_printf_i+0x1e8>
 800772a:	e7eb      	b.n	8007704 <_printf_i+0x1dc>
 800772c:	2500      	movs	r5, #0
 800772e:	f104 0919 	add.w	r9, r4, #25
 8007732:	e7f5      	b.n	8007720 <_printf_i+0x1f8>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1ac      	bne.n	8007692 <_printf_i+0x16a>
 8007738:	7803      	ldrb	r3, [r0, #0]
 800773a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800773e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007742:	e76c      	b.n	800761e <_printf_i+0xf6>
 8007744:	08007a31 	.word	0x08007a31
 8007748:	08007a42 	.word	0x08007a42

0800774c <_sbrk_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4c06      	ldr	r4, [pc, #24]	; (8007768 <_sbrk_r+0x1c>)
 8007750:	2300      	movs	r3, #0
 8007752:	4605      	mov	r5, r0
 8007754:	4608      	mov	r0, r1
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	f7fb fb52 	bl	8002e00 <_sbrk>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_sbrk_r+0x1a>
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	b103      	cbz	r3, 8007766 <_sbrk_r+0x1a>
 8007764:	602b      	str	r3, [r5, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	200005fc 	.word	0x200005fc

0800776c <__sread>:
 800776c:	b510      	push	{r4, lr}
 800776e:	460c      	mov	r4, r1
 8007770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007774:	f000 f896 	bl	80078a4 <_read_r>
 8007778:	2800      	cmp	r0, #0
 800777a:	bfab      	itete	ge
 800777c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800777e:	89a3      	ldrhlt	r3, [r4, #12]
 8007780:	181b      	addge	r3, r3, r0
 8007782:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007786:	bfac      	ite	ge
 8007788:	6563      	strge	r3, [r4, #84]	; 0x54
 800778a:	81a3      	strhlt	r3, [r4, #12]
 800778c:	bd10      	pop	{r4, pc}

0800778e <__swrite>:
 800778e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007792:	461f      	mov	r7, r3
 8007794:	898b      	ldrh	r3, [r1, #12]
 8007796:	05db      	lsls	r3, r3, #23
 8007798:	4605      	mov	r5, r0
 800779a:	460c      	mov	r4, r1
 800779c:	4616      	mov	r6, r2
 800779e:	d505      	bpl.n	80077ac <__swrite+0x1e>
 80077a0:	2302      	movs	r3, #2
 80077a2:	2200      	movs	r2, #0
 80077a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a8:	f000 f868 	bl	800787c <_lseek_r>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	4632      	mov	r2, r6
 80077ba:	463b      	mov	r3, r7
 80077bc:	4628      	mov	r0, r5
 80077be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077c2:	f000 b817 	b.w	80077f4 <_write_r>

080077c6 <__sseek>:
 80077c6:	b510      	push	{r4, lr}
 80077c8:	460c      	mov	r4, r1
 80077ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ce:	f000 f855 	bl	800787c <_lseek_r>
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	bf15      	itete	ne
 80077d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80077da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077e2:	81a3      	strheq	r3, [r4, #12]
 80077e4:	bf18      	it	ne
 80077e6:	81a3      	strhne	r3, [r4, #12]
 80077e8:	bd10      	pop	{r4, pc}

080077ea <__sclose>:
 80077ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ee:	f000 b813 	b.w	8007818 <_close_r>
	...

080077f4 <_write_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	4c07      	ldr	r4, [pc, #28]	; (8007814 <_write_r+0x20>)
 80077f8:	4605      	mov	r5, r0
 80077fa:	4608      	mov	r0, r1
 80077fc:	4611      	mov	r1, r2
 80077fe:	2200      	movs	r2, #0
 8007800:	6022      	str	r2, [r4, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	f7fb faab 	bl	8002d5e <_write>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_write_r+0x1e>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	b103      	cbz	r3, 8007812 <_write_r+0x1e>
 8007810:	602b      	str	r3, [r5, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	200005fc 	.word	0x200005fc

08007818 <_close_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4c06      	ldr	r4, [pc, #24]	; (8007834 <_close_r+0x1c>)
 800781c:	2300      	movs	r3, #0
 800781e:	4605      	mov	r5, r0
 8007820:	4608      	mov	r0, r1
 8007822:	6023      	str	r3, [r4, #0]
 8007824:	f7fb fab7 	bl	8002d96 <_close>
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	d102      	bne.n	8007832 <_close_r+0x1a>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	b103      	cbz	r3, 8007832 <_close_r+0x1a>
 8007830:	602b      	str	r3, [r5, #0]
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	200005fc 	.word	0x200005fc

08007838 <_fstat_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4c07      	ldr	r4, [pc, #28]	; (8007858 <_fstat_r+0x20>)
 800783c:	2300      	movs	r3, #0
 800783e:	4605      	mov	r5, r0
 8007840:	4608      	mov	r0, r1
 8007842:	4611      	mov	r1, r2
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	f7fb fab2 	bl	8002dae <_fstat>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	d102      	bne.n	8007854 <_fstat_r+0x1c>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	b103      	cbz	r3, 8007854 <_fstat_r+0x1c>
 8007852:	602b      	str	r3, [r5, #0]
 8007854:	bd38      	pop	{r3, r4, r5, pc}
 8007856:	bf00      	nop
 8007858:	200005fc 	.word	0x200005fc

0800785c <_isatty_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4c06      	ldr	r4, [pc, #24]	; (8007878 <_isatty_r+0x1c>)
 8007860:	2300      	movs	r3, #0
 8007862:	4605      	mov	r5, r0
 8007864:	4608      	mov	r0, r1
 8007866:	6023      	str	r3, [r4, #0]
 8007868:	f7fb fab1 	bl	8002dce <_isatty>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_isatty_r+0x1a>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	b103      	cbz	r3, 8007876 <_isatty_r+0x1a>
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	200005fc 	.word	0x200005fc

0800787c <_lseek_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4c07      	ldr	r4, [pc, #28]	; (800789c <_lseek_r+0x20>)
 8007880:	4605      	mov	r5, r0
 8007882:	4608      	mov	r0, r1
 8007884:	4611      	mov	r1, r2
 8007886:	2200      	movs	r2, #0
 8007888:	6022      	str	r2, [r4, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	f7fb faaa 	bl	8002de4 <_lseek>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_lseek_r+0x1e>
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	b103      	cbz	r3, 800789a <_lseek_r+0x1e>
 8007898:	602b      	str	r3, [r5, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	200005fc 	.word	0x200005fc

080078a0 <__malloc_lock>:
 80078a0:	4770      	bx	lr

080078a2 <__malloc_unlock>:
 80078a2:	4770      	bx	lr

080078a4 <_read_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4c07      	ldr	r4, [pc, #28]	; (80078c4 <_read_r+0x20>)
 80078a8:	4605      	mov	r5, r0
 80078aa:	4608      	mov	r0, r1
 80078ac:	4611      	mov	r1, r2
 80078ae:	2200      	movs	r2, #0
 80078b0:	6022      	str	r2, [r4, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f7fb fa36 	bl	8002d24 <_read>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_read_r+0x1e>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_read_r+0x1e>
 80078c0:	602b      	str	r3, [r5, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	200005fc 	.word	0x200005fc

080078c8 <_init>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	bf00      	nop
 80078cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ce:	bc08      	pop	{r3}
 80078d0:	469e      	mov	lr, r3
 80078d2:	4770      	bx	lr

080078d4 <_fini>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr
