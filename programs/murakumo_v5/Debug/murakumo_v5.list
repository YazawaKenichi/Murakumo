
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d76c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  0800d900  0800d900  0001d900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e05c  0800e05c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e05c  0800e05c  0001e05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e064  0800e064  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e064  0800e064  0001e064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e068  0800e068  0001e068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000142f0  200001e0  0800e24c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200144d0  0800e24c  000244d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017dbf  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a0  00000000  00000000  00037fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003b270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003c778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002252c  00000000  00000000  0003db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169dd  00000000  00000000  0006007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb317  00000000  00000000  00076a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141d70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f58  00000000  00000000  00141dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8e4 	.word	0x0800d8e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d8e4 	.word	0x0800d8e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <read_byte>:
volatile Inertial inertial_offset;

Coordinate COORDINATE_ZERO;

uint8_t read_byte( uint8_t reg )
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <read_byte+0x54>)
 8001008:	f005 f854 	bl	80060b4 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <read_byte+0x58>)
 8001016:	f005 fe79 	bl	8006d0c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <read_byte+0x58>)
 8001024:	f005 ffa6 	bl	8006f74 <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <read_byte+0x54>)
 8001030:	f005 f840 	bl	80060b4 <HAL_GPIO_WritePin>
#endif

	return val;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	20014108 	.word	0x20014108

08001048 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <write_byte+0x54>)
 800106a:	f005 f823 	bl	80060b4 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2201      	movs	r2, #1
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <write_byte+0x58>)
 8001078:	f005 fe48 	bl	8006d0c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 800107c:	1db9      	adds	r1, r7, #6
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <write_byte+0x58>)
 8001084:	f005 fe42 	bl	8006d0c <HAL_SPI_Transmit>
#if USE_NCS
	CS_SET;
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <write_byte+0x54>)
 8001090:	f005 f810 	bl	80060b4 <HAL_GPIO_WritePin>
#endif
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	20014108 	.word	0x20014108
 80010a4:	00000000 	.word	0x00000000

080010a8 <IMU_init>:

uint8_t IMU_init(uint8_t* wai)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	CS_RESET;
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	4834      	ldr	r0, [pc, #208]	; (8001188 <IMU_init+0xe0>)
 80010b8:	f004 fffc 	bl	80060b4 <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

	COORDINATE_ZERO.x = 0;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <IMU_init+0xe4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]
	COORDINATE_ZERO.y = 0;
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <IMU_init+0xe4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	805a      	strh	r2, [r3, #2]
	COORDINATE_ZERO.z = 0;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <IMU_init+0xe4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	809a      	strh	r2, [r3, #4]

	RADPERDEG = ((double) M_PI / (double) 180);
 80010d2:	492f      	ldr	r1, [pc, #188]	; (8001190 <IMU_init+0xe8>)
 80010d4:	a32a      	add	r3, pc, #168	; (adr r3, 8001180 <IMU_init+0xd8>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	e9c1 2300 	strd	r2, r3, [r1]

#if	INIT_ZERO
	inertial.accel = COORDINATE_ZERO;
 80010de:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <IMU_init+0xec>)
 80010e0:	4a2a      	ldr	r2, [pc, #168]	; (800118c <IMU_init+0xe4>)
 80010e2:	6811      	ldr	r1, [r2, #0]
 80010e4:	6019      	str	r1, [r3, #0]
 80010e6:	8892      	ldrh	r2, [r2, #4]
 80010e8:	809a      	strh	r2, [r3, #4]
	inertial.gyro = COORDINATE_ZERO;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <IMU_init+0xec>)
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <IMU_init+0xe4>)
 80010ee:	3306      	adds	r3, #6
 80010f0:	6811      	ldr	r1, [r2, #0]
 80010f2:	6019      	str	r1, [r3, #0]
 80010f4:	8892      	ldrh	r2, [r2, #4]
 80010f6:	809a      	strh	r2, [r3, #4]
	displacement.position = COORDINATE_ZERO;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <IMU_init+0xf0>)
 80010fa:	4a24      	ldr	r2, [pc, #144]	; (800118c <IMU_init+0xe4>)
 80010fc:	6811      	ldr	r1, [r2, #0]
 80010fe:	6019      	str	r1, [r3, #0]
 8001100:	8892      	ldrh	r2, [r2, #4]
 8001102:	809a      	strh	r2, [r3, #4]
	displacement.theta = COORDINATE_ZERO;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <IMU_init+0xf0>)
 8001106:	4a21      	ldr	r2, [pc, #132]	; (800118c <IMU_init+0xe4>)
 8001108:	3306      	adds	r3, #6
 800110a:	6811      	ldr	r1, [r2, #0]
 800110c:	6019      	str	r1, [r3, #0]
 800110e:	8892      	ldrh	r2, [r2, #4]
 8001110:	809a      	strh	r2, [r3, #4]
#endif

	who_am_i = read_byte(0x00);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ff6a 	bl	8000fec <read_byte>
 8001118:	4603      	mov	r3, r0
 800111a:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7bba      	ldrb	r2, [r7, #14]
 8001120:	701a      	strb	r2, [r3, #0]
	if ( who_am_i == 0xE0 )
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	2be0      	cmp	r3, #224	; 0xe0
 8001126:	d11e      	bne.n	8001166 <IMU_init+0xbe>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
		write_byte(PWR_MGMT_1,0x01);	//PWR_MGMT_1
 800112c:	2101      	movs	r1, #1
 800112e:	2006      	movs	r0, #6
 8001130:	f7ff ff8a 	bl	8001048 <write_byte>
		HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	; 0x64
 8001136:	f003 f9e7 	bl	8004508 <HAL_Delay>
		write_byte(USER_CTRL,0x10);	//USER_CTRL
 800113a:	2110      	movs	r1, #16
 800113c:	2003      	movs	r0, #3
 800113e:	f7ff ff83 	bl	8001048 <write_byte>
		write_byte(REG_BANK_SEL,0x20);	//USER_BANK2
 8001142:	2120      	movs	r1, #32
 8001144:	207f      	movs	r0, #127	; 0x7f
 8001146:	f7ff ff7f 	bl	8001048 <write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 800114a:	2107      	movs	r1, #7
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ff7b 	bl	8001048 <write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		write_byte(0x14,0x00);	//range±2g
 8001152:	2100      	movs	r1, #0
 8001154:	2014      	movs	r0, #20
 8001156:	f7ff ff77 	bl	8001048 <write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(REG_BANK_SEL,0x00);	//USER_BANK0
 800115a:	2100      	movs	r1, #0
 800115c:	207f      	movs	r0, #127	; 0x7f
 800115e:	f7ff ff73 	bl	8001048 <write_byte>
		IMU_set_offset();
 8001162:	f000 f81b 	bl	800119c <IMU_set_offset>
	}
#if USE_NCS
	CS_SET;
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <IMU_init+0xe0>)
 800116e:	f004 ffa1 	bl	80060b4 <HAL_GPIO_WritePin>
#endif
	return ret;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	a2529d39 	.word	0xa2529d39
 8001184:	3f91df46 	.word	0x3f91df46
 8001188:	40020400 	.word	0x40020400
 800118c:	20000210 	.word	0x20000210
 8001190:	20000208 	.word	0x20000208
 8001194:	20000230 	.word	0x20000230
 8001198:	20000224 	.word	0x20000224

0800119c <IMU_set_offset>:
	CS_SET;
#endif
}

void IMU_set_offset()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	IMU_read();
 80011a0:	f000 f80e 	bl	80011c0 <IMU_read>
	inertial_offset = inertial;
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <IMU_set_offset+0x1c>)
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <IMU_set_offset+0x20>)
 80011a8:	6810      	ldr	r0, [r2, #0]
 80011aa:	6851      	ldr	r1, [r2, #4]
 80011ac:	6892      	ldr	r2, [r2, #8]
 80011ae:	6018      	str	r0, [r3, #0]
 80011b0:	6059      	str	r1, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000218 	.word	0x20000218
 80011bc:	20000230 	.word	0x20000230

080011c0 <IMU_read>:

void IMU_read()
{
 80011c0:	b598      	push	{r3, r4, r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)read_byte(ACCEL_XOUT_L));
 80011c4:	202d      	movs	r0, #45	; 0x2d
 80011c6:	f7ff ff11 	bl	8000fec <read_byte>
 80011ca:	4603      	mov	r3, r0
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21c      	sxth	r4, r3
 80011d0:	202e      	movs	r0, #46	; 0x2e
 80011d2:	f7ff ff0b 	bl	8000fec <read_byte>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4323      	orrs	r3, r4
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <IMU_read+0xbc>)
 80011e0:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)read_byte(ACCEL_YOUT_L));
 80011e2:	202f      	movs	r0, #47	; 0x2f
 80011e4:	f7ff ff02 	bl	8000fec <read_byte>
 80011e8:	4603      	mov	r3, r0
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21c      	sxth	r4, r3
 80011ee:	2030      	movs	r0, #48	; 0x30
 80011f0:	f7ff fefc 	bl	8000fec <read_byte>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4323      	orrs	r3, r4
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <IMU_read+0xbc>)
 80011fe:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)read_byte(ACCEL_ZOUT_L));
 8001200:	2031      	movs	r0, #49	; 0x31
 8001202:	f7ff fef3 	bl	8000fec <read_byte>
 8001206:	4603      	mov	r3, r0
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21c      	sxth	r4, r3
 800120c:	2032      	movs	r0, #50	; 0x32
 800120e:	f7ff feed 	bl	8000fec <read_byte>
 8001212:	4603      	mov	r3, r0
 8001214:	b21b      	sxth	r3, r3
 8001216:	4323      	orrs	r3, r4
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <IMU_read+0xbc>)
 800121c:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)read_byte(GYRO_XOUT_H) << 8) | ((int16_t)read_byte(GYRO_XOUT_L));
 800121e:	2033      	movs	r0, #51	; 0x33
 8001220:	f7ff fee4 	bl	8000fec <read_byte>
 8001224:	4603      	mov	r3, r0
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21c      	sxth	r4, r3
 800122a:	2034      	movs	r0, #52	; 0x34
 800122c:	f7ff fede 	bl	8000fec <read_byte>
 8001230:	4603      	mov	r3, r0
 8001232:	b21b      	sxth	r3, r3
 8001234:	4323      	orrs	r3, r4
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <IMU_read+0xbc>)
 800123a:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)read_byte(GYRO_YOUT_H) << 8) | ((int16_t)read_byte(GYRO_YOUT_L));
 800123c:	2035      	movs	r0, #53	; 0x35
 800123e:	f7ff fed5 	bl	8000fec <read_byte>
 8001242:	4603      	mov	r3, r0
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21c      	sxth	r4, r3
 8001248:	2036      	movs	r0, #54	; 0x36
 800124a:	f7ff fecf 	bl	8000fec <read_byte>
 800124e:	4603      	mov	r3, r0
 8001250:	b21b      	sxth	r3, r3
 8001252:	4323      	orrs	r3, r4
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <IMU_read+0xbc>)
 8001258:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)read_byte(GYRO_ZOUT_L));
 800125a:	2037      	movs	r0, #55	; 0x37
 800125c:	f7ff fec6 	bl	8000fec <read_byte>
 8001260:	4603      	mov	r3, r0
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21c      	sxth	r4, r3
 8001266:	2038      	movs	r0, #56	; 0x38
 8001268:	f7ff fec0 	bl	8000fec <read_byte>
 800126c:	4603      	mov	r3, r0
 800126e:	b21b      	sxth	r3, r3
 8001270:	4323      	orrs	r3, r4
 8001272:	b21a      	sxth	r2, r3
 8001274:	4b01      	ldr	r3, [pc, #4]	; (800127c <IMU_read+0xbc>)
 8001276:	815a      	strh	r2, [r3, #10]
}
 8001278:	bf00      	nop
 800127a:	bd98      	pop	{r3, r4, r7, pc}
 800127c:	20000230 	.word	0x20000230

08001280 <led_rgb>:
	_rotaryvalue += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 0 : 1;	// Rotary8
	return _rotaryvalue;
}

#if USE_LED
void led_rgb(char r, char g, char b) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
 800128a:	460b      	mov	r3, r1
 800128c:	71bb      	strb	r3, [r7, #6]
 800128e:	4613      	mov	r3, r2
 8001290:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (r) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <led_rgb+0x64>)
 80012a6:	f004 ff05 	bl	80060b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (g) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf0c      	ite	eq
 80012b0:	2301      	moveq	r3, #1
 80012b2:	2300      	movne	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <led_rgb+0x64>)
 80012be:	f004 fef9 	bl	80060b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (b) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 80012c2:	797b      	ldrb	r3, [r7, #5]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <led_rgb+0x68>)
 80012d6:	f004 feed 	bl	80060b4 <HAL_GPIO_WritePin>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020800 	.word	0x40020800

080012ec <set_led>:
void set_led(char mask, char value) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	71fb      	strb	r3, [r7, #7]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71bb      	strb	r3, [r7, #6]
	if (mask & 0b01) {
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00d      	beq.n	8001322 <set_led+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,
				(value & 0b01) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// RIGHT
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	f003 0301 	and.w	r3, r3, #1
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <set_led+0x64>)
 800131e:	f004 fec9 	bl	80060b4 <HAL_GPIO_WritePin>
	}
	if (mask & 0b10) {
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00d      	beq.n	8001348 <set_led+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,
				(value & 0b10) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LEFT
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	f003 0302 	and.w	r3, r3, #2
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <set_led+0x68>)
 8001344:	f004 feb6 	bl	80060b4 <HAL_GPIO_WritePin>
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40020800 	.word	0x40020800
 8001354:	40020400 	.word	0x40020400

08001358 <playmode_print>:
#endif

void playmode_print() {
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
		default:
			printf("unknown;;\r\n");
			break;
	}
	#endif
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <d_print>:

void d_print() {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	printf("////////// d_print //////////\r\n");
 800136c:	4823      	ldr	r0, [pc, #140]	; (80013fc <d_print+0x94>)
 800136e:	f008 fd13 	bl	8009d98 <puts>
#if D_SWITCH
	printf("enter = %d\r\n", enter);
#endif

#if D_FLASH
	printf("rightmarkercount = %1d\r\n", rightmarkercount);
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <d_print+0x98>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4619      	mov	r1, r3
 8001378:	4822      	ldr	r0, [pc, #136]	; (8001404 <d_print+0x9c>)
 800137a:	f008 fc87 	bl	8009c8c <iprintf>
	printf("sampling_length = %5f\r\n", mm_length);
 800137e:	4b22      	ldr	r3, [pc, #136]	; (8001408 <d_print+0xa0>)
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	4821      	ldr	r0, [pc, #132]	; (800140c <d_print+0xa4>)
 8001386:	f008 fc81 	bl	8009c8c <iprintf>
	printf("sampling_time = %5d\r\n", sampling_time);
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <d_print+0xa8>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	4619      	mov	r1, r3
 8001390:	4820      	ldr	r0, [pc, #128]	; (8001414 <d_print+0xac>)
 8001392:	f008 fc7b 	bl	8009c8c <iprintf>
	printf("course_state_time = %4d\r\n", course_state_time);
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <d_print+0xb0>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	481f      	ldr	r0, [pc, #124]	; (800141c <d_print+0xb4>)
 800139e:	f008 fc75 	bl	8009c8c <iprintf>

#if D_IMU
	printf("mm_length = %5.3f\r\n", mm_length);
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <d_print+0xa0>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	481d      	ldr	r0, [pc, #116]	; (8001420 <d_print+0xb8>)
 80013aa:	f008 fc6f 	bl	8009c8c <iprintf>
	printf("inertial.gyro.z = %5d, my_gyro.z = %7.3f\r\n", inertial.gyro.z, my_gyro.z);
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <d_print+0xbc>)
 80013b0:	895b      	ldrh	r3, [r3, #10]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <d_print+0xc0>)
 80013b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013bc:	481b      	ldr	r0, [pc, #108]	; (800142c <d_print+0xc4>)
 80013be:	f008 fc65 	bl	8009c8c <iprintf>
	printf("my_gyro.z / mm_length = %8.5f\r\n", (double) my_gyro.z / (double) mm_length);
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <d_print+0xc0>)
 80013c4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <d_print+0xa0>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7ff fa3d 	bl	800084c <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <d_print+0xc8>)
 80013d8:	f008 fc58 	bl	8009c8c <iprintf>
#endif

#if !D_COURSE_SAVING
	printf("flash_buffer.radius[%4d] = %8.3f\r\n", course_state_time,
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <d_print+0xb0>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <d_print+0xb0>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <d_print+0xcc>)
 80013e8:	3307      	adds	r3, #7
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <d_print+0xd0>)
 80013f4:	f008 fc4a 	bl	8009c8c <iprintf>
		printf("sigmoid = %5.3f\r\n", 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500));
	}
#endif
#endif

}	// d_print
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0800d900 	.word	0x0800d900
 8001400:	20013f60 	.word	0x20013f60
 8001404:	0800d920 	.word	0x0800d920
 8001408:	20013e10 	.word	0x20013e10
 800140c:	0800d93c 	.word	0x0800d93c
 8001410:	20000270 	.word	0x20000270
 8001414:	0800d954 	.word	0x0800d954
 8001418:	20013f62 	.word	0x20013f62
 800141c:	0800d96c 	.word	0x0800d96c
 8001420:	0800d988 	.word	0x0800d988
 8001424:	20000230 	.word	0x20000230
 8001428:	20013f40 	.word	0x20013f40
 800142c:	0800d99c 	.word	0x0800d99c
 8001430:	0800d9c8 	.word	0x0800d9c8
 8001434:	200003a8 	.word	0x200003a8
 8001438:	0800d9e8 	.word	0x0800d9e8

0800143c <HAL_ADC_ConvCpltCallback>:
double low_pass_filter(double val, double pre_val, double gamma) {
	return (double) (gamma * (double) pre_val
			+ (double) (1 - gamma) * (double) val);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
 800143c:	b4b0      	push	{r4, r5, r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	// sort
	if (sensgettime >= SENSGETCOUNT) {
 8001444:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <HAL_ADC_ConvCpltCallback+0x144>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b08      	cmp	r3, #8
 800144a:	d973      	bls.n	8001534 <HAL_ADC_ConvCpltCallback+0xf8>
		sensgettime = 0;
 800144c:	4b4c      	ldr	r3, [pc, #304]	; (8001580 <HAL_ADC_ConvCpltCallback+0x144>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	e06a      	b.n	800152e <HAL_ADC_ConvCpltCallback+0xf2>
			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 8001458:	2300      	movs	r3, #0
 800145a:	73bb      	strb	r3, [r7, #14]
 800145c:	e039      	b.n	80014d2 <HAL_ADC_ConvCpltCallback+0x96>
				for (unsigned char alphaindex = 0; alphaindex > count;
 800145e:	2300      	movs	r3, #0
 8001460:	737b      	strb	r3, [r7, #13]
 8001462:	e02f      	b.n	80014c4 <HAL_ADC_ConvCpltCallback+0x88>
						alphaindex--) {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001464:	7b7b      	ldrb	r3, [r7, #13]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	7bf9      	ldrb	r1, [r7, #15]
 800146a:	4846      	ldr	r0, [pc, #280]	; (8001584 <HAL_ADC_ConvCpltCallback+0x148>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800147a:	813b      	strh	r3, [r7, #8]
					analogbuffers[alphaindex - 1][index] =
							analogbuffers[alphaindex][index];
 800147c:	7b79      	ldrb	r1, [r7, #13]
 800147e:	7bfc      	ldrb	r4, [r7, #15]
					analogbuffers[alphaindex - 1][index] =
 8001480:	7b7b      	ldrb	r3, [r7, #13]
 8001482:	1e5a      	subs	r2, r3, #1
 8001484:	7bf8      	ldrb	r0, [r7, #15]
							analogbuffers[alphaindex][index];
 8001486:	4d3f      	ldr	r5, [pc, #252]	; (8001584 <HAL_ADC_ConvCpltCallback+0x148>)
 8001488:	460b      	mov	r3, r1
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	440b      	add	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4423      	add	r3, r4
 8001492:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
					analogbuffers[alphaindex - 1][index] =
 8001496:	493b      	ldr	r1, [pc, #236]	; (8001584 <HAL_ADC_ConvCpltCallback+0x148>)
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4403      	add	r3, r0
 80014a2:	4622      	mov	r2, r4
 80014a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 80014a8:	7b7a      	ldrb	r2, [r7, #13]
 80014aa:	7bf9      	ldrb	r1, [r7, #15]
 80014ac:	4835      	ldr	r0, [pc, #212]	; (8001584 <HAL_ADC_ConvCpltCallback+0x148>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	893a      	ldrh	r2, [r7, #8]
 80014ba:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
						alphaindex--) {
 80014be:	7b7b      	ldrb	r3, [r7, #13]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	737b      	strb	r3, [r7, #13]
				for (unsigned char alphaindex = 0; alphaindex > count;
 80014c4:	7b7a      	ldrb	r2, [r7, #13]
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8cb      	bhi.n	8001464 <HAL_ADC_ConvCpltCallback+0x28>
			for (unsigned char count = 0; count < SENSGETCOUNT; count++) {
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73bb      	strb	r3, [r7, #14]
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d9c2      	bls.n	800145e <HAL_ADC_ConvCpltCallback+0x22>
				}
			}
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	4929      	ldr	r1, [pc, #164]	; (8001584 <HAL_ADC_ConvCpltCallback+0x148>)
 80014de:	3230      	adds	r2, #48	; 0x30
 80014e0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80014e4:	4a28      	ldr	r2, [pc, #160]	; (8001588 <HAL_ADC_ConvCpltCallback+0x14c>)
 80014e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			// get maxvalue and minimumvalue
			uint16_t analogbuf;
			analogbuf = analog[index];
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	4a26      	ldr	r2, [pc, #152]	; (8001588 <HAL_ADC_ConvCpltCallback+0x14c>)
 80014ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f2:	817b      	strh	r3, [r7, #10]
			analogmax[index] =
					(analogmax[index] < analogbuf) ?
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	4a25      	ldr	r2, [pc, #148]	; (800158c <HAL_ADC_ConvCpltCallback+0x150>)
 80014f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
			analogmax[index] =
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
							analogbuf : analogmax[index];
 80014fe:	8979      	ldrh	r1, [r7, #10]
 8001500:	428a      	cmp	r2, r1
 8001502:	bf38      	it	cc
 8001504:	460a      	movcc	r2, r1
 8001506:	b291      	uxth	r1, r2
			analogmax[index] =
 8001508:	4a20      	ldr	r2, [pc, #128]	; (800158c <HAL_ADC_ConvCpltCallback+0x150>)
 800150a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] =
					(analogmin[index] > analogbuf) ?
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <HAL_ADC_ConvCpltCallback+0x154>)
 8001512:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
			analogmin[index] =
 8001516:	7bfb      	ldrb	r3, [r7, #15]
							analogbuf : analogmin[index];
 8001518:	8979      	ldrh	r1, [r7, #10]
 800151a:	428a      	cmp	r2, r1
 800151c:	bf28      	it	cs
 800151e:	460a      	movcs	r2, r1
 8001520:	b291      	uxth	r1, r2
			analogmin[index] =
 8001522:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <HAL_ADC_ConvCpltCallback+0x154>)
 8001524:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (unsigned char index = 0; index < CALIBRATIONSIZE; index++) {
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	3301      	adds	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b0b      	cmp	r3, #11
 8001532:	d991      	bls.n	8001458 <HAL_ADC_ConvCpltCallback+0x1c>
		}
	}
	// sensorget
	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
 8001534:	2300      	movs	r3, #0
 8001536:	733b      	strb	r3, [r7, #12]
 8001538:	e013      	b.n	8001562 <HAL_ADC_ConvCpltCallback+0x126>
		analogbuffers[sensgettime][index] = analograw[index];
 800153a:	7b3b      	ldrb	r3, [r7, #12]
 800153c:	4a10      	ldr	r2, [pc, #64]	; (8001580 <HAL_ADC_ConvCpltCallback+0x144>)
 800153e:	7812      	ldrb	r2, [r2, #0]
 8001540:	4610      	mov	r0, r2
 8001542:	7b3a      	ldrb	r2, [r7, #12]
 8001544:	4913      	ldr	r1, [pc, #76]	; (8001594 <HAL_ADC_ConvCpltCallback+0x158>)
 8001546:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 800154a:	490e      	ldr	r1, [pc, #56]	; (8001584 <HAL_ADC_ConvCpltCallback+0x148>)
 800154c:	4603      	mov	r3, r0
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4403      	add	r3, r0
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	4622      	mov	r2, r4
 8001558:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (unsigned char index = 0; CALIBRATIONSIZE > index; index++) {
 800155c:	7b3b      	ldrb	r3, [r7, #12]
 800155e:	3301      	adds	r3, #1
 8001560:	733b      	strb	r3, [r7, #12]
 8001562:	7b3b      	ldrb	r3, [r7, #12]
 8001564:	2b0b      	cmp	r3, #11
 8001566:	d9e8      	bls.n	800153a <HAL_ADC_ConvCpltCallback+0xfe>
	}
	sensgettime++;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_ADC_ConvCpltCallback+0x144>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_ADC_ConvCpltCallback+0x144>)
 8001572:	701a      	strb	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bcb0      	pop	{r4, r5, r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000290 	.word	0x20000290
 8001584:	20013e24 	.word	0x20013e24
 8001588:	20000258 	.word	0x20000258
 800158c:	20013f18 	.word	0x20013f18
 8001590:	200002f4 	.word	0x200002f4
 8001594:	20000294 	.word	0x20000294

08001598 <eraseFlash>:
	// printf("pow(%5.3f, %5.3f, %5.3f)\r\n", x, a, x0);
	return 1 / (double) (1 + exp(-a * (x - x0)));
}

#if USE_FLASH
void eraseFlash(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 80015a2:	230b      	movs	r3, #11
 80015a4:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80015aa:	2302      	movs	r3, #2
 80015ac:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 80015b2:	463a      	mov	r2, r7
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 faa5 	bl	8005b08 <HAL_FLASHEx_Erase>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <writeFlash>:

void writeFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 80015d2:	f004 f937 	bl	8005844 <HAL_FLASH_Unlock>
	eraseFlash();
 80015d6:	f7ff ffdf 	bl	8001598 <eraseFlash>

	for (uint32_t add = address; add < (address + size); add++)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e00e      	b.n	80015fe <writeFlash+0x38>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	6979      	ldr	r1, [r7, #20]
 80015ec:	2000      	movs	r0, #0
 80015ee:	f004 f8d5 	bl	800579c <HAL_FLASH_Program>
		data++;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	3301      	adds	r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	429a      	cmp	r2, r3
 8001608:	d3ea      	bcc.n	80015e0 <writeFlash+0x1a>
	}

	HAL_FLASH_Lock();
 800160a:	f004 f93d 	bl	8005888 <HAL_FLASH_Lock>
#endif
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <loadFlash>:

void loadFlash(uint32_t address, uint8_t *data, uint32_t size)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	4619      	mov	r1, r3
 8001628:	68b8      	ldr	r0, [r7, #8]
 800162a:	f007 fc9f 	bl	8008f6c <memcpy>
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <sidesens_function>:
#endif

void sidesens_function()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
#if USE_SIDESENSOR
	unsigned char subsens, first, second;

	subsens = read_sidesens();
 800163e:	f002 f847 	bl	80036d0 <read_sidesens>
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]

	if (subsens != subsensbuf)
 8001646:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <sidesens_function+0x10c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	429a      	cmp	r2, r3
 800164e:	d075      	beq.n	800173c <sidesens_function+0x104>
	{
		subsensbuf = subsens;
 8001650:	4a3c      	ldr	r2, [pc, #240]	; (8001744 <sidesens_function+0x10c>)
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <sidesens_function+0x110>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b39      	ldr	r3, [pc, #228]	; (800174c <sidesens_function+0x114>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4413      	add	r3, r2
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b37      	ldr	r3, [pc, #220]	; (800174c <sidesens_function+0x114>)
 800166e:	701a      	strb	r2, [r3, #0]
		if (subsens == 0b00 && sidedeltacount != 0)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d15c      	bne.n	8001730 <sidesens_function+0xf8>
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <sidesens_function+0x110>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d058      	beq.n	8001730 <sidesens_function+0xf8>
		{
			first = (marker & 0b0011);
 800167e:	4b33      	ldr	r3, [pc, #204]	; (800174c <sidesens_function+0x114>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <sidesens_function+0x114>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	109b      	asrs	r3, r3, #2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8001696:	797b      	ldrb	r3, [r7, #5]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d13c      	bne.n	8001716 <sidesens_function+0xde>
			{
				if (first == 0b01)
 800169c:	79bb      	ldrb	r3, [r7, #6]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d121      	bne.n	80016e6 <sidesens_function+0xae>
				{
					// right -> stop
					markerstate = 0b01;
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <sidesens_function+0x118>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
					if(rightmarkercount == 1 - 1)
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <sidesens_function+0x11c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <sidesens_function+0x8e>
					{
						rightmarkercount++;
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <sidesens_function+0x11c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <sidesens_function+0x11c>)
 80016ba:	701a      	strb	r2, [r3, #0]
						set_led(0b01, 0b01);
 80016bc:	2101      	movs	r1, #1
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff fe14 	bl	80012ec <set_led>
 80016c4:	e02a      	b.n	800171c <sidesens_function+0xe4>
					}
					else if (rightmarkercount == 2 - 1)
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <sidesens_function+0x11c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d126      	bne.n	800171c <sidesens_function+0xe4>
					{
						// stop_motion
						rightmarkercount++;
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <sidesens_function+0x11c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <sidesens_function+0x11c>)
 80016d8:	701a      	strb	r2, [r3, #0]
						course_state_function();
 80016da:	f000 f8cd 	bl	8001878 <course_state_function>
						slow = 1;
 80016de:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <sidesens_function+0x120>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	e01a      	b.n	800171c <sidesens_function+0xe4>
					}
				}
				else if (first == 0b10)
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d110      	bne.n	800170e <sidesens_function+0xd6>
				{
					// left -> curve
					markerstate = 0b10;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <sidesens_function+0x118>)
 80016ee:	2202      	movs	r2, #2
 80016f0:	701a      	strb	r2, [r3, #0]
#if LEFTMARKER_SAMPLING
					course_state_function();
#endif
				markerstate = 0;
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <sidesens_function+0x118>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
#if USE_ANALOG
					sdirection = 0;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <sidesens_function+0x124>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
#endif
#if USE_FLASH && USE_VELOCITY_CONTROL
#if USE_VELOCITY_CONTROL
					s_velocity = 0;
 80016fe:	4918      	ldr	r1, [pc, #96]	; (8001760 <sidesens_function+0x128>)
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	e9c1 2300 	strd	r2, r3, [r1]
 800170c:	e006      	b.n	800171c <sidesens_function+0xe4>
#endif	// USE_FLASH && USE_VELOCITY_CONTROL
				}
				else
				{
					// cross
					markerstate = 0b11;
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <sidesens_function+0x118>)
 8001710:	2203      	movs	r2, #3
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e002      	b.n	800171c <sidesens_function+0xe4>
				}
			}
			else
			{
				// cross
				markerstate = 0b11;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <sidesens_function+0x118>)
 8001718:	2203      	movs	r2, #3
 800171a:	701a      	strb	r2, [r3, #0]
			}
			sidedeltacount = 0;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <sidesens_function+0x110>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <sidesens_function+0x114>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
#if !LEFTMARKER_SAMPLING
			markerstate = 0;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <sidesens_function+0x118>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
		{
			sidedeltacount++;
		}
	}
#endif	// USE_SIDESENSOR
}
 800172e:	e005      	b.n	800173c <sidesens_function+0x104>
			sidedeltacount++;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <sidesens_function+0x110>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <sidesens_function+0x110>)
 800173a:	701a      	strb	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000310 	.word	0x20000310
 8001748:	20000316 	.word	0x20000316
 800174c:	200003a1 	.word	0x200003a1
 8001750:	20000340 	.word	0x20000340
 8001754:	20013f60 	.word	0x20013f60
 8001758:	20000331 	.word	0x20000331
 800175c:	200002b4 	.word	0x200002b4
 8001760:	20000380 	.word	0x20000380

08001764 <velocity_control_switch_function>:
	}
#endif	// USE_VELOCITY_CONTROL
}

void velocity_control_switch_function()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
#if USE_FLASH
#if !D_COURSE_SAVING
    if(flash_buffer.radius[course_state_time] < THRESHOLDRADIUS)
 8001768:	4b38      	ldr	r3, [pc, #224]	; (800184c <velocity_control_switch_function+0xe8>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	4a38      	ldr	r2, [pc, #224]	; (8001850 <velocity_control_switch_function+0xec>)
 800176e:	3307      	adds	r3, #7
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4b35      	ldr	r3, [pc, #212]	; (8001854 <velocity_control_switch_function+0xf0>)
 800177e:	f7ff f9ad 	bl	8000adc <__aeabi_dcmplt>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d02f      	beq.n	80017e8 <velocity_control_switch_function+0x84>
    {
        // deceleration
        velocity_target = low_velo.velocity_target[rv];
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <velocity_control_switch_function+0xf4>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <velocity_control_switch_function+0xf8>)
 8001790:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe feb5 	bl	8000504 <__aeabi_ui2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4930      	ldr	r1, [pc, #192]	; (8001860 <velocity_control_switch_function+0xfc>)
 80017a0:	e9c1 2300 	strd	r2, r3, [r1]
        kp = low_velo.kp[rv];
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <velocity_control_switch_function+0xf4>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4a2c      	ldr	r2, [pc, #176]	; (800185c <velocity_control_switch_function+0xf8>)
 80017aa:	3304      	adds	r3, #4
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	492b      	ldr	r1, [pc, #172]	; (8001864 <velocity_control_switch_function+0x100>)
 80017b6:	e9c1 2300 	strd	r2, r3, [r1]
        kd = low_velo.kd[rv];
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <velocity_control_switch_function+0xf4>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4a27      	ldr	r2, [pc, #156]	; (800185c <velocity_control_switch_function+0xf8>)
 80017c0:	3324      	adds	r3, #36	; 0x24
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4413      	add	r3, r2
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	4927      	ldr	r1, [pc, #156]	; (8001868 <velocity_control_switch_function+0x104>)
 80017cc:	e9c1 2300 	strd	r2, r3, [r1]
        ki = low_velo.ki[rv];
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <velocity_control_switch_function+0xf4>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4a21      	ldr	r2, [pc, #132]	; (800185c <velocity_control_switch_function+0xf8>)
 80017d6:	3314      	adds	r3, #20
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	4922      	ldr	r1, [pc, #136]	; (800186c <velocity_control_switch_function+0x108>)
 80017e2:	e9c1 2300 	strd	r2, r3, [r1]
        kd = high_velo.kd[rv];
        ki = high_velo.ki[rv];
    }
#endif
#endif
}
 80017e6:	e02e      	b.n	8001846 <velocity_control_switch_function+0xe2>
        velocity_target = high_velo.velocity_target[rv];
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <velocity_control_switch_function+0xf4>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <velocity_control_switch_function+0x10c>)
 80017f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe85 	bl	8000504 <__aeabi_ui2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4918      	ldr	r1, [pc, #96]	; (8001860 <velocity_control_switch_function+0xfc>)
 8001800:	e9c1 2300 	strd	r2, r3, [r1]
        kp = high_velo.kp[rv];
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <velocity_control_switch_function+0xf4>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <velocity_control_switch_function+0x10c>)
 800180a:	3304      	adds	r3, #4
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	4913      	ldr	r1, [pc, #76]	; (8001864 <velocity_control_switch_function+0x100>)
 8001816:	e9c1 2300 	strd	r2, r3, [r1]
        kd = high_velo.kd[rv];
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <velocity_control_switch_function+0xf4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <velocity_control_switch_function+0x10c>)
 8001820:	3324      	adds	r3, #36	; 0x24
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	490f      	ldr	r1, [pc, #60]	; (8001868 <velocity_control_switch_function+0x104>)
 800182c:	e9c1 2300 	strd	r2, r3, [r1]
        ki = high_velo.ki[rv];
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <velocity_control_switch_function+0xf4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <velocity_control_switch_function+0x10c>)
 8001836:	3314      	adds	r3, #20
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	490a      	ldr	r1, [pc, #40]	; (800186c <velocity_control_switch_function+0x108>)
 8001842:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20013f62 	.word	0x20013f62
 8001850:	200003a8 	.word	0x200003a8
 8001854:	407f4000 	.word	0x407f4000
 8001858:	200003a0 	.word	0x200003a0
 800185c:	20013c70 	.word	0x20013c70
 8001860:	20013f00 	.word	0x20013f00
 8001864:	20013f30 	.word	0x20013f30
 8001868:	20000288 	.word	0x20000288
 800186c:	20000390 	.word	0x20000390
 8001870:	20013f68 	.word	0x20013f68
 8001874:	00000000 	.word	0x00000000

08001878 <course_state_function>:

void course_state_function()
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	af00      	add	r7, sp, #0
	if(playmode == search)
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <course_state_function+0x148>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d179      	bne.n	8001978 <course_state_function+0x100>
	{
		if(course_state_time + 1 >= COURSE_STATE_SIZE)	// sizeof(flash_buffer.radius) / sizeof(flash_buffer.radius[0]))
 8001884:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <course_state_function+0x14c>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	f242 720e 	movw	r2, #9998	; 0x270e
 800188c:	4293      	cmp	r3, r2
 800188e:	d908      	bls.n	80018a2 <course_state_function+0x2a>
		{
			led_rgb(1, 1, 0);	// Yellow
 8001890:	2200      	movs	r2, #0
 8001892:	2101      	movs	r1, #1
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff fcf3 	bl	8001280 <led_rgb>
			motorenable = 0;
 800189a:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <course_state_function+0x150>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e06a      	b.n	8001978 <course_state_function+0x100>
		}
		else
		{
#if USE_COURSE_STATE_TIME
			course_state_time++;
 80018a2:	4b48      	ldr	r3, [pc, #288]	; (80019c4 <course_state_function+0x14c>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <course_state_function+0x14c>)
 80018ac:	801a      	strh	r2, [r3, #0]
#endif
			flash_buffer.course_state_time_max = course_state_time;
 80018ae:	4b45      	ldr	r3, [pc, #276]	; (80019c4 <course_state_function+0x14c>)
 80018b0:	881a      	ldrh	r2, [r3, #0]
 80018b2:	4b46      	ldr	r3, [pc, #280]	; (80019cc <course_state_function+0x154>)
 80018b4:	801a      	strh	r2, [r3, #0]
			my_gyro.z = theta * RADPERDEG;
 80018b6:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <course_state_function+0x158>)
 80018b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018bc:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <course_state_function+0x15c>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe fe99 	bl	80005f8 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4943      	ldr	r1, [pc, #268]	; (80019d8 <course_state_function+0x160>)
 80018cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	//		my_gyro.z *= RADPERDEG;
	#if !D_COURSE_SAVING
	#if !USE_LR_DIFFERENCE
			flash_buffer.radius[course_state_time] = (double) my_gyro.z / (double) mm_length;
	#else	// USE_LR_DIFFERENCE
			flash_buffer.radius[course_state_time] = (double) TREAD * (double) ((left_length) + (right_length)) / (double) ((left_length) - (right_length)) / (double) 2;
 80018d0:	4b42      	ldr	r3, [pc, #264]	; (80019dc <course_state_function+0x164>)
 80018d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d6:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <course_state_function+0x168>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fcd6 	bl	800028c <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	a333      	add	r3, pc, #204	; (adr r3, 80019b8 <course_state_function+0x140>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fe83 	bl	80005f8 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4614      	mov	r4, r2
 80018f8:	461d      	mov	r5, r3
 80018fa:	4b38      	ldr	r3, [pc, #224]	; (80019dc <course_state_function+0x164>)
 80018fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001900:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <course_state_function+0x168>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fcbf 	bl	8000288 <__aeabi_dsub>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7fe ff9b 	bl	800084c <__aeabi_ddiv>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <course_state_function+0x14c>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	461c      	mov	r4, r3
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192c:	f7fe ff8e 	bl	800084c <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4825      	ldr	r0, [pc, #148]	; (80019cc <course_state_function+0x154>)
 8001936:	1de1      	adds	r1, r4, #7
 8001938:	00c9      	lsls	r1, r1, #3
 800193a:	4401      	add	r1, r0
 800193c:	e9c1 2300 	strd	r2, r3, [r1]
			flash_buffer.igz[course_state_time] = my_gyro.z;
			flash_buffer.len[course_state_time] = mm_length;
	#endif	// !USE_LR_DIFFERENCE
	#endif	// D_COURSE_SAVING
	#if USE_LR_DIFFERENCE
			left_length = 0;
 8001940:	4926      	ldr	r1, [pc, #152]	; (80019dc <course_state_function+0x164>)
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9c1 2300 	strd	r2, r3, [r1]
			right_length = 0;
 800194e:	4924      	ldr	r1, [pc, #144]	; (80019e0 <course_state_function+0x168>)
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9c1 2300 	strd	r2, r3, [r1]
	#endif
			mm_length = 0;
 800195c:	4921      	ldr	r1, [pc, #132]	; (80019e4 <course_state_function+0x16c>)
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9c1 2300 	strd	r2, r3, [r1]
			my_gyro.z = 0;
 800196a:	491b      	ldr	r1, [pc, #108]	; (80019d8 <course_state_function+0x160>)
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	if(playmode == accel)
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <course_state_function+0x148>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d116      	bne.n	80019ae <course_state_function+0x136>
	{
		velocity_control_switch_function();
 8001980:	f7ff fef0 	bl	8001764 <velocity_control_switch_function>
		if(course_state_time + 1 >= COURSE_STATE_SIZE)	// sizeof(flash_buffer.radius) / sizeof(flash_buffer.radius[0]))
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <course_state_function+0x14c>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	f242 720e 	movw	r2, #9998	; 0x270e
 800198c:	4293      	cmp	r3, r2
 800198e:	d908      	bls.n	80019a2 <course_state_function+0x12a>
		{
			led_rgb(1, 1, 0);	// Yellow
 8001990:	2200      	movs	r2, #0
 8001992:	2101      	movs	r1, #1
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff fc73 	bl	8001280 <led_rgb>
			motorenable = 0;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <course_state_function+0x150>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
#if USE_COURSE_STATE_TIME
			course_state_time++;
#endif
		}
	}
}
 80019a0:	e005      	b.n	80019ae <course_state_function+0x136>
			course_state_time++;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <course_state_function+0x14c>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <course_state_function+0x14c>)
 80019ac:	801a      	strh	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	bdb0      	pop	{r4, r5, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	f3af 8000 	nop.w
 80019b8:	00000000 	.word	0x00000000
 80019bc:	4059c000 	.word	0x4059c000
 80019c0:	200002c0 	.word	0x200002c0
 80019c4:	20013f62 	.word	0x20013f62
 80019c8:	20013e20 	.word	0x20013e20
 80019cc:	200003a8 	.word	0x200003a8
 80019d0:	20000318 	.word	0x20000318
 80019d4:	20000208 	.word	0x20000208
 80019d8:	20013f40 	.word	0x20013f40
 80019dc:	20000348 	.word	0x20000348
 80019e0:	20000328 	.word	0x20000328
 80019e4:	20013e10 	.word	0x20013e10

080019e8 <led_brink>:
	*/
#endif	// USE_IMU
}

void led_brink()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
#if USE_LED
	uint16_t TIMTIM = 1000;
 80019ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f2:	80fb      	strh	r3, [r7, #6]

	if (timtim1 % TIMTIM == 0)	// 1 ms / roop
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <led_brink+0x70>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	88fa      	ldrh	r2, [r7, #6]
 80019fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80019fe:	fb02 f201 	mul.w	r2, r2, r1
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <led_brink+0x28>
	{
		set_led(0b10, 0b10);
 8001a08:	2102      	movs	r1, #2
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f7ff fc6e 	bl	80012ec <set_led>
	}
	if (timtim1 % TIMTIM == (int) (TIMTIM / 2))
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <led_brink+0x70>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	88fa      	ldrh	r2, [r7, #6]
 8001a16:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a1a:	fb02 f201 	mul.w	r2, r2, r1
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	88fa      	ldrh	r2, [r7, #6]
 8001a22:	0852      	lsrs	r2, r2, #1
 8001a24:	b292      	uxth	r2, r2
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d103      	bne.n	8001a32 <led_brink+0x4a>
	{
		set_led(0b10, 0b00);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f7ff fc5d 	bl	80012ec <set_led>
	}
	timtim1 = timtim1 + 1;
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <led_brink+0x70>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <led_brink+0x70>)
 8001a3a:	6013      	str	r3, [r2, #0]
	if (timtim1 >= 60000)
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <led_brink+0x70>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001a44:	4293      	cmp	r3, r2
 8001a46:	dd02      	ble.n	8001a4e <led_brink+0x66>
	{
		timtim1 = 0;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <led_brink+0x70>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
	}
#endif
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000035c 	.word	0x2000035c
 8001a5c:	00000000 	.word	0x00000000

08001a60 <pid_gain_initialize>:

void pid_gain_initialize()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	e00e      	b.n	8001a8a <pid_gain_initialize+0x2a>
	{
		low_velo.velocity_target[i] = VELOCITY_TARGET_LOW;
 8001a6c:	4a5c      	ldr	r2, [pc, #368]	; (8001be0 <pid_gain_initialize+0x180>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		high_velo.velocity_target[i] = VELOCITY_TARGET_HIGH;
 8001a78:	4a5a      	ldr	r2, [pc, #360]	; (8001be4 <pid_gain_initialize+0x184>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001a80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < 16; i++)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3301      	adds	r3, #1
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	dded      	ble.n	8001a6c <pid_gain_initialize+0xc>
	}
	low_velo.kp[0] = KP_LOW;
 8001a90:	4953      	ldr	r1, [pc, #332]	; (8001be0 <pid_gain_initialize+0x180>)
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <pid_gain_initialize+0x188>)
 8001a98:	e9c1 2308 	strd	r2, r3, [r1, #32]
	low_velo.ki[0] = KI_LOW;
 8001a9c:	4950      	ldr	r1, [pc, #320]	; (8001be0 <pid_gain_initialize+0x180>)
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	low_velo.kd[0] = KD_LOW;
 8001aaa:	494d      	ldr	r1, [pc, #308]	; (8001be0 <pid_gain_initialize+0x180>)
 8001aac:	a34a      	add	r3, pc, #296	; (adr r3, 8001bd8 <pid_gain_initialize+0x178>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
	high_velo.kp[0] = KP_HIGH;
 8001ab6:	494b      	ldr	r1, [pc, #300]	; (8001be4 <pid_gain_initialize+0x184>)
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <pid_gain_initialize+0x188>)
 8001abe:	e9c1 2308 	strd	r2, r3, [r1, #32]
	high_velo.ki[0] = KI_HIGH;
 8001ac2:	4948      	ldr	r1, [pc, #288]	; (8001be4 <pid_gain_initialize+0x184>)
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	high_velo.kd[0] = KD_HIGH;
 8001ad0:	4944      	ldr	r1, [pc, #272]	; (8001be4 <pid_gain_initialize+0x184>)
 8001ad2:	a341      	add	r3, pc, #260	; (adr r3, 8001bd8 <pid_gain_initialize+0x178>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
	for(int i = 1; i < 16; i++)
 8001adc:	2301      	movs	r3, #1
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	e070      	b.n	8001bc4 <pid_gain_initialize+0x164>
	{
		low_velo.kp[i] = KP_LOW + (i - 1) * KP_LOW_TOLERANCE;
 8001ae2:	4a3f      	ldr	r2, [pc, #252]	; (8001be0 <pid_gain_initialize+0x180>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	18d1      	adds	r1, r2, r3
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <pid_gain_initialize+0x188>)
 8001af2:	e9c1 2300 	strd	r2, r3, [r1]
		low_velo.ki[i] = KI_LOW + (i - 1) * KI_LOW_TOLERANCE;
 8001af6:	4a3a      	ldr	r2, [pc, #232]	; (8001be0 <pid_gain_initialize+0x180>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	3314      	adds	r3, #20
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	18d1      	adds	r1, r2, r3
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c1 2300 	strd	r2, r3, [r1]
		low_velo.kd[i] = KD_LOW + (i - 1) * KD_LOW_TOLERANCE;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	ee07 3a90 	vmov	s15, r3
 8001b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b18:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001bec <pid_gain_initialize+0x18c>
 8001b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b20:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001bf0 <pid_gain_initialize+0x190>
 8001b24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b28:	ee17 0a90 	vmov	r0, s15
 8001b2c:	f7fe fd0c 	bl	8000548 <__aeabi_f2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	482a      	ldr	r0, [pc, #168]	; (8001be0 <pid_gain_initialize+0x180>)
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	3124      	adds	r1, #36	; 0x24
 8001b3a:	00c9      	lsls	r1, r1, #3
 8001b3c:	4401      	add	r1, r0
 8001b3e:	e9c1 2300 	strd	r2, r3, [r1]
		high_velo.kp[i] = KP_HIGH + (i - 1) * KP_HIGH_TOLERANCE;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b50:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001bf4 <pid_gain_initialize+0x194>
 8001b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b58:	ee17 0a90 	vmov	r0, s15
 8001b5c:	f7fe fcf4 	bl	8000548 <__aeabi_f2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	481f      	ldr	r0, [pc, #124]	; (8001be4 <pid_gain_initialize+0x184>)
 8001b66:	6839      	ldr	r1, [r7, #0]
 8001b68:	3104      	adds	r1, #4
 8001b6a:	00c9      	lsls	r1, r1, #3
 8001b6c:	4401      	add	r1, r0
 8001b6e:	e9c1 2300 	strd	r2, r3, [r1]
		high_velo.ki[i] = KI_HIGH + (i - 1) * KI_HIGH_TOLERANCE;
 8001b72:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <pid_gain_initialize+0x184>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	3314      	adds	r3, #20
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	18d1      	adds	r1, r2, r3
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9c1 2300 	strd	r2, r3, [r1]
		high_velo.kd[i] = KD_HIGH + (i - 1) * KD_HIGH_TOLERANCE;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	1e5a      	subs	r2, r3, #1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001bf0 <pid_gain_initialize+0x190>
 8001ba0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba4:	ee17 0a90 	vmov	r0, s15
 8001ba8:	f7fe fcce 	bl	8000548 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <pid_gain_initialize+0x184>)
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	3124      	adds	r1, #36	; 0x24
 8001bb6:	00c9      	lsls	r1, r1, #3
 8001bb8:	4401      	add	r1, r0
 8001bba:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 1; i < 16; i++)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	dd8b      	ble.n	8001ae2 <pid_gain_initialize+0x82>
	}
}
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	4074fb5c 	.word	0x4074fb5c
 8001be0:	20013c70 	.word	0x20013c70
 8001be4:	20013f68 	.word	0x20013f68
 8001be8:	40318000 	.word	0x40318000
 8001bec:	41965ae2 	.word	0x41965ae2
 8001bf0:	43a7dae1 	.word	0x43a7dae1
 8001bf4:	418c0000 	.word	0x418c0000

08001bf8 <pid_initialize>:

void pid_initialize()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	velocity_target = low_velo.velocity_target[rv];
 8001bfc:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <pid_initialize+0x110>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <pid_initialize+0x114>)
 8001c04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc7b 	bl	8000504 <__aeabi_ui2d>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	493f      	ldr	r1, [pc, #252]	; (8001d10 <pid_initialize+0x118>)
 8001c14:	e9c1 2300 	strd	r2, r3, [r1]
	kp = low_velo.kp[rv];
 8001c18:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <pid_initialize+0x110>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <pid_initialize+0x114>)
 8001c1e:	3304      	adds	r3, #4
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	493a      	ldr	r1, [pc, #232]	; (8001d14 <pid_initialize+0x11c>)
 8001c2a:	e9c1 2300 	strd	r2, r3, [r1]
	kd = low_velo.kd[rv];
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <pid_initialize+0x110>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4a36      	ldr	r2, [pc, #216]	; (8001d0c <pid_initialize+0x114>)
 8001c34:	3324      	adds	r3, #36	; 0x24
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	4936      	ldr	r1, [pc, #216]	; (8001d18 <pid_initialize+0x120>)
 8001c40:	e9c1 2300 	strd	r2, r3, [r1]
	ki = low_velo.ki[rv];
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <pid_initialize+0x110>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4a30      	ldr	r2, [pc, #192]	; (8001d0c <pid_initialize+0x114>)
 8001c4a:	3314      	adds	r3, #20
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4413      	add	r3, r2
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	4931      	ldr	r1, [pc, #196]	; (8001d1c <pid_initialize+0x124>)
 8001c56:	e9c1 2300 	strd	r2, r3, [r1]
	if(playmode == accel)
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <pid_initialize+0x128>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d12e      	bne.n	8001cc0 <pid_initialize+0xc8>
	{
		velocity_target = high_velo.velocity_target[rv];
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <pid_initialize+0x110>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <pid_initialize+0x12c>)
 8001c6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fc48 	bl	8000504 <__aeabi_ui2d>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4925      	ldr	r1, [pc, #148]	; (8001d10 <pid_initialize+0x118>)
 8001c7a:	e9c1 2300 	strd	r2, r3, [r1]
		kp = high_velo.kp[rv];
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <pid_initialize+0x110>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <pid_initialize+0x12c>)
 8001c84:	3304      	adds	r3, #4
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	4921      	ldr	r1, [pc, #132]	; (8001d14 <pid_initialize+0x11c>)
 8001c90:	e9c1 2300 	strd	r2, r3, [r1]
		kd = high_velo.kd[rv];
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <pid_initialize+0x110>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <pid_initialize+0x12c>)
 8001c9a:	3324      	adds	r3, #36	; 0x24
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	491c      	ldr	r1, [pc, #112]	; (8001d18 <pid_initialize+0x120>)
 8001ca6:	e9c1 2300 	strd	r2, r3, [r1]
		ki = high_velo.ki[rv];
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <pid_initialize+0x110>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <pid_initialize+0x12c>)
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	4918      	ldr	r1, [pc, #96]	; (8001d1c <pid_initialize+0x124>)
 8001cbc:	e9c1 2300 	strd	r2, r3, [r1]
	}
#if USE_SLOWSTART
	slow = 1;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <pid_initialize+0x130>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
	starting_length = 0;
 8001cc6:	4919      	ldr	r1, [pc, #100]	; (8001d2c <pid_initialize+0x134>)
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	e9c1 2300 	strd	r2, r3, [r1]
	base_velocity_target = velocity_target;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <pid_initialize+0x118>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	4915      	ldr	r1, [pc, #84]	; (8001d30 <pid_initialize+0x138>)
 8001cdc:	e9c1 2300 	strd	r2, r3, [r1]
	base_p = kp;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <pid_initialize+0x11c>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	4913      	ldr	r1, [pc, #76]	; (8001d34 <pid_initialize+0x13c>)
 8001ce8:	e9c1 2300 	strd	r2, r3, [r1]
	base_i = ki;
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <pid_initialize+0x124>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	4911      	ldr	r1, [pc, #68]	; (8001d38 <pid_initialize+0x140>)
 8001cf4:	e9c1 2300 	strd	r2, r3, [r1]
	base_d = kd;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <pid_initialize+0x120>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	490f      	ldr	r1, [pc, #60]	; (8001d3c <pid_initialize+0x144>)
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
#endif  // USE_SLOWSTART
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200003a0 	.word	0x200003a0
 8001d0c:	20013c70 	.word	0x20013c70
 8001d10:	20013f00 	.word	0x20013f00
 8001d14:	20013f30 	.word	0x20013f30
 8001d18:	20000288 	.word	0x20000288
 8001d1c:	20000390 	.word	0x20000390
 8001d20:	200002c0 	.word	0x200002c0
 8001d24:	20013f68 	.word	0x20013f68
 8001d28:	20000331 	.word	0x20000331
 8001d2c:	20013c68 	.word	0x20013c68
 8001d30:	20000240 	.word	0x20000240
 8001d34:	200002c8 	.word	0x200002c8
 8001d38:	20000338 	.word	0x20000338
 8001d3c:	20013f58 	.word	0x20013f58

08001d40 <HAL_TIM_PeriodElapsedCallback>:
static void MX_I2C1_Init(void);
static void MX_TIM14_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d44:	b08a      	sub	sp, #40	; 0x28
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
	if (htim->Instance == TIM6) {	// 1 ms
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4abc      	ldr	r2, [pc, #752]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	f040 8204 	bne.w	800215e <HAL_TIM_PeriodElapsedCallback+0x41e>
		if (motorenable) {
 8001d56:	4bbb      	ldr	r3, [pc, #748]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8144 	beq.w	8001fe8 <HAL_TIM_PeriodElapsedCallback+0x2a8>
#if USE_ANALOG
			analogl = 0;
 8001d60:	4bb9      	ldr	r3, [pc, #740]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	801a      	strh	r2, [r3, #0]
			analogr = 0;
 8001d66:	4bb9      	ldr	r3, [pc, #740]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	801a      	strh	r2, [r3, #0]
			for (unsigned char i = 0; i < calibrationsize; i++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d72:	e046      	b.n	8001e02 <HAL_TIM_PeriodElapsedCallback+0xc2>
				analograte[i] = ((analog[i] - analogmin[i]) * 1000)
 8001d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d78:	4ab5      	ldr	r2, [pc, #724]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d84:	4ab3      	ldr	r2, [pc, #716]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d8a:	1acb      	subs	r3, r1, r3
 8001d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d90:	fb02 f203 	mul.w	r2, r2, r3
						/ (analogmax[i] - analogmin[i]);
 8001d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d98:	49af      	ldr	r1, [pc, #700]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001d9a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001da4:	49ab      	ldr	r1, [pc, #684]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001da6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001daa:	1ac3      	subs	r3, r0, r3
 8001dac:	fb92 f2f3 	sdiv	r2, r2, r3
				analograte[i] = ((analog[i] - analogmin[i]) * 1000)
 8001db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001db4:	b291      	uxth	r1, r2
 8001db6:	4aa9      	ldr	r2, [pc, #676]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001db8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
				analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500);
#endif

				if (i % 2 == 0) {
 8001dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10b      	bne.n	8001de2 <HAL_TIM_PeriodElapsedCallback+0xa2>
					analogl += analograte[i];
 8001dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dce:	4aa3      	ldr	r2, [pc, #652]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001dd0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001dd4:	4b9c      	ldr	r3, [pc, #624]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b9a      	ldr	r3, [pc, #616]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001dde:	801a      	strh	r2, [r3, #0]
 8001de0:	e00a      	b.n	8001df8 <HAL_TIM_PeriodElapsedCallback+0xb8>
				} else {
					analogr += analograte[i];
 8001de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de6:	4a9d      	ldr	r2, [pc, #628]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001de8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001dec:	4b97      	ldr	r3, [pc, #604]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b95      	ldr	r3, [pc, #596]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001df6:	801a      	strh	r2, [r3, #0]
			for (unsigned char i = 0; i < calibrationsize; i++) {
 8001df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e02:	4b97      	ldr	r3, [pc, #604]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d3b2      	bcc.n	8001d74 <HAL_TIM_PeriodElapsedCallback+0x34>
			}
#endif

			// ( direction > 0 ) is ( analogl > analogr ) i.e. left is black, right is white.
			// When ( direction > 0 ) , must turn right.
			direction = (analogl - analogr);	// difference
 8001e0e:	4b8e      	ldr	r3, [pc, #568]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b8d      	ldr	r3, [pc, #564]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	4a92      	ldr	r2, [pc, #584]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001e1c:	6013      	str	r3, [r2, #0]
			sdirection = sdirection + direction;	// Integral
 8001e1e:	4b92      	ldr	r3, [pc, #584]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b90      	ldr	r3, [pc, #576]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a8f      	ldr	r2, [pc, #572]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001e2a:	6013      	str	r3, [r2, #0]

			if (analogl + analogr <= 700 * calibrationsize) {
 8001e2c:	4b86      	ldr	r3, [pc, #536]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b86      	ldr	r3, [pc, #536]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	441a      	add	r2, r3
 8001e38:	4b89      	ldr	r3, [pc, #548]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001e42:	fb03 f301 	mul.w	r3, r3, r1
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dc02      	bgt.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x110>
				direction = 0;
 8001e4a:	4b86      	ldr	r3, [pc, #536]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
#if !VELOCITY_CONTROL_RELATIVE
			// left
			leftmotor = nextspeed_l + (kp * direction + kd * (direction - beforedirection)) / calibrationsize / 2;
			rightmotor = nextspeed_r - (kp * direction + kd * (direction - beforedirection)) / calibrationsize / 2;
#else	// VELOCITY_CONTROL_RELATIVE
			if(playmode != banquet)
 8001e50:	4b86      	ldr	r3, [pc, #536]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b06      	cmp	r3, #6
 8001e56:	f000 80c2 	beq.w	8001fde <HAL_TIM_PeriodElapsedCallback+0x29e>
			{
				leftmotor = commonspeed
						+ (kp * direction + kd * (direction - beforedirection)
 8001e5a:	4b85      	ldr	r3, [pc, #532]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb5f 	bl	8000524 <__aeabi_i2d>
 8001e66:	4680      	mov	r8, r0
 8001e68:	4689      	mov	r9, r1
 8001e6a:	4b7e      	ldr	r3, [pc, #504]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb58 	bl	8000524 <__aeabi_i2d>
 8001e74:	4b7f      	ldr	r3, [pc, #508]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fbbd 	bl	80005f8 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4614      	mov	r4, r2
 8001e84:	461d      	mov	r5, r3
 8001e86:	4b77      	ldr	r3, [pc, #476]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b7b      	ldr	r3, [pc, #492]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb47 	bl	8000524 <__aeabi_i2d>
 8001e96:	4b79      	ldr	r3, [pc, #484]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	f7fe fbac 	bl	80005f8 <__aeabi_dmul>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	f7fe f9f0 	bl	800028c <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	461d      	mov	r5, r3
								+ ki * sdirection) / calibrationsize / 2;
 8001eb4:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fb33 	bl	8000524 <__aeabi_i2d>
 8001ebe:	4b70      	ldr	r3, [pc, #448]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fb98 	bl	80005f8 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4620      	mov	r0, r4
 8001ece:	4629      	mov	r1, r5
 8001ed0:	f7fe f9dc 	bl	800028c <__adddf3>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4614      	mov	r4, r2
 8001eda:	461d      	mov	r5, r3
 8001edc:	4b60      	ldr	r3, [pc, #384]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb1f 	bl	8000524 <__aeabi_i2d>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4620      	mov	r0, r4
 8001eec:	4629      	mov	r1, r5
 8001eee:	f7fe fcad 	bl	800084c <__aeabi_ddiv>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f02:	f7fe fca3 	bl	800084c <__aeabi_ddiv>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
						+ (kp * direction + kd * (direction - beforedirection)
 8001f0a:	4640      	mov	r0, r8
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	f7fe f9bd 	bl	800028c <__adddf3>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
				leftmotor = commonspeed
 8001f16:	495b      	ldr	r1, [pc, #364]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001f18:	e9c1 2300 	strd	r2, r3, [r1]
				rightmotor = commonspeed
						- (kp * direction + kd * (direction - beforedirection)
 8001f1c:	4b54      	ldr	r3, [pc, #336]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fafe 	bl	8000524 <__aeabi_i2d>
 8001f28:	4680      	mov	r8, r0
 8001f2a:	4689      	mov	r9, r1
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe faf7 	bl	8000524 <__aeabi_i2d>
 8001f36:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	f7fe fb5c 	bl	80005f8 <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4614      	mov	r4, r2
 8001f46:	461d      	mov	r5, r3
 8001f48:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fae6 	bl	8000524 <__aeabi_i2d>
 8001f58:	4b48      	ldr	r3, [pc, #288]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fb4b 	bl	80005f8 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4620      	mov	r0, r4
 8001f68:	4629      	mov	r1, r5
 8001f6a:	f7fe f98f 	bl	800028c <__adddf3>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4614      	mov	r4, r2
 8001f74:	461d      	mov	r5, r3
								+ ki * sdirection) / calibrationsize / 2;
 8001f76:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fad2 	bl	8000524 <__aeabi_i2d>
 8001f80:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	f7fe fb37 	bl	80005f8 <__aeabi_dmul>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4620      	mov	r0, r4
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7fe f97b 	bl	800028c <__adddf3>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4614      	mov	r4, r2
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fabe 	bl	8000524 <__aeabi_i2d>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4620      	mov	r0, r4
 8001fae:	4629      	mov	r1, r5
 8001fb0:	f7fe fc4c 	bl	800084c <__aeabi_ddiv>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc4:	f7fe fc42 	bl	800084c <__aeabi_ddiv>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
						- (kp * direction + kd * (direction - beforedirection)
 8001fcc:	4640      	mov	r0, r8
 8001fce:	4649      	mov	r1, r9
 8001fd0:	f7fe f95a 	bl	8000288 <__aeabi_dsub>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
				rightmotor = commonspeed
 8001fd8:	492b      	ldr	r1, [pc, #172]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001fda:	e9c1 2300 	strd	r2, r3, [r1]
			leftmotor = commonspeed;
			rightmotor = commonspeed;
#endif
#endif	// !USE_ANALOG
#if USE_ANALOG
			beforedirection = direction;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a25      	ldr	r2, [pc, #148]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e00d      	b.n	8002004 <HAL_TIM_PeriodElapsedCallback+0x2c4>
			leftmotor = COMMONSPEED1;
			rightmotor = COMMONSPEED1;
#endif	// !STATICMOTORPWM
		} else	// if(motorenable)
		{
			leftmotor = 0;
 8001fe8:	4926      	ldr	r1, [pc, #152]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9c1 2300 	strd	r2, r3, [r1]
			rightmotor = 0;
 8001ff6:	4924      	ldr	r1, [pc, #144]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9c1 2300 	strd	r2, r3, [r1]
		}
#if USE_MOTOR
		if (leftmotor < 0) {
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	f7fe fd63 	bl	8000adc <__aeabi_dcmplt>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d039      	beq.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x350>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	2104      	movs	r1, #4
 8002020:	481a      	ldr	r0, [pc, #104]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002022:	f004 f847 	bl	80060b4 <HAL_GPIO_WritePin>
			leftmotor = leftmotor * -1;
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	603a      	str	r2, [r7, #0]
 800202e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002036:	ed97 7b00 	vldr	d7, [r7]
 800203a:	ed83 7b00 	vstr	d7, [r3]
 800203e:	e02c      	b.n	800209a <HAL_TIM_PeriodElapsedCallback+0x35a>
 8002040:	40001000 	.word	0x40001000
 8002044:	20013e20 	.word	0x20013e20
 8002048:	2000030e 	.word	0x2000030e
 800204c:	20013e22 	.word	0x20013e22
 8002050:	20000258 	.word	0x20000258
 8002054:	200002f4 	.word	0x200002f4
 8002058:	20013f18 	.word	0x20013f18
 800205c:	20000368 	.word	0x20000368
 8002060:	20000330 	.word	0x20000330
 8002064:	20000320 	.word	0x20000320
 8002068:	200002b4 	.word	0x200002b4
 800206c:	200002c0 	.word	0x200002c0
 8002070:	20000314 	.word	0x20000314
 8002074:	20013f30 	.word	0x20013f30
 8002078:	20013f38 	.word	0x20013f38
 800207c:	20000288 	.word	0x20000288
 8002080:	20000390 	.word	0x20000390
 8002084:	200002e0 	.word	0x200002e0
 8002088:	200002d8 	.word	0x200002d8
 800208c:	40020c00 	.word	0x40020c00
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8002090:	2201      	movs	r2, #1
 8002092:	2104      	movs	r1, #4
 8002094:	4878      	ldr	r0, [pc, #480]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002096:	f004 f80d 	bl	80060b4 <HAL_GPIO_WritePin>
		}

		if (rightmotor < 0) {
 800209a:	4b78      	ldr	r3, [pc, #480]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800209c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	f7fe fd18 	bl	8000adc <__aeabi_dcmplt>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00f      	beq.n	80020d2 <HAL_TIM_PeriodElapsedCallback+0x392>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b8:	4871      	ldr	r0, [pc, #452]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80020ba:	f003 fffb 	bl	80060b4 <HAL_GPIO_WritePin>
			rightmotor = rightmotor * -1;
 80020be:	4b6f      	ldr	r3, [pc, #444]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	4692      	mov	sl, r2
 80020c6:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80020ca:	4b6c      	ldr	r3, [pc, #432]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80020cc:	e9c3 ab00 	strd	sl, fp, [r3]
 80020d0:	e005      	b.n	80020de <HAL_TIM_PeriodElapsedCallback+0x39e>
		} else {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020d8:	4869      	ldr	r0, [pc, #420]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80020da:	f003 ffeb 	bl	80060b4 <HAL_GPIO_WritePin>
		}

		leftmotor = leftmotor > PWMMAX ? PWMMAX : leftmotor;
 80020de:	4b69      	ldr	r3, [pc, #420]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80020e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b67      	ldr	r3, [pc, #412]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80020ea:	f7fe fd15 	bl	8000b18 <__aeabi_dcmpgt>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_TIM_PeriodElapsedCallback+0x3bc>
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	4b63      	ldr	r3, [pc, #396]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80020fa:	e002      	b.n	8002102 <HAL_TIM_PeriodElapsedCallback+0x3c2>
 80020fc:	4b61      	ldr	r3, [pc, #388]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	4960      	ldr	r1, [pc, #384]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002104:	e9c1 2300 	strd	r2, r3, [r1]
		rightmotor = rightmotor > PWMMAX ? PWMMAX : rightmotor;
 8002108:	4b5c      	ldr	r3, [pc, #368]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800210a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4b5d      	ldr	r3, [pc, #372]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002114:	f7fe fd00 	bl	8000b18 <__aeabi_dcmpgt>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x3e6>
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b59      	ldr	r3, [pc, #356]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002124:	e002      	b.n	800212c <HAL_TIM_PeriodElapsedCallback+0x3ec>
 8002126:	4b55      	ldr	r3, [pc, #340]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212c:	4953      	ldr	r1, [pc, #332]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800212e:	e9c1 2300 	strd	r2, r3, [r1]
#endif

#if !D_PWM
#if USE_MOTOR
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, leftmotor);
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	4954      	ldr	r1, [pc, #336]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800213a:	680c      	ldr	r4, [r1, #0]
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	f7fe fd32 	bl	8000ba8 <__aeabi_d2uiz>
 8002144:	4603      	mov	r3, r0
 8002146:	6363      	str	r3, [r4, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, rightmotor);
 8002148:	4b4c      	ldr	r3, [pc, #304]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	494f      	ldr	r1, [pc, #316]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002150:	680c      	ldr	r4, [r1, #0]
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	f7fe fd27 	bl	8000ba8 <__aeabi_d2uiz>
 800215a:	4603      	mov	r3, r0
 800215c:	63a3      	str	r3, [r4, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, COMMONSPEED1);
#endif	// STATICPWM
#endif	// D_PWM
	}	// TIM6

	if (htim->Instance == TIM10)	// TIM10 // 1ms
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a4b      	ldr	r2, [pc, #300]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002164:	4293      	cmp	r3, r2
 8002166:	f040 825d 	bne.w	8002624 <HAL_TIM_PeriodElapsedCallback+0x8e4>
	{
	#if USE_ENCODER
		// 1ms
		encoder_l = TIM1->CNT - ENCODER_MIDDLE;
 800216a:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	b29b      	uxth	r3, r3
 8002170:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002174:	b29b      	uxth	r3, r3
 8002176:	b21a      	sxth	r2, r3
 8002178:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x558>)
 800217a:	801a      	strh	r2, [r3, #0]
		encoder_r = -(TIM3->CNT - ENCODER_MIDDLE);
 800217c:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	b29b      	uxth	r3, r3
 8002182:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002186:	b29b      	uxth	r3, r3
 8002188:	b21a      	sxth	r2, r3
 800218a:	4b45      	ldr	r3, [pc, #276]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800218c:	801a      	strh	r2, [r3, #0]

		TIM1->CNT = ENCODER_MIDDLE;
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->CNT = ENCODER_MIDDLE;
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219c:	625a      	str	r2, [r3, #36]	; 0x24

		encoder = (double) (encoder_l + encoder_r) / 2;
 800219e:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80021a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80021a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ac:	4413      	add	r3, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9b8 	bl	8000524 <__aeabi_i2d>
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021bc:	f7fe fb46 	bl	800084c <__aeabi_ddiv>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7fe fcc6 	bl	8000b58 <__aeabi_d2iz>
 80021cc:	4603      	mov	r3, r0
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80021d2:	801a      	strh	r2, [r3, #0]
		velocity = (double) encoder * LENGTHPERPULSE;
 80021d4:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80021d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f9a2 	bl	8000524 <__aeabi_i2d>
 80021e0:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80021e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e6:	f7fe fa07 	bl	80005f8 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	492f      	ldr	r1, [pc, #188]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80021f0:	e9c1 2300 	strd	r2, r3, [r1]
	#endif	// USE_ENCODER
	#if USE_SLOWSTART
		if(slow)
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80e8 	beq.w	80023ce <HAL_TIM_PeriodElapsedCallback+0x68e>
		{
			starting_length += velocity;
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002200:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002204:	4b29      	ldr	r3, [pc, #164]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	f7fe f83f 	bl	800028c <__adddf3>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4928      	ldr	r1, [pc, #160]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002214:	e9c1 2300 	strd	r2, r3, [r1]
			if(rightmarkercount == 0)
 8002218:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d17d      	bne.n	800231c <HAL_TIM_PeriodElapsedCallback+0x5dc>
			{
				if(starting_length < THRESHOLD_STARTING_LENGTH)
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002226:	a312      	add	r3, pc, #72	; (adr r3, 8002270 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe fc56 	bl	8000adc <__aeabi_dcmplt>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d050      	beq.n	80022d8 <HAL_TIM_PeriodElapsedCallback+0x598>
				{
					velocity_target = 100;
 8002236:	4921      	ldr	r1, [pc, #132]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 800223e:	e9c1 2300 	strd	r2, r3, [r1]
					kp = 10;
 8002242:	4920      	ldr	r1, [pc, #128]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800224a:	e9c1 2300 	strd	r2, r3, [r1]
					kd = 15;
 800224e:	491f      	ldr	r1, [pc, #124]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002256:	e9c1 2300 	strd	r2, r3, [r1]
					ki = 0;
 800225a:	491e      	ldr	r1, [pc, #120]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x594>)
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	e9c1 2300 	strd	r2, r3, [r1]
 8002268:	e058      	b.n	800231c <HAL_TIM_PeriodElapsedCallback+0x5dc>
 800226a:	bf00      	nop
 800226c:	f3af 8000 	nop.w
 8002270:	00000000 	.word	0x00000000
 8002274:	410e8480 	.word	0x410e8480
 8002278:	40020c00 	.word	0x40020c00
 800227c:	200002d8 	.word	0x200002d8
 8002280:	40020800 	.word	0x40020800
 8002284:	200002e0 	.word	0x200002e0
 8002288:	408f4000 	.word	0x408f4000
 800228c:	20014160 	.word	0x20014160
 8002290:	40014400 	.word	0x40014400
 8002294:	40010000 	.word	0x40010000
 8002298:	20000358 	.word	0x20000358
 800229c:	40000400 	.word	0x40000400
 80022a0:	20013f08 	.word	0x20013f08
 80022a4:	200002f0 	.word	0x200002f0
 80022a8:	20013e18 	.word	0x20013e18
 80022ac:	20000388 	.word	0x20000388
 80022b0:	20000331 	.word	0x20000331
 80022b4:	20013c68 	.word	0x20013c68
 80022b8:	20013f60 	.word	0x20013f60
 80022bc:	20013f00 	.word	0x20013f00
 80022c0:	40590000 	.word	0x40590000
 80022c4:	20013f30 	.word	0x20013f30
 80022c8:	40240000 	.word	0x40240000
 80022cc:	20000288 	.word	0x20000288
 80022d0:	402e0000 	.word	0x402e0000
 80022d4:	20000390 	.word	0x20000390
				}
				else
				{
					velocity_target = base_velocity_target;
 80022d8:	4b75      	ldr	r3, [pc, #468]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x770>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	4975      	ldr	r1, [pc, #468]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x774>)
 80022e0:	e9c1 2300 	strd	r2, r3, [r1]
					kp = base_p;
 80022e4:	4b74      	ldr	r3, [pc, #464]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x778>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	4974      	ldr	r1, [pc, #464]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80022ec:	e9c1 2300 	strd	r2, r3, [r1]
					ki = base_i;
 80022f0:	4b73      	ldr	r3, [pc, #460]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x780>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	4973      	ldr	r1, [pc, #460]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80022f8:	e9c1 2300 	strd	r2, r3, [r1]
					kd = base_d;
 80022fc:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	4972      	ldr	r1, [pc, #456]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 8002304:	e9c1 2300 	strd	r2, r3, [r1]
					slow = 0;
 8002308:	4b71      	ldr	r3, [pc, #452]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x790>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
					starting_length = 0;
 800230e:	4971      	ldr	r1, [pc, #452]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			if(rightmarkercount >= 2)
 800231c:	4b6e      	ldr	r3, [pc, #440]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x798>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d95a      	bls.n	80023da <HAL_TIM_PeriodElapsedCallback+0x69a>
			{
				if(starting_length < THRESHOLD_STARTING_LENGTH)
 8002324:	4b6b      	ldr	r3, [pc, #428]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 8002326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800232a:	a35b      	add	r3, pc, #364	; (adr r3, 8002498 <HAL_TIM_PeriodElapsedCallback+0x758>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	f7fe fbd4 	bl	8000adc <__aeabi_dcmplt>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d045      	beq.n	80023c6 <HAL_TIM_PeriodElapsedCallback+0x686>
				{
					double _rate;
					_rate = (THRESHOLD_STARTING_LENGTH - starting_length) / THRESHOLD_STARTING_LENGTH;
 800233a:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x794>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	a155      	add	r1, pc, #340	; (adr r1, 8002498 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002346:	f7fd ff9f 	bl	8000288 <__aeabi_dsub>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	a351      	add	r3, pc, #324	; (adr r3, 8002498 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe fa78 	bl	800084c <__aeabi_ddiv>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	e9c7 2306 	strd	r2, r3, [r7, #24]
					velocity_target = base_velocity_target * _rate;
 8002364:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x770>)
 8002366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800236a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800236e:	f7fe f943 	bl	80005f8 <__aeabi_dmul>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	494f      	ldr	r1, [pc, #316]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x774>)
 8002378:	e9c1 2300 	strd	r2, r3, [r1]
					kp = base_p * _rate;
 800237c:	4b4e      	ldr	r3, [pc, #312]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800237e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002382:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002386:	f7fe f937 	bl	80005f8 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	494b      	ldr	r1, [pc, #300]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x77c>)
 8002390:	e9c1 2300 	strd	r2, r3, [r1]
					ki = base_i * _rate;
 8002394:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x780>)
 8002396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800239e:	f7fe f92b 	bl	80005f8 <__aeabi_dmul>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4947      	ldr	r1, [pc, #284]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x784>)
 80023a8:	e9c1 2300 	strd	r2, r3, [r1]
					kd = base_d * _rate;
 80023ac:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x788>)
 80023ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b6:	f7fe f91f 	bl	80005f8 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4943      	ldr	r1, [pc, #268]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x78c>)
 80023c0:	e9c1 2300 	strd	r2, r3, [r1]
 80023c4:	e009      	b.n	80023da <HAL_TIM_PeriodElapsedCallback+0x69a>
				}
				else
				{
					motorenable = 0;
 80023c6:	4b45      	ldr	r3, [pc, #276]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x79c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e005      	b.n	80023da <HAL_TIM_PeriodElapsedCallback+0x69a>
				}
			}
		}
		else
		{
	        if(playmode == accel)
 80023ce:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d101      	bne.n	80023da <HAL_TIM_PeriodElapsedCallback+0x69a>
	        {
#if LENGTH_SAMPLING
	        	course_state_function();
 80023d6:	f7ff fa4f 	bl	8001878 <course_state_function>
			}
		}
#endif // D_VELOCITY_CONTROL_TIMER && USE_VELOCITY_CONTROL

#if USE_VELOCITY_CONTROL
		if (playmode != zero_trace && playmode != banquet)
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b05      	cmp	r3, #5
 80023e0:	f000 808e 	beq.w	8002500 <HAL_TIM_PeriodElapsedCallback+0x7c0>
 80023e4:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x7a0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b06      	cmp	r3, #6
 80023ea:	f000 8089 	beq.w	8002500 <HAL_TIM_PeriodElapsedCallback+0x7c0>
		{
			velocity_error = velocity_target - velocity;
 80023ee:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x774>)
 80023f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f4:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x7a4>)
 80023f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fa:	f7fd ff45 	bl	8000288 <__aeabi_dsub>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4939      	ldr	r1, [pc, #228]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8002404:	e9c1 2300 	strd	r2, r3, [r1]
			s_velocity_error = s_velocity_error + velocity_error;
 8002408:	4b38      	ldr	r3, [pc, #224]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x7ac>)
 800240a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240e:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f7fd ff3a 	bl	800028c <__adddf3>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4933      	ldr	r1, [pc, #204]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x7ac>)
 800241e:	e9c1 2300 	strd	r2, r3, [r1]

			velocity_next = (double) VKP * velocity_error
 8002422:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x7a8>)
 8002424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 800242e:	f7fe f8e3 	bl	80005f8 <__aeabi_dmul>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4614      	mov	r4, r2
 8002438:	461d      	mov	r5, r3
					+ (double) VKI * s_velocity_error;
 800243a:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x7ac>)
 800243c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002440:	a317      	add	r3, pc, #92	; (adr r3, 80024a0 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe f8d7 	bl	80005f8 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4620      	mov	r0, r4
 8002450:	4629      	mov	r1, r5
 8002452:	f7fd ff1b 	bl	800028c <__adddf3>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
			velocity_next = (double) VKP * velocity_error
 800245a:	4926      	ldr	r1, [pc, #152]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 800245c:	e9c1 2300 	strd	r2, r3, [r1]
			commonspeed = (double) velocity_next * (double) PWMMAX
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 8002462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 800246c:	f7fe f8c4 	bl	80005f8 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
					/ (double) VELOCITY_MAX;
 8002478:	a30b      	add	r3, pc, #44	; (adr r3, 80024a8 <HAL_TIM_PeriodElapsedCallback+0x768>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fe f9e5 	bl	800084c <__aeabi_ddiv>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
			commonspeed = (double) velocity_next * (double) PWMMAX
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f7fe fb65 	bl	8000b58 <__aeabi_d2iz>
 800248e:	4603      	mov	r3, r0
 8002490:	b21a      	sxth	r2, r3
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e036      	b.n	8002506 <HAL_TIM_PeriodElapsedCallback+0x7c6>
 8002498:	00000000 	.word	0x00000000
 800249c:	410e8480 	.word	0x410e8480
 80024a0:	e0000000 	.word	0xe0000000
 80024a4:	3faeb851 	.word	0x3faeb851
 80024a8:	00000000 	.word	0x00000000
 80024ac:	40c04a00 	.word	0x40c04a00
 80024b0:	20000240 	.word	0x20000240
 80024b4:	20013f00 	.word	0x20013f00
 80024b8:	200002c8 	.word	0x200002c8
 80024bc:	20013f30 	.word	0x20013f30
 80024c0:	20000338 	.word	0x20000338
 80024c4:	20000390 	.word	0x20000390
 80024c8:	20013f58 	.word	0x20013f58
 80024cc:	20000288 	.word	0x20000288
 80024d0:	20000331 	.word	0x20000331
 80024d4:	20013c68 	.word	0x20013c68
 80024d8:	20013f60 	.word	0x20013f60
 80024dc:	20013e20 	.word	0x20013e20
 80024e0:	200002c0 	.word	0x200002c0
 80024e4:	20000388 	.word	0x20000388
 80024e8:	20000278 	.word	0x20000278
 80024ec:	200002b8 	.word	0x200002b8
 80024f0:	40180000 	.word	0x40180000
 80024f4:	20013c60 	.word	0x20013c60
 80024f8:	408f4000 	.word	0x408f4000
 80024fc:	20000314 	.word	0x20000314
		} else {
			commonspeed = 0;
 8002500:	4b81      	ldr	r3, [pc, #516]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8002502:	2200      	movs	r2, #0
 8002504:	801a      	strh	r2, [r3, #0]
		}
	#endif	// USE_VELOCITY_CONTROL
	#if USE_IMU
		if(playmode == search && !slow)
 8002506:	4b81      	ldr	r3, [pc, #516]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	f040 8086 	bne.w	800261c <HAL_TIM_PeriodElapsedCallback+0x8dc>
 8002510:	4b7f      	ldr	r3, [pc, #508]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 8081 	bne.w	800261c <HAL_TIM_PeriodElapsedCallback+0x8dc>
		{
			if (rightmarkercount == 1)	// SAMPLING_LENGTH /
 800251a:	4b7e      	ldr	r3, [pc, #504]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d170      	bne.n	8002604 <HAL_TIM_PeriodElapsedCallback+0x8c4>
			{
				IMU_read();
 8002522:	f7fe fe4d 	bl	80011c0 <IMU_read>
				theta += (double) inertial.gyro.z / (double) GYRO_RANGE;
 8002526:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 8002528:	895b      	ldrh	r3, [r3, #10]
 800252a:	b21b      	sxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	f7fd fff9 	bl	8000524 <__aeabi_i2d>
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	4b79      	ldr	r3, [pc, #484]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x9dc>)
 8002538:	f7fe f988 	bl	800084c <__aeabi_ddiv>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	4b76      	ldr	r3, [pc, #472]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fd fe9f 	bl	800028c <__adddf3>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4973      	ldr	r1, [pc, #460]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8002554:	e9c1 2300 	strd	r2, r3, [r1]
//				my_gyro.z += low_pass_filter((double) inertial.gyro.z / (double) GYRO_RANGE, before_igz, 0);
//				my_gyro.z += (double) inertial.gyro.z / (double) GYRO_RANGE;
//				before_igz = inertial.gyro.z;
				mm_length += (double) velocity / (double) 1000;
 8002558:	4b72      	ldr	r3, [pc, #456]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x9e4>)
 800255a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	4b71      	ldr	r3, [pc, #452]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8002564:	f7fe f972 	bl	800084c <__aeabi_ddiv>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	4b6e      	ldr	r3, [pc, #440]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f7fd fe89 	bl	800028c <__adddf3>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	496b      	ldr	r1, [pc, #428]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 8002580:	e9c1 2300 	strd	r2, r3, [r1]
#if USE_LR_DIFFERENCE
		left_length += (double) encoder_l * LENGTHPERPULSE;
 8002584:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 8002586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ffca 	bl	8000524 <__aeabi_i2d>
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fe f82f 	bl	80005f8 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f7fd fe70 	bl	800028c <__adddf3>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4961      	ldr	r1, [pc, #388]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 80025b2:	e9c1 2300 	strd	r2, r3, [r1]
		right_length += (double) encoder_r * LENGTHPERPULSE;
 80025b6:	4b61      	ldr	r3, [pc, #388]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 80025b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffb1 	bl	8000524 <__aeabi_i2d>
 80025c2:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f816 	bl	80005f8 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	4b5a      	ldr	r3, [pc, #360]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fd fe57 	bl	800028c <__adddf3>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4957      	ldr	r1, [pc, #348]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80025e4:	e9c1 2300 	strd	r2, r3, [r1]
#endif
				// radius = my_gyro.z / mm_length
#if LENGTH_SAMPLING
				if(mm_length >= SAMPLING_LENGTH)
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 80025ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ee:	a344      	add	r3, pc, #272	; (adr r3, 8002700 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fe fa86 	bl	8000b04 <__aeabi_dcmpge>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00e      	beq.n	800261c <HAL_TIM_PeriodElapsedCallback+0x8dc>
				{
					course_state_function();
 80025fe:	f7ff f93b 	bl	8001878 <course_state_function>
 8002602:	e00b      	b.n	800261c <HAL_TIM_PeriodElapsedCallback+0x8dc>
#endif
			}
			else
			{
#if !D_COURSE_SAVING
				flash_buffer.radius[course_state_time] = 0;
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	4a4f      	ldr	r2, [pc, #316]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 800260a:	3307      	adds	r3, #7
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	18d1      	adds	r1, r2, r3
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9c1 2300 	strd	r2, r3, [r1]
#endif
			}
		}	// playmode == search && !slow
	#endif	// USE_IMU

		sidesens_function();
 800261c:	f7ff f80c 	bl	8001638 <sidesens_function>
		led_brink();
 8002620:	f7ff f9e2 	bl	80019e8 <led_brink>
	}	// TIM10


	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a48      	ldr	r2, [pc, #288]	; (800274c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d161      	bne.n	80026f2 <HAL_TIM_PeriodElapsedCallback+0x9b2>
	{
		uint8_t rotary_value_row;
		rotary_value_row = (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12)) ? 1 : 0;
 800262e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002632:	4847      	ldr	r0, [pc, #284]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8002634:	f003 fd26 	bl	8006084 <HAL_GPIO_ReadPin>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	bf0c      	ite	eq
 800263e:	2301      	moveq	r3, #1
 8002640:	2300      	movne	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	75fb      	strb	r3, [r7, #23]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10)) ? 2 : 0;
 8002646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800264a:	4841      	ldr	r0, [pc, #260]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800264c:	f003 fd1a 	bl	8006084 <HAL_GPIO_ReadPin>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_TIM_PeriodElapsedCallback+0x91a>
 8002656:	2302      	movs	r3, #2
 8002658:	e000      	b.n	800265c <HAL_TIM_PeriodElapsedCallback+0x91c>
 800265a:	2300      	movs	r3, #0
 800265c:	b2da      	uxtb	r2, r3
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	4413      	add	r3, r2
 8002662:	75fb      	strb	r3, [r7, #23]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) ? 4 : 0;
 8002664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002668:	483a      	ldr	r0, [pc, #232]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 800266a:	f003 fd0b 	bl	8006084 <HAL_GPIO_ReadPin>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_TIM_PeriodElapsedCallback+0x938>
 8002674:	2304      	movs	r3, #4
 8002676:	e000      	b.n	800267a <HAL_TIM_PeriodElapsedCallback+0x93a>
 8002678:	2300      	movs	r3, #0
 800267a:	b2da      	uxtb	r2, r3
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	4413      	add	r3, r2
 8002680:	75fb      	strb	r3, [r7, #23]
		rotary_value_row += (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)) ? 8 : 0;
 8002682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002686:	4832      	ldr	r0, [pc, #200]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8002688:	f003 fcfc 	bl	8006084 <HAL_GPIO_ReadPin>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_TIM_PeriodElapsedCallback+0x956>
 8002692:	2308      	movs	r3, #8
 8002694:	e000      	b.n	8002698 <HAL_TIM_PeriodElapsedCallback+0x958>
 8002696:	2300      	movs	r3, #0
 8002698:	b2da      	uxtb	r2, r3
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	4413      	add	r3, r2
 800269e:	75fb      	strb	r3, [r7, #23]
		rotary_value = rotary_value_row;
 80026a0:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
 80026a4:	7013      	strb	r3, [r2, #0]

#if USE_BUZZER
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1406 * rotary_value_row / 16);
#endif

		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 80026a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026aa:	4829      	ldr	r0, [pc, #164]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 80026ac:	f003 fcea 	bl	8006084 <HAL_GPIO_ReadPin>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10a      	bne.n	80026cc <HAL_TIM_PeriodElapsedCallback+0x98c>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 80026b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ba:	4825      	ldr	r0, [pc, #148]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 80026bc:	f003 fce2 	bl	8006084 <HAL_GPIO_ReadPin>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_TIM_PeriodElapsedCallback+0x98c>
			enter = 1;
 80026c6:	4b25      	ldr	r3, [pc, #148]	; (800275c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)
 80026cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026d0:	481f      	ldr	r0, [pc, #124]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 80026d2:	f003 fcd7 	bl	8006084 <HAL_GPIO_ReadPin>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_TIM_PeriodElapsedCallback+0x9b2>
				&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)) {
 80026dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e0:	481b      	ldr	r0, [pc, #108]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 80026e2:	f003 fccf 	bl	8006084 <HAL_GPIO_ReadPin>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <HAL_TIM_PeriodElapsedCallback+0x9b2>
			enter = 0;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80026f2:	bf00      	nop
 80026f4:	3728      	adds	r7, #40	; 0x28
 80026f6:	46bd      	mov	sp, r7
 80026f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fc:	f3af 8000 	nop.w
 8002700:	00000000 	.word	0x00000000
 8002704:	40c38800 	.word	0x40c38800
 8002708:	20000314 	.word	0x20000314
 800270c:	200002c0 	.word	0x200002c0
 8002710:	20000331 	.word	0x20000331
 8002714:	20013f60 	.word	0x20013f60
 8002718:	20000230 	.word	0x20000230
 800271c:	409f4000 	.word	0x409f4000
 8002720:	20000318 	.word	0x20000318
 8002724:	20000388 	.word	0x20000388
 8002728:	408f4000 	.word	0x408f4000
 800272c:	20013e10 	.word	0x20013e10
 8002730:	20000358 	.word	0x20000358
 8002734:	20013e18 	.word	0x20013e18
 8002738:	20000348 	.word	0x20000348
 800273c:	20013f08 	.word	0x20013f08
 8002740:	20000328 	.word	0x20000328
 8002744:	20013f62 	.word	0x20013f62
 8002748:	200003a8 	.word	0x200003a8
 800274c:	40014800 	.word	0x40014800
 8002750:	40020800 	.word	0x40020800
 8002754:	40020000 	.word	0x40020000
 8002758:	2000030c 	.word	0x2000030c
 800275c:	20013f64 	.word	0x20013f64

08002760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002766:	f001 fe5d 	bl	8004424 <HAL_Init>

  /* USER CODE BEGIN Init */
#if USE_LED
	set_led(0b11, 0b00);
 800276a:	2100      	movs	r1, #0
 800276c:	2003      	movs	r0, #3
 800276e:	f7fe fdbd 	bl	80012ec <set_led>
#endif

	enter = 0;
 8002772:	4bc1      	ldr	r3, [pc, #772]	; (8002a78 <main+0x318>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
	motorenable = 0;
 8002778:	4bc0      	ldr	r3, [pc, #768]	; (8002a7c <main+0x31c>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
	rotary_value = 0;
 800277e:	4bc0      	ldr	r3, [pc, #768]	; (8002a80 <main+0x320>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
	rv = 0;
 8002784:	4bbf      	ldr	r3, [pc, #764]	; (8002a84 <main+0x324>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
	LENGTHPERPULSE = M_PI * TIREDIAMETER * PINION / (double) PULSEPERROTATE
 800278a:	49bf      	ldr	r1, [pc, #764]	; (8002a88 <main+0x328>)
 800278c:	a3b8      	add	r3, pc, #736	; (adr r3, 8002a70 <main+0x310>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	e9c1 2300 	strd	r2, r3, [r1]
			/ (double) SUPER;
	commonspeed = 0;
 8002796:	4bbd      	ldr	r3, [pc, #756]	; (8002a8c <main+0x32c>)
 8002798:	2200      	movs	r2, #0
 800279a:	801a      	strh	r2, [r3, #0]
	calibrationsize = CALIBRATIONSIZE;
 800279c:	4bbc      	ldr	r3, [pc, #752]	; (8002a90 <main+0x330>)
 800279e:	220c      	movs	r2, #12
 80027a0:	701a      	strb	r2, [r3, #0]
	pwmsteptime = 0;
	pwmstepud = 1;
#endif

#if USE_FLASH
	printf("Load Flash\r\n");
 80027a2:	48bc      	ldr	r0, [pc, #752]	; (8002a94 <main+0x334>)
 80027a4:	f007 faf8 	bl	8009d98 <puts>
	loadFlash(start_address, (uint8_t*) &flash_buffer, sizeof(FlashBuffer));
 80027a8:	4bbb      	ldr	r3, [pc, #748]	; (8002a98 <main+0x338>)
 80027aa:	4abc      	ldr	r2, [pc, #752]	; (8002a9c <main+0x33c>)
 80027ac:	49bc      	ldr	r1, [pc, #752]	; (8002aa0 <main+0x340>)
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe ff31 	bl	8001616 <loadFlash>
#endif

	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e00d      	b.n	80027d6 <main+0x76>
		analogmax[i] = 0;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	4ab9      	ldr	r2, [pc, #740]	; (8002aa4 <main+0x344>)
 80027be:	2100      	movs	r1, #0
 80027c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmin[i] = 4096;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	4ab8      	ldr	r2, [pc, #736]	; (8002aa8 <main+0x348>)
 80027c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	3301      	adds	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b0b      	cmp	r3, #11
 80027da:	d9ee      	bls.n	80027ba <main+0x5a>
	}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027dc:	f000 fa5a 	bl	8002c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e0:	f000 fe9e 	bl	8003520 <MX_GPIO_Init>
  MX_DMA_Init();
 80027e4:	f000 fe7c 	bl	80034e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80027e8:	f000 fabe 	bl	8002d68 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80027ec:	f000 fe4e 	bl	800348c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80027f0:	f000 fdaa 	bl	8003348 <MX_TIM6_Init>
  MX_TIM4_Init();
 80027f4:	f000 fd44 	bl	8003280 <MX_TIM4_Init>
  MX_TIM1_Init();
 80027f8:	f000 fc3e 	bl	8003078 <MX_TIM1_Init>
  MX_TIM3_Init();
 80027fc:	f000 fcec 	bl	80031d8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8002800:	f000 fdd8 	bl	80033b4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002804:	f000 fdfa 	bl	80033fc <MX_TIM11_Init>
  MX_SPI2_Init();
 8002808:	f000 fc00 	bl	800300c <MX_SPI2_Init>
  MX_I2C1_Init();
 800280c:	f000 fbd0 	bl	8002fb0 <MX_I2C1_Init>
  MX_TIM14_Init();
 8002810:	f000 fe18 	bl	8003444 <MX_TIM14_Init>
  MX_TIM2_Init();
 8002814:	f000 fc88 	bl	8003128 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8002818:	48a4      	ldr	r0, [pc, #656]	; (8002aac <main+0x34c>)
 800281a:	f007 fa37 	bl	8009c8c <iprintf>
	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 800281e:	48a4      	ldr	r0, [pc, #656]	; (8002ab0 <main+0x350>)
 8002820:	f007 faba 	bl	8009d98 <puts>

	printf("Starting Analog Read\r\n");
 8002824:	48a3      	ldr	r0, [pc, #652]	; (8002ab4 <main+0x354>)
 8002826:	f007 fab7 	bl	8009d98 <puts>
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800282a:	48a3      	ldr	r0, [pc, #652]	; (8002ab8 <main+0x358>)
 800282c:	f001 fe90 	bl	8004550 <HAL_ADC_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <main+0xda>
		Error_Handler();
 8002836:	f001 f93d 	bl	8003ab4 <Error_Handler>
	}

	printf("Starting TIM11\r\n");
 800283a:	48a0      	ldr	r0, [pc, #640]	; (8002abc <main+0x35c>)
 800283c:	f007 faac 	bl	8009d98 <puts>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8002840:	489f      	ldr	r0, [pc, #636]	; (8002ac0 <main+0x360>)
 8002842:	f004 ff7e 	bl	8007742 <HAL_TIM_Base_Start_IT>

	playmode = (PlayMode) rotary_value;
 8002846:	4b8e      	ldr	r3, [pc, #568]	; (8002a80 <main+0x320>)
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	4b9e      	ldr	r3, [pc, #632]	; (8002ac4 <main+0x364>)
 800284c:	701a      	strb	r2, [r3, #0]

	playmode_print();
 800284e:	f7fe fd83 	bl	8001358 <playmode_print>
	Error_Handler();
}
#endif

#if USE_IMU
	printf("Starting SPI2 (IMU)\r\n");
 8002852:	489d      	ldr	r0, [pc, #628]	; (8002ac8 <main+0x368>)
 8002854:	f007 faa0 	bl	8009d98 <puts>
	uint8_t wai, ret;
	ret = IMU_init(&wai);
 8002858:	1dbb      	adds	r3, r7, #6
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fc24 	bl	80010a8 <IMU_init>
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
	printf("who_am_i = %d\r\n", wai);
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	4619      	mov	r1, r3
 8002868:	4898      	ldr	r0, [pc, #608]	; (8002acc <main+0x36c>)
 800286a:	f007 fa0f 	bl	8009c8c <iprintf>
	if (ret == 1) {
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d103      	bne.n	800287c <main+0x11c>
		printf("SPI INIT COLLECT!\r\n");
 8002874:	4896      	ldr	r0, [pc, #600]	; (8002ad0 <main+0x370>)
 8002876:	f007 fa8f 	bl	8009d98 <puts>
 800287a:	e002      	b.n	8002882 <main+0x122>
	} else {
		printf("SPI INIT FAILURE x_x \r\n");
 800287c:	4895      	ldr	r0, [pc, #596]	; (8002ad4 <main+0x374>)
 800287e:	f007 fa8b 	bl	8009d98 <puts>
#if D_MATH
printf("M_PI = %f, exp(1) = %f\r\n", M_PI, exp(1));
printf("10 ^ (-1 / 10) = %f\r\n", pow(10, -1/(double)10));
#endif
#if USE_LED
	set_led(0b11, 0b11);
 8002882:	2103      	movs	r1, #3
 8002884:	2003      	movs	r0, #3
 8002886:	f7fe fd31 	bl	80012ec <set_led>
	led_rgb(1, 1, 1);	// White
 800288a:	2201      	movs	r2, #1
 800288c:	2101      	movs	r1, #1
 800288e:	2001      	movs	r0, #1
 8002890:	f7fe fcf6 	bl	8001280 <led_rgb>
#endif
#if D_LED
	HAL_TIM_Base_Start_IT(&htim6);	// PID
#endif

	pid_gain_initialize();
 8002894:	f7ff f8e4 	bl	8001a60 <pid_gain_initialize>

#if D_ROTARY
		printf("rotary_value = %x\r\n", rotary_value);
#endif

		if(enter)
 8002898:	4b77      	ldr	r3, [pc, #476]	; (8002a78 <main+0x318>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 81e0 	beq.w	8002c62 <main+0x502>
		{
			rv = rotary_value;
 80028a2:	4b77      	ldr	r3, [pc, #476]	; (8002a80 <main+0x320>)
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	4b77      	ldr	r3, [pc, #476]	; (8002a84 <main+0x324>)
 80028a8:	701a      	strb	r2, [r3, #0]
			switch (rv) {
 80028aa:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <main+0x324>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	f200 81d9 	bhi.w	8002c66 <main+0x506>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <main+0x15c>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	080028fd 	.word	0x080028fd
 80028c0:	080029b7 	.word	0x080029b7
 80028c4:	080029d7 	.word	0x080029d7
 80028c8:	080029f5 	.word	0x080029f5
 80028cc:	08002a13 	.word	0x08002a13
 80028d0:	08002a31 	.word	0x08002a31
 80028d4:	08002a4f 	.word	0x08002a4f
 80028d8:	08002ad9 	.word	0x08002ad9
 80028dc:	08002af7 	.word	0x08002af7
 80028e0:	08002b15 	.word	0x08002b15
 80028e4:	08002b33 	.word	0x08002b33
 80028e8:	08002b51 	.word	0x08002b51
 80028ec:	08002b6f 	.word	0x08002b6f
 80028f0:	08002b8d 	.word	0x08002b8d
 80028f4:	08002bab 	.word	0x08002bab
 80028f8:	08002bc9 	.word	0x08002bc9
			case 0x00:
				if(playmode == calibration)
 80028fc:	4b71      	ldr	r3, [pc, #452]	; (8002ac4 <main+0x364>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d149      	bne.n	8002998 <main+0x238>
				{
	#if USE_LED
					led_rgb(1, 1, 0);	// Yellow
 8002904:	2200      	movs	r2, #0
 8002906:	2101      	movs	r1, #1
 8002908:	2001      	movs	r0, #1
 800290a:	f7fe fcb9 	bl	8001280 <led_rgb>
	#endif
					for (unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 800290e:	2300      	movs	r3, #0
 8002910:	73bb      	strb	r3, [r7, #14]
 8002912:	e00d      	b.n	8002930 <main+0x1d0>
					{
						analogmax[i] = 0;
 8002914:	7bbb      	ldrb	r3, [r7, #14]
 8002916:	4a63      	ldr	r2, [pc, #396]	; (8002aa4 <main+0x344>)
 8002918:	2100      	movs	r1, #0
 800291a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						analogmin[i] = 4096;
 800291e:	7bbb      	ldrb	r3, [r7, #14]
 8002920:	4a61      	ldr	r2, [pc, #388]	; (8002aa8 <main+0x348>)
 8002922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002926:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for (unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 800292a:	7bbb      	ldrb	r3, [r7, #14]
 800292c:	3301      	adds	r3, #1
 800292e:	73bb      	strb	r3, [r7, #14]
 8002930:	7bbb      	ldrb	r3, [r7, #14]
 8002932:	2b0b      	cmp	r3, #11
 8002934:	d9ee      	bls.n	8002914 <main+0x1b4>
					}

					sensor_initialize();
 8002936:	f000 feef 	bl	8003718 <sensor_initialize>

					while (enter)
 800293a:	e002      	b.n	8002942 <main+0x1e2>
							analog[0], analog[2], analog[4], analog[6], analog[8], analog[10],
							analog[11], analog[9], analog[7], analog[5], analog[3],
							analog[1]);
	#endif
	#endif
						HAL_Delay(100);
 800293c:	2064      	movs	r0, #100	; 0x64
 800293e:	f001 fde3 	bl	8004508 <HAL_Delay>
					while (enter)
 8002942:	4b4d      	ldr	r3, [pc, #308]	; (8002a78 <main+0x318>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f8      	bne.n	800293c <main+0x1dc>
					}

					sensor_finalize();
 800294a:	f000 ff01 	bl	8003750 <sensor_finalize>
				printf("\r\n");
				printf(ESC_DEF);
	#endif

	#if USE_FLASH
					for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 800294e:	2300      	movs	r3, #0
 8002950:	737b      	strb	r3, [r7, #13]
 8002952:	e017      	b.n	8002984 <main+0x224>
					{
						flash_buffer.analogmax[i] = analogmax[i];
 8002954:	7b7a      	ldrb	r2, [r7, #13]
 8002956:	7b7b      	ldrb	r3, [r7, #13]
 8002958:	4952      	ldr	r1, [pc, #328]	; (8002aa4 <main+0x344>)
 800295a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800295e:	4a50      	ldr	r2, [pc, #320]	; (8002aa0 <main+0x340>)
 8002960:	330c      	adds	r3, #12
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	460a      	mov	r2, r1
 8002968:	805a      	strh	r2, [r3, #2]
						flash_buffer.analogmin[i] = analogmin[i];
 800296a:	7b7a      	ldrb	r2, [r7, #13]
 800296c:	7b7b      	ldrb	r3, [r7, #13]
 800296e:	494e      	ldr	r1, [pc, #312]	; (8002aa8 <main+0x348>)
 8002970:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002974:	4a4a      	ldr	r2, [pc, #296]	; (8002aa0 <main+0x340>)
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	460a      	mov	r2, r1
 800297c:	805a      	strh	r2, [r3, #2]
					for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 800297e:	7b7b      	ldrb	r3, [r7, #13]
 8002980:	3301      	adds	r3, #1
 8002982:	737b      	strb	r3, [r7, #13]
 8002984:	7b7b      	ldrb	r3, [r7, #13]
 8002986:	2b0b      	cmp	r3, #11
 8002988:	d9e4      	bls.n	8002954 <main+0x1f4>
					}

					writeFlash(start_address, (uint8_t*) &flash_buffer,
 800298a:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <main+0x338>)
 800298c:	4a43      	ldr	r2, [pc, #268]	; (8002a9c <main+0x33c>)
 800298e:	4944      	ldr	r1, [pc, #272]	; (8002aa0 <main+0x340>)
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fe18 	bl	80015c6 <writeFlash>
						HAL_Delay(250);
					}

					running_finalize();
				}
				break;	// case 0x00:
 8002996:	e167      	b.n	8002c68 <main+0x508>
					running_initialize();
 8002998:	f000 fee4 	bl	8003764 <running_initialize>
					while (enter) {
 800299c:	e004      	b.n	80029a8 <main+0x248>
						d_print();
 800299e:	f7fe fce3 	bl	8001368 <d_print>
						HAL_Delay(250);
 80029a2:	20fa      	movs	r0, #250	; 0xfa
 80029a4:	f001 fdb0 	bl	8004508 <HAL_Delay>
					while (enter) {
 80029a8:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <main+0x318>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f6      	bne.n	800299e <main+0x23e>
					running_finalize();
 80029b0:	f000 ffcc 	bl	800394c <running_finalize>
				break;	// case 0x00:
 80029b4:	e158      	b.n	8002c68 <main+0x508>
			case 0x01:	// 1
				running_initialize();
 80029b6:	f000 fed5 	bl	8003764 <running_initialize>

				while (enter) {
 80029ba:	e005      	b.n	80029c8 <main+0x268>
					d_print();
 80029bc:	f7fe fcd4 	bl	8001368 <d_print>
					HAL_Delay(500);
 80029c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029c4:	f001 fda0 	bl	8004508 <HAL_Delay>
				while (enter) {
 80029c8:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <main+0x318>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f5      	bne.n	80029bc <main+0x25c>
				}

				running_finalize();
 80029d0:	f000 ffbc 	bl	800394c <running_finalize>
				break;
 80029d4:	e148      	b.n	8002c68 <main+0x508>
			case 0x02:	// 2
				running_initialize();
 80029d6:	f000 fec5 	bl	8003764 <running_initialize>

				while (enter) {
 80029da:	e004      	b.n	80029e6 <main+0x286>
					d_print();
 80029dc:	f7fe fcc4 	bl	8001368 <d_print>
					HAL_Delay(250);
 80029e0:	20fa      	movs	r0, #250	; 0xfa
 80029e2:	f001 fd91 	bl	8004508 <HAL_Delay>
				while (enter) {
 80029e6:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <main+0x318>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f6      	bne.n	80029dc <main+0x27c>
				}

				running_finalize();
 80029ee:	f000 ffad 	bl	800394c <running_finalize>
				break;
 80029f2:	e139      	b.n	8002c68 <main+0x508>
			case 0x03:	// 3
				running_initialize();
 80029f4:	f000 feb6 	bl	8003764 <running_initialize>

				while (enter) {
 80029f8:	e004      	b.n	8002a04 <main+0x2a4>
					d_print();
 80029fa:	f7fe fcb5 	bl	8001368 <d_print>
					HAL_Delay(250);
 80029fe:	20fa      	movs	r0, #250	; 0xfa
 8002a00:	f001 fd82 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <main+0x318>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f6      	bne.n	80029fa <main+0x29a>
				}

				running_finalize();
 8002a0c:	f000 ff9e 	bl	800394c <running_finalize>
				break;
 8002a10:	e12a      	b.n	8002c68 <main+0x508>
			case 0x04:	// 4
				running_initialize();
 8002a12:	f000 fea7 	bl	8003764 <running_initialize>

				while (enter) {
 8002a16:	e004      	b.n	8002a22 <main+0x2c2>
					d_print();
 8002a18:	f7fe fca6 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002a1c:	20fa      	movs	r0, #250	; 0xfa
 8002a1e:	f001 fd73 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <main+0x318>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f6      	bne.n	8002a18 <main+0x2b8>
				}

				running_finalize();
 8002a2a:	f000 ff8f 	bl	800394c <running_finalize>
				break;
 8002a2e:	e11b      	b.n	8002c68 <main+0x508>
			case 0x05:	// 5
				running_initialize();
 8002a30:	f000 fe98 	bl	8003764 <running_initialize>

				while (enter) {
 8002a34:	e004      	b.n	8002a40 <main+0x2e0>
					d_print();
 8002a36:	f7fe fc97 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002a3a:	20fa      	movs	r0, #250	; 0xfa
 8002a3c:	f001 fd64 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <main+0x318>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f6      	bne.n	8002a36 <main+0x2d6>
				}

				running_finalize();
 8002a48:	f000 ff80 	bl	800394c <running_finalize>
				break;
 8002a4c:	e10c      	b.n	8002c68 <main+0x508>
			case 0x06:	// 6
				running_initialize();
 8002a4e:	f000 fe89 	bl	8003764 <running_initialize>

				while (enter) {
 8002a52:	e004      	b.n	8002a5e <main+0x2fe>
					d_print();
 8002a54:	f7fe fc88 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002a58:	20fa      	movs	r0, #250	; 0xfa
 8002a5a:	f001 fd55 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <main+0x318>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f6      	bne.n	8002a54 <main+0x2f4>
				}

				running_finalize();
 8002a66:	f000 ff71 	bl	800394c <running_finalize>
				break;
 8002a6a:	e0fd      	b.n	8002c68 <main+0x508>
 8002a6c:	f3af 8000 	nop.w
 8002a70:	24a478cb 	.word	0x24a478cb
 8002a74:	40192ab8 	.word	0x40192ab8
 8002a78:	20013f64 	.word	0x20013f64
 8002a7c:	20013e20 	.word	0x20013e20
 8002a80:	2000030c 	.word	0x2000030c
 8002a84:	200003a0 	.word	0x200003a0
 8002a88:	20013e18 	.word	0x20013e18
 8002a8c:	20000314 	.word	0x20000314
 8002a90:	20000330 	.word	0x20000330
 8002a94:	0800da0c 	.word	0x0800da0c
 8002a98:	080e0000 	.word	0x080e0000
 8002a9c:	000138b8 	.word	0x000138b8
 8002aa0:	200003a8 	.word	0x200003a8
 8002aa4:	20013f18 	.word	0x20013f18
 8002aa8:	200002f4 	.word	0x200002f4
 8002aac:	0800da18 	.word	0x0800da18
 8002ab0:	0800da20 	.word	0x0800da20
 8002ab4:	0800da40 	.word	0x0800da40
 8002ab8:	20014274 	.word	0x20014274
 8002abc:	0800da58 	.word	0x0800da58
 8002ac0:	200142bc 	.word	0x200142bc
 8002ac4:	200002c0 	.word	0x200002c0
 8002ac8:	0800da68 	.word	0x0800da68
 8002acc:	0800da80 	.word	0x0800da80
 8002ad0:	0800da90 	.word	0x0800da90
 8002ad4:	0800daa4 	.word	0x0800daa4
			case 0x07:	// 7
				running_initialize();
 8002ad8:	f000 fe44 	bl	8003764 <running_initialize>

				while (enter) {
 8002adc:	e004      	b.n	8002ae8 <main+0x388>
					d_print();
 8002ade:	f7fe fc43 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002ae2:	20fa      	movs	r0, #250	; 0xfa
 8002ae4:	f001 fd10 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002ae8:	4b60      	ldr	r3, [pc, #384]	; (8002c6c <main+0x50c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f6      	bne.n	8002ade <main+0x37e>
				}

				running_finalize();
 8002af0:	f000 ff2c 	bl	800394c <running_finalize>
				break;
 8002af4:	e0b8      	b.n	8002c68 <main+0x508>
			case 0x08:	// 8
				running_initialize();
 8002af6:	f000 fe35 	bl	8003764 <running_initialize>

				while (enter) {
 8002afa:	e004      	b.n	8002b06 <main+0x3a6>
					d_print();
 8002afc:	f7fe fc34 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002b00:	20fa      	movs	r0, #250	; 0xfa
 8002b02:	f001 fd01 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002b06:	4b59      	ldr	r3, [pc, #356]	; (8002c6c <main+0x50c>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f6      	bne.n	8002afc <main+0x39c>
				}

				running_finalize();
 8002b0e:	f000 ff1d 	bl	800394c <running_finalize>
				break;
 8002b12:	e0a9      	b.n	8002c68 <main+0x508>
			case 0x09:	// 9
				running_initialize();
 8002b14:	f000 fe26 	bl	8003764 <running_initialize>

				while (enter) {
 8002b18:	e004      	b.n	8002b24 <main+0x3c4>
					d_print();
 8002b1a:	f7fe fc25 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002b1e:	20fa      	movs	r0, #250	; 0xfa
 8002b20:	f001 fcf2 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002b24:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <main+0x50c>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f6      	bne.n	8002b1a <main+0x3ba>
				}

				running_finalize();
 8002b2c:	f000 ff0e 	bl	800394c <running_finalize>
				break;
 8002b30:	e09a      	b.n	8002c68 <main+0x508>
			case 0x0A:	// A
				running_initialize();
 8002b32:	f000 fe17 	bl	8003764 <running_initialize>

				while (enter) {
 8002b36:	e004      	b.n	8002b42 <main+0x3e2>
					d_print();
 8002b38:	f7fe fc16 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002b3c:	20fa      	movs	r0, #250	; 0xfa
 8002b3e:	f001 fce3 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002b42:	4b4a      	ldr	r3, [pc, #296]	; (8002c6c <main+0x50c>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f6      	bne.n	8002b38 <main+0x3d8>
				}

				running_finalize();
 8002b4a:	f000 feff 	bl	800394c <running_finalize>
				break;
 8002b4e:	e08b      	b.n	8002c68 <main+0x508>
			case 0x0B:	// B
				running_initialize();
 8002b50:	f000 fe08 	bl	8003764 <running_initialize>

				while (enter) {
 8002b54:	e004      	b.n	8002b60 <main+0x400>
					d_print();
 8002b56:	f7fe fc07 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002b5a:	20fa      	movs	r0, #250	; 0xfa
 8002b5c:	f001 fcd4 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002b60:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <main+0x50c>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f6      	bne.n	8002b56 <main+0x3f6>
				}

				running_finalize();
 8002b68:	f000 fef0 	bl	800394c <running_finalize>
				break;
 8002b6c:	e07c      	b.n	8002c68 <main+0x508>
			case 0x0C:	// C
				running_initialize();
 8002b6e:	f000 fdf9 	bl	8003764 <running_initialize>

				while (enter) {
 8002b72:	e004      	b.n	8002b7e <main+0x41e>
					d_print();
 8002b74:	f7fe fbf8 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002b78:	20fa      	movs	r0, #250	; 0xfa
 8002b7a:	f001 fcc5 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <main+0x50c>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f6      	bne.n	8002b74 <main+0x414>
				}

				running_finalize();
 8002b86:	f000 fee1 	bl	800394c <running_finalize>
				break;
 8002b8a:	e06d      	b.n	8002c68 <main+0x508>
			case 0x0D:	// D
				running_initialize();
 8002b8c:	f000 fdea 	bl	8003764 <running_initialize>

				while (enter) {
 8002b90:	e004      	b.n	8002b9c <main+0x43c>
					d_print();
 8002b92:	f7fe fbe9 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002b96:	20fa      	movs	r0, #250	; 0xfa
 8002b98:	f001 fcb6 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002b9c:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <main+0x50c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f6      	bne.n	8002b92 <main+0x432>
				}

				running_finalize();
 8002ba4:	f000 fed2 	bl	800394c <running_finalize>
				break;
 8002ba8:	e05e      	b.n	8002c68 <main+0x508>
			case 0x0E:	// E
				running_initialize();
 8002baa:	f000 fddb 	bl	8003764 <running_initialize>

				while (enter) {
 8002bae:	e004      	b.n	8002bba <main+0x45a>
					d_print();
 8002bb0:	f7fe fbda 	bl	8001368 <d_print>
					HAL_Delay(250);
 8002bb4:	20fa      	movs	r0, #250	; 0xfa
 8002bb6:	f001 fca7 	bl	8004508 <HAL_Delay>
				while (enter) {
 8002bba:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <main+0x50c>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f6      	bne.n	8002bb0 <main+0x450>
				}

				running_finalize();
 8002bc2:	f000 fec3 	bl	800394c <running_finalize>
				break;
 8002bc6:	e04f      	b.n	8002c68 <main+0x508>
			case 0x0F:
				if(playmode == flash_print)
 8002bc8:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <main+0x510>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b0f      	cmp	r3, #15
 8002bce:	d139      	bne.n	8002c44 <main+0x4e4>
                {
#if USE_FLASH
					// load flash output
					loadFlash(start_address, (uint8_t*) &flash_buffer,
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <main+0x514>)
 8002bd2:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <main+0x518>)
 8002bd4:	4929      	ldr	r1, [pc, #164]	; (8002c7c <main+0x51c>)
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fd1d 	bl	8001616 <loadFlash>
							sizeof(FlashBuffer));
					printf("////////// Radius //////////\r\n");
 8002bdc:	4828      	ldr	r0, [pc, #160]	; (8002c80 <main+0x520>)
 8002bde:	f007 f8db 	bl	8009d98 <puts>
					printf("course_state_time_max = %5d\r\n", flash_buffer.course_state_time_max);
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <main+0x51c>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	4826      	ldr	r0, [pc, #152]	; (8002c84 <main+0x524>)
 8002bea:	f007 f84f 	bl	8009c8c <iprintf>
					for (int i = 0; i < COURSE_STATE_SIZE; i++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	e019      	b.n	8002c28 <main+0x4c8>
					{
						if(i >= flash_buffer.course_state_time_max + 1)
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <main+0x51c>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	dd02      	ble.n	8002c06 <main+0x4a6>
						{
							printf(ESC_RED);
 8002c00:	4821      	ldr	r0, [pc, #132]	; (8002c88 <main+0x528>)
 8002c02:	f007 f843 	bl	8009c8c <iprintf>
						}
#if !D_COURSE_SAVING
						printf("%3d, %6.3lf\r\n", i, flash_buffer.radius[i]);
 8002c06:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <main+0x51c>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3307      	adds	r3, #7
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	481d      	ldr	r0, [pc, #116]	; (8002c8c <main+0x52c>)
 8002c18:	f007 f838 	bl	8009c8c <iprintf>
#else
						printf("%6.3lf, %6.3lf\r\n", flash_buffer.igz[i], flash_buffer.len[i]);
#endif
						printf(ESC_DEF);
 8002c1c:	481c      	ldr	r0, [pc, #112]	; (8002c90 <main+0x530>)
 8002c1e:	f007 f835 	bl	8009c8c <iprintf>
					for (int i = 0; i < COURSE_STATE_SIZE; i++)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	3301      	adds	r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	dde0      	ble.n	8002bf4 <main+0x494>
					}

					while(enter)
 8002c32:	e002      	b.n	8002c3a <main+0x4da>
					{
						HAL_Delay(250);
 8002c34:	20fa      	movs	r0, #250	; 0xfa
 8002c36:	f001 fc67 	bl	8004508 <HAL_Delay>
					while(enter)
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <main+0x50c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f8      	bne.n	8002c34 <main+0x4d4>
				 }
				 #endif
				 #endif
				 */

				break;
 8002c42:	e011      	b.n	8002c68 <main+0x508>
					running_initialize();
 8002c44:	f000 fd8e 	bl	8003764 <running_initialize>
					while (enter) {
 8002c48:	e004      	b.n	8002c54 <main+0x4f4>
						d_print();
 8002c4a:	f7fe fb8d 	bl	8001368 <d_print>
						HAL_Delay(250);
 8002c4e:	20fa      	movs	r0, #250	; 0xfa
 8002c50:	f001 fc5a 	bl	8004508 <HAL_Delay>
					while (enter) {
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <main+0x50c>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f6      	bne.n	8002c4a <main+0x4ea>
					running_finalize();
 8002c5c:	f000 fe76 	bl	800394c <running_finalize>
				break;
 8002c60:	e002      	b.n	8002c68 <main+0x508>
			default:
				break;
			} // switch(rotary_value)
		}	// if(enter)
 8002c62:	bf00      	nop
 8002c64:	e618      	b.n	8002898 <main+0x138>
				break;
 8002c66:	bf00      	nop
		if(enter)
 8002c68:	e616      	b.n	8002898 <main+0x138>
 8002c6a:	bf00      	nop
 8002c6c:	20013f64 	.word	0x20013f64
 8002c70:	200002c0 	.word	0x200002c0
 8002c74:	080e0000 	.word	0x080e0000
 8002c78:	000138b8 	.word	0x000138b8
 8002c7c:	200003a8 	.word	0x200003a8
 8002c80:	0800dabc 	.word	0x0800dabc
 8002c84:	0800dadc 	.word	0x0800dadc
 8002c88:	0800dafc 	.word	0x0800dafc
 8002c8c:	0800db04 	.word	0x0800db04
 8002c90:	0800da18 	.word	0x0800da18

08002c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b094      	sub	sp, #80	; 0x50
 8002c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c9a:	f107 0320 	add.w	r3, r7, #32
 8002c9e:	2230      	movs	r2, #48	; 0x30
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f006 f970 	bl	8008f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ca8:	f107 030c 	add.w	r3, r7, #12
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <SystemClock_Config+0xcc>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <SystemClock_Config+0xcc>)
 8002cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <SystemClock_Config+0xcc>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <SystemClock_Config+0xd0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <SystemClock_Config+0xd0>)
 8002cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <SystemClock_Config+0xd0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002cf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d04:	2308      	movs	r3, #8
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002d08:	23a8      	movs	r3, #168	; 0xa8
 8002d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d10:	2304      	movs	r3, #4
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d14:	f107 0320 	add.w	r3, r7, #32
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 fb29 	bl	8006370 <HAL_RCC_OscConfig>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d24:	f000 fec6 	bl	8003ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d28:	230f      	movs	r3, #15
 8002d2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d40:	f107 030c 	add.w	r3, r7, #12
 8002d44:	2105      	movs	r1, #5
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 fd82 	bl	8006850 <HAL_RCC_ClockConfig>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d52:	f000 feaf 	bl	8003ab4 <Error_Handler>
  }
}
 8002d56:	bf00      	nop
 8002d58:	3750      	adds	r7, #80	; 0x50
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40007000 	.word	0x40007000

08002d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d6e:	463b      	mov	r3, r7
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d7a:	4b8a      	ldr	r3, [pc, #552]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002d7c:	4a8a      	ldr	r2, [pc, #552]	; (8002fa8 <MX_ADC1_Init+0x240>)
 8002d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d80:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002d82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d88:	4b86      	ldr	r3, [pc, #536]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002d8e:	4b85      	ldr	r3, [pc, #532]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d94:	4b83      	ldr	r3, [pc, #524]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d9a:	4b82      	ldr	r3, [pc, #520]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002da2:	4b80      	ldr	r3, [pc, #512]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002da8:	4b7e      	ldr	r3, [pc, #504]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002daa:	4a80      	ldr	r2, [pc, #512]	; (8002fac <MX_ADC1_Init+0x244>)
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dae:	4b7d      	ldr	r3, [pc, #500]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8002db4:	4b7b      	ldr	r3, [pc, #492]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002db6:	2210      	movs	r2, #16
 8002db8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002dba:	4b7a      	ldr	r3, [pc, #488]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dc2:	4b78      	ldr	r3, [pc, #480]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002dc8:	4876      	ldr	r0, [pc, #472]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002dca:	f001 fbc1 	bl	8004550 <HAL_ADC_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002dd4:	f000 fe6e 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002dd8:	2309      	movs	r3, #9
 8002dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002de0:	2303      	movs	r3, #3
 8002de2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de4:	463b      	mov	r3, r7
 8002de6:	4619      	mov	r1, r3
 8002de8:	486e      	ldr	r0, [pc, #440]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002dea:	f001 fd45 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002df4:	f000 fe5e 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002df8:	230a      	movs	r3, #10
 8002dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e00:	463b      	mov	r3, r7
 8002e02:	4619      	mov	r1, r3
 8002e04:	4867      	ldr	r0, [pc, #412]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002e06:	f001 fd37 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002e10:	f000 fe50 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002e14:	2308      	movs	r3, #8
 8002e16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4860      	ldr	r0, [pc, #384]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002e22:	f001 fd29 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002e2c:	f000 fe42 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002e30:	230b      	movs	r3, #11
 8002e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002e34:	2304      	movs	r3, #4
 8002e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e38:	463b      	mov	r3, r7
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4859      	ldr	r0, [pc, #356]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002e3e:	f001 fd1b 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002e48:	f000 fe34 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002e4c:	230f      	movs	r3, #15
 8002e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002e50:	2305      	movs	r3, #5
 8002e52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e54:	463b      	mov	r3, r7
 8002e56:	4619      	mov	r1, r3
 8002e58:	4852      	ldr	r0, [pc, #328]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002e5a:	f001 fd0d 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002e64:	f000 fe26 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002e68:	230c      	movs	r3, #12
 8002e6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002e6c:	2306      	movs	r3, #6
 8002e6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e70:	463b      	mov	r3, r7
 8002e72:	4619      	mov	r1, r3
 8002e74:	484b      	ldr	r0, [pc, #300]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002e76:	f001 fcff 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002e80:	f000 fe18 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002e84:	230e      	movs	r3, #14
 8002e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002e88:	2307      	movs	r3, #7
 8002e8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4844      	ldr	r0, [pc, #272]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002e92:	f001 fcf1 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002e9c:	f000 fe0a 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002ea0:	230d      	movs	r3, #13
 8002ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ea8:	463b      	mov	r3, r7
 8002eaa:	4619      	mov	r1, r3
 8002eac:	483d      	ldr	r0, [pc, #244]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002eae:	f001 fce3 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002eb8:	f000 fdfc 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002ebc:	2307      	movs	r3, #7
 8002ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002ec0:	2309      	movs	r3, #9
 8002ec2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4836      	ldr	r0, [pc, #216]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002eca:	f001 fcd5 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002ed4:	f000 fdee 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002edc:	230a      	movs	r3, #10
 8002ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	482f      	ldr	r0, [pc, #188]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002ee6:	f001 fcc7 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002ef0:	f000 fde0 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ef4:	2306      	movs	r3, #6
 8002ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002ef8:	230b      	movs	r3, #11
 8002efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002efc:	463b      	mov	r3, r7
 8002efe:	4619      	mov	r1, r3
 8002f00:	4828      	ldr	r0, [pc, #160]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002f02:	f001 fcb9 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002f0c:	f000 fdd2 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f10:	2301      	movs	r3, #1
 8002f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002f14:	230c      	movs	r3, #12
 8002f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f18:	463b      	mov	r3, r7
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4821      	ldr	r0, [pc, #132]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002f1e:	f001 fcab 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002f28:	f000 fdc4 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002f2c:	2305      	movs	r3, #5
 8002f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002f30:	230d      	movs	r3, #13
 8002f32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f34:	463b      	mov	r3, r7
 8002f36:	4619      	mov	r1, r3
 8002f38:	481a      	ldr	r0, [pc, #104]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002f3a:	f001 fc9d 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8002f44:	f000 fdb6 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002f4c:	230e      	movs	r3, #14
 8002f4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f50:	463b      	mov	r3, r7
 8002f52:	4619      	mov	r1, r3
 8002f54:	4813      	ldr	r0, [pc, #76]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002f56:	f001 fc8f 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8002f60:	f000 fda8 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002f64:	2304      	movs	r3, #4
 8002f66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002f68:	230f      	movs	r3, #15
 8002f6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	4619      	mov	r1, r3
 8002f70:	480c      	ldr	r0, [pc, #48]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002f72:	f001 fc81 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8002f7c:	f000 fd9a 	bl	8003ab4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002f80:	2303      	movs	r3, #3
 8002f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8002f84:	2310      	movs	r3, #16
 8002f86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f88:	463b      	mov	r3, r7
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <MX_ADC1_Init+0x23c>)
 8002f8e:	f001 fc73 	bl	8004878 <HAL_ADC_ConfigChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8002f98:	f000 fd8c 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20014274 	.word	0x20014274
 8002fa8:	40012000 	.word	0x40012000
 8002fac:	0f000001 	.word	0x0f000001

08002fb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <MX_I2C1_Init+0x50>)
 8002fb6:	4a13      	ldr	r2, [pc, #76]	; (8003004 <MX_I2C1_Init+0x54>)
 8002fb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <MX_I2C1_Init+0x50>)
 8002fbc:	4a12      	ldr	r2, [pc, #72]	; (8003008 <MX_I2C1_Init+0x58>)
 8002fbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <MX_I2C1_Init+0x50>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <MX_I2C1_Init+0x50>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <MX_I2C1_Init+0x50>)
 8002fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <MX_I2C1_Init+0x50>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MX_I2C1_Init+0x50>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <MX_I2C1_Init+0x50>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <MX_I2C1_Init+0x50>)
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fec:	4804      	ldr	r0, [pc, #16]	; (8003000 <MX_I2C1_Init+0x50>)
 8002fee:	f003 f87b 	bl	80060e8 <HAL_I2C_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ff8:	f000 fd5c 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	200141a0 	.word	0x200141a0
 8003004:	40005400 	.word	0x40005400
 8003008:	000186a0 	.word	0x000186a0

0800300c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003010:	4b17      	ldr	r3, [pc, #92]	; (8003070 <MX_SPI2_Init+0x64>)
 8003012:	4a18      	ldr	r2, [pc, #96]	; (8003074 <MX_SPI2_Init+0x68>)
 8003014:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003016:	4b16      	ldr	r3, [pc, #88]	; (8003070 <MX_SPI2_Init+0x64>)
 8003018:	f44f 7282 	mov.w	r2, #260	; 0x104
 800301c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <MX_SPI2_Init+0x64>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <MX_SPI2_Init+0x64>)
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <MX_SPI2_Init+0x64>)
 800302c:	2202      	movs	r2, #2
 800302e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <MX_SPI2_Init+0x64>)
 8003032:	2201      	movs	r2, #1
 8003034:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <MX_SPI2_Init+0x64>)
 8003038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <MX_SPI2_Init+0x64>)
 8003040:	2228      	movs	r2, #40	; 0x28
 8003042:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <MX_SPI2_Init+0x64>)
 8003046:	2200      	movs	r2, #0
 8003048:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <MX_SPI2_Init+0x64>)
 800304c:	2200      	movs	r2, #0
 800304e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <MX_SPI2_Init+0x64>)
 8003052:	2200      	movs	r2, #0
 8003054:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <MX_SPI2_Init+0x64>)
 8003058:	220a      	movs	r2, #10
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800305c:	4804      	ldr	r0, [pc, #16]	; (8003070 <MX_SPI2_Init+0x64>)
 800305e:	f003 fdf1 	bl	8006c44 <HAL_SPI_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003068:	f000 fd24 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20014108 	.word	0x20014108
 8003074:	40003800 	.word	0x40003800

08003078 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	; 0x30
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800307e:	f107 030c 	add.w	r3, r7, #12
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f005 ff7e 	bl	8008f88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <MX_TIM1_Init+0xa8>)
 8003096:	4a23      	ldr	r2, [pc, #140]	; (8003124 <MX_TIM1_Init+0xac>)
 8003098:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <MX_TIM1_Init+0xa8>)
 800309c:	2200      	movs	r2, #0
 800309e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <MX_TIM1_Init+0xa8>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2047;
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <MX_TIM1_Init+0xa8>)
 80030a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80030ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <MX_TIM1_Init+0xa8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <MX_TIM1_Init+0xa8>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <MX_TIM1_Init+0xa8>)
 80030bc:	2200      	movs	r2, #0
 80030be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80030c0:	2303      	movs	r3, #3
 80030c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030c8:	2301      	movs	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030d4:	2300      	movs	r3, #0
 80030d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030d8:	2301      	movs	r3, #1
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030dc:	2300      	movs	r3, #0
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80030e4:	f107 030c 	add.w	r3, r7, #12
 80030e8:	4619      	mov	r1, r3
 80030ea:	480d      	ldr	r0, [pc, #52]	; (8003120 <MX_TIM1_Init+0xa8>)
 80030ec:	f004 fc3a 	bl	8007964 <HAL_TIM_Encoder_Init>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80030f6:	f000 fcdd 	bl	8003ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4806      	ldr	r0, [pc, #24]	; (8003120 <MX_TIM1_Init+0xa8>)
 8003108:	f005 f9aa 	bl	8008460 <HAL_TIMEx_MasterConfigSynchronization>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003112:	f000 fccf 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	3730      	adds	r7, #48	; 0x30
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	2001439c 	.word	0x2001439c
 8003124:	40010000 	.word	0x40010000

08003128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800312e:	f107 0320 	add.w	r3, r7, #32
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	60da      	str	r2, [r3, #12]
 8003144:	611a      	str	r2, [r3, #16]
 8003146:	615a      	str	r2, [r3, #20]
 8003148:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800314a:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <MX_TIM2_Init+0xac>)
 800314c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003150:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8003152:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <MX_TIM2_Init+0xac>)
 8003154:	2204      	movs	r2, #4
 8003156:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <MX_TIM2_Init+0xac>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33599;
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <MX_TIM2_Init+0xac>)
 8003160:	f248 323f 	movw	r2, #33599	; 0x833f
 8003164:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <MX_TIM2_Init+0xac>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <MX_TIM2_Init+0xac>)
 800316e:	2200      	movs	r2, #0
 8003170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003172:	4818      	ldr	r0, [pc, #96]	; (80031d4 <MX_TIM2_Init+0xac>)
 8003174:	f004 fb34 	bl	80077e0 <HAL_TIM_PWM_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800317e:	f000 fc99 	bl	8003ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800318a:	f107 0320 	add.w	r3, r7, #32
 800318e:	4619      	mov	r1, r3
 8003190:	4810      	ldr	r0, [pc, #64]	; (80031d4 <MX_TIM2_Init+0xac>)
 8003192:	f005 f965 	bl	8008460 <HAL_TIMEx_MasterConfigSynchronization>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800319c:	f000 fc8a 	bl	8003ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031a0:	2360      	movs	r3, #96	; 0x60
 80031a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	2200      	movs	r2, #0
 80031b4:	4619      	mov	r1, r3
 80031b6:	4807      	ldr	r0, [pc, #28]	; (80031d4 <MX_TIM2_Init+0xac>)
 80031b8:	f004 fdee 	bl	8007d98 <HAL_TIM_PWM_ConfigChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80031c2:	f000 fc77 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80031c6:	4803      	ldr	r0, [pc, #12]	; (80031d4 <MX_TIM2_Init+0xac>)
 80031c8:	f000 ff24 	bl	8004014 <HAL_TIM_MspPostInit>

}
 80031cc:	bf00      	nop
 80031ce:	3728      	adds	r7, #40	; 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	2001441c 	.word	0x2001441c

080031d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08c      	sub	sp, #48	; 0x30
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f005 fece 	bl	8008f88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031f4:	4b20      	ldr	r3, [pc, #128]	; (8003278 <MX_TIM3_Init+0xa0>)
 80031f6:	4a21      	ldr	r2, [pc, #132]	; (800327c <MX_TIM3_Init+0xa4>)
 80031f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80031fa:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <MX_TIM3_Init+0xa0>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <MX_TIM3_Init+0xa0>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <MX_TIM3_Init+0xa0>)
 8003208:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800320c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320e:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <MX_TIM3_Init+0xa0>)
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <MX_TIM3_Init+0xa0>)
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800321a:	2303      	movs	r3, #3
 800321c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003222:	2301      	movs	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003232:	2301      	movs	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003236:	2300      	movs	r3, #0
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	4619      	mov	r1, r3
 8003244:	480c      	ldr	r0, [pc, #48]	; (8003278 <MX_TIM3_Init+0xa0>)
 8003246:	f004 fb8d 	bl	8007964 <HAL_TIM_Encoder_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003250:	f000 fc30 	bl	8003ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003254:	2300      	movs	r3, #0
 8003256:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	4619      	mov	r1, r3
 8003260:	4805      	ldr	r0, [pc, #20]	; (8003278 <MX_TIM3_Init+0xa0>)
 8003262:	f005 f8fd 	bl	8008460 <HAL_TIMEx_MasterConfigSynchronization>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800326c:	f000 fc22 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003270:	bf00      	nop
 8003272:	3730      	adds	r7, #48	; 0x30
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20014234 	.word	0x20014234
 800327c:	40000400 	.word	0x40000400

08003280 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003286:	f107 0320 	add.w	r3, r7, #32
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	611a      	str	r2, [r3, #16]
 800329e:	615a      	str	r2, [r3, #20]
 80032a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032a2:	4b27      	ldr	r3, [pc, #156]	; (8003340 <MX_TIM4_Init+0xc0>)
 80032a4:	4a27      	ldr	r2, [pc, #156]	; (8003344 <MX_TIM4_Init+0xc4>)
 80032a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 80032a8:	4b25      	ldr	r3, [pc, #148]	; (8003340 <MX_TIM4_Init+0xc0>)
 80032aa:	2202      	movs	r2, #2
 80032ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <MX_TIM4_Init+0xc0>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80032b4:	4b22      	ldr	r3, [pc, #136]	; (8003340 <MX_TIM4_Init+0xc0>)
 80032b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032bc:	4b20      	ldr	r3, [pc, #128]	; (8003340 <MX_TIM4_Init+0xc0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c2:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <MX_TIM4_Init+0xc0>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80032c8:	481d      	ldr	r0, [pc, #116]	; (8003340 <MX_TIM4_Init+0xc0>)
 80032ca:	f004 fa89 	bl	80077e0 <HAL_TIM_PWM_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80032d4:	f000 fbee 	bl	8003ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d8:	2300      	movs	r3, #0
 80032da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032e0:	f107 0320 	add.w	r3, r7, #32
 80032e4:	4619      	mov	r1, r3
 80032e6:	4816      	ldr	r0, [pc, #88]	; (8003340 <MX_TIM4_Init+0xc0>)
 80032e8:	f005 f8ba 	bl	8008460 <HAL_TIMEx_MasterConfigSynchronization>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80032f2:	f000 fbdf 	bl	8003ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032f6:	2360      	movs	r3, #96	; 0x60
 80032f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	2200      	movs	r2, #0
 800330a:	4619      	mov	r1, r3
 800330c:	480c      	ldr	r0, [pc, #48]	; (8003340 <MX_TIM4_Init+0xc0>)
 800330e:	f004 fd43 	bl	8007d98 <HAL_TIM_PWM_ConfigChannel>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003318:	f000 fbcc 	bl	8003ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	2204      	movs	r2, #4
 8003320:	4619      	mov	r1, r3
 8003322:	4807      	ldr	r0, [pc, #28]	; (8003340 <MX_TIM4_Init+0xc0>)
 8003324:	f004 fd38 	bl	8007d98 <HAL_TIM_PWM_ConfigChannel>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800332e:	f000 fbc1 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003332:	4803      	ldr	r0, [pc, #12]	; (8003340 <MX_TIM4_Init+0xc0>)
 8003334:	f000 fe6e 	bl	8004014 <HAL_TIM_MspPostInit>

}
 8003338:	bf00      	nop
 800333a:	3728      	adds	r7, #40	; 0x28
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20014160 	.word	0x20014160
 8003344:	40000800 	.word	0x40000800

08003348 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800334e:	463b      	mov	r3, r7
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <MX_TIM6_Init+0x64>)
 8003358:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <MX_TIM6_Init+0x68>)
 800335a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <MX_TIM6_Init+0x64>)
 800335e:	2204      	movs	r2, #4
 8003360:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <MX_TIM6_Init+0x64>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16799;
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <MX_TIM6_Init+0x64>)
 800336a:	f244 129f 	movw	r2, #16799	; 0x419f
 800336e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <MX_TIM6_Init+0x64>)
 8003372:	2200      	movs	r2, #0
 8003374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003376:	480d      	ldr	r0, [pc, #52]	; (80033ac <MX_TIM6_Init+0x64>)
 8003378:	f004 f9b8 	bl	80076ec <HAL_TIM_Base_Init>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003382:	f000 fb97 	bl	8003ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800338e:	463b      	mov	r3, r7
 8003390:	4619      	mov	r1, r3
 8003392:	4806      	ldr	r0, [pc, #24]	; (80033ac <MX_TIM6_Init+0x64>)
 8003394:	f005 f864 	bl	8008460 <HAL_TIMEx_MasterConfigSynchronization>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800339e:	f000 fb89 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	2001435c 	.word	0x2001435c
 80033b0:	40001000 	.word	0x40001000

080033b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <MX_TIM10_Init+0x40>)
 80033ba:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <MX_TIM10_Init+0x44>)
 80033bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <MX_TIM10_Init+0x40>)
 80033c0:	2204      	movs	r2, #4
 80033c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <MX_TIM10_Init+0x40>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <MX_TIM10_Init+0x40>)
 80033cc:	f248 323f 	movw	r2, #33599	; 0x833f
 80033d0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <MX_TIM10_Init+0x40>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <MX_TIM10_Init+0x40>)
 80033da:	2200      	movs	r2, #0
 80033dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80033de:	4805      	ldr	r0, [pc, #20]	; (80033f4 <MX_TIM10_Init+0x40>)
 80033e0:	f004 f984 	bl	80076ec <HAL_TIM_Base_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80033ea:	f000 fb63 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200141f4 	.word	0x200141f4
 80033f8:	40014400 	.word	0x40014400

080033fc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <MX_TIM11_Init+0x40>)
 8003402:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <MX_TIM11_Init+0x44>)
 8003404:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <MX_TIM11_Init+0x40>)
 8003408:	2204      	movs	r2, #4
 800340a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <MX_TIM11_Init+0x40>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <MX_TIM11_Init+0x40>)
 8003414:	f248 323f 	movw	r2, #33599	; 0x833f
 8003418:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <MX_TIM11_Init+0x40>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <MX_TIM11_Init+0x40>)
 8003422:	2200      	movs	r2, #0
 8003424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003426:	4805      	ldr	r0, [pc, #20]	; (800343c <MX_TIM11_Init+0x40>)
 8003428:	f004 f960 	bl	80076ec <HAL_TIM_Base_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003432:	f000 fb3f 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200142bc 	.word	0x200142bc
 8003440:	40014800 	.word	0x40014800

08003444 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <MX_TIM14_Init+0x40>)
 800344a:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <MX_TIM14_Init+0x44>)
 800344c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <MX_TIM14_Init+0x40>)
 8003450:	2204      	movs	r2, #4
 8003452:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <MX_TIM14_Init+0x40>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <MX_TIM14_Init+0x40>)
 800345c:	f248 323f 	movw	r2, #33599	; 0x833f
 8003460:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <MX_TIM14_Init+0x40>)
 8003464:	2200      	movs	r2, #0
 8003466:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <MX_TIM14_Init+0x40>)
 800346a:	2200      	movs	r2, #0
 800346c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800346e:	4805      	ldr	r0, [pc, #20]	; (8003484 <MX_TIM14_Init+0x40>)
 8003470:	f004 f93c 	bl	80076ec <HAL_TIM_Base_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800347a:	f000 fb1b 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	2001445c 	.word	0x2001445c
 8003488:	40002000 	.word	0x40002000

0800348c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <MX_USART6_UART_Init+0x50>)
 8003494:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 8003498:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800349c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034b0:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034b2:	220c      	movs	r2, #12
 80034b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80034c2:	4805      	ldr	r0, [pc, #20]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034c4:	f005 f85c 	bl	8008580 <HAL_UART_Init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80034ce:	f000 faf1 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	200143dc 	.word	0x200143dc
 80034dc:	40011400 	.word	0x40011400

080034e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	4b0c      	ldr	r3, [pc, #48]	; (800351c <MX_DMA_Init+0x3c>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <MX_DMA_Init+0x3c>)
 80034f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <MX_DMA_Init+0x3c>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2100      	movs	r1, #0
 8003506:	2038      	movs	r0, #56	; 0x38
 8003508:	f001 fd31 	bl	8004f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800350c:	2038      	movs	r0, #56	; 0x38
 800350e:	f001 fd4a 	bl	8004fa6 <HAL_NVIC_EnableIRQ>

}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800

08003520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	4b60      	ldr	r3, [pc, #384]	; (80036bc <MX_GPIO_Init+0x19c>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a5f      	ldr	r2, [pc, #380]	; (80036bc <MX_GPIO_Init+0x19c>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b5d      	ldr	r3, [pc, #372]	; (80036bc <MX_GPIO_Init+0x19c>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b59      	ldr	r3, [pc, #356]	; (80036bc <MX_GPIO_Init+0x19c>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a58      	ldr	r2, [pc, #352]	; (80036bc <MX_GPIO_Init+0x19c>)
 800355c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b56      	ldr	r3, [pc, #344]	; (80036bc <MX_GPIO_Init+0x19c>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	4b52      	ldr	r3, [pc, #328]	; (80036bc <MX_GPIO_Init+0x19c>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a51      	ldr	r2, [pc, #324]	; (80036bc <MX_GPIO_Init+0x19c>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b4f      	ldr	r3, [pc, #316]	; (80036bc <MX_GPIO_Init+0x19c>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	4b4b      	ldr	r3, [pc, #300]	; (80036bc <MX_GPIO_Init+0x19c>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a4a      	ldr	r2, [pc, #296]	; (80036bc <MX_GPIO_Init+0x19c>)
 8003594:	f043 0302 	orr.w	r3, r3, #2
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b48      	ldr	r3, [pc, #288]	; (80036bc <MX_GPIO_Init+0x19c>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4b44      	ldr	r3, [pc, #272]	; (80036bc <MX_GPIO_Init+0x19c>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a43      	ldr	r2, [pc, #268]	; (80036bc <MX_GPIO_Init+0x19c>)
 80035b0:	f043 0308 	orr.w	r3, r3, #8
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <MX_GPIO_Init+0x19c>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80035c2:	2200      	movs	r2, #0
 80035c4:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 80035c8:	483d      	ldr	r0, [pc, #244]	; (80036c0 <MX_GPIO_Init+0x1a0>)
 80035ca:	f002 fd73 	bl	80060b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 80035ce:	2200      	movs	r2, #0
 80035d0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80035d4:	483b      	ldr	r0, [pc, #236]	; (80036c4 <MX_GPIO_Init+0x1a4>)
 80035d6:	f002 fd6d 	bl	80060b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80035da:	2200      	movs	r2, #0
 80035dc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80035e0:	4839      	ldr	r0, [pc, #228]	; (80036c8 <MX_GPIO_Init+0x1a8>)
 80035e2:	f002 fd67 	bl	80060b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2104      	movs	r1, #4
 80035ea:	4838      	ldr	r0, [pc, #224]	; (80036cc <MX_GPIO_Init+0x1ac>)
 80035ec:	f002 fd62 	bl	80060b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 80035f0:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80035f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	4619      	mov	r1, r3
 8003608:	482d      	ldr	r0, [pc, #180]	; (80036c0 <MX_GPIO_Init+0x1a0>)
 800360a:	f002 fb9f 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 800360e:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8003612:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003614:	2300      	movs	r3, #0
 8003616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	4619      	mov	r1, r3
 8003622:	4827      	ldr	r0, [pc, #156]	; (80036c0 <MX_GPIO_Init+0x1a0>)
 8003624:	f002 fb92 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8003628:	f640 0304 	movw	r3, #2052	; 0x804
 800362c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003636:	f107 0314 	add.w	r3, r7, #20
 800363a:	4619      	mov	r1, r3
 800363c:	4821      	ldr	r0, [pc, #132]	; (80036c4 <MX_GPIO_Init+0x1a4>)
 800363e:	f002 fb85 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8003642:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003648:	2301      	movs	r3, #1
 800364a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003650:	2300      	movs	r3, #0
 8003652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4619      	mov	r1, r3
 800365a:	481a      	ldr	r0, [pc, #104]	; (80036c4 <MX_GPIO_Init+0x1a4>)
 800365c:	f002 fb76 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8003660:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003666:	2301      	movs	r3, #1
 8003668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003672:	f107 0314 	add.w	r3, r7, #20
 8003676:	4619      	mov	r1, r3
 8003678:	4813      	ldr	r0, [pc, #76]	; (80036c8 <MX_GPIO_Init+0x1a8>)
 800367a:	f002 fb67 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 800367e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4619      	mov	r1, r3
 8003692:	480d      	ldr	r0, [pc, #52]	; (80036c8 <MX_GPIO_Init+0x1a8>)
 8003694:	f002 fb5a 	bl	8005d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8003698:	2304      	movs	r3, #4
 800369a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800369c:	2301      	movs	r3, #1
 800369e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	4619      	mov	r1, r3
 80036ae:	4807      	ldr	r0, [pc, #28]	; (80036cc <MX_GPIO_Init+0x1ac>)
 80036b0:	f002 fb4c 	bl	8005d4c <HAL_GPIO_Init>

}
 80036b4:	bf00      	nop
 80036b6:	3728      	adds	r7, #40	; 0x28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020800 	.word	0x40020800
 80036c4:	40020400 	.word	0x40020400
 80036c8:	40020000 	.word	0x40020000
 80036cc:	40020c00 	.word	0x40020c00

080036d0 <read_sidesens>:

/* USER CODE BEGIN 4 */

uint8_t read_sidesens()
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
	uint8_t _subsens;

	_subsens = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0; // right
 80036d6:	2104      	movs	r1, #4
 80036d8:	480e      	ldr	r0, [pc, #56]	; (8003714 <read_sidesens+0x44>)
 80036da:	f002 fcd3 	bl	8006084 <HAL_GPIO_ReadPin>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	71fb      	strb	r3, [r7, #7]
	_subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0; // left
 80036ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036f0:	4808      	ldr	r0, [pc, #32]	; (8003714 <read_sidesens+0x44>)
 80036f2:	f002 fcc7 	bl	8006084 <HAL_GPIO_ReadPin>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <read_sidesens+0x30>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e000      	b.n	8003702 <read_sidesens+0x32>
 8003700:	2300      	movs	r3, #0
 8003702:	b2da      	uxtb	r2, r3
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	4413      	add	r3, r2
 8003708:	71fb      	strb	r3, [r7, #7]

	return _subsens;
 800370a:	79fb      	ldrb	r3, [r7, #7]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40020400 	.word	0x40020400

08003718 <sensor_initialize>:

void sensor_initialize() {
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
	sensgettime = 0;
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <sensor_initialize+0x2c>)
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw,
 8003722:	2210      	movs	r2, #16
 8003724:	4908      	ldr	r1, [pc, #32]	; (8003748 <sensor_initialize+0x30>)
 8003726:	4809      	ldr	r0, [pc, #36]	; (800374c <sensor_initialize+0x34>)
 8003728:	f000 ff56 	bl	80045d8 <HAL_ADC_Start_DMA>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <sensor_initialize+0x1e>
	ADC_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK) {
		Error_Handler();
 8003732:	f000 f9bf 	bl	8003ab4 <Error_Handler>
	}
	HAL_Delay(1000);
 8003736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800373a:	f000 fee5 	bl	8004508 <HAL_Delay>
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000290 	.word	0x20000290
 8003748:	20000294 	.word	0x20000294
 800374c:	20014274 	.word	0x20014274

08003750 <sensor_finalize>:

void sensor_finalize() {
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8003754:	4802      	ldr	r0, [pc, #8]	; (8003760 <sensor_finalize+0x10>)
 8003756:	f001 f831 	bl	80047bc <HAL_ADC_Stop_DMA>
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20014274 	.word	0x20014274

08003764 <running_initialize>:

void running_initialize()
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
#if USE_LED
	set_led(0b11, 0b00);
 800376a:	2100      	movs	r1, #0
 800376c:	2003      	movs	r0, #3
 800376e:	f7fd fdbd 	bl	80012ec <set_led>
#endif
#if USE_FLASH
	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 8003772:	2300      	movs	r3, #0
 8003774:	71fb      	strb	r3, [r7, #7]
 8003776:	e015      	b.n	80037a4 <running_initialize+0x40>
		analogmax[i] = flash_buffer.analogmax[i];
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	79fa      	ldrb	r2, [r7, #7]
 800377c:	4952      	ldr	r1, [pc, #328]	; (80038c8 <running_initialize+0x164>)
 800377e:	330c      	adds	r3, #12
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	440b      	add	r3, r1
 8003784:	8859      	ldrh	r1, [r3, #2]
 8003786:	4b51      	ldr	r3, [pc, #324]	; (80038cc <running_initialize+0x168>)
 8003788:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		analogmin[i] = flash_buffer.analogmin[i];
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	79fa      	ldrb	r2, [r7, #7]
 8003790:	494d      	ldr	r1, [pc, #308]	; (80038c8 <running_initialize+0x164>)
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	440b      	add	r3, r1
 8003796:	8859      	ldrh	r1, [r3, #2]
 8003798:	4b4d      	ldr	r3, [pc, #308]	; (80038d0 <running_initialize+0x16c>)
 800379a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (unsigned char i = 0; CALIBRATIONSIZE > i; i++) {
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	3301      	adds	r3, #1
 80037a2:	71fb      	strb	r3, [r7, #7]
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	2b0b      	cmp	r3, #11
 80037a8:	d9e6      	bls.n	8003778 <running_initialize+0x14>
	}
	if(playmode == search)
 80037aa:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <running_initialize+0x170>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10a      	bne.n	80037c8 <running_initialize+0x64>
	{
		for(int i = 0; i <= COURSE_STATE_SIZE; i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	e002      	b.n	80037be <running_initialize+0x5a>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	3301      	adds	r3, #1
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80037c4:	4293      	cmp	r3, r2
 80037c6:	ddf7      	ble.n	80037b8 <running_initialize+0x54>
			// flash_buffer.igz[i] = 0;
			// flash_buffer.len[i] = 0;
		}
	}
#endif
	HAL_Delay(3000);
 80037c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80037cc:	f000 fe9c 	bl	8004508 <HAL_Delay>
	pid_initialize();
 80037d0:	f7fe fa12 	bl	8001bf8 <pid_initialize>
	sensor_initialize();
 80037d4:	f7ff ffa0 	bl	8003718 <sensor_initialize>
	right_length = 0;
#endif
#if USE_VELOCITY_CONTROL && D_VELOCITY_CONTROL_TIMER
	stoptime = 0;
#endif
	sampling_time = 0;
 80037d8:	4b3f      	ldr	r3, [pc, #252]	; (80038d8 <running_initialize+0x174>)
 80037da:	2200      	movs	r2, #0
 80037dc:	801a      	strh	r2, [r3, #0]
	m_velocity = 0;
 80037de:	493f      	ldr	r1, [pc, #252]	; (80038dc <running_initialize+0x178>)
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	e9c1 2300 	strd	r2, r3, [r1]
	mm_length = 0;
 80037ec:	493c      	ldr	r1, [pc, #240]	; (80038e0 <running_initialize+0x17c>)
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9c1 2300 	strd	r2, r3, [r1]
	my_gyro.z = 0;
 80037fa:	493a      	ldr	r1, [pc, #232]	; (80038e4 <running_initialize+0x180>)
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	e9c1 2304 	strd	r2, r3, [r1, #16]
	before_igz = 0;
 8003808:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <running_initialize+0x184>)
 800380a:	2200      	movs	r2, #0
 800380c:	801a      	strh	r2, [r3, #0]
	timtim1 = 0;
 800380e:	4b37      	ldr	r3, [pc, #220]	; (80038ec <running_initialize+0x188>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
	timtim2 = 0;
 8003814:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <running_initialize+0x18c>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
	encoder_initialize();
 800381a:	f000 f8d9 	bl	80039d0 <encoder_initialize>
	printf("Encoder_Start\r\n");
 800381e:	4835      	ldr	r0, [pc, #212]	; (80038f4 <running_initialize+0x190>)
 8003820:	f006 faba 	bl	8009d98 <puts>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003824:	213c      	movs	r1, #60	; 0x3c
 8003826:	4834      	ldr	r0, [pc, #208]	; (80038f8 <running_initialize+0x194>)
 8003828:	f004 f92e 	bl	8007a88 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800382c:	213c      	movs	r1, #60	; 0x3c
 800382e:	4833      	ldr	r0, [pc, #204]	; (80038fc <running_initialize+0x198>)
 8003830:	f004 f92a 	bl	8007a88 <HAL_TIM_Encoder_Start>
	subsensbuf = 0;
 8003834:	4b32      	ldr	r3, [pc, #200]	; (8003900 <running_initialize+0x19c>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
	marker = 0;
 800383a:	4b32      	ldr	r3, [pc, #200]	; (8003904 <running_initialize+0x1a0>)
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
	sidedeltacount = 0;
 8003840:	4b31      	ldr	r3, [pc, #196]	; (8003908 <running_initialize+0x1a4>)
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
	markerstate = 0;
 8003846:	4b31      	ldr	r3, [pc, #196]	; (800390c <running_initialize+0x1a8>)
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
	rightmarkercount = 0;
 800384c:	4b30      	ldr	r3, [pc, #192]	; (8003910 <running_initialize+0x1ac>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
#if USE_FLASH
	course_state_time = 0;
 8003852:	4b30      	ldr	r3, [pc, #192]	; (8003914 <running_initialize+0x1b0>)
 8003854:	2200      	movs	r2, #0
 8003856:	801a      	strh	r2, [r3, #0]
#endif
	printf("SideSens Timer\r\n");
 8003858:	482f      	ldr	r0, [pc, #188]	; (8003918 <running_initialize+0x1b4>)
 800385a:	f006 fa9d 	bl	8009d98 <puts>
	HAL_TIM_Base_Start_IT(&htim14);
 800385e:	482f      	ldr	r0, [pc, #188]	; (800391c <running_initialize+0x1b8>)
 8003860:	f003 ff6f 	bl	8007742 <HAL_TIM_Base_Start_IT>
	printf("Encoder Timer\r\n");
 8003864:	482e      	ldr	r0, [pc, #184]	; (8003920 <running_initialize+0x1bc>)
 8003866:	f006 fa97 	bl	8009d98 <puts>
	HAL_TIM_Base_Start_IT(&htim10);
 800386a:	482e      	ldr	r0, [pc, #184]	; (8003924 <running_initialize+0x1c0>)
 800386c:	f003 ff69 	bl	8007742 <HAL_TIM_Base_Start_IT>
	leftmotor = 0;
 8003870:	492d      	ldr	r1, [pc, #180]	; (8003928 <running_initialize+0x1c4>)
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9c1 2300 	strd	r2, r3, [r1]
	rightmotor = 0;
 800387e:	492b      	ldr	r1, [pc, #172]	; (800392c <running_initialize+0x1c8>)
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9c1 2300 	strd	r2, r3, [r1]
	beforedirection = 0;
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <running_initialize+0x1cc>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
	sdirection = 0;
 8003892:	4b28      	ldr	r3, [pc, #160]	; (8003934 <running_initialize+0x1d0>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
	printf("PWM_Start\r\n");
 8003898:	4827      	ldr	r0, [pc, #156]	; (8003938 <running_initialize+0x1d4>)
 800389a:	f006 fa7d 	bl	8009d98 <puts>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 800389e:	2100      	movs	r1, #0
 80038a0:	4826      	ldr	r0, [pc, #152]	; (800393c <running_initialize+0x1d8>)
 80038a2:	f003 ffc9 	bl	8007838 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80038a6:	2104      	movs	r1, #4
 80038a8:	4824      	ldr	r0, [pc, #144]	; (800393c <running_initialize+0x1d8>)
 80038aa:	f003 ffc5 	bl	8007838 <HAL_TIM_PWM_Start>
	printf("PID\r\n");
 80038ae:	4824      	ldr	r0, [pc, #144]	; (8003940 <running_initialize+0x1dc>)
 80038b0:	f006 fa72 	bl	8009d98 <puts>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 80038b4:	4823      	ldr	r0, [pc, #140]	; (8003944 <running_initialize+0x1e0>)
 80038b6:	f003 ff44 	bl	8007742 <HAL_TIM_Base_Start_IT>
#if PLAY
	motorenable = 1;
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <running_initialize+0x1e4>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
#endif
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200003a8 	.word	0x200003a8
 80038cc:	20013f18 	.word	0x20013f18
 80038d0:	200002f4 	.word	0x200002f4
 80038d4:	200002c0 	.word	0x200002c0
 80038d8:	20000270 	.word	0x20000270
 80038dc:	200002d0 	.word	0x200002d0
 80038e0:	20013e10 	.word	0x20013e10
 80038e4:	20013f40 	.word	0x20013f40
 80038e8:	20000312 	.word	0x20000312
 80038ec:	2000035c 	.word	0x2000035c
 80038f0:	20000248 	.word	0x20000248
 80038f4:	0800db14 	.word	0x0800db14
 80038f8:	2001439c 	.word	0x2001439c
 80038fc:	20014234 	.word	0x20014234
 8003900:	20000310 	.word	0x20000310
 8003904:	200003a1 	.word	0x200003a1
 8003908:	20000316 	.word	0x20000316
 800390c:	20000340 	.word	0x20000340
 8003910:	20013f60 	.word	0x20013f60
 8003914:	20013f62 	.word	0x20013f62
 8003918:	0800db24 	.word	0x0800db24
 800391c:	2001445c 	.word	0x2001445c
 8003920:	0800db34 	.word	0x0800db34
 8003924:	200141f4 	.word	0x200141f4
 8003928:	200002e0 	.word	0x200002e0
 800392c:	200002d8 	.word	0x200002d8
 8003930:	20013f38 	.word	0x20013f38
 8003934:	200002b4 	.word	0x200002b4
 8003938:	0800db44 	.word	0x0800db44
 800393c:	20014160 	.word	0x20014160
 8003940:	0800db50 	.word	0x0800db50
 8003944:	2001435c 	.word	0x2001435c
 8003948:	20013e20 	.word	0x20013e20

0800394c <running_finalize>:

void running_finalize() {
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
	motorenable = 0;
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <running_finalize+0x58>)
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
	sensor_finalize();
 8003956:	f7ff fefb 	bl	8003750 <sensor_finalize>
	HAL_TIM_Base_Stop_IT(&htim6);
 800395a:	4813      	ldr	r0, [pc, #76]	; (80039a8 <running_finalize+0x5c>)
 800395c:	f003 ff15 	bl	800778a <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8003960:	2104      	movs	r1, #4
 8003962:	4812      	ldr	r0, [pc, #72]	; (80039ac <running_finalize+0x60>)
 8003964:	f003 ffa6 	bl	80078b4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003968:	2100      	movs	r1, #0
 800396a:	4810      	ldr	r0, [pc, #64]	; (80039ac <running_finalize+0x60>)
 800396c:	f003 ffa2 	bl	80078b4 <HAL_TIM_PWM_Stop>
	encoder_finalize();
 8003970:	f000 f87e 	bl	8003a70 <encoder_finalize>
	HAL_TIM_Base_Stop_IT(&htim10);
 8003974:	480e      	ldr	r0, [pc, #56]	; (80039b0 <running_finalize+0x64>)
 8003976:	f003 ff08 	bl	800778a <HAL_TIM_Base_Stop_IT>
	if(playmode == search)
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <running_finalize+0x68>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10e      	bne.n	80039a0 <running_finalize+0x54>
	{
#if USE_FLASH
		printf(ESC_CYA);
 8003982:	480d      	ldr	r0, [pc, #52]	; (80039b8 <running_finalize+0x6c>)
 8003984:	f006 f982 	bl	8009c8c <iprintf>
		printf("////////// WRITE FLASH ///////////\r\n");
 8003988:	480c      	ldr	r0, [pc, #48]	; (80039bc <running_finalize+0x70>)
 800398a:	f006 fa05 	bl	8009d98 <puts>
		printf(ESC_DEF);
 800398e:	480c      	ldr	r0, [pc, #48]	; (80039c0 <running_finalize+0x74>)
 8003990:	f006 f97c 	bl	8009c8c <iprintf>
		writeFlash(start_address, (uint8_t*) &flash_buffer,
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <running_finalize+0x78>)
 8003996:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <running_finalize+0x7c>)
 8003998:	490c      	ldr	r1, [pc, #48]	; (80039cc <running_finalize+0x80>)
 800399a:	4618      	mov	r0, r3
 800399c:	f7fd fe13 	bl	80015c6 <writeFlash>
				sizeof(FlashBuffer));
#endif
	}
}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20013e20 	.word	0x20013e20
 80039a8:	2001435c 	.word	0x2001435c
 80039ac:	20014160 	.word	0x20014160
 80039b0:	200141f4 	.word	0x200141f4
 80039b4:	200002c0 	.word	0x200002c0
 80039b8:	0800db58 	.word	0x0800db58
 80039bc:	0800db60 	.word	0x0800db60
 80039c0:	0800da18 	.word	0x0800da18
 80039c4:	080e0000 	.word	0x080e0000
 80039c8:	000138b8 	.word	0x000138b8
 80039cc:	200003a8 	.word	0x200003a8

080039d0 <encoder_initialize>:

void encoder_initialize() {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
#if USE_VELOCITY_CONTROL
#if VELOCITY_CONTROL_RELATIVE
	s_velocity_error = 0;
 80039d6:	491d      	ldr	r1, [pc, #116]	; (8003a4c <encoder_initialize+0x7c>)
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	e9c1 2300 	strd	r2, r3, [r1]
#else
	s_velocity_error_l = 0;
	s_velocity_error_r = 0;
#endif
#if USE_FLASH
	if (rv == 0x01) {
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <encoder_initialize+0x80>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d11b      	bne.n	8003a24 <encoder_initialize+0x54>
		s_velocity = 0;
 80039ec:	4919      	ldr	r1, [pc, #100]	; (8003a54 <encoder_initialize+0x84>)
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; COURSE_STATE_SIZE > i; i++) {
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	e00c      	b.n	8003a1a <encoder_initialize+0x4a>
#if !D_COURSE_SAVING
			flash_buffer.radius[i] = 65536;
 8003a00:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <encoder_initialize+0x88>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3307      	adds	r3, #7
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	18d1      	adds	r1, r2, r3
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <encoder_initialize+0x8c>)
 8003a10:	e9c1 2300 	strd	r2, r3, [r1]
		for (int i = 0; COURSE_STATE_SIZE > i; i++) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3301      	adds	r3, #1
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a20:	4293      	cmp	r3, r2
 8003a22:	dded      	ble.n	8003a00 <encoder_initialize+0x30>
		}
	}
#endif
#endif

	TIM1->CNT = ENCODER_MIDDLE;
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <encoder_initialize+0x90>)
 8003a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = ENCODER_MIDDLE;
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <encoder_initialize+0x94>)
 8003a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003a34:	213c      	movs	r1, #60	; 0x3c
 8003a36:	480c      	ldr	r0, [pc, #48]	; (8003a68 <encoder_initialize+0x98>)
 8003a38:	f004 f826 	bl	8007a88 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003a3c:	213c      	movs	r1, #60	; 0x3c
 8003a3e:	480b      	ldr	r0, [pc, #44]	; (8003a6c <encoder_initialize+0x9c>)
 8003a40:	f004 f822 	bl	8007a88 <HAL_TIM_Encoder_Start>
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	200002b8 	.word	0x200002b8
 8003a50:	200003a0 	.word	0x200003a0
 8003a54:	20000380 	.word	0x20000380
 8003a58:	200003a8 	.word	0x200003a8
 8003a5c:	40f00000 	.word	0x40f00000
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40000400 	.word	0x40000400
 8003a68:	2001439c 	.word	0x2001439c
 8003a6c:	20014234 	.word	0x20014234

08003a70 <encoder_finalize>:

void encoder_finalize() {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8003a74:	213c      	movs	r1, #60	; 0x3c
 8003a76:	4804      	ldr	r0, [pc, #16]	; (8003a88 <encoder_finalize+0x18>)
 8003a78:	f004 f83e 	bl	8007af8 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8003a7c:	213c      	movs	r1, #60	; 0x3c
 8003a7e:	4803      	ldr	r0, [pc, #12]	; (8003a8c <encoder_finalize+0x1c>)
 8003a80:	f004 f83a 	bl	8007af8 <HAL_TIM_Encoder_Stop>
}
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	2001439c 	.word	0x2001439c
 8003a8c:	20014234 	.word	0x20014234

08003a90 <__io_putchar>:

PUTCHAR_PROTOTYPE {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8003a98:	1d39      	adds	r1, r7, #4
 8003a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4803      	ldr	r0, [pc, #12]	; (8003ab0 <__io_putchar+0x20>)
 8003aa2:	f004 fdba 	bl	800861a <HAL_UART_Transmit>
	return ch;
 8003aa6:	687b      	ldr	r3, [r7, #4]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	200143dc 	.word	0x200143dc

08003ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab8:	b672      	cpsid	i
}
 8003aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003abc:	e7fe      	b.n	8003abc <Error_Handler+0x8>
	...

08003ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_MspInit+0x54>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <HAL_MspInit+0x54>)
 8003ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_MspInit+0x54>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	603b      	str	r3, [r7, #0]
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_MspInit+0x54>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_MspInit+0x54>)
 8003aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af0:	6413      	str	r3, [r2, #64]	; 0x40
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_MspInit+0x54>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	210f      	movs	r1, #15
 8003b02:	f06f 0003 	mvn.w	r0, #3
 8003b06:	f001 fa32 	bl	8004f6e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800

08003b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	; 0x30
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 031c 	add.w	r3, r7, #28
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a49      	ldr	r2, [pc, #292]	; (8003c5c <HAL_ADC_MspInit+0x144>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	f040 808c 	bne.w	8003c54 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	4a46      	ldr	r2, [pc, #280]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4a:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4c:	4b44      	ldr	r3, [pc, #272]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4a3f      	ldr	r2, [pc, #252]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b62:	f043 0304 	orr.w	r3, r3, #4
 8003b66:	6313      	str	r3, [r2, #48]	; 0x30
 8003b68:	4b3d      	ldr	r3, [pc, #244]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	4a38      	ldr	r2, [pc, #224]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6313      	str	r3, [r2, #48]	; 0x30
 8003b84:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	4a31      	ldr	r2, [pc, #196]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003b9a:	f043 0302 	orr.w	r3, r3, #2
 8003b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba0:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <HAL_ADC_MspInit+0x148>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003bac:	233f      	movs	r3, #63	; 0x3f
 8003bae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bb8:	f107 031c 	add.w	r3, r7, #28
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4829      	ldr	r0, [pc, #164]	; (8003c64 <HAL_ADC_MspInit+0x14c>)
 8003bc0:	f002 f8c4 	bl	8005d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003bc4:	23ff      	movs	r3, #255	; 0xff
 8003bc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd0:	f107 031c 	add.w	r3, r7, #28
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4824      	ldr	r0, [pc, #144]	; (8003c68 <HAL_ADC_MspInit+0x150>)
 8003bd8:	f002 f8b8 	bl	8005d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003be0:	2303      	movs	r3, #3
 8003be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be8:	f107 031c 	add.w	r3, r7, #28
 8003bec:	4619      	mov	r1, r3
 8003bee:	481f      	ldr	r0, [pc, #124]	; (8003c6c <HAL_ADC_MspInit+0x154>)
 8003bf0:	f002 f8ac 	bl	8005d4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003bf6:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <HAL_ADC_MspInit+0x15c>)
 8003bf8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c06:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c0c:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c14:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c2a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c32:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c38:	480d      	ldr	r0, [pc, #52]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c3a:	f001 f9cf 	bl	8004fdc <HAL_DMA_Init>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003c44:	f7ff ff36 	bl	8003ab4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a09      	ldr	r2, [pc, #36]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c4e:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <HAL_ADC_MspInit+0x158>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c54:	bf00      	nop
 8003c56:	3730      	adds	r7, #48	; 0x30
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40012000 	.word	0x40012000
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40020800 	.word	0x40020800
 8003c68:	40020000 	.word	0x40020000
 8003c6c:	40020400 	.word	0x40020400
 8003c70:	200142fc 	.word	0x200142fc
 8003c74:	40026410 	.word	0x40026410

08003c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_I2C_MspInit+0x84>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d12c      	bne.n	8003cf4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <HAL_I2C_MspInit+0x88>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <HAL_I2C_MspInit+0x88>)
 8003ca4:	f043 0302 	orr.w	r3, r3, #2
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <HAL_I2C_MspInit+0x88>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cbc:	2312      	movs	r3, #18
 8003cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cc8:	2304      	movs	r3, #4
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	480c      	ldr	r0, [pc, #48]	; (8003d04 <HAL_I2C_MspInit+0x8c>)
 8003cd4:	f002 f83a 	bl	8005d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <HAL_I2C_MspInit+0x88>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <HAL_I2C_MspInit+0x88>)
 8003ce2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_I2C_MspInit+0x88>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003cf4:	bf00      	nop
 8003cf6:	3728      	adds	r7, #40	; 0x28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40005400 	.word	0x40005400
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020400 	.word	0x40020400

08003d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	; 0x28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d10:	f107 0314 	add.w	r3, r7, #20
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
 8003d1c:	60da      	str	r2, [r3, #12]
 8003d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <HAL_SPI_MspInit+0x84>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d12c      	bne.n	8003d84 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <HAL_SPI_MspInit+0x88>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	4a17      	ldr	r2, [pc, #92]	; (8003d90 <HAL_SPI_MspInit+0x88>)
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d38:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_SPI_MspInit+0x88>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_SPI_MspInit+0x88>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a10      	ldr	r2, [pc, #64]	; (8003d90 <HAL_SPI_MspInit+0x88>)
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <HAL_SPI_MspInit+0x88>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003d62:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d70:	2303      	movs	r3, #3
 8003d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d74:	2305      	movs	r3, #5
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4805      	ldr	r0, [pc, #20]	; (8003d94 <HAL_SPI_MspInit+0x8c>)
 8003d80:	f001 ffe4 	bl	8005d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003d84:	bf00      	nop
 8003d86:	3728      	adds	r7, #40	; 0x28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40003800 	.word	0x40003800
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40020400 	.word	0x40020400

08003d98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	; 0x30
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da0:	f107 031c 	add.w	r3, r7, #28
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	605a      	str	r2, [r3, #4]
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a3a      	ldr	r2, [pc, #232]	; (8003ea0 <HAL_TIM_Encoder_MspInit+0x108>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d13d      	bne.n	8003e36 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	4a38      	ldr	r2, [pc, #224]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dca:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	6313      	str	r3, [r2, #48]	; 0x30
 8003de6:	4b2f      	ldr	r3, [pc, #188]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8003df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e00:	2300      	movs	r3, #0
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e04:	2301      	movs	r3, #1
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4826      	ldr	r0, [pc, #152]	; (8003ea8 <HAL_TIM_Encoder_MspInit+0x110>)
 8003e10:	f001 ff9c 	bl	8005d4c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	2100      	movs	r1, #0
 8003e18:	2019      	movs	r0, #25
 8003e1a:	f001 f8a8 	bl	8004f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003e1e:	2019      	movs	r0, #25
 8003e20:	f001 f8c1 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003e24:	2200      	movs	r2, #0
 8003e26:	2100      	movs	r1, #0
 8003e28:	201a      	movs	r0, #26
 8003e2a:	f001 f8a0 	bl	8004f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003e2e:	201a      	movs	r0, #26
 8003e30:	f001 f8b9 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003e34:	e030      	b.n	8003e98 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <HAL_TIM_Encoder_MspInit+0x114>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d12b      	bne.n	8003e98 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e4a:	f043 0302 	orr.w	r3, r3, #2
 8003e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e50:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e66:	f043 0302 	orr.w	r3, r3, #2
 8003e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8003e78:	2330      	movs	r3, #48	; 0x30
 8003e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e8c:	f107 031c 	add.w	r3, r7, #28
 8003e90:	4619      	mov	r1, r3
 8003e92:	4807      	ldr	r0, [pc, #28]	; (8003eb0 <HAL_TIM_Encoder_MspInit+0x118>)
 8003e94:	f001 ff5a 	bl	8005d4c <HAL_GPIO_Init>
}
 8003e98:	bf00      	nop
 8003e9a:	3730      	adds	r7, #48	; 0x30
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40010000 	.word	0x40010000
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40020000 	.word	0x40020000
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40020400 	.word	0x40020400

08003eb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <HAL_TIM_PWM_MspInit+0x64>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <HAL_TIM_PWM_MspInit+0x64>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <HAL_TIM_PWM_MspInit+0x64>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ee2:	e012      	b.n	8003f0a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <HAL_TIM_PWM_MspInit+0x68>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10d      	bne.n	8003f0a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <HAL_TIM_PWM_MspInit+0x64>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <HAL_TIM_PWM_MspInit+0x64>)
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_TIM_PWM_MspInit+0x64>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40000800 	.word	0x40000800

08003f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a34      	ldr	r2, [pc, #208]	; (8004000 <HAL_TIM_Base_MspInit+0xe0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d116      	bne.n	8003f60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	4a32      	ldr	r2, [pc, #200]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003f3c:	f043 0310 	orr.w	r3, r3, #16
 8003f40:	6413      	str	r3, [r2, #64]	; 0x40
 8003f42:	4b30      	ldr	r3, [pc, #192]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2100      	movs	r1, #0
 8003f52:	2036      	movs	r0, #54	; 0x36
 8003f54:	f001 f80b 	bl	8004f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f58:	2036      	movs	r0, #54	; 0x36
 8003f5a:	f001 f824 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003f5e:	e04a      	b.n	8003ff6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a28      	ldr	r2, [pc, #160]	; (8004008 <HAL_TIM_Base_MspInit+0xe8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d116      	bne.n	8003f98 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	4a24      	ldr	r2, [pc, #144]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f78:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7a:	4b22      	ldr	r3, [pc, #136]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003f86:	2200      	movs	r2, #0
 8003f88:	2100      	movs	r1, #0
 8003f8a:	2019      	movs	r0, #25
 8003f8c:	f000 ffef 	bl	8004f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003f90:	2019      	movs	r0, #25
 8003f92:	f001 f808 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
}
 8003f96:	e02e      	b.n	8003ff6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1b      	ldr	r2, [pc, #108]	; (800400c <HAL_TIM_Base_MspInit+0xec>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d116      	bne.n	8003fd0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b17      	ldr	r3, [pc, #92]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	4a16      	ldr	r2, [pc, #88]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb2:	4b14      	ldr	r3, [pc, #80]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	201a      	movs	r0, #26
 8003fc4:	f000 ffd3 	bl	8004f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003fc8:	201a      	movs	r0, #26
 8003fca:	f000 ffec 	bl	8004fa6 <HAL_NVIC_EnableIRQ>
}
 8003fce:	e012      	b.n	8003ff6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM14)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <HAL_TIM_Base_MspInit+0xf0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d10d      	bne.n	8003ff6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_TIM_Base_MspInit+0xe4>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
}
 8003ff6:	bf00      	nop
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40001000 	.word	0x40001000
 8004004:	40023800 	.word	0x40023800
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40002000 	.word	0x40002000

08004014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d11f      	bne.n	8004076 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	4a21      	ldr	r2, [pc, #132]	; (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	6313      	str	r3, [r2, #48]	; 0x30
 8004046:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8004052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004058:	2302      	movs	r3, #2
 800405a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004060:	2300      	movs	r3, #0
 8004062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004064:	2301      	movs	r3, #1
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	4619      	mov	r1, r3
 800406e:	4816      	ldr	r0, [pc, #88]	; (80040c8 <HAL_TIM_MspPostInit+0xb4>)
 8004070:	f001 fe6c 	bl	8005d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004074:	e022      	b.n	80040bc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a14      	ldr	r2, [pc, #80]	; (80040cc <HAL_TIM_MspPostInit+0xb8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d11d      	bne.n	80040bc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	4a0e      	ldr	r2, [pc, #56]	; (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	6313      	str	r3, [r2, #48]	; 0x30
 8004090:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 800409c:	23c0      	movs	r3, #192	; 0xc0
 800409e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a0:	2302      	movs	r3, #2
 80040a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a8:	2300      	movs	r3, #0
 80040aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040ac:	2302      	movs	r3, #2
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b0:	f107 0314 	add.w	r3, r7, #20
 80040b4:	4619      	mov	r1, r3
 80040b6:	4806      	ldr	r0, [pc, #24]	; (80040d0 <HAL_TIM_MspPostInit+0xbc>)
 80040b8:	f001 fe48 	bl	8005d4c <HAL_GPIO_Init>
}
 80040bc:	bf00      	nop
 80040be:	3728      	adds	r7, #40	; 0x28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40020000 	.word	0x40020000
 80040cc:	40000800 	.word	0x40000800
 80040d0:	40020400 	.word	0x40020400

080040d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a19      	ldr	r2, [pc, #100]	; (8004158 <HAL_UART_MspInit+0x84>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d12b      	bne.n	800414e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_UART_MspInit+0x88>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	4a17      	ldr	r2, [pc, #92]	; (800415c <HAL_UART_MspInit+0x88>)
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	6453      	str	r3, [r2, #68]	; 0x44
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <HAL_UART_MspInit+0x88>)
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_UART_MspInit+0x88>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	4a10      	ldr	r2, [pc, #64]	; (800415c <HAL_UART_MspInit+0x88>)
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	6313      	str	r3, [r2, #48]	; 0x30
 8004122:	4b0e      	ldr	r3, [pc, #56]	; (800415c <HAL_UART_MspInit+0x88>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800412e:	23c0      	movs	r3, #192	; 0xc0
 8004130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004132:	2302      	movs	r3, #2
 8004134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800413a:	2303      	movs	r3, #3
 800413c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800413e:	2308      	movs	r3, #8
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004142:	f107 0314 	add.w	r3, r7, #20
 8004146:	4619      	mov	r1, r3
 8004148:	4805      	ldr	r0, [pc, #20]	; (8004160 <HAL_UART_MspInit+0x8c>)
 800414a:	f001 fdff 	bl	8005d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800414e:	bf00      	nop
 8004150:	3728      	adds	r7, #40	; 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40011400 	.word	0x40011400
 800415c:	40023800 	.word	0x40023800
 8004160:	40020800 	.word	0x40020800

08004164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004168:	e7fe      	b.n	8004168 <NMI_Handler+0x4>

0800416a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800416a:	b480      	push	{r7}
 800416c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800416e:	e7fe      	b.n	800416e <HardFault_Handler+0x4>

08004170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004174:	e7fe      	b.n	8004174 <MemManage_Handler+0x4>

08004176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800417a:	e7fe      	b.n	800417a <BusFault_Handler+0x4>

0800417c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004180:	e7fe      	b.n	8004180 <UsageFault_Handler+0x4>

08004182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004182:	b480      	push	{r7}
 8004184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041b0:	f000 f98a 	bl	80044c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80041be:	f003 fce3 	bl	8007b88 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80041c2:	4803      	ldr	r0, [pc, #12]	; (80041d0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80041c4:	f003 fce0 	bl	8007b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80041c8:	bf00      	nop
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	2001439c 	.word	0x2001439c
 80041d0:	200141f4 	.word	0x200141f4

080041d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041d8:	4803      	ldr	r0, [pc, #12]	; (80041e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80041da:	f003 fcd5 	bl	8007b88 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80041de:	4803      	ldr	r0, [pc, #12]	; (80041ec <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80041e0:	f003 fcd2 	bl	8007b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	2001439c 	.word	0x2001439c
 80041ec:	200142bc 	.word	0x200142bc

080041f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041f4:	4802      	ldr	r0, [pc, #8]	; (8004200 <TIM6_DAC_IRQHandler+0x10>)
 80041f6:	f003 fcc7 	bl	8007b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	2001435c 	.word	0x2001435c

08004204 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <DMA2_Stream0_IRQHandler+0x10>)
 800420a:	f001 f85d 	bl	80052c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200142fc 	.word	0x200142fc

08004218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
	return 1;
 800421c:	2301      	movs	r3, #1
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_kill>:

int _kill(int pid, int sig)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004232:	f004 fe71 	bl	8008f18 <__errno>
 8004236:	4603      	mov	r3, r0
 8004238:	2216      	movs	r2, #22
 800423a:	601a      	str	r2, [r3, #0]
	return -1;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <_exit>:

void _exit (int status)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004250:	f04f 31ff 	mov.w	r1, #4294967295
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ffe7 	bl	8004228 <_kill>
	while (1) {}		/* Make sure we hang here */
 800425a:	e7fe      	b.n	800425a <_exit+0x12>

0800425c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e00a      	b.n	8004284 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800426e:	f3af 8000 	nop.w
 8004272:	4601      	mov	r1, r0
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	60ba      	str	r2, [r7, #8]
 800427a:	b2ca      	uxtb	r2, r1
 800427c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	3301      	adds	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	429a      	cmp	r2, r3
 800428a:	dbf0      	blt.n	800426e <_read+0x12>
	}

return len;
 800428c:	687b      	ldr	r3, [r7, #4]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	e009      	b.n	80042bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	60ba      	str	r2, [r7, #8]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fbed 	bl	8003a90 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	3301      	adds	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	dbf1      	blt.n	80042a8 <_write+0x12>
	}
	return len;
 80042c4:	687b      	ldr	r3, [r7, #4]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <_close>:

int _close(int file)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
	return -1;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042f6:	605a      	str	r2, [r3, #4]
	return 0;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <_isatty>:

int _isatty(int file)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
	return 1;
 800430e:	2301      	movs	r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
	return 0;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <_sbrk+0x5c>)
 8004342:	4b15      	ldr	r3, [pc, #84]	; (8004398 <_sbrk+0x60>)
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800434c:	4b13      	ldr	r3, [pc, #76]	; (800439c <_sbrk+0x64>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <_sbrk+0x64>)
 8004356:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <_sbrk+0x68>)
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <_sbrk+0x64>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	429a      	cmp	r2, r3
 8004366:	d207      	bcs.n	8004378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004368:	f004 fdd6 	bl	8008f18 <__errno>
 800436c:	4603      	mov	r3, r0
 800436e:	220c      	movs	r2, #12
 8004370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	e009      	b.n	800438c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <_sbrk+0x64>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <_sbrk+0x64>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	4a05      	ldr	r2, [pc, #20]	; (800439c <_sbrk+0x64>)
 8004388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800438a:	68fb      	ldr	r3, [r7, #12]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20020000 	.word	0x20020000
 8004398:	00000400 	.word	0x00000400
 800439c:	200001fc 	.word	0x200001fc
 80043a0:	200144d0 	.word	0x200144d0

080043a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a8:	4b08      	ldr	r3, [pc, #32]	; (80043cc <SystemInit+0x28>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	4a07      	ldr	r2, [pc, #28]	; (80043cc <SystemInit+0x28>)
 80043b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <SystemInit+0x28>)
 80043ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043be:	609a      	str	r2, [r3, #8]
#endif
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004408 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043d6:	e003      	b.n	80043e0 <LoopCopyDataInit>

080043d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80043da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043de:	3104      	adds	r1, #4

080043e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043e0:	480b      	ldr	r0, [pc, #44]	; (8004410 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043e2:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80043e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043e8:	d3f6      	bcc.n	80043d8 <CopyDataInit>
  ldr  r2, =_sbss
 80043ea:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80043ec:	e002      	b.n	80043f4 <LoopFillZerobss>

080043ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043f0:	f842 3b04 	str.w	r3, [r2], #4

080043f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043f8:	d3f9      	bcc.n	80043ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043fa:	f7ff ffd3 	bl	80043a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043fe:	f004 fd91 	bl	8008f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004402:	f7fe f9ad 	bl	8002760 <main>
  bx  lr    
 8004406:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004408:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800440c:	0800e06c 	.word	0x0800e06c
  ldr  r0, =_sdata
 8004410:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004414:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8004418:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800441c:	200144d0 	.word	0x200144d0

08004420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004420:	e7fe      	b.n	8004420 <ADC_IRQHandler>
	...

08004424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <HAL_Init+0x40>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <HAL_Init+0x40>)
 800442e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_Init+0x40>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <HAL_Init+0x40>)
 800443a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800443e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004440:	4b08      	ldr	r3, [pc, #32]	; (8004464 <HAL_Init+0x40>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a07      	ldr	r2, [pc, #28]	; (8004464 <HAL_Init+0x40>)
 8004446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800444c:	2003      	movs	r0, #3
 800444e:	f000 fd83 	bl	8004f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004452:	2000      	movs	r0, #0
 8004454:	f000 f808 	bl	8004468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004458:	f7ff fb32 	bl	8003ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40023c00 	.word	0x40023c00

08004468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004470:	4b12      	ldr	r3, [pc, #72]	; (80044bc <HAL_InitTick+0x54>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <HAL_InitTick+0x58>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800447e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fd9b 	bl	8004fc2 <HAL_SYSTICK_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e00e      	b.n	80044b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d80a      	bhi.n	80044b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800449c:	2200      	movs	r2, #0
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	f000 fd63 	bl	8004f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044a8:	4a06      	ldr	r2, [pc, #24]	; (80044c4 <HAL_InitTick+0x5c>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e000      	b.n	80044b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000000 	.word	0x20000000
 80044c0:	20000008 	.word	0x20000008
 80044c4:	20000004 	.word	0x20000004

080044c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_IncTick+0x20>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_IncTick+0x24>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4413      	add	r3, r2
 80044d8:	4a04      	ldr	r2, [pc, #16]	; (80044ec <HAL_IncTick+0x24>)
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20000008 	.word	0x20000008
 80044ec:	2001449c 	.word	0x2001449c

080044f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return uwTick;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <HAL_GetTick+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	2001449c 	.word	0x2001449c

08004508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004510:	f7ff ffee 	bl	80044f0 <HAL_GetTick>
 8004514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d005      	beq.n	800452e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <HAL_Delay+0x44>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800452e:	bf00      	nop
 8004530:	f7ff ffde 	bl	80044f0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	429a      	cmp	r2, r3
 800453e:	d8f7      	bhi.n	8004530 <HAL_Delay+0x28>
  {
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000008 	.word	0x20000008

08004550 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e033      	b.n	80045ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fad2 	bl	8003b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d118      	bne.n	80045c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004596:	f023 0302 	bic.w	r3, r3, #2
 800459a:	f043 0202 	orr.w	r2, r3, #2
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fa8a 	bl	8004abc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40
 80045be:	e001      	b.n	80045c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_ADC_Start_DMA+0x1e>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e0cc      	b.n	8004790 <HAL_ADC_Start_DMA+0x1b8>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d018      	beq.n	800463e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800461c:	4b5e      	ldr	r3, [pc, #376]	; (8004798 <HAL_ADC_Start_DMA+0x1c0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a5e      	ldr	r2, [pc, #376]	; (800479c <HAL_ADC_Start_DMA+0x1c4>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	0c9a      	lsrs	r2, r3, #18
 8004628:	4613      	mov	r3, r2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4413      	add	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004630:	e002      	b.n	8004638 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	3b01      	subs	r3, #1
 8004636:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f9      	bne.n	8004632 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	f040 80a0 	bne.w	800478e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004678:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468c:	d106      	bne.n	800469c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f023 0206 	bic.w	r2, r3, #6
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
 800469a:	e002      	b.n	80046a2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046aa:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <HAL_ADC_Start_DMA+0x1c8>)
 80046ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	4a3c      	ldr	r2, [pc, #240]	; (80047a4 <HAL_ADC_Start_DMA+0x1cc>)
 80046b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <HAL_ADC_Start_DMA+0x1d0>)
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	4a3a      	ldr	r2, [pc, #232]	; (80047ac <HAL_ADC_Start_DMA+0x1d4>)
 80046c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80046ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80046de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	334c      	adds	r3, #76	; 0x4c
 80046fa:	4619      	mov	r1, r3
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f000 fd1a 	bl	8005138 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2b00      	cmp	r3, #0
 800470e:	d12a      	bne.n	8004766 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <HAL_ADC_Start_DMA+0x1d8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d015      	beq.n	8004746 <HAL_ADC_Start_DMA+0x16e>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <HAL_ADC_Start_DMA+0x1dc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d105      	bne.n	8004730 <HAL_ADC_Start_DMA+0x158>
 8004724:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <HAL_ADC_Start_DMA+0x1c8>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 031f 	and.w	r3, r3, #31
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <HAL_ADC_Start_DMA+0x1e0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d129      	bne.n	800478e <HAL_ADC_Start_DMA+0x1b6>
 800473a:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <HAL_ADC_Start_DMA+0x1c8>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b00      	cmp	r3, #0
 8004744:	d123      	bne.n	800478e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11c      	bne.n	800478e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004762:	609a      	str	r2, [r3, #8]
 8004764:	e013      	b.n	800478e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <HAL_ADC_Start_DMA+0x1d8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10e      	bne.n	800478e <HAL_ADC_Start_DMA+0x1b6>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d107      	bne.n	800478e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800478c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000000 	.word	0x20000000
 800479c:	431bde83 	.word	0x431bde83
 80047a0:	40012300 	.word	0x40012300
 80047a4:	08004cb5 	.word	0x08004cb5
 80047a8:	08004d6f 	.word	0x08004d6f
 80047ac:	08004d8b 	.word	0x08004d8b
 80047b0:	40012000 	.word	0x40012000
 80047b4:	40012100 	.word	0x40012100
 80047b8:	40012200 	.word	0x40012200

080047bc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_ADC_Stop_DMA+0x1a>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e038      	b.n	8004848 <HAL_ADC_Stop_DMA+0x8c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d120      	bne.n	800483e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800480a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fce9 	bl	80051e8 <HAL_DMA_Abort>
 8004816:	4603      	mov	r3, r0
 8004818:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004828:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	f043 0201 	orr.w	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004846:	7bfb      	ldrb	r3, [r7, #15]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x1c>
 8004890:	2302      	movs	r3, #2
 8004892:	e105      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x228>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b09      	cmp	r3, #9
 80048a2:	d925      	bls.n	80048f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68d9      	ldr	r1, [r3, #12]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	3b1e      	subs	r3, #30
 80048ba:	2207      	movs	r2, #7
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43da      	mvns	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	400a      	ands	r2, r1
 80048c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68d9      	ldr	r1, [r3, #12]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	4618      	mov	r0, r3
 80048dc:	4603      	mov	r3, r0
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4403      	add	r3, r0
 80048e2:	3b1e      	subs	r3, #30
 80048e4:	409a      	lsls	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	e022      	b.n	8004936 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6919      	ldr	r1, [r3, #16]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	4613      	mov	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4413      	add	r3, r2
 8004904:	2207      	movs	r2, #7
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43da      	mvns	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	400a      	ands	r2, r1
 8004912:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6919      	ldr	r1, [r3, #16]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	4618      	mov	r0, r3
 8004926:	4603      	mov	r3, r0
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	4403      	add	r3, r0
 800492c:	409a      	lsls	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b06      	cmp	r3, #6
 800493c:	d824      	bhi.n	8004988 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	3b05      	subs	r3, #5
 8004950:	221f      	movs	r2, #31
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43da      	mvns	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	400a      	ands	r2, r1
 800495e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	4618      	mov	r0, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	3b05      	subs	r3, #5
 800497a:	fa00 f203 	lsl.w	r2, r0, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	635a      	str	r2, [r3, #52]	; 0x34
 8004986:	e04c      	b.n	8004a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d824      	bhi.n	80049da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	3b23      	subs	r3, #35	; 0x23
 80049a2:	221f      	movs	r2, #31
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43da      	mvns	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	400a      	ands	r2, r1
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4618      	mov	r0, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	3b23      	subs	r3, #35	; 0x23
 80049cc:	fa00 f203 	lsl.w	r2, r0, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
 80049d8:	e023      	b.n	8004a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	3b41      	subs	r3, #65	; 0x41
 80049ec:	221f      	movs	r2, #31
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	400a      	ands	r2, r1
 80049fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4618      	mov	r0, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	3b41      	subs	r3, #65	; 0x41
 8004a16:	fa00 f203 	lsl.w	r2, r0, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_ADC_ConfigChannel+0x234>)
 8004a24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <HAL_ADC_ConfigChannel+0x238>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d109      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x1cc>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b12      	cmp	r3, #18
 8004a36:	d105      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a19      	ldr	r2, [pc, #100]	; (8004ab0 <HAL_ADC_ConfigChannel+0x238>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d123      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x21e>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d003      	beq.n	8004a5e <HAL_ADC_ConfigChannel+0x1e6>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b11      	cmp	r3, #17
 8004a5c:	d11b      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d111      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <HAL_ADC_ConfigChannel+0x23c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <HAL_ADC_ConfigChannel+0x240>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	0c9a      	lsrs	r2, r3, #18
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a88:	e002      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f9      	bne.n	8004a8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40012300 	.word	0x40012300
 8004ab0:	40012000 	.word	0x40012000
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	431bde83 	.word	0x431bde83

08004abc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ac4:	4b79      	ldr	r3, [pc, #484]	; (8004cac <ADC_Init+0x1f0>)
 8004ac6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	021a      	lsls	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6899      	ldr	r1, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	4a58      	ldr	r2, [pc, #352]	; (8004cb0 <ADC_Init+0x1f4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d022      	beq.n	8004b9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6899      	ldr	r1, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	e00f      	b.n	8004bba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0202 	bic.w	r2, r2, #2
 8004bc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6899      	ldr	r1, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	7e1b      	ldrb	r3, [r3, #24]
 8004bd4:	005a      	lsls	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	3b01      	subs	r3, #1
 8004c14:	035a      	lsls	r2, r3, #13
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	e007      	b.n	8004c30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	051a      	lsls	r2, r3, #20
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c72:	025a      	lsls	r2, r3, #9
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6899      	ldr	r1, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	029a      	lsls	r2, r3, #10
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40012300 	.word	0x40012300
 8004cb0:	0f000001 	.word	0x0f000001

08004cb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d13c      	bne.n	8004d48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d12b      	bne.n	8004d40 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d127      	bne.n	8004d40 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d119      	bne.n	8004d40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0220 	bic.w	r2, r2, #32
 8004d1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f043 0201 	orr.w	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7fc fb7b 	bl	800143c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d46:	e00e      	b.n	8004d66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fd85 	bl	8004864 <HAL_ADC_ErrorCallback>
}
 8004d5a:	e004      	b.n	8004d66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff fd67 	bl	8004850 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2240      	movs	r2, #64	; 0x40
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f043 0204 	orr.w	r2, r3, #4
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fd5a 	bl	8004864 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <__NVIC_SetPriorityGrouping+0x44>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dea:	4a04      	ldr	r2, [pc, #16]	; (8004dfc <__NVIC_SetPriorityGrouping+0x44>)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	60d3      	str	r3, [r2, #12]
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	e000ed00 	.word	0xe000ed00

08004e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <__NVIC_GetPriorityGrouping+0x18>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	f003 0307 	and.w	r3, r3, #7
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	db0b      	blt.n	8004e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	f003 021f 	and.w	r2, r3, #31
 8004e34:	4907      	ldr	r1, [pc, #28]	; (8004e54 <__NVIC_EnableIRQ+0x38>)
 8004e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	e000e100 	.word	0xe000e100

08004e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	6039      	str	r1, [r7, #0]
 8004e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	db0a      	blt.n	8004e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	490c      	ldr	r1, [pc, #48]	; (8004ea4 <__NVIC_SetPriority+0x4c>)
 8004e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e80:	e00a      	b.n	8004e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	4908      	ldr	r1, [pc, #32]	; (8004ea8 <__NVIC_SetPriority+0x50>)
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	3b04      	subs	r3, #4
 8004e90:	0112      	lsls	r2, r2, #4
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	440b      	add	r3, r1
 8004e96:	761a      	strb	r2, [r3, #24]
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	e000e100 	.word	0xe000e100
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	; 0x24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f1c3 0307 	rsb	r3, r3, #7
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	bf28      	it	cs
 8004eca:	2304      	movcs	r3, #4
 8004ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	2b06      	cmp	r3, #6
 8004ed4:	d902      	bls.n	8004edc <NVIC_EncodePriority+0x30>
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	3b03      	subs	r3, #3
 8004eda:	e000      	b.n	8004ede <NVIC_EncodePriority+0x32>
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	43da      	mvns	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	401a      	ands	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	fa01 f303 	lsl.w	r3, r1, r3
 8004efe:	43d9      	mvns	r1, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f04:	4313      	orrs	r3, r2
         );
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3724      	adds	r7, #36	; 0x24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f24:	d301      	bcc.n	8004f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f26:	2301      	movs	r3, #1
 8004f28:	e00f      	b.n	8004f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <SysTick_Config+0x40>)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f32:	210f      	movs	r1, #15
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	f7ff ff8e 	bl	8004e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <SysTick_Config+0x40>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f42:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <SysTick_Config+0x40>)
 8004f44:	2207      	movs	r2, #7
 8004f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	e000e010 	.word	0xe000e010

08004f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff ff29 	bl	8004db8 <__NVIC_SetPriorityGrouping>
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b086      	sub	sp, #24
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	4603      	mov	r3, r0
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f80:	f7ff ff3e 	bl	8004e00 <__NVIC_GetPriorityGrouping>
 8004f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	6978      	ldr	r0, [r7, #20]
 8004f8c:	f7ff ff8e 	bl	8004eac <NVIC_EncodePriority>
 8004f90:	4602      	mov	r2, r0
 8004f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f96:	4611      	mov	r1, r2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ff5d 	bl	8004e58 <__NVIC_SetPriority>
}
 8004f9e:	bf00      	nop
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	4603      	mov	r3, r0
 8004fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff ff31 	bl	8004e1c <__NVIC_EnableIRQ>
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ffa2 	bl	8004f14 <SysTick_Config>
 8004fd0:	4603      	mov	r3, r0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fe8:	f7ff fa82 	bl	80044f0 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e099      	b.n	800512c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0201 	bic.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005018:	e00f      	b.n	800503a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800501a:	f7ff fa69 	bl	80044f0 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b05      	cmp	r3, #5
 8005026:	d908      	bls.n	800503a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2203      	movs	r2, #3
 8005032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e078      	b.n	800512c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e8      	bne.n	800501a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4b38      	ldr	r3, [pc, #224]	; (8005134 <HAL_DMA_Init+0x158>)
 8005054:	4013      	ands	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005066:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2b04      	cmp	r3, #4
 8005092:	d107      	bne.n	80050a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	4313      	orrs	r3, r2
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0307 	bic.w	r3, r3, #7
 80050ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d117      	bne.n	80050fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fadf 	bl	80056a4 <DMA_CheckFifoParam>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2240      	movs	r2, #64	; 0x40
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050fa:	2301      	movs	r3, #1
 80050fc:	e016      	b.n	800512c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa96 	bl	8005638 <DMA_CalcBaseAndBitshift>
 800510c:	4603      	mov	r3, r0
 800510e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	223f      	movs	r2, #63	; 0x3f
 8005116:	409a      	lsls	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	f010803f 	.word	0xf010803f

08005138 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_DMA_Start_IT+0x26>
 800515a:	2302      	movs	r3, #2
 800515c:	e040      	b.n	80051e0 <HAL_DMA_Start_IT+0xa8>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	d12f      	bne.n	80051d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fa28 	bl	80055dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005190:	223f      	movs	r2, #63	; 0x3f
 8005192:	409a      	lsls	r2, r3
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0216 	orr.w	r2, r2, #22
 80051a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0208 	orr.w	r2, r2, #8
 80051be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e005      	b.n	80051de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051da:	2302      	movs	r3, #2
 80051dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051f6:	f7ff f97b 	bl	80044f0 <HAL_GetTick>
 80051fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d008      	beq.n	800521a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e052      	b.n	80052c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0216 	bic.w	r2, r2, #22
 8005228:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695a      	ldr	r2, [r3, #20]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005238:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <HAL_DMA_Abort+0x62>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0208 	bic.w	r2, r2, #8
 8005258:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800526a:	e013      	b.n	8005294 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800526c:	f7ff f940 	bl	80044f0 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b05      	cmp	r3, #5
 8005278:	d90c      	bls.n	8005294 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2203      	movs	r2, #3
 800528c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e015      	b.n	80052c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e4      	bne.n	800526c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a6:	223f      	movs	r2, #63	; 0x3f
 80052a8:	409a      	lsls	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052d4:	4b92      	ldr	r3, [pc, #584]	; (8005520 <HAL_DMA_IRQHandler+0x258>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a92      	ldr	r2, [pc, #584]	; (8005524 <HAL_DMA_IRQHandler+0x25c>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0a9b      	lsrs	r3, r3, #10
 80052e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f2:	2208      	movs	r2, #8
 80052f4:	409a      	lsls	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01a      	beq.n	8005334 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d013      	beq.n	8005334 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0204 	bic.w	r2, r2, #4
 800531a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005320:	2208      	movs	r2, #8
 8005322:	409a      	lsls	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	f043 0201 	orr.w	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005338:	2201      	movs	r2, #1
 800533a:	409a      	lsls	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4013      	ands	r3, r2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d012      	beq.n	800536a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005356:	2201      	movs	r2, #1
 8005358:	409a      	lsls	r2, r3
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	f043 0202 	orr.w	r2, r3, #2
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	2204      	movs	r2, #4
 8005370:	409a      	lsls	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4013      	ands	r3, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d012      	beq.n	80053a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538c:	2204      	movs	r2, #4
 800538e:	409a      	lsls	r2, r3
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005398:	f043 0204 	orr.w	r2, r3, #4
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a4:	2210      	movs	r2, #16
 80053a6:	409a      	lsls	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d043      	beq.n	8005438 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d03c      	beq.n	8005438 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	2210      	movs	r2, #16
 80053c4:	409a      	lsls	r2, r3
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d018      	beq.n	800540a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d108      	bne.n	80053f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d024      	beq.n	8005438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
 80053f6:	e01f      	b.n	8005438 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01b      	beq.n	8005438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4798      	blx	r3
 8005408:	e016      	b.n	8005438 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0208 	bic.w	r2, r2, #8
 8005426:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543c:	2220      	movs	r2, #32
 800543e:	409a      	lsls	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 808e 	beq.w	8005566 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8086 	beq.w	8005566 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545e:	2220      	movs	r2, #32
 8005460:	409a      	lsls	r2, r3
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b05      	cmp	r3, #5
 8005470:	d136      	bne.n	80054e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0216 	bic.w	r2, r2, #22
 8005480:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005490:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <HAL_DMA_IRQHandler+0x1da>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0208 	bic.w	r2, r2, #8
 80054b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	223f      	movs	r2, #63	; 0x3f
 80054b8:	409a      	lsls	r2, r3
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d07d      	beq.n	80055d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
        }
        return;
 80054de:	e078      	b.n	80055d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d01c      	beq.n	8005528 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	2b00      	cmp	r3, #0
 8005502:	d030      	beq.n	8005566 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
 800550c:	e02b      	b.n	8005566 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d027      	beq.n	8005566 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4798      	blx	r3
 800551e:	e022      	b.n	8005566 <HAL_DMA_IRQHandler+0x29e>
 8005520:	20000000 	.word	0x20000000
 8005524:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10f      	bne.n	8005556 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0210 	bic.w	r2, r2, #16
 8005544:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556a:	2b00      	cmp	r3, #0
 800556c:	d032      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d022      	beq.n	80055c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2205      	movs	r2, #5
 800557e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	3301      	adds	r3, #1
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	429a      	cmp	r2, r3
 800559c:	d307      	bcc.n	80055ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f2      	bne.n	8005592 <HAL_DMA_IRQHandler+0x2ca>
 80055ac:	e000      	b.n	80055b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80055ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	4798      	blx	r3
 80055d0:	e000      	b.n	80055d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80055d2:	bf00      	nop
    }
  }
}
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop

080055dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b40      	cmp	r3, #64	; 0x40
 8005608:	d108      	bne.n	800561c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800561a:	e007      	b.n	800562c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	3b10      	subs	r3, #16
 8005648:	4a14      	ldr	r2, [pc, #80]	; (800569c <DMA_CalcBaseAndBitshift+0x64>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005652:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d909      	bls.n	800567a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800566e:	f023 0303 	bic.w	r3, r3, #3
 8005672:	1d1a      	adds	r2, r3, #4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	659a      	str	r2, [r3, #88]	; 0x58
 8005678:	e007      	b.n	800568a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	aaaaaaab 	.word	0xaaaaaaab
 80056a0:	0800db9c 	.word	0x0800db9c

080056a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d11f      	bne.n	80056fe <DMA_CheckFifoParam+0x5a>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d856      	bhi.n	8005772 <DMA_CheckFifoParam+0xce>
 80056c4:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <DMA_CheckFifoParam+0x28>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	080056ef 	.word	0x080056ef
 80056d4:	080056dd 	.word	0x080056dd
 80056d8:	08005773 	.word	0x08005773
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d046      	beq.n	8005776 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ec:	e043      	b.n	8005776 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056f6:	d140      	bne.n	800577a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fc:	e03d      	b.n	800577a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005706:	d121      	bne.n	800574c <DMA_CheckFifoParam+0xa8>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b03      	cmp	r3, #3
 800570c:	d837      	bhi.n	800577e <DMA_CheckFifoParam+0xda>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <DMA_CheckFifoParam+0x70>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005725 	.word	0x08005725
 8005718:	0800572b 	.word	0x0800572b
 800571c:	08005725 	.word	0x08005725
 8005720:	0800573d 	.word	0x0800573d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
      break;
 8005728:	e030      	b.n	800578c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d025      	beq.n	8005782 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800573a:	e022      	b.n	8005782 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005740:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005744:	d11f      	bne.n	8005786 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800574a:	e01c      	b.n	8005786 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d903      	bls.n	800575a <DMA_CheckFifoParam+0xb6>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d003      	beq.n	8005760 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005758:	e018      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	73fb      	strb	r3, [r7, #15]
      break;
 800575e:	e015      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00e      	beq.n	800578a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
      break;
 8005770:	e00b      	b.n	800578a <DMA_CheckFifoParam+0xe6>
      break;
 8005772:	bf00      	nop
 8005774:	e00a      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;
 8005776:	bf00      	nop
 8005778:	e008      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;
 800577a:	bf00      	nop
 800577c:	e006      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;
 800577e:	bf00      	nop
 8005780:	e004      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;
 8005782:	bf00      	nop
 8005784:	e002      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;   
 8005786:	bf00      	nop
 8005788:	e000      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;
 800578a:	bf00      	nop
    }
  } 
  
  return status; 
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop

0800579c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80057ae:	4b23      	ldr	r3, [pc, #140]	; (800583c <HAL_FLASH_Program+0xa0>)
 80057b0:	7e1b      	ldrb	r3, [r3, #24]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <HAL_FLASH_Program+0x1e>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e03b      	b.n	8005832 <HAL_FLASH_Program+0x96>
 80057ba:	4b20      	ldr	r3, [pc, #128]	; (800583c <HAL_FLASH_Program+0xa0>)
 80057bc:	2201      	movs	r2, #1
 80057be:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80057c4:	f000 f870 	bl	80058a8 <FLASH_WaitForLastOperation>
 80057c8:	4603      	mov	r3, r0
 80057ca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d12b      	bne.n	800582a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80057d8:	783b      	ldrb	r3, [r7, #0]
 80057da:	4619      	mov	r1, r3
 80057dc:	68b8      	ldr	r0, [r7, #8]
 80057de:	f000 f91b 	bl	8005a18 <FLASH_Program_Byte>
 80057e2:	e016      	b.n	8005812 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d105      	bne.n	80057f6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80057ea:	883b      	ldrh	r3, [r7, #0]
 80057ec:	4619      	mov	r1, r3
 80057ee:	68b8      	ldr	r0, [r7, #8]
 80057f0:	f000 f8ee 	bl	80059d0 <FLASH_Program_HalfWord>
 80057f4:	e00d      	b.n	8005812 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d105      	bne.n	8005808 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	4619      	mov	r1, r3
 8005800:	68b8      	ldr	r0, [r7, #8]
 8005802:	f000 f8c3 	bl	800598c <FLASH_Program_Word>
 8005806:	e004      	b.n	8005812 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800580c:	68b8      	ldr	r0, [r7, #8]
 800580e:	f000 f88b 	bl	8005928 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005812:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005816:	f000 f847 	bl	80058a8 <FLASH_WaitForLastOperation>
 800581a:	4603      	mov	r3, r0
 800581c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800581e:	4b08      	ldr	r3, [pc, #32]	; (8005840 <HAL_FLASH_Program+0xa4>)
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	4a07      	ldr	r2, [pc, #28]	; (8005840 <HAL_FLASH_Program+0xa4>)
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800582a:	4b04      	ldr	r3, [pc, #16]	; (800583c <HAL_FLASH_Program+0xa0>)
 800582c:	2200      	movs	r2, #0
 800582e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	200144a0 	.word	0x200144a0
 8005840:	40023c00 	.word	0x40023c00

08005844 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800584e:	4b0b      	ldr	r3, [pc, #44]	; (800587c <HAL_FLASH_Unlock+0x38>)
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	da0b      	bge.n	800586e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005856:	4b09      	ldr	r3, [pc, #36]	; (800587c <HAL_FLASH_Unlock+0x38>)
 8005858:	4a09      	ldr	r2, [pc, #36]	; (8005880 <HAL_FLASH_Unlock+0x3c>)
 800585a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800585c:	4b07      	ldr	r3, [pc, #28]	; (800587c <HAL_FLASH_Unlock+0x38>)
 800585e:	4a09      	ldr	r2, [pc, #36]	; (8005884 <HAL_FLASH_Unlock+0x40>)
 8005860:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005862:	4b06      	ldr	r3, [pc, #24]	; (800587c <HAL_FLASH_Unlock+0x38>)
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	da01      	bge.n	800586e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800586e:	79fb      	ldrb	r3, [r7, #7]
}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	40023c00 	.word	0x40023c00
 8005880:	45670123 	.word	0x45670123
 8005884:	cdef89ab 	.word	0xcdef89ab

08005888 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <HAL_FLASH_Lock+0x1c>)
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	4a04      	ldr	r2, [pc, #16]	; (80058a4 <HAL_FLASH_Lock+0x1c>)
 8005892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005896:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40023c00 	.word	0x40023c00

080058a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80058b4:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <FLASH_WaitForLastOperation+0x78>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80058ba:	f7fe fe19 	bl	80044f0 <HAL_GetTick>
 80058be:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80058c0:	e010      	b.n	80058e4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d00c      	beq.n	80058e4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <FLASH_WaitForLastOperation+0x38>
 80058d0:	f7fe fe0e 	bl	80044f0 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d201      	bcs.n	80058e4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e019      	b.n	8005918 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80058e4:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <FLASH_WaitForLastOperation+0x7c>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e8      	bne.n	80058c2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <FLASH_WaitForLastOperation+0x7c>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80058fc:	4b09      	ldr	r3, [pc, #36]	; (8005924 <FLASH_WaitForLastOperation+0x7c>)
 80058fe:	2201      	movs	r2, #1
 8005900:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <FLASH_WaitForLastOperation+0x7c>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800590e:	f000 f8a5 	bl	8005a5c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
  
}  
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	200144a0 	.word	0x200144a0
 8005924:	40023c00 	.word	0x40023c00

08005928 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005934:	4b14      	ldr	r3, [pc, #80]	; (8005988 <FLASH_Program_DoubleWord+0x60>)
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	4a13      	ldr	r2, [pc, #76]	; (8005988 <FLASH_Program_DoubleWord+0x60>)
 800593a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005940:	4b11      	ldr	r3, [pc, #68]	; (8005988 <FLASH_Program_DoubleWord+0x60>)
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	4a10      	ldr	r2, [pc, #64]	; (8005988 <FLASH_Program_DoubleWord+0x60>)
 8005946:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800594a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800594c:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <FLASH_Program_DoubleWord+0x60>)
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	4a0d      	ldr	r2, [pc, #52]	; (8005988 <FLASH_Program_DoubleWord+0x60>)
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800595e:	f3bf 8f6f 	isb	sy
}
 8005962:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005964:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	000a      	movs	r2, r1
 8005972:	2300      	movs	r3, #0
 8005974:	68f9      	ldr	r1, [r7, #12]
 8005976:	3104      	adds	r1, #4
 8005978:	4613      	mov	r3, r2
 800597a:	600b      	str	r3, [r1, #0]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	40023c00 	.word	0x40023c00

0800598c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <FLASH_Program_Word+0x40>)
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	4a0c      	ldr	r2, [pc, #48]	; (80059cc <FLASH_Program_Word+0x40>)
 800599c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80059a2:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <FLASH_Program_Word+0x40>)
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	4a09      	ldr	r2, [pc, #36]	; (80059cc <FLASH_Program_Word+0x40>)
 80059a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80059ae:	4b07      	ldr	r3, [pc, #28]	; (80059cc <FLASH_Program_Word+0x40>)
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	4a06      	ldr	r2, [pc, #24]	; (80059cc <FLASH_Program_Word+0x40>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	601a      	str	r2, [r3, #0]
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40023c00 	.word	0x40023c00

080059d0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <FLASH_Program_HalfWord+0x44>)
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	4a0c      	ldr	r2, [pc, #48]	; (8005a14 <FLASH_Program_HalfWord+0x44>)
 80059e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <FLASH_Program_HalfWord+0x44>)
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <FLASH_Program_HalfWord+0x44>)
 80059ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <FLASH_Program_HalfWord+0x44>)
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	4a06      	ldr	r2, [pc, #24]	; (8005a14 <FLASH_Program_HalfWord+0x44>)
 80059fa:	f043 0301 	orr.w	r3, r3, #1
 80059fe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	801a      	strh	r2, [r3, #0]
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40023c00 	.word	0x40023c00

08005a18 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a24:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <FLASH_Program_Byte+0x40>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	4a0b      	ldr	r2, [pc, #44]	; (8005a58 <FLASH_Program_Byte+0x40>)
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005a30:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <FLASH_Program_Byte+0x40>)
 8005a32:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <FLASH_Program_Byte+0x40>)
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005a38:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <FLASH_Program_Byte+0x40>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	4a06      	ldr	r2, [pc, #24]	; (8005a58 <FLASH_Program_Byte+0x40>)
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	78fa      	ldrb	r2, [r7, #3]
 8005a48:	701a      	strb	r2, [r3, #0]
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40023c00 	.word	0x40023c00

08005a5c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005a60:	4b27      	ldr	r3, [pc, #156]	; (8005b00 <FLASH_SetErrorCode+0xa4>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005a6c:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <FLASH_SetErrorCode+0xa8>)
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f043 0310 	orr.w	r3, r3, #16
 8005a74:	4a23      	ldr	r2, [pc, #140]	; (8005b04 <FLASH_SetErrorCode+0xa8>)
 8005a76:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005a78:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <FLASH_SetErrorCode+0xa4>)
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005a7e:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <FLASH_SetErrorCode+0xa4>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005a8a:	4b1e      	ldr	r3, [pc, #120]	; (8005b04 <FLASH_SetErrorCode+0xa8>)
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	f043 0308 	orr.w	r3, r3, #8
 8005a92:	4a1c      	ldr	r2, [pc, #112]	; (8005b04 <FLASH_SetErrorCode+0xa8>)
 8005a94:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005a96:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <FLASH_SetErrorCode+0xa4>)
 8005a98:	2220      	movs	r2, #32
 8005a9a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005a9c:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <FLASH_SetErrorCode+0xa4>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005aa8:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <FLASH_SetErrorCode+0xa8>)
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f043 0304 	orr.w	r3, r3, #4
 8005ab0:	4a14      	ldr	r2, [pc, #80]	; (8005b04 <FLASH_SetErrorCode+0xa8>)
 8005ab2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005ab4:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <FLASH_SetErrorCode+0xa4>)
 8005ab6:	2240      	movs	r2, #64	; 0x40
 8005ab8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005aba:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <FLASH_SetErrorCode+0xa4>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <FLASH_SetErrorCode+0xa8>)
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	4a0d      	ldr	r2, [pc, #52]	; (8005b04 <FLASH_SetErrorCode+0xa8>)
 8005ad0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <FLASH_SetErrorCode+0xa4>)
 8005ad4:	2280      	movs	r2, #128	; 0x80
 8005ad6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <FLASH_SetErrorCode+0xa4>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d008      	beq.n	8005af6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005ae4:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <FLASH_SetErrorCode+0xa8>)
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f043 0320 	orr.w	r3, r3, #32
 8005aec:	4a05      	ldr	r2, [pc, #20]	; (8005b04 <FLASH_SetErrorCode+0xa8>)
 8005aee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005af0:	4b03      	ldr	r3, [pc, #12]	; (8005b00 <FLASH_SetErrorCode+0xa4>)
 8005af2:	2202      	movs	r2, #2
 8005af4:	60da      	str	r2, [r3, #12]
  }
}
 8005af6:	bf00      	nop
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40023c00 	.word	0x40023c00
 8005b04:	200144a0 	.word	0x200144a0

08005b08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b1a:	4b31      	ldr	r3, [pc, #196]	; (8005be0 <HAL_FLASHEx_Erase+0xd8>)
 8005b1c:	7e1b      	ldrb	r3, [r3, #24]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_FLASHEx_Erase+0x1e>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e058      	b.n	8005bd8 <HAL_FLASHEx_Erase+0xd0>
 8005b26:	4b2e      	ldr	r3, [pc, #184]	; (8005be0 <HAL_FLASHEx_Erase+0xd8>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b30:	f7ff feba 	bl	80058a8 <FLASH_WaitForLastOperation>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d148      	bne.n	8005bd0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295
 8005b44:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d115      	bne.n	8005b7a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f000 f844 	bl	8005be8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b64:	f7ff fea0 	bl	80058a8 <FLASH_WaitForLastOperation>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005b6c:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <HAL_FLASHEx_Erase+0xdc>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <HAL_FLASHEx_Erase+0xdc>)
 8005b72:	f023 0304 	bic.w	r3, r3, #4
 8005b76:	6113      	str	r3, [r2, #16]
 8005b78:	e028      	b.n	8005bcc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	e01c      	b.n	8005bbc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	4619      	mov	r1, r3
 8005b8a:	68b8      	ldr	r0, [r7, #8]
 8005b8c:	f000 f850 	bl	8005c30 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b94:	f7ff fe88 	bl	80058a8 <FLASH_WaitForLastOperation>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005b9c:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <HAL_FLASHEx_Erase+0xdc>)
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <HAL_FLASHEx_Erase+0xdc>)
 8005ba2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005ba6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	601a      	str	r2, [r3, #0]
          break;
 8005bb4:	e00a      	b.n	8005bcc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60bb      	str	r3, [r7, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d3da      	bcc.n	8005b82 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8005bcc:	f000 f878 	bl	8005cc0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bd0:	4b03      	ldr	r3, [pc, #12]	; (8005be0 <HAL_FLASHEx_Erase+0xd8>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	761a      	strb	r2, [r3, #24]

  return status;
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	200144a0 	.word	0x200144a0
 8005be4:	40023c00 	.word	0x40023c00

08005be8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bf4:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <FLASH_MassErase+0x44>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <FLASH_MassErase+0x44>)
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <FLASH_MassErase+0x44>)
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <FLASH_MassErase+0x44>)
 8005c06:	f043 0304 	orr.w	r3, r3, #4
 8005c0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8005c0c:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <FLASH_MassErase+0x44>)
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	4313      	orrs	r3, r2
 8005c16:	4a05      	ldr	r2, [pc, #20]	; (8005c2c <FLASH_MassErase+0x44>)
 8005c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1c:	6113      	str	r3, [r2, #16]
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40023c00 	.word	0x40023c00

08005c30 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e010      	b.n	8005c6e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d103      	bne.n	8005c5a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e009      	b.n	8005c6e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d103      	bne.n	8005c68 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e002      	b.n	8005c6e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c6c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <FLASH_Erase_Sector+0x8c>)
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	4a12      	ldr	r2, [pc, #72]	; (8005cbc <FLASH_Erase_Sector+0x8c>)
 8005c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005c7a:	4b10      	ldr	r3, [pc, #64]	; (8005cbc <FLASH_Erase_Sector+0x8c>)
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	490f      	ldr	r1, [pc, #60]	; (8005cbc <FLASH_Erase_Sector+0x8c>)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005c86:	4b0d      	ldr	r3, [pc, #52]	; (8005cbc <FLASH_Erase_Sector+0x8c>)
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	4a0c      	ldr	r2, [pc, #48]	; (8005cbc <FLASH_Erase_Sector+0x8c>)
 8005c8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005c92:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <FLASH_Erase_Sector+0x8c>)
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <FLASH_Erase_Sector+0x8c>)
 8005c9e:	f043 0302 	orr.w	r3, r3, #2
 8005ca2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005ca4:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <FLASH_Erase_Sector+0x8c>)
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	4a04      	ldr	r2, [pc, #16]	; (8005cbc <FLASH_Erase_Sector+0x8c>)
 8005caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cae:	6113      	str	r3, [r2, #16]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	40023c00 	.word	0x40023c00

08005cc0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8005cc4:	4b20      	ldr	r3, [pc, #128]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d017      	beq.n	8005d00 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005cd0:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005cd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cda:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005cdc:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005ce2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a16      	ldr	r2, [pc, #88]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005cee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cf2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cf4:	4b14      	ldr	r3, [pc, #80]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cfe:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005d00:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d017      	beq.n	8005d3c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005d0c:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a0d      	ldr	r2, [pc, #52]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d16:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a0a      	ldr	r2, [pc, #40]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005d1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a07      	ldr	r2, [pc, #28]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d2e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <FLASH_FlushCaches+0x88>)
 8005d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d3a:	6013      	str	r3, [r2, #0]
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40023c00 	.word	0x40023c00

08005d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b089      	sub	sp, #36	; 0x24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	e16b      	b.n	8006040 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d68:	2201      	movs	r2, #1
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	f040 815a 	bne.w	800603a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d00b      	beq.n	8005da6 <HAL_GPIO_Init+0x5a>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d007      	beq.n	8005da6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d9a:	2b11      	cmp	r3, #17
 8005d9c:	d003      	beq.n	8005da6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b12      	cmp	r3, #18
 8005da4:	d130      	bne.n	8005e08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	2203      	movs	r2, #3
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ddc:	2201      	movs	r2, #1
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	4013      	ands	r3, r2
 8005dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	f003 0201 	and.w	r2, r3, #1
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	2203      	movs	r2, #3
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d003      	beq.n	8005e48 <HAL_GPIO_Init+0xfc>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b12      	cmp	r3, #18
 8005e46:	d123      	bne.n	8005e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	08da      	lsrs	r2, r3, #3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3208      	adds	r2, #8
 8005e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	220f      	movs	r2, #15
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	43db      	mvns	r3, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	08da      	lsrs	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3208      	adds	r2, #8
 8005e8a:	69b9      	ldr	r1, [r7, #24]
 8005e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f003 0203 	and.w	r2, r3, #3
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80b4 	beq.w	800603a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	4b60      	ldr	r3, [pc, #384]	; (8006058 <HAL_GPIO_Init+0x30c>)
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	4a5f      	ldr	r2, [pc, #380]	; (8006058 <HAL_GPIO_Init+0x30c>)
 8005edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ee2:	4b5d      	ldr	r3, [pc, #372]	; (8006058 <HAL_GPIO_Init+0x30c>)
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eee:	4a5b      	ldr	r2, [pc, #364]	; (800605c <HAL_GPIO_Init+0x310>)
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	089b      	lsrs	r3, r3, #2
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	220f      	movs	r2, #15
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a52      	ldr	r2, [pc, #328]	; (8006060 <HAL_GPIO_Init+0x314>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d02b      	beq.n	8005f72 <HAL_GPIO_Init+0x226>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a51      	ldr	r2, [pc, #324]	; (8006064 <HAL_GPIO_Init+0x318>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d025      	beq.n	8005f6e <HAL_GPIO_Init+0x222>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a50      	ldr	r2, [pc, #320]	; (8006068 <HAL_GPIO_Init+0x31c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d01f      	beq.n	8005f6a <HAL_GPIO_Init+0x21e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a4f      	ldr	r2, [pc, #316]	; (800606c <HAL_GPIO_Init+0x320>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d019      	beq.n	8005f66 <HAL_GPIO_Init+0x21a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a4e      	ldr	r2, [pc, #312]	; (8006070 <HAL_GPIO_Init+0x324>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d013      	beq.n	8005f62 <HAL_GPIO_Init+0x216>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a4d      	ldr	r2, [pc, #308]	; (8006074 <HAL_GPIO_Init+0x328>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d00d      	beq.n	8005f5e <HAL_GPIO_Init+0x212>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a4c      	ldr	r2, [pc, #304]	; (8006078 <HAL_GPIO_Init+0x32c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d007      	beq.n	8005f5a <HAL_GPIO_Init+0x20e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a4b      	ldr	r2, [pc, #300]	; (800607c <HAL_GPIO_Init+0x330>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d101      	bne.n	8005f56 <HAL_GPIO_Init+0x20a>
 8005f52:	2307      	movs	r3, #7
 8005f54:	e00e      	b.n	8005f74 <HAL_GPIO_Init+0x228>
 8005f56:	2308      	movs	r3, #8
 8005f58:	e00c      	b.n	8005f74 <HAL_GPIO_Init+0x228>
 8005f5a:	2306      	movs	r3, #6
 8005f5c:	e00a      	b.n	8005f74 <HAL_GPIO_Init+0x228>
 8005f5e:	2305      	movs	r3, #5
 8005f60:	e008      	b.n	8005f74 <HAL_GPIO_Init+0x228>
 8005f62:	2304      	movs	r3, #4
 8005f64:	e006      	b.n	8005f74 <HAL_GPIO_Init+0x228>
 8005f66:	2303      	movs	r3, #3
 8005f68:	e004      	b.n	8005f74 <HAL_GPIO_Init+0x228>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e002      	b.n	8005f74 <HAL_GPIO_Init+0x228>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <HAL_GPIO_Init+0x228>
 8005f72:	2300      	movs	r3, #0
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	f002 0203 	and.w	r2, r2, #3
 8005f7a:	0092      	lsls	r2, r2, #2
 8005f7c:	4093      	lsls	r3, r2
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f84:	4935      	ldr	r1, [pc, #212]	; (800605c <HAL_GPIO_Init+0x310>)
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	089b      	lsrs	r3, r3, #2
 8005f8a:	3302      	adds	r3, #2
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f92:	4b3b      	ldr	r3, [pc, #236]	; (8006080 <HAL_GPIO_Init+0x334>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	43db      	mvns	r3, r3
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fb6:	4a32      	ldr	r2, [pc, #200]	; (8006080 <HAL_GPIO_Init+0x334>)
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005fbc:	4b30      	ldr	r3, [pc, #192]	; (8006080 <HAL_GPIO_Init+0x334>)
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fe0:	4a27      	ldr	r2, [pc, #156]	; (8006080 <HAL_GPIO_Init+0x334>)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fe6:	4b26      	ldr	r3, [pc, #152]	; (8006080 <HAL_GPIO_Init+0x334>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	43db      	mvns	r3, r3
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800600a:	4a1d      	ldr	r2, [pc, #116]	; (8006080 <HAL_GPIO_Init+0x334>)
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006010:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <HAL_GPIO_Init+0x334>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4313      	orrs	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006034:	4a12      	ldr	r2, [pc, #72]	; (8006080 <HAL_GPIO_Init+0x334>)
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	3301      	adds	r3, #1
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2b0f      	cmp	r3, #15
 8006044:	f67f ae90 	bls.w	8005d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	3724      	adds	r7, #36	; 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40023800 	.word	0x40023800
 800605c:	40013800 	.word	0x40013800
 8006060:	40020000 	.word	0x40020000
 8006064:	40020400 	.word	0x40020400
 8006068:	40020800 	.word	0x40020800
 800606c:	40020c00 	.word	0x40020c00
 8006070:	40021000 	.word	0x40021000
 8006074:	40021400 	.word	0x40021400
 8006078:	40021800 	.word	0x40021800
 800607c:	40021c00 	.word	0x40021c00
 8006080:	40013c00 	.word	0x40013c00

08006084 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	887b      	ldrh	r3, [r7, #2]
 8006096:	4013      	ands	r3, r2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
 80060a0:	e001      	b.n	80060a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060a2:	2300      	movs	r3, #0
 80060a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	807b      	strh	r3, [r7, #2]
 80060c0:	4613      	mov	r3, r2
 80060c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060c4:	787b      	ldrb	r3, [r7, #1]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060ca:	887a      	ldrh	r2, [r7, #2]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060d0:	e003      	b.n	80060da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060d2:	887b      	ldrh	r3, [r7, #2]
 80060d4:	041a      	lsls	r2, r3, #16
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	619a      	str	r2, [r3, #24]
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e12b      	b.n	8006352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fd fdb2 	bl	8003c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2224      	movs	r2, #36	; 0x24
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0201 	bic.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800613a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800614a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800614c:	f000 fd52 	bl	8006bf4 <HAL_RCC_GetPCLK1Freq>
 8006150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4a81      	ldr	r2, [pc, #516]	; (800635c <HAL_I2C_Init+0x274>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d807      	bhi.n	800616c <HAL_I2C_Init+0x84>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4a80      	ldr	r2, [pc, #512]	; (8006360 <HAL_I2C_Init+0x278>)
 8006160:	4293      	cmp	r3, r2
 8006162:	bf94      	ite	ls
 8006164:	2301      	movls	r3, #1
 8006166:	2300      	movhi	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	e006      	b.n	800617a <HAL_I2C_Init+0x92>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4a7d      	ldr	r2, [pc, #500]	; (8006364 <HAL_I2C_Init+0x27c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	bf94      	ite	ls
 8006174:	2301      	movls	r3, #1
 8006176:	2300      	movhi	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e0e7      	b.n	8006352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a78      	ldr	r2, [pc, #480]	; (8006368 <HAL_I2C_Init+0x280>)
 8006186:	fba2 2303 	umull	r2, r3, r2, r3
 800618a:	0c9b      	lsrs	r3, r3, #18
 800618c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4a6a      	ldr	r2, [pc, #424]	; (800635c <HAL_I2C_Init+0x274>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d802      	bhi.n	80061bc <HAL_I2C_Init+0xd4>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	3301      	adds	r3, #1
 80061ba:	e009      	b.n	80061d0 <HAL_I2C_Init+0xe8>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061c2:	fb02 f303 	mul.w	r3, r2, r3
 80061c6:	4a69      	ldr	r2, [pc, #420]	; (800636c <HAL_I2C_Init+0x284>)
 80061c8:	fba2 2303 	umull	r2, r3, r2, r3
 80061cc:	099b      	lsrs	r3, r3, #6
 80061ce:	3301      	adds	r3, #1
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80061e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	495c      	ldr	r1, [pc, #368]	; (800635c <HAL_I2C_Init+0x274>)
 80061ec:	428b      	cmp	r3, r1
 80061ee:	d819      	bhi.n	8006224 <HAL_I2C_Init+0x13c>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	1e59      	subs	r1, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80061fe:	1c59      	adds	r1, r3, #1
 8006200:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006204:	400b      	ands	r3, r1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_I2C_Init+0x138>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	1e59      	subs	r1, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	fbb1 f3f3 	udiv	r3, r1, r3
 8006218:	3301      	adds	r3, #1
 800621a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800621e:	e051      	b.n	80062c4 <HAL_I2C_Init+0x1dc>
 8006220:	2304      	movs	r3, #4
 8006222:	e04f      	b.n	80062c4 <HAL_I2C_Init+0x1dc>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d111      	bne.n	8006250 <HAL_I2C_Init+0x168>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1e58      	subs	r0, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6859      	ldr	r1, [r3, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	440b      	add	r3, r1
 800623a:	fbb0 f3f3 	udiv	r3, r0, r3
 800623e:	3301      	adds	r3, #1
 8006240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006244:	2b00      	cmp	r3, #0
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	e012      	b.n	8006276 <HAL_I2C_Init+0x18e>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	1e58      	subs	r0, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6859      	ldr	r1, [r3, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	0099      	lsls	r1, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	fbb0 f3f3 	udiv	r3, r0, r3
 8006266:	3301      	adds	r3, #1
 8006268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626c:	2b00      	cmp	r3, #0
 800626e:	bf0c      	ite	eq
 8006270:	2301      	moveq	r3, #1
 8006272:	2300      	movne	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <HAL_I2C_Init+0x196>
 800627a:	2301      	movs	r3, #1
 800627c:	e022      	b.n	80062c4 <HAL_I2C_Init+0x1dc>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10e      	bne.n	80062a4 <HAL_I2C_Init+0x1bc>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1e58      	subs	r0, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6859      	ldr	r1, [r3, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	440b      	add	r3, r1
 8006294:	fbb0 f3f3 	udiv	r3, r0, r3
 8006298:	3301      	adds	r3, #1
 800629a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a2:	e00f      	b.n	80062c4 <HAL_I2C_Init+0x1dc>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	1e58      	subs	r0, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6859      	ldr	r1, [r3, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	0099      	lsls	r1, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ba:	3301      	adds	r3, #1
 80062bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	6809      	ldr	r1, [r1, #0]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69da      	ldr	r2, [r3, #28]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80062f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6911      	ldr	r1, [r2, #16]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68d2      	ldr	r2, [r2, #12]
 80062fe:	4311      	orrs	r1, r2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	430b      	orrs	r3, r1
 8006306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	000186a0 	.word	0x000186a0
 8006360:	001e847f 	.word	0x001e847f
 8006364:	003d08ff 	.word	0x003d08ff
 8006368:	431bde83 	.word	0x431bde83
 800636c:	10624dd3 	.word	0x10624dd3

08006370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e25b      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d075      	beq.n	800647a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800638e:	4ba3      	ldr	r3, [pc, #652]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 030c 	and.w	r3, r3, #12
 8006396:	2b04      	cmp	r3, #4
 8006398:	d00c      	beq.n	80063b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800639a:	4ba0      	ldr	r3, [pc, #640]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063a2:	2b08      	cmp	r3, #8
 80063a4:	d112      	bne.n	80063cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063a6:	4b9d      	ldr	r3, [pc, #628]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063b2:	d10b      	bne.n	80063cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b4:	4b99      	ldr	r3, [pc, #612]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d05b      	beq.n	8006478 <HAL_RCC_OscConfig+0x108>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d157      	bne.n	8006478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e236      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d4:	d106      	bne.n	80063e4 <HAL_RCC_OscConfig+0x74>
 80063d6:	4b91      	ldr	r3, [pc, #580]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a90      	ldr	r2, [pc, #576]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	e01d      	b.n	8006420 <HAL_RCC_OscConfig+0xb0>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ec:	d10c      	bne.n	8006408 <HAL_RCC_OscConfig+0x98>
 80063ee:	4b8b      	ldr	r3, [pc, #556]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a8a      	ldr	r2, [pc, #552]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	4b88      	ldr	r3, [pc, #544]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a87      	ldr	r2, [pc, #540]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 8006400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	e00b      	b.n	8006420 <HAL_RCC_OscConfig+0xb0>
 8006408:	4b84      	ldr	r3, [pc, #528]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a83      	ldr	r2, [pc, #524]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 800640e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	4b81      	ldr	r3, [pc, #516]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a80      	ldr	r2, [pc, #512]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 800641a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800641e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d013      	beq.n	8006450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006428:	f7fe f862 	bl	80044f0 <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006430:	f7fe f85e 	bl	80044f0 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b64      	cmp	r3, #100	; 0x64
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e1fb      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006442:	4b76      	ldr	r3, [pc, #472]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0f0      	beq.n	8006430 <HAL_RCC_OscConfig+0xc0>
 800644e:	e014      	b.n	800647a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006450:	f7fe f84e 	bl	80044f0 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006458:	f7fe f84a 	bl	80044f0 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b64      	cmp	r3, #100	; 0x64
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e1e7      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646a:	4b6c      	ldr	r3, [pc, #432]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f0      	bne.n	8006458 <HAL_RCC_OscConfig+0xe8>
 8006476:	e000      	b.n	800647a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d063      	beq.n	800654e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006486:	4b65      	ldr	r3, [pc, #404]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006492:	4b62      	ldr	r3, [pc, #392]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800649a:	2b08      	cmp	r3, #8
 800649c:	d11c      	bne.n	80064d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800649e:	4b5f      	ldr	r3, [pc, #380]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d116      	bne.n	80064d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064aa:	4b5c      	ldr	r3, [pc, #368]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <HAL_RCC_OscConfig+0x152>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d001      	beq.n	80064c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e1bb      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c2:	4b56      	ldr	r3, [pc, #344]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4952      	ldr	r1, [pc, #328]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064d6:	e03a      	b.n	800654e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d020      	beq.n	8006522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e0:	4b4f      	ldr	r3, [pc, #316]	; (8006620 <HAL_RCC_OscConfig+0x2b0>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e6:	f7fe f803 	bl	80044f0 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ec:	e008      	b.n	8006500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ee:	f7fd ffff 	bl	80044f0 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e19c      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006500:	4b46      	ldr	r3, [pc, #280]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0f0      	beq.n	80064ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800650c:	4b43      	ldr	r3, [pc, #268]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	4940      	ldr	r1, [pc, #256]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]
 8006520:	e015      	b.n	800654e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006522:	4b3f      	ldr	r3, [pc, #252]	; (8006620 <HAL_RCC_OscConfig+0x2b0>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fd ffe2 	bl	80044f0 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006530:	f7fd ffde 	bl	80044f0 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e17b      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006542:	4b36      	ldr	r3, [pc, #216]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d030      	beq.n	80065bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d016      	beq.n	8006590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006562:	4b30      	ldr	r3, [pc, #192]	; (8006624 <HAL_RCC_OscConfig+0x2b4>)
 8006564:	2201      	movs	r2, #1
 8006566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006568:	f7fd ffc2 	bl	80044f0 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006570:	f7fd ffbe 	bl	80044f0 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e15b      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006582:	4b26      	ldr	r3, [pc, #152]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 8006584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0x200>
 800658e:	e015      	b.n	80065bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006590:	4b24      	ldr	r3, [pc, #144]	; (8006624 <HAL_RCC_OscConfig+0x2b4>)
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006596:	f7fd ffab 	bl	80044f0 <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800659e:	f7fd ffa7 	bl	80044f0 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e144      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b0:	4b1a      	ldr	r3, [pc, #104]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80065b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1f0      	bne.n	800659e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80a0 	beq.w	800670a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ca:	2300      	movs	r3, #0
 80065cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ce:	4b13      	ldr	r3, [pc, #76]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10f      	bne.n	80065fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065da:	2300      	movs	r3, #0
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	4b0f      	ldr	r3, [pc, #60]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	4a0e      	ldr	r2, [pc, #56]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80065e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e8:	6413      	str	r3, [r2, #64]	; 0x40
 80065ea:	4b0c      	ldr	r3, [pc, #48]	; (800661c <HAL_RCC_OscConfig+0x2ac>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f6:	2301      	movs	r3, #1
 80065f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_RCC_OscConfig+0x2b8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006602:	2b00      	cmp	r3, #0
 8006604:	d121      	bne.n	800664a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <HAL_RCC_OscConfig+0x2b8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a07      	ldr	r2, [pc, #28]	; (8006628 <HAL_RCC_OscConfig+0x2b8>)
 800660c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006612:	f7fd ff6d 	bl	80044f0 <HAL_GetTick>
 8006616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006618:	e011      	b.n	800663e <HAL_RCC_OscConfig+0x2ce>
 800661a:	bf00      	nop
 800661c:	40023800 	.word	0x40023800
 8006620:	42470000 	.word	0x42470000
 8006624:	42470e80 	.word	0x42470e80
 8006628:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800662c:	f7fd ff60 	bl	80044f0 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e0fd      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663e:	4b81      	ldr	r3, [pc, #516]	; (8006844 <HAL_RCC_OscConfig+0x4d4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d106      	bne.n	8006660 <HAL_RCC_OscConfig+0x2f0>
 8006652:	4b7d      	ldr	r3, [pc, #500]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 8006654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006656:	4a7c      	ldr	r2, [pc, #496]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	6713      	str	r3, [r2, #112]	; 0x70
 800665e:	e01c      	b.n	800669a <HAL_RCC_OscConfig+0x32a>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b05      	cmp	r3, #5
 8006666:	d10c      	bne.n	8006682 <HAL_RCC_OscConfig+0x312>
 8006668:	4b77      	ldr	r3, [pc, #476]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	4a76      	ldr	r2, [pc, #472]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 800666e:	f043 0304 	orr.w	r3, r3, #4
 8006672:	6713      	str	r3, [r2, #112]	; 0x70
 8006674:	4b74      	ldr	r3, [pc, #464]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 8006676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006678:	4a73      	ldr	r2, [pc, #460]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	6713      	str	r3, [r2, #112]	; 0x70
 8006680:	e00b      	b.n	800669a <HAL_RCC_OscConfig+0x32a>
 8006682:	4b71      	ldr	r3, [pc, #452]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	4a70      	ldr	r2, [pc, #448]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	6713      	str	r3, [r2, #112]	; 0x70
 800668e:	4b6e      	ldr	r3, [pc, #440]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	4a6d      	ldr	r2, [pc, #436]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 8006694:	f023 0304 	bic.w	r3, r3, #4
 8006698:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d015      	beq.n	80066ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a2:	f7fd ff25 	bl	80044f0 <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a8:	e00a      	b.n	80066c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066aa:	f7fd ff21 	bl	80044f0 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e0bc      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c0:	4b61      	ldr	r3, [pc, #388]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 80066c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0ee      	beq.n	80066aa <HAL_RCC_OscConfig+0x33a>
 80066cc:	e014      	b.n	80066f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ce:	f7fd ff0f 	bl	80044f0 <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d4:	e00a      	b.n	80066ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d6:	f7fd ff0b 	bl	80044f0 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e0a6      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ec:	4b56      	ldr	r3, [pc, #344]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 80066ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1ee      	bne.n	80066d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d105      	bne.n	800670a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fe:	4b52      	ldr	r3, [pc, #328]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	4a51      	ldr	r2, [pc, #324]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 8006704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006708:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 8092 	beq.w	8006838 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006714:	4b4c      	ldr	r3, [pc, #304]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b08      	cmp	r3, #8
 800671e:	d05c      	beq.n	80067da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d141      	bne.n	80067ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006728:	4b48      	ldr	r3, [pc, #288]	; (800684c <HAL_RCC_OscConfig+0x4dc>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672e:	f7fd fedf 	bl	80044f0 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006736:	f7fd fedb 	bl	80044f0 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e078      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006748:	4b3f      	ldr	r3, [pc, #252]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f0      	bne.n	8006736 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	019b      	lsls	r3, r3, #6
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	3b01      	subs	r3, #1
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	061b      	lsls	r3, r3, #24
 8006778:	4933      	ldr	r1, [pc, #204]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 800677a:	4313      	orrs	r3, r2
 800677c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800677e:	4b33      	ldr	r3, [pc, #204]	; (800684c <HAL_RCC_OscConfig+0x4dc>)
 8006780:	2201      	movs	r2, #1
 8006782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006784:	f7fd feb4 	bl	80044f0 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800678c:	f7fd feb0 	bl	80044f0 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e04d      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679e:	4b2a      	ldr	r3, [pc, #168]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0x41c>
 80067aa:	e045      	b.n	8006838 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ac:	4b27      	ldr	r3, [pc, #156]	; (800684c <HAL_RCC_OscConfig+0x4dc>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b2:	f7fd fe9d 	bl	80044f0 <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ba:	f7fd fe99 	bl	80044f0 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e036      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067cc:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1f0      	bne.n	80067ba <HAL_RCC_OscConfig+0x44a>
 80067d8:	e02e      	b.n	8006838 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e029      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <HAL_RCC_OscConfig+0x4d8>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d11c      	bne.n	8006834 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006804:	429a      	cmp	r2, r3
 8006806:	d115      	bne.n	8006834 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800680e:	4013      	ands	r3, r2
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006814:	4293      	cmp	r3, r2
 8006816:	d10d      	bne.n	8006834 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006822:	429a      	cmp	r2, r3
 8006824:	d106      	bne.n	8006834 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40007000 	.word	0x40007000
 8006848:	40023800 	.word	0x40023800
 800684c:	42470060 	.word	0x42470060

08006850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e0cc      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006864:	4b68      	ldr	r3, [pc, #416]	; (8006a08 <HAL_RCC_ClockConfig+0x1b8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d90c      	bls.n	800688c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006872:	4b65      	ldr	r3, [pc, #404]	; (8006a08 <HAL_RCC_ClockConfig+0x1b8>)
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800687a:	4b63      	ldr	r3, [pc, #396]	; (8006a08 <HAL_RCC_ClockConfig+0x1b8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d001      	beq.n	800688c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0b8      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d020      	beq.n	80068da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068a4:	4b59      	ldr	r3, [pc, #356]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	4a58      	ldr	r2, [pc, #352]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068bc:	4b53      	ldr	r3, [pc, #332]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	4a52      	ldr	r2, [pc, #328]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c8:	4b50      	ldr	r3, [pc, #320]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	494d      	ldr	r1, [pc, #308]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d044      	beq.n	8006970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d107      	bne.n	80068fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ee:	4b47      	ldr	r3, [pc, #284]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d119      	bne.n	800692e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e07f      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d003      	beq.n	800690e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800690a:	2b03      	cmp	r3, #3
 800690c:	d107      	bne.n	800691e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800690e:	4b3f      	ldr	r3, [pc, #252]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e06f      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800691e:	4b3b      	ldr	r3, [pc, #236]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e067      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800692e:	4b37      	ldr	r3, [pc, #220]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f023 0203 	bic.w	r2, r3, #3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	4934      	ldr	r1, [pc, #208]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 800693c:	4313      	orrs	r3, r2
 800693e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006940:	f7fd fdd6 	bl	80044f0 <HAL_GetTick>
 8006944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006946:	e00a      	b.n	800695e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006948:	f7fd fdd2 	bl	80044f0 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	f241 3288 	movw	r2, #5000	; 0x1388
 8006956:	4293      	cmp	r3, r2
 8006958:	d901      	bls.n	800695e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e04f      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800695e:	4b2b      	ldr	r3, [pc, #172]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 020c 	and.w	r2, r3, #12
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	429a      	cmp	r2, r3
 800696e:	d1eb      	bne.n	8006948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <HAL_RCC_ClockConfig+0x1b8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d20c      	bcs.n	8006998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800697e:	4b22      	ldr	r3, [pc, #136]	; (8006a08 <HAL_RCC_ClockConfig+0x1b8>)
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <HAL_RCC_ClockConfig+0x1b8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d001      	beq.n	8006998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e032      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d008      	beq.n	80069b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069a4:	4b19      	ldr	r3, [pc, #100]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	4916      	ldr	r1, [pc, #88]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069c2:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	490e      	ldr	r1, [pc, #56]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069d6:	f000 f821 	bl	8006a1c <HAL_RCC_GetSysClockFreq>
 80069da:	4602      	mov	r2, r0
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <HAL_RCC_ClockConfig+0x1bc>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	091b      	lsrs	r3, r3, #4
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	490a      	ldr	r1, [pc, #40]	; (8006a10 <HAL_RCC_ClockConfig+0x1c0>)
 80069e8:	5ccb      	ldrb	r3, [r1, r3]
 80069ea:	fa22 f303 	lsr.w	r3, r2, r3
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <HAL_RCC_ClockConfig+0x1c4>)
 80069f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <HAL_RCC_ClockConfig+0x1c8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fd fd36 	bl	8004468 <HAL_InitTick>

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40023c00 	.word	0x40023c00
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	0800db84 	.word	0x0800db84
 8006a14:	20000000 	.word	0x20000000
 8006a18:	20000004 	.word	0x20000004

08006a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a34:	4b67      	ldr	r3, [pc, #412]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 030c 	and.w	r3, r3, #12
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d00d      	beq.n	8006a5c <HAL_RCC_GetSysClockFreq+0x40>
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	f200 80bd 	bhi.w	8006bc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HAL_RCC_GetSysClockFreq+0x34>
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d003      	beq.n	8006a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a4e:	e0b7      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a50:	4b61      	ldr	r3, [pc, #388]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a52:	60bb      	str	r3, [r7, #8]
       break;
 8006a54:	e0b7      	b.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a56:	4b60      	ldr	r3, [pc, #384]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a58:	60bb      	str	r3, [r7, #8]
      break;
 8006a5a:	e0b4      	b.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a5c:	4b5d      	ldr	r3, [pc, #372]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a66:	4b5b      	ldr	r3, [pc, #364]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d04d      	beq.n	8006b0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a72:	4b58      	ldr	r3, [pc, #352]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f04f 0300 	mov.w	r3, #0
 8006a7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a82:	f04f 0100 	mov.w	r1, #0
 8006a86:	ea02 0800 	and.w	r8, r2, r0
 8006a8a:	ea03 0901 	and.w	r9, r3, r1
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	014b      	lsls	r3, r1, #5
 8006a9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006aa0:	0142      	lsls	r2, r0, #5
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	ebb0 0008 	subs.w	r0, r0, r8
 8006aaa:	eb61 0109 	sbc.w	r1, r1, r9
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	018b      	lsls	r3, r1, #6
 8006ab8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006abc:	0182      	lsls	r2, r0, #6
 8006abe:	1a12      	subs	r2, r2, r0
 8006ac0:	eb63 0301 	sbc.w	r3, r3, r1
 8006ac4:	f04f 0000 	mov.w	r0, #0
 8006ac8:	f04f 0100 	mov.w	r1, #0
 8006acc:	00d9      	lsls	r1, r3, #3
 8006ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ad2:	00d0      	lsls	r0, r2, #3
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	eb12 0208 	adds.w	r2, r2, r8
 8006adc:	eb43 0309 	adc.w	r3, r3, r9
 8006ae0:	f04f 0000 	mov.w	r0, #0
 8006ae4:	f04f 0100 	mov.w	r1, #0
 8006ae8:	0299      	lsls	r1, r3, #10
 8006aea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006aee:	0290      	lsls	r0, r2, #10
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4610      	mov	r0, r2
 8006af6:	4619      	mov	r1, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	461a      	mov	r2, r3
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	f7fa f8c2 	bl	8000c88 <__aeabi_uldivmod>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4613      	mov	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e04a      	b.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b0e:	4b31      	ldr	r3, [pc, #196]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	099b      	lsrs	r3, r3, #6
 8006b14:	461a      	mov	r2, r3
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b1e:	f04f 0100 	mov.w	r1, #0
 8006b22:	ea02 0400 	and.w	r4, r2, r0
 8006b26:	ea03 0501 	and.w	r5, r3, r1
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	014b      	lsls	r3, r1, #5
 8006b38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b3c:	0142      	lsls	r2, r0, #5
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4619      	mov	r1, r3
 8006b42:	1b00      	subs	r0, r0, r4
 8006b44:	eb61 0105 	sbc.w	r1, r1, r5
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	f04f 0300 	mov.w	r3, #0
 8006b50:	018b      	lsls	r3, r1, #6
 8006b52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b56:	0182      	lsls	r2, r0, #6
 8006b58:	1a12      	subs	r2, r2, r0
 8006b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8006b5e:	f04f 0000 	mov.w	r0, #0
 8006b62:	f04f 0100 	mov.w	r1, #0
 8006b66:	00d9      	lsls	r1, r3, #3
 8006b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b6c:	00d0      	lsls	r0, r2, #3
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	1912      	adds	r2, r2, r4
 8006b74:	eb45 0303 	adc.w	r3, r5, r3
 8006b78:	f04f 0000 	mov.w	r0, #0
 8006b7c:	f04f 0100 	mov.w	r1, #0
 8006b80:	0299      	lsls	r1, r3, #10
 8006b82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006b86:	0290      	lsls	r0, r2, #10
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4619      	mov	r1, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	461a      	mov	r2, r3
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	f7fa f876 	bl	8000c88 <__aeabi_uldivmod>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	0c1b      	lsrs	r3, r3, #16
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	3301      	adds	r3, #1
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbc:	60bb      	str	r3, [r7, #8]
      break;
 8006bbe:	e002      	b.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006bc2:	60bb      	str	r3, [r7, #8]
      break;
 8006bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	00f42400 	.word	0x00f42400

08006bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006be0:	4b03      	ldr	r3, [pc, #12]	; (8006bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006be2:	681b      	ldr	r3, [r3, #0]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	20000000 	.word	0x20000000

08006bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bf8:	f7ff fff0 	bl	8006bdc <HAL_RCC_GetHCLKFreq>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	0a9b      	lsrs	r3, r3, #10
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	4903      	ldr	r1, [pc, #12]	; (8006c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c0a:	5ccb      	ldrb	r3, [r1, r3]
 8006c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40023800 	.word	0x40023800
 8006c18:	0800db94 	.word	0x0800db94

08006c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c20:	f7ff ffdc 	bl	8006bdc <HAL_RCC_GetHCLKFreq>
 8006c24:	4602      	mov	r2, r0
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	0b5b      	lsrs	r3, r3, #13
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	4903      	ldr	r1, [pc, #12]	; (8006c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c32:	5ccb      	ldrb	r3, [r1, r3]
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	0800db94 	.word	0x0800db94

08006c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e056      	b.n	8006d04 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d106      	bne.n	8006c76 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7fd f849 	bl	8003d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	ea42 0103 	orr.w	r1, r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	0c1b      	lsrs	r3, r3, #16
 8006cd4:	f003 0104 	and.w	r1, r3, #4
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69da      	ldr	r2, [r3, #28]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_SPI_Transmit+0x22>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e11e      	b.n	8006f6c <HAL_SPI_Transmit+0x260>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d36:	f7fd fbdb 	bl	80044f0 <HAL_GetTick>
 8006d3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d002      	beq.n	8006d52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d50:	e103      	b.n	8006f5a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <HAL_SPI_Transmit+0x52>
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d62:	e0fa      	b.n	8006f5a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2203      	movs	r2, #3
 8006d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	88fa      	ldrh	r2, [r7, #6]
 8006d7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	88fa      	ldrh	r2, [r7, #6]
 8006d82:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006daa:	d107      	bne.n	8006dbc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc6:	2b40      	cmp	r3, #64	; 0x40
 8006dc8:	d007      	beq.n	8006dda <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de2:	d14b      	bne.n	8006e7c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <HAL_SPI_Transmit+0xe6>
 8006dec:	8afb      	ldrh	r3, [r7, #22]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d13e      	bne.n	8006e70 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df6:	881a      	ldrh	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	1c9a      	adds	r2, r3, #2
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e16:	e02b      	b.n	8006e70 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d112      	bne.n	8006e4c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	881a      	ldrh	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	1c9a      	adds	r2, r3, #2
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e4a:	e011      	b.n	8006e70 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e4c:	f7fd fb50 	bl	80044f0 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d803      	bhi.n	8006e64 <HAL_SPI_Transmit+0x158>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d102      	bne.n	8006e6a <HAL_SPI_Transmit+0x15e>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d102      	bne.n	8006e70 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e6e:	e074      	b.n	8006f5a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1ce      	bne.n	8006e18 <HAL_SPI_Transmit+0x10c>
 8006e7a:	e04c      	b.n	8006f16 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <HAL_SPI_Transmit+0x17e>
 8006e84:	8afb      	ldrh	r3, [r7, #22]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d140      	bne.n	8006f0c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	330c      	adds	r3, #12
 8006e94:	7812      	ldrb	r2, [r2, #0]
 8006e96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006eb0:	e02c      	b.n	8006f0c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d113      	bne.n	8006ee8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	7812      	ldrb	r2, [r2, #0]
 8006ecc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ee6:	e011      	b.n	8006f0c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ee8:	f7fd fb02 	bl	80044f0 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d803      	bhi.n	8006f00 <HAL_SPI_Transmit+0x1f4>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efe:	d102      	bne.n	8006f06 <HAL_SPI_Transmit+0x1fa>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d102      	bne.n	8006f0c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f0a:	e026      	b.n	8006f5a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1cd      	bne.n	8006eb2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 fba4 	bl	8007668 <SPI_EndRxTxTransaction>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f34:	2300      	movs	r3, #0
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	77fb      	strb	r3, [r7, #31]
 8006f56:	e000      	b.n	8006f5a <HAL_SPI_Transmit+0x24e>
  }

error:
 8006f58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3720      	adds	r7, #32
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f90:	d112      	bne.n	8006fb8 <HAL_SPI_Receive+0x44>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10e      	bne.n	8006fb8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f8e9 	bl	8007186 <HAL_SPI_TransmitReceive>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	e0e2      	b.n	800717e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_SPI_Receive+0x52>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e0db      	b.n	800717e <HAL_SPI_Receive+0x20a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fce:	f7fd fa8f 	bl	80044f0 <HAL_GetTick>
 8006fd2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d002      	beq.n	8006fe6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fe4:	e0c2      	b.n	800716c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <HAL_SPI_Receive+0x7e>
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ff6:	e0b9      	b.n	800716c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2204      	movs	r2, #4
 8006ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	88fa      	ldrh	r2, [r7, #6]
 8007010:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	88fa      	ldrh	r2, [r7, #6]
 8007016:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800703e:	d107      	bne.n	8007050 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800704e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705a:	2b40      	cmp	r3, #64	; 0x40
 800705c:	d007      	beq.n	800706e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800706c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d162      	bne.n	800713c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007076:	e02e      	b.n	80070d6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b01      	cmp	r3, #1
 8007084:	d115      	bne.n	80070b2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f103 020c 	add.w	r2, r3, #12
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	7812      	ldrb	r2, [r2, #0]
 8007094:	b2d2      	uxtb	r2, r2
 8007096:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070b0:	e011      	b.n	80070d6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070b2:	f7fd fa1d 	bl	80044f0 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d803      	bhi.n	80070ca <HAL_SPI_Receive+0x156>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d102      	bne.n	80070d0 <HAL_SPI_Receive+0x15c>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070d4:	e04a      	b.n	800716c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070da:	b29b      	uxth	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1cb      	bne.n	8007078 <HAL_SPI_Receive+0x104>
 80070e0:	e031      	b.n	8007146 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d113      	bne.n	8007118 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	b292      	uxth	r2, r2
 80070fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	1c9a      	adds	r2, r3, #2
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710c:	b29b      	uxth	r3, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007116:	e011      	b.n	800713c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007118:	f7fd f9ea 	bl	80044f0 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	429a      	cmp	r2, r3
 8007126:	d803      	bhi.n	8007130 <HAL_SPI_Receive+0x1bc>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712e:	d102      	bne.n	8007136 <HAL_SPI_Receive+0x1c2>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d102      	bne.n	800713c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	75fb      	strb	r3, [r7, #23]
          goto error;
 800713a:	e017      	b.n	800716c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1cd      	bne.n	80070e2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fa27 	bl	800759e <SPI_EndRxTransaction>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2220      	movs	r2, #32
 800715a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	75fb      	strb	r3, [r7, #23]
 8007168:	e000      	b.n	800716c <HAL_SPI_Receive+0x1f8>
  }

error :
 800716a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b08c      	sub	sp, #48	; 0x30
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007194:	2301      	movs	r3, #1
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_SPI_TransmitReceive+0x26>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e18a      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x33c>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071b4:	f7fd f99c 	bl	80044f0 <HAL_GetTick>
 80071b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80071ca:	887b      	ldrh	r3, [r7, #2]
 80071cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d00f      	beq.n	80071f6 <HAL_SPI_TransmitReceive+0x70>
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071dc:	d107      	bne.n	80071ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d103      	bne.n	80071ee <HAL_SPI_TransmitReceive+0x68>
 80071e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d003      	beq.n	80071f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80071ee:	2302      	movs	r3, #2
 80071f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071f4:	e15b      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <HAL_SPI_TransmitReceive+0x82>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <HAL_SPI_TransmitReceive+0x82>
 8007202:	887b      	ldrh	r3, [r7, #2]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d103      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800720e:	e14e      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b04      	cmp	r3, #4
 800721a:	d003      	beq.n	8007224 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2205      	movs	r2, #5
 8007220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	887a      	ldrh	r2, [r7, #2]
 8007234:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	887a      	ldrh	r2, [r7, #2]
 800723a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	887a      	ldrh	r2, [r7, #2]
 8007246:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	887a      	ldrh	r2, [r7, #2]
 800724c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	d007      	beq.n	8007278 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007280:	d178      	bne.n	8007374 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_SPI_TransmitReceive+0x10a>
 800728a:	8b7b      	ldrh	r3, [r7, #26]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d166      	bne.n	800735e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	881a      	ldrh	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	1c9a      	adds	r2, r3, #2
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072b4:	e053      	b.n	800735e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d11b      	bne.n	80072fc <HAL_SPI_TransmitReceive+0x176>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d016      	beq.n	80072fc <HAL_SPI_TransmitReceive+0x176>
 80072ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d113      	bne.n	80072fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	881a      	ldrh	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e4:	1c9a      	adds	r2, r3, #2
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b01      	cmp	r3, #1
 8007308:	d119      	bne.n	800733e <HAL_SPI_TransmitReceive+0x1b8>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d014      	beq.n	800733e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	b292      	uxth	r2, r2
 8007320:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	1c9a      	adds	r2, r3, #2
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800733a:	2301      	movs	r3, #1
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800733e:	f7fd f8d7 	bl	80044f0 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800734a:	429a      	cmp	r2, r3
 800734c:	d807      	bhi.n	800735e <HAL_SPI_TransmitReceive+0x1d8>
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d003      	beq.n	800735e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800735c:	e0a7      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007362:	b29b      	uxth	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1a6      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x130>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1a1      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x130>
 8007372:	e07c      	b.n	800746e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_SPI_TransmitReceive+0x1fc>
 800737c:	8b7b      	ldrh	r3, [r7, #26]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d16b      	bne.n	800745a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	330c      	adds	r3, #12
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073a8:	e057      	b.n	800745a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d11c      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x26c>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d017      	beq.n	80073f2 <HAL_SPI_TransmitReceive+0x26c>
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d114      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	330c      	adds	r3, #12
 80073d2:	7812      	ldrb	r2, [r2, #0]
 80073d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d119      	bne.n	8007434 <HAL_SPI_TransmitReceive+0x2ae>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d014      	beq.n	8007434 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007430:	2301      	movs	r3, #1
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007434:	f7fd f85c 	bl	80044f0 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007440:	429a      	cmp	r2, r3
 8007442:	d803      	bhi.n	800744c <HAL_SPI_TransmitReceive+0x2c6>
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	d102      	bne.n	8007452 <HAL_SPI_TransmitReceive+0x2cc>
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	2b00      	cmp	r3, #0
 8007450:	d103      	bne.n	800745a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007458:	e029      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1a2      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x224>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d19d      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800746e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f8f8 	bl	8007668 <SPI_EndRxTxTransaction>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d006      	beq.n	800748c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2220      	movs	r2, #32
 8007488:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800748a:	e010      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10b      	bne.n	80074ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	e000      	b.n	80074ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80074ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3730      	adds	r7, #48	; 0x30
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074da:	e04c      	b.n	8007576 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d048      	beq.n	8007576 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80074e4:	f7fd f804 	bl	80044f0 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d902      	bls.n	80074fa <SPI_WaitFlagStateUntilTimeout+0x30>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d13d      	bne.n	8007576 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007508:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007512:	d111      	bne.n	8007538 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800751c:	d004      	beq.n	8007528 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007526:	d107      	bne.n	8007538 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007536:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007540:	d10f      	bne.n	8007562 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007560:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e00f      	b.n	8007596 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4013      	ands	r3, r2
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	429a      	cmp	r2, r3
 8007584:	bf0c      	ite	eq
 8007586:	2301      	moveq	r3, #1
 8007588:	2300      	movne	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	429a      	cmp	r2, r3
 8007592:	d1a3      	bne.n	80074dc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b086      	sub	sp, #24
 80075a2:	af02      	add	r7, sp, #8
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075b2:	d111      	bne.n	80075d8 <SPI_EndRxTransaction+0x3a>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075bc:	d004      	beq.n	80075c8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075c6:	d107      	bne.n	80075d8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075e0:	d12a      	bne.n	8007638 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ea:	d012      	beq.n	8007612 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2200      	movs	r2, #0
 80075f4:	2180      	movs	r1, #128	; 0x80
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff ff67 	bl	80074ca <SPI_WaitFlagStateUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d02d      	beq.n	800765e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007606:	f043 0220 	orr.w	r2, r3, #32
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e026      	b.n	8007660 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2200      	movs	r2, #0
 800761a:	2101      	movs	r1, #1
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff ff54 	bl	80074ca <SPI_WaitFlagStateUntilTimeout>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01a      	beq.n	800765e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762c:	f043 0220 	orr.w	r2, r3, #32
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e013      	b.n	8007660 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2200      	movs	r2, #0
 8007640:	2101      	movs	r1, #1
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff ff41 	bl	80074ca <SPI_WaitFlagStateUntilTimeout>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d007      	beq.n	800765e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007652:	f043 0220 	orr.w	r2, r3, #32
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e000      	b.n	8007660 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af02      	add	r7, sp, #8
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007674:	4b1b      	ldr	r3, [pc, #108]	; (80076e4 <SPI_EndRxTxTransaction+0x7c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1b      	ldr	r2, [pc, #108]	; (80076e8 <SPI_EndRxTxTransaction+0x80>)
 800767a:	fba2 2303 	umull	r2, r3, r2, r3
 800767e:	0d5b      	lsrs	r3, r3, #21
 8007680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007684:	fb02 f303 	mul.w	r3, r2, r3
 8007688:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007692:	d112      	bne.n	80076ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	2180      	movs	r1, #128	; 0x80
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff ff13 	bl	80074ca <SPI_WaitFlagStateUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d016      	beq.n	80076d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	f043 0220 	orr.w	r2, r3, #32
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e00f      	b.n	80076da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d0:	2b80      	cmp	r3, #128	; 0x80
 80076d2:	d0f2      	beq.n	80076ba <SPI_EndRxTxTransaction+0x52>
 80076d4:	e000      	b.n	80076d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80076d6:	bf00      	nop
  }

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20000000 	.word	0x20000000
 80076e8:	165e9f81 	.word	0x165e9f81

080076ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e01d      	b.n	800773a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fc fc04 	bl	8003f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3304      	adds	r3, #4
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f000 fc22 	bl	8007f74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f042 0201 	orr.w	r2, r2, #1
 8007758:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b06      	cmp	r3, #6
 800776a:	d007      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0201 	bic.w	r2, r2, #1
 80077a0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6a1a      	ldr	r2, [r3, #32]
 80077a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10f      	bne.n	80077d2 <HAL_TIM_Base_Stop_IT+0x48>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6a1a      	ldr	r2, [r3, #32]
 80077b8:	f240 4344 	movw	r3, #1092	; 0x444
 80077bc:	4013      	ands	r3, r2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d107      	bne.n	80077d2 <HAL_TIM_Base_Stop_IT+0x48>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0201 	bic.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e01d      	b.n	800782e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7fc fb54 	bl	8003eb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3304      	adds	r3, #4
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f000 fba8 	bl	8007f74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2201      	movs	r2, #1
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fde2 	bl	8008414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a15      	ldr	r2, [pc, #84]	; (80078ac <HAL_TIM_PWM_Start+0x74>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <HAL_TIM_PWM_Start+0x2c>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a14      	ldr	r2, [pc, #80]	; (80078b0 <HAL_TIM_PWM_Start+0x78>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d101      	bne.n	8007868 <HAL_TIM_PWM_Start+0x30>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <HAL_TIM_PWM_Start+0x32>
 8007868:	2300      	movs	r3, #0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800787c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b06      	cmp	r3, #6
 800788e:	d007      	beq.n	80078a0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0201 	orr.w	r2, r2, #1
 800789e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	40010000 	.word	0x40010000
 80078b0:	40010400 	.word	0x40010400

080078b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2200      	movs	r2, #0
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 fda4 	bl	8008414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a22      	ldr	r2, [pc, #136]	; (800795c <HAL_TIM_PWM_Stop+0xa8>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d004      	beq.n	80078e0 <HAL_TIM_PWM_Stop+0x2c>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a21      	ldr	r2, [pc, #132]	; (8007960 <HAL_TIM_PWM_Stop+0xac>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d101      	bne.n	80078e4 <HAL_TIM_PWM_Stop+0x30>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <HAL_TIM_PWM_Stop+0x32>
 80078e4:	2300      	movs	r3, #0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d017      	beq.n	800791a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6a1a      	ldr	r2, [r3, #32]
 80078f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80078f4:	4013      	ands	r3, r2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10f      	bne.n	800791a <HAL_TIM_PWM_Stop+0x66>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6a1a      	ldr	r2, [r3, #32]
 8007900:	f240 4344 	movw	r3, #1092	; 0x444
 8007904:	4013      	ands	r3, r2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <HAL_TIM_PWM_Stop+0x66>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6a1a      	ldr	r2, [r3, #32]
 8007920:	f241 1311 	movw	r3, #4369	; 0x1111
 8007924:	4013      	ands	r3, r2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10f      	bne.n	800794a <HAL_TIM_PWM_Stop+0x96>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6a1a      	ldr	r2, [r3, #32]
 8007930:	f240 4344 	movw	r3, #1092	; 0x444
 8007934:	4013      	ands	r3, r2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d107      	bne.n	800794a <HAL_TIM_PWM_Stop+0x96>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0201 	bic.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40010000 	.word	0x40010000
 8007960:	40010400 	.word	0x40010400

08007964 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e083      	b.n	8007a80 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d106      	bne.n	8007992 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7fc fa03 	bl	8003d98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2202      	movs	r2, #2
 8007996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6812      	ldr	r2, [r2, #0]
 80079a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079a8:	f023 0307 	bic.w	r3, r3, #7
 80079ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4619      	mov	r1, r3
 80079b8:	4610      	mov	r0, r2
 80079ba:	f000 fadb 	bl	8007f74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	4313      	orrs	r3, r2
 80079de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	4313      	orrs	r3, r2
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007a04:	f023 030c 	bic.w	r3, r3, #12
 8007a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	021b      	lsls	r3, r3, #8
 8007a20:	4313      	orrs	r3, r2
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	011a      	lsls	r2, r3, #4
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	031b      	lsls	r3, r3, #12
 8007a34:	4313      	orrs	r3, r2
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	4313      	orrs	r3, r2
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <HAL_TIM_Encoder_Start+0x18>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d008      	beq.n	8007ab0 <HAL_TIM_Encoder_Start+0x28>
 8007a9e:	e00f      	b.n	8007ac0 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fcb3 	bl	8008414 <TIM_CCxChannelCmd>
      break;
 8007aae:	e016      	b.n	8007ade <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	2104      	movs	r1, #4
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fcab 	bl	8008414 <TIM_CCxChannelCmd>
      break;
 8007abe:	e00e      	b.n	8007ade <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fca3 	bl	8008414 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	2104      	movs	r1, #4
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 fc9c 	bl	8008414 <TIM_CCxChannelCmd>
      break;
 8007adc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0201 	orr.w	r2, r2, #1
 8007aec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <HAL_TIM_Encoder_Stop+0x18>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d008      	beq.n	8007b20 <HAL_TIM_Encoder_Stop+0x28>
 8007b0e:	e00f      	b.n	8007b30 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2200      	movs	r2, #0
 8007b16:	2100      	movs	r1, #0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 fc7b 	bl	8008414 <TIM_CCxChannelCmd>
      break;
 8007b1e:	e016      	b.n	8007b4e <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2200      	movs	r2, #0
 8007b26:	2104      	movs	r1, #4
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fc73 	bl	8008414 <TIM_CCxChannelCmd>
      break;
 8007b2e:	e00e      	b.n	8007b4e <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2200      	movs	r2, #0
 8007b36:	2100      	movs	r1, #0
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 fc6b 	bl	8008414 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2200      	movs	r2, #0
 8007b44:	2104      	movs	r1, #4
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fc64 	bl	8008414 <TIM_CCxChannelCmd>
      break;
 8007b4c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6a1a      	ldr	r2, [r3, #32]
 8007b54:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10f      	bne.n	8007b7e <HAL_TIM_Encoder_Stop+0x86>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6a1a      	ldr	r2, [r3, #32]
 8007b64:	f240 4344 	movw	r3, #1092	; 0x444
 8007b68:	4013      	ands	r3, r2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d107      	bne.n	8007b7e <HAL_TIM_Encoder_Stop+0x86>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0201 	bic.w	r2, r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d122      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d11b      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f06f 0202 	mvn.w	r2, #2
 8007bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f9b4 	bl	8007f38 <HAL_TIM_IC_CaptureCallback>
 8007bd0:	e005      	b.n	8007bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f9a6 	bl	8007f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f9b7 	bl	8007f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d122      	bne.n	8007c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d11b      	bne.n	8007c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f06f 0204 	mvn.w	r2, #4
 8007c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f98a 	bl	8007f38 <HAL_TIM_IC_CaptureCallback>
 8007c24:	e005      	b.n	8007c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f97c 	bl	8007f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f98d 	bl	8007f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d122      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d11b      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f06f 0208 	mvn.w	r2, #8
 8007c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2204      	movs	r2, #4
 8007c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f960 	bl	8007f38 <HAL_TIM_IC_CaptureCallback>
 8007c78:	e005      	b.n	8007c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f952 	bl	8007f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f963 	bl	8007f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 0310 	and.w	r3, r3, #16
 8007c96:	2b10      	cmp	r3, #16
 8007c98:	d122      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f003 0310 	and.w	r3, r3, #16
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	d11b      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f06f 0210 	mvn.w	r2, #16
 8007cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2208      	movs	r2, #8
 8007cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f936 	bl	8007f38 <HAL_TIM_IC_CaptureCallback>
 8007ccc:	e005      	b.n	8007cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f928 	bl	8007f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f939 	bl	8007f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d10e      	bne.n	8007d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d107      	bne.n	8007d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0201 	mvn.w	r2, #1
 8007d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7fa f81a 	bl	8001d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d16:	2b80      	cmp	r3, #128	; 0x80
 8007d18:	d10e      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d24:	2b80      	cmp	r3, #128	; 0x80
 8007d26:	d107      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fc1a 	bl	800856c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d10e      	bne.n	8007d64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d50:	2b40      	cmp	r3, #64	; 0x40
 8007d52:	d107      	bne.n	8007d64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f8fe 	bl	8007f60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d10e      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b20      	cmp	r3, #32
 8007d7e:	d107      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f06f 0220 	mvn.w	r2, #32
 8007d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fbe4 	bl	8008558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d101      	bne.n	8007db2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007dae:	2302      	movs	r3, #2
 8007db0:	e0b4      	b.n	8007f1c <HAL_TIM_PWM_ConfigChannel+0x184>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b0c      	cmp	r3, #12
 8007dc6:	f200 809f 	bhi.w	8007f08 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007dca:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007e05 	.word	0x08007e05
 8007dd4:	08007f09 	.word	0x08007f09
 8007dd8:	08007f09 	.word	0x08007f09
 8007ddc:	08007f09 	.word	0x08007f09
 8007de0:	08007e45 	.word	0x08007e45
 8007de4:	08007f09 	.word	0x08007f09
 8007de8:	08007f09 	.word	0x08007f09
 8007dec:	08007f09 	.word	0x08007f09
 8007df0:	08007e87 	.word	0x08007e87
 8007df4:	08007f09 	.word	0x08007f09
 8007df8:	08007f09 	.word	0x08007f09
 8007dfc:	08007f09 	.word	0x08007f09
 8007e00:	08007ec7 	.word	0x08007ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f952 	bl	80080b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0208 	orr.w	r2, r2, #8
 8007e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0204 	bic.w	r2, r2, #4
 8007e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6999      	ldr	r1, [r3, #24]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	619a      	str	r2, [r3, #24]
      break;
 8007e42:	e062      	b.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f9a2 	bl	8008194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6999      	ldr	r1, [r3, #24]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	021a      	lsls	r2, r3, #8
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	619a      	str	r2, [r3, #24]
      break;
 8007e84:	e041      	b.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 f9f7 	bl	8008280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69da      	ldr	r2, [r3, #28]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0208 	orr.w	r2, r2, #8
 8007ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f022 0204 	bic.w	r2, r2, #4
 8007eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69d9      	ldr	r1, [r3, #28]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	61da      	str	r2, [r3, #28]
      break;
 8007ec4:	e021      	b.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fa4b 	bl	8008368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69da      	ldr	r2, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69d9      	ldr	r1, [r3, #28]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	021a      	lsls	r2, r3, #8
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	61da      	str	r2, [r3, #28]
      break;
 8007f06:	e000      	b.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007f08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a40      	ldr	r2, [pc, #256]	; (8008088 <TIM_Base_SetConfig+0x114>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d013      	beq.n	8007fb4 <TIM_Base_SetConfig+0x40>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f92:	d00f      	beq.n	8007fb4 <TIM_Base_SetConfig+0x40>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a3d      	ldr	r2, [pc, #244]	; (800808c <TIM_Base_SetConfig+0x118>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00b      	beq.n	8007fb4 <TIM_Base_SetConfig+0x40>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a3c      	ldr	r2, [pc, #240]	; (8008090 <TIM_Base_SetConfig+0x11c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d007      	beq.n	8007fb4 <TIM_Base_SetConfig+0x40>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a3b      	ldr	r2, [pc, #236]	; (8008094 <TIM_Base_SetConfig+0x120>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d003      	beq.n	8007fb4 <TIM_Base_SetConfig+0x40>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a3a      	ldr	r2, [pc, #232]	; (8008098 <TIM_Base_SetConfig+0x124>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d108      	bne.n	8007fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2f      	ldr	r2, [pc, #188]	; (8008088 <TIM_Base_SetConfig+0x114>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d02b      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd4:	d027      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a2c      	ldr	r2, [pc, #176]	; (800808c <TIM_Base_SetConfig+0x118>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d023      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a2b      	ldr	r2, [pc, #172]	; (8008090 <TIM_Base_SetConfig+0x11c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d01f      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a2a      	ldr	r2, [pc, #168]	; (8008094 <TIM_Base_SetConfig+0x120>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d01b      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a29      	ldr	r2, [pc, #164]	; (8008098 <TIM_Base_SetConfig+0x124>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d017      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a28      	ldr	r2, [pc, #160]	; (800809c <TIM_Base_SetConfig+0x128>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d013      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a27      	ldr	r2, [pc, #156]	; (80080a0 <TIM_Base_SetConfig+0x12c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00f      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a26      	ldr	r2, [pc, #152]	; (80080a4 <TIM_Base_SetConfig+0x130>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00b      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a25      	ldr	r2, [pc, #148]	; (80080a8 <TIM_Base_SetConfig+0x134>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d007      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a24      	ldr	r2, [pc, #144]	; (80080ac <TIM_Base_SetConfig+0x138>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d003      	beq.n	8008026 <TIM_Base_SetConfig+0xb2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a23      	ldr	r2, [pc, #140]	; (80080b0 <TIM_Base_SetConfig+0x13c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d108      	bne.n	8008038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800802c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4313      	orrs	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a0a      	ldr	r2, [pc, #40]	; (8008088 <TIM_Base_SetConfig+0x114>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d003      	beq.n	800806c <TIM_Base_SetConfig+0xf8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a0c      	ldr	r2, [pc, #48]	; (8008098 <TIM_Base_SetConfig+0x124>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d103      	bne.n	8008074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	691a      	ldr	r2, [r3, #16]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	615a      	str	r2, [r3, #20]
}
 800807a:	bf00      	nop
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	40010000 	.word	0x40010000
 800808c:	40000400 	.word	0x40000400
 8008090:	40000800 	.word	0x40000800
 8008094:	40000c00 	.word	0x40000c00
 8008098:	40010400 	.word	0x40010400
 800809c:	40014000 	.word	0x40014000
 80080a0:	40014400 	.word	0x40014400
 80080a4:	40014800 	.word	0x40014800
 80080a8:	40001800 	.word	0x40001800
 80080ac:	40001c00 	.word	0x40001c00
 80080b0:	40002000 	.word	0x40002000

080080b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f023 0201 	bic.w	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0303 	bic.w	r3, r3, #3
 80080ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f023 0302 	bic.w	r3, r3, #2
 80080fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	4313      	orrs	r3, r2
 8008106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a20      	ldr	r2, [pc, #128]	; (800818c <TIM_OC1_SetConfig+0xd8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d003      	beq.n	8008118 <TIM_OC1_SetConfig+0x64>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a1f      	ldr	r2, [pc, #124]	; (8008190 <TIM_OC1_SetConfig+0xdc>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d10c      	bne.n	8008132 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 0308 	bic.w	r3, r3, #8
 800811e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f023 0304 	bic.w	r3, r3, #4
 8008130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a15      	ldr	r2, [pc, #84]	; (800818c <TIM_OC1_SetConfig+0xd8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_OC1_SetConfig+0x8e>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a14      	ldr	r2, [pc, #80]	; (8008190 <TIM_OC1_SetConfig+0xdc>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d111      	bne.n	8008166 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	4313      	orrs	r3, r2
 8008164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	621a      	str	r2, [r3, #32]
}
 8008180:	bf00      	nop
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	40010000 	.word	0x40010000
 8008190:	40010400 	.word	0x40010400

08008194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008194:	b480      	push	{r7}
 8008196:	b087      	sub	sp, #28
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	f023 0210 	bic.w	r2, r3, #16
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f023 0320 	bic.w	r3, r3, #32
 80081de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	011b      	lsls	r3, r3, #4
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a22      	ldr	r2, [pc, #136]	; (8008278 <TIM_OC2_SetConfig+0xe4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d003      	beq.n	80081fc <TIM_OC2_SetConfig+0x68>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a21      	ldr	r2, [pc, #132]	; (800827c <TIM_OC2_SetConfig+0xe8>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d10d      	bne.n	8008218 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008216:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a17      	ldr	r2, [pc, #92]	; (8008278 <TIM_OC2_SetConfig+0xe4>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_OC2_SetConfig+0x94>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a16      	ldr	r2, [pc, #88]	; (800827c <TIM_OC2_SetConfig+0xe8>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d113      	bne.n	8008250 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800822e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	4313      	orrs	r3, r2
 800824e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	621a      	str	r2, [r3, #32]
}
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	40010000 	.word	0x40010000
 800827c:	40010400 	.word	0x40010400

08008280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0303 	bic.w	r3, r3, #3
 80082b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a21      	ldr	r2, [pc, #132]	; (8008360 <TIM_OC3_SetConfig+0xe0>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d003      	beq.n	80082e6 <TIM_OC3_SetConfig+0x66>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a20      	ldr	r2, [pc, #128]	; (8008364 <TIM_OC3_SetConfig+0xe4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d10d      	bne.n	8008302 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a16      	ldr	r2, [pc, #88]	; (8008360 <TIM_OC3_SetConfig+0xe0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d003      	beq.n	8008312 <TIM_OC3_SetConfig+0x92>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a15      	ldr	r2, [pc, #84]	; (8008364 <TIM_OC3_SetConfig+0xe4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d113      	bne.n	800833a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	011b      	lsls	r3, r3, #4
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	4313      	orrs	r3, r2
 800832c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	011b      	lsls	r3, r3, #4
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	4313      	orrs	r3, r2
 8008338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	621a      	str	r2, [r3, #32]
}
 8008354:	bf00      	nop
 8008356:	371c      	adds	r7, #28
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	40010000 	.word	0x40010000
 8008364:	40010400 	.word	0x40010400

08008368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800839e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	021b      	lsls	r3, r3, #8
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	031b      	lsls	r3, r3, #12
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	4313      	orrs	r3, r2
 80083be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a12      	ldr	r2, [pc, #72]	; (800840c <TIM_OC4_SetConfig+0xa4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d003      	beq.n	80083d0 <TIM_OC4_SetConfig+0x68>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a11      	ldr	r2, [pc, #68]	; (8008410 <TIM_OC4_SetConfig+0xa8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d109      	bne.n	80083e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	019b      	lsls	r3, r3, #6
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	621a      	str	r2, [r3, #32]
}
 80083fe:	bf00      	nop
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	40010000 	.word	0x40010000
 8008410:	40010400 	.word	0x40010400

08008414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f003 031f 	and.w	r3, r3, #31
 8008426:	2201      	movs	r2, #1
 8008428:	fa02 f303 	lsl.w	r3, r2, r3
 800842c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a1a      	ldr	r2, [r3, #32]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	43db      	mvns	r3, r3
 8008436:	401a      	ands	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6a1a      	ldr	r2, [r3, #32]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f003 031f 	and.w	r3, r3, #31
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	fa01 f303 	lsl.w	r3, r1, r3
 800844c:	431a      	orrs	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	bf00      	nop
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
	...

08008460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008470:	2b01      	cmp	r3, #1
 8008472:	d101      	bne.n	8008478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008474:	2302      	movs	r3, #2
 8008476:	e05a      	b.n	800852e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a21      	ldr	r2, [pc, #132]	; (800853c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d022      	beq.n	8008502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c4:	d01d      	beq.n	8008502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a1d      	ldr	r2, [pc, #116]	; (8008540 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d018      	beq.n	8008502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a1b      	ldr	r2, [pc, #108]	; (8008544 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d013      	beq.n	8008502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a1a      	ldr	r2, [pc, #104]	; (8008548 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d00e      	beq.n	8008502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a18      	ldr	r2, [pc, #96]	; (800854c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d009      	beq.n	8008502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a17      	ldr	r2, [pc, #92]	; (8008550 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d004      	beq.n	8008502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a15      	ldr	r2, [pc, #84]	; (8008554 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d10c      	bne.n	800851c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	4313      	orrs	r3, r2
 8008512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	40010000 	.word	0x40010000
 8008540:	40000400 	.word	0x40000400
 8008544:	40000800 	.word	0x40000800
 8008548:	40000c00 	.word	0x40000c00
 800854c:	40010400 	.word	0x40010400
 8008550:	40014000 	.word	0x40014000
 8008554:	40001800 	.word	0x40001800

08008558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e03f      	b.n	8008612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d106      	bne.n	80085ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fb fd94 	bl	80040d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2224      	movs	r2, #36	; 0x24
 80085b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f90b 	bl	80087e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691a      	ldr	r2, [r3, #16]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	695a      	ldr	r2, [r3, #20]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2220      	movs	r2, #32
 8008604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2220      	movs	r2, #32
 800860c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b088      	sub	sp, #32
 800861e:	af02      	add	r7, sp, #8
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	603b      	str	r3, [r7, #0]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b20      	cmp	r3, #32
 8008638:	f040 8083 	bne.w	8008742 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <HAL_UART_Transmit+0x2e>
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e07b      	b.n	8008744 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008652:	2b01      	cmp	r3, #1
 8008654:	d101      	bne.n	800865a <HAL_UART_Transmit+0x40>
 8008656:	2302      	movs	r3, #2
 8008658:	e074      	b.n	8008744 <HAL_UART_Transmit+0x12a>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2221      	movs	r2, #33	; 0x21
 800866c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008670:	f7fb ff3e 	bl	80044f0 <HAL_GetTick>
 8008674:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	88fa      	ldrh	r2, [r7, #6]
 800867a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	88fa      	ldrh	r2, [r7, #6]
 8008680:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800868a:	e042      	b.n	8008712 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008690:	b29b      	uxth	r3, r3
 8008692:	3b01      	subs	r3, #1
 8008694:	b29a      	uxth	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a2:	d122      	bne.n	80086ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2200      	movs	r2, #0
 80086ac:	2180      	movs	r1, #128	; 0x80
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 f84c 	bl	800874c <UART_WaitOnFlagUntilTimeout>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e042      	b.n	8008744 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d103      	bne.n	80086e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	3302      	adds	r3, #2
 80086de:	60bb      	str	r3, [r7, #8]
 80086e0:	e017      	b.n	8008712 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	3301      	adds	r3, #1
 80086e6:	60bb      	str	r3, [r7, #8]
 80086e8:	e013      	b.n	8008712 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2200      	movs	r2, #0
 80086f2:	2180      	movs	r1, #128	; 0x80
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f829 	bl	800874c <UART_WaitOnFlagUntilTimeout>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e01f      	b.n	8008744 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	1c5a      	adds	r2, r3, #1
 8008708:	60ba      	str	r2, [r7, #8]
 800870a:	781a      	ldrb	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008716:	b29b      	uxth	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1b7      	bne.n	800868c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2200      	movs	r2, #0
 8008724:	2140      	movs	r1, #64	; 0x40
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 f810 	bl	800874c <UART_WaitOnFlagUntilTimeout>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e006      	b.n	8008744 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2220      	movs	r2, #32
 800873a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	e000      	b.n	8008744 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008742:	2302      	movs	r3, #2
  }
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	4613      	mov	r3, r2
 800875a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800875c:	e02c      	b.n	80087b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008764:	d028      	beq.n	80087b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d007      	beq.n	800877c <UART_WaitOnFlagUntilTimeout+0x30>
 800876c:	f7fb fec0 	bl	80044f0 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	429a      	cmp	r2, r3
 800877a:	d21d      	bcs.n	80087b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800878a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	695a      	ldr	r2, [r3, #20]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f022 0201 	bic.w	r2, r2, #1
 800879a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e00f      	b.n	80087d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	4013      	ands	r3, r2
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	bf0c      	ite	eq
 80087c8:	2301      	moveq	r3, #1
 80087ca:	2300      	movne	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	461a      	mov	r2, r3
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d0c3      	beq.n	800875e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	b0bd      	sub	sp, #244	; 0xf4
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fc:	68d9      	ldr	r1, [r3, #12]
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	ea40 0301 	orr.w	r3, r0, r1
 8008808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800880a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	431a      	orrs	r2, r3
 8008818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	431a      	orrs	r2, r3
 8008820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800882c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008838:	f021 010c 	bic.w	r1, r1, #12
 800883c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008846:	430b      	orrs	r3, r1
 8008848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885a:	6999      	ldr	r1, [r3, #24]
 800885c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	ea40 0301 	orr.w	r3, r0, r1
 8008866:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008872:	f040 81a5 	bne.w	8008bc0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	4bcd      	ldr	r3, [pc, #820]	; (8008bb4 <UART_SetConfig+0x3d4>)
 800887e:	429a      	cmp	r2, r3
 8008880:	d006      	beq.n	8008890 <UART_SetConfig+0xb0>
 8008882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	4bcb      	ldr	r3, [pc, #812]	; (8008bb8 <UART_SetConfig+0x3d8>)
 800888a:	429a      	cmp	r2, r3
 800888c:	f040 80cb 	bne.w	8008a26 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008890:	f7fe f9c4 	bl	8006c1c <HAL_RCC_GetPCLK2Freq>
 8008894:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008898:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800889c:	461c      	mov	r4, r3
 800889e:	f04f 0500 	mov.w	r5, #0
 80088a2:	4622      	mov	r2, r4
 80088a4:	462b      	mov	r3, r5
 80088a6:	1891      	adds	r1, r2, r2
 80088a8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80088ac:	415b      	adcs	r3, r3
 80088ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80088b2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80088b6:	1912      	adds	r2, r2, r4
 80088b8:	eb45 0303 	adc.w	r3, r5, r3
 80088bc:	f04f 0000 	mov.w	r0, #0
 80088c0:	f04f 0100 	mov.w	r1, #0
 80088c4:	00d9      	lsls	r1, r3, #3
 80088c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088ca:	00d0      	lsls	r0, r2, #3
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	1911      	adds	r1, r2, r4
 80088d2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80088d6:	416b      	adcs	r3, r5
 80088d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80088dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	1891      	adds	r1, r2, r2
 80088ea:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80088ee:	415b      	adcs	r3, r3
 80088f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80088f8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80088fc:	f7f8 f9c4 	bl	8000c88 <__aeabi_uldivmod>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4bad      	ldr	r3, [pc, #692]	; (8008bbc <UART_SetConfig+0x3dc>)
 8008906:	fba3 2302 	umull	r2, r3, r3, r2
 800890a:	095b      	lsrs	r3, r3, #5
 800890c:	011e      	lsls	r6, r3, #4
 800890e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008912:	461c      	mov	r4, r3
 8008914:	f04f 0500 	mov.w	r5, #0
 8008918:	4622      	mov	r2, r4
 800891a:	462b      	mov	r3, r5
 800891c:	1891      	adds	r1, r2, r2
 800891e:	67b9      	str	r1, [r7, #120]	; 0x78
 8008920:	415b      	adcs	r3, r3
 8008922:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008924:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008928:	1912      	adds	r2, r2, r4
 800892a:	eb45 0303 	adc.w	r3, r5, r3
 800892e:	f04f 0000 	mov.w	r0, #0
 8008932:	f04f 0100 	mov.w	r1, #0
 8008936:	00d9      	lsls	r1, r3, #3
 8008938:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800893c:	00d0      	lsls	r0, r2, #3
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	1911      	adds	r1, r2, r4
 8008944:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008948:	416b      	adcs	r3, r5
 800894a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800894e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	461a      	mov	r2, r3
 8008956:	f04f 0300 	mov.w	r3, #0
 800895a:	1891      	adds	r1, r2, r2
 800895c:	6739      	str	r1, [r7, #112]	; 0x70
 800895e:	415b      	adcs	r3, r3
 8008960:	677b      	str	r3, [r7, #116]	; 0x74
 8008962:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008966:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800896a:	f7f8 f98d 	bl	8000c88 <__aeabi_uldivmod>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4b92      	ldr	r3, [pc, #584]	; (8008bbc <UART_SetConfig+0x3dc>)
 8008974:	fba3 1302 	umull	r1, r3, r3, r2
 8008978:	095b      	lsrs	r3, r3, #5
 800897a:	2164      	movs	r1, #100	; 0x64
 800897c:	fb01 f303 	mul.w	r3, r1, r3
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	3332      	adds	r3, #50	; 0x32
 8008986:	4a8d      	ldr	r2, [pc, #564]	; (8008bbc <UART_SetConfig+0x3dc>)
 8008988:	fba2 2303 	umull	r2, r3, r2, r3
 800898c:	095b      	lsrs	r3, r3, #5
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008994:	441e      	add	r6, r3
 8008996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800899a:	4618      	mov	r0, r3
 800899c:	f04f 0100 	mov.w	r1, #0
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	1894      	adds	r4, r2, r2
 80089a6:	66bc      	str	r4, [r7, #104]	; 0x68
 80089a8:	415b      	adcs	r3, r3
 80089aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80089b0:	1812      	adds	r2, r2, r0
 80089b2:	eb41 0303 	adc.w	r3, r1, r3
 80089b6:	f04f 0400 	mov.w	r4, #0
 80089ba:	f04f 0500 	mov.w	r5, #0
 80089be:	00dd      	lsls	r5, r3, #3
 80089c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80089c4:	00d4      	lsls	r4, r2, #3
 80089c6:	4622      	mov	r2, r4
 80089c8:	462b      	mov	r3, r5
 80089ca:	1814      	adds	r4, r2, r0
 80089cc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80089d0:	414b      	adcs	r3, r1
 80089d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	461a      	mov	r2, r3
 80089de:	f04f 0300 	mov.w	r3, #0
 80089e2:	1891      	adds	r1, r2, r2
 80089e4:	6639      	str	r1, [r7, #96]	; 0x60
 80089e6:	415b      	adcs	r3, r3
 80089e8:	667b      	str	r3, [r7, #100]	; 0x64
 80089ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80089ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80089f2:	f7f8 f949 	bl	8000c88 <__aeabi_uldivmod>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4b70      	ldr	r3, [pc, #448]	; (8008bbc <UART_SetConfig+0x3dc>)
 80089fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008a00:	095b      	lsrs	r3, r3, #5
 8008a02:	2164      	movs	r1, #100	; 0x64
 8008a04:	fb01 f303 	mul.w	r3, r1, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	3332      	adds	r3, #50	; 0x32
 8008a0e:	4a6b      	ldr	r2, [pc, #428]	; (8008bbc <UART_SetConfig+0x3dc>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	f003 0207 	and.w	r2, r3, #7
 8008a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4432      	add	r2, r6
 8008a22:	609a      	str	r2, [r3, #8]
 8008a24:	e26d      	b.n	8008f02 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a26:	f7fe f8e5 	bl	8006bf4 <HAL_RCC_GetPCLK1Freq>
 8008a2a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a32:	461c      	mov	r4, r3
 8008a34:	f04f 0500 	mov.w	r5, #0
 8008a38:	4622      	mov	r2, r4
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	1891      	adds	r1, r2, r2
 8008a3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a40:	415b      	adcs	r3, r3
 8008a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a48:	1912      	adds	r2, r2, r4
 8008a4a:	eb45 0303 	adc.w	r3, r5, r3
 8008a4e:	f04f 0000 	mov.w	r0, #0
 8008a52:	f04f 0100 	mov.w	r1, #0
 8008a56:	00d9      	lsls	r1, r3, #3
 8008a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a5c:	00d0      	lsls	r0, r2, #3
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	1911      	adds	r1, r2, r4
 8008a64:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008a68:	416b      	adcs	r3, r5
 8008a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	461a      	mov	r2, r3
 8008a76:	f04f 0300 	mov.w	r3, #0
 8008a7a:	1891      	adds	r1, r2, r2
 8008a7c:	6539      	str	r1, [r7, #80]	; 0x50
 8008a7e:	415b      	adcs	r3, r3
 8008a80:	657b      	str	r3, [r7, #84]	; 0x54
 8008a82:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a86:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008a8a:	f7f8 f8fd 	bl	8000c88 <__aeabi_uldivmod>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	4b4a      	ldr	r3, [pc, #296]	; (8008bbc <UART_SetConfig+0x3dc>)
 8008a94:	fba3 2302 	umull	r2, r3, r3, r2
 8008a98:	095b      	lsrs	r3, r3, #5
 8008a9a:	011e      	lsls	r6, r3, #4
 8008a9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aa0:	461c      	mov	r4, r3
 8008aa2:	f04f 0500 	mov.w	r5, #0
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	1891      	adds	r1, r2, r2
 8008aac:	64b9      	str	r1, [r7, #72]	; 0x48
 8008aae:	415b      	adcs	r3, r3
 8008ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ab2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ab6:	1912      	adds	r2, r2, r4
 8008ab8:	eb45 0303 	adc.w	r3, r5, r3
 8008abc:	f04f 0000 	mov.w	r0, #0
 8008ac0:	f04f 0100 	mov.w	r1, #0
 8008ac4:	00d9      	lsls	r1, r3, #3
 8008ac6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008aca:	00d0      	lsls	r0, r2, #3
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	1911      	adds	r1, r2, r4
 8008ad2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008ad6:	416b      	adcs	r3, r5
 8008ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f04f 0300 	mov.w	r3, #0
 8008ae8:	1891      	adds	r1, r2, r2
 8008aea:	6439      	str	r1, [r7, #64]	; 0x40
 8008aec:	415b      	adcs	r3, r3
 8008aee:	647b      	str	r3, [r7, #68]	; 0x44
 8008af0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008af4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008af8:	f7f8 f8c6 	bl	8000c88 <__aeabi_uldivmod>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4b2e      	ldr	r3, [pc, #184]	; (8008bbc <UART_SetConfig+0x3dc>)
 8008b02:	fba3 1302 	umull	r1, r3, r3, r2
 8008b06:	095b      	lsrs	r3, r3, #5
 8008b08:	2164      	movs	r1, #100	; 0x64
 8008b0a:	fb01 f303 	mul.w	r3, r1, r3
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	00db      	lsls	r3, r3, #3
 8008b12:	3332      	adds	r3, #50	; 0x32
 8008b14:	4a29      	ldr	r2, [pc, #164]	; (8008bbc <UART_SetConfig+0x3dc>)
 8008b16:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1a:	095b      	lsrs	r3, r3, #5
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b22:	441e      	add	r6, r3
 8008b24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f04f 0100 	mov.w	r1, #0
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	1894      	adds	r4, r2, r2
 8008b34:	63bc      	str	r4, [r7, #56]	; 0x38
 8008b36:	415b      	adcs	r3, r3
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b3e:	1812      	adds	r2, r2, r0
 8008b40:	eb41 0303 	adc.w	r3, r1, r3
 8008b44:	f04f 0400 	mov.w	r4, #0
 8008b48:	f04f 0500 	mov.w	r5, #0
 8008b4c:	00dd      	lsls	r5, r3, #3
 8008b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b52:	00d4      	lsls	r4, r2, #3
 8008b54:	4622      	mov	r2, r4
 8008b56:	462b      	mov	r3, r5
 8008b58:	1814      	adds	r4, r2, r0
 8008b5a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008b5e:	414b      	adcs	r3, r1
 8008b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f04f 0300 	mov.w	r3, #0
 8008b70:	1891      	adds	r1, r2, r2
 8008b72:	6339      	str	r1, [r7, #48]	; 0x30
 8008b74:	415b      	adcs	r3, r3
 8008b76:	637b      	str	r3, [r7, #52]	; 0x34
 8008b78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b7c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008b80:	f7f8 f882 	bl	8000c88 <__aeabi_uldivmod>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4b0c      	ldr	r3, [pc, #48]	; (8008bbc <UART_SetConfig+0x3dc>)
 8008b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	2164      	movs	r1, #100	; 0x64
 8008b92:	fb01 f303 	mul.w	r3, r1, r3
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	3332      	adds	r3, #50	; 0x32
 8008b9c:	4a07      	ldr	r2, [pc, #28]	; (8008bbc <UART_SetConfig+0x3dc>)
 8008b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba2:	095b      	lsrs	r3, r3, #5
 8008ba4:	f003 0207 	and.w	r2, r3, #7
 8008ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4432      	add	r2, r6
 8008bb0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008bb2:	e1a6      	b.n	8008f02 <UART_SetConfig+0x722>
 8008bb4:	40011000 	.word	0x40011000
 8008bb8:	40011400 	.word	0x40011400
 8008bbc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	4bd1      	ldr	r3, [pc, #836]	; (8008f0c <UART_SetConfig+0x72c>)
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d006      	beq.n	8008bda <UART_SetConfig+0x3fa>
 8008bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4bcf      	ldr	r3, [pc, #828]	; (8008f10 <UART_SetConfig+0x730>)
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	f040 80ca 	bne.w	8008d6e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bda:	f7fe f81f 	bl	8006c1c <HAL_RCC_GetPCLK2Freq>
 8008bde:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008be2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008be6:	461c      	mov	r4, r3
 8008be8:	f04f 0500 	mov.w	r5, #0
 8008bec:	4622      	mov	r2, r4
 8008bee:	462b      	mov	r3, r5
 8008bf0:	1891      	adds	r1, r2, r2
 8008bf2:	62b9      	str	r1, [r7, #40]	; 0x28
 8008bf4:	415b      	adcs	r3, r3
 8008bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bfc:	1912      	adds	r2, r2, r4
 8008bfe:	eb45 0303 	adc.w	r3, r5, r3
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f04f 0100 	mov.w	r1, #0
 8008c0a:	00d9      	lsls	r1, r3, #3
 8008c0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c10:	00d0      	lsls	r0, r2, #3
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	eb12 0a04 	adds.w	sl, r2, r4
 8008c1a:	eb43 0b05 	adc.w	fp, r3, r5
 8008c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f04f 0100 	mov.w	r1, #0
 8008c2a:	f04f 0200 	mov.w	r2, #0
 8008c2e:	f04f 0300 	mov.w	r3, #0
 8008c32:	008b      	lsls	r3, r1, #2
 8008c34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c38:	0082      	lsls	r2, r0, #2
 8008c3a:	4650      	mov	r0, sl
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	f7f8 f823 	bl	8000c88 <__aeabi_uldivmod>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4bb3      	ldr	r3, [pc, #716]	; (8008f14 <UART_SetConfig+0x734>)
 8008c48:	fba3 2302 	umull	r2, r3, r3, r2
 8008c4c:	095b      	lsrs	r3, r3, #5
 8008c4e:	011e      	lsls	r6, r3, #4
 8008c50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c54:	4618      	mov	r0, r3
 8008c56:	f04f 0100 	mov.w	r1, #0
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	1894      	adds	r4, r2, r2
 8008c60:	623c      	str	r4, [r7, #32]
 8008c62:	415b      	adcs	r3, r3
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
 8008c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c6a:	1812      	adds	r2, r2, r0
 8008c6c:	eb41 0303 	adc.w	r3, r1, r3
 8008c70:	f04f 0400 	mov.w	r4, #0
 8008c74:	f04f 0500 	mov.w	r5, #0
 8008c78:	00dd      	lsls	r5, r3, #3
 8008c7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c7e:	00d4      	lsls	r4, r2, #3
 8008c80:	4622      	mov	r2, r4
 8008c82:	462b      	mov	r3, r5
 8008c84:	1814      	adds	r4, r2, r0
 8008c86:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008c8a:	414b      	adcs	r3, r1
 8008c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f04f 0100 	mov.w	r1, #0
 8008c9c:	f04f 0200 	mov.w	r2, #0
 8008ca0:	f04f 0300 	mov.w	r3, #0
 8008ca4:	008b      	lsls	r3, r1, #2
 8008ca6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008caa:	0082      	lsls	r2, r0, #2
 8008cac:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008cb0:	f7f7 ffea 	bl	8000c88 <__aeabi_uldivmod>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4b96      	ldr	r3, [pc, #600]	; (8008f14 <UART_SetConfig+0x734>)
 8008cba:	fba3 1302 	umull	r1, r3, r3, r2
 8008cbe:	095b      	lsrs	r3, r3, #5
 8008cc0:	2164      	movs	r1, #100	; 0x64
 8008cc2:	fb01 f303 	mul.w	r3, r1, r3
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	011b      	lsls	r3, r3, #4
 8008cca:	3332      	adds	r3, #50	; 0x32
 8008ccc:	4a91      	ldr	r2, [pc, #580]	; (8008f14 <UART_SetConfig+0x734>)
 8008cce:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd2:	095b      	lsrs	r3, r3, #5
 8008cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cd8:	441e      	add	r6, r3
 8008cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f04f 0100 	mov.w	r1, #0
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	1894      	adds	r4, r2, r2
 8008cea:	61bc      	str	r4, [r7, #24]
 8008cec:	415b      	adcs	r3, r3
 8008cee:	61fb      	str	r3, [r7, #28]
 8008cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cf4:	1812      	adds	r2, r2, r0
 8008cf6:	eb41 0303 	adc.w	r3, r1, r3
 8008cfa:	f04f 0400 	mov.w	r4, #0
 8008cfe:	f04f 0500 	mov.w	r5, #0
 8008d02:	00dd      	lsls	r5, r3, #3
 8008d04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d08:	00d4      	lsls	r4, r2, #3
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	1814      	adds	r4, r2, r0
 8008d10:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008d14:	414b      	adcs	r3, r1
 8008d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f04f 0100 	mov.w	r1, #0
 8008d26:	f04f 0200 	mov.w	r2, #0
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	008b      	lsls	r3, r1, #2
 8008d30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d34:	0082      	lsls	r2, r0, #2
 8008d36:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008d3a:	f7f7 ffa5 	bl	8000c88 <__aeabi_uldivmod>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4b74      	ldr	r3, [pc, #464]	; (8008f14 <UART_SetConfig+0x734>)
 8008d44:	fba3 1302 	umull	r1, r3, r3, r2
 8008d48:	095b      	lsrs	r3, r3, #5
 8008d4a:	2164      	movs	r1, #100	; 0x64
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	011b      	lsls	r3, r3, #4
 8008d54:	3332      	adds	r3, #50	; 0x32
 8008d56:	4a6f      	ldr	r2, [pc, #444]	; (8008f14 <UART_SetConfig+0x734>)
 8008d58:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5c:	095b      	lsrs	r3, r3, #5
 8008d5e:	f003 020f 	and.w	r2, r3, #15
 8008d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4432      	add	r2, r6
 8008d6a:	609a      	str	r2, [r3, #8]
 8008d6c:	e0c9      	b.n	8008f02 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d6e:	f7fd ff41 	bl	8006bf4 <HAL_RCC_GetPCLK1Freq>
 8008d72:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d7a:	461c      	mov	r4, r3
 8008d7c:	f04f 0500 	mov.w	r5, #0
 8008d80:	4622      	mov	r2, r4
 8008d82:	462b      	mov	r3, r5
 8008d84:	1891      	adds	r1, r2, r2
 8008d86:	6139      	str	r1, [r7, #16]
 8008d88:	415b      	adcs	r3, r3
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d90:	1912      	adds	r2, r2, r4
 8008d92:	eb45 0303 	adc.w	r3, r5, r3
 8008d96:	f04f 0000 	mov.w	r0, #0
 8008d9a:	f04f 0100 	mov.w	r1, #0
 8008d9e:	00d9      	lsls	r1, r3, #3
 8008da0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008da4:	00d0      	lsls	r0, r2, #3
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	eb12 0804 	adds.w	r8, r2, r4
 8008dae:	eb43 0905 	adc.w	r9, r3, r5
 8008db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f04f 0100 	mov.w	r1, #0
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	008b      	lsls	r3, r1, #2
 8008dc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008dcc:	0082      	lsls	r2, r0, #2
 8008dce:	4640      	mov	r0, r8
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	f7f7 ff59 	bl	8000c88 <__aeabi_uldivmod>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4b4e      	ldr	r3, [pc, #312]	; (8008f14 <UART_SetConfig+0x734>)
 8008ddc:	fba3 2302 	umull	r2, r3, r3, r2
 8008de0:	095b      	lsrs	r3, r3, #5
 8008de2:	011e      	lsls	r6, r3, #4
 8008de4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008de8:	4618      	mov	r0, r3
 8008dea:	f04f 0100 	mov.w	r1, #0
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	1894      	adds	r4, r2, r2
 8008df4:	60bc      	str	r4, [r7, #8]
 8008df6:	415b      	adcs	r3, r3
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dfe:	1812      	adds	r2, r2, r0
 8008e00:	eb41 0303 	adc.w	r3, r1, r3
 8008e04:	f04f 0400 	mov.w	r4, #0
 8008e08:	f04f 0500 	mov.w	r5, #0
 8008e0c:	00dd      	lsls	r5, r3, #3
 8008e0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e12:	00d4      	lsls	r4, r2, #3
 8008e14:	4622      	mov	r2, r4
 8008e16:	462b      	mov	r3, r5
 8008e18:	1814      	adds	r4, r2, r0
 8008e1a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008e1e:	414b      	adcs	r3, r1
 8008e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f04f 0100 	mov.w	r1, #0
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	008b      	lsls	r3, r1, #2
 8008e3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e3e:	0082      	lsls	r2, r0, #2
 8008e40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e44:	f7f7 ff20 	bl	8000c88 <__aeabi_uldivmod>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4b31      	ldr	r3, [pc, #196]	; (8008f14 <UART_SetConfig+0x734>)
 8008e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8008e52:	095b      	lsrs	r3, r3, #5
 8008e54:	2164      	movs	r1, #100	; 0x64
 8008e56:	fb01 f303 	mul.w	r3, r1, r3
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	3332      	adds	r3, #50	; 0x32
 8008e60:	4a2c      	ldr	r2, [pc, #176]	; (8008f14 <UART_SetConfig+0x734>)
 8008e62:	fba2 2303 	umull	r2, r3, r2, r3
 8008e66:	095b      	lsrs	r3, r3, #5
 8008e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e6c:	441e      	add	r6, r3
 8008e6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e72:	4618      	mov	r0, r3
 8008e74:	f04f 0100 	mov.w	r1, #0
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	1894      	adds	r4, r2, r2
 8008e7e:	603c      	str	r4, [r7, #0]
 8008e80:	415b      	adcs	r3, r3
 8008e82:	607b      	str	r3, [r7, #4]
 8008e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e88:	1812      	adds	r2, r2, r0
 8008e8a:	eb41 0303 	adc.w	r3, r1, r3
 8008e8e:	f04f 0400 	mov.w	r4, #0
 8008e92:	f04f 0500 	mov.w	r5, #0
 8008e96:	00dd      	lsls	r5, r3, #3
 8008e98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e9c:	00d4      	lsls	r4, r2, #3
 8008e9e:	4622      	mov	r2, r4
 8008ea0:	462b      	mov	r3, r5
 8008ea2:	1814      	adds	r4, r2, r0
 8008ea4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008ea8:	414b      	adcs	r3, r1
 8008eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f04f 0100 	mov.w	r1, #0
 8008eba:	f04f 0200 	mov.w	r2, #0
 8008ebe:	f04f 0300 	mov.w	r3, #0
 8008ec2:	008b      	lsls	r3, r1, #2
 8008ec4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ec8:	0082      	lsls	r2, r0, #2
 8008eca:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8008ece:	f7f7 fedb 	bl	8000c88 <__aeabi_uldivmod>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <UART_SetConfig+0x734>)
 8008ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	2164      	movs	r1, #100	; 0x64
 8008ee0:	fb01 f303 	mul.w	r3, r1, r3
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	3332      	adds	r3, #50	; 0x32
 8008eea:	4a0a      	ldr	r2, [pc, #40]	; (8008f14 <UART_SetConfig+0x734>)
 8008eec:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef0:	095b      	lsrs	r3, r3, #5
 8008ef2:	f003 020f 	and.w	r2, r3, #15
 8008ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4432      	add	r2, r6
 8008efe:	609a      	str	r2, [r3, #8]
}
 8008f00:	e7ff      	b.n	8008f02 <UART_SetConfig+0x722>
 8008f02:	bf00      	nop
 8008f04:	37f4      	adds	r7, #244	; 0xf4
 8008f06:	46bd      	mov	sp, r7
 8008f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0c:	40011000 	.word	0x40011000
 8008f10:	40011400 	.word	0x40011400
 8008f14:	51eb851f 	.word	0x51eb851f

08008f18 <__errno>:
 8008f18:	4b01      	ldr	r3, [pc, #4]	; (8008f20 <__errno+0x8>)
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	2000000c 	.word	0x2000000c

08008f24 <__libc_init_array>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	4d0d      	ldr	r5, [pc, #52]	; (8008f5c <__libc_init_array+0x38>)
 8008f28:	4c0d      	ldr	r4, [pc, #52]	; (8008f60 <__libc_init_array+0x3c>)
 8008f2a:	1b64      	subs	r4, r4, r5
 8008f2c:	10a4      	asrs	r4, r4, #2
 8008f2e:	2600      	movs	r6, #0
 8008f30:	42a6      	cmp	r6, r4
 8008f32:	d109      	bne.n	8008f48 <__libc_init_array+0x24>
 8008f34:	4d0b      	ldr	r5, [pc, #44]	; (8008f64 <__libc_init_array+0x40>)
 8008f36:	4c0c      	ldr	r4, [pc, #48]	; (8008f68 <__libc_init_array+0x44>)
 8008f38:	f004 fcd4 	bl	800d8e4 <_init>
 8008f3c:	1b64      	subs	r4, r4, r5
 8008f3e:	10a4      	asrs	r4, r4, #2
 8008f40:	2600      	movs	r6, #0
 8008f42:	42a6      	cmp	r6, r4
 8008f44:	d105      	bne.n	8008f52 <__libc_init_array+0x2e>
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
 8008f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4c:	4798      	blx	r3
 8008f4e:	3601      	adds	r6, #1
 8008f50:	e7ee      	b.n	8008f30 <__libc_init_array+0xc>
 8008f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f56:	4798      	blx	r3
 8008f58:	3601      	adds	r6, #1
 8008f5a:	e7f2      	b.n	8008f42 <__libc_init_array+0x1e>
 8008f5c:	0800e064 	.word	0x0800e064
 8008f60:	0800e064 	.word	0x0800e064
 8008f64:	0800e064 	.word	0x0800e064
 8008f68:	0800e068 	.word	0x0800e068

08008f6c <memcpy>:
 8008f6c:	440a      	add	r2, r1
 8008f6e:	4291      	cmp	r1, r2
 8008f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f74:	d100      	bne.n	8008f78 <memcpy+0xc>
 8008f76:	4770      	bx	lr
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f82:	4291      	cmp	r1, r2
 8008f84:	d1f9      	bne.n	8008f7a <memcpy+0xe>
 8008f86:	bd10      	pop	{r4, pc}

08008f88 <memset>:
 8008f88:	4402      	add	r2, r0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d100      	bne.n	8008f92 <memset+0xa>
 8008f90:	4770      	bx	lr
 8008f92:	f803 1b01 	strb.w	r1, [r3], #1
 8008f96:	e7f9      	b.n	8008f8c <memset+0x4>

08008f98 <__cvt>:
 8008f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9c:	ec55 4b10 	vmov	r4, r5, d0
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	460e      	mov	r6, r1
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	462b      	mov	r3, r5
 8008fa8:	bfbb      	ittet	lt
 8008faa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fae:	461d      	movlt	r5, r3
 8008fb0:	2300      	movge	r3, #0
 8008fb2:	232d      	movlt	r3, #45	; 0x2d
 8008fb4:	700b      	strb	r3, [r1, #0]
 8008fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fbc:	4691      	mov	r9, r2
 8008fbe:	f023 0820 	bic.w	r8, r3, #32
 8008fc2:	bfbc      	itt	lt
 8008fc4:	4622      	movlt	r2, r4
 8008fc6:	4614      	movlt	r4, r2
 8008fc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fcc:	d005      	beq.n	8008fda <__cvt+0x42>
 8008fce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008fd2:	d100      	bne.n	8008fd6 <__cvt+0x3e>
 8008fd4:	3601      	adds	r6, #1
 8008fd6:	2102      	movs	r1, #2
 8008fd8:	e000      	b.n	8008fdc <__cvt+0x44>
 8008fda:	2103      	movs	r1, #3
 8008fdc:	ab03      	add	r3, sp, #12
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	ab02      	add	r3, sp, #8
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	ec45 4b10 	vmov	d0, r4, r5
 8008fe8:	4653      	mov	r3, sl
 8008fea:	4632      	mov	r2, r6
 8008fec:	f001 ff04 	bl	800adf8 <_dtoa_r>
 8008ff0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	d102      	bne.n	8008ffe <__cvt+0x66>
 8008ff8:	f019 0f01 	tst.w	r9, #1
 8008ffc:	d022      	beq.n	8009044 <__cvt+0xac>
 8008ffe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009002:	eb07 0906 	add.w	r9, r7, r6
 8009006:	d110      	bne.n	800902a <__cvt+0x92>
 8009008:	783b      	ldrb	r3, [r7, #0]
 800900a:	2b30      	cmp	r3, #48	; 0x30
 800900c:	d10a      	bne.n	8009024 <__cvt+0x8c>
 800900e:	2200      	movs	r2, #0
 8009010:	2300      	movs	r3, #0
 8009012:	4620      	mov	r0, r4
 8009014:	4629      	mov	r1, r5
 8009016:	f7f7 fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800901a:	b918      	cbnz	r0, 8009024 <__cvt+0x8c>
 800901c:	f1c6 0601 	rsb	r6, r6, #1
 8009020:	f8ca 6000 	str.w	r6, [sl]
 8009024:	f8da 3000 	ldr.w	r3, [sl]
 8009028:	4499      	add	r9, r3
 800902a:	2200      	movs	r2, #0
 800902c:	2300      	movs	r3, #0
 800902e:	4620      	mov	r0, r4
 8009030:	4629      	mov	r1, r5
 8009032:	f7f7 fd49 	bl	8000ac8 <__aeabi_dcmpeq>
 8009036:	b108      	cbz	r0, 800903c <__cvt+0xa4>
 8009038:	f8cd 900c 	str.w	r9, [sp, #12]
 800903c:	2230      	movs	r2, #48	; 0x30
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	454b      	cmp	r3, r9
 8009042:	d307      	bcc.n	8009054 <__cvt+0xbc>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009048:	1bdb      	subs	r3, r3, r7
 800904a:	4638      	mov	r0, r7
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	b004      	add	sp, #16
 8009050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009054:	1c59      	adds	r1, r3, #1
 8009056:	9103      	str	r1, [sp, #12]
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	e7f0      	b.n	800903e <__cvt+0xa6>

0800905c <__exponent>:
 800905c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800905e:	4603      	mov	r3, r0
 8009060:	2900      	cmp	r1, #0
 8009062:	bfb8      	it	lt
 8009064:	4249      	neglt	r1, r1
 8009066:	f803 2b02 	strb.w	r2, [r3], #2
 800906a:	bfb4      	ite	lt
 800906c:	222d      	movlt	r2, #45	; 0x2d
 800906e:	222b      	movge	r2, #43	; 0x2b
 8009070:	2909      	cmp	r1, #9
 8009072:	7042      	strb	r2, [r0, #1]
 8009074:	dd2a      	ble.n	80090cc <__exponent+0x70>
 8009076:	f10d 0407 	add.w	r4, sp, #7
 800907a:	46a4      	mov	ip, r4
 800907c:	270a      	movs	r7, #10
 800907e:	46a6      	mov	lr, r4
 8009080:	460a      	mov	r2, r1
 8009082:	fb91 f6f7 	sdiv	r6, r1, r7
 8009086:	fb07 1516 	mls	r5, r7, r6, r1
 800908a:	3530      	adds	r5, #48	; 0x30
 800908c:	2a63      	cmp	r2, #99	; 0x63
 800908e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009092:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009096:	4631      	mov	r1, r6
 8009098:	dcf1      	bgt.n	800907e <__exponent+0x22>
 800909a:	3130      	adds	r1, #48	; 0x30
 800909c:	f1ae 0502 	sub.w	r5, lr, #2
 80090a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80090a4:	1c44      	adds	r4, r0, #1
 80090a6:	4629      	mov	r1, r5
 80090a8:	4561      	cmp	r1, ip
 80090aa:	d30a      	bcc.n	80090c2 <__exponent+0x66>
 80090ac:	f10d 0209 	add.w	r2, sp, #9
 80090b0:	eba2 020e 	sub.w	r2, r2, lr
 80090b4:	4565      	cmp	r5, ip
 80090b6:	bf88      	it	hi
 80090b8:	2200      	movhi	r2, #0
 80090ba:	4413      	add	r3, r2
 80090bc:	1a18      	subs	r0, r3, r0
 80090be:	b003      	add	sp, #12
 80090c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80090ca:	e7ed      	b.n	80090a8 <__exponent+0x4c>
 80090cc:	2330      	movs	r3, #48	; 0x30
 80090ce:	3130      	adds	r1, #48	; 0x30
 80090d0:	7083      	strb	r3, [r0, #2]
 80090d2:	70c1      	strb	r1, [r0, #3]
 80090d4:	1d03      	adds	r3, r0, #4
 80090d6:	e7f1      	b.n	80090bc <__exponent+0x60>

080090d8 <_printf_float>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	ed2d 8b02 	vpush	{d8}
 80090e0:	b08d      	sub	sp, #52	; 0x34
 80090e2:	460c      	mov	r4, r1
 80090e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090e8:	4616      	mov	r6, r2
 80090ea:	461f      	mov	r7, r3
 80090ec:	4605      	mov	r5, r0
 80090ee:	f003 f995 	bl	800c41c <_localeconv_r>
 80090f2:	f8d0 a000 	ldr.w	sl, [r0]
 80090f6:	4650      	mov	r0, sl
 80090f8:	f7f7 f86a 	bl	80001d0 <strlen>
 80090fc:	2300      	movs	r3, #0
 80090fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	9305      	str	r3, [sp, #20]
 8009104:	f8d8 3000 	ldr.w	r3, [r8]
 8009108:	f894 b018 	ldrb.w	fp, [r4, #24]
 800910c:	3307      	adds	r3, #7
 800910e:	f023 0307 	bic.w	r3, r3, #7
 8009112:	f103 0208 	add.w	r2, r3, #8
 8009116:	f8c8 2000 	str.w	r2, [r8]
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009122:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009126:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800912a:	9307      	str	r3, [sp, #28]
 800912c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009130:	ee08 0a10 	vmov	s16, r0
 8009134:	4b9f      	ldr	r3, [pc, #636]	; (80093b4 <_printf_float+0x2dc>)
 8009136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	f7f7 fcf5 	bl	8000b2c <__aeabi_dcmpun>
 8009142:	bb88      	cbnz	r0, 80091a8 <_printf_float+0xd0>
 8009144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009148:	4b9a      	ldr	r3, [pc, #616]	; (80093b4 <_printf_float+0x2dc>)
 800914a:	f04f 32ff 	mov.w	r2, #4294967295
 800914e:	f7f7 fccf 	bl	8000af0 <__aeabi_dcmple>
 8009152:	bb48      	cbnz	r0, 80091a8 <_printf_float+0xd0>
 8009154:	2200      	movs	r2, #0
 8009156:	2300      	movs	r3, #0
 8009158:	4640      	mov	r0, r8
 800915a:	4649      	mov	r1, r9
 800915c:	f7f7 fcbe 	bl	8000adc <__aeabi_dcmplt>
 8009160:	b110      	cbz	r0, 8009168 <_printf_float+0x90>
 8009162:	232d      	movs	r3, #45	; 0x2d
 8009164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009168:	4b93      	ldr	r3, [pc, #588]	; (80093b8 <_printf_float+0x2e0>)
 800916a:	4894      	ldr	r0, [pc, #592]	; (80093bc <_printf_float+0x2e4>)
 800916c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009170:	bf94      	ite	ls
 8009172:	4698      	movls	r8, r3
 8009174:	4680      	movhi	r8, r0
 8009176:	2303      	movs	r3, #3
 8009178:	6123      	str	r3, [r4, #16]
 800917a:	9b05      	ldr	r3, [sp, #20]
 800917c:	f023 0204 	bic.w	r2, r3, #4
 8009180:	6022      	str	r2, [r4, #0]
 8009182:	f04f 0900 	mov.w	r9, #0
 8009186:	9700      	str	r7, [sp, #0]
 8009188:	4633      	mov	r3, r6
 800918a:	aa0b      	add	r2, sp, #44	; 0x2c
 800918c:	4621      	mov	r1, r4
 800918e:	4628      	mov	r0, r5
 8009190:	f000 f9d8 	bl	8009544 <_printf_common>
 8009194:	3001      	adds	r0, #1
 8009196:	f040 8090 	bne.w	80092ba <_printf_float+0x1e2>
 800919a:	f04f 30ff 	mov.w	r0, #4294967295
 800919e:	b00d      	add	sp, #52	; 0x34
 80091a0:	ecbd 8b02 	vpop	{d8}
 80091a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a8:	4642      	mov	r2, r8
 80091aa:	464b      	mov	r3, r9
 80091ac:	4640      	mov	r0, r8
 80091ae:	4649      	mov	r1, r9
 80091b0:	f7f7 fcbc 	bl	8000b2c <__aeabi_dcmpun>
 80091b4:	b140      	cbz	r0, 80091c8 <_printf_float+0xf0>
 80091b6:	464b      	mov	r3, r9
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bfbc      	itt	lt
 80091bc:	232d      	movlt	r3, #45	; 0x2d
 80091be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091c2:	487f      	ldr	r0, [pc, #508]	; (80093c0 <_printf_float+0x2e8>)
 80091c4:	4b7f      	ldr	r3, [pc, #508]	; (80093c4 <_printf_float+0x2ec>)
 80091c6:	e7d1      	b.n	800916c <_printf_float+0x94>
 80091c8:	6863      	ldr	r3, [r4, #4]
 80091ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091ce:	9206      	str	r2, [sp, #24]
 80091d0:	1c5a      	adds	r2, r3, #1
 80091d2:	d13f      	bne.n	8009254 <_printf_float+0x17c>
 80091d4:	2306      	movs	r3, #6
 80091d6:	6063      	str	r3, [r4, #4]
 80091d8:	9b05      	ldr	r3, [sp, #20]
 80091da:	6861      	ldr	r1, [r4, #4]
 80091dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091e0:	2300      	movs	r3, #0
 80091e2:	9303      	str	r3, [sp, #12]
 80091e4:	ab0a      	add	r3, sp, #40	; 0x28
 80091e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091ea:	ab09      	add	r3, sp, #36	; 0x24
 80091ec:	ec49 8b10 	vmov	d0, r8, r9
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	6022      	str	r2, [r4, #0]
 80091f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091f8:	4628      	mov	r0, r5
 80091fa:	f7ff fecd 	bl	8008f98 <__cvt>
 80091fe:	9b06      	ldr	r3, [sp, #24]
 8009200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009202:	2b47      	cmp	r3, #71	; 0x47
 8009204:	4680      	mov	r8, r0
 8009206:	d108      	bne.n	800921a <_printf_float+0x142>
 8009208:	1cc8      	adds	r0, r1, #3
 800920a:	db02      	blt.n	8009212 <_printf_float+0x13a>
 800920c:	6863      	ldr	r3, [r4, #4]
 800920e:	4299      	cmp	r1, r3
 8009210:	dd41      	ble.n	8009296 <_printf_float+0x1be>
 8009212:	f1ab 0b02 	sub.w	fp, fp, #2
 8009216:	fa5f fb8b 	uxtb.w	fp, fp
 800921a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800921e:	d820      	bhi.n	8009262 <_printf_float+0x18a>
 8009220:	3901      	subs	r1, #1
 8009222:	465a      	mov	r2, fp
 8009224:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009228:	9109      	str	r1, [sp, #36]	; 0x24
 800922a:	f7ff ff17 	bl	800905c <__exponent>
 800922e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009230:	1813      	adds	r3, r2, r0
 8009232:	2a01      	cmp	r2, #1
 8009234:	4681      	mov	r9, r0
 8009236:	6123      	str	r3, [r4, #16]
 8009238:	dc02      	bgt.n	8009240 <_printf_float+0x168>
 800923a:	6822      	ldr	r2, [r4, #0]
 800923c:	07d2      	lsls	r2, r2, #31
 800923e:	d501      	bpl.n	8009244 <_printf_float+0x16c>
 8009240:	3301      	adds	r3, #1
 8009242:	6123      	str	r3, [r4, #16]
 8009244:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009248:	2b00      	cmp	r3, #0
 800924a:	d09c      	beq.n	8009186 <_printf_float+0xae>
 800924c:	232d      	movs	r3, #45	; 0x2d
 800924e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009252:	e798      	b.n	8009186 <_printf_float+0xae>
 8009254:	9a06      	ldr	r2, [sp, #24]
 8009256:	2a47      	cmp	r2, #71	; 0x47
 8009258:	d1be      	bne.n	80091d8 <_printf_float+0x100>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1bc      	bne.n	80091d8 <_printf_float+0x100>
 800925e:	2301      	movs	r3, #1
 8009260:	e7b9      	b.n	80091d6 <_printf_float+0xfe>
 8009262:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009266:	d118      	bne.n	800929a <_printf_float+0x1c2>
 8009268:	2900      	cmp	r1, #0
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	dd0b      	ble.n	8009286 <_printf_float+0x1ae>
 800926e:	6121      	str	r1, [r4, #16]
 8009270:	b913      	cbnz	r3, 8009278 <_printf_float+0x1a0>
 8009272:	6822      	ldr	r2, [r4, #0]
 8009274:	07d0      	lsls	r0, r2, #31
 8009276:	d502      	bpl.n	800927e <_printf_float+0x1a6>
 8009278:	3301      	adds	r3, #1
 800927a:	440b      	add	r3, r1
 800927c:	6123      	str	r3, [r4, #16]
 800927e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009280:	f04f 0900 	mov.w	r9, #0
 8009284:	e7de      	b.n	8009244 <_printf_float+0x16c>
 8009286:	b913      	cbnz	r3, 800928e <_printf_float+0x1b6>
 8009288:	6822      	ldr	r2, [r4, #0]
 800928a:	07d2      	lsls	r2, r2, #31
 800928c:	d501      	bpl.n	8009292 <_printf_float+0x1ba>
 800928e:	3302      	adds	r3, #2
 8009290:	e7f4      	b.n	800927c <_printf_float+0x1a4>
 8009292:	2301      	movs	r3, #1
 8009294:	e7f2      	b.n	800927c <_printf_float+0x1a4>
 8009296:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800929a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800929c:	4299      	cmp	r1, r3
 800929e:	db05      	blt.n	80092ac <_printf_float+0x1d4>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	6121      	str	r1, [r4, #16]
 80092a4:	07d8      	lsls	r0, r3, #31
 80092a6:	d5ea      	bpl.n	800927e <_printf_float+0x1a6>
 80092a8:	1c4b      	adds	r3, r1, #1
 80092aa:	e7e7      	b.n	800927c <_printf_float+0x1a4>
 80092ac:	2900      	cmp	r1, #0
 80092ae:	bfd4      	ite	le
 80092b0:	f1c1 0202 	rsble	r2, r1, #2
 80092b4:	2201      	movgt	r2, #1
 80092b6:	4413      	add	r3, r2
 80092b8:	e7e0      	b.n	800927c <_printf_float+0x1a4>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	055a      	lsls	r2, r3, #21
 80092be:	d407      	bmi.n	80092d0 <_printf_float+0x1f8>
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	4642      	mov	r2, r8
 80092c4:	4631      	mov	r1, r6
 80092c6:	4628      	mov	r0, r5
 80092c8:	47b8      	blx	r7
 80092ca:	3001      	adds	r0, #1
 80092cc:	d12c      	bne.n	8009328 <_printf_float+0x250>
 80092ce:	e764      	b.n	800919a <_printf_float+0xc2>
 80092d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092d4:	f240 80e0 	bls.w	8009498 <_printf_float+0x3c0>
 80092d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092dc:	2200      	movs	r2, #0
 80092de:	2300      	movs	r3, #0
 80092e0:	f7f7 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d034      	beq.n	8009352 <_printf_float+0x27a>
 80092e8:	4a37      	ldr	r2, [pc, #220]	; (80093c8 <_printf_float+0x2f0>)
 80092ea:	2301      	movs	r3, #1
 80092ec:	4631      	mov	r1, r6
 80092ee:	4628      	mov	r0, r5
 80092f0:	47b8      	blx	r7
 80092f2:	3001      	adds	r0, #1
 80092f4:	f43f af51 	beq.w	800919a <_printf_float+0xc2>
 80092f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092fc:	429a      	cmp	r2, r3
 80092fe:	db02      	blt.n	8009306 <_printf_float+0x22e>
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	07d8      	lsls	r0, r3, #31
 8009304:	d510      	bpl.n	8009328 <_printf_float+0x250>
 8009306:	ee18 3a10 	vmov	r3, s16
 800930a:	4652      	mov	r2, sl
 800930c:	4631      	mov	r1, r6
 800930e:	4628      	mov	r0, r5
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	f43f af41 	beq.w	800919a <_printf_float+0xc2>
 8009318:	f04f 0800 	mov.w	r8, #0
 800931c:	f104 091a 	add.w	r9, r4, #26
 8009320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009322:	3b01      	subs	r3, #1
 8009324:	4543      	cmp	r3, r8
 8009326:	dc09      	bgt.n	800933c <_printf_float+0x264>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	079b      	lsls	r3, r3, #30
 800932c:	f100 8105 	bmi.w	800953a <_printf_float+0x462>
 8009330:	68e0      	ldr	r0, [r4, #12]
 8009332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009334:	4298      	cmp	r0, r3
 8009336:	bfb8      	it	lt
 8009338:	4618      	movlt	r0, r3
 800933a:	e730      	b.n	800919e <_printf_float+0xc6>
 800933c:	2301      	movs	r3, #1
 800933e:	464a      	mov	r2, r9
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	47b8      	blx	r7
 8009346:	3001      	adds	r0, #1
 8009348:	f43f af27 	beq.w	800919a <_printf_float+0xc2>
 800934c:	f108 0801 	add.w	r8, r8, #1
 8009350:	e7e6      	b.n	8009320 <_printf_float+0x248>
 8009352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009354:	2b00      	cmp	r3, #0
 8009356:	dc39      	bgt.n	80093cc <_printf_float+0x2f4>
 8009358:	4a1b      	ldr	r2, [pc, #108]	; (80093c8 <_printf_float+0x2f0>)
 800935a:	2301      	movs	r3, #1
 800935c:	4631      	mov	r1, r6
 800935e:	4628      	mov	r0, r5
 8009360:	47b8      	blx	r7
 8009362:	3001      	adds	r0, #1
 8009364:	f43f af19 	beq.w	800919a <_printf_float+0xc2>
 8009368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800936c:	4313      	orrs	r3, r2
 800936e:	d102      	bne.n	8009376 <_printf_float+0x29e>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	07d9      	lsls	r1, r3, #31
 8009374:	d5d8      	bpl.n	8009328 <_printf_float+0x250>
 8009376:	ee18 3a10 	vmov	r3, s16
 800937a:	4652      	mov	r2, sl
 800937c:	4631      	mov	r1, r6
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	f43f af09 	beq.w	800919a <_printf_float+0xc2>
 8009388:	f04f 0900 	mov.w	r9, #0
 800938c:	f104 0a1a 	add.w	sl, r4, #26
 8009390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009392:	425b      	negs	r3, r3
 8009394:	454b      	cmp	r3, r9
 8009396:	dc01      	bgt.n	800939c <_printf_float+0x2c4>
 8009398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800939a:	e792      	b.n	80092c2 <_printf_float+0x1ea>
 800939c:	2301      	movs	r3, #1
 800939e:	4652      	mov	r2, sl
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	f43f aef7 	beq.w	800919a <_printf_float+0xc2>
 80093ac:	f109 0901 	add.w	r9, r9, #1
 80093b0:	e7ee      	b.n	8009390 <_printf_float+0x2b8>
 80093b2:	bf00      	nop
 80093b4:	7fefffff 	.word	0x7fefffff
 80093b8:	0800dba8 	.word	0x0800dba8
 80093bc:	0800dbac 	.word	0x0800dbac
 80093c0:	0800dbb4 	.word	0x0800dbb4
 80093c4:	0800dbb0 	.word	0x0800dbb0
 80093c8:	0800dbb8 	.word	0x0800dbb8
 80093cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093d0:	429a      	cmp	r2, r3
 80093d2:	bfa8      	it	ge
 80093d4:	461a      	movge	r2, r3
 80093d6:	2a00      	cmp	r2, #0
 80093d8:	4691      	mov	r9, r2
 80093da:	dc37      	bgt.n	800944c <_printf_float+0x374>
 80093dc:	f04f 0b00 	mov.w	fp, #0
 80093e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093e4:	f104 021a 	add.w	r2, r4, #26
 80093e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	eba3 0309 	sub.w	r3, r3, r9
 80093f0:	455b      	cmp	r3, fp
 80093f2:	dc33      	bgt.n	800945c <_printf_float+0x384>
 80093f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093f8:	429a      	cmp	r2, r3
 80093fa:	db3b      	blt.n	8009474 <_printf_float+0x39c>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	07da      	lsls	r2, r3, #31
 8009400:	d438      	bmi.n	8009474 <_printf_float+0x39c>
 8009402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009404:	9b05      	ldr	r3, [sp, #20]
 8009406:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	eba2 0901 	sub.w	r9, r2, r1
 800940e:	4599      	cmp	r9, r3
 8009410:	bfa8      	it	ge
 8009412:	4699      	movge	r9, r3
 8009414:	f1b9 0f00 	cmp.w	r9, #0
 8009418:	dc35      	bgt.n	8009486 <_printf_float+0x3ae>
 800941a:	f04f 0800 	mov.w	r8, #0
 800941e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009422:	f104 0a1a 	add.w	sl, r4, #26
 8009426:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	eba3 0309 	sub.w	r3, r3, r9
 8009430:	4543      	cmp	r3, r8
 8009432:	f77f af79 	ble.w	8009328 <_printf_float+0x250>
 8009436:	2301      	movs	r3, #1
 8009438:	4652      	mov	r2, sl
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	f43f aeaa 	beq.w	800919a <_printf_float+0xc2>
 8009446:	f108 0801 	add.w	r8, r8, #1
 800944a:	e7ec      	b.n	8009426 <_printf_float+0x34e>
 800944c:	4613      	mov	r3, r2
 800944e:	4631      	mov	r1, r6
 8009450:	4642      	mov	r2, r8
 8009452:	4628      	mov	r0, r5
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	d1c0      	bne.n	80093dc <_printf_float+0x304>
 800945a:	e69e      	b.n	800919a <_printf_float+0xc2>
 800945c:	2301      	movs	r3, #1
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	9205      	str	r2, [sp, #20]
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	f43f ae97 	beq.w	800919a <_printf_float+0xc2>
 800946c:	9a05      	ldr	r2, [sp, #20]
 800946e:	f10b 0b01 	add.w	fp, fp, #1
 8009472:	e7b9      	b.n	80093e8 <_printf_float+0x310>
 8009474:	ee18 3a10 	vmov	r3, s16
 8009478:	4652      	mov	r2, sl
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	d1be      	bne.n	8009402 <_printf_float+0x32a>
 8009484:	e689      	b.n	800919a <_printf_float+0xc2>
 8009486:	9a05      	ldr	r2, [sp, #20]
 8009488:	464b      	mov	r3, r9
 800948a:	4442      	add	r2, r8
 800948c:	4631      	mov	r1, r6
 800948e:	4628      	mov	r0, r5
 8009490:	47b8      	blx	r7
 8009492:	3001      	adds	r0, #1
 8009494:	d1c1      	bne.n	800941a <_printf_float+0x342>
 8009496:	e680      	b.n	800919a <_printf_float+0xc2>
 8009498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800949a:	2a01      	cmp	r2, #1
 800949c:	dc01      	bgt.n	80094a2 <_printf_float+0x3ca>
 800949e:	07db      	lsls	r3, r3, #31
 80094a0:	d538      	bpl.n	8009514 <_printf_float+0x43c>
 80094a2:	2301      	movs	r3, #1
 80094a4:	4642      	mov	r2, r8
 80094a6:	4631      	mov	r1, r6
 80094a8:	4628      	mov	r0, r5
 80094aa:	47b8      	blx	r7
 80094ac:	3001      	adds	r0, #1
 80094ae:	f43f ae74 	beq.w	800919a <_printf_float+0xc2>
 80094b2:	ee18 3a10 	vmov	r3, s16
 80094b6:	4652      	mov	r2, sl
 80094b8:	4631      	mov	r1, r6
 80094ba:	4628      	mov	r0, r5
 80094bc:	47b8      	blx	r7
 80094be:	3001      	adds	r0, #1
 80094c0:	f43f ae6b 	beq.w	800919a <_printf_float+0xc2>
 80094c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094c8:	2200      	movs	r2, #0
 80094ca:	2300      	movs	r3, #0
 80094cc:	f7f7 fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 80094d0:	b9d8      	cbnz	r0, 800950a <_printf_float+0x432>
 80094d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d4:	f108 0201 	add.w	r2, r8, #1
 80094d8:	3b01      	subs	r3, #1
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	47b8      	blx	r7
 80094e0:	3001      	adds	r0, #1
 80094e2:	d10e      	bne.n	8009502 <_printf_float+0x42a>
 80094e4:	e659      	b.n	800919a <_printf_float+0xc2>
 80094e6:	2301      	movs	r3, #1
 80094e8:	4652      	mov	r2, sl
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b8      	blx	r7
 80094f0:	3001      	adds	r0, #1
 80094f2:	f43f ae52 	beq.w	800919a <_printf_float+0xc2>
 80094f6:	f108 0801 	add.w	r8, r8, #1
 80094fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094fc:	3b01      	subs	r3, #1
 80094fe:	4543      	cmp	r3, r8
 8009500:	dcf1      	bgt.n	80094e6 <_printf_float+0x40e>
 8009502:	464b      	mov	r3, r9
 8009504:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009508:	e6dc      	b.n	80092c4 <_printf_float+0x1ec>
 800950a:	f04f 0800 	mov.w	r8, #0
 800950e:	f104 0a1a 	add.w	sl, r4, #26
 8009512:	e7f2      	b.n	80094fa <_printf_float+0x422>
 8009514:	2301      	movs	r3, #1
 8009516:	4642      	mov	r2, r8
 8009518:	e7df      	b.n	80094da <_printf_float+0x402>
 800951a:	2301      	movs	r3, #1
 800951c:	464a      	mov	r2, r9
 800951e:	4631      	mov	r1, r6
 8009520:	4628      	mov	r0, r5
 8009522:	47b8      	blx	r7
 8009524:	3001      	adds	r0, #1
 8009526:	f43f ae38 	beq.w	800919a <_printf_float+0xc2>
 800952a:	f108 0801 	add.w	r8, r8, #1
 800952e:	68e3      	ldr	r3, [r4, #12]
 8009530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009532:	1a5b      	subs	r3, r3, r1
 8009534:	4543      	cmp	r3, r8
 8009536:	dcf0      	bgt.n	800951a <_printf_float+0x442>
 8009538:	e6fa      	b.n	8009330 <_printf_float+0x258>
 800953a:	f04f 0800 	mov.w	r8, #0
 800953e:	f104 0919 	add.w	r9, r4, #25
 8009542:	e7f4      	b.n	800952e <_printf_float+0x456>

08009544 <_printf_common>:
 8009544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009548:	4616      	mov	r6, r2
 800954a:	4699      	mov	r9, r3
 800954c:	688a      	ldr	r2, [r1, #8]
 800954e:	690b      	ldr	r3, [r1, #16]
 8009550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009554:	4293      	cmp	r3, r2
 8009556:	bfb8      	it	lt
 8009558:	4613      	movlt	r3, r2
 800955a:	6033      	str	r3, [r6, #0]
 800955c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009560:	4607      	mov	r7, r0
 8009562:	460c      	mov	r4, r1
 8009564:	b10a      	cbz	r2, 800956a <_printf_common+0x26>
 8009566:	3301      	adds	r3, #1
 8009568:	6033      	str	r3, [r6, #0]
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	0699      	lsls	r1, r3, #26
 800956e:	bf42      	ittt	mi
 8009570:	6833      	ldrmi	r3, [r6, #0]
 8009572:	3302      	addmi	r3, #2
 8009574:	6033      	strmi	r3, [r6, #0]
 8009576:	6825      	ldr	r5, [r4, #0]
 8009578:	f015 0506 	ands.w	r5, r5, #6
 800957c:	d106      	bne.n	800958c <_printf_common+0x48>
 800957e:	f104 0a19 	add.w	sl, r4, #25
 8009582:	68e3      	ldr	r3, [r4, #12]
 8009584:	6832      	ldr	r2, [r6, #0]
 8009586:	1a9b      	subs	r3, r3, r2
 8009588:	42ab      	cmp	r3, r5
 800958a:	dc26      	bgt.n	80095da <_printf_common+0x96>
 800958c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009590:	1e13      	subs	r3, r2, #0
 8009592:	6822      	ldr	r2, [r4, #0]
 8009594:	bf18      	it	ne
 8009596:	2301      	movne	r3, #1
 8009598:	0692      	lsls	r2, r2, #26
 800959a:	d42b      	bmi.n	80095f4 <_printf_common+0xb0>
 800959c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095a0:	4649      	mov	r1, r9
 80095a2:	4638      	mov	r0, r7
 80095a4:	47c0      	blx	r8
 80095a6:	3001      	adds	r0, #1
 80095a8:	d01e      	beq.n	80095e8 <_printf_common+0xa4>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	68e5      	ldr	r5, [r4, #12]
 80095ae:	6832      	ldr	r2, [r6, #0]
 80095b0:	f003 0306 	and.w	r3, r3, #6
 80095b4:	2b04      	cmp	r3, #4
 80095b6:	bf08      	it	eq
 80095b8:	1aad      	subeq	r5, r5, r2
 80095ba:	68a3      	ldr	r3, [r4, #8]
 80095bc:	6922      	ldr	r2, [r4, #16]
 80095be:	bf0c      	ite	eq
 80095c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095c4:	2500      	movne	r5, #0
 80095c6:	4293      	cmp	r3, r2
 80095c8:	bfc4      	itt	gt
 80095ca:	1a9b      	subgt	r3, r3, r2
 80095cc:	18ed      	addgt	r5, r5, r3
 80095ce:	2600      	movs	r6, #0
 80095d0:	341a      	adds	r4, #26
 80095d2:	42b5      	cmp	r5, r6
 80095d4:	d11a      	bne.n	800960c <_printf_common+0xc8>
 80095d6:	2000      	movs	r0, #0
 80095d8:	e008      	b.n	80095ec <_printf_common+0xa8>
 80095da:	2301      	movs	r3, #1
 80095dc:	4652      	mov	r2, sl
 80095de:	4649      	mov	r1, r9
 80095e0:	4638      	mov	r0, r7
 80095e2:	47c0      	blx	r8
 80095e4:	3001      	adds	r0, #1
 80095e6:	d103      	bne.n	80095f0 <_printf_common+0xac>
 80095e8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f0:	3501      	adds	r5, #1
 80095f2:	e7c6      	b.n	8009582 <_printf_common+0x3e>
 80095f4:	18e1      	adds	r1, r4, r3
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	2030      	movs	r0, #48	; 0x30
 80095fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095fe:	4422      	add	r2, r4
 8009600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009608:	3302      	adds	r3, #2
 800960a:	e7c7      	b.n	800959c <_printf_common+0x58>
 800960c:	2301      	movs	r3, #1
 800960e:	4622      	mov	r2, r4
 8009610:	4649      	mov	r1, r9
 8009612:	4638      	mov	r0, r7
 8009614:	47c0      	blx	r8
 8009616:	3001      	adds	r0, #1
 8009618:	d0e6      	beq.n	80095e8 <_printf_common+0xa4>
 800961a:	3601      	adds	r6, #1
 800961c:	e7d9      	b.n	80095d2 <_printf_common+0x8e>
	...

08009620 <_printf_i>:
 8009620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009624:	460c      	mov	r4, r1
 8009626:	4691      	mov	r9, r2
 8009628:	7e27      	ldrb	r7, [r4, #24]
 800962a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800962c:	2f78      	cmp	r7, #120	; 0x78
 800962e:	4680      	mov	r8, r0
 8009630:	469a      	mov	sl, r3
 8009632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009636:	d807      	bhi.n	8009648 <_printf_i+0x28>
 8009638:	2f62      	cmp	r7, #98	; 0x62
 800963a:	d80a      	bhi.n	8009652 <_printf_i+0x32>
 800963c:	2f00      	cmp	r7, #0
 800963e:	f000 80d8 	beq.w	80097f2 <_printf_i+0x1d2>
 8009642:	2f58      	cmp	r7, #88	; 0x58
 8009644:	f000 80a3 	beq.w	800978e <_printf_i+0x16e>
 8009648:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800964c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009650:	e03a      	b.n	80096c8 <_printf_i+0xa8>
 8009652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009656:	2b15      	cmp	r3, #21
 8009658:	d8f6      	bhi.n	8009648 <_printf_i+0x28>
 800965a:	a001      	add	r0, pc, #4	; (adr r0, 8009660 <_printf_i+0x40>)
 800965c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009660:	080096b9 	.word	0x080096b9
 8009664:	080096cd 	.word	0x080096cd
 8009668:	08009649 	.word	0x08009649
 800966c:	08009649 	.word	0x08009649
 8009670:	08009649 	.word	0x08009649
 8009674:	08009649 	.word	0x08009649
 8009678:	080096cd 	.word	0x080096cd
 800967c:	08009649 	.word	0x08009649
 8009680:	08009649 	.word	0x08009649
 8009684:	08009649 	.word	0x08009649
 8009688:	08009649 	.word	0x08009649
 800968c:	080097d9 	.word	0x080097d9
 8009690:	080096fd 	.word	0x080096fd
 8009694:	080097bb 	.word	0x080097bb
 8009698:	08009649 	.word	0x08009649
 800969c:	08009649 	.word	0x08009649
 80096a0:	080097fb 	.word	0x080097fb
 80096a4:	08009649 	.word	0x08009649
 80096a8:	080096fd 	.word	0x080096fd
 80096ac:	08009649 	.word	0x08009649
 80096b0:	08009649 	.word	0x08009649
 80096b4:	080097c3 	.word	0x080097c3
 80096b8:	680b      	ldr	r3, [r1, #0]
 80096ba:	1d1a      	adds	r2, r3, #4
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	600a      	str	r2, [r1, #0]
 80096c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80096c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096c8:	2301      	movs	r3, #1
 80096ca:	e0a3      	b.n	8009814 <_printf_i+0x1f4>
 80096cc:	6825      	ldr	r5, [r4, #0]
 80096ce:	6808      	ldr	r0, [r1, #0]
 80096d0:	062e      	lsls	r6, r5, #24
 80096d2:	f100 0304 	add.w	r3, r0, #4
 80096d6:	d50a      	bpl.n	80096ee <_printf_i+0xce>
 80096d8:	6805      	ldr	r5, [r0, #0]
 80096da:	600b      	str	r3, [r1, #0]
 80096dc:	2d00      	cmp	r5, #0
 80096de:	da03      	bge.n	80096e8 <_printf_i+0xc8>
 80096e0:	232d      	movs	r3, #45	; 0x2d
 80096e2:	426d      	negs	r5, r5
 80096e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e8:	485e      	ldr	r0, [pc, #376]	; (8009864 <_printf_i+0x244>)
 80096ea:	230a      	movs	r3, #10
 80096ec:	e019      	b.n	8009722 <_printf_i+0x102>
 80096ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80096f2:	6805      	ldr	r5, [r0, #0]
 80096f4:	600b      	str	r3, [r1, #0]
 80096f6:	bf18      	it	ne
 80096f8:	b22d      	sxthne	r5, r5
 80096fa:	e7ef      	b.n	80096dc <_printf_i+0xbc>
 80096fc:	680b      	ldr	r3, [r1, #0]
 80096fe:	6825      	ldr	r5, [r4, #0]
 8009700:	1d18      	adds	r0, r3, #4
 8009702:	6008      	str	r0, [r1, #0]
 8009704:	0628      	lsls	r0, r5, #24
 8009706:	d501      	bpl.n	800970c <_printf_i+0xec>
 8009708:	681d      	ldr	r5, [r3, #0]
 800970a:	e002      	b.n	8009712 <_printf_i+0xf2>
 800970c:	0669      	lsls	r1, r5, #25
 800970e:	d5fb      	bpl.n	8009708 <_printf_i+0xe8>
 8009710:	881d      	ldrh	r5, [r3, #0]
 8009712:	4854      	ldr	r0, [pc, #336]	; (8009864 <_printf_i+0x244>)
 8009714:	2f6f      	cmp	r7, #111	; 0x6f
 8009716:	bf0c      	ite	eq
 8009718:	2308      	moveq	r3, #8
 800971a:	230a      	movne	r3, #10
 800971c:	2100      	movs	r1, #0
 800971e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009722:	6866      	ldr	r6, [r4, #4]
 8009724:	60a6      	str	r6, [r4, #8]
 8009726:	2e00      	cmp	r6, #0
 8009728:	bfa2      	ittt	ge
 800972a:	6821      	ldrge	r1, [r4, #0]
 800972c:	f021 0104 	bicge.w	r1, r1, #4
 8009730:	6021      	strge	r1, [r4, #0]
 8009732:	b90d      	cbnz	r5, 8009738 <_printf_i+0x118>
 8009734:	2e00      	cmp	r6, #0
 8009736:	d04d      	beq.n	80097d4 <_printf_i+0x1b4>
 8009738:	4616      	mov	r6, r2
 800973a:	fbb5 f1f3 	udiv	r1, r5, r3
 800973e:	fb03 5711 	mls	r7, r3, r1, r5
 8009742:	5dc7      	ldrb	r7, [r0, r7]
 8009744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009748:	462f      	mov	r7, r5
 800974a:	42bb      	cmp	r3, r7
 800974c:	460d      	mov	r5, r1
 800974e:	d9f4      	bls.n	800973a <_printf_i+0x11a>
 8009750:	2b08      	cmp	r3, #8
 8009752:	d10b      	bne.n	800976c <_printf_i+0x14c>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	07df      	lsls	r7, r3, #31
 8009758:	d508      	bpl.n	800976c <_printf_i+0x14c>
 800975a:	6923      	ldr	r3, [r4, #16]
 800975c:	6861      	ldr	r1, [r4, #4]
 800975e:	4299      	cmp	r1, r3
 8009760:	bfde      	ittt	le
 8009762:	2330      	movle	r3, #48	; 0x30
 8009764:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800976c:	1b92      	subs	r2, r2, r6
 800976e:	6122      	str	r2, [r4, #16]
 8009770:	f8cd a000 	str.w	sl, [sp]
 8009774:	464b      	mov	r3, r9
 8009776:	aa03      	add	r2, sp, #12
 8009778:	4621      	mov	r1, r4
 800977a:	4640      	mov	r0, r8
 800977c:	f7ff fee2 	bl	8009544 <_printf_common>
 8009780:	3001      	adds	r0, #1
 8009782:	d14c      	bne.n	800981e <_printf_i+0x1fe>
 8009784:	f04f 30ff 	mov.w	r0, #4294967295
 8009788:	b004      	add	sp, #16
 800978a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800978e:	4835      	ldr	r0, [pc, #212]	; (8009864 <_printf_i+0x244>)
 8009790:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	680e      	ldr	r6, [r1, #0]
 8009798:	061f      	lsls	r7, r3, #24
 800979a:	f856 5b04 	ldr.w	r5, [r6], #4
 800979e:	600e      	str	r6, [r1, #0]
 80097a0:	d514      	bpl.n	80097cc <_printf_i+0x1ac>
 80097a2:	07d9      	lsls	r1, r3, #31
 80097a4:	bf44      	itt	mi
 80097a6:	f043 0320 	orrmi.w	r3, r3, #32
 80097aa:	6023      	strmi	r3, [r4, #0]
 80097ac:	b91d      	cbnz	r5, 80097b6 <_printf_i+0x196>
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	f023 0320 	bic.w	r3, r3, #32
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	2310      	movs	r3, #16
 80097b8:	e7b0      	b.n	800971c <_printf_i+0xfc>
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	f043 0320 	orr.w	r3, r3, #32
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	2378      	movs	r3, #120	; 0x78
 80097c4:	4828      	ldr	r0, [pc, #160]	; (8009868 <_printf_i+0x248>)
 80097c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097ca:	e7e3      	b.n	8009794 <_printf_i+0x174>
 80097cc:	065e      	lsls	r6, r3, #25
 80097ce:	bf48      	it	mi
 80097d0:	b2ad      	uxthmi	r5, r5
 80097d2:	e7e6      	b.n	80097a2 <_printf_i+0x182>
 80097d4:	4616      	mov	r6, r2
 80097d6:	e7bb      	b.n	8009750 <_printf_i+0x130>
 80097d8:	680b      	ldr	r3, [r1, #0]
 80097da:	6826      	ldr	r6, [r4, #0]
 80097dc:	6960      	ldr	r0, [r4, #20]
 80097de:	1d1d      	adds	r5, r3, #4
 80097e0:	600d      	str	r5, [r1, #0]
 80097e2:	0635      	lsls	r5, r6, #24
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	d501      	bpl.n	80097ec <_printf_i+0x1cc>
 80097e8:	6018      	str	r0, [r3, #0]
 80097ea:	e002      	b.n	80097f2 <_printf_i+0x1d2>
 80097ec:	0671      	lsls	r1, r6, #25
 80097ee:	d5fb      	bpl.n	80097e8 <_printf_i+0x1c8>
 80097f0:	8018      	strh	r0, [r3, #0]
 80097f2:	2300      	movs	r3, #0
 80097f4:	6123      	str	r3, [r4, #16]
 80097f6:	4616      	mov	r6, r2
 80097f8:	e7ba      	b.n	8009770 <_printf_i+0x150>
 80097fa:	680b      	ldr	r3, [r1, #0]
 80097fc:	1d1a      	adds	r2, r3, #4
 80097fe:	600a      	str	r2, [r1, #0]
 8009800:	681e      	ldr	r6, [r3, #0]
 8009802:	6862      	ldr	r2, [r4, #4]
 8009804:	2100      	movs	r1, #0
 8009806:	4630      	mov	r0, r6
 8009808:	f7f6 fcea 	bl	80001e0 <memchr>
 800980c:	b108      	cbz	r0, 8009812 <_printf_i+0x1f2>
 800980e:	1b80      	subs	r0, r0, r6
 8009810:	6060      	str	r0, [r4, #4]
 8009812:	6863      	ldr	r3, [r4, #4]
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	2300      	movs	r3, #0
 8009818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800981c:	e7a8      	b.n	8009770 <_printf_i+0x150>
 800981e:	6923      	ldr	r3, [r4, #16]
 8009820:	4632      	mov	r2, r6
 8009822:	4649      	mov	r1, r9
 8009824:	4640      	mov	r0, r8
 8009826:	47d0      	blx	sl
 8009828:	3001      	adds	r0, #1
 800982a:	d0ab      	beq.n	8009784 <_printf_i+0x164>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	079b      	lsls	r3, r3, #30
 8009830:	d413      	bmi.n	800985a <_printf_i+0x23a>
 8009832:	68e0      	ldr	r0, [r4, #12]
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	4298      	cmp	r0, r3
 8009838:	bfb8      	it	lt
 800983a:	4618      	movlt	r0, r3
 800983c:	e7a4      	b.n	8009788 <_printf_i+0x168>
 800983e:	2301      	movs	r3, #1
 8009840:	4632      	mov	r2, r6
 8009842:	4649      	mov	r1, r9
 8009844:	4640      	mov	r0, r8
 8009846:	47d0      	blx	sl
 8009848:	3001      	adds	r0, #1
 800984a:	d09b      	beq.n	8009784 <_printf_i+0x164>
 800984c:	3501      	adds	r5, #1
 800984e:	68e3      	ldr	r3, [r4, #12]
 8009850:	9903      	ldr	r1, [sp, #12]
 8009852:	1a5b      	subs	r3, r3, r1
 8009854:	42ab      	cmp	r3, r5
 8009856:	dcf2      	bgt.n	800983e <_printf_i+0x21e>
 8009858:	e7eb      	b.n	8009832 <_printf_i+0x212>
 800985a:	2500      	movs	r5, #0
 800985c:	f104 0619 	add.w	r6, r4, #25
 8009860:	e7f5      	b.n	800984e <_printf_i+0x22e>
 8009862:	bf00      	nop
 8009864:	0800dbba 	.word	0x0800dbba
 8009868:	0800dbcb 	.word	0x0800dbcb

0800986c <_scanf_float>:
 800986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	b087      	sub	sp, #28
 8009872:	4617      	mov	r7, r2
 8009874:	9303      	str	r3, [sp, #12]
 8009876:	688b      	ldr	r3, [r1, #8]
 8009878:	1e5a      	subs	r2, r3, #1
 800987a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800987e:	bf83      	ittte	hi
 8009880:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009884:	195b      	addhi	r3, r3, r5
 8009886:	9302      	strhi	r3, [sp, #8]
 8009888:	2300      	movls	r3, #0
 800988a:	bf86      	itte	hi
 800988c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009890:	608b      	strhi	r3, [r1, #8]
 8009892:	9302      	strls	r3, [sp, #8]
 8009894:	680b      	ldr	r3, [r1, #0]
 8009896:	468b      	mov	fp, r1
 8009898:	2500      	movs	r5, #0
 800989a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800989e:	f84b 3b1c 	str.w	r3, [fp], #28
 80098a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80098a6:	4680      	mov	r8, r0
 80098a8:	460c      	mov	r4, r1
 80098aa:	465e      	mov	r6, fp
 80098ac:	46aa      	mov	sl, r5
 80098ae:	46a9      	mov	r9, r5
 80098b0:	9501      	str	r5, [sp, #4]
 80098b2:	68a2      	ldr	r2, [r4, #8]
 80098b4:	b152      	cbz	r2, 80098cc <_scanf_float+0x60>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b4e      	cmp	r3, #78	; 0x4e
 80098bc:	d864      	bhi.n	8009988 <_scanf_float+0x11c>
 80098be:	2b40      	cmp	r3, #64	; 0x40
 80098c0:	d83c      	bhi.n	800993c <_scanf_float+0xd0>
 80098c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80098c6:	b2c8      	uxtb	r0, r1
 80098c8:	280e      	cmp	r0, #14
 80098ca:	d93a      	bls.n	8009942 <_scanf_float+0xd6>
 80098cc:	f1b9 0f00 	cmp.w	r9, #0
 80098d0:	d003      	beq.n	80098da <_scanf_float+0x6e>
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098de:	f1ba 0f01 	cmp.w	sl, #1
 80098e2:	f200 8113 	bhi.w	8009b0c <_scanf_float+0x2a0>
 80098e6:	455e      	cmp	r6, fp
 80098e8:	f200 8105 	bhi.w	8009af6 <_scanf_float+0x28a>
 80098ec:	2501      	movs	r5, #1
 80098ee:	4628      	mov	r0, r5
 80098f0:	b007      	add	sp, #28
 80098f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80098fa:	2a0d      	cmp	r2, #13
 80098fc:	d8e6      	bhi.n	80098cc <_scanf_float+0x60>
 80098fe:	a101      	add	r1, pc, #4	; (adr r1, 8009904 <_scanf_float+0x98>)
 8009900:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009904:	08009a43 	.word	0x08009a43
 8009908:	080098cd 	.word	0x080098cd
 800990c:	080098cd 	.word	0x080098cd
 8009910:	080098cd 	.word	0x080098cd
 8009914:	08009aa3 	.word	0x08009aa3
 8009918:	08009a7b 	.word	0x08009a7b
 800991c:	080098cd 	.word	0x080098cd
 8009920:	080098cd 	.word	0x080098cd
 8009924:	08009a51 	.word	0x08009a51
 8009928:	080098cd 	.word	0x080098cd
 800992c:	080098cd 	.word	0x080098cd
 8009930:	080098cd 	.word	0x080098cd
 8009934:	080098cd 	.word	0x080098cd
 8009938:	08009a09 	.word	0x08009a09
 800993c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009940:	e7db      	b.n	80098fa <_scanf_float+0x8e>
 8009942:	290e      	cmp	r1, #14
 8009944:	d8c2      	bhi.n	80098cc <_scanf_float+0x60>
 8009946:	a001      	add	r0, pc, #4	; (adr r0, 800994c <_scanf_float+0xe0>)
 8009948:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800994c:	080099fb 	.word	0x080099fb
 8009950:	080098cd 	.word	0x080098cd
 8009954:	080099fb 	.word	0x080099fb
 8009958:	08009a8f 	.word	0x08009a8f
 800995c:	080098cd 	.word	0x080098cd
 8009960:	080099a9 	.word	0x080099a9
 8009964:	080099e5 	.word	0x080099e5
 8009968:	080099e5 	.word	0x080099e5
 800996c:	080099e5 	.word	0x080099e5
 8009970:	080099e5 	.word	0x080099e5
 8009974:	080099e5 	.word	0x080099e5
 8009978:	080099e5 	.word	0x080099e5
 800997c:	080099e5 	.word	0x080099e5
 8009980:	080099e5 	.word	0x080099e5
 8009984:	080099e5 	.word	0x080099e5
 8009988:	2b6e      	cmp	r3, #110	; 0x6e
 800998a:	d809      	bhi.n	80099a0 <_scanf_float+0x134>
 800998c:	2b60      	cmp	r3, #96	; 0x60
 800998e:	d8b2      	bhi.n	80098f6 <_scanf_float+0x8a>
 8009990:	2b54      	cmp	r3, #84	; 0x54
 8009992:	d077      	beq.n	8009a84 <_scanf_float+0x218>
 8009994:	2b59      	cmp	r3, #89	; 0x59
 8009996:	d199      	bne.n	80098cc <_scanf_float+0x60>
 8009998:	2d07      	cmp	r5, #7
 800999a:	d197      	bne.n	80098cc <_scanf_float+0x60>
 800999c:	2508      	movs	r5, #8
 800999e:	e029      	b.n	80099f4 <_scanf_float+0x188>
 80099a0:	2b74      	cmp	r3, #116	; 0x74
 80099a2:	d06f      	beq.n	8009a84 <_scanf_float+0x218>
 80099a4:	2b79      	cmp	r3, #121	; 0x79
 80099a6:	e7f6      	b.n	8009996 <_scanf_float+0x12a>
 80099a8:	6821      	ldr	r1, [r4, #0]
 80099aa:	05c8      	lsls	r0, r1, #23
 80099ac:	d51a      	bpl.n	80099e4 <_scanf_float+0x178>
 80099ae:	9b02      	ldr	r3, [sp, #8]
 80099b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80099b4:	6021      	str	r1, [r4, #0]
 80099b6:	f109 0901 	add.w	r9, r9, #1
 80099ba:	b11b      	cbz	r3, 80099c4 <_scanf_float+0x158>
 80099bc:	3b01      	subs	r3, #1
 80099be:	3201      	adds	r2, #1
 80099c0:	9302      	str	r3, [sp, #8]
 80099c2:	60a2      	str	r2, [r4, #8]
 80099c4:	68a3      	ldr	r3, [r4, #8]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	60a3      	str	r3, [r4, #8]
 80099ca:	6923      	ldr	r3, [r4, #16]
 80099cc:	3301      	adds	r3, #1
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	607b      	str	r3, [r7, #4]
 80099d8:	f340 8084 	ble.w	8009ae4 <_scanf_float+0x278>
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	3301      	adds	r3, #1
 80099e0:	603b      	str	r3, [r7, #0]
 80099e2:	e766      	b.n	80098b2 <_scanf_float+0x46>
 80099e4:	eb1a 0f05 	cmn.w	sl, r5
 80099e8:	f47f af70 	bne.w	80098cc <_scanf_float+0x60>
 80099ec:	6822      	ldr	r2, [r4, #0]
 80099ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80099f2:	6022      	str	r2, [r4, #0]
 80099f4:	f806 3b01 	strb.w	r3, [r6], #1
 80099f8:	e7e4      	b.n	80099c4 <_scanf_float+0x158>
 80099fa:	6822      	ldr	r2, [r4, #0]
 80099fc:	0610      	lsls	r0, r2, #24
 80099fe:	f57f af65 	bpl.w	80098cc <_scanf_float+0x60>
 8009a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a06:	e7f4      	b.n	80099f2 <_scanf_float+0x186>
 8009a08:	f1ba 0f00 	cmp.w	sl, #0
 8009a0c:	d10e      	bne.n	8009a2c <_scanf_float+0x1c0>
 8009a0e:	f1b9 0f00 	cmp.w	r9, #0
 8009a12:	d10e      	bne.n	8009a32 <_scanf_float+0x1c6>
 8009a14:	6822      	ldr	r2, [r4, #0]
 8009a16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a1e:	d108      	bne.n	8009a32 <_scanf_float+0x1c6>
 8009a20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a24:	6022      	str	r2, [r4, #0]
 8009a26:	f04f 0a01 	mov.w	sl, #1
 8009a2a:	e7e3      	b.n	80099f4 <_scanf_float+0x188>
 8009a2c:	f1ba 0f02 	cmp.w	sl, #2
 8009a30:	d055      	beq.n	8009ade <_scanf_float+0x272>
 8009a32:	2d01      	cmp	r5, #1
 8009a34:	d002      	beq.n	8009a3c <_scanf_float+0x1d0>
 8009a36:	2d04      	cmp	r5, #4
 8009a38:	f47f af48 	bne.w	80098cc <_scanf_float+0x60>
 8009a3c:	3501      	adds	r5, #1
 8009a3e:	b2ed      	uxtb	r5, r5
 8009a40:	e7d8      	b.n	80099f4 <_scanf_float+0x188>
 8009a42:	f1ba 0f01 	cmp.w	sl, #1
 8009a46:	f47f af41 	bne.w	80098cc <_scanf_float+0x60>
 8009a4a:	f04f 0a02 	mov.w	sl, #2
 8009a4e:	e7d1      	b.n	80099f4 <_scanf_float+0x188>
 8009a50:	b97d      	cbnz	r5, 8009a72 <_scanf_float+0x206>
 8009a52:	f1b9 0f00 	cmp.w	r9, #0
 8009a56:	f47f af3c 	bne.w	80098d2 <_scanf_float+0x66>
 8009a5a:	6822      	ldr	r2, [r4, #0]
 8009a5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a64:	f47f af39 	bne.w	80098da <_scanf_float+0x6e>
 8009a68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a6c:	6022      	str	r2, [r4, #0]
 8009a6e:	2501      	movs	r5, #1
 8009a70:	e7c0      	b.n	80099f4 <_scanf_float+0x188>
 8009a72:	2d03      	cmp	r5, #3
 8009a74:	d0e2      	beq.n	8009a3c <_scanf_float+0x1d0>
 8009a76:	2d05      	cmp	r5, #5
 8009a78:	e7de      	b.n	8009a38 <_scanf_float+0x1cc>
 8009a7a:	2d02      	cmp	r5, #2
 8009a7c:	f47f af26 	bne.w	80098cc <_scanf_float+0x60>
 8009a80:	2503      	movs	r5, #3
 8009a82:	e7b7      	b.n	80099f4 <_scanf_float+0x188>
 8009a84:	2d06      	cmp	r5, #6
 8009a86:	f47f af21 	bne.w	80098cc <_scanf_float+0x60>
 8009a8a:	2507      	movs	r5, #7
 8009a8c:	e7b2      	b.n	80099f4 <_scanf_float+0x188>
 8009a8e:	6822      	ldr	r2, [r4, #0]
 8009a90:	0591      	lsls	r1, r2, #22
 8009a92:	f57f af1b 	bpl.w	80098cc <_scanf_float+0x60>
 8009a96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009a9a:	6022      	str	r2, [r4, #0]
 8009a9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009aa0:	e7a8      	b.n	80099f4 <_scanf_float+0x188>
 8009aa2:	6822      	ldr	r2, [r4, #0]
 8009aa4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009aa8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009aac:	d006      	beq.n	8009abc <_scanf_float+0x250>
 8009aae:	0550      	lsls	r0, r2, #21
 8009ab0:	f57f af0c 	bpl.w	80098cc <_scanf_float+0x60>
 8009ab4:	f1b9 0f00 	cmp.w	r9, #0
 8009ab8:	f43f af0f 	beq.w	80098da <_scanf_float+0x6e>
 8009abc:	0591      	lsls	r1, r2, #22
 8009abe:	bf58      	it	pl
 8009ac0:	9901      	ldrpl	r1, [sp, #4]
 8009ac2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ac6:	bf58      	it	pl
 8009ac8:	eba9 0101 	subpl.w	r1, r9, r1
 8009acc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009ad0:	bf58      	it	pl
 8009ad2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ad6:	6022      	str	r2, [r4, #0]
 8009ad8:	f04f 0900 	mov.w	r9, #0
 8009adc:	e78a      	b.n	80099f4 <_scanf_float+0x188>
 8009ade:	f04f 0a03 	mov.w	sl, #3
 8009ae2:	e787      	b.n	80099f4 <_scanf_float+0x188>
 8009ae4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ae8:	4639      	mov	r1, r7
 8009aea:	4640      	mov	r0, r8
 8009aec:	4798      	blx	r3
 8009aee:	2800      	cmp	r0, #0
 8009af0:	f43f aedf 	beq.w	80098b2 <_scanf_float+0x46>
 8009af4:	e6ea      	b.n	80098cc <_scanf_float+0x60>
 8009af6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009afa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009afe:	463a      	mov	r2, r7
 8009b00:	4640      	mov	r0, r8
 8009b02:	4798      	blx	r3
 8009b04:	6923      	ldr	r3, [r4, #16]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	6123      	str	r3, [r4, #16]
 8009b0a:	e6ec      	b.n	80098e6 <_scanf_float+0x7a>
 8009b0c:	1e6b      	subs	r3, r5, #1
 8009b0e:	2b06      	cmp	r3, #6
 8009b10:	d825      	bhi.n	8009b5e <_scanf_float+0x2f2>
 8009b12:	2d02      	cmp	r5, #2
 8009b14:	d836      	bhi.n	8009b84 <_scanf_float+0x318>
 8009b16:	455e      	cmp	r6, fp
 8009b18:	f67f aee8 	bls.w	80098ec <_scanf_float+0x80>
 8009b1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b24:	463a      	mov	r2, r7
 8009b26:	4640      	mov	r0, r8
 8009b28:	4798      	blx	r3
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	6123      	str	r3, [r4, #16]
 8009b30:	e7f1      	b.n	8009b16 <_scanf_float+0x2aa>
 8009b32:	9802      	ldr	r0, [sp, #8]
 8009b34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009b3c:	9002      	str	r0, [sp, #8]
 8009b3e:	463a      	mov	r2, r7
 8009b40:	4640      	mov	r0, r8
 8009b42:	4798      	blx	r3
 8009b44:	6923      	ldr	r3, [r4, #16]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b4e:	fa5f fa8a 	uxtb.w	sl, sl
 8009b52:	f1ba 0f02 	cmp.w	sl, #2
 8009b56:	d1ec      	bne.n	8009b32 <_scanf_float+0x2c6>
 8009b58:	3d03      	subs	r5, #3
 8009b5a:	b2ed      	uxtb	r5, r5
 8009b5c:	1b76      	subs	r6, r6, r5
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	05da      	lsls	r2, r3, #23
 8009b62:	d52f      	bpl.n	8009bc4 <_scanf_float+0x358>
 8009b64:	055b      	lsls	r3, r3, #21
 8009b66:	d510      	bpl.n	8009b8a <_scanf_float+0x31e>
 8009b68:	455e      	cmp	r6, fp
 8009b6a:	f67f aebf 	bls.w	80098ec <_scanf_float+0x80>
 8009b6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b76:	463a      	mov	r2, r7
 8009b78:	4640      	mov	r0, r8
 8009b7a:	4798      	blx	r3
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	6123      	str	r3, [r4, #16]
 8009b82:	e7f1      	b.n	8009b68 <_scanf_float+0x2fc>
 8009b84:	46aa      	mov	sl, r5
 8009b86:	9602      	str	r6, [sp, #8]
 8009b88:	e7df      	b.n	8009b4a <_scanf_float+0x2de>
 8009b8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b8e:	6923      	ldr	r3, [r4, #16]
 8009b90:	2965      	cmp	r1, #101	; 0x65
 8009b92:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b96:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b9a:	6123      	str	r3, [r4, #16]
 8009b9c:	d00c      	beq.n	8009bb8 <_scanf_float+0x34c>
 8009b9e:	2945      	cmp	r1, #69	; 0x45
 8009ba0:	d00a      	beq.n	8009bb8 <_scanf_float+0x34c>
 8009ba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ba6:	463a      	mov	r2, r7
 8009ba8:	4640      	mov	r0, r8
 8009baa:	4798      	blx	r3
 8009bac:	6923      	ldr	r3, [r4, #16]
 8009bae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	1eb5      	subs	r5, r6, #2
 8009bb6:	6123      	str	r3, [r4, #16]
 8009bb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bbc:	463a      	mov	r2, r7
 8009bbe:	4640      	mov	r0, r8
 8009bc0:	4798      	blx	r3
 8009bc2:	462e      	mov	r6, r5
 8009bc4:	6825      	ldr	r5, [r4, #0]
 8009bc6:	f015 0510 	ands.w	r5, r5, #16
 8009bca:	d158      	bne.n	8009c7e <_scanf_float+0x412>
 8009bcc:	7035      	strb	r5, [r6, #0]
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bd8:	d11c      	bne.n	8009c14 <_scanf_float+0x3a8>
 8009bda:	9b01      	ldr	r3, [sp, #4]
 8009bdc:	454b      	cmp	r3, r9
 8009bde:	eba3 0209 	sub.w	r2, r3, r9
 8009be2:	d124      	bne.n	8009c2e <_scanf_float+0x3c2>
 8009be4:	2200      	movs	r2, #0
 8009be6:	4659      	mov	r1, fp
 8009be8:	4640      	mov	r0, r8
 8009bea:	f000 ff2b 	bl	800aa44 <_strtod_r>
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	6821      	ldr	r1, [r4, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f011 0f02 	tst.w	r1, #2
 8009bf8:	ec57 6b10 	vmov	r6, r7, d0
 8009bfc:	f103 0204 	add.w	r2, r3, #4
 8009c00:	d020      	beq.n	8009c44 <_scanf_float+0x3d8>
 8009c02:	9903      	ldr	r1, [sp, #12]
 8009c04:	600a      	str	r2, [r1, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	e9c3 6700 	strd	r6, r7, [r3]
 8009c0c:	68e3      	ldr	r3, [r4, #12]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	60e3      	str	r3, [r4, #12]
 8009c12:	e66c      	b.n	80098ee <_scanf_float+0x82>
 8009c14:	9b04      	ldr	r3, [sp, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0e4      	beq.n	8009be4 <_scanf_float+0x378>
 8009c1a:	9905      	ldr	r1, [sp, #20]
 8009c1c:	230a      	movs	r3, #10
 8009c1e:	462a      	mov	r2, r5
 8009c20:	3101      	adds	r1, #1
 8009c22:	4640      	mov	r0, r8
 8009c24:	f000 ff98 	bl	800ab58 <_strtol_r>
 8009c28:	9b04      	ldr	r3, [sp, #16]
 8009c2a:	9e05      	ldr	r6, [sp, #20]
 8009c2c:	1ac2      	subs	r2, r0, r3
 8009c2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009c32:	429e      	cmp	r6, r3
 8009c34:	bf28      	it	cs
 8009c36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009c3a:	4912      	ldr	r1, [pc, #72]	; (8009c84 <_scanf_float+0x418>)
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f000 f8b9 	bl	8009db4 <siprintf>
 8009c42:	e7cf      	b.n	8009be4 <_scanf_float+0x378>
 8009c44:	f011 0f04 	tst.w	r1, #4
 8009c48:	9903      	ldr	r1, [sp, #12]
 8009c4a:	600a      	str	r2, [r1, #0]
 8009c4c:	d1db      	bne.n	8009c06 <_scanf_float+0x39a>
 8009c4e:	f8d3 8000 	ldr.w	r8, [r3]
 8009c52:	ee10 2a10 	vmov	r2, s0
 8009c56:	ee10 0a10 	vmov	r0, s0
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	4639      	mov	r1, r7
 8009c5e:	f7f6 ff65 	bl	8000b2c <__aeabi_dcmpun>
 8009c62:	b128      	cbz	r0, 8009c70 <_scanf_float+0x404>
 8009c64:	4808      	ldr	r0, [pc, #32]	; (8009c88 <_scanf_float+0x41c>)
 8009c66:	f000 f89f 	bl	8009da8 <nanf>
 8009c6a:	ed88 0a00 	vstr	s0, [r8]
 8009c6e:	e7cd      	b.n	8009c0c <_scanf_float+0x3a0>
 8009c70:	4630      	mov	r0, r6
 8009c72:	4639      	mov	r1, r7
 8009c74:	f7f6 ffb8 	bl	8000be8 <__aeabi_d2f>
 8009c78:	f8c8 0000 	str.w	r0, [r8]
 8009c7c:	e7c6      	b.n	8009c0c <_scanf_float+0x3a0>
 8009c7e:	2500      	movs	r5, #0
 8009c80:	e635      	b.n	80098ee <_scanf_float+0x82>
 8009c82:	bf00      	nop
 8009c84:	0800dbdc 	.word	0x0800dbdc
 8009c88:	0800e058 	.word	0x0800e058

08009c8c <iprintf>:
 8009c8c:	b40f      	push	{r0, r1, r2, r3}
 8009c8e:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <iprintf+0x2c>)
 8009c90:	b513      	push	{r0, r1, r4, lr}
 8009c92:	681c      	ldr	r4, [r3, #0]
 8009c94:	b124      	cbz	r4, 8009ca0 <iprintf+0x14>
 8009c96:	69a3      	ldr	r3, [r4, #24]
 8009c98:	b913      	cbnz	r3, 8009ca0 <iprintf+0x14>
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f001 ffb2 	bl	800bc04 <__sinit>
 8009ca0:	ab05      	add	r3, sp, #20
 8009ca2:	9a04      	ldr	r2, [sp, #16]
 8009ca4:	68a1      	ldr	r1, [r4, #8]
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f003 fb37 	bl	800d31c <_vfiprintf_r>
 8009cae:	b002      	add	sp, #8
 8009cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb4:	b004      	add	sp, #16
 8009cb6:	4770      	bx	lr
 8009cb8:	2000000c 	.word	0x2000000c

08009cbc <_puts_r>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	460e      	mov	r6, r1
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	b118      	cbz	r0, 8009ccc <_puts_r+0x10>
 8009cc4:	6983      	ldr	r3, [r0, #24]
 8009cc6:	b90b      	cbnz	r3, 8009ccc <_puts_r+0x10>
 8009cc8:	f001 ff9c 	bl	800bc04 <__sinit>
 8009ccc:	69ab      	ldr	r3, [r5, #24]
 8009cce:	68ac      	ldr	r4, [r5, #8]
 8009cd0:	b913      	cbnz	r3, 8009cd8 <_puts_r+0x1c>
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f001 ff96 	bl	800bc04 <__sinit>
 8009cd8:	4b2c      	ldr	r3, [pc, #176]	; (8009d8c <_puts_r+0xd0>)
 8009cda:	429c      	cmp	r4, r3
 8009cdc:	d120      	bne.n	8009d20 <_puts_r+0x64>
 8009cde:	686c      	ldr	r4, [r5, #4]
 8009ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ce2:	07db      	lsls	r3, r3, #31
 8009ce4:	d405      	bmi.n	8009cf2 <_puts_r+0x36>
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	0598      	lsls	r0, r3, #22
 8009cea:	d402      	bmi.n	8009cf2 <_puts_r+0x36>
 8009cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cee:	f002 fb9a 	bl	800c426 <__retarget_lock_acquire_recursive>
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	0719      	lsls	r1, r3, #28
 8009cf6:	d51d      	bpl.n	8009d34 <_puts_r+0x78>
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	b1db      	cbz	r3, 8009d34 <_puts_r+0x78>
 8009cfc:	3e01      	subs	r6, #1
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d04:	3b01      	subs	r3, #1
 8009d06:	60a3      	str	r3, [r4, #8]
 8009d08:	bb39      	cbnz	r1, 8009d5a <_puts_r+0x9e>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	da38      	bge.n	8009d80 <_puts_r+0xc4>
 8009d0e:	4622      	mov	r2, r4
 8009d10:	210a      	movs	r1, #10
 8009d12:	4628      	mov	r0, r5
 8009d14:	f000 ff22 	bl	800ab5c <__swbuf_r>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d011      	beq.n	8009d40 <_puts_r+0x84>
 8009d1c:	250a      	movs	r5, #10
 8009d1e:	e011      	b.n	8009d44 <_puts_r+0x88>
 8009d20:	4b1b      	ldr	r3, [pc, #108]	; (8009d90 <_puts_r+0xd4>)
 8009d22:	429c      	cmp	r4, r3
 8009d24:	d101      	bne.n	8009d2a <_puts_r+0x6e>
 8009d26:	68ac      	ldr	r4, [r5, #8]
 8009d28:	e7da      	b.n	8009ce0 <_puts_r+0x24>
 8009d2a:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <_puts_r+0xd8>)
 8009d2c:	429c      	cmp	r4, r3
 8009d2e:	bf08      	it	eq
 8009d30:	68ec      	ldreq	r4, [r5, #12]
 8009d32:	e7d5      	b.n	8009ce0 <_puts_r+0x24>
 8009d34:	4621      	mov	r1, r4
 8009d36:	4628      	mov	r0, r5
 8009d38:	f000 ff62 	bl	800ac00 <__swsetup_r>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d0dd      	beq.n	8009cfc <_puts_r+0x40>
 8009d40:	f04f 35ff 	mov.w	r5, #4294967295
 8009d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d46:	07da      	lsls	r2, r3, #31
 8009d48:	d405      	bmi.n	8009d56 <_puts_r+0x9a>
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	059b      	lsls	r3, r3, #22
 8009d4e:	d402      	bmi.n	8009d56 <_puts_r+0x9a>
 8009d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d52:	f002 fb69 	bl	800c428 <__retarget_lock_release_recursive>
 8009d56:	4628      	mov	r0, r5
 8009d58:	bd70      	pop	{r4, r5, r6, pc}
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	da04      	bge.n	8009d68 <_puts_r+0xac>
 8009d5e:	69a2      	ldr	r2, [r4, #24]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	dc06      	bgt.n	8009d72 <_puts_r+0xb6>
 8009d64:	290a      	cmp	r1, #10
 8009d66:	d004      	beq.n	8009d72 <_puts_r+0xb6>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	6022      	str	r2, [r4, #0]
 8009d6e:	7019      	strb	r1, [r3, #0]
 8009d70:	e7c5      	b.n	8009cfe <_puts_r+0x42>
 8009d72:	4622      	mov	r2, r4
 8009d74:	4628      	mov	r0, r5
 8009d76:	f000 fef1 	bl	800ab5c <__swbuf_r>
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	d1bf      	bne.n	8009cfe <_puts_r+0x42>
 8009d7e:	e7df      	b.n	8009d40 <_puts_r+0x84>
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	250a      	movs	r5, #10
 8009d84:	1c5a      	adds	r2, r3, #1
 8009d86:	6022      	str	r2, [r4, #0]
 8009d88:	701d      	strb	r5, [r3, #0]
 8009d8a:	e7db      	b.n	8009d44 <_puts_r+0x88>
 8009d8c:	0800ddf0 	.word	0x0800ddf0
 8009d90:	0800de10 	.word	0x0800de10
 8009d94:	0800ddd0 	.word	0x0800ddd0

08009d98 <puts>:
 8009d98:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <puts+0xc>)
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	6818      	ldr	r0, [r3, #0]
 8009d9e:	f7ff bf8d 	b.w	8009cbc <_puts_r>
 8009da2:	bf00      	nop
 8009da4:	2000000c 	.word	0x2000000c

08009da8 <nanf>:
 8009da8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009db0 <nanf+0x8>
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	7fc00000 	.word	0x7fc00000

08009db4 <siprintf>:
 8009db4:	b40e      	push	{r1, r2, r3}
 8009db6:	b500      	push	{lr}
 8009db8:	b09c      	sub	sp, #112	; 0x70
 8009dba:	ab1d      	add	r3, sp, #116	; 0x74
 8009dbc:	9002      	str	r0, [sp, #8]
 8009dbe:	9006      	str	r0, [sp, #24]
 8009dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009dc4:	4809      	ldr	r0, [pc, #36]	; (8009dec <siprintf+0x38>)
 8009dc6:	9107      	str	r1, [sp, #28]
 8009dc8:	9104      	str	r1, [sp, #16]
 8009dca:	4909      	ldr	r1, [pc, #36]	; (8009df0 <siprintf+0x3c>)
 8009dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd0:	9105      	str	r1, [sp, #20]
 8009dd2:	6800      	ldr	r0, [r0, #0]
 8009dd4:	9301      	str	r3, [sp, #4]
 8009dd6:	a902      	add	r1, sp, #8
 8009dd8:	f003 f976 	bl	800d0c8 <_svfiprintf_r>
 8009ddc:	9b02      	ldr	r3, [sp, #8]
 8009dde:	2200      	movs	r2, #0
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	b01c      	add	sp, #112	; 0x70
 8009de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009de8:	b003      	add	sp, #12
 8009dea:	4770      	bx	lr
 8009dec:	2000000c 	.word	0x2000000c
 8009df0:	ffff0208 	.word	0xffff0208

08009df4 <sulp>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	4604      	mov	r4, r0
 8009df8:	460d      	mov	r5, r1
 8009dfa:	ec45 4b10 	vmov	d0, r4, r5
 8009dfe:	4616      	mov	r6, r2
 8009e00:	f002 fefe 	bl	800cc00 <__ulp>
 8009e04:	ec51 0b10 	vmov	r0, r1, d0
 8009e08:	b17e      	cbz	r6, 8009e2a <sulp+0x36>
 8009e0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dd09      	ble.n	8009e2a <sulp+0x36>
 8009e16:	051b      	lsls	r3, r3, #20
 8009e18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009e1c:	2400      	movs	r4, #0
 8009e1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009e22:	4622      	mov	r2, r4
 8009e24:	462b      	mov	r3, r5
 8009e26:	f7f6 fbe7 	bl	80005f8 <__aeabi_dmul>
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	0000      	movs	r0, r0
	...

08009e30 <_strtod_l>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	b0a3      	sub	sp, #140	; 0x8c
 8009e36:	461f      	mov	r7, r3
 8009e38:	2300      	movs	r3, #0
 8009e3a:	931e      	str	r3, [sp, #120]	; 0x78
 8009e3c:	4ba4      	ldr	r3, [pc, #656]	; (800a0d0 <_strtod_l+0x2a0>)
 8009e3e:	9219      	str	r2, [sp, #100]	; 0x64
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	9307      	str	r3, [sp, #28]
 8009e44:	4604      	mov	r4, r0
 8009e46:	4618      	mov	r0, r3
 8009e48:	4688      	mov	r8, r1
 8009e4a:	f7f6 f9c1 	bl	80001d0 <strlen>
 8009e4e:	f04f 0a00 	mov.w	sl, #0
 8009e52:	4605      	mov	r5, r0
 8009e54:	f04f 0b00 	mov.w	fp, #0
 8009e58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009e5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e5e:	781a      	ldrb	r2, [r3, #0]
 8009e60:	2a2b      	cmp	r2, #43	; 0x2b
 8009e62:	d04c      	beq.n	8009efe <_strtod_l+0xce>
 8009e64:	d839      	bhi.n	8009eda <_strtod_l+0xaa>
 8009e66:	2a0d      	cmp	r2, #13
 8009e68:	d832      	bhi.n	8009ed0 <_strtod_l+0xa0>
 8009e6a:	2a08      	cmp	r2, #8
 8009e6c:	d832      	bhi.n	8009ed4 <_strtod_l+0xa4>
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	d03c      	beq.n	8009eec <_strtod_l+0xbc>
 8009e72:	2300      	movs	r3, #0
 8009e74:	930e      	str	r3, [sp, #56]	; 0x38
 8009e76:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009e78:	7833      	ldrb	r3, [r6, #0]
 8009e7a:	2b30      	cmp	r3, #48	; 0x30
 8009e7c:	f040 80b4 	bne.w	8009fe8 <_strtod_l+0x1b8>
 8009e80:	7873      	ldrb	r3, [r6, #1]
 8009e82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e86:	2b58      	cmp	r3, #88	; 0x58
 8009e88:	d16c      	bne.n	8009f64 <_strtod_l+0x134>
 8009e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	ab1e      	add	r3, sp, #120	; 0x78
 8009e90:	9702      	str	r7, [sp, #8]
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	4a8f      	ldr	r2, [pc, #572]	; (800a0d4 <_strtod_l+0x2a4>)
 8009e96:	ab1f      	add	r3, sp, #124	; 0x7c
 8009e98:	a91d      	add	r1, sp, #116	; 0x74
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f001 ffb6 	bl	800be0c <__gethex>
 8009ea0:	f010 0707 	ands.w	r7, r0, #7
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	d005      	beq.n	8009eb4 <_strtod_l+0x84>
 8009ea8:	2f06      	cmp	r7, #6
 8009eaa:	d12a      	bne.n	8009f02 <_strtod_l+0xd2>
 8009eac:	3601      	adds	r6, #1
 8009eae:	2300      	movs	r3, #0
 8009eb0:	961d      	str	r6, [sp, #116]	; 0x74
 8009eb2:	930e      	str	r3, [sp, #56]	; 0x38
 8009eb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f040 8596 	bne.w	800a9e8 <_strtod_l+0xbb8>
 8009ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ebe:	b1db      	cbz	r3, 8009ef8 <_strtod_l+0xc8>
 8009ec0:	4652      	mov	r2, sl
 8009ec2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ec6:	ec43 2b10 	vmov	d0, r2, r3
 8009eca:	b023      	add	sp, #140	; 0x8c
 8009ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed0:	2a20      	cmp	r2, #32
 8009ed2:	d1ce      	bne.n	8009e72 <_strtod_l+0x42>
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	931d      	str	r3, [sp, #116]	; 0x74
 8009ed8:	e7c0      	b.n	8009e5c <_strtod_l+0x2c>
 8009eda:	2a2d      	cmp	r2, #45	; 0x2d
 8009edc:	d1c9      	bne.n	8009e72 <_strtod_l+0x42>
 8009ede:	2201      	movs	r2, #1
 8009ee0:	920e      	str	r2, [sp, #56]	; 0x38
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	921d      	str	r2, [sp, #116]	; 0x74
 8009ee6:	785b      	ldrb	r3, [r3, #1]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1c4      	bne.n	8009e76 <_strtod_l+0x46>
 8009eec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009eee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f040 8576 	bne.w	800a9e4 <_strtod_l+0xbb4>
 8009ef8:	4652      	mov	r2, sl
 8009efa:	465b      	mov	r3, fp
 8009efc:	e7e3      	b.n	8009ec6 <_strtod_l+0x96>
 8009efe:	2200      	movs	r2, #0
 8009f00:	e7ee      	b.n	8009ee0 <_strtod_l+0xb0>
 8009f02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009f04:	b13a      	cbz	r2, 8009f16 <_strtod_l+0xe6>
 8009f06:	2135      	movs	r1, #53	; 0x35
 8009f08:	a820      	add	r0, sp, #128	; 0x80
 8009f0a:	f002 ff84 	bl	800ce16 <__copybits>
 8009f0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009f10:	4620      	mov	r0, r4
 8009f12:	f002 fb49 	bl	800c5a8 <_Bfree>
 8009f16:	3f01      	subs	r7, #1
 8009f18:	2f05      	cmp	r7, #5
 8009f1a:	d807      	bhi.n	8009f2c <_strtod_l+0xfc>
 8009f1c:	e8df f007 	tbb	[pc, r7]
 8009f20:	1d180b0e 	.word	0x1d180b0e
 8009f24:	030e      	.short	0x030e
 8009f26:	f04f 0b00 	mov.w	fp, #0
 8009f2a:	46da      	mov	sl, fp
 8009f2c:	0728      	lsls	r0, r5, #28
 8009f2e:	d5c1      	bpl.n	8009eb4 <_strtod_l+0x84>
 8009f30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009f34:	e7be      	b.n	8009eb4 <_strtod_l+0x84>
 8009f36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009f3a:	e7f7      	b.n	8009f2c <_strtod_l+0xfc>
 8009f3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009f40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009f42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009f46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f4e:	e7ed      	b.n	8009f2c <_strtod_l+0xfc>
 8009f50:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a0d8 <_strtod_l+0x2a8>
 8009f54:	f04f 0a00 	mov.w	sl, #0
 8009f58:	e7e8      	b.n	8009f2c <_strtod_l+0xfc>
 8009f5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009f5e:	f04f 3aff 	mov.w	sl, #4294967295
 8009f62:	e7e3      	b.n	8009f2c <_strtod_l+0xfc>
 8009f64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	921d      	str	r2, [sp, #116]	; 0x74
 8009f6a:	785b      	ldrb	r3, [r3, #1]
 8009f6c:	2b30      	cmp	r3, #48	; 0x30
 8009f6e:	d0f9      	beq.n	8009f64 <_strtod_l+0x134>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d09f      	beq.n	8009eb4 <_strtod_l+0x84>
 8009f74:	2301      	movs	r3, #1
 8009f76:	f04f 0900 	mov.w	r9, #0
 8009f7a:	9304      	str	r3, [sp, #16]
 8009f7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009f84:	464f      	mov	r7, r9
 8009f86:	220a      	movs	r2, #10
 8009f88:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009f8a:	7806      	ldrb	r6, [r0, #0]
 8009f8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009f90:	b2d9      	uxtb	r1, r3
 8009f92:	2909      	cmp	r1, #9
 8009f94:	d92a      	bls.n	8009fec <_strtod_l+0x1bc>
 8009f96:	9907      	ldr	r1, [sp, #28]
 8009f98:	462a      	mov	r2, r5
 8009f9a:	f003 fb4c 	bl	800d636 <strncmp>
 8009f9e:	b398      	cbz	r0, 800a008 <_strtod_l+0x1d8>
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	4633      	mov	r3, r6
 8009fa4:	463d      	mov	r5, r7
 8009fa6:	9007      	str	r0, [sp, #28]
 8009fa8:	4602      	mov	r2, r0
 8009faa:	2b65      	cmp	r3, #101	; 0x65
 8009fac:	d001      	beq.n	8009fb2 <_strtod_l+0x182>
 8009fae:	2b45      	cmp	r3, #69	; 0x45
 8009fb0:	d118      	bne.n	8009fe4 <_strtod_l+0x1b4>
 8009fb2:	b91d      	cbnz	r5, 8009fbc <_strtod_l+0x18c>
 8009fb4:	9b04      	ldr	r3, [sp, #16]
 8009fb6:	4303      	orrs	r3, r0
 8009fb8:	d098      	beq.n	8009eec <_strtod_l+0xbc>
 8009fba:	2500      	movs	r5, #0
 8009fbc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009fc0:	f108 0301 	add.w	r3, r8, #1
 8009fc4:	931d      	str	r3, [sp, #116]	; 0x74
 8009fc6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009fca:	2b2b      	cmp	r3, #43	; 0x2b
 8009fcc:	d075      	beq.n	800a0ba <_strtod_l+0x28a>
 8009fce:	2b2d      	cmp	r3, #45	; 0x2d
 8009fd0:	d07b      	beq.n	800a0ca <_strtod_l+0x29a>
 8009fd2:	f04f 0c00 	mov.w	ip, #0
 8009fd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009fda:	2909      	cmp	r1, #9
 8009fdc:	f240 8082 	bls.w	800a0e4 <_strtod_l+0x2b4>
 8009fe0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009fe4:	2600      	movs	r6, #0
 8009fe6:	e09d      	b.n	800a124 <_strtod_l+0x2f4>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	e7c4      	b.n	8009f76 <_strtod_l+0x146>
 8009fec:	2f08      	cmp	r7, #8
 8009fee:	bfd8      	it	le
 8009ff0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009ff2:	f100 0001 	add.w	r0, r0, #1
 8009ff6:	bfda      	itte	le
 8009ff8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ffc:	9309      	strle	r3, [sp, #36]	; 0x24
 8009ffe:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a002:	3701      	adds	r7, #1
 800a004:	901d      	str	r0, [sp, #116]	; 0x74
 800a006:	e7bf      	b.n	8009f88 <_strtod_l+0x158>
 800a008:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a00a:	195a      	adds	r2, r3, r5
 800a00c:	921d      	str	r2, [sp, #116]	; 0x74
 800a00e:	5d5b      	ldrb	r3, [r3, r5]
 800a010:	2f00      	cmp	r7, #0
 800a012:	d037      	beq.n	800a084 <_strtod_l+0x254>
 800a014:	9007      	str	r0, [sp, #28]
 800a016:	463d      	mov	r5, r7
 800a018:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a01c:	2a09      	cmp	r2, #9
 800a01e:	d912      	bls.n	800a046 <_strtod_l+0x216>
 800a020:	2201      	movs	r2, #1
 800a022:	e7c2      	b.n	8009faa <_strtod_l+0x17a>
 800a024:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	921d      	str	r2, [sp, #116]	; 0x74
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	3001      	adds	r0, #1
 800a02e:	2b30      	cmp	r3, #48	; 0x30
 800a030:	d0f8      	beq.n	800a024 <_strtod_l+0x1f4>
 800a032:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a036:	2a08      	cmp	r2, #8
 800a038:	f200 84db 	bhi.w	800a9f2 <_strtod_l+0xbc2>
 800a03c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a03e:	9007      	str	r0, [sp, #28]
 800a040:	2000      	movs	r0, #0
 800a042:	920a      	str	r2, [sp, #40]	; 0x28
 800a044:	4605      	mov	r5, r0
 800a046:	3b30      	subs	r3, #48	; 0x30
 800a048:	f100 0201 	add.w	r2, r0, #1
 800a04c:	d014      	beq.n	800a078 <_strtod_l+0x248>
 800a04e:	9907      	ldr	r1, [sp, #28]
 800a050:	4411      	add	r1, r2
 800a052:	9107      	str	r1, [sp, #28]
 800a054:	462a      	mov	r2, r5
 800a056:	eb00 0e05 	add.w	lr, r0, r5
 800a05a:	210a      	movs	r1, #10
 800a05c:	4572      	cmp	r2, lr
 800a05e:	d113      	bne.n	800a088 <_strtod_l+0x258>
 800a060:	182a      	adds	r2, r5, r0
 800a062:	2a08      	cmp	r2, #8
 800a064:	f105 0501 	add.w	r5, r5, #1
 800a068:	4405      	add	r5, r0
 800a06a:	dc1c      	bgt.n	800a0a6 <_strtod_l+0x276>
 800a06c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a06e:	220a      	movs	r2, #10
 800a070:	fb02 3301 	mla	r3, r2, r1, r3
 800a074:	9309      	str	r3, [sp, #36]	; 0x24
 800a076:	2200      	movs	r2, #0
 800a078:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a07a:	1c59      	adds	r1, r3, #1
 800a07c:	911d      	str	r1, [sp, #116]	; 0x74
 800a07e:	785b      	ldrb	r3, [r3, #1]
 800a080:	4610      	mov	r0, r2
 800a082:	e7c9      	b.n	800a018 <_strtod_l+0x1e8>
 800a084:	4638      	mov	r0, r7
 800a086:	e7d2      	b.n	800a02e <_strtod_l+0x1fe>
 800a088:	2a08      	cmp	r2, #8
 800a08a:	dc04      	bgt.n	800a096 <_strtod_l+0x266>
 800a08c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a08e:	434e      	muls	r6, r1
 800a090:	9609      	str	r6, [sp, #36]	; 0x24
 800a092:	3201      	adds	r2, #1
 800a094:	e7e2      	b.n	800a05c <_strtod_l+0x22c>
 800a096:	f102 0c01 	add.w	ip, r2, #1
 800a09a:	f1bc 0f10 	cmp.w	ip, #16
 800a09e:	bfd8      	it	le
 800a0a0:	fb01 f909 	mulle.w	r9, r1, r9
 800a0a4:	e7f5      	b.n	800a092 <_strtod_l+0x262>
 800a0a6:	2d10      	cmp	r5, #16
 800a0a8:	bfdc      	itt	le
 800a0aa:	220a      	movle	r2, #10
 800a0ac:	fb02 3909 	mlale	r9, r2, r9, r3
 800a0b0:	e7e1      	b.n	800a076 <_strtod_l+0x246>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	e77c      	b.n	8009fb4 <_strtod_l+0x184>
 800a0ba:	f04f 0c00 	mov.w	ip, #0
 800a0be:	f108 0302 	add.w	r3, r8, #2
 800a0c2:	931d      	str	r3, [sp, #116]	; 0x74
 800a0c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a0c8:	e785      	b.n	8009fd6 <_strtod_l+0x1a6>
 800a0ca:	f04f 0c01 	mov.w	ip, #1
 800a0ce:	e7f6      	b.n	800a0be <_strtod_l+0x28e>
 800a0d0:	0800de9c 	.word	0x0800de9c
 800a0d4:	0800dbe4 	.word	0x0800dbe4
 800a0d8:	7ff00000 	.word	0x7ff00000
 800a0dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0de:	1c59      	adds	r1, r3, #1
 800a0e0:	911d      	str	r1, [sp, #116]	; 0x74
 800a0e2:	785b      	ldrb	r3, [r3, #1]
 800a0e4:	2b30      	cmp	r3, #48	; 0x30
 800a0e6:	d0f9      	beq.n	800a0dc <_strtod_l+0x2ac>
 800a0e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a0ec:	2908      	cmp	r1, #8
 800a0ee:	f63f af79 	bhi.w	8009fe4 <_strtod_l+0x1b4>
 800a0f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a0f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0f8:	9308      	str	r3, [sp, #32]
 800a0fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0fc:	1c59      	adds	r1, r3, #1
 800a0fe:	911d      	str	r1, [sp, #116]	; 0x74
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a106:	2e09      	cmp	r6, #9
 800a108:	d937      	bls.n	800a17a <_strtod_l+0x34a>
 800a10a:	9e08      	ldr	r6, [sp, #32]
 800a10c:	1b89      	subs	r1, r1, r6
 800a10e:	2908      	cmp	r1, #8
 800a110:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a114:	dc02      	bgt.n	800a11c <_strtod_l+0x2ec>
 800a116:	4576      	cmp	r6, lr
 800a118:	bfa8      	it	ge
 800a11a:	4676      	movge	r6, lr
 800a11c:	f1bc 0f00 	cmp.w	ip, #0
 800a120:	d000      	beq.n	800a124 <_strtod_l+0x2f4>
 800a122:	4276      	negs	r6, r6
 800a124:	2d00      	cmp	r5, #0
 800a126:	d14f      	bne.n	800a1c8 <_strtod_l+0x398>
 800a128:	9904      	ldr	r1, [sp, #16]
 800a12a:	4301      	orrs	r1, r0
 800a12c:	f47f aec2 	bne.w	8009eb4 <_strtod_l+0x84>
 800a130:	2a00      	cmp	r2, #0
 800a132:	f47f aedb 	bne.w	8009eec <_strtod_l+0xbc>
 800a136:	2b69      	cmp	r3, #105	; 0x69
 800a138:	d027      	beq.n	800a18a <_strtod_l+0x35a>
 800a13a:	dc24      	bgt.n	800a186 <_strtod_l+0x356>
 800a13c:	2b49      	cmp	r3, #73	; 0x49
 800a13e:	d024      	beq.n	800a18a <_strtod_l+0x35a>
 800a140:	2b4e      	cmp	r3, #78	; 0x4e
 800a142:	f47f aed3 	bne.w	8009eec <_strtod_l+0xbc>
 800a146:	499e      	ldr	r1, [pc, #632]	; (800a3c0 <_strtod_l+0x590>)
 800a148:	a81d      	add	r0, sp, #116	; 0x74
 800a14a:	f002 f8b7 	bl	800c2bc <__match>
 800a14e:	2800      	cmp	r0, #0
 800a150:	f43f aecc 	beq.w	8009eec <_strtod_l+0xbc>
 800a154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b28      	cmp	r3, #40	; 0x28
 800a15a:	d12d      	bne.n	800a1b8 <_strtod_l+0x388>
 800a15c:	4999      	ldr	r1, [pc, #612]	; (800a3c4 <_strtod_l+0x594>)
 800a15e:	aa20      	add	r2, sp, #128	; 0x80
 800a160:	a81d      	add	r0, sp, #116	; 0x74
 800a162:	f002 f8bf 	bl	800c2e4 <__hexnan>
 800a166:	2805      	cmp	r0, #5
 800a168:	d126      	bne.n	800a1b8 <_strtod_l+0x388>
 800a16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a16c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a170:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a174:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a178:	e69c      	b.n	8009eb4 <_strtod_l+0x84>
 800a17a:	210a      	movs	r1, #10
 800a17c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a180:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a184:	e7b9      	b.n	800a0fa <_strtod_l+0x2ca>
 800a186:	2b6e      	cmp	r3, #110	; 0x6e
 800a188:	e7db      	b.n	800a142 <_strtod_l+0x312>
 800a18a:	498f      	ldr	r1, [pc, #572]	; (800a3c8 <_strtod_l+0x598>)
 800a18c:	a81d      	add	r0, sp, #116	; 0x74
 800a18e:	f002 f895 	bl	800c2bc <__match>
 800a192:	2800      	cmp	r0, #0
 800a194:	f43f aeaa 	beq.w	8009eec <_strtod_l+0xbc>
 800a198:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a19a:	498c      	ldr	r1, [pc, #560]	; (800a3cc <_strtod_l+0x59c>)
 800a19c:	3b01      	subs	r3, #1
 800a19e:	a81d      	add	r0, sp, #116	; 0x74
 800a1a0:	931d      	str	r3, [sp, #116]	; 0x74
 800a1a2:	f002 f88b 	bl	800c2bc <__match>
 800a1a6:	b910      	cbnz	r0, 800a1ae <_strtod_l+0x37e>
 800a1a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	931d      	str	r3, [sp, #116]	; 0x74
 800a1ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a3dc <_strtod_l+0x5ac>
 800a1b2:	f04f 0a00 	mov.w	sl, #0
 800a1b6:	e67d      	b.n	8009eb4 <_strtod_l+0x84>
 800a1b8:	4885      	ldr	r0, [pc, #532]	; (800a3d0 <_strtod_l+0x5a0>)
 800a1ba:	f003 f9e1 	bl	800d580 <nan>
 800a1be:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a1c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a1c6:	e675      	b.n	8009eb4 <_strtod_l+0x84>
 800a1c8:	9b07      	ldr	r3, [sp, #28]
 800a1ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1cc:	1af3      	subs	r3, r6, r3
 800a1ce:	2f00      	cmp	r7, #0
 800a1d0:	bf08      	it	eq
 800a1d2:	462f      	moveq	r7, r5
 800a1d4:	2d10      	cmp	r5, #16
 800a1d6:	9308      	str	r3, [sp, #32]
 800a1d8:	46a8      	mov	r8, r5
 800a1da:	bfa8      	it	ge
 800a1dc:	f04f 0810 	movge.w	r8, #16
 800a1e0:	f7f6 f990 	bl	8000504 <__aeabi_ui2d>
 800a1e4:	2d09      	cmp	r5, #9
 800a1e6:	4682      	mov	sl, r0
 800a1e8:	468b      	mov	fp, r1
 800a1ea:	dd13      	ble.n	800a214 <_strtod_l+0x3e4>
 800a1ec:	4b79      	ldr	r3, [pc, #484]	; (800a3d4 <_strtod_l+0x5a4>)
 800a1ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a1f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a1f6:	f7f6 f9ff 	bl	80005f8 <__aeabi_dmul>
 800a1fa:	4682      	mov	sl, r0
 800a1fc:	4648      	mov	r0, r9
 800a1fe:	468b      	mov	fp, r1
 800a200:	f7f6 f980 	bl	8000504 <__aeabi_ui2d>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4650      	mov	r0, sl
 800a20a:	4659      	mov	r1, fp
 800a20c:	f7f6 f83e 	bl	800028c <__adddf3>
 800a210:	4682      	mov	sl, r0
 800a212:	468b      	mov	fp, r1
 800a214:	2d0f      	cmp	r5, #15
 800a216:	dc38      	bgt.n	800a28a <_strtod_l+0x45a>
 800a218:	9b08      	ldr	r3, [sp, #32]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f43f ae4a 	beq.w	8009eb4 <_strtod_l+0x84>
 800a220:	dd24      	ble.n	800a26c <_strtod_l+0x43c>
 800a222:	2b16      	cmp	r3, #22
 800a224:	dc0b      	bgt.n	800a23e <_strtod_l+0x40e>
 800a226:	4d6b      	ldr	r5, [pc, #428]	; (800a3d4 <_strtod_l+0x5a4>)
 800a228:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a22c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a230:	4652      	mov	r2, sl
 800a232:	465b      	mov	r3, fp
 800a234:	f7f6 f9e0 	bl	80005f8 <__aeabi_dmul>
 800a238:	4682      	mov	sl, r0
 800a23a:	468b      	mov	fp, r1
 800a23c:	e63a      	b.n	8009eb4 <_strtod_l+0x84>
 800a23e:	9a08      	ldr	r2, [sp, #32]
 800a240:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a244:	4293      	cmp	r3, r2
 800a246:	db20      	blt.n	800a28a <_strtod_l+0x45a>
 800a248:	4c62      	ldr	r4, [pc, #392]	; (800a3d4 <_strtod_l+0x5a4>)
 800a24a:	f1c5 050f 	rsb	r5, r5, #15
 800a24e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a252:	4652      	mov	r2, sl
 800a254:	465b      	mov	r3, fp
 800a256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a25a:	f7f6 f9cd 	bl	80005f8 <__aeabi_dmul>
 800a25e:	9b08      	ldr	r3, [sp, #32]
 800a260:	1b5d      	subs	r5, r3, r5
 800a262:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a266:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a26a:	e7e3      	b.n	800a234 <_strtod_l+0x404>
 800a26c:	9b08      	ldr	r3, [sp, #32]
 800a26e:	3316      	adds	r3, #22
 800a270:	db0b      	blt.n	800a28a <_strtod_l+0x45a>
 800a272:	9b07      	ldr	r3, [sp, #28]
 800a274:	4a57      	ldr	r2, [pc, #348]	; (800a3d4 <_strtod_l+0x5a4>)
 800a276:	1b9e      	subs	r6, r3, r6
 800a278:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a27c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a280:	4650      	mov	r0, sl
 800a282:	4659      	mov	r1, fp
 800a284:	f7f6 fae2 	bl	800084c <__aeabi_ddiv>
 800a288:	e7d6      	b.n	800a238 <_strtod_l+0x408>
 800a28a:	9b08      	ldr	r3, [sp, #32]
 800a28c:	eba5 0808 	sub.w	r8, r5, r8
 800a290:	4498      	add	r8, r3
 800a292:	f1b8 0f00 	cmp.w	r8, #0
 800a296:	dd71      	ble.n	800a37c <_strtod_l+0x54c>
 800a298:	f018 030f 	ands.w	r3, r8, #15
 800a29c:	d00a      	beq.n	800a2b4 <_strtod_l+0x484>
 800a29e:	494d      	ldr	r1, [pc, #308]	; (800a3d4 <_strtod_l+0x5a4>)
 800a2a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2a4:	4652      	mov	r2, sl
 800a2a6:	465b      	mov	r3, fp
 800a2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ac:	f7f6 f9a4 	bl	80005f8 <__aeabi_dmul>
 800a2b0:	4682      	mov	sl, r0
 800a2b2:	468b      	mov	fp, r1
 800a2b4:	f038 080f 	bics.w	r8, r8, #15
 800a2b8:	d04d      	beq.n	800a356 <_strtod_l+0x526>
 800a2ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a2be:	dd22      	ble.n	800a306 <_strtod_l+0x4d6>
 800a2c0:	2500      	movs	r5, #0
 800a2c2:	462e      	mov	r6, r5
 800a2c4:	9509      	str	r5, [sp, #36]	; 0x24
 800a2c6:	9507      	str	r5, [sp, #28]
 800a2c8:	2322      	movs	r3, #34	; 0x22
 800a2ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a3dc <_strtod_l+0x5ac>
 800a2ce:	6023      	str	r3, [r4, #0]
 800a2d0:	f04f 0a00 	mov.w	sl, #0
 800a2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f43f adec 	beq.w	8009eb4 <_strtod_l+0x84>
 800a2dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f002 f962 	bl	800c5a8 <_Bfree>
 800a2e4:	9907      	ldr	r1, [sp, #28]
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f002 f95e 	bl	800c5a8 <_Bfree>
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f002 f95a 	bl	800c5a8 <_Bfree>
 800a2f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f002 f956 	bl	800c5a8 <_Bfree>
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	4620      	mov	r0, r4
 800a300:	f002 f952 	bl	800c5a8 <_Bfree>
 800a304:	e5d6      	b.n	8009eb4 <_strtod_l+0x84>
 800a306:	2300      	movs	r3, #0
 800a308:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a30c:	4650      	mov	r0, sl
 800a30e:	4659      	mov	r1, fp
 800a310:	4699      	mov	r9, r3
 800a312:	f1b8 0f01 	cmp.w	r8, #1
 800a316:	dc21      	bgt.n	800a35c <_strtod_l+0x52c>
 800a318:	b10b      	cbz	r3, 800a31e <_strtod_l+0x4ee>
 800a31a:	4682      	mov	sl, r0
 800a31c:	468b      	mov	fp, r1
 800a31e:	4b2e      	ldr	r3, [pc, #184]	; (800a3d8 <_strtod_l+0x5a8>)
 800a320:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a324:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a328:	4652      	mov	r2, sl
 800a32a:	465b      	mov	r3, fp
 800a32c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a330:	f7f6 f962 	bl	80005f8 <__aeabi_dmul>
 800a334:	4b29      	ldr	r3, [pc, #164]	; (800a3dc <_strtod_l+0x5ac>)
 800a336:	460a      	mov	r2, r1
 800a338:	400b      	ands	r3, r1
 800a33a:	4929      	ldr	r1, [pc, #164]	; (800a3e0 <_strtod_l+0x5b0>)
 800a33c:	428b      	cmp	r3, r1
 800a33e:	4682      	mov	sl, r0
 800a340:	d8be      	bhi.n	800a2c0 <_strtod_l+0x490>
 800a342:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a346:	428b      	cmp	r3, r1
 800a348:	bf86      	itte	hi
 800a34a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a3e4 <_strtod_l+0x5b4>
 800a34e:	f04f 3aff 	movhi.w	sl, #4294967295
 800a352:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a356:	2300      	movs	r3, #0
 800a358:	9304      	str	r3, [sp, #16]
 800a35a:	e081      	b.n	800a460 <_strtod_l+0x630>
 800a35c:	f018 0f01 	tst.w	r8, #1
 800a360:	d007      	beq.n	800a372 <_strtod_l+0x542>
 800a362:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <_strtod_l+0x5a8>)
 800a364:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f6 f944 	bl	80005f8 <__aeabi_dmul>
 800a370:	2301      	movs	r3, #1
 800a372:	f109 0901 	add.w	r9, r9, #1
 800a376:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a37a:	e7ca      	b.n	800a312 <_strtod_l+0x4e2>
 800a37c:	d0eb      	beq.n	800a356 <_strtod_l+0x526>
 800a37e:	f1c8 0800 	rsb	r8, r8, #0
 800a382:	f018 020f 	ands.w	r2, r8, #15
 800a386:	d00a      	beq.n	800a39e <_strtod_l+0x56e>
 800a388:	4b12      	ldr	r3, [pc, #72]	; (800a3d4 <_strtod_l+0x5a4>)
 800a38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a38e:	4650      	mov	r0, sl
 800a390:	4659      	mov	r1, fp
 800a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a396:	f7f6 fa59 	bl	800084c <__aeabi_ddiv>
 800a39a:	4682      	mov	sl, r0
 800a39c:	468b      	mov	fp, r1
 800a39e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a3a2:	d0d8      	beq.n	800a356 <_strtod_l+0x526>
 800a3a4:	f1b8 0f1f 	cmp.w	r8, #31
 800a3a8:	dd1e      	ble.n	800a3e8 <_strtod_l+0x5b8>
 800a3aa:	2500      	movs	r5, #0
 800a3ac:	462e      	mov	r6, r5
 800a3ae:	9509      	str	r5, [sp, #36]	; 0x24
 800a3b0:	9507      	str	r5, [sp, #28]
 800a3b2:	2322      	movs	r3, #34	; 0x22
 800a3b4:	f04f 0a00 	mov.w	sl, #0
 800a3b8:	f04f 0b00 	mov.w	fp, #0
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	e789      	b.n	800a2d4 <_strtod_l+0x4a4>
 800a3c0:	0800dbb5 	.word	0x0800dbb5
 800a3c4:	0800dbf8 	.word	0x0800dbf8
 800a3c8:	0800dbad 	.word	0x0800dbad
 800a3cc:	0800dd3c 	.word	0x0800dd3c
 800a3d0:	0800e058 	.word	0x0800e058
 800a3d4:	0800df38 	.word	0x0800df38
 800a3d8:	0800df10 	.word	0x0800df10
 800a3dc:	7ff00000 	.word	0x7ff00000
 800a3e0:	7ca00000 	.word	0x7ca00000
 800a3e4:	7fefffff 	.word	0x7fefffff
 800a3e8:	f018 0310 	ands.w	r3, r8, #16
 800a3ec:	bf18      	it	ne
 800a3ee:	236a      	movne	r3, #106	; 0x6a
 800a3f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a7a8 <_strtod_l+0x978>
 800a3f4:	9304      	str	r3, [sp, #16]
 800a3f6:	4650      	mov	r0, sl
 800a3f8:	4659      	mov	r1, fp
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f018 0f01 	tst.w	r8, #1
 800a400:	d004      	beq.n	800a40c <_strtod_l+0x5dc>
 800a402:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a406:	f7f6 f8f7 	bl	80005f8 <__aeabi_dmul>
 800a40a:	2301      	movs	r3, #1
 800a40c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a410:	f109 0908 	add.w	r9, r9, #8
 800a414:	d1f2      	bne.n	800a3fc <_strtod_l+0x5cc>
 800a416:	b10b      	cbz	r3, 800a41c <_strtod_l+0x5ec>
 800a418:	4682      	mov	sl, r0
 800a41a:	468b      	mov	fp, r1
 800a41c:	9b04      	ldr	r3, [sp, #16]
 800a41e:	b1bb      	cbz	r3, 800a450 <_strtod_l+0x620>
 800a420:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a424:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a428:	2b00      	cmp	r3, #0
 800a42a:	4659      	mov	r1, fp
 800a42c:	dd10      	ble.n	800a450 <_strtod_l+0x620>
 800a42e:	2b1f      	cmp	r3, #31
 800a430:	f340 8128 	ble.w	800a684 <_strtod_l+0x854>
 800a434:	2b34      	cmp	r3, #52	; 0x34
 800a436:	bfde      	ittt	le
 800a438:	3b20      	suble	r3, #32
 800a43a:	f04f 32ff 	movle.w	r2, #4294967295
 800a43e:	fa02 f303 	lslle.w	r3, r2, r3
 800a442:	f04f 0a00 	mov.w	sl, #0
 800a446:	bfcc      	ite	gt
 800a448:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a44c:	ea03 0b01 	andle.w	fp, r3, r1
 800a450:	2200      	movs	r2, #0
 800a452:	2300      	movs	r3, #0
 800a454:	4650      	mov	r0, sl
 800a456:	4659      	mov	r1, fp
 800a458:	f7f6 fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d1a4      	bne.n	800a3aa <_strtod_l+0x57a>
 800a460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a466:	462b      	mov	r3, r5
 800a468:	463a      	mov	r2, r7
 800a46a:	4620      	mov	r0, r4
 800a46c:	f002 f908 	bl	800c680 <__s2b>
 800a470:	9009      	str	r0, [sp, #36]	; 0x24
 800a472:	2800      	cmp	r0, #0
 800a474:	f43f af24 	beq.w	800a2c0 <_strtod_l+0x490>
 800a478:	9b07      	ldr	r3, [sp, #28]
 800a47a:	1b9e      	subs	r6, r3, r6
 800a47c:	9b08      	ldr	r3, [sp, #32]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	bfb4      	ite	lt
 800a482:	4633      	movlt	r3, r6
 800a484:	2300      	movge	r3, #0
 800a486:	9310      	str	r3, [sp, #64]	; 0x40
 800a488:	9b08      	ldr	r3, [sp, #32]
 800a48a:	2500      	movs	r5, #0
 800a48c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a490:	9318      	str	r3, [sp, #96]	; 0x60
 800a492:	462e      	mov	r6, r5
 800a494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a496:	4620      	mov	r0, r4
 800a498:	6859      	ldr	r1, [r3, #4]
 800a49a:	f002 f845 	bl	800c528 <_Balloc>
 800a49e:	9007      	str	r0, [sp, #28]
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	f43f af11 	beq.w	800a2c8 <_strtod_l+0x498>
 800a4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a8:	691a      	ldr	r2, [r3, #16]
 800a4aa:	3202      	adds	r2, #2
 800a4ac:	f103 010c 	add.w	r1, r3, #12
 800a4b0:	0092      	lsls	r2, r2, #2
 800a4b2:	300c      	adds	r0, #12
 800a4b4:	f7fe fd5a 	bl	8008f6c <memcpy>
 800a4b8:	ec4b ab10 	vmov	d0, sl, fp
 800a4bc:	aa20      	add	r2, sp, #128	; 0x80
 800a4be:	a91f      	add	r1, sp, #124	; 0x7c
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a4c6:	f002 fc17 	bl	800ccf8 <__d2b>
 800a4ca:	901e      	str	r0, [sp, #120]	; 0x78
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f43f aefb 	beq.w	800a2c8 <_strtod_l+0x498>
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f002 f96d 	bl	800c7b4 <__i2b>
 800a4da:	4606      	mov	r6, r0
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	f43f aef3 	beq.w	800a2c8 <_strtod_l+0x498>
 800a4e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a4e4:	9904      	ldr	r1, [sp, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bfab      	itete	ge
 800a4ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a4ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a4ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a4f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a4f4:	bfac      	ite	ge
 800a4f6:	eb03 0902 	addge.w	r9, r3, r2
 800a4fa:	1ad7      	sublt	r7, r2, r3
 800a4fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a4fe:	eba3 0801 	sub.w	r8, r3, r1
 800a502:	4490      	add	r8, r2
 800a504:	4ba3      	ldr	r3, [pc, #652]	; (800a794 <_strtod_l+0x964>)
 800a506:	f108 38ff 	add.w	r8, r8, #4294967295
 800a50a:	4598      	cmp	r8, r3
 800a50c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a510:	f280 80cc 	bge.w	800a6ac <_strtod_l+0x87c>
 800a514:	eba3 0308 	sub.w	r3, r3, r8
 800a518:	2b1f      	cmp	r3, #31
 800a51a:	eba2 0203 	sub.w	r2, r2, r3
 800a51e:	f04f 0101 	mov.w	r1, #1
 800a522:	f300 80b6 	bgt.w	800a692 <_strtod_l+0x862>
 800a526:	fa01 f303 	lsl.w	r3, r1, r3
 800a52a:	9311      	str	r3, [sp, #68]	; 0x44
 800a52c:	2300      	movs	r3, #0
 800a52e:	930c      	str	r3, [sp, #48]	; 0x30
 800a530:	eb09 0802 	add.w	r8, r9, r2
 800a534:	9b04      	ldr	r3, [sp, #16]
 800a536:	45c1      	cmp	r9, r8
 800a538:	4417      	add	r7, r2
 800a53a:	441f      	add	r7, r3
 800a53c:	464b      	mov	r3, r9
 800a53e:	bfa8      	it	ge
 800a540:	4643      	movge	r3, r8
 800a542:	42bb      	cmp	r3, r7
 800a544:	bfa8      	it	ge
 800a546:	463b      	movge	r3, r7
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bfc2      	ittt	gt
 800a54c:	eba8 0803 	subgt.w	r8, r8, r3
 800a550:	1aff      	subgt	r7, r7, r3
 800a552:	eba9 0903 	subgt.w	r9, r9, r3
 800a556:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dd17      	ble.n	800a58c <_strtod_l+0x75c>
 800a55c:	4631      	mov	r1, r6
 800a55e:	461a      	mov	r2, r3
 800a560:	4620      	mov	r0, r4
 800a562:	f002 f9e3 	bl	800c92c <__pow5mult>
 800a566:	4606      	mov	r6, r0
 800a568:	2800      	cmp	r0, #0
 800a56a:	f43f aead 	beq.w	800a2c8 <_strtod_l+0x498>
 800a56e:	4601      	mov	r1, r0
 800a570:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a572:	4620      	mov	r0, r4
 800a574:	f002 f934 	bl	800c7e0 <__multiply>
 800a578:	900f      	str	r0, [sp, #60]	; 0x3c
 800a57a:	2800      	cmp	r0, #0
 800a57c:	f43f aea4 	beq.w	800a2c8 <_strtod_l+0x498>
 800a580:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a582:	4620      	mov	r0, r4
 800a584:	f002 f810 	bl	800c5a8 <_Bfree>
 800a588:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a58a:	931e      	str	r3, [sp, #120]	; 0x78
 800a58c:	f1b8 0f00 	cmp.w	r8, #0
 800a590:	f300 8091 	bgt.w	800a6b6 <_strtod_l+0x886>
 800a594:	9b08      	ldr	r3, [sp, #32]
 800a596:	2b00      	cmp	r3, #0
 800a598:	dd08      	ble.n	800a5ac <_strtod_l+0x77c>
 800a59a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a59c:	9907      	ldr	r1, [sp, #28]
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f002 f9c4 	bl	800c92c <__pow5mult>
 800a5a4:	9007      	str	r0, [sp, #28]
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f43f ae8e 	beq.w	800a2c8 <_strtod_l+0x498>
 800a5ac:	2f00      	cmp	r7, #0
 800a5ae:	dd08      	ble.n	800a5c2 <_strtod_l+0x792>
 800a5b0:	9907      	ldr	r1, [sp, #28]
 800a5b2:	463a      	mov	r2, r7
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f002 fa13 	bl	800c9e0 <__lshift>
 800a5ba:	9007      	str	r0, [sp, #28]
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f43f ae83 	beq.w	800a2c8 <_strtod_l+0x498>
 800a5c2:	f1b9 0f00 	cmp.w	r9, #0
 800a5c6:	dd08      	ble.n	800a5da <_strtod_l+0x7aa>
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	464a      	mov	r2, r9
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f002 fa07 	bl	800c9e0 <__lshift>
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f43f ae77 	beq.w	800a2c8 <_strtod_l+0x498>
 800a5da:	9a07      	ldr	r2, [sp, #28]
 800a5dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f002 fa86 	bl	800caf0 <__mdiff>
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f43f ae6e 	beq.w	800a2c8 <_strtod_l+0x498>
 800a5ec:	68c3      	ldr	r3, [r0, #12]
 800a5ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60c3      	str	r3, [r0, #12]
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	f002 fa5f 	bl	800cab8 <__mcmp>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	da65      	bge.n	800a6ca <_strtod_l+0x89a>
 800a5fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a600:	ea53 030a 	orrs.w	r3, r3, sl
 800a604:	f040 8087 	bne.w	800a716 <_strtod_l+0x8e6>
 800a608:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f040 8082 	bne.w	800a716 <_strtod_l+0x8e6>
 800a612:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a616:	0d1b      	lsrs	r3, r3, #20
 800a618:	051b      	lsls	r3, r3, #20
 800a61a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a61e:	d97a      	bls.n	800a716 <_strtod_l+0x8e6>
 800a620:	696b      	ldr	r3, [r5, #20]
 800a622:	b913      	cbnz	r3, 800a62a <_strtod_l+0x7fa>
 800a624:	692b      	ldr	r3, [r5, #16]
 800a626:	2b01      	cmp	r3, #1
 800a628:	dd75      	ble.n	800a716 <_strtod_l+0x8e6>
 800a62a:	4629      	mov	r1, r5
 800a62c:	2201      	movs	r2, #1
 800a62e:	4620      	mov	r0, r4
 800a630:	f002 f9d6 	bl	800c9e0 <__lshift>
 800a634:	4631      	mov	r1, r6
 800a636:	4605      	mov	r5, r0
 800a638:	f002 fa3e 	bl	800cab8 <__mcmp>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	dd6a      	ble.n	800a716 <_strtod_l+0x8e6>
 800a640:	9904      	ldr	r1, [sp, #16]
 800a642:	4a55      	ldr	r2, [pc, #340]	; (800a798 <_strtod_l+0x968>)
 800a644:	465b      	mov	r3, fp
 800a646:	2900      	cmp	r1, #0
 800a648:	f000 8085 	beq.w	800a756 <_strtod_l+0x926>
 800a64c:	ea02 010b 	and.w	r1, r2, fp
 800a650:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a654:	dc7f      	bgt.n	800a756 <_strtod_l+0x926>
 800a656:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a65a:	f77f aeaa 	ble.w	800a3b2 <_strtod_l+0x582>
 800a65e:	4a4f      	ldr	r2, [pc, #316]	; (800a79c <_strtod_l+0x96c>)
 800a660:	2300      	movs	r3, #0
 800a662:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a666:	4650      	mov	r0, sl
 800a668:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a66c:	4659      	mov	r1, fp
 800a66e:	f7f5 ffc3 	bl	80005f8 <__aeabi_dmul>
 800a672:	460b      	mov	r3, r1
 800a674:	4303      	orrs	r3, r0
 800a676:	bf08      	it	eq
 800a678:	2322      	moveq	r3, #34	; 0x22
 800a67a:	4682      	mov	sl, r0
 800a67c:	468b      	mov	fp, r1
 800a67e:	bf08      	it	eq
 800a680:	6023      	streq	r3, [r4, #0]
 800a682:	e62b      	b.n	800a2dc <_strtod_l+0x4ac>
 800a684:	f04f 32ff 	mov.w	r2, #4294967295
 800a688:	fa02 f303 	lsl.w	r3, r2, r3
 800a68c:	ea03 0a0a 	and.w	sl, r3, sl
 800a690:	e6de      	b.n	800a450 <_strtod_l+0x620>
 800a692:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a696:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a69a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a69e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a6a2:	fa01 f308 	lsl.w	r3, r1, r8
 800a6a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6a8:	9111      	str	r1, [sp, #68]	; 0x44
 800a6aa:	e741      	b.n	800a530 <_strtod_l+0x700>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	9311      	str	r3, [sp, #68]	; 0x44
 800a6b4:	e73c      	b.n	800a530 <_strtod_l+0x700>
 800a6b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a6b8:	4642      	mov	r2, r8
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f002 f990 	bl	800c9e0 <__lshift>
 800a6c0:	901e      	str	r0, [sp, #120]	; 0x78
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	f47f af66 	bne.w	800a594 <_strtod_l+0x764>
 800a6c8:	e5fe      	b.n	800a2c8 <_strtod_l+0x498>
 800a6ca:	465f      	mov	r7, fp
 800a6cc:	d16e      	bne.n	800a7ac <_strtod_l+0x97c>
 800a6ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6d4:	b342      	cbz	r2, 800a728 <_strtod_l+0x8f8>
 800a6d6:	4a32      	ldr	r2, [pc, #200]	; (800a7a0 <_strtod_l+0x970>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d128      	bne.n	800a72e <_strtod_l+0x8fe>
 800a6dc:	9b04      	ldr	r3, [sp, #16]
 800a6de:	4650      	mov	r0, sl
 800a6e0:	b1eb      	cbz	r3, 800a71e <_strtod_l+0x8ee>
 800a6e2:	4a2d      	ldr	r2, [pc, #180]	; (800a798 <_strtod_l+0x968>)
 800a6e4:	403a      	ands	r2, r7
 800a6e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a6ea:	f04f 31ff 	mov.w	r1, #4294967295
 800a6ee:	d819      	bhi.n	800a724 <_strtod_l+0x8f4>
 800a6f0:	0d12      	lsrs	r2, r2, #20
 800a6f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a6f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6fa:	4298      	cmp	r0, r3
 800a6fc:	d117      	bne.n	800a72e <_strtod_l+0x8fe>
 800a6fe:	4b29      	ldr	r3, [pc, #164]	; (800a7a4 <_strtod_l+0x974>)
 800a700:	429f      	cmp	r7, r3
 800a702:	d102      	bne.n	800a70a <_strtod_l+0x8da>
 800a704:	3001      	adds	r0, #1
 800a706:	f43f addf 	beq.w	800a2c8 <_strtod_l+0x498>
 800a70a:	4b23      	ldr	r3, [pc, #140]	; (800a798 <_strtod_l+0x968>)
 800a70c:	403b      	ands	r3, r7
 800a70e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a712:	f04f 0a00 	mov.w	sl, #0
 800a716:	9b04      	ldr	r3, [sp, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1a0      	bne.n	800a65e <_strtod_l+0x82e>
 800a71c:	e5de      	b.n	800a2dc <_strtod_l+0x4ac>
 800a71e:	f04f 33ff 	mov.w	r3, #4294967295
 800a722:	e7ea      	b.n	800a6fa <_strtod_l+0x8ca>
 800a724:	460b      	mov	r3, r1
 800a726:	e7e8      	b.n	800a6fa <_strtod_l+0x8ca>
 800a728:	ea53 030a 	orrs.w	r3, r3, sl
 800a72c:	d088      	beq.n	800a640 <_strtod_l+0x810>
 800a72e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a730:	b1db      	cbz	r3, 800a76a <_strtod_l+0x93a>
 800a732:	423b      	tst	r3, r7
 800a734:	d0ef      	beq.n	800a716 <_strtod_l+0x8e6>
 800a736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a738:	9a04      	ldr	r2, [sp, #16]
 800a73a:	4650      	mov	r0, sl
 800a73c:	4659      	mov	r1, fp
 800a73e:	b1c3      	cbz	r3, 800a772 <_strtod_l+0x942>
 800a740:	f7ff fb58 	bl	8009df4 <sulp>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a74c:	f7f5 fd9e 	bl	800028c <__adddf3>
 800a750:	4682      	mov	sl, r0
 800a752:	468b      	mov	fp, r1
 800a754:	e7df      	b.n	800a716 <_strtod_l+0x8e6>
 800a756:	4013      	ands	r3, r2
 800a758:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a75c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a760:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a764:	f04f 3aff 	mov.w	sl, #4294967295
 800a768:	e7d5      	b.n	800a716 <_strtod_l+0x8e6>
 800a76a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a76c:	ea13 0f0a 	tst.w	r3, sl
 800a770:	e7e0      	b.n	800a734 <_strtod_l+0x904>
 800a772:	f7ff fb3f 	bl	8009df4 <sulp>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a77e:	f7f5 fd83 	bl	8000288 <__aeabi_dsub>
 800a782:	2200      	movs	r2, #0
 800a784:	2300      	movs	r3, #0
 800a786:	4682      	mov	sl, r0
 800a788:	468b      	mov	fp, r1
 800a78a:	f7f6 f99d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d0c1      	beq.n	800a716 <_strtod_l+0x8e6>
 800a792:	e60e      	b.n	800a3b2 <_strtod_l+0x582>
 800a794:	fffffc02 	.word	0xfffffc02
 800a798:	7ff00000 	.word	0x7ff00000
 800a79c:	39500000 	.word	0x39500000
 800a7a0:	000fffff 	.word	0x000fffff
 800a7a4:	7fefffff 	.word	0x7fefffff
 800a7a8:	0800dc10 	.word	0x0800dc10
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f002 fafe 	bl	800cdb0 <__ratio>
 800a7b4:	ec59 8b10 	vmov	r8, r9, d0
 800a7b8:	ee10 0a10 	vmov	r0, s0
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	f7f6 f994 	bl	8000af0 <__aeabi_dcmple>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d07c      	beq.n	800a8c6 <_strtod_l+0xa96>
 800a7cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d04c      	beq.n	800a86c <_strtod_l+0xa3c>
 800a7d2:	4b95      	ldr	r3, [pc, #596]	; (800aa28 <_strtod_l+0xbf8>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a7da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800aa28 <_strtod_l+0xbf8>
 800a7de:	f04f 0800 	mov.w	r8, #0
 800a7e2:	4b92      	ldr	r3, [pc, #584]	; (800aa2c <_strtod_l+0xbfc>)
 800a7e4:	403b      	ands	r3, r7
 800a7e6:	9311      	str	r3, [sp, #68]	; 0x44
 800a7e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7ea:	4b91      	ldr	r3, [pc, #580]	; (800aa30 <_strtod_l+0xc00>)
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	f040 80b2 	bne.w	800a956 <_strtod_l+0xb26>
 800a7f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a7f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a7fe:	ec4b ab10 	vmov	d0, sl, fp
 800a802:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a806:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a80a:	f002 f9f9 	bl	800cc00 <__ulp>
 800a80e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a812:	ec53 2b10 	vmov	r2, r3, d0
 800a816:	f7f5 feef 	bl	80005f8 <__aeabi_dmul>
 800a81a:	4652      	mov	r2, sl
 800a81c:	465b      	mov	r3, fp
 800a81e:	f7f5 fd35 	bl	800028c <__adddf3>
 800a822:	460b      	mov	r3, r1
 800a824:	4981      	ldr	r1, [pc, #516]	; (800aa2c <_strtod_l+0xbfc>)
 800a826:	4a83      	ldr	r2, [pc, #524]	; (800aa34 <_strtod_l+0xc04>)
 800a828:	4019      	ands	r1, r3
 800a82a:	4291      	cmp	r1, r2
 800a82c:	4682      	mov	sl, r0
 800a82e:	d95e      	bls.n	800a8ee <_strtod_l+0xabe>
 800a830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a832:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a836:	4293      	cmp	r3, r2
 800a838:	d103      	bne.n	800a842 <_strtod_l+0xa12>
 800a83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a83c:	3301      	adds	r3, #1
 800a83e:	f43f ad43 	beq.w	800a2c8 <_strtod_l+0x498>
 800a842:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800aa40 <_strtod_l+0xc10>
 800a846:	f04f 3aff 	mov.w	sl, #4294967295
 800a84a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a84c:	4620      	mov	r0, r4
 800a84e:	f001 feab 	bl	800c5a8 <_Bfree>
 800a852:	9907      	ldr	r1, [sp, #28]
 800a854:	4620      	mov	r0, r4
 800a856:	f001 fea7 	bl	800c5a8 <_Bfree>
 800a85a:	4631      	mov	r1, r6
 800a85c:	4620      	mov	r0, r4
 800a85e:	f001 fea3 	bl	800c5a8 <_Bfree>
 800a862:	4629      	mov	r1, r5
 800a864:	4620      	mov	r0, r4
 800a866:	f001 fe9f 	bl	800c5a8 <_Bfree>
 800a86a:	e613      	b.n	800a494 <_strtod_l+0x664>
 800a86c:	f1ba 0f00 	cmp.w	sl, #0
 800a870:	d11b      	bne.n	800a8aa <_strtod_l+0xa7a>
 800a872:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a876:	b9f3      	cbnz	r3, 800a8b6 <_strtod_l+0xa86>
 800a878:	4b6b      	ldr	r3, [pc, #428]	; (800aa28 <_strtod_l+0xbf8>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	4640      	mov	r0, r8
 800a87e:	4649      	mov	r1, r9
 800a880:	f7f6 f92c 	bl	8000adc <__aeabi_dcmplt>
 800a884:	b9d0      	cbnz	r0, 800a8bc <_strtod_l+0xa8c>
 800a886:	4640      	mov	r0, r8
 800a888:	4649      	mov	r1, r9
 800a88a:	4b6b      	ldr	r3, [pc, #428]	; (800aa38 <_strtod_l+0xc08>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	f7f5 feb3 	bl	80005f8 <__aeabi_dmul>
 800a892:	4680      	mov	r8, r0
 800a894:	4689      	mov	r9, r1
 800a896:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a89a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a89e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a8a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a8a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a8a8:	e79b      	b.n	800a7e2 <_strtod_l+0x9b2>
 800a8aa:	f1ba 0f01 	cmp.w	sl, #1
 800a8ae:	d102      	bne.n	800a8b6 <_strtod_l+0xa86>
 800a8b0:	2f00      	cmp	r7, #0
 800a8b2:	f43f ad7e 	beq.w	800a3b2 <_strtod_l+0x582>
 800a8b6:	4b61      	ldr	r3, [pc, #388]	; (800aa3c <_strtod_l+0xc0c>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	e78c      	b.n	800a7d6 <_strtod_l+0x9a6>
 800a8bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800aa38 <_strtod_l+0xc08>
 800a8c0:	f04f 0800 	mov.w	r8, #0
 800a8c4:	e7e7      	b.n	800a896 <_strtod_l+0xa66>
 800a8c6:	4b5c      	ldr	r3, [pc, #368]	; (800aa38 <_strtod_l+0xc08>)
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	4649      	mov	r1, r9
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f7f5 fe93 	bl	80005f8 <__aeabi_dmul>
 800a8d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	4689      	mov	r9, r1
 800a8d8:	b933      	cbnz	r3, 800a8e8 <_strtod_l+0xab8>
 800a8da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8de:	9012      	str	r0, [sp, #72]	; 0x48
 800a8e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a8e6:	e7dd      	b.n	800a8a4 <_strtod_l+0xa74>
 800a8e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a8ec:	e7f9      	b.n	800a8e2 <_strtod_l+0xab2>
 800a8ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a8f2:	9b04      	ldr	r3, [sp, #16]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1a8      	bne.n	800a84a <_strtod_l+0xa1a>
 800a8f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a8fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a8fe:	0d1b      	lsrs	r3, r3, #20
 800a900:	051b      	lsls	r3, r3, #20
 800a902:	429a      	cmp	r2, r3
 800a904:	d1a1      	bne.n	800a84a <_strtod_l+0xa1a>
 800a906:	4640      	mov	r0, r8
 800a908:	4649      	mov	r1, r9
 800a90a:	f7f6 f9d5 	bl	8000cb8 <__aeabi_d2lz>
 800a90e:	f7f5 fe45 	bl	800059c <__aeabi_l2d>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4640      	mov	r0, r8
 800a918:	4649      	mov	r1, r9
 800a91a:	f7f5 fcb5 	bl	8000288 <__aeabi_dsub>
 800a91e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a920:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a924:	ea43 030a 	orr.w	r3, r3, sl
 800a928:	4313      	orrs	r3, r2
 800a92a:	4680      	mov	r8, r0
 800a92c:	4689      	mov	r9, r1
 800a92e:	d053      	beq.n	800a9d8 <_strtod_l+0xba8>
 800a930:	a335      	add	r3, pc, #212	; (adr r3, 800aa08 <_strtod_l+0xbd8>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f6 f8d1 	bl	8000adc <__aeabi_dcmplt>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	f47f acce 	bne.w	800a2dc <_strtod_l+0x4ac>
 800a940:	a333      	add	r3, pc, #204	; (adr r3, 800aa10 <_strtod_l+0xbe0>)
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	4640      	mov	r0, r8
 800a948:	4649      	mov	r1, r9
 800a94a:	f7f6 f8e5 	bl	8000b18 <__aeabi_dcmpgt>
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f af7b 	beq.w	800a84a <_strtod_l+0xa1a>
 800a954:	e4c2      	b.n	800a2dc <_strtod_l+0x4ac>
 800a956:	9b04      	ldr	r3, [sp, #16]
 800a958:	b333      	cbz	r3, 800a9a8 <_strtod_l+0xb78>
 800a95a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a95c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a960:	d822      	bhi.n	800a9a8 <_strtod_l+0xb78>
 800a962:	a32d      	add	r3, pc, #180	; (adr r3, 800aa18 <_strtod_l+0xbe8>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	4640      	mov	r0, r8
 800a96a:	4649      	mov	r1, r9
 800a96c:	f7f6 f8c0 	bl	8000af0 <__aeabi_dcmple>
 800a970:	b1a0      	cbz	r0, 800a99c <_strtod_l+0xb6c>
 800a972:	4649      	mov	r1, r9
 800a974:	4640      	mov	r0, r8
 800a976:	f7f6 f917 	bl	8000ba8 <__aeabi_d2uiz>
 800a97a:	2801      	cmp	r0, #1
 800a97c:	bf38      	it	cc
 800a97e:	2001      	movcc	r0, #1
 800a980:	f7f5 fdc0 	bl	8000504 <__aeabi_ui2d>
 800a984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a986:	4680      	mov	r8, r0
 800a988:	4689      	mov	r9, r1
 800a98a:	bb13      	cbnz	r3, 800a9d2 <_strtod_l+0xba2>
 800a98c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a990:	9014      	str	r0, [sp, #80]	; 0x50
 800a992:	9315      	str	r3, [sp, #84]	; 0x54
 800a994:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a998:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a99c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a99e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a9a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a9a4:	1a9b      	subs	r3, r3, r2
 800a9a6:	930d      	str	r3, [sp, #52]	; 0x34
 800a9a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a9b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a9b4:	f002 f924 	bl	800cc00 <__ulp>
 800a9b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9bc:	ec53 2b10 	vmov	r2, r3, d0
 800a9c0:	f7f5 fe1a 	bl	80005f8 <__aeabi_dmul>
 800a9c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9c8:	f7f5 fc60 	bl	800028c <__adddf3>
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	468b      	mov	fp, r1
 800a9d0:	e78f      	b.n	800a8f2 <_strtod_l+0xac2>
 800a9d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a9d6:	e7dd      	b.n	800a994 <_strtod_l+0xb64>
 800a9d8:	a311      	add	r3, pc, #68	; (adr r3, 800aa20 <_strtod_l+0xbf0>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f7f6 f87d 	bl	8000adc <__aeabi_dcmplt>
 800a9e2:	e7b4      	b.n	800a94e <_strtod_l+0xb1e>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	930e      	str	r3, [sp, #56]	; 0x38
 800a9e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a9ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	f7ff ba65 	b.w	8009ebc <_strtod_l+0x8c>
 800a9f2:	2b65      	cmp	r3, #101	; 0x65
 800a9f4:	f43f ab5d 	beq.w	800a0b2 <_strtod_l+0x282>
 800a9f8:	2b45      	cmp	r3, #69	; 0x45
 800a9fa:	f43f ab5a 	beq.w	800a0b2 <_strtod_l+0x282>
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f7ff bb92 	b.w	800a128 <_strtod_l+0x2f8>
 800aa04:	f3af 8000 	nop.w
 800aa08:	94a03595 	.word	0x94a03595
 800aa0c:	3fdfffff 	.word	0x3fdfffff
 800aa10:	35afe535 	.word	0x35afe535
 800aa14:	3fe00000 	.word	0x3fe00000
 800aa18:	ffc00000 	.word	0xffc00000
 800aa1c:	41dfffff 	.word	0x41dfffff
 800aa20:	94a03595 	.word	0x94a03595
 800aa24:	3fcfffff 	.word	0x3fcfffff
 800aa28:	3ff00000 	.word	0x3ff00000
 800aa2c:	7ff00000 	.word	0x7ff00000
 800aa30:	7fe00000 	.word	0x7fe00000
 800aa34:	7c9fffff 	.word	0x7c9fffff
 800aa38:	3fe00000 	.word	0x3fe00000
 800aa3c:	bff00000 	.word	0xbff00000
 800aa40:	7fefffff 	.word	0x7fefffff

0800aa44 <_strtod_r>:
 800aa44:	4b01      	ldr	r3, [pc, #4]	; (800aa4c <_strtod_r+0x8>)
 800aa46:	f7ff b9f3 	b.w	8009e30 <_strtod_l>
 800aa4a:	bf00      	nop
 800aa4c:	20000074 	.word	0x20000074

0800aa50 <_strtol_l.isra.0>:
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa56:	d001      	beq.n	800aa5c <_strtol_l.isra.0+0xc>
 800aa58:	2b24      	cmp	r3, #36	; 0x24
 800aa5a:	d906      	bls.n	800aa6a <_strtol_l.isra.0+0x1a>
 800aa5c:	f7fe fa5c 	bl	8008f18 <__errno>
 800aa60:	2316      	movs	r3, #22
 800aa62:	6003      	str	r3, [r0, #0]
 800aa64:	2000      	movs	r0, #0
 800aa66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6a:	4f3a      	ldr	r7, [pc, #232]	; (800ab54 <_strtol_l.isra.0+0x104>)
 800aa6c:	468e      	mov	lr, r1
 800aa6e:	4676      	mov	r6, lr
 800aa70:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800aa74:	5de5      	ldrb	r5, [r4, r7]
 800aa76:	f015 0508 	ands.w	r5, r5, #8
 800aa7a:	d1f8      	bne.n	800aa6e <_strtol_l.isra.0+0x1e>
 800aa7c:	2c2d      	cmp	r4, #45	; 0x2d
 800aa7e:	d134      	bne.n	800aaea <_strtol_l.isra.0+0x9a>
 800aa80:	f89e 4000 	ldrb.w	r4, [lr]
 800aa84:	f04f 0801 	mov.w	r8, #1
 800aa88:	f106 0e02 	add.w	lr, r6, #2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d05c      	beq.n	800ab4a <_strtol_l.isra.0+0xfa>
 800aa90:	2b10      	cmp	r3, #16
 800aa92:	d10c      	bne.n	800aaae <_strtol_l.isra.0+0x5e>
 800aa94:	2c30      	cmp	r4, #48	; 0x30
 800aa96:	d10a      	bne.n	800aaae <_strtol_l.isra.0+0x5e>
 800aa98:	f89e 4000 	ldrb.w	r4, [lr]
 800aa9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aaa0:	2c58      	cmp	r4, #88	; 0x58
 800aaa2:	d14d      	bne.n	800ab40 <_strtol_l.isra.0+0xf0>
 800aaa4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800aaa8:	2310      	movs	r3, #16
 800aaaa:	f10e 0e02 	add.w	lr, lr, #2
 800aaae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800aab2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aab6:	2600      	movs	r6, #0
 800aab8:	fbbc f9f3 	udiv	r9, ip, r3
 800aabc:	4635      	mov	r5, r6
 800aabe:	fb03 ca19 	mls	sl, r3, r9, ip
 800aac2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800aac6:	2f09      	cmp	r7, #9
 800aac8:	d818      	bhi.n	800aafc <_strtol_l.isra.0+0xac>
 800aaca:	463c      	mov	r4, r7
 800aacc:	42a3      	cmp	r3, r4
 800aace:	dd24      	ble.n	800ab1a <_strtol_l.isra.0+0xca>
 800aad0:	2e00      	cmp	r6, #0
 800aad2:	db1f      	blt.n	800ab14 <_strtol_l.isra.0+0xc4>
 800aad4:	45a9      	cmp	r9, r5
 800aad6:	d31d      	bcc.n	800ab14 <_strtol_l.isra.0+0xc4>
 800aad8:	d101      	bne.n	800aade <_strtol_l.isra.0+0x8e>
 800aada:	45a2      	cmp	sl, r4
 800aadc:	db1a      	blt.n	800ab14 <_strtol_l.isra.0+0xc4>
 800aade:	fb05 4503 	mla	r5, r5, r3, r4
 800aae2:	2601      	movs	r6, #1
 800aae4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800aae8:	e7eb      	b.n	800aac2 <_strtol_l.isra.0+0x72>
 800aaea:	2c2b      	cmp	r4, #43	; 0x2b
 800aaec:	bf08      	it	eq
 800aaee:	f89e 4000 	ldrbeq.w	r4, [lr]
 800aaf2:	46a8      	mov	r8, r5
 800aaf4:	bf08      	it	eq
 800aaf6:	f106 0e02 	addeq.w	lr, r6, #2
 800aafa:	e7c7      	b.n	800aa8c <_strtol_l.isra.0+0x3c>
 800aafc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ab00:	2f19      	cmp	r7, #25
 800ab02:	d801      	bhi.n	800ab08 <_strtol_l.isra.0+0xb8>
 800ab04:	3c37      	subs	r4, #55	; 0x37
 800ab06:	e7e1      	b.n	800aacc <_strtol_l.isra.0+0x7c>
 800ab08:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ab0c:	2f19      	cmp	r7, #25
 800ab0e:	d804      	bhi.n	800ab1a <_strtol_l.isra.0+0xca>
 800ab10:	3c57      	subs	r4, #87	; 0x57
 800ab12:	e7db      	b.n	800aacc <_strtol_l.isra.0+0x7c>
 800ab14:	f04f 36ff 	mov.w	r6, #4294967295
 800ab18:	e7e4      	b.n	800aae4 <_strtol_l.isra.0+0x94>
 800ab1a:	2e00      	cmp	r6, #0
 800ab1c:	da05      	bge.n	800ab2a <_strtol_l.isra.0+0xda>
 800ab1e:	2322      	movs	r3, #34	; 0x22
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	4665      	mov	r5, ip
 800ab24:	b942      	cbnz	r2, 800ab38 <_strtol_l.isra.0+0xe8>
 800ab26:	4628      	mov	r0, r5
 800ab28:	e79d      	b.n	800aa66 <_strtol_l.isra.0+0x16>
 800ab2a:	f1b8 0f00 	cmp.w	r8, #0
 800ab2e:	d000      	beq.n	800ab32 <_strtol_l.isra.0+0xe2>
 800ab30:	426d      	negs	r5, r5
 800ab32:	2a00      	cmp	r2, #0
 800ab34:	d0f7      	beq.n	800ab26 <_strtol_l.isra.0+0xd6>
 800ab36:	b10e      	cbz	r6, 800ab3c <_strtol_l.isra.0+0xec>
 800ab38:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ab3c:	6011      	str	r1, [r2, #0]
 800ab3e:	e7f2      	b.n	800ab26 <_strtol_l.isra.0+0xd6>
 800ab40:	2430      	movs	r4, #48	; 0x30
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1b3      	bne.n	800aaae <_strtol_l.isra.0+0x5e>
 800ab46:	2308      	movs	r3, #8
 800ab48:	e7b1      	b.n	800aaae <_strtol_l.isra.0+0x5e>
 800ab4a:	2c30      	cmp	r4, #48	; 0x30
 800ab4c:	d0a4      	beq.n	800aa98 <_strtol_l.isra.0+0x48>
 800ab4e:	230a      	movs	r3, #10
 800ab50:	e7ad      	b.n	800aaae <_strtol_l.isra.0+0x5e>
 800ab52:	bf00      	nop
 800ab54:	0800dc39 	.word	0x0800dc39

0800ab58 <_strtol_r>:
 800ab58:	f7ff bf7a 	b.w	800aa50 <_strtol_l.isra.0>

0800ab5c <__swbuf_r>:
 800ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5e:	460e      	mov	r6, r1
 800ab60:	4614      	mov	r4, r2
 800ab62:	4605      	mov	r5, r0
 800ab64:	b118      	cbz	r0, 800ab6e <__swbuf_r+0x12>
 800ab66:	6983      	ldr	r3, [r0, #24]
 800ab68:	b90b      	cbnz	r3, 800ab6e <__swbuf_r+0x12>
 800ab6a:	f001 f84b 	bl	800bc04 <__sinit>
 800ab6e:	4b21      	ldr	r3, [pc, #132]	; (800abf4 <__swbuf_r+0x98>)
 800ab70:	429c      	cmp	r4, r3
 800ab72:	d12b      	bne.n	800abcc <__swbuf_r+0x70>
 800ab74:	686c      	ldr	r4, [r5, #4]
 800ab76:	69a3      	ldr	r3, [r4, #24]
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	071a      	lsls	r2, r3, #28
 800ab7e:	d52f      	bpl.n	800abe0 <__swbuf_r+0x84>
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	b36b      	cbz	r3, 800abe0 <__swbuf_r+0x84>
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	6820      	ldr	r0, [r4, #0]
 800ab88:	1ac0      	subs	r0, r0, r3
 800ab8a:	6963      	ldr	r3, [r4, #20]
 800ab8c:	b2f6      	uxtb	r6, r6
 800ab8e:	4283      	cmp	r3, r0
 800ab90:	4637      	mov	r7, r6
 800ab92:	dc04      	bgt.n	800ab9e <__swbuf_r+0x42>
 800ab94:	4621      	mov	r1, r4
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 ffa0 	bl	800badc <_fflush_r>
 800ab9c:	bb30      	cbnz	r0, 800abec <__swbuf_r+0x90>
 800ab9e:	68a3      	ldr	r3, [r4, #8]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	60a3      	str	r3, [r4, #8]
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	6022      	str	r2, [r4, #0]
 800abaa:	701e      	strb	r6, [r3, #0]
 800abac:	6963      	ldr	r3, [r4, #20]
 800abae:	3001      	adds	r0, #1
 800abb0:	4283      	cmp	r3, r0
 800abb2:	d004      	beq.n	800abbe <__swbuf_r+0x62>
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	07db      	lsls	r3, r3, #31
 800abb8:	d506      	bpl.n	800abc8 <__swbuf_r+0x6c>
 800abba:	2e0a      	cmp	r6, #10
 800abbc:	d104      	bne.n	800abc8 <__swbuf_r+0x6c>
 800abbe:	4621      	mov	r1, r4
 800abc0:	4628      	mov	r0, r5
 800abc2:	f000 ff8b 	bl	800badc <_fflush_r>
 800abc6:	b988      	cbnz	r0, 800abec <__swbuf_r+0x90>
 800abc8:	4638      	mov	r0, r7
 800abca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abcc:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <__swbuf_r+0x9c>)
 800abce:	429c      	cmp	r4, r3
 800abd0:	d101      	bne.n	800abd6 <__swbuf_r+0x7a>
 800abd2:	68ac      	ldr	r4, [r5, #8]
 800abd4:	e7cf      	b.n	800ab76 <__swbuf_r+0x1a>
 800abd6:	4b09      	ldr	r3, [pc, #36]	; (800abfc <__swbuf_r+0xa0>)
 800abd8:	429c      	cmp	r4, r3
 800abda:	bf08      	it	eq
 800abdc:	68ec      	ldreq	r4, [r5, #12]
 800abde:	e7ca      	b.n	800ab76 <__swbuf_r+0x1a>
 800abe0:	4621      	mov	r1, r4
 800abe2:	4628      	mov	r0, r5
 800abe4:	f000 f80c 	bl	800ac00 <__swsetup_r>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d0cb      	beq.n	800ab84 <__swbuf_r+0x28>
 800abec:	f04f 37ff 	mov.w	r7, #4294967295
 800abf0:	e7ea      	b.n	800abc8 <__swbuf_r+0x6c>
 800abf2:	bf00      	nop
 800abf4:	0800ddf0 	.word	0x0800ddf0
 800abf8:	0800de10 	.word	0x0800de10
 800abfc:	0800ddd0 	.word	0x0800ddd0

0800ac00 <__swsetup_r>:
 800ac00:	4b32      	ldr	r3, [pc, #200]	; (800accc <__swsetup_r+0xcc>)
 800ac02:	b570      	push	{r4, r5, r6, lr}
 800ac04:	681d      	ldr	r5, [r3, #0]
 800ac06:	4606      	mov	r6, r0
 800ac08:	460c      	mov	r4, r1
 800ac0a:	b125      	cbz	r5, 800ac16 <__swsetup_r+0x16>
 800ac0c:	69ab      	ldr	r3, [r5, #24]
 800ac0e:	b913      	cbnz	r3, 800ac16 <__swsetup_r+0x16>
 800ac10:	4628      	mov	r0, r5
 800ac12:	f000 fff7 	bl	800bc04 <__sinit>
 800ac16:	4b2e      	ldr	r3, [pc, #184]	; (800acd0 <__swsetup_r+0xd0>)
 800ac18:	429c      	cmp	r4, r3
 800ac1a:	d10f      	bne.n	800ac3c <__swsetup_r+0x3c>
 800ac1c:	686c      	ldr	r4, [r5, #4]
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac24:	0719      	lsls	r1, r3, #28
 800ac26:	d42c      	bmi.n	800ac82 <__swsetup_r+0x82>
 800ac28:	06dd      	lsls	r5, r3, #27
 800ac2a:	d411      	bmi.n	800ac50 <__swsetup_r+0x50>
 800ac2c:	2309      	movs	r3, #9
 800ac2e:	6033      	str	r3, [r6, #0]
 800ac30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3a:	e03e      	b.n	800acba <__swsetup_r+0xba>
 800ac3c:	4b25      	ldr	r3, [pc, #148]	; (800acd4 <__swsetup_r+0xd4>)
 800ac3e:	429c      	cmp	r4, r3
 800ac40:	d101      	bne.n	800ac46 <__swsetup_r+0x46>
 800ac42:	68ac      	ldr	r4, [r5, #8]
 800ac44:	e7eb      	b.n	800ac1e <__swsetup_r+0x1e>
 800ac46:	4b24      	ldr	r3, [pc, #144]	; (800acd8 <__swsetup_r+0xd8>)
 800ac48:	429c      	cmp	r4, r3
 800ac4a:	bf08      	it	eq
 800ac4c:	68ec      	ldreq	r4, [r5, #12]
 800ac4e:	e7e6      	b.n	800ac1e <__swsetup_r+0x1e>
 800ac50:	0758      	lsls	r0, r3, #29
 800ac52:	d512      	bpl.n	800ac7a <__swsetup_r+0x7a>
 800ac54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac56:	b141      	cbz	r1, 800ac6a <__swsetup_r+0x6a>
 800ac58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac5c:	4299      	cmp	r1, r3
 800ac5e:	d002      	beq.n	800ac66 <__swsetup_r+0x66>
 800ac60:	4630      	mov	r0, r6
 800ac62:	f002 f92b 	bl	800cebc <_free_r>
 800ac66:	2300      	movs	r3, #0
 800ac68:	6363      	str	r3, [r4, #52]	; 0x34
 800ac6a:	89a3      	ldrh	r3, [r4, #12]
 800ac6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac70:	81a3      	strh	r3, [r4, #12]
 800ac72:	2300      	movs	r3, #0
 800ac74:	6063      	str	r3, [r4, #4]
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f043 0308 	orr.w	r3, r3, #8
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	6923      	ldr	r3, [r4, #16]
 800ac84:	b94b      	cbnz	r3, 800ac9a <__swsetup_r+0x9a>
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac90:	d003      	beq.n	800ac9a <__swsetup_r+0x9a>
 800ac92:	4621      	mov	r1, r4
 800ac94:	4630      	mov	r0, r6
 800ac96:	f001 fbed 	bl	800c474 <__smakebuf_r>
 800ac9a:	89a0      	ldrh	r0, [r4, #12]
 800ac9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aca0:	f010 0301 	ands.w	r3, r0, #1
 800aca4:	d00a      	beq.n	800acbc <__swsetup_r+0xbc>
 800aca6:	2300      	movs	r3, #0
 800aca8:	60a3      	str	r3, [r4, #8]
 800acaa:	6963      	ldr	r3, [r4, #20]
 800acac:	425b      	negs	r3, r3
 800acae:	61a3      	str	r3, [r4, #24]
 800acb0:	6923      	ldr	r3, [r4, #16]
 800acb2:	b943      	cbnz	r3, 800acc6 <__swsetup_r+0xc6>
 800acb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acb8:	d1ba      	bne.n	800ac30 <__swsetup_r+0x30>
 800acba:	bd70      	pop	{r4, r5, r6, pc}
 800acbc:	0781      	lsls	r1, r0, #30
 800acbe:	bf58      	it	pl
 800acc0:	6963      	ldrpl	r3, [r4, #20]
 800acc2:	60a3      	str	r3, [r4, #8]
 800acc4:	e7f4      	b.n	800acb0 <__swsetup_r+0xb0>
 800acc6:	2000      	movs	r0, #0
 800acc8:	e7f7      	b.n	800acba <__swsetup_r+0xba>
 800acca:	bf00      	nop
 800accc:	2000000c 	.word	0x2000000c
 800acd0:	0800ddf0 	.word	0x0800ddf0
 800acd4:	0800de10 	.word	0x0800de10
 800acd8:	0800ddd0 	.word	0x0800ddd0

0800acdc <quorem>:
 800acdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	6903      	ldr	r3, [r0, #16]
 800ace2:	690c      	ldr	r4, [r1, #16]
 800ace4:	42a3      	cmp	r3, r4
 800ace6:	4607      	mov	r7, r0
 800ace8:	f2c0 8081 	blt.w	800adee <quorem+0x112>
 800acec:	3c01      	subs	r4, #1
 800acee:	f101 0814 	add.w	r8, r1, #20
 800acf2:	f100 0514 	add.w	r5, r0, #20
 800acf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad04:	3301      	adds	r3, #1
 800ad06:	429a      	cmp	r2, r3
 800ad08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad10:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad14:	d331      	bcc.n	800ad7a <quorem+0x9e>
 800ad16:	f04f 0e00 	mov.w	lr, #0
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	46ac      	mov	ip, r5
 800ad1e:	46f2      	mov	sl, lr
 800ad20:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad24:	b293      	uxth	r3, r2
 800ad26:	fb06 e303 	mla	r3, r6, r3, lr
 800ad2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	ebaa 0303 	sub.w	r3, sl, r3
 800ad34:	0c12      	lsrs	r2, r2, #16
 800ad36:	f8dc a000 	ldr.w	sl, [ip]
 800ad3a:	fb06 e202 	mla	r2, r6, r2, lr
 800ad3e:	fa13 f38a 	uxtah	r3, r3, sl
 800ad42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad46:	fa1f fa82 	uxth.w	sl, r2
 800ad4a:	f8dc 2000 	ldr.w	r2, [ip]
 800ad4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ad52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad5c:	4581      	cmp	r9, r0
 800ad5e:	f84c 3b04 	str.w	r3, [ip], #4
 800ad62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad66:	d2db      	bcs.n	800ad20 <quorem+0x44>
 800ad68:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad6c:	b92b      	cbnz	r3, 800ad7a <quorem+0x9e>
 800ad6e:	9b01      	ldr	r3, [sp, #4]
 800ad70:	3b04      	subs	r3, #4
 800ad72:	429d      	cmp	r5, r3
 800ad74:	461a      	mov	r2, r3
 800ad76:	d32e      	bcc.n	800add6 <quorem+0xfa>
 800ad78:	613c      	str	r4, [r7, #16]
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	f001 fe9c 	bl	800cab8 <__mcmp>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	db24      	blt.n	800adce <quorem+0xf2>
 800ad84:	3601      	adds	r6, #1
 800ad86:	4628      	mov	r0, r5
 800ad88:	f04f 0c00 	mov.w	ip, #0
 800ad8c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad90:	f8d0 e000 	ldr.w	lr, [r0]
 800ad94:	b293      	uxth	r3, r2
 800ad96:	ebac 0303 	sub.w	r3, ip, r3
 800ad9a:	0c12      	lsrs	r2, r2, #16
 800ad9c:	fa13 f38e 	uxtah	r3, r3, lr
 800ada0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ada4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adae:	45c1      	cmp	r9, r8
 800adb0:	f840 3b04 	str.w	r3, [r0], #4
 800adb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800adb8:	d2e8      	bcs.n	800ad8c <quorem+0xb0>
 800adba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adc2:	b922      	cbnz	r2, 800adce <quorem+0xf2>
 800adc4:	3b04      	subs	r3, #4
 800adc6:	429d      	cmp	r5, r3
 800adc8:	461a      	mov	r2, r3
 800adca:	d30a      	bcc.n	800ade2 <quorem+0x106>
 800adcc:	613c      	str	r4, [r7, #16]
 800adce:	4630      	mov	r0, r6
 800add0:	b003      	add	sp, #12
 800add2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add6:	6812      	ldr	r2, [r2, #0]
 800add8:	3b04      	subs	r3, #4
 800adda:	2a00      	cmp	r2, #0
 800addc:	d1cc      	bne.n	800ad78 <quorem+0x9c>
 800adde:	3c01      	subs	r4, #1
 800ade0:	e7c7      	b.n	800ad72 <quorem+0x96>
 800ade2:	6812      	ldr	r2, [r2, #0]
 800ade4:	3b04      	subs	r3, #4
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	d1f0      	bne.n	800adcc <quorem+0xf0>
 800adea:	3c01      	subs	r4, #1
 800adec:	e7eb      	b.n	800adc6 <quorem+0xea>
 800adee:	2000      	movs	r0, #0
 800adf0:	e7ee      	b.n	800add0 <quorem+0xf4>
 800adf2:	0000      	movs	r0, r0
 800adf4:	0000      	movs	r0, r0
	...

0800adf8 <_dtoa_r>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	ed2d 8b02 	vpush	{d8}
 800ae00:	ec57 6b10 	vmov	r6, r7, d0
 800ae04:	b095      	sub	sp, #84	; 0x54
 800ae06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae0c:	9105      	str	r1, [sp, #20]
 800ae0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ae12:	4604      	mov	r4, r0
 800ae14:	9209      	str	r2, [sp, #36]	; 0x24
 800ae16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae18:	b975      	cbnz	r5, 800ae38 <_dtoa_r+0x40>
 800ae1a:	2010      	movs	r0, #16
 800ae1c:	f001 fb6a 	bl	800c4f4 <malloc>
 800ae20:	4602      	mov	r2, r0
 800ae22:	6260      	str	r0, [r4, #36]	; 0x24
 800ae24:	b920      	cbnz	r0, 800ae30 <_dtoa_r+0x38>
 800ae26:	4bb2      	ldr	r3, [pc, #712]	; (800b0f0 <_dtoa_r+0x2f8>)
 800ae28:	21ea      	movs	r1, #234	; 0xea
 800ae2a:	48b2      	ldr	r0, [pc, #712]	; (800b0f4 <_dtoa_r+0x2fc>)
 800ae2c:	f002 fc34 	bl	800d698 <__assert_func>
 800ae30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae34:	6005      	str	r5, [r0, #0]
 800ae36:	60c5      	str	r5, [r0, #12]
 800ae38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae3a:	6819      	ldr	r1, [r3, #0]
 800ae3c:	b151      	cbz	r1, 800ae54 <_dtoa_r+0x5c>
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	604a      	str	r2, [r1, #4]
 800ae42:	2301      	movs	r3, #1
 800ae44:	4093      	lsls	r3, r2
 800ae46:	608b      	str	r3, [r1, #8]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f001 fbad 	bl	800c5a8 <_Bfree>
 800ae4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae50:	2200      	movs	r2, #0
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	1e3b      	subs	r3, r7, #0
 800ae56:	bfb9      	ittee	lt
 800ae58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ae5c:	9303      	strlt	r3, [sp, #12]
 800ae5e:	2300      	movge	r3, #0
 800ae60:	f8c8 3000 	strge.w	r3, [r8]
 800ae64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ae68:	4ba3      	ldr	r3, [pc, #652]	; (800b0f8 <_dtoa_r+0x300>)
 800ae6a:	bfbc      	itt	lt
 800ae6c:	2201      	movlt	r2, #1
 800ae6e:	f8c8 2000 	strlt.w	r2, [r8]
 800ae72:	ea33 0309 	bics.w	r3, r3, r9
 800ae76:	d11b      	bne.n	800aeb0 <_dtoa_r+0xb8>
 800ae78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae7e:	6013      	str	r3, [r2, #0]
 800ae80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae84:	4333      	orrs	r3, r6
 800ae86:	f000 857a 	beq.w	800b97e <_dtoa_r+0xb86>
 800ae8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae8c:	b963      	cbnz	r3, 800aea8 <_dtoa_r+0xb0>
 800ae8e:	4b9b      	ldr	r3, [pc, #620]	; (800b0fc <_dtoa_r+0x304>)
 800ae90:	e024      	b.n	800aedc <_dtoa_r+0xe4>
 800ae92:	4b9b      	ldr	r3, [pc, #620]	; (800b100 <_dtoa_r+0x308>)
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	3308      	adds	r3, #8
 800ae98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	9800      	ldr	r0, [sp, #0]
 800ae9e:	b015      	add	sp, #84	; 0x54
 800aea0:	ecbd 8b02 	vpop	{d8}
 800aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea8:	4b94      	ldr	r3, [pc, #592]	; (800b0fc <_dtoa_r+0x304>)
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	3303      	adds	r3, #3
 800aeae:	e7f3      	b.n	800ae98 <_dtoa_r+0xa0>
 800aeb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	ec51 0b17 	vmov	r0, r1, d7
 800aeba:	2300      	movs	r3, #0
 800aebc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800aec0:	f7f5 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 800aec4:	4680      	mov	r8, r0
 800aec6:	b158      	cbz	r0, 800aee0 <_dtoa_r+0xe8>
 800aec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aeca:	2301      	movs	r3, #1
 800aecc:	6013      	str	r3, [r2, #0]
 800aece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 8551 	beq.w	800b978 <_dtoa_r+0xb80>
 800aed6:	488b      	ldr	r0, [pc, #556]	; (800b104 <_dtoa_r+0x30c>)
 800aed8:	6018      	str	r0, [r3, #0]
 800aeda:	1e43      	subs	r3, r0, #1
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	e7dd      	b.n	800ae9c <_dtoa_r+0xa4>
 800aee0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800aee4:	aa12      	add	r2, sp, #72	; 0x48
 800aee6:	a913      	add	r1, sp, #76	; 0x4c
 800aee8:	4620      	mov	r0, r4
 800aeea:	f001 ff05 	bl	800ccf8 <__d2b>
 800aeee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aef2:	4683      	mov	fp, r0
 800aef4:	2d00      	cmp	r5, #0
 800aef6:	d07c      	beq.n	800aff2 <_dtoa_r+0x1fa>
 800aef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aefa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800aefe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800af06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af12:	4b7d      	ldr	r3, [pc, #500]	; (800b108 <_dtoa_r+0x310>)
 800af14:	2200      	movs	r2, #0
 800af16:	4630      	mov	r0, r6
 800af18:	4639      	mov	r1, r7
 800af1a:	f7f5 f9b5 	bl	8000288 <__aeabi_dsub>
 800af1e:	a36e      	add	r3, pc, #440	; (adr r3, 800b0d8 <_dtoa_r+0x2e0>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f7f5 fb68 	bl	80005f8 <__aeabi_dmul>
 800af28:	a36d      	add	r3, pc, #436	; (adr r3, 800b0e0 <_dtoa_r+0x2e8>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	f7f5 f9ad 	bl	800028c <__adddf3>
 800af32:	4606      	mov	r6, r0
 800af34:	4628      	mov	r0, r5
 800af36:	460f      	mov	r7, r1
 800af38:	f7f5 faf4 	bl	8000524 <__aeabi_i2d>
 800af3c:	a36a      	add	r3, pc, #424	; (adr r3, 800b0e8 <_dtoa_r+0x2f0>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f7f5 fb59 	bl	80005f8 <__aeabi_dmul>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	4630      	mov	r0, r6
 800af4c:	4639      	mov	r1, r7
 800af4e:	f7f5 f99d 	bl	800028c <__adddf3>
 800af52:	4606      	mov	r6, r0
 800af54:	460f      	mov	r7, r1
 800af56:	f7f5 fdff 	bl	8000b58 <__aeabi_d2iz>
 800af5a:	2200      	movs	r2, #0
 800af5c:	4682      	mov	sl, r0
 800af5e:	2300      	movs	r3, #0
 800af60:	4630      	mov	r0, r6
 800af62:	4639      	mov	r1, r7
 800af64:	f7f5 fdba 	bl	8000adc <__aeabi_dcmplt>
 800af68:	b148      	cbz	r0, 800af7e <_dtoa_r+0x186>
 800af6a:	4650      	mov	r0, sl
 800af6c:	f7f5 fada 	bl	8000524 <__aeabi_i2d>
 800af70:	4632      	mov	r2, r6
 800af72:	463b      	mov	r3, r7
 800af74:	f7f5 fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 800af78:	b908      	cbnz	r0, 800af7e <_dtoa_r+0x186>
 800af7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af7e:	f1ba 0f16 	cmp.w	sl, #22
 800af82:	d854      	bhi.n	800b02e <_dtoa_r+0x236>
 800af84:	4b61      	ldr	r3, [pc, #388]	; (800b10c <_dtoa_r+0x314>)
 800af86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af92:	f7f5 fda3 	bl	8000adc <__aeabi_dcmplt>
 800af96:	2800      	cmp	r0, #0
 800af98:	d04b      	beq.n	800b032 <_dtoa_r+0x23a>
 800af9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af9e:	2300      	movs	r3, #0
 800afa0:	930e      	str	r3, [sp, #56]	; 0x38
 800afa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afa4:	1b5d      	subs	r5, r3, r5
 800afa6:	1e6b      	subs	r3, r5, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	bf43      	ittte	mi
 800afac:	2300      	movmi	r3, #0
 800afae:	f1c5 0801 	rsbmi	r8, r5, #1
 800afb2:	9304      	strmi	r3, [sp, #16]
 800afb4:	f04f 0800 	movpl.w	r8, #0
 800afb8:	f1ba 0f00 	cmp.w	sl, #0
 800afbc:	db3b      	blt.n	800b036 <_dtoa_r+0x23e>
 800afbe:	9b04      	ldr	r3, [sp, #16]
 800afc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800afc4:	4453      	add	r3, sl
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	2300      	movs	r3, #0
 800afca:	9306      	str	r3, [sp, #24]
 800afcc:	9b05      	ldr	r3, [sp, #20]
 800afce:	2b09      	cmp	r3, #9
 800afd0:	d869      	bhi.n	800b0a6 <_dtoa_r+0x2ae>
 800afd2:	2b05      	cmp	r3, #5
 800afd4:	bfc4      	itt	gt
 800afd6:	3b04      	subgt	r3, #4
 800afd8:	9305      	strgt	r3, [sp, #20]
 800afda:	9b05      	ldr	r3, [sp, #20]
 800afdc:	f1a3 0302 	sub.w	r3, r3, #2
 800afe0:	bfcc      	ite	gt
 800afe2:	2500      	movgt	r5, #0
 800afe4:	2501      	movle	r5, #1
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d869      	bhi.n	800b0be <_dtoa_r+0x2c6>
 800afea:	e8df f003 	tbb	[pc, r3]
 800afee:	4e2c      	.short	0x4e2c
 800aff0:	5a4c      	.short	0x5a4c
 800aff2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800aff6:	441d      	add	r5, r3
 800aff8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800affc:	2b20      	cmp	r3, #32
 800affe:	bfc1      	itttt	gt
 800b000:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b004:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b008:	fa09 f303 	lslgt.w	r3, r9, r3
 800b00c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b010:	bfda      	itte	le
 800b012:	f1c3 0320 	rsble	r3, r3, #32
 800b016:	fa06 f003 	lslle.w	r0, r6, r3
 800b01a:	4318      	orrgt	r0, r3
 800b01c:	f7f5 fa72 	bl	8000504 <__aeabi_ui2d>
 800b020:	2301      	movs	r3, #1
 800b022:	4606      	mov	r6, r0
 800b024:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b028:	3d01      	subs	r5, #1
 800b02a:	9310      	str	r3, [sp, #64]	; 0x40
 800b02c:	e771      	b.n	800af12 <_dtoa_r+0x11a>
 800b02e:	2301      	movs	r3, #1
 800b030:	e7b6      	b.n	800afa0 <_dtoa_r+0x1a8>
 800b032:	900e      	str	r0, [sp, #56]	; 0x38
 800b034:	e7b5      	b.n	800afa2 <_dtoa_r+0x1aa>
 800b036:	f1ca 0300 	rsb	r3, sl, #0
 800b03a:	9306      	str	r3, [sp, #24]
 800b03c:	2300      	movs	r3, #0
 800b03e:	eba8 080a 	sub.w	r8, r8, sl
 800b042:	930d      	str	r3, [sp, #52]	; 0x34
 800b044:	e7c2      	b.n	800afcc <_dtoa_r+0x1d4>
 800b046:	2300      	movs	r3, #0
 800b048:	9308      	str	r3, [sp, #32]
 800b04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dc39      	bgt.n	800b0c4 <_dtoa_r+0x2cc>
 800b050:	f04f 0901 	mov.w	r9, #1
 800b054:	f8cd 9004 	str.w	r9, [sp, #4]
 800b058:	464b      	mov	r3, r9
 800b05a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b05e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b060:	2200      	movs	r2, #0
 800b062:	6042      	str	r2, [r0, #4]
 800b064:	2204      	movs	r2, #4
 800b066:	f102 0614 	add.w	r6, r2, #20
 800b06a:	429e      	cmp	r6, r3
 800b06c:	6841      	ldr	r1, [r0, #4]
 800b06e:	d92f      	bls.n	800b0d0 <_dtoa_r+0x2d8>
 800b070:	4620      	mov	r0, r4
 800b072:	f001 fa59 	bl	800c528 <_Balloc>
 800b076:	9000      	str	r0, [sp, #0]
 800b078:	2800      	cmp	r0, #0
 800b07a:	d14b      	bne.n	800b114 <_dtoa_r+0x31c>
 800b07c:	4b24      	ldr	r3, [pc, #144]	; (800b110 <_dtoa_r+0x318>)
 800b07e:	4602      	mov	r2, r0
 800b080:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b084:	e6d1      	b.n	800ae2a <_dtoa_r+0x32>
 800b086:	2301      	movs	r3, #1
 800b088:	e7de      	b.n	800b048 <_dtoa_r+0x250>
 800b08a:	2300      	movs	r3, #0
 800b08c:	9308      	str	r3, [sp, #32]
 800b08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b090:	eb0a 0903 	add.w	r9, sl, r3
 800b094:	f109 0301 	add.w	r3, r9, #1
 800b098:	2b01      	cmp	r3, #1
 800b09a:	9301      	str	r3, [sp, #4]
 800b09c:	bfb8      	it	lt
 800b09e:	2301      	movlt	r3, #1
 800b0a0:	e7dd      	b.n	800b05e <_dtoa_r+0x266>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e7f2      	b.n	800b08c <_dtoa_r+0x294>
 800b0a6:	2501      	movs	r5, #1
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	9305      	str	r3, [sp, #20]
 800b0ac:	9508      	str	r5, [sp, #32]
 800b0ae:	f04f 39ff 	mov.w	r9, #4294967295
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b0b8:	2312      	movs	r3, #18
 800b0ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b0bc:	e7cf      	b.n	800b05e <_dtoa_r+0x266>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	9308      	str	r3, [sp, #32]
 800b0c2:	e7f4      	b.n	800b0ae <_dtoa_r+0x2b6>
 800b0c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b0c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b0cc:	464b      	mov	r3, r9
 800b0ce:	e7c6      	b.n	800b05e <_dtoa_r+0x266>
 800b0d0:	3101      	adds	r1, #1
 800b0d2:	6041      	str	r1, [r0, #4]
 800b0d4:	0052      	lsls	r2, r2, #1
 800b0d6:	e7c6      	b.n	800b066 <_dtoa_r+0x26e>
 800b0d8:	636f4361 	.word	0x636f4361
 800b0dc:	3fd287a7 	.word	0x3fd287a7
 800b0e0:	8b60c8b3 	.word	0x8b60c8b3
 800b0e4:	3fc68a28 	.word	0x3fc68a28
 800b0e8:	509f79fb 	.word	0x509f79fb
 800b0ec:	3fd34413 	.word	0x3fd34413
 800b0f0:	0800dd46 	.word	0x0800dd46
 800b0f4:	0800dd5d 	.word	0x0800dd5d
 800b0f8:	7ff00000 	.word	0x7ff00000
 800b0fc:	0800dd42 	.word	0x0800dd42
 800b100:	0800dd39 	.word	0x0800dd39
 800b104:	0800dbb9 	.word	0x0800dbb9
 800b108:	3ff80000 	.word	0x3ff80000
 800b10c:	0800df38 	.word	0x0800df38
 800b110:	0800ddbc 	.word	0x0800ddbc
 800b114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b116:	9a00      	ldr	r2, [sp, #0]
 800b118:	601a      	str	r2, [r3, #0]
 800b11a:	9b01      	ldr	r3, [sp, #4]
 800b11c:	2b0e      	cmp	r3, #14
 800b11e:	f200 80ad 	bhi.w	800b27c <_dtoa_r+0x484>
 800b122:	2d00      	cmp	r5, #0
 800b124:	f000 80aa 	beq.w	800b27c <_dtoa_r+0x484>
 800b128:	f1ba 0f00 	cmp.w	sl, #0
 800b12c:	dd36      	ble.n	800b19c <_dtoa_r+0x3a4>
 800b12e:	4ac3      	ldr	r2, [pc, #780]	; (800b43c <_dtoa_r+0x644>)
 800b130:	f00a 030f 	and.w	r3, sl, #15
 800b134:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b138:	ed93 7b00 	vldr	d7, [r3]
 800b13c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b140:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b144:	eeb0 8a47 	vmov.f32	s16, s14
 800b148:	eef0 8a67 	vmov.f32	s17, s15
 800b14c:	d016      	beq.n	800b17c <_dtoa_r+0x384>
 800b14e:	4bbc      	ldr	r3, [pc, #752]	; (800b440 <_dtoa_r+0x648>)
 800b150:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b158:	f7f5 fb78 	bl	800084c <__aeabi_ddiv>
 800b15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b160:	f007 070f 	and.w	r7, r7, #15
 800b164:	2503      	movs	r5, #3
 800b166:	4eb6      	ldr	r6, [pc, #728]	; (800b440 <_dtoa_r+0x648>)
 800b168:	b957      	cbnz	r7, 800b180 <_dtoa_r+0x388>
 800b16a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b16e:	ec53 2b18 	vmov	r2, r3, d8
 800b172:	f7f5 fb6b 	bl	800084c <__aeabi_ddiv>
 800b176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b17a:	e029      	b.n	800b1d0 <_dtoa_r+0x3d8>
 800b17c:	2502      	movs	r5, #2
 800b17e:	e7f2      	b.n	800b166 <_dtoa_r+0x36e>
 800b180:	07f9      	lsls	r1, r7, #31
 800b182:	d508      	bpl.n	800b196 <_dtoa_r+0x39e>
 800b184:	ec51 0b18 	vmov	r0, r1, d8
 800b188:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b18c:	f7f5 fa34 	bl	80005f8 <__aeabi_dmul>
 800b190:	ec41 0b18 	vmov	d8, r0, r1
 800b194:	3501      	adds	r5, #1
 800b196:	107f      	asrs	r7, r7, #1
 800b198:	3608      	adds	r6, #8
 800b19a:	e7e5      	b.n	800b168 <_dtoa_r+0x370>
 800b19c:	f000 80a6 	beq.w	800b2ec <_dtoa_r+0x4f4>
 800b1a0:	f1ca 0600 	rsb	r6, sl, #0
 800b1a4:	4ba5      	ldr	r3, [pc, #660]	; (800b43c <_dtoa_r+0x644>)
 800b1a6:	4fa6      	ldr	r7, [pc, #664]	; (800b440 <_dtoa_r+0x648>)
 800b1a8:	f006 020f 	and.w	r2, r6, #15
 800b1ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b1b8:	f7f5 fa1e 	bl	80005f8 <__aeabi_dmul>
 800b1bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1c0:	1136      	asrs	r6, r6, #4
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	2502      	movs	r5, #2
 800b1c6:	2e00      	cmp	r6, #0
 800b1c8:	f040 8085 	bne.w	800b2d6 <_dtoa_r+0x4de>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1d2      	bne.n	800b176 <_dtoa_r+0x37e>
 800b1d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 808c 	beq.w	800b2f0 <_dtoa_r+0x4f8>
 800b1d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b1dc:	4b99      	ldr	r3, [pc, #612]	; (800b444 <_dtoa_r+0x64c>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	4639      	mov	r1, r7
 800b1e4:	f7f5 fc7a 	bl	8000adc <__aeabi_dcmplt>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	f000 8081 	beq.w	800b2f0 <_dtoa_r+0x4f8>
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d07d      	beq.n	800b2f0 <_dtoa_r+0x4f8>
 800b1f4:	f1b9 0f00 	cmp.w	r9, #0
 800b1f8:	dd3c      	ble.n	800b274 <_dtoa_r+0x47c>
 800b1fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b1fe:	9307      	str	r3, [sp, #28]
 800b200:	2200      	movs	r2, #0
 800b202:	4b91      	ldr	r3, [pc, #580]	; (800b448 <_dtoa_r+0x650>)
 800b204:	4630      	mov	r0, r6
 800b206:	4639      	mov	r1, r7
 800b208:	f7f5 f9f6 	bl	80005f8 <__aeabi_dmul>
 800b20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b210:	3501      	adds	r5, #1
 800b212:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b216:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b21a:	4628      	mov	r0, r5
 800b21c:	f7f5 f982 	bl	8000524 <__aeabi_i2d>
 800b220:	4632      	mov	r2, r6
 800b222:	463b      	mov	r3, r7
 800b224:	f7f5 f9e8 	bl	80005f8 <__aeabi_dmul>
 800b228:	4b88      	ldr	r3, [pc, #544]	; (800b44c <_dtoa_r+0x654>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	f7f5 f82e 	bl	800028c <__adddf3>
 800b230:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b238:	9303      	str	r3, [sp, #12]
 800b23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d15c      	bne.n	800b2fa <_dtoa_r+0x502>
 800b240:	4b83      	ldr	r3, [pc, #524]	; (800b450 <_dtoa_r+0x658>)
 800b242:	2200      	movs	r2, #0
 800b244:	4630      	mov	r0, r6
 800b246:	4639      	mov	r1, r7
 800b248:	f7f5 f81e 	bl	8000288 <__aeabi_dsub>
 800b24c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b250:	4606      	mov	r6, r0
 800b252:	460f      	mov	r7, r1
 800b254:	f7f5 fc60 	bl	8000b18 <__aeabi_dcmpgt>
 800b258:	2800      	cmp	r0, #0
 800b25a:	f040 8296 	bne.w	800b78a <_dtoa_r+0x992>
 800b25e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b262:	4630      	mov	r0, r6
 800b264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b268:	4639      	mov	r1, r7
 800b26a:	f7f5 fc37 	bl	8000adc <__aeabi_dcmplt>
 800b26e:	2800      	cmp	r0, #0
 800b270:	f040 8288 	bne.w	800b784 <_dtoa_r+0x98c>
 800b274:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b278:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b27c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f2c0 8158 	blt.w	800b534 <_dtoa_r+0x73c>
 800b284:	f1ba 0f0e 	cmp.w	sl, #14
 800b288:	f300 8154 	bgt.w	800b534 <_dtoa_r+0x73c>
 800b28c:	4b6b      	ldr	r3, [pc, #428]	; (800b43c <_dtoa_r+0x644>)
 800b28e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b292:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f280 80e3 	bge.w	800b464 <_dtoa_r+0x66c>
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f300 80df 	bgt.w	800b464 <_dtoa_r+0x66c>
 800b2a6:	f040 826d 	bne.w	800b784 <_dtoa_r+0x98c>
 800b2aa:	4b69      	ldr	r3, [pc, #420]	; (800b450 <_dtoa_r+0x658>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	f7f5 f9a1 	bl	80005f8 <__aeabi_dmul>
 800b2b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2ba:	f7f5 fc23 	bl	8000b04 <__aeabi_dcmpge>
 800b2be:	9e01      	ldr	r6, [sp, #4]
 800b2c0:	4637      	mov	r7, r6
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	f040 8243 	bne.w	800b74e <_dtoa_r+0x956>
 800b2c8:	9d00      	ldr	r5, [sp, #0]
 800b2ca:	2331      	movs	r3, #49	; 0x31
 800b2cc:	f805 3b01 	strb.w	r3, [r5], #1
 800b2d0:	f10a 0a01 	add.w	sl, sl, #1
 800b2d4:	e23f      	b.n	800b756 <_dtoa_r+0x95e>
 800b2d6:	07f2      	lsls	r2, r6, #31
 800b2d8:	d505      	bpl.n	800b2e6 <_dtoa_r+0x4ee>
 800b2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2de:	f7f5 f98b 	bl	80005f8 <__aeabi_dmul>
 800b2e2:	3501      	adds	r5, #1
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	1076      	asrs	r6, r6, #1
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	e76c      	b.n	800b1c6 <_dtoa_r+0x3ce>
 800b2ec:	2502      	movs	r5, #2
 800b2ee:	e76f      	b.n	800b1d0 <_dtoa_r+0x3d8>
 800b2f0:	9b01      	ldr	r3, [sp, #4]
 800b2f2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b2f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b2f8:	e78d      	b.n	800b216 <_dtoa_r+0x41e>
 800b2fa:	9900      	ldr	r1, [sp, #0]
 800b2fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b2fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b300:	4b4e      	ldr	r3, [pc, #312]	; (800b43c <_dtoa_r+0x644>)
 800b302:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b306:	4401      	add	r1, r0
 800b308:	9102      	str	r1, [sp, #8]
 800b30a:	9908      	ldr	r1, [sp, #32]
 800b30c:	eeb0 8a47 	vmov.f32	s16, s14
 800b310:	eef0 8a67 	vmov.f32	s17, s15
 800b314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b318:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b31c:	2900      	cmp	r1, #0
 800b31e:	d045      	beq.n	800b3ac <_dtoa_r+0x5b4>
 800b320:	494c      	ldr	r1, [pc, #304]	; (800b454 <_dtoa_r+0x65c>)
 800b322:	2000      	movs	r0, #0
 800b324:	f7f5 fa92 	bl	800084c <__aeabi_ddiv>
 800b328:	ec53 2b18 	vmov	r2, r3, d8
 800b32c:	f7f4 ffac 	bl	8000288 <__aeabi_dsub>
 800b330:	9d00      	ldr	r5, [sp, #0]
 800b332:	ec41 0b18 	vmov	d8, r0, r1
 800b336:	4639      	mov	r1, r7
 800b338:	4630      	mov	r0, r6
 800b33a:	f7f5 fc0d 	bl	8000b58 <__aeabi_d2iz>
 800b33e:	900c      	str	r0, [sp, #48]	; 0x30
 800b340:	f7f5 f8f0 	bl	8000524 <__aeabi_i2d>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4630      	mov	r0, r6
 800b34a:	4639      	mov	r1, r7
 800b34c:	f7f4 ff9c 	bl	8000288 <__aeabi_dsub>
 800b350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b352:	3330      	adds	r3, #48	; 0x30
 800b354:	f805 3b01 	strb.w	r3, [r5], #1
 800b358:	ec53 2b18 	vmov	r2, r3, d8
 800b35c:	4606      	mov	r6, r0
 800b35e:	460f      	mov	r7, r1
 800b360:	f7f5 fbbc 	bl	8000adc <__aeabi_dcmplt>
 800b364:	2800      	cmp	r0, #0
 800b366:	d165      	bne.n	800b434 <_dtoa_r+0x63c>
 800b368:	4632      	mov	r2, r6
 800b36a:	463b      	mov	r3, r7
 800b36c:	4935      	ldr	r1, [pc, #212]	; (800b444 <_dtoa_r+0x64c>)
 800b36e:	2000      	movs	r0, #0
 800b370:	f7f4 ff8a 	bl	8000288 <__aeabi_dsub>
 800b374:	ec53 2b18 	vmov	r2, r3, d8
 800b378:	f7f5 fbb0 	bl	8000adc <__aeabi_dcmplt>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f040 80b9 	bne.w	800b4f4 <_dtoa_r+0x6fc>
 800b382:	9b02      	ldr	r3, [sp, #8]
 800b384:	429d      	cmp	r5, r3
 800b386:	f43f af75 	beq.w	800b274 <_dtoa_r+0x47c>
 800b38a:	4b2f      	ldr	r3, [pc, #188]	; (800b448 <_dtoa_r+0x650>)
 800b38c:	ec51 0b18 	vmov	r0, r1, d8
 800b390:	2200      	movs	r2, #0
 800b392:	f7f5 f931 	bl	80005f8 <__aeabi_dmul>
 800b396:	4b2c      	ldr	r3, [pc, #176]	; (800b448 <_dtoa_r+0x650>)
 800b398:	ec41 0b18 	vmov	d8, r0, r1
 800b39c:	2200      	movs	r2, #0
 800b39e:	4630      	mov	r0, r6
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	f7f5 f929 	bl	80005f8 <__aeabi_dmul>
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460f      	mov	r7, r1
 800b3aa:	e7c4      	b.n	800b336 <_dtoa_r+0x53e>
 800b3ac:	ec51 0b17 	vmov	r0, r1, d7
 800b3b0:	f7f5 f922 	bl	80005f8 <__aeabi_dmul>
 800b3b4:	9b02      	ldr	r3, [sp, #8]
 800b3b6:	9d00      	ldr	r5, [sp, #0]
 800b3b8:	930c      	str	r3, [sp, #48]	; 0x30
 800b3ba:	ec41 0b18 	vmov	d8, r0, r1
 800b3be:	4639      	mov	r1, r7
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7f5 fbc9 	bl	8000b58 <__aeabi_d2iz>
 800b3c6:	9011      	str	r0, [sp, #68]	; 0x44
 800b3c8:	f7f5 f8ac 	bl	8000524 <__aeabi_i2d>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	f7f4 ff58 	bl	8000288 <__aeabi_dsub>
 800b3d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3da:	3330      	adds	r3, #48	; 0x30
 800b3dc:	f805 3b01 	strb.w	r3, [r5], #1
 800b3e0:	9b02      	ldr	r3, [sp, #8]
 800b3e2:	429d      	cmp	r5, r3
 800b3e4:	4606      	mov	r6, r0
 800b3e6:	460f      	mov	r7, r1
 800b3e8:	f04f 0200 	mov.w	r2, #0
 800b3ec:	d134      	bne.n	800b458 <_dtoa_r+0x660>
 800b3ee:	4b19      	ldr	r3, [pc, #100]	; (800b454 <_dtoa_r+0x65c>)
 800b3f0:	ec51 0b18 	vmov	r0, r1, d8
 800b3f4:	f7f4 ff4a 	bl	800028c <__adddf3>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	4639      	mov	r1, r7
 800b400:	f7f5 fb8a 	bl	8000b18 <__aeabi_dcmpgt>
 800b404:	2800      	cmp	r0, #0
 800b406:	d175      	bne.n	800b4f4 <_dtoa_r+0x6fc>
 800b408:	ec53 2b18 	vmov	r2, r3, d8
 800b40c:	4911      	ldr	r1, [pc, #68]	; (800b454 <_dtoa_r+0x65c>)
 800b40e:	2000      	movs	r0, #0
 800b410:	f7f4 ff3a 	bl	8000288 <__aeabi_dsub>
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	4630      	mov	r0, r6
 800b41a:	4639      	mov	r1, r7
 800b41c:	f7f5 fb5e 	bl	8000adc <__aeabi_dcmplt>
 800b420:	2800      	cmp	r0, #0
 800b422:	f43f af27 	beq.w	800b274 <_dtoa_r+0x47c>
 800b426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b428:	1e6b      	subs	r3, r5, #1
 800b42a:	930c      	str	r3, [sp, #48]	; 0x30
 800b42c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b430:	2b30      	cmp	r3, #48	; 0x30
 800b432:	d0f8      	beq.n	800b426 <_dtoa_r+0x62e>
 800b434:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b438:	e04a      	b.n	800b4d0 <_dtoa_r+0x6d8>
 800b43a:	bf00      	nop
 800b43c:	0800df38 	.word	0x0800df38
 800b440:	0800df10 	.word	0x0800df10
 800b444:	3ff00000 	.word	0x3ff00000
 800b448:	40240000 	.word	0x40240000
 800b44c:	401c0000 	.word	0x401c0000
 800b450:	40140000 	.word	0x40140000
 800b454:	3fe00000 	.word	0x3fe00000
 800b458:	4baf      	ldr	r3, [pc, #700]	; (800b718 <_dtoa_r+0x920>)
 800b45a:	f7f5 f8cd 	bl	80005f8 <__aeabi_dmul>
 800b45e:	4606      	mov	r6, r0
 800b460:	460f      	mov	r7, r1
 800b462:	e7ac      	b.n	800b3be <_dtoa_r+0x5c6>
 800b464:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b468:	9d00      	ldr	r5, [sp, #0]
 800b46a:	4642      	mov	r2, r8
 800b46c:	464b      	mov	r3, r9
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	f7f5 f9eb 	bl	800084c <__aeabi_ddiv>
 800b476:	f7f5 fb6f 	bl	8000b58 <__aeabi_d2iz>
 800b47a:	9002      	str	r0, [sp, #8]
 800b47c:	f7f5 f852 	bl	8000524 <__aeabi_i2d>
 800b480:	4642      	mov	r2, r8
 800b482:	464b      	mov	r3, r9
 800b484:	f7f5 f8b8 	bl	80005f8 <__aeabi_dmul>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4630      	mov	r0, r6
 800b48e:	4639      	mov	r1, r7
 800b490:	f7f4 fefa 	bl	8000288 <__aeabi_dsub>
 800b494:	9e02      	ldr	r6, [sp, #8]
 800b496:	9f01      	ldr	r7, [sp, #4]
 800b498:	3630      	adds	r6, #48	; 0x30
 800b49a:	f805 6b01 	strb.w	r6, [r5], #1
 800b49e:	9e00      	ldr	r6, [sp, #0]
 800b4a0:	1bae      	subs	r6, r5, r6
 800b4a2:	42b7      	cmp	r7, r6
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	d137      	bne.n	800b51a <_dtoa_r+0x722>
 800b4aa:	f7f4 feef 	bl	800028c <__adddf3>
 800b4ae:	4642      	mov	r2, r8
 800b4b0:	464b      	mov	r3, r9
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	f7f5 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 800b4ba:	b9c8      	cbnz	r0, 800b4f0 <_dtoa_r+0x6f8>
 800b4bc:	4642      	mov	r2, r8
 800b4be:	464b      	mov	r3, r9
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	f7f5 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4c8:	b110      	cbz	r0, 800b4d0 <_dtoa_r+0x6d8>
 800b4ca:	9b02      	ldr	r3, [sp, #8]
 800b4cc:	07d9      	lsls	r1, r3, #31
 800b4ce:	d40f      	bmi.n	800b4f0 <_dtoa_r+0x6f8>
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4659      	mov	r1, fp
 800b4d4:	f001 f868 	bl	800c5a8 <_Bfree>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	702b      	strb	r3, [r5, #0]
 800b4dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4de:	f10a 0001 	add.w	r0, sl, #1
 800b4e2:	6018      	str	r0, [r3, #0]
 800b4e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f43f acd8 	beq.w	800ae9c <_dtoa_r+0xa4>
 800b4ec:	601d      	str	r5, [r3, #0]
 800b4ee:	e4d5      	b.n	800ae9c <_dtoa_r+0xa4>
 800b4f0:	f8cd a01c 	str.w	sl, [sp, #28]
 800b4f4:	462b      	mov	r3, r5
 800b4f6:	461d      	mov	r5, r3
 800b4f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4fc:	2a39      	cmp	r2, #57	; 0x39
 800b4fe:	d108      	bne.n	800b512 <_dtoa_r+0x71a>
 800b500:	9a00      	ldr	r2, [sp, #0]
 800b502:	429a      	cmp	r2, r3
 800b504:	d1f7      	bne.n	800b4f6 <_dtoa_r+0x6fe>
 800b506:	9a07      	ldr	r2, [sp, #28]
 800b508:	9900      	ldr	r1, [sp, #0]
 800b50a:	3201      	adds	r2, #1
 800b50c:	9207      	str	r2, [sp, #28]
 800b50e:	2230      	movs	r2, #48	; 0x30
 800b510:	700a      	strb	r2, [r1, #0]
 800b512:	781a      	ldrb	r2, [r3, #0]
 800b514:	3201      	adds	r2, #1
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	e78c      	b.n	800b434 <_dtoa_r+0x63c>
 800b51a:	4b7f      	ldr	r3, [pc, #508]	; (800b718 <_dtoa_r+0x920>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	f7f5 f86b 	bl	80005f8 <__aeabi_dmul>
 800b522:	2200      	movs	r2, #0
 800b524:	2300      	movs	r3, #0
 800b526:	4606      	mov	r6, r0
 800b528:	460f      	mov	r7, r1
 800b52a:	f7f5 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d09b      	beq.n	800b46a <_dtoa_r+0x672>
 800b532:	e7cd      	b.n	800b4d0 <_dtoa_r+0x6d8>
 800b534:	9a08      	ldr	r2, [sp, #32]
 800b536:	2a00      	cmp	r2, #0
 800b538:	f000 80c4 	beq.w	800b6c4 <_dtoa_r+0x8cc>
 800b53c:	9a05      	ldr	r2, [sp, #20]
 800b53e:	2a01      	cmp	r2, #1
 800b540:	f300 80a8 	bgt.w	800b694 <_dtoa_r+0x89c>
 800b544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b546:	2a00      	cmp	r2, #0
 800b548:	f000 80a0 	beq.w	800b68c <_dtoa_r+0x894>
 800b54c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b550:	9e06      	ldr	r6, [sp, #24]
 800b552:	4645      	mov	r5, r8
 800b554:	9a04      	ldr	r2, [sp, #16]
 800b556:	2101      	movs	r1, #1
 800b558:	441a      	add	r2, r3
 800b55a:	4620      	mov	r0, r4
 800b55c:	4498      	add	r8, r3
 800b55e:	9204      	str	r2, [sp, #16]
 800b560:	f001 f928 	bl	800c7b4 <__i2b>
 800b564:	4607      	mov	r7, r0
 800b566:	2d00      	cmp	r5, #0
 800b568:	dd0b      	ble.n	800b582 <_dtoa_r+0x78a>
 800b56a:	9b04      	ldr	r3, [sp, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	dd08      	ble.n	800b582 <_dtoa_r+0x78a>
 800b570:	42ab      	cmp	r3, r5
 800b572:	9a04      	ldr	r2, [sp, #16]
 800b574:	bfa8      	it	ge
 800b576:	462b      	movge	r3, r5
 800b578:	eba8 0803 	sub.w	r8, r8, r3
 800b57c:	1aed      	subs	r5, r5, r3
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	9304      	str	r3, [sp, #16]
 800b582:	9b06      	ldr	r3, [sp, #24]
 800b584:	b1fb      	cbz	r3, 800b5c6 <_dtoa_r+0x7ce>
 800b586:	9b08      	ldr	r3, [sp, #32]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 809f 	beq.w	800b6cc <_dtoa_r+0x8d4>
 800b58e:	2e00      	cmp	r6, #0
 800b590:	dd11      	ble.n	800b5b6 <_dtoa_r+0x7be>
 800b592:	4639      	mov	r1, r7
 800b594:	4632      	mov	r2, r6
 800b596:	4620      	mov	r0, r4
 800b598:	f001 f9c8 	bl	800c92c <__pow5mult>
 800b59c:	465a      	mov	r2, fp
 800b59e:	4601      	mov	r1, r0
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f001 f91c 	bl	800c7e0 <__multiply>
 800b5a8:	4659      	mov	r1, fp
 800b5aa:	9007      	str	r0, [sp, #28]
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f000 fffb 	bl	800c5a8 <_Bfree>
 800b5b2:	9b07      	ldr	r3, [sp, #28]
 800b5b4:	469b      	mov	fp, r3
 800b5b6:	9b06      	ldr	r3, [sp, #24]
 800b5b8:	1b9a      	subs	r2, r3, r6
 800b5ba:	d004      	beq.n	800b5c6 <_dtoa_r+0x7ce>
 800b5bc:	4659      	mov	r1, fp
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f001 f9b4 	bl	800c92c <__pow5mult>
 800b5c4:	4683      	mov	fp, r0
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f001 f8f3 	bl	800c7b4 <__i2b>
 800b5ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	dd7c      	ble.n	800b6d0 <_dtoa_r+0x8d8>
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	4601      	mov	r1, r0
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f001 f9a6 	bl	800c92c <__pow5mult>
 800b5e0:	9b05      	ldr	r3, [sp, #20]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	4606      	mov	r6, r0
 800b5e6:	dd76      	ble.n	800b6d6 <_dtoa_r+0x8de>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9306      	str	r3, [sp, #24]
 800b5ec:	6933      	ldr	r3, [r6, #16]
 800b5ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5f2:	6918      	ldr	r0, [r3, #16]
 800b5f4:	f001 f88e 	bl	800c714 <__hi0bits>
 800b5f8:	f1c0 0020 	rsb	r0, r0, #32
 800b5fc:	9b04      	ldr	r3, [sp, #16]
 800b5fe:	4418      	add	r0, r3
 800b600:	f010 001f 	ands.w	r0, r0, #31
 800b604:	f000 8086 	beq.w	800b714 <_dtoa_r+0x91c>
 800b608:	f1c0 0320 	rsb	r3, r0, #32
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	dd7f      	ble.n	800b710 <_dtoa_r+0x918>
 800b610:	f1c0 001c 	rsb	r0, r0, #28
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	4403      	add	r3, r0
 800b618:	4480      	add	r8, r0
 800b61a:	4405      	add	r5, r0
 800b61c:	9304      	str	r3, [sp, #16]
 800b61e:	f1b8 0f00 	cmp.w	r8, #0
 800b622:	dd05      	ble.n	800b630 <_dtoa_r+0x838>
 800b624:	4659      	mov	r1, fp
 800b626:	4642      	mov	r2, r8
 800b628:	4620      	mov	r0, r4
 800b62a:	f001 f9d9 	bl	800c9e0 <__lshift>
 800b62e:	4683      	mov	fp, r0
 800b630:	9b04      	ldr	r3, [sp, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	dd05      	ble.n	800b642 <_dtoa_r+0x84a>
 800b636:	4631      	mov	r1, r6
 800b638:	461a      	mov	r2, r3
 800b63a:	4620      	mov	r0, r4
 800b63c:	f001 f9d0 	bl	800c9e0 <__lshift>
 800b640:	4606      	mov	r6, r0
 800b642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b644:	2b00      	cmp	r3, #0
 800b646:	d069      	beq.n	800b71c <_dtoa_r+0x924>
 800b648:	4631      	mov	r1, r6
 800b64a:	4658      	mov	r0, fp
 800b64c:	f001 fa34 	bl	800cab8 <__mcmp>
 800b650:	2800      	cmp	r0, #0
 800b652:	da63      	bge.n	800b71c <_dtoa_r+0x924>
 800b654:	2300      	movs	r3, #0
 800b656:	4659      	mov	r1, fp
 800b658:	220a      	movs	r2, #10
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 ffc6 	bl	800c5ec <__multadd>
 800b660:	9b08      	ldr	r3, [sp, #32]
 800b662:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b666:	4683      	mov	fp, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 818f 	beq.w	800b98c <_dtoa_r+0xb94>
 800b66e:	4639      	mov	r1, r7
 800b670:	2300      	movs	r3, #0
 800b672:	220a      	movs	r2, #10
 800b674:	4620      	mov	r0, r4
 800b676:	f000 ffb9 	bl	800c5ec <__multadd>
 800b67a:	f1b9 0f00 	cmp.w	r9, #0
 800b67e:	4607      	mov	r7, r0
 800b680:	f300 808e 	bgt.w	800b7a0 <_dtoa_r+0x9a8>
 800b684:	9b05      	ldr	r3, [sp, #20]
 800b686:	2b02      	cmp	r3, #2
 800b688:	dc50      	bgt.n	800b72c <_dtoa_r+0x934>
 800b68a:	e089      	b.n	800b7a0 <_dtoa_r+0x9a8>
 800b68c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b68e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b692:	e75d      	b.n	800b550 <_dtoa_r+0x758>
 800b694:	9b01      	ldr	r3, [sp, #4]
 800b696:	1e5e      	subs	r6, r3, #1
 800b698:	9b06      	ldr	r3, [sp, #24]
 800b69a:	42b3      	cmp	r3, r6
 800b69c:	bfbf      	itttt	lt
 800b69e:	9b06      	ldrlt	r3, [sp, #24]
 800b6a0:	9606      	strlt	r6, [sp, #24]
 800b6a2:	1af2      	sublt	r2, r6, r3
 800b6a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b6a6:	bfb6      	itet	lt
 800b6a8:	189b      	addlt	r3, r3, r2
 800b6aa:	1b9e      	subge	r6, r3, r6
 800b6ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b6ae:	9b01      	ldr	r3, [sp, #4]
 800b6b0:	bfb8      	it	lt
 800b6b2:	2600      	movlt	r6, #0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	bfb5      	itete	lt
 800b6b8:	eba8 0503 	sublt.w	r5, r8, r3
 800b6bc:	9b01      	ldrge	r3, [sp, #4]
 800b6be:	2300      	movlt	r3, #0
 800b6c0:	4645      	movge	r5, r8
 800b6c2:	e747      	b.n	800b554 <_dtoa_r+0x75c>
 800b6c4:	9e06      	ldr	r6, [sp, #24]
 800b6c6:	9f08      	ldr	r7, [sp, #32]
 800b6c8:	4645      	mov	r5, r8
 800b6ca:	e74c      	b.n	800b566 <_dtoa_r+0x76e>
 800b6cc:	9a06      	ldr	r2, [sp, #24]
 800b6ce:	e775      	b.n	800b5bc <_dtoa_r+0x7c4>
 800b6d0:	9b05      	ldr	r3, [sp, #20]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	dc18      	bgt.n	800b708 <_dtoa_r+0x910>
 800b6d6:	9b02      	ldr	r3, [sp, #8]
 800b6d8:	b9b3      	cbnz	r3, 800b708 <_dtoa_r+0x910>
 800b6da:	9b03      	ldr	r3, [sp, #12]
 800b6dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6e0:	b9a3      	cbnz	r3, 800b70c <_dtoa_r+0x914>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6e8:	0d1b      	lsrs	r3, r3, #20
 800b6ea:	051b      	lsls	r3, r3, #20
 800b6ec:	b12b      	cbz	r3, 800b6fa <_dtoa_r+0x902>
 800b6ee:	9b04      	ldr	r3, [sp, #16]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	9304      	str	r3, [sp, #16]
 800b6f4:	f108 0801 	add.w	r8, r8, #1
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	9306      	str	r3, [sp, #24]
 800b6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f47f af74 	bne.w	800b5ec <_dtoa_r+0x7f4>
 800b704:	2001      	movs	r0, #1
 800b706:	e779      	b.n	800b5fc <_dtoa_r+0x804>
 800b708:	2300      	movs	r3, #0
 800b70a:	e7f6      	b.n	800b6fa <_dtoa_r+0x902>
 800b70c:	9b02      	ldr	r3, [sp, #8]
 800b70e:	e7f4      	b.n	800b6fa <_dtoa_r+0x902>
 800b710:	d085      	beq.n	800b61e <_dtoa_r+0x826>
 800b712:	4618      	mov	r0, r3
 800b714:	301c      	adds	r0, #28
 800b716:	e77d      	b.n	800b614 <_dtoa_r+0x81c>
 800b718:	40240000 	.word	0x40240000
 800b71c:	9b01      	ldr	r3, [sp, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	dc38      	bgt.n	800b794 <_dtoa_r+0x99c>
 800b722:	9b05      	ldr	r3, [sp, #20]
 800b724:	2b02      	cmp	r3, #2
 800b726:	dd35      	ble.n	800b794 <_dtoa_r+0x99c>
 800b728:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b72c:	f1b9 0f00 	cmp.w	r9, #0
 800b730:	d10d      	bne.n	800b74e <_dtoa_r+0x956>
 800b732:	4631      	mov	r1, r6
 800b734:	464b      	mov	r3, r9
 800b736:	2205      	movs	r2, #5
 800b738:	4620      	mov	r0, r4
 800b73a:	f000 ff57 	bl	800c5ec <__multadd>
 800b73e:	4601      	mov	r1, r0
 800b740:	4606      	mov	r6, r0
 800b742:	4658      	mov	r0, fp
 800b744:	f001 f9b8 	bl	800cab8 <__mcmp>
 800b748:	2800      	cmp	r0, #0
 800b74a:	f73f adbd 	bgt.w	800b2c8 <_dtoa_r+0x4d0>
 800b74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b750:	9d00      	ldr	r5, [sp, #0]
 800b752:	ea6f 0a03 	mvn.w	sl, r3
 800b756:	f04f 0800 	mov.w	r8, #0
 800b75a:	4631      	mov	r1, r6
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 ff23 	bl	800c5a8 <_Bfree>
 800b762:	2f00      	cmp	r7, #0
 800b764:	f43f aeb4 	beq.w	800b4d0 <_dtoa_r+0x6d8>
 800b768:	f1b8 0f00 	cmp.w	r8, #0
 800b76c:	d005      	beq.n	800b77a <_dtoa_r+0x982>
 800b76e:	45b8      	cmp	r8, r7
 800b770:	d003      	beq.n	800b77a <_dtoa_r+0x982>
 800b772:	4641      	mov	r1, r8
 800b774:	4620      	mov	r0, r4
 800b776:	f000 ff17 	bl	800c5a8 <_Bfree>
 800b77a:	4639      	mov	r1, r7
 800b77c:	4620      	mov	r0, r4
 800b77e:	f000 ff13 	bl	800c5a8 <_Bfree>
 800b782:	e6a5      	b.n	800b4d0 <_dtoa_r+0x6d8>
 800b784:	2600      	movs	r6, #0
 800b786:	4637      	mov	r7, r6
 800b788:	e7e1      	b.n	800b74e <_dtoa_r+0x956>
 800b78a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b78c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b790:	4637      	mov	r7, r6
 800b792:	e599      	b.n	800b2c8 <_dtoa_r+0x4d0>
 800b794:	9b08      	ldr	r3, [sp, #32]
 800b796:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 80fd 	beq.w	800b99a <_dtoa_r+0xba2>
 800b7a0:	2d00      	cmp	r5, #0
 800b7a2:	dd05      	ble.n	800b7b0 <_dtoa_r+0x9b8>
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	462a      	mov	r2, r5
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f001 f919 	bl	800c9e0 <__lshift>
 800b7ae:	4607      	mov	r7, r0
 800b7b0:	9b06      	ldr	r3, [sp, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d05c      	beq.n	800b870 <_dtoa_r+0xa78>
 800b7b6:	6879      	ldr	r1, [r7, #4]
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 feb5 	bl	800c528 <_Balloc>
 800b7be:	4605      	mov	r5, r0
 800b7c0:	b928      	cbnz	r0, 800b7ce <_dtoa_r+0x9d6>
 800b7c2:	4b80      	ldr	r3, [pc, #512]	; (800b9c4 <_dtoa_r+0xbcc>)
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b7ca:	f7ff bb2e 	b.w	800ae2a <_dtoa_r+0x32>
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	3202      	adds	r2, #2
 800b7d2:	0092      	lsls	r2, r2, #2
 800b7d4:	f107 010c 	add.w	r1, r7, #12
 800b7d8:	300c      	adds	r0, #12
 800b7da:	f7fd fbc7 	bl	8008f6c <memcpy>
 800b7de:	2201      	movs	r2, #1
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f001 f8fc 	bl	800c9e0 <__lshift>
 800b7e8:	9b00      	ldr	r3, [sp, #0]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	9301      	str	r3, [sp, #4]
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	444b      	add	r3, r9
 800b7f2:	9307      	str	r3, [sp, #28]
 800b7f4:	9b02      	ldr	r3, [sp, #8]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	46b8      	mov	r8, r7
 800b7fc:	9306      	str	r3, [sp, #24]
 800b7fe:	4607      	mov	r7, r0
 800b800:	9b01      	ldr	r3, [sp, #4]
 800b802:	4631      	mov	r1, r6
 800b804:	3b01      	subs	r3, #1
 800b806:	4658      	mov	r0, fp
 800b808:	9302      	str	r3, [sp, #8]
 800b80a:	f7ff fa67 	bl	800acdc <quorem>
 800b80e:	4603      	mov	r3, r0
 800b810:	3330      	adds	r3, #48	; 0x30
 800b812:	9004      	str	r0, [sp, #16]
 800b814:	4641      	mov	r1, r8
 800b816:	4658      	mov	r0, fp
 800b818:	9308      	str	r3, [sp, #32]
 800b81a:	f001 f94d 	bl	800cab8 <__mcmp>
 800b81e:	463a      	mov	r2, r7
 800b820:	4681      	mov	r9, r0
 800b822:	4631      	mov	r1, r6
 800b824:	4620      	mov	r0, r4
 800b826:	f001 f963 	bl	800caf0 <__mdiff>
 800b82a:	68c2      	ldr	r2, [r0, #12]
 800b82c:	9b08      	ldr	r3, [sp, #32]
 800b82e:	4605      	mov	r5, r0
 800b830:	bb02      	cbnz	r2, 800b874 <_dtoa_r+0xa7c>
 800b832:	4601      	mov	r1, r0
 800b834:	4658      	mov	r0, fp
 800b836:	f001 f93f 	bl	800cab8 <__mcmp>
 800b83a:	9b08      	ldr	r3, [sp, #32]
 800b83c:	4602      	mov	r2, r0
 800b83e:	4629      	mov	r1, r5
 800b840:	4620      	mov	r0, r4
 800b842:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b846:	f000 feaf 	bl	800c5a8 <_Bfree>
 800b84a:	9b05      	ldr	r3, [sp, #20]
 800b84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b84e:	9d01      	ldr	r5, [sp, #4]
 800b850:	ea43 0102 	orr.w	r1, r3, r2
 800b854:	9b06      	ldr	r3, [sp, #24]
 800b856:	430b      	orrs	r3, r1
 800b858:	9b08      	ldr	r3, [sp, #32]
 800b85a:	d10d      	bne.n	800b878 <_dtoa_r+0xa80>
 800b85c:	2b39      	cmp	r3, #57	; 0x39
 800b85e:	d029      	beq.n	800b8b4 <_dtoa_r+0xabc>
 800b860:	f1b9 0f00 	cmp.w	r9, #0
 800b864:	dd01      	ble.n	800b86a <_dtoa_r+0xa72>
 800b866:	9b04      	ldr	r3, [sp, #16]
 800b868:	3331      	adds	r3, #49	; 0x31
 800b86a:	9a02      	ldr	r2, [sp, #8]
 800b86c:	7013      	strb	r3, [r2, #0]
 800b86e:	e774      	b.n	800b75a <_dtoa_r+0x962>
 800b870:	4638      	mov	r0, r7
 800b872:	e7b9      	b.n	800b7e8 <_dtoa_r+0x9f0>
 800b874:	2201      	movs	r2, #1
 800b876:	e7e2      	b.n	800b83e <_dtoa_r+0xa46>
 800b878:	f1b9 0f00 	cmp.w	r9, #0
 800b87c:	db06      	blt.n	800b88c <_dtoa_r+0xa94>
 800b87e:	9905      	ldr	r1, [sp, #20]
 800b880:	ea41 0909 	orr.w	r9, r1, r9
 800b884:	9906      	ldr	r1, [sp, #24]
 800b886:	ea59 0101 	orrs.w	r1, r9, r1
 800b88a:	d120      	bne.n	800b8ce <_dtoa_r+0xad6>
 800b88c:	2a00      	cmp	r2, #0
 800b88e:	ddec      	ble.n	800b86a <_dtoa_r+0xa72>
 800b890:	4659      	mov	r1, fp
 800b892:	2201      	movs	r2, #1
 800b894:	4620      	mov	r0, r4
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	f001 f8a2 	bl	800c9e0 <__lshift>
 800b89c:	4631      	mov	r1, r6
 800b89e:	4683      	mov	fp, r0
 800b8a0:	f001 f90a 	bl	800cab8 <__mcmp>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	9b01      	ldr	r3, [sp, #4]
 800b8a8:	dc02      	bgt.n	800b8b0 <_dtoa_r+0xab8>
 800b8aa:	d1de      	bne.n	800b86a <_dtoa_r+0xa72>
 800b8ac:	07da      	lsls	r2, r3, #31
 800b8ae:	d5dc      	bpl.n	800b86a <_dtoa_r+0xa72>
 800b8b0:	2b39      	cmp	r3, #57	; 0x39
 800b8b2:	d1d8      	bne.n	800b866 <_dtoa_r+0xa6e>
 800b8b4:	9a02      	ldr	r2, [sp, #8]
 800b8b6:	2339      	movs	r3, #57	; 0x39
 800b8b8:	7013      	strb	r3, [r2, #0]
 800b8ba:	462b      	mov	r3, r5
 800b8bc:	461d      	mov	r5, r3
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b8c4:	2a39      	cmp	r2, #57	; 0x39
 800b8c6:	d050      	beq.n	800b96a <_dtoa_r+0xb72>
 800b8c8:	3201      	adds	r2, #1
 800b8ca:	701a      	strb	r2, [r3, #0]
 800b8cc:	e745      	b.n	800b75a <_dtoa_r+0x962>
 800b8ce:	2a00      	cmp	r2, #0
 800b8d0:	dd03      	ble.n	800b8da <_dtoa_r+0xae2>
 800b8d2:	2b39      	cmp	r3, #57	; 0x39
 800b8d4:	d0ee      	beq.n	800b8b4 <_dtoa_r+0xabc>
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	e7c7      	b.n	800b86a <_dtoa_r+0xa72>
 800b8da:	9a01      	ldr	r2, [sp, #4]
 800b8dc:	9907      	ldr	r1, [sp, #28]
 800b8de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b8e2:	428a      	cmp	r2, r1
 800b8e4:	d02a      	beq.n	800b93c <_dtoa_r+0xb44>
 800b8e6:	4659      	mov	r1, fp
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	220a      	movs	r2, #10
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 fe7d 	bl	800c5ec <__multadd>
 800b8f2:	45b8      	cmp	r8, r7
 800b8f4:	4683      	mov	fp, r0
 800b8f6:	f04f 0300 	mov.w	r3, #0
 800b8fa:	f04f 020a 	mov.w	r2, #10
 800b8fe:	4641      	mov	r1, r8
 800b900:	4620      	mov	r0, r4
 800b902:	d107      	bne.n	800b914 <_dtoa_r+0xb1c>
 800b904:	f000 fe72 	bl	800c5ec <__multadd>
 800b908:	4680      	mov	r8, r0
 800b90a:	4607      	mov	r7, r0
 800b90c:	9b01      	ldr	r3, [sp, #4]
 800b90e:	3301      	adds	r3, #1
 800b910:	9301      	str	r3, [sp, #4]
 800b912:	e775      	b.n	800b800 <_dtoa_r+0xa08>
 800b914:	f000 fe6a 	bl	800c5ec <__multadd>
 800b918:	4639      	mov	r1, r7
 800b91a:	4680      	mov	r8, r0
 800b91c:	2300      	movs	r3, #0
 800b91e:	220a      	movs	r2, #10
 800b920:	4620      	mov	r0, r4
 800b922:	f000 fe63 	bl	800c5ec <__multadd>
 800b926:	4607      	mov	r7, r0
 800b928:	e7f0      	b.n	800b90c <_dtoa_r+0xb14>
 800b92a:	f1b9 0f00 	cmp.w	r9, #0
 800b92e:	9a00      	ldr	r2, [sp, #0]
 800b930:	bfcc      	ite	gt
 800b932:	464d      	movgt	r5, r9
 800b934:	2501      	movle	r5, #1
 800b936:	4415      	add	r5, r2
 800b938:	f04f 0800 	mov.w	r8, #0
 800b93c:	4659      	mov	r1, fp
 800b93e:	2201      	movs	r2, #1
 800b940:	4620      	mov	r0, r4
 800b942:	9301      	str	r3, [sp, #4]
 800b944:	f001 f84c 	bl	800c9e0 <__lshift>
 800b948:	4631      	mov	r1, r6
 800b94a:	4683      	mov	fp, r0
 800b94c:	f001 f8b4 	bl	800cab8 <__mcmp>
 800b950:	2800      	cmp	r0, #0
 800b952:	dcb2      	bgt.n	800b8ba <_dtoa_r+0xac2>
 800b954:	d102      	bne.n	800b95c <_dtoa_r+0xb64>
 800b956:	9b01      	ldr	r3, [sp, #4]
 800b958:	07db      	lsls	r3, r3, #31
 800b95a:	d4ae      	bmi.n	800b8ba <_dtoa_r+0xac2>
 800b95c:	462b      	mov	r3, r5
 800b95e:	461d      	mov	r5, r3
 800b960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b964:	2a30      	cmp	r2, #48	; 0x30
 800b966:	d0fa      	beq.n	800b95e <_dtoa_r+0xb66>
 800b968:	e6f7      	b.n	800b75a <_dtoa_r+0x962>
 800b96a:	9a00      	ldr	r2, [sp, #0]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d1a5      	bne.n	800b8bc <_dtoa_r+0xac4>
 800b970:	f10a 0a01 	add.w	sl, sl, #1
 800b974:	2331      	movs	r3, #49	; 0x31
 800b976:	e779      	b.n	800b86c <_dtoa_r+0xa74>
 800b978:	4b13      	ldr	r3, [pc, #76]	; (800b9c8 <_dtoa_r+0xbd0>)
 800b97a:	f7ff baaf 	b.w	800aedc <_dtoa_r+0xe4>
 800b97e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b980:	2b00      	cmp	r3, #0
 800b982:	f47f aa86 	bne.w	800ae92 <_dtoa_r+0x9a>
 800b986:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <_dtoa_r+0xbd4>)
 800b988:	f7ff baa8 	b.w	800aedc <_dtoa_r+0xe4>
 800b98c:	f1b9 0f00 	cmp.w	r9, #0
 800b990:	dc03      	bgt.n	800b99a <_dtoa_r+0xba2>
 800b992:	9b05      	ldr	r3, [sp, #20]
 800b994:	2b02      	cmp	r3, #2
 800b996:	f73f aec9 	bgt.w	800b72c <_dtoa_r+0x934>
 800b99a:	9d00      	ldr	r5, [sp, #0]
 800b99c:	4631      	mov	r1, r6
 800b99e:	4658      	mov	r0, fp
 800b9a0:	f7ff f99c 	bl	800acdc <quorem>
 800b9a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b9a8:	f805 3b01 	strb.w	r3, [r5], #1
 800b9ac:	9a00      	ldr	r2, [sp, #0]
 800b9ae:	1aaa      	subs	r2, r5, r2
 800b9b0:	4591      	cmp	r9, r2
 800b9b2:	ddba      	ble.n	800b92a <_dtoa_r+0xb32>
 800b9b4:	4659      	mov	r1, fp
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	220a      	movs	r2, #10
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 fe16 	bl	800c5ec <__multadd>
 800b9c0:	4683      	mov	fp, r0
 800b9c2:	e7eb      	b.n	800b99c <_dtoa_r+0xba4>
 800b9c4:	0800ddbc 	.word	0x0800ddbc
 800b9c8:	0800dbb8 	.word	0x0800dbb8
 800b9cc:	0800dd39 	.word	0x0800dd39

0800b9d0 <__sflush_r>:
 800b9d0:	898a      	ldrh	r2, [r1, #12]
 800b9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	0710      	lsls	r0, r2, #28
 800b9da:	460c      	mov	r4, r1
 800b9dc:	d458      	bmi.n	800ba90 <__sflush_r+0xc0>
 800b9de:	684b      	ldr	r3, [r1, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dc05      	bgt.n	800b9f0 <__sflush_r+0x20>
 800b9e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	dc02      	bgt.n	800b9f0 <__sflush_r+0x20>
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9f2:	2e00      	cmp	r6, #0
 800b9f4:	d0f9      	beq.n	800b9ea <__sflush_r+0x1a>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9fc:	682f      	ldr	r7, [r5, #0]
 800b9fe:	602b      	str	r3, [r5, #0]
 800ba00:	d032      	beq.n	800ba68 <__sflush_r+0x98>
 800ba02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	075a      	lsls	r2, r3, #29
 800ba08:	d505      	bpl.n	800ba16 <__sflush_r+0x46>
 800ba0a:	6863      	ldr	r3, [r4, #4]
 800ba0c:	1ac0      	subs	r0, r0, r3
 800ba0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba10:	b10b      	cbz	r3, 800ba16 <__sflush_r+0x46>
 800ba12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba14:	1ac0      	subs	r0, r0, r3
 800ba16:	2300      	movs	r3, #0
 800ba18:	4602      	mov	r2, r0
 800ba1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba1c:	6a21      	ldr	r1, [r4, #32]
 800ba1e:	4628      	mov	r0, r5
 800ba20:	47b0      	blx	r6
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	d106      	bne.n	800ba36 <__sflush_r+0x66>
 800ba28:	6829      	ldr	r1, [r5, #0]
 800ba2a:	291d      	cmp	r1, #29
 800ba2c:	d82c      	bhi.n	800ba88 <__sflush_r+0xb8>
 800ba2e:	4a2a      	ldr	r2, [pc, #168]	; (800bad8 <__sflush_r+0x108>)
 800ba30:	40ca      	lsrs	r2, r1
 800ba32:	07d6      	lsls	r6, r2, #31
 800ba34:	d528      	bpl.n	800ba88 <__sflush_r+0xb8>
 800ba36:	2200      	movs	r2, #0
 800ba38:	6062      	str	r2, [r4, #4]
 800ba3a:	04d9      	lsls	r1, r3, #19
 800ba3c:	6922      	ldr	r2, [r4, #16]
 800ba3e:	6022      	str	r2, [r4, #0]
 800ba40:	d504      	bpl.n	800ba4c <__sflush_r+0x7c>
 800ba42:	1c42      	adds	r2, r0, #1
 800ba44:	d101      	bne.n	800ba4a <__sflush_r+0x7a>
 800ba46:	682b      	ldr	r3, [r5, #0]
 800ba48:	b903      	cbnz	r3, 800ba4c <__sflush_r+0x7c>
 800ba4a:	6560      	str	r0, [r4, #84]	; 0x54
 800ba4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba4e:	602f      	str	r7, [r5, #0]
 800ba50:	2900      	cmp	r1, #0
 800ba52:	d0ca      	beq.n	800b9ea <__sflush_r+0x1a>
 800ba54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba58:	4299      	cmp	r1, r3
 800ba5a:	d002      	beq.n	800ba62 <__sflush_r+0x92>
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f001 fa2d 	bl	800cebc <_free_r>
 800ba62:	2000      	movs	r0, #0
 800ba64:	6360      	str	r0, [r4, #52]	; 0x34
 800ba66:	e7c1      	b.n	800b9ec <__sflush_r+0x1c>
 800ba68:	6a21      	ldr	r1, [r4, #32]
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	47b0      	blx	r6
 800ba70:	1c41      	adds	r1, r0, #1
 800ba72:	d1c7      	bne.n	800ba04 <__sflush_r+0x34>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d0c4      	beq.n	800ba04 <__sflush_r+0x34>
 800ba7a:	2b1d      	cmp	r3, #29
 800ba7c:	d001      	beq.n	800ba82 <__sflush_r+0xb2>
 800ba7e:	2b16      	cmp	r3, #22
 800ba80:	d101      	bne.n	800ba86 <__sflush_r+0xb6>
 800ba82:	602f      	str	r7, [r5, #0]
 800ba84:	e7b1      	b.n	800b9ea <__sflush_r+0x1a>
 800ba86:	89a3      	ldrh	r3, [r4, #12]
 800ba88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba8c:	81a3      	strh	r3, [r4, #12]
 800ba8e:	e7ad      	b.n	800b9ec <__sflush_r+0x1c>
 800ba90:	690f      	ldr	r7, [r1, #16]
 800ba92:	2f00      	cmp	r7, #0
 800ba94:	d0a9      	beq.n	800b9ea <__sflush_r+0x1a>
 800ba96:	0793      	lsls	r3, r2, #30
 800ba98:	680e      	ldr	r6, [r1, #0]
 800ba9a:	bf08      	it	eq
 800ba9c:	694b      	ldreq	r3, [r1, #20]
 800ba9e:	600f      	str	r7, [r1, #0]
 800baa0:	bf18      	it	ne
 800baa2:	2300      	movne	r3, #0
 800baa4:	eba6 0807 	sub.w	r8, r6, r7
 800baa8:	608b      	str	r3, [r1, #8]
 800baaa:	f1b8 0f00 	cmp.w	r8, #0
 800baae:	dd9c      	ble.n	800b9ea <__sflush_r+0x1a>
 800bab0:	6a21      	ldr	r1, [r4, #32]
 800bab2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bab4:	4643      	mov	r3, r8
 800bab6:	463a      	mov	r2, r7
 800bab8:	4628      	mov	r0, r5
 800baba:	47b0      	blx	r6
 800babc:	2800      	cmp	r0, #0
 800babe:	dc06      	bgt.n	800bace <__sflush_r+0xfe>
 800bac0:	89a3      	ldrh	r3, [r4, #12]
 800bac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bac6:	81a3      	strh	r3, [r4, #12]
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	e78e      	b.n	800b9ec <__sflush_r+0x1c>
 800bace:	4407      	add	r7, r0
 800bad0:	eba8 0800 	sub.w	r8, r8, r0
 800bad4:	e7e9      	b.n	800baaa <__sflush_r+0xda>
 800bad6:	bf00      	nop
 800bad8:	20400001 	.word	0x20400001

0800badc <_fflush_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	690b      	ldr	r3, [r1, #16]
 800bae0:	4605      	mov	r5, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	b913      	cbnz	r3, 800baec <_fflush_r+0x10>
 800bae6:	2500      	movs	r5, #0
 800bae8:	4628      	mov	r0, r5
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	b118      	cbz	r0, 800baf6 <_fflush_r+0x1a>
 800baee:	6983      	ldr	r3, [r0, #24]
 800baf0:	b90b      	cbnz	r3, 800baf6 <_fflush_r+0x1a>
 800baf2:	f000 f887 	bl	800bc04 <__sinit>
 800baf6:	4b14      	ldr	r3, [pc, #80]	; (800bb48 <_fflush_r+0x6c>)
 800baf8:	429c      	cmp	r4, r3
 800bafa:	d11b      	bne.n	800bb34 <_fflush_r+0x58>
 800bafc:	686c      	ldr	r4, [r5, #4]
 800bafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0ef      	beq.n	800bae6 <_fflush_r+0xa>
 800bb06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb08:	07d0      	lsls	r0, r2, #31
 800bb0a:	d404      	bmi.n	800bb16 <_fflush_r+0x3a>
 800bb0c:	0599      	lsls	r1, r3, #22
 800bb0e:	d402      	bmi.n	800bb16 <_fflush_r+0x3a>
 800bb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb12:	f000 fc88 	bl	800c426 <__retarget_lock_acquire_recursive>
 800bb16:	4628      	mov	r0, r5
 800bb18:	4621      	mov	r1, r4
 800bb1a:	f7ff ff59 	bl	800b9d0 <__sflush_r>
 800bb1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb20:	07da      	lsls	r2, r3, #31
 800bb22:	4605      	mov	r5, r0
 800bb24:	d4e0      	bmi.n	800bae8 <_fflush_r+0xc>
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	059b      	lsls	r3, r3, #22
 800bb2a:	d4dd      	bmi.n	800bae8 <_fflush_r+0xc>
 800bb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb2e:	f000 fc7b 	bl	800c428 <__retarget_lock_release_recursive>
 800bb32:	e7d9      	b.n	800bae8 <_fflush_r+0xc>
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <_fflush_r+0x70>)
 800bb36:	429c      	cmp	r4, r3
 800bb38:	d101      	bne.n	800bb3e <_fflush_r+0x62>
 800bb3a:	68ac      	ldr	r4, [r5, #8]
 800bb3c:	e7df      	b.n	800bafe <_fflush_r+0x22>
 800bb3e:	4b04      	ldr	r3, [pc, #16]	; (800bb50 <_fflush_r+0x74>)
 800bb40:	429c      	cmp	r4, r3
 800bb42:	bf08      	it	eq
 800bb44:	68ec      	ldreq	r4, [r5, #12]
 800bb46:	e7da      	b.n	800bafe <_fflush_r+0x22>
 800bb48:	0800ddf0 	.word	0x0800ddf0
 800bb4c:	0800de10 	.word	0x0800de10
 800bb50:	0800ddd0 	.word	0x0800ddd0

0800bb54 <std>:
 800bb54:	2300      	movs	r3, #0
 800bb56:	b510      	push	{r4, lr}
 800bb58:	4604      	mov	r4, r0
 800bb5a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb62:	6083      	str	r3, [r0, #8]
 800bb64:	8181      	strh	r1, [r0, #12]
 800bb66:	6643      	str	r3, [r0, #100]	; 0x64
 800bb68:	81c2      	strh	r2, [r0, #14]
 800bb6a:	6183      	str	r3, [r0, #24]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	2208      	movs	r2, #8
 800bb70:	305c      	adds	r0, #92	; 0x5c
 800bb72:	f7fd fa09 	bl	8008f88 <memset>
 800bb76:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <std+0x38>)
 800bb78:	6263      	str	r3, [r4, #36]	; 0x24
 800bb7a:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <std+0x3c>)
 800bb7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb7e:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <std+0x40>)
 800bb80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb82:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <std+0x44>)
 800bb84:	6224      	str	r4, [r4, #32]
 800bb86:	6323      	str	r3, [r4, #48]	; 0x30
 800bb88:	bd10      	pop	{r4, pc}
 800bb8a:	bf00      	nop
 800bb8c:	0800d5b1 	.word	0x0800d5b1
 800bb90:	0800d5d3 	.word	0x0800d5d3
 800bb94:	0800d60b 	.word	0x0800d60b
 800bb98:	0800d62f 	.word	0x0800d62f

0800bb9c <_cleanup_r>:
 800bb9c:	4901      	ldr	r1, [pc, #4]	; (800bba4 <_cleanup_r+0x8>)
 800bb9e:	f000 b8af 	b.w	800bd00 <_fwalk_reent>
 800bba2:	bf00      	nop
 800bba4:	0800badd 	.word	0x0800badd

0800bba8 <__sfmoreglue>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	1e4a      	subs	r2, r1, #1
 800bbac:	2568      	movs	r5, #104	; 0x68
 800bbae:	4355      	muls	r5, r2
 800bbb0:	460e      	mov	r6, r1
 800bbb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbb6:	f001 f9d1 	bl	800cf5c <_malloc_r>
 800bbba:	4604      	mov	r4, r0
 800bbbc:	b140      	cbz	r0, 800bbd0 <__sfmoreglue+0x28>
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	e9c0 1600 	strd	r1, r6, [r0]
 800bbc4:	300c      	adds	r0, #12
 800bbc6:	60a0      	str	r0, [r4, #8]
 800bbc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbcc:	f7fd f9dc 	bl	8008f88 <memset>
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	bd70      	pop	{r4, r5, r6, pc}

0800bbd4 <__sfp_lock_acquire>:
 800bbd4:	4801      	ldr	r0, [pc, #4]	; (800bbdc <__sfp_lock_acquire+0x8>)
 800bbd6:	f000 bc26 	b.w	800c426 <__retarget_lock_acquire_recursive>
 800bbda:	bf00      	nop
 800bbdc:	200144c8 	.word	0x200144c8

0800bbe0 <__sfp_lock_release>:
 800bbe0:	4801      	ldr	r0, [pc, #4]	; (800bbe8 <__sfp_lock_release+0x8>)
 800bbe2:	f000 bc21 	b.w	800c428 <__retarget_lock_release_recursive>
 800bbe6:	bf00      	nop
 800bbe8:	200144c8 	.word	0x200144c8

0800bbec <__sinit_lock_acquire>:
 800bbec:	4801      	ldr	r0, [pc, #4]	; (800bbf4 <__sinit_lock_acquire+0x8>)
 800bbee:	f000 bc1a 	b.w	800c426 <__retarget_lock_acquire_recursive>
 800bbf2:	bf00      	nop
 800bbf4:	200144c3 	.word	0x200144c3

0800bbf8 <__sinit_lock_release>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	; (800bc00 <__sinit_lock_release+0x8>)
 800bbfa:	f000 bc15 	b.w	800c428 <__retarget_lock_release_recursive>
 800bbfe:	bf00      	nop
 800bc00:	200144c3 	.word	0x200144c3

0800bc04 <__sinit>:
 800bc04:	b510      	push	{r4, lr}
 800bc06:	4604      	mov	r4, r0
 800bc08:	f7ff fff0 	bl	800bbec <__sinit_lock_acquire>
 800bc0c:	69a3      	ldr	r3, [r4, #24]
 800bc0e:	b11b      	cbz	r3, 800bc18 <__sinit+0x14>
 800bc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc14:	f7ff bff0 	b.w	800bbf8 <__sinit_lock_release>
 800bc18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc1c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc1e:	4b13      	ldr	r3, [pc, #76]	; (800bc6c <__sinit+0x68>)
 800bc20:	4a13      	ldr	r2, [pc, #76]	; (800bc70 <__sinit+0x6c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc26:	42a3      	cmp	r3, r4
 800bc28:	bf04      	itt	eq
 800bc2a:	2301      	moveq	r3, #1
 800bc2c:	61a3      	streq	r3, [r4, #24]
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 f820 	bl	800bc74 <__sfp>
 800bc34:	6060      	str	r0, [r4, #4]
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 f81c 	bl	800bc74 <__sfp>
 800bc3c:	60a0      	str	r0, [r4, #8]
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 f818 	bl	800bc74 <__sfp>
 800bc44:	2200      	movs	r2, #0
 800bc46:	60e0      	str	r0, [r4, #12]
 800bc48:	2104      	movs	r1, #4
 800bc4a:	6860      	ldr	r0, [r4, #4]
 800bc4c:	f7ff ff82 	bl	800bb54 <std>
 800bc50:	68a0      	ldr	r0, [r4, #8]
 800bc52:	2201      	movs	r2, #1
 800bc54:	2109      	movs	r1, #9
 800bc56:	f7ff ff7d 	bl	800bb54 <std>
 800bc5a:	68e0      	ldr	r0, [r4, #12]
 800bc5c:	2202      	movs	r2, #2
 800bc5e:	2112      	movs	r1, #18
 800bc60:	f7ff ff78 	bl	800bb54 <std>
 800bc64:	2301      	movs	r3, #1
 800bc66:	61a3      	str	r3, [r4, #24]
 800bc68:	e7d2      	b.n	800bc10 <__sinit+0xc>
 800bc6a:	bf00      	nop
 800bc6c:	0800dba4 	.word	0x0800dba4
 800bc70:	0800bb9d 	.word	0x0800bb9d

0800bc74 <__sfp>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	4607      	mov	r7, r0
 800bc78:	f7ff ffac 	bl	800bbd4 <__sfp_lock_acquire>
 800bc7c:	4b1e      	ldr	r3, [pc, #120]	; (800bcf8 <__sfp+0x84>)
 800bc7e:	681e      	ldr	r6, [r3, #0]
 800bc80:	69b3      	ldr	r3, [r6, #24]
 800bc82:	b913      	cbnz	r3, 800bc8a <__sfp+0x16>
 800bc84:	4630      	mov	r0, r6
 800bc86:	f7ff ffbd 	bl	800bc04 <__sinit>
 800bc8a:	3648      	adds	r6, #72	; 0x48
 800bc8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc90:	3b01      	subs	r3, #1
 800bc92:	d503      	bpl.n	800bc9c <__sfp+0x28>
 800bc94:	6833      	ldr	r3, [r6, #0]
 800bc96:	b30b      	cbz	r3, 800bcdc <__sfp+0x68>
 800bc98:	6836      	ldr	r6, [r6, #0]
 800bc9a:	e7f7      	b.n	800bc8c <__sfp+0x18>
 800bc9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bca0:	b9d5      	cbnz	r5, 800bcd8 <__sfp+0x64>
 800bca2:	4b16      	ldr	r3, [pc, #88]	; (800bcfc <__sfp+0x88>)
 800bca4:	60e3      	str	r3, [r4, #12]
 800bca6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcaa:	6665      	str	r5, [r4, #100]	; 0x64
 800bcac:	f000 fbba 	bl	800c424 <__retarget_lock_init_recursive>
 800bcb0:	f7ff ff96 	bl	800bbe0 <__sfp_lock_release>
 800bcb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bcb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcbc:	6025      	str	r5, [r4, #0]
 800bcbe:	61a5      	str	r5, [r4, #24]
 800bcc0:	2208      	movs	r2, #8
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcc8:	f7fd f95e 	bl	8008f88 <memset>
 800bccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcd8:	3468      	adds	r4, #104	; 0x68
 800bcda:	e7d9      	b.n	800bc90 <__sfp+0x1c>
 800bcdc:	2104      	movs	r1, #4
 800bcde:	4638      	mov	r0, r7
 800bce0:	f7ff ff62 	bl	800bba8 <__sfmoreglue>
 800bce4:	4604      	mov	r4, r0
 800bce6:	6030      	str	r0, [r6, #0]
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d1d5      	bne.n	800bc98 <__sfp+0x24>
 800bcec:	f7ff ff78 	bl	800bbe0 <__sfp_lock_release>
 800bcf0:	230c      	movs	r3, #12
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	e7ee      	b.n	800bcd4 <__sfp+0x60>
 800bcf6:	bf00      	nop
 800bcf8:	0800dba4 	.word	0x0800dba4
 800bcfc:	ffff0001 	.word	0xffff0001

0800bd00 <_fwalk_reent>:
 800bd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd04:	4606      	mov	r6, r0
 800bd06:	4688      	mov	r8, r1
 800bd08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd0c:	2700      	movs	r7, #0
 800bd0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd12:	f1b9 0901 	subs.w	r9, r9, #1
 800bd16:	d505      	bpl.n	800bd24 <_fwalk_reent+0x24>
 800bd18:	6824      	ldr	r4, [r4, #0]
 800bd1a:	2c00      	cmp	r4, #0
 800bd1c:	d1f7      	bne.n	800bd0e <_fwalk_reent+0xe>
 800bd1e:	4638      	mov	r0, r7
 800bd20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd24:	89ab      	ldrh	r3, [r5, #12]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d907      	bls.n	800bd3a <_fwalk_reent+0x3a>
 800bd2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	d003      	beq.n	800bd3a <_fwalk_reent+0x3a>
 800bd32:	4629      	mov	r1, r5
 800bd34:	4630      	mov	r0, r6
 800bd36:	47c0      	blx	r8
 800bd38:	4307      	orrs	r7, r0
 800bd3a:	3568      	adds	r5, #104	; 0x68
 800bd3c:	e7e9      	b.n	800bd12 <_fwalk_reent+0x12>

0800bd3e <rshift>:
 800bd3e:	6903      	ldr	r3, [r0, #16]
 800bd40:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bd44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd48:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd4c:	f100 0414 	add.w	r4, r0, #20
 800bd50:	dd45      	ble.n	800bdde <rshift+0xa0>
 800bd52:	f011 011f 	ands.w	r1, r1, #31
 800bd56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd5a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd5e:	d10c      	bne.n	800bd7a <rshift+0x3c>
 800bd60:	f100 0710 	add.w	r7, r0, #16
 800bd64:	4629      	mov	r1, r5
 800bd66:	42b1      	cmp	r1, r6
 800bd68:	d334      	bcc.n	800bdd4 <rshift+0x96>
 800bd6a:	1a9b      	subs	r3, r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	1eea      	subs	r2, r5, #3
 800bd70:	4296      	cmp	r6, r2
 800bd72:	bf38      	it	cc
 800bd74:	2300      	movcc	r3, #0
 800bd76:	4423      	add	r3, r4
 800bd78:	e015      	b.n	800bda6 <rshift+0x68>
 800bd7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bd7e:	f1c1 0820 	rsb	r8, r1, #32
 800bd82:	40cf      	lsrs	r7, r1
 800bd84:	f105 0e04 	add.w	lr, r5, #4
 800bd88:	46a1      	mov	r9, r4
 800bd8a:	4576      	cmp	r6, lr
 800bd8c:	46f4      	mov	ip, lr
 800bd8e:	d815      	bhi.n	800bdbc <rshift+0x7e>
 800bd90:	1a9b      	subs	r3, r3, r2
 800bd92:	009a      	lsls	r2, r3, #2
 800bd94:	3a04      	subs	r2, #4
 800bd96:	3501      	adds	r5, #1
 800bd98:	42ae      	cmp	r6, r5
 800bd9a:	bf38      	it	cc
 800bd9c:	2200      	movcc	r2, #0
 800bd9e:	18a3      	adds	r3, r4, r2
 800bda0:	50a7      	str	r7, [r4, r2]
 800bda2:	b107      	cbz	r7, 800bda6 <rshift+0x68>
 800bda4:	3304      	adds	r3, #4
 800bda6:	1b1a      	subs	r2, r3, r4
 800bda8:	42a3      	cmp	r3, r4
 800bdaa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bdae:	bf08      	it	eq
 800bdb0:	2300      	moveq	r3, #0
 800bdb2:	6102      	str	r2, [r0, #16]
 800bdb4:	bf08      	it	eq
 800bdb6:	6143      	streq	r3, [r0, #20]
 800bdb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdbc:	f8dc c000 	ldr.w	ip, [ip]
 800bdc0:	fa0c fc08 	lsl.w	ip, ip, r8
 800bdc4:	ea4c 0707 	orr.w	r7, ip, r7
 800bdc8:	f849 7b04 	str.w	r7, [r9], #4
 800bdcc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bdd0:	40cf      	lsrs	r7, r1
 800bdd2:	e7da      	b.n	800bd8a <rshift+0x4c>
 800bdd4:	f851 cb04 	ldr.w	ip, [r1], #4
 800bdd8:	f847 cf04 	str.w	ip, [r7, #4]!
 800bddc:	e7c3      	b.n	800bd66 <rshift+0x28>
 800bdde:	4623      	mov	r3, r4
 800bde0:	e7e1      	b.n	800bda6 <rshift+0x68>

0800bde2 <__hexdig_fun>:
 800bde2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bde6:	2b09      	cmp	r3, #9
 800bde8:	d802      	bhi.n	800bdf0 <__hexdig_fun+0xe>
 800bdea:	3820      	subs	r0, #32
 800bdec:	b2c0      	uxtb	r0, r0
 800bdee:	4770      	bx	lr
 800bdf0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bdf4:	2b05      	cmp	r3, #5
 800bdf6:	d801      	bhi.n	800bdfc <__hexdig_fun+0x1a>
 800bdf8:	3847      	subs	r0, #71	; 0x47
 800bdfa:	e7f7      	b.n	800bdec <__hexdig_fun+0xa>
 800bdfc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800be00:	2b05      	cmp	r3, #5
 800be02:	d801      	bhi.n	800be08 <__hexdig_fun+0x26>
 800be04:	3827      	subs	r0, #39	; 0x27
 800be06:	e7f1      	b.n	800bdec <__hexdig_fun+0xa>
 800be08:	2000      	movs	r0, #0
 800be0a:	4770      	bx	lr

0800be0c <__gethex>:
 800be0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be10:	ed2d 8b02 	vpush	{d8}
 800be14:	b089      	sub	sp, #36	; 0x24
 800be16:	ee08 0a10 	vmov	s16, r0
 800be1a:	9304      	str	r3, [sp, #16]
 800be1c:	4bbc      	ldr	r3, [pc, #752]	; (800c110 <__gethex+0x304>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	4618      	mov	r0, r3
 800be24:	468b      	mov	fp, r1
 800be26:	4690      	mov	r8, r2
 800be28:	f7f4 f9d2 	bl	80001d0 <strlen>
 800be2c:	9b01      	ldr	r3, [sp, #4]
 800be2e:	f8db 2000 	ldr.w	r2, [fp]
 800be32:	4403      	add	r3, r0
 800be34:	4682      	mov	sl, r0
 800be36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800be3a:	9305      	str	r3, [sp, #20]
 800be3c:	1c93      	adds	r3, r2, #2
 800be3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800be42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800be46:	32fe      	adds	r2, #254	; 0xfe
 800be48:	18d1      	adds	r1, r2, r3
 800be4a:	461f      	mov	r7, r3
 800be4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be50:	9100      	str	r1, [sp, #0]
 800be52:	2830      	cmp	r0, #48	; 0x30
 800be54:	d0f8      	beq.n	800be48 <__gethex+0x3c>
 800be56:	f7ff ffc4 	bl	800bde2 <__hexdig_fun>
 800be5a:	4604      	mov	r4, r0
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d13a      	bne.n	800bed6 <__gethex+0xca>
 800be60:	9901      	ldr	r1, [sp, #4]
 800be62:	4652      	mov	r2, sl
 800be64:	4638      	mov	r0, r7
 800be66:	f001 fbe6 	bl	800d636 <strncmp>
 800be6a:	4605      	mov	r5, r0
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d168      	bne.n	800bf42 <__gethex+0x136>
 800be70:	f817 000a 	ldrb.w	r0, [r7, sl]
 800be74:	eb07 060a 	add.w	r6, r7, sl
 800be78:	f7ff ffb3 	bl	800bde2 <__hexdig_fun>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d062      	beq.n	800bf46 <__gethex+0x13a>
 800be80:	4633      	mov	r3, r6
 800be82:	7818      	ldrb	r0, [r3, #0]
 800be84:	2830      	cmp	r0, #48	; 0x30
 800be86:	461f      	mov	r7, r3
 800be88:	f103 0301 	add.w	r3, r3, #1
 800be8c:	d0f9      	beq.n	800be82 <__gethex+0x76>
 800be8e:	f7ff ffa8 	bl	800bde2 <__hexdig_fun>
 800be92:	2301      	movs	r3, #1
 800be94:	fab0 f480 	clz	r4, r0
 800be98:	0964      	lsrs	r4, r4, #5
 800be9a:	4635      	mov	r5, r6
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	463a      	mov	r2, r7
 800bea0:	4616      	mov	r6, r2
 800bea2:	3201      	adds	r2, #1
 800bea4:	7830      	ldrb	r0, [r6, #0]
 800bea6:	f7ff ff9c 	bl	800bde2 <__hexdig_fun>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d1f8      	bne.n	800bea0 <__gethex+0x94>
 800beae:	9901      	ldr	r1, [sp, #4]
 800beb0:	4652      	mov	r2, sl
 800beb2:	4630      	mov	r0, r6
 800beb4:	f001 fbbf 	bl	800d636 <strncmp>
 800beb8:	b980      	cbnz	r0, 800bedc <__gethex+0xd0>
 800beba:	b94d      	cbnz	r5, 800bed0 <__gethex+0xc4>
 800bebc:	eb06 050a 	add.w	r5, r6, sl
 800bec0:	462a      	mov	r2, r5
 800bec2:	4616      	mov	r6, r2
 800bec4:	3201      	adds	r2, #1
 800bec6:	7830      	ldrb	r0, [r6, #0]
 800bec8:	f7ff ff8b 	bl	800bde2 <__hexdig_fun>
 800becc:	2800      	cmp	r0, #0
 800bece:	d1f8      	bne.n	800bec2 <__gethex+0xb6>
 800bed0:	1bad      	subs	r5, r5, r6
 800bed2:	00ad      	lsls	r5, r5, #2
 800bed4:	e004      	b.n	800bee0 <__gethex+0xd4>
 800bed6:	2400      	movs	r4, #0
 800bed8:	4625      	mov	r5, r4
 800beda:	e7e0      	b.n	800be9e <__gethex+0x92>
 800bedc:	2d00      	cmp	r5, #0
 800bede:	d1f7      	bne.n	800bed0 <__gethex+0xc4>
 800bee0:	7833      	ldrb	r3, [r6, #0]
 800bee2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bee6:	2b50      	cmp	r3, #80	; 0x50
 800bee8:	d13b      	bne.n	800bf62 <__gethex+0x156>
 800beea:	7873      	ldrb	r3, [r6, #1]
 800beec:	2b2b      	cmp	r3, #43	; 0x2b
 800beee:	d02c      	beq.n	800bf4a <__gethex+0x13e>
 800bef0:	2b2d      	cmp	r3, #45	; 0x2d
 800bef2:	d02e      	beq.n	800bf52 <__gethex+0x146>
 800bef4:	1c71      	adds	r1, r6, #1
 800bef6:	f04f 0900 	mov.w	r9, #0
 800befa:	7808      	ldrb	r0, [r1, #0]
 800befc:	f7ff ff71 	bl	800bde2 <__hexdig_fun>
 800bf00:	1e43      	subs	r3, r0, #1
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	2b18      	cmp	r3, #24
 800bf06:	d82c      	bhi.n	800bf62 <__gethex+0x156>
 800bf08:	f1a0 0210 	sub.w	r2, r0, #16
 800bf0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf10:	f7ff ff67 	bl	800bde2 <__hexdig_fun>
 800bf14:	1e43      	subs	r3, r0, #1
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	2b18      	cmp	r3, #24
 800bf1a:	d91d      	bls.n	800bf58 <__gethex+0x14c>
 800bf1c:	f1b9 0f00 	cmp.w	r9, #0
 800bf20:	d000      	beq.n	800bf24 <__gethex+0x118>
 800bf22:	4252      	negs	r2, r2
 800bf24:	4415      	add	r5, r2
 800bf26:	f8cb 1000 	str.w	r1, [fp]
 800bf2a:	b1e4      	cbz	r4, 800bf66 <__gethex+0x15a>
 800bf2c:	9b00      	ldr	r3, [sp, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	bf14      	ite	ne
 800bf32:	2700      	movne	r7, #0
 800bf34:	2706      	moveq	r7, #6
 800bf36:	4638      	mov	r0, r7
 800bf38:	b009      	add	sp, #36	; 0x24
 800bf3a:	ecbd 8b02 	vpop	{d8}
 800bf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf42:	463e      	mov	r6, r7
 800bf44:	4625      	mov	r5, r4
 800bf46:	2401      	movs	r4, #1
 800bf48:	e7ca      	b.n	800bee0 <__gethex+0xd4>
 800bf4a:	f04f 0900 	mov.w	r9, #0
 800bf4e:	1cb1      	adds	r1, r6, #2
 800bf50:	e7d3      	b.n	800befa <__gethex+0xee>
 800bf52:	f04f 0901 	mov.w	r9, #1
 800bf56:	e7fa      	b.n	800bf4e <__gethex+0x142>
 800bf58:	230a      	movs	r3, #10
 800bf5a:	fb03 0202 	mla	r2, r3, r2, r0
 800bf5e:	3a10      	subs	r2, #16
 800bf60:	e7d4      	b.n	800bf0c <__gethex+0x100>
 800bf62:	4631      	mov	r1, r6
 800bf64:	e7df      	b.n	800bf26 <__gethex+0x11a>
 800bf66:	1bf3      	subs	r3, r6, r7
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	2b07      	cmp	r3, #7
 800bf6e:	dc0b      	bgt.n	800bf88 <__gethex+0x17c>
 800bf70:	ee18 0a10 	vmov	r0, s16
 800bf74:	f000 fad8 	bl	800c528 <_Balloc>
 800bf78:	4604      	mov	r4, r0
 800bf7a:	b940      	cbnz	r0, 800bf8e <__gethex+0x182>
 800bf7c:	4b65      	ldr	r3, [pc, #404]	; (800c114 <__gethex+0x308>)
 800bf7e:	4602      	mov	r2, r0
 800bf80:	21de      	movs	r1, #222	; 0xde
 800bf82:	4865      	ldr	r0, [pc, #404]	; (800c118 <__gethex+0x30c>)
 800bf84:	f001 fb88 	bl	800d698 <__assert_func>
 800bf88:	3101      	adds	r1, #1
 800bf8a:	105b      	asrs	r3, r3, #1
 800bf8c:	e7ee      	b.n	800bf6c <__gethex+0x160>
 800bf8e:	f100 0914 	add.w	r9, r0, #20
 800bf92:	f04f 0b00 	mov.w	fp, #0
 800bf96:	f1ca 0301 	rsb	r3, sl, #1
 800bf9a:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf9e:	f8cd b000 	str.w	fp, [sp]
 800bfa2:	9306      	str	r3, [sp, #24]
 800bfa4:	42b7      	cmp	r7, r6
 800bfa6:	d340      	bcc.n	800c02a <__gethex+0x21e>
 800bfa8:	9802      	ldr	r0, [sp, #8]
 800bfaa:	9b00      	ldr	r3, [sp, #0]
 800bfac:	f840 3b04 	str.w	r3, [r0], #4
 800bfb0:	eba0 0009 	sub.w	r0, r0, r9
 800bfb4:	1080      	asrs	r0, r0, #2
 800bfb6:	0146      	lsls	r6, r0, #5
 800bfb8:	6120      	str	r0, [r4, #16]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f000 fbaa 	bl	800c714 <__hi0bits>
 800bfc0:	1a30      	subs	r0, r6, r0
 800bfc2:	f8d8 6000 	ldr.w	r6, [r8]
 800bfc6:	42b0      	cmp	r0, r6
 800bfc8:	dd63      	ble.n	800c092 <__gethex+0x286>
 800bfca:	1b87      	subs	r7, r0, r6
 800bfcc:	4639      	mov	r1, r7
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f000 ff44 	bl	800ce5c <__any_on>
 800bfd4:	4682      	mov	sl, r0
 800bfd6:	b1a8      	cbz	r0, 800c004 <__gethex+0x1f8>
 800bfd8:	1e7b      	subs	r3, r7, #1
 800bfda:	1159      	asrs	r1, r3, #5
 800bfdc:	f003 021f 	and.w	r2, r3, #31
 800bfe0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bfe4:	f04f 0a01 	mov.w	sl, #1
 800bfe8:	fa0a f202 	lsl.w	r2, sl, r2
 800bfec:	420a      	tst	r2, r1
 800bfee:	d009      	beq.n	800c004 <__gethex+0x1f8>
 800bff0:	4553      	cmp	r3, sl
 800bff2:	dd05      	ble.n	800c000 <__gethex+0x1f4>
 800bff4:	1eb9      	subs	r1, r7, #2
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 ff30 	bl	800ce5c <__any_on>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d145      	bne.n	800c08c <__gethex+0x280>
 800c000:	f04f 0a02 	mov.w	sl, #2
 800c004:	4639      	mov	r1, r7
 800c006:	4620      	mov	r0, r4
 800c008:	f7ff fe99 	bl	800bd3e <rshift>
 800c00c:	443d      	add	r5, r7
 800c00e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c012:	42ab      	cmp	r3, r5
 800c014:	da4c      	bge.n	800c0b0 <__gethex+0x2a4>
 800c016:	ee18 0a10 	vmov	r0, s16
 800c01a:	4621      	mov	r1, r4
 800c01c:	f000 fac4 	bl	800c5a8 <_Bfree>
 800c020:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c022:	2300      	movs	r3, #0
 800c024:	6013      	str	r3, [r2, #0]
 800c026:	27a3      	movs	r7, #163	; 0xa3
 800c028:	e785      	b.n	800bf36 <__gethex+0x12a>
 800c02a:	1e73      	subs	r3, r6, #1
 800c02c:	9a05      	ldr	r2, [sp, #20]
 800c02e:	9303      	str	r3, [sp, #12]
 800c030:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c034:	4293      	cmp	r3, r2
 800c036:	d019      	beq.n	800c06c <__gethex+0x260>
 800c038:	f1bb 0f20 	cmp.w	fp, #32
 800c03c:	d107      	bne.n	800c04e <__gethex+0x242>
 800c03e:	9b02      	ldr	r3, [sp, #8]
 800c040:	9a00      	ldr	r2, [sp, #0]
 800c042:	f843 2b04 	str.w	r2, [r3], #4
 800c046:	9302      	str	r3, [sp, #8]
 800c048:	2300      	movs	r3, #0
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	469b      	mov	fp, r3
 800c04e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c052:	f7ff fec6 	bl	800bde2 <__hexdig_fun>
 800c056:	9b00      	ldr	r3, [sp, #0]
 800c058:	f000 000f 	and.w	r0, r0, #15
 800c05c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c060:	4303      	orrs	r3, r0
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	f10b 0b04 	add.w	fp, fp, #4
 800c068:	9b03      	ldr	r3, [sp, #12]
 800c06a:	e00d      	b.n	800c088 <__gethex+0x27c>
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	9a06      	ldr	r2, [sp, #24]
 800c070:	4413      	add	r3, r2
 800c072:	42bb      	cmp	r3, r7
 800c074:	d3e0      	bcc.n	800c038 <__gethex+0x22c>
 800c076:	4618      	mov	r0, r3
 800c078:	9901      	ldr	r1, [sp, #4]
 800c07a:	9307      	str	r3, [sp, #28]
 800c07c:	4652      	mov	r2, sl
 800c07e:	f001 fada 	bl	800d636 <strncmp>
 800c082:	9b07      	ldr	r3, [sp, #28]
 800c084:	2800      	cmp	r0, #0
 800c086:	d1d7      	bne.n	800c038 <__gethex+0x22c>
 800c088:	461e      	mov	r6, r3
 800c08a:	e78b      	b.n	800bfa4 <__gethex+0x198>
 800c08c:	f04f 0a03 	mov.w	sl, #3
 800c090:	e7b8      	b.n	800c004 <__gethex+0x1f8>
 800c092:	da0a      	bge.n	800c0aa <__gethex+0x29e>
 800c094:	1a37      	subs	r7, r6, r0
 800c096:	4621      	mov	r1, r4
 800c098:	ee18 0a10 	vmov	r0, s16
 800c09c:	463a      	mov	r2, r7
 800c09e:	f000 fc9f 	bl	800c9e0 <__lshift>
 800c0a2:	1bed      	subs	r5, r5, r7
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	f100 0914 	add.w	r9, r0, #20
 800c0aa:	f04f 0a00 	mov.w	sl, #0
 800c0ae:	e7ae      	b.n	800c00e <__gethex+0x202>
 800c0b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c0b4:	42a8      	cmp	r0, r5
 800c0b6:	dd72      	ble.n	800c19e <__gethex+0x392>
 800c0b8:	1b45      	subs	r5, r0, r5
 800c0ba:	42ae      	cmp	r6, r5
 800c0bc:	dc36      	bgt.n	800c12c <__gethex+0x320>
 800c0be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d02a      	beq.n	800c11c <__gethex+0x310>
 800c0c6:	2b03      	cmp	r3, #3
 800c0c8:	d02c      	beq.n	800c124 <__gethex+0x318>
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d115      	bne.n	800c0fa <__gethex+0x2ee>
 800c0ce:	42ae      	cmp	r6, r5
 800c0d0:	d113      	bne.n	800c0fa <__gethex+0x2ee>
 800c0d2:	2e01      	cmp	r6, #1
 800c0d4:	d10b      	bne.n	800c0ee <__gethex+0x2e2>
 800c0d6:	9a04      	ldr	r2, [sp, #16]
 800c0d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c0dc:	6013      	str	r3, [r2, #0]
 800c0de:	2301      	movs	r3, #1
 800c0e0:	6123      	str	r3, [r4, #16]
 800c0e2:	f8c9 3000 	str.w	r3, [r9]
 800c0e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0e8:	2762      	movs	r7, #98	; 0x62
 800c0ea:	601c      	str	r4, [r3, #0]
 800c0ec:	e723      	b.n	800bf36 <__gethex+0x12a>
 800c0ee:	1e71      	subs	r1, r6, #1
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f000 feb3 	bl	800ce5c <__any_on>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d1ed      	bne.n	800c0d6 <__gethex+0x2ca>
 800c0fa:	ee18 0a10 	vmov	r0, s16
 800c0fe:	4621      	mov	r1, r4
 800c100:	f000 fa52 	bl	800c5a8 <_Bfree>
 800c104:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c106:	2300      	movs	r3, #0
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	2750      	movs	r7, #80	; 0x50
 800c10c:	e713      	b.n	800bf36 <__gethex+0x12a>
 800c10e:	bf00      	nop
 800c110:	0800de9c 	.word	0x0800de9c
 800c114:	0800ddbc 	.word	0x0800ddbc
 800c118:	0800de30 	.word	0x0800de30
 800c11c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1eb      	bne.n	800c0fa <__gethex+0x2ee>
 800c122:	e7d8      	b.n	800c0d6 <__gethex+0x2ca>
 800c124:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1d5      	bne.n	800c0d6 <__gethex+0x2ca>
 800c12a:	e7e6      	b.n	800c0fa <__gethex+0x2ee>
 800c12c:	1e6f      	subs	r7, r5, #1
 800c12e:	f1ba 0f00 	cmp.w	sl, #0
 800c132:	d131      	bne.n	800c198 <__gethex+0x38c>
 800c134:	b127      	cbz	r7, 800c140 <__gethex+0x334>
 800c136:	4639      	mov	r1, r7
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 fe8f 	bl	800ce5c <__any_on>
 800c13e:	4682      	mov	sl, r0
 800c140:	117b      	asrs	r3, r7, #5
 800c142:	2101      	movs	r1, #1
 800c144:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c148:	f007 071f 	and.w	r7, r7, #31
 800c14c:	fa01 f707 	lsl.w	r7, r1, r7
 800c150:	421f      	tst	r7, r3
 800c152:	4629      	mov	r1, r5
 800c154:	4620      	mov	r0, r4
 800c156:	bf18      	it	ne
 800c158:	f04a 0a02 	orrne.w	sl, sl, #2
 800c15c:	1b76      	subs	r6, r6, r5
 800c15e:	f7ff fdee 	bl	800bd3e <rshift>
 800c162:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c166:	2702      	movs	r7, #2
 800c168:	f1ba 0f00 	cmp.w	sl, #0
 800c16c:	d048      	beq.n	800c200 <__gethex+0x3f4>
 800c16e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c172:	2b02      	cmp	r3, #2
 800c174:	d015      	beq.n	800c1a2 <__gethex+0x396>
 800c176:	2b03      	cmp	r3, #3
 800c178:	d017      	beq.n	800c1aa <__gethex+0x39e>
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d109      	bne.n	800c192 <__gethex+0x386>
 800c17e:	f01a 0f02 	tst.w	sl, #2
 800c182:	d006      	beq.n	800c192 <__gethex+0x386>
 800c184:	f8d9 0000 	ldr.w	r0, [r9]
 800c188:	ea4a 0a00 	orr.w	sl, sl, r0
 800c18c:	f01a 0f01 	tst.w	sl, #1
 800c190:	d10e      	bne.n	800c1b0 <__gethex+0x3a4>
 800c192:	f047 0710 	orr.w	r7, r7, #16
 800c196:	e033      	b.n	800c200 <__gethex+0x3f4>
 800c198:	f04f 0a01 	mov.w	sl, #1
 800c19c:	e7d0      	b.n	800c140 <__gethex+0x334>
 800c19e:	2701      	movs	r7, #1
 800c1a0:	e7e2      	b.n	800c168 <__gethex+0x35c>
 800c1a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1a4:	f1c3 0301 	rsb	r3, r3, #1
 800c1a8:	9315      	str	r3, [sp, #84]	; 0x54
 800c1aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d0f0      	beq.n	800c192 <__gethex+0x386>
 800c1b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c1b4:	f104 0314 	add.w	r3, r4, #20
 800c1b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c1bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c1c0:	f04f 0c00 	mov.w	ip, #0
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c1ce:	d01c      	beq.n	800c20a <__gethex+0x3fe>
 800c1d0:	3201      	adds	r2, #1
 800c1d2:	6002      	str	r2, [r0, #0]
 800c1d4:	2f02      	cmp	r7, #2
 800c1d6:	f104 0314 	add.w	r3, r4, #20
 800c1da:	d13f      	bne.n	800c25c <__gethex+0x450>
 800c1dc:	f8d8 2000 	ldr.w	r2, [r8]
 800c1e0:	3a01      	subs	r2, #1
 800c1e2:	42b2      	cmp	r2, r6
 800c1e4:	d10a      	bne.n	800c1fc <__gethex+0x3f0>
 800c1e6:	1171      	asrs	r1, r6, #5
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1ee:	f006 061f 	and.w	r6, r6, #31
 800c1f2:	fa02 f606 	lsl.w	r6, r2, r6
 800c1f6:	421e      	tst	r6, r3
 800c1f8:	bf18      	it	ne
 800c1fa:	4617      	movne	r7, r2
 800c1fc:	f047 0720 	orr.w	r7, r7, #32
 800c200:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c202:	601c      	str	r4, [r3, #0]
 800c204:	9b04      	ldr	r3, [sp, #16]
 800c206:	601d      	str	r5, [r3, #0]
 800c208:	e695      	b.n	800bf36 <__gethex+0x12a>
 800c20a:	4299      	cmp	r1, r3
 800c20c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c210:	d8d8      	bhi.n	800c1c4 <__gethex+0x3b8>
 800c212:	68a3      	ldr	r3, [r4, #8]
 800c214:	459b      	cmp	fp, r3
 800c216:	db19      	blt.n	800c24c <__gethex+0x440>
 800c218:	6861      	ldr	r1, [r4, #4]
 800c21a:	ee18 0a10 	vmov	r0, s16
 800c21e:	3101      	adds	r1, #1
 800c220:	f000 f982 	bl	800c528 <_Balloc>
 800c224:	4681      	mov	r9, r0
 800c226:	b918      	cbnz	r0, 800c230 <__gethex+0x424>
 800c228:	4b1a      	ldr	r3, [pc, #104]	; (800c294 <__gethex+0x488>)
 800c22a:	4602      	mov	r2, r0
 800c22c:	2184      	movs	r1, #132	; 0x84
 800c22e:	e6a8      	b.n	800bf82 <__gethex+0x176>
 800c230:	6922      	ldr	r2, [r4, #16]
 800c232:	3202      	adds	r2, #2
 800c234:	f104 010c 	add.w	r1, r4, #12
 800c238:	0092      	lsls	r2, r2, #2
 800c23a:	300c      	adds	r0, #12
 800c23c:	f7fc fe96 	bl	8008f6c <memcpy>
 800c240:	4621      	mov	r1, r4
 800c242:	ee18 0a10 	vmov	r0, s16
 800c246:	f000 f9af 	bl	800c5a8 <_Bfree>
 800c24a:	464c      	mov	r4, r9
 800c24c:	6923      	ldr	r3, [r4, #16]
 800c24e:	1c5a      	adds	r2, r3, #1
 800c250:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c254:	6122      	str	r2, [r4, #16]
 800c256:	2201      	movs	r2, #1
 800c258:	615a      	str	r2, [r3, #20]
 800c25a:	e7bb      	b.n	800c1d4 <__gethex+0x3c8>
 800c25c:	6922      	ldr	r2, [r4, #16]
 800c25e:	455a      	cmp	r2, fp
 800c260:	dd0b      	ble.n	800c27a <__gethex+0x46e>
 800c262:	2101      	movs	r1, #1
 800c264:	4620      	mov	r0, r4
 800c266:	f7ff fd6a 	bl	800bd3e <rshift>
 800c26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c26e:	3501      	adds	r5, #1
 800c270:	42ab      	cmp	r3, r5
 800c272:	f6ff aed0 	blt.w	800c016 <__gethex+0x20a>
 800c276:	2701      	movs	r7, #1
 800c278:	e7c0      	b.n	800c1fc <__gethex+0x3f0>
 800c27a:	f016 061f 	ands.w	r6, r6, #31
 800c27e:	d0fa      	beq.n	800c276 <__gethex+0x46a>
 800c280:	449a      	add	sl, r3
 800c282:	f1c6 0620 	rsb	r6, r6, #32
 800c286:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c28a:	f000 fa43 	bl	800c714 <__hi0bits>
 800c28e:	42b0      	cmp	r0, r6
 800c290:	dbe7      	blt.n	800c262 <__gethex+0x456>
 800c292:	e7f0      	b.n	800c276 <__gethex+0x46a>
 800c294:	0800ddbc 	.word	0x0800ddbc

0800c298 <L_shift>:
 800c298:	f1c2 0208 	rsb	r2, r2, #8
 800c29c:	0092      	lsls	r2, r2, #2
 800c29e:	b570      	push	{r4, r5, r6, lr}
 800c2a0:	f1c2 0620 	rsb	r6, r2, #32
 800c2a4:	6843      	ldr	r3, [r0, #4]
 800c2a6:	6804      	ldr	r4, [r0, #0]
 800c2a8:	fa03 f506 	lsl.w	r5, r3, r6
 800c2ac:	432c      	orrs	r4, r5
 800c2ae:	40d3      	lsrs	r3, r2
 800c2b0:	6004      	str	r4, [r0, #0]
 800c2b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c2b6:	4288      	cmp	r0, r1
 800c2b8:	d3f4      	bcc.n	800c2a4 <L_shift+0xc>
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}

0800c2bc <__match>:
 800c2bc:	b530      	push	{r4, r5, lr}
 800c2be:	6803      	ldr	r3, [r0, #0]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2c6:	b914      	cbnz	r4, 800c2ce <__match+0x12>
 800c2c8:	6003      	str	r3, [r0, #0]
 800c2ca:	2001      	movs	r0, #1
 800c2cc:	bd30      	pop	{r4, r5, pc}
 800c2ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c2d6:	2d19      	cmp	r5, #25
 800c2d8:	bf98      	it	ls
 800c2da:	3220      	addls	r2, #32
 800c2dc:	42a2      	cmp	r2, r4
 800c2de:	d0f0      	beq.n	800c2c2 <__match+0x6>
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	e7f3      	b.n	800c2cc <__match+0x10>

0800c2e4 <__hexnan>:
 800c2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e8:	680b      	ldr	r3, [r1, #0]
 800c2ea:	6801      	ldr	r1, [r0, #0]
 800c2ec:	115e      	asrs	r6, r3, #5
 800c2ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c2f2:	f013 031f 	ands.w	r3, r3, #31
 800c2f6:	b087      	sub	sp, #28
 800c2f8:	bf18      	it	ne
 800c2fa:	3604      	addne	r6, #4
 800c2fc:	2500      	movs	r5, #0
 800c2fe:	1f37      	subs	r7, r6, #4
 800c300:	4682      	mov	sl, r0
 800c302:	4690      	mov	r8, r2
 800c304:	9301      	str	r3, [sp, #4]
 800c306:	f846 5c04 	str.w	r5, [r6, #-4]
 800c30a:	46b9      	mov	r9, r7
 800c30c:	463c      	mov	r4, r7
 800c30e:	9502      	str	r5, [sp, #8]
 800c310:	46ab      	mov	fp, r5
 800c312:	784a      	ldrb	r2, [r1, #1]
 800c314:	1c4b      	adds	r3, r1, #1
 800c316:	9303      	str	r3, [sp, #12]
 800c318:	b342      	cbz	r2, 800c36c <__hexnan+0x88>
 800c31a:	4610      	mov	r0, r2
 800c31c:	9105      	str	r1, [sp, #20]
 800c31e:	9204      	str	r2, [sp, #16]
 800c320:	f7ff fd5f 	bl	800bde2 <__hexdig_fun>
 800c324:	2800      	cmp	r0, #0
 800c326:	d14f      	bne.n	800c3c8 <__hexnan+0xe4>
 800c328:	9a04      	ldr	r2, [sp, #16]
 800c32a:	9905      	ldr	r1, [sp, #20]
 800c32c:	2a20      	cmp	r2, #32
 800c32e:	d818      	bhi.n	800c362 <__hexnan+0x7e>
 800c330:	9b02      	ldr	r3, [sp, #8]
 800c332:	459b      	cmp	fp, r3
 800c334:	dd13      	ble.n	800c35e <__hexnan+0x7a>
 800c336:	454c      	cmp	r4, r9
 800c338:	d206      	bcs.n	800c348 <__hexnan+0x64>
 800c33a:	2d07      	cmp	r5, #7
 800c33c:	dc04      	bgt.n	800c348 <__hexnan+0x64>
 800c33e:	462a      	mov	r2, r5
 800c340:	4649      	mov	r1, r9
 800c342:	4620      	mov	r0, r4
 800c344:	f7ff ffa8 	bl	800c298 <L_shift>
 800c348:	4544      	cmp	r4, r8
 800c34a:	d950      	bls.n	800c3ee <__hexnan+0x10a>
 800c34c:	2300      	movs	r3, #0
 800c34e:	f1a4 0904 	sub.w	r9, r4, #4
 800c352:	f844 3c04 	str.w	r3, [r4, #-4]
 800c356:	f8cd b008 	str.w	fp, [sp, #8]
 800c35a:	464c      	mov	r4, r9
 800c35c:	461d      	mov	r5, r3
 800c35e:	9903      	ldr	r1, [sp, #12]
 800c360:	e7d7      	b.n	800c312 <__hexnan+0x2e>
 800c362:	2a29      	cmp	r2, #41	; 0x29
 800c364:	d156      	bne.n	800c414 <__hexnan+0x130>
 800c366:	3102      	adds	r1, #2
 800c368:	f8ca 1000 	str.w	r1, [sl]
 800c36c:	f1bb 0f00 	cmp.w	fp, #0
 800c370:	d050      	beq.n	800c414 <__hexnan+0x130>
 800c372:	454c      	cmp	r4, r9
 800c374:	d206      	bcs.n	800c384 <__hexnan+0xa0>
 800c376:	2d07      	cmp	r5, #7
 800c378:	dc04      	bgt.n	800c384 <__hexnan+0xa0>
 800c37a:	462a      	mov	r2, r5
 800c37c:	4649      	mov	r1, r9
 800c37e:	4620      	mov	r0, r4
 800c380:	f7ff ff8a 	bl	800c298 <L_shift>
 800c384:	4544      	cmp	r4, r8
 800c386:	d934      	bls.n	800c3f2 <__hexnan+0x10e>
 800c388:	f1a8 0204 	sub.w	r2, r8, #4
 800c38c:	4623      	mov	r3, r4
 800c38e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c392:	f842 1f04 	str.w	r1, [r2, #4]!
 800c396:	429f      	cmp	r7, r3
 800c398:	d2f9      	bcs.n	800c38e <__hexnan+0xaa>
 800c39a:	1b3b      	subs	r3, r7, r4
 800c39c:	f023 0303 	bic.w	r3, r3, #3
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	3401      	adds	r4, #1
 800c3a4:	3e03      	subs	r6, #3
 800c3a6:	42b4      	cmp	r4, r6
 800c3a8:	bf88      	it	hi
 800c3aa:	2304      	movhi	r3, #4
 800c3ac:	4443      	add	r3, r8
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f843 2b04 	str.w	r2, [r3], #4
 800c3b4:	429f      	cmp	r7, r3
 800c3b6:	d2fb      	bcs.n	800c3b0 <__hexnan+0xcc>
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	b91b      	cbnz	r3, 800c3c4 <__hexnan+0xe0>
 800c3bc:	4547      	cmp	r7, r8
 800c3be:	d127      	bne.n	800c410 <__hexnan+0x12c>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	603b      	str	r3, [r7, #0]
 800c3c4:	2005      	movs	r0, #5
 800c3c6:	e026      	b.n	800c416 <__hexnan+0x132>
 800c3c8:	3501      	adds	r5, #1
 800c3ca:	2d08      	cmp	r5, #8
 800c3cc:	f10b 0b01 	add.w	fp, fp, #1
 800c3d0:	dd06      	ble.n	800c3e0 <__hexnan+0xfc>
 800c3d2:	4544      	cmp	r4, r8
 800c3d4:	d9c3      	bls.n	800c35e <__hexnan+0x7a>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3dc:	2501      	movs	r5, #1
 800c3de:	3c04      	subs	r4, #4
 800c3e0:	6822      	ldr	r2, [r4, #0]
 800c3e2:	f000 000f 	and.w	r0, r0, #15
 800c3e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c3ea:	6022      	str	r2, [r4, #0]
 800c3ec:	e7b7      	b.n	800c35e <__hexnan+0x7a>
 800c3ee:	2508      	movs	r5, #8
 800c3f0:	e7b5      	b.n	800c35e <__hexnan+0x7a>
 800c3f2:	9b01      	ldr	r3, [sp, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d0df      	beq.n	800c3b8 <__hexnan+0xd4>
 800c3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fc:	f1c3 0320 	rsb	r3, r3, #32
 800c400:	fa22 f303 	lsr.w	r3, r2, r3
 800c404:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c408:	401a      	ands	r2, r3
 800c40a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c40e:	e7d3      	b.n	800c3b8 <__hexnan+0xd4>
 800c410:	3f04      	subs	r7, #4
 800c412:	e7d1      	b.n	800c3b8 <__hexnan+0xd4>
 800c414:	2004      	movs	r0, #4
 800c416:	b007      	add	sp, #28
 800c418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c41c <_localeconv_r>:
 800c41c:	4800      	ldr	r0, [pc, #0]	; (800c420 <_localeconv_r+0x4>)
 800c41e:	4770      	bx	lr
 800c420:	20000164 	.word	0x20000164

0800c424 <__retarget_lock_init_recursive>:
 800c424:	4770      	bx	lr

0800c426 <__retarget_lock_acquire_recursive>:
 800c426:	4770      	bx	lr

0800c428 <__retarget_lock_release_recursive>:
 800c428:	4770      	bx	lr

0800c42a <__swhatbuf_r>:
 800c42a:	b570      	push	{r4, r5, r6, lr}
 800c42c:	460e      	mov	r6, r1
 800c42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c432:	2900      	cmp	r1, #0
 800c434:	b096      	sub	sp, #88	; 0x58
 800c436:	4614      	mov	r4, r2
 800c438:	461d      	mov	r5, r3
 800c43a:	da07      	bge.n	800c44c <__swhatbuf_r+0x22>
 800c43c:	2300      	movs	r3, #0
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	89b3      	ldrh	r3, [r6, #12]
 800c442:	061a      	lsls	r2, r3, #24
 800c444:	d410      	bmi.n	800c468 <__swhatbuf_r+0x3e>
 800c446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c44a:	e00e      	b.n	800c46a <__swhatbuf_r+0x40>
 800c44c:	466a      	mov	r2, sp
 800c44e:	f001 f963 	bl	800d718 <_fstat_r>
 800c452:	2800      	cmp	r0, #0
 800c454:	dbf2      	blt.n	800c43c <__swhatbuf_r+0x12>
 800c456:	9a01      	ldr	r2, [sp, #4]
 800c458:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c45c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c460:	425a      	negs	r2, r3
 800c462:	415a      	adcs	r2, r3
 800c464:	602a      	str	r2, [r5, #0]
 800c466:	e7ee      	b.n	800c446 <__swhatbuf_r+0x1c>
 800c468:	2340      	movs	r3, #64	; 0x40
 800c46a:	2000      	movs	r0, #0
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	b016      	add	sp, #88	; 0x58
 800c470:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c474 <__smakebuf_r>:
 800c474:	898b      	ldrh	r3, [r1, #12]
 800c476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c478:	079d      	lsls	r5, r3, #30
 800c47a:	4606      	mov	r6, r0
 800c47c:	460c      	mov	r4, r1
 800c47e:	d507      	bpl.n	800c490 <__smakebuf_r+0x1c>
 800c480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	6123      	str	r3, [r4, #16]
 800c488:	2301      	movs	r3, #1
 800c48a:	6163      	str	r3, [r4, #20]
 800c48c:	b002      	add	sp, #8
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
 800c490:	ab01      	add	r3, sp, #4
 800c492:	466a      	mov	r2, sp
 800c494:	f7ff ffc9 	bl	800c42a <__swhatbuf_r>
 800c498:	9900      	ldr	r1, [sp, #0]
 800c49a:	4605      	mov	r5, r0
 800c49c:	4630      	mov	r0, r6
 800c49e:	f000 fd5d 	bl	800cf5c <_malloc_r>
 800c4a2:	b948      	cbnz	r0, 800c4b8 <__smakebuf_r+0x44>
 800c4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4a8:	059a      	lsls	r2, r3, #22
 800c4aa:	d4ef      	bmi.n	800c48c <__smakebuf_r+0x18>
 800c4ac:	f023 0303 	bic.w	r3, r3, #3
 800c4b0:	f043 0302 	orr.w	r3, r3, #2
 800c4b4:	81a3      	strh	r3, [r4, #12]
 800c4b6:	e7e3      	b.n	800c480 <__smakebuf_r+0xc>
 800c4b8:	4b0d      	ldr	r3, [pc, #52]	; (800c4f0 <__smakebuf_r+0x7c>)
 800c4ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	6020      	str	r0, [r4, #0]
 800c4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4c4:	81a3      	strh	r3, [r4, #12]
 800c4c6:	9b00      	ldr	r3, [sp, #0]
 800c4c8:	6163      	str	r3, [r4, #20]
 800c4ca:	9b01      	ldr	r3, [sp, #4]
 800c4cc:	6120      	str	r0, [r4, #16]
 800c4ce:	b15b      	cbz	r3, 800c4e8 <__smakebuf_r+0x74>
 800c4d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f001 f931 	bl	800d73c <_isatty_r>
 800c4da:	b128      	cbz	r0, 800c4e8 <__smakebuf_r+0x74>
 800c4dc:	89a3      	ldrh	r3, [r4, #12]
 800c4de:	f023 0303 	bic.w	r3, r3, #3
 800c4e2:	f043 0301 	orr.w	r3, r3, #1
 800c4e6:	81a3      	strh	r3, [r4, #12]
 800c4e8:	89a0      	ldrh	r0, [r4, #12]
 800c4ea:	4305      	orrs	r5, r0
 800c4ec:	81a5      	strh	r5, [r4, #12]
 800c4ee:	e7cd      	b.n	800c48c <__smakebuf_r+0x18>
 800c4f0:	0800bb9d 	.word	0x0800bb9d

0800c4f4 <malloc>:
 800c4f4:	4b02      	ldr	r3, [pc, #8]	; (800c500 <malloc+0xc>)
 800c4f6:	4601      	mov	r1, r0
 800c4f8:	6818      	ldr	r0, [r3, #0]
 800c4fa:	f000 bd2f 	b.w	800cf5c <_malloc_r>
 800c4fe:	bf00      	nop
 800c500:	2000000c 	.word	0x2000000c

0800c504 <__ascii_mbtowc>:
 800c504:	b082      	sub	sp, #8
 800c506:	b901      	cbnz	r1, 800c50a <__ascii_mbtowc+0x6>
 800c508:	a901      	add	r1, sp, #4
 800c50a:	b142      	cbz	r2, 800c51e <__ascii_mbtowc+0x1a>
 800c50c:	b14b      	cbz	r3, 800c522 <__ascii_mbtowc+0x1e>
 800c50e:	7813      	ldrb	r3, [r2, #0]
 800c510:	600b      	str	r3, [r1, #0]
 800c512:	7812      	ldrb	r2, [r2, #0]
 800c514:	1e10      	subs	r0, r2, #0
 800c516:	bf18      	it	ne
 800c518:	2001      	movne	r0, #1
 800c51a:	b002      	add	sp, #8
 800c51c:	4770      	bx	lr
 800c51e:	4610      	mov	r0, r2
 800c520:	e7fb      	b.n	800c51a <__ascii_mbtowc+0x16>
 800c522:	f06f 0001 	mvn.w	r0, #1
 800c526:	e7f8      	b.n	800c51a <__ascii_mbtowc+0x16>

0800c528 <_Balloc>:
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c52c:	4604      	mov	r4, r0
 800c52e:	460d      	mov	r5, r1
 800c530:	b976      	cbnz	r6, 800c550 <_Balloc+0x28>
 800c532:	2010      	movs	r0, #16
 800c534:	f7ff ffde 	bl	800c4f4 <malloc>
 800c538:	4602      	mov	r2, r0
 800c53a:	6260      	str	r0, [r4, #36]	; 0x24
 800c53c:	b920      	cbnz	r0, 800c548 <_Balloc+0x20>
 800c53e:	4b18      	ldr	r3, [pc, #96]	; (800c5a0 <_Balloc+0x78>)
 800c540:	4818      	ldr	r0, [pc, #96]	; (800c5a4 <_Balloc+0x7c>)
 800c542:	2166      	movs	r1, #102	; 0x66
 800c544:	f001 f8a8 	bl	800d698 <__assert_func>
 800c548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c54c:	6006      	str	r6, [r0, #0]
 800c54e:	60c6      	str	r6, [r0, #12]
 800c550:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c552:	68f3      	ldr	r3, [r6, #12]
 800c554:	b183      	cbz	r3, 800c578 <_Balloc+0x50>
 800c556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c55e:	b9b8      	cbnz	r0, 800c590 <_Balloc+0x68>
 800c560:	2101      	movs	r1, #1
 800c562:	fa01 f605 	lsl.w	r6, r1, r5
 800c566:	1d72      	adds	r2, r6, #5
 800c568:	0092      	lsls	r2, r2, #2
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 fc97 	bl	800ce9e <_calloc_r>
 800c570:	b160      	cbz	r0, 800c58c <_Balloc+0x64>
 800c572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c576:	e00e      	b.n	800c596 <_Balloc+0x6e>
 800c578:	2221      	movs	r2, #33	; 0x21
 800c57a:	2104      	movs	r1, #4
 800c57c:	4620      	mov	r0, r4
 800c57e:	f000 fc8e 	bl	800ce9e <_calloc_r>
 800c582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c584:	60f0      	str	r0, [r6, #12]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1e4      	bne.n	800c556 <_Balloc+0x2e>
 800c58c:	2000      	movs	r0, #0
 800c58e:	bd70      	pop	{r4, r5, r6, pc}
 800c590:	6802      	ldr	r2, [r0, #0]
 800c592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c596:	2300      	movs	r3, #0
 800c598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c59c:	e7f7      	b.n	800c58e <_Balloc+0x66>
 800c59e:	bf00      	nop
 800c5a0:	0800dd46 	.word	0x0800dd46
 800c5a4:	0800deb0 	.word	0x0800deb0

0800c5a8 <_Bfree>:
 800c5a8:	b570      	push	{r4, r5, r6, lr}
 800c5aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	b976      	cbnz	r6, 800c5d0 <_Bfree+0x28>
 800c5b2:	2010      	movs	r0, #16
 800c5b4:	f7ff ff9e 	bl	800c4f4 <malloc>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	6268      	str	r0, [r5, #36]	; 0x24
 800c5bc:	b920      	cbnz	r0, 800c5c8 <_Bfree+0x20>
 800c5be:	4b09      	ldr	r3, [pc, #36]	; (800c5e4 <_Bfree+0x3c>)
 800c5c0:	4809      	ldr	r0, [pc, #36]	; (800c5e8 <_Bfree+0x40>)
 800c5c2:	218a      	movs	r1, #138	; 0x8a
 800c5c4:	f001 f868 	bl	800d698 <__assert_func>
 800c5c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5cc:	6006      	str	r6, [r0, #0]
 800c5ce:	60c6      	str	r6, [r0, #12]
 800c5d0:	b13c      	cbz	r4, 800c5e2 <_Bfree+0x3a>
 800c5d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c5d4:	6862      	ldr	r2, [r4, #4]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5dc:	6021      	str	r1, [r4, #0]
 800c5de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	0800dd46 	.word	0x0800dd46
 800c5e8:	0800deb0 	.word	0x0800deb0

0800c5ec <__multadd>:
 800c5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f0:	690e      	ldr	r6, [r1, #16]
 800c5f2:	4607      	mov	r7, r0
 800c5f4:	4698      	mov	r8, r3
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	f101 0014 	add.w	r0, r1, #20
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	6805      	ldr	r5, [r0, #0]
 800c600:	b2a9      	uxth	r1, r5
 800c602:	fb02 8101 	mla	r1, r2, r1, r8
 800c606:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c60a:	0c2d      	lsrs	r5, r5, #16
 800c60c:	fb02 c505 	mla	r5, r2, r5, ip
 800c610:	b289      	uxth	r1, r1
 800c612:	3301      	adds	r3, #1
 800c614:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c618:	429e      	cmp	r6, r3
 800c61a:	f840 1b04 	str.w	r1, [r0], #4
 800c61e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c622:	dcec      	bgt.n	800c5fe <__multadd+0x12>
 800c624:	f1b8 0f00 	cmp.w	r8, #0
 800c628:	d022      	beq.n	800c670 <__multadd+0x84>
 800c62a:	68a3      	ldr	r3, [r4, #8]
 800c62c:	42b3      	cmp	r3, r6
 800c62e:	dc19      	bgt.n	800c664 <__multadd+0x78>
 800c630:	6861      	ldr	r1, [r4, #4]
 800c632:	4638      	mov	r0, r7
 800c634:	3101      	adds	r1, #1
 800c636:	f7ff ff77 	bl	800c528 <_Balloc>
 800c63a:	4605      	mov	r5, r0
 800c63c:	b928      	cbnz	r0, 800c64a <__multadd+0x5e>
 800c63e:	4602      	mov	r2, r0
 800c640:	4b0d      	ldr	r3, [pc, #52]	; (800c678 <__multadd+0x8c>)
 800c642:	480e      	ldr	r0, [pc, #56]	; (800c67c <__multadd+0x90>)
 800c644:	21b5      	movs	r1, #181	; 0xb5
 800c646:	f001 f827 	bl	800d698 <__assert_func>
 800c64a:	6922      	ldr	r2, [r4, #16]
 800c64c:	3202      	adds	r2, #2
 800c64e:	f104 010c 	add.w	r1, r4, #12
 800c652:	0092      	lsls	r2, r2, #2
 800c654:	300c      	adds	r0, #12
 800c656:	f7fc fc89 	bl	8008f6c <memcpy>
 800c65a:	4621      	mov	r1, r4
 800c65c:	4638      	mov	r0, r7
 800c65e:	f7ff ffa3 	bl	800c5a8 <_Bfree>
 800c662:	462c      	mov	r4, r5
 800c664:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c668:	3601      	adds	r6, #1
 800c66a:	f8c3 8014 	str.w	r8, [r3, #20]
 800c66e:	6126      	str	r6, [r4, #16]
 800c670:	4620      	mov	r0, r4
 800c672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c676:	bf00      	nop
 800c678:	0800ddbc 	.word	0x0800ddbc
 800c67c:	0800deb0 	.word	0x0800deb0

0800c680 <__s2b>:
 800c680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c684:	460c      	mov	r4, r1
 800c686:	4615      	mov	r5, r2
 800c688:	461f      	mov	r7, r3
 800c68a:	2209      	movs	r2, #9
 800c68c:	3308      	adds	r3, #8
 800c68e:	4606      	mov	r6, r0
 800c690:	fb93 f3f2 	sdiv	r3, r3, r2
 800c694:	2100      	movs	r1, #0
 800c696:	2201      	movs	r2, #1
 800c698:	429a      	cmp	r2, r3
 800c69a:	db09      	blt.n	800c6b0 <__s2b+0x30>
 800c69c:	4630      	mov	r0, r6
 800c69e:	f7ff ff43 	bl	800c528 <_Balloc>
 800c6a2:	b940      	cbnz	r0, 800c6b6 <__s2b+0x36>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	4b19      	ldr	r3, [pc, #100]	; (800c70c <__s2b+0x8c>)
 800c6a8:	4819      	ldr	r0, [pc, #100]	; (800c710 <__s2b+0x90>)
 800c6aa:	21ce      	movs	r1, #206	; 0xce
 800c6ac:	f000 fff4 	bl	800d698 <__assert_func>
 800c6b0:	0052      	lsls	r2, r2, #1
 800c6b2:	3101      	adds	r1, #1
 800c6b4:	e7f0      	b.n	800c698 <__s2b+0x18>
 800c6b6:	9b08      	ldr	r3, [sp, #32]
 800c6b8:	6143      	str	r3, [r0, #20]
 800c6ba:	2d09      	cmp	r5, #9
 800c6bc:	f04f 0301 	mov.w	r3, #1
 800c6c0:	6103      	str	r3, [r0, #16]
 800c6c2:	dd16      	ble.n	800c6f2 <__s2b+0x72>
 800c6c4:	f104 0909 	add.w	r9, r4, #9
 800c6c8:	46c8      	mov	r8, r9
 800c6ca:	442c      	add	r4, r5
 800c6cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c6d0:	4601      	mov	r1, r0
 800c6d2:	3b30      	subs	r3, #48	; 0x30
 800c6d4:	220a      	movs	r2, #10
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	f7ff ff88 	bl	800c5ec <__multadd>
 800c6dc:	45a0      	cmp	r8, r4
 800c6de:	d1f5      	bne.n	800c6cc <__s2b+0x4c>
 800c6e0:	f1a5 0408 	sub.w	r4, r5, #8
 800c6e4:	444c      	add	r4, r9
 800c6e6:	1b2d      	subs	r5, r5, r4
 800c6e8:	1963      	adds	r3, r4, r5
 800c6ea:	42bb      	cmp	r3, r7
 800c6ec:	db04      	blt.n	800c6f8 <__s2b+0x78>
 800c6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6f2:	340a      	adds	r4, #10
 800c6f4:	2509      	movs	r5, #9
 800c6f6:	e7f6      	b.n	800c6e6 <__s2b+0x66>
 800c6f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c6fc:	4601      	mov	r1, r0
 800c6fe:	3b30      	subs	r3, #48	; 0x30
 800c700:	220a      	movs	r2, #10
 800c702:	4630      	mov	r0, r6
 800c704:	f7ff ff72 	bl	800c5ec <__multadd>
 800c708:	e7ee      	b.n	800c6e8 <__s2b+0x68>
 800c70a:	bf00      	nop
 800c70c:	0800ddbc 	.word	0x0800ddbc
 800c710:	0800deb0 	.word	0x0800deb0

0800c714 <__hi0bits>:
 800c714:	0c03      	lsrs	r3, r0, #16
 800c716:	041b      	lsls	r3, r3, #16
 800c718:	b9d3      	cbnz	r3, 800c750 <__hi0bits+0x3c>
 800c71a:	0400      	lsls	r0, r0, #16
 800c71c:	2310      	movs	r3, #16
 800c71e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c722:	bf04      	itt	eq
 800c724:	0200      	lsleq	r0, r0, #8
 800c726:	3308      	addeq	r3, #8
 800c728:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c72c:	bf04      	itt	eq
 800c72e:	0100      	lsleq	r0, r0, #4
 800c730:	3304      	addeq	r3, #4
 800c732:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c736:	bf04      	itt	eq
 800c738:	0080      	lsleq	r0, r0, #2
 800c73a:	3302      	addeq	r3, #2
 800c73c:	2800      	cmp	r0, #0
 800c73e:	db05      	blt.n	800c74c <__hi0bits+0x38>
 800c740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c744:	f103 0301 	add.w	r3, r3, #1
 800c748:	bf08      	it	eq
 800c74a:	2320      	moveq	r3, #32
 800c74c:	4618      	mov	r0, r3
 800c74e:	4770      	bx	lr
 800c750:	2300      	movs	r3, #0
 800c752:	e7e4      	b.n	800c71e <__hi0bits+0xa>

0800c754 <__lo0bits>:
 800c754:	6803      	ldr	r3, [r0, #0]
 800c756:	f013 0207 	ands.w	r2, r3, #7
 800c75a:	4601      	mov	r1, r0
 800c75c:	d00b      	beq.n	800c776 <__lo0bits+0x22>
 800c75e:	07da      	lsls	r2, r3, #31
 800c760:	d424      	bmi.n	800c7ac <__lo0bits+0x58>
 800c762:	0798      	lsls	r0, r3, #30
 800c764:	bf49      	itett	mi
 800c766:	085b      	lsrmi	r3, r3, #1
 800c768:	089b      	lsrpl	r3, r3, #2
 800c76a:	2001      	movmi	r0, #1
 800c76c:	600b      	strmi	r3, [r1, #0]
 800c76e:	bf5c      	itt	pl
 800c770:	600b      	strpl	r3, [r1, #0]
 800c772:	2002      	movpl	r0, #2
 800c774:	4770      	bx	lr
 800c776:	b298      	uxth	r0, r3
 800c778:	b9b0      	cbnz	r0, 800c7a8 <__lo0bits+0x54>
 800c77a:	0c1b      	lsrs	r3, r3, #16
 800c77c:	2010      	movs	r0, #16
 800c77e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c782:	bf04      	itt	eq
 800c784:	0a1b      	lsreq	r3, r3, #8
 800c786:	3008      	addeq	r0, #8
 800c788:	071a      	lsls	r2, r3, #28
 800c78a:	bf04      	itt	eq
 800c78c:	091b      	lsreq	r3, r3, #4
 800c78e:	3004      	addeq	r0, #4
 800c790:	079a      	lsls	r2, r3, #30
 800c792:	bf04      	itt	eq
 800c794:	089b      	lsreq	r3, r3, #2
 800c796:	3002      	addeq	r0, #2
 800c798:	07da      	lsls	r2, r3, #31
 800c79a:	d403      	bmi.n	800c7a4 <__lo0bits+0x50>
 800c79c:	085b      	lsrs	r3, r3, #1
 800c79e:	f100 0001 	add.w	r0, r0, #1
 800c7a2:	d005      	beq.n	800c7b0 <__lo0bits+0x5c>
 800c7a4:	600b      	str	r3, [r1, #0]
 800c7a6:	4770      	bx	lr
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	e7e8      	b.n	800c77e <__lo0bits+0x2a>
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	4770      	bx	lr
 800c7b0:	2020      	movs	r0, #32
 800c7b2:	4770      	bx	lr

0800c7b4 <__i2b>:
 800c7b4:	b510      	push	{r4, lr}
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	f7ff feb5 	bl	800c528 <_Balloc>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	b928      	cbnz	r0, 800c7ce <__i2b+0x1a>
 800c7c2:	4b05      	ldr	r3, [pc, #20]	; (800c7d8 <__i2b+0x24>)
 800c7c4:	4805      	ldr	r0, [pc, #20]	; (800c7dc <__i2b+0x28>)
 800c7c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c7ca:	f000 ff65 	bl	800d698 <__assert_func>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	6144      	str	r4, [r0, #20]
 800c7d2:	6103      	str	r3, [r0, #16]
 800c7d4:	bd10      	pop	{r4, pc}
 800c7d6:	bf00      	nop
 800c7d8:	0800ddbc 	.word	0x0800ddbc
 800c7dc:	0800deb0 	.word	0x0800deb0

0800c7e0 <__multiply>:
 800c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e4:	4614      	mov	r4, r2
 800c7e6:	690a      	ldr	r2, [r1, #16]
 800c7e8:	6923      	ldr	r3, [r4, #16]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	bfb8      	it	lt
 800c7ee:	460b      	movlt	r3, r1
 800c7f0:	460d      	mov	r5, r1
 800c7f2:	bfbc      	itt	lt
 800c7f4:	4625      	movlt	r5, r4
 800c7f6:	461c      	movlt	r4, r3
 800c7f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c7fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c800:	68ab      	ldr	r3, [r5, #8]
 800c802:	6869      	ldr	r1, [r5, #4]
 800c804:	eb0a 0709 	add.w	r7, sl, r9
 800c808:	42bb      	cmp	r3, r7
 800c80a:	b085      	sub	sp, #20
 800c80c:	bfb8      	it	lt
 800c80e:	3101      	addlt	r1, #1
 800c810:	f7ff fe8a 	bl	800c528 <_Balloc>
 800c814:	b930      	cbnz	r0, 800c824 <__multiply+0x44>
 800c816:	4602      	mov	r2, r0
 800c818:	4b42      	ldr	r3, [pc, #264]	; (800c924 <__multiply+0x144>)
 800c81a:	4843      	ldr	r0, [pc, #268]	; (800c928 <__multiply+0x148>)
 800c81c:	f240 115d 	movw	r1, #349	; 0x15d
 800c820:	f000 ff3a 	bl	800d698 <__assert_func>
 800c824:	f100 0614 	add.w	r6, r0, #20
 800c828:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c82c:	4633      	mov	r3, r6
 800c82e:	2200      	movs	r2, #0
 800c830:	4543      	cmp	r3, r8
 800c832:	d31e      	bcc.n	800c872 <__multiply+0x92>
 800c834:	f105 0c14 	add.w	ip, r5, #20
 800c838:	f104 0314 	add.w	r3, r4, #20
 800c83c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c840:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c844:	9202      	str	r2, [sp, #8]
 800c846:	ebac 0205 	sub.w	r2, ip, r5
 800c84a:	3a15      	subs	r2, #21
 800c84c:	f022 0203 	bic.w	r2, r2, #3
 800c850:	3204      	adds	r2, #4
 800c852:	f105 0115 	add.w	r1, r5, #21
 800c856:	458c      	cmp	ip, r1
 800c858:	bf38      	it	cc
 800c85a:	2204      	movcc	r2, #4
 800c85c:	9201      	str	r2, [sp, #4]
 800c85e:	9a02      	ldr	r2, [sp, #8]
 800c860:	9303      	str	r3, [sp, #12]
 800c862:	429a      	cmp	r2, r3
 800c864:	d808      	bhi.n	800c878 <__multiply+0x98>
 800c866:	2f00      	cmp	r7, #0
 800c868:	dc55      	bgt.n	800c916 <__multiply+0x136>
 800c86a:	6107      	str	r7, [r0, #16]
 800c86c:	b005      	add	sp, #20
 800c86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c872:	f843 2b04 	str.w	r2, [r3], #4
 800c876:	e7db      	b.n	800c830 <__multiply+0x50>
 800c878:	f8b3 a000 	ldrh.w	sl, [r3]
 800c87c:	f1ba 0f00 	cmp.w	sl, #0
 800c880:	d020      	beq.n	800c8c4 <__multiply+0xe4>
 800c882:	f105 0e14 	add.w	lr, r5, #20
 800c886:	46b1      	mov	r9, r6
 800c888:	2200      	movs	r2, #0
 800c88a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c88e:	f8d9 b000 	ldr.w	fp, [r9]
 800c892:	b2a1      	uxth	r1, r4
 800c894:	fa1f fb8b 	uxth.w	fp, fp
 800c898:	fb0a b101 	mla	r1, sl, r1, fp
 800c89c:	4411      	add	r1, r2
 800c89e:	f8d9 2000 	ldr.w	r2, [r9]
 800c8a2:	0c24      	lsrs	r4, r4, #16
 800c8a4:	0c12      	lsrs	r2, r2, #16
 800c8a6:	fb0a 2404 	mla	r4, sl, r4, r2
 800c8aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c8ae:	b289      	uxth	r1, r1
 800c8b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c8b4:	45f4      	cmp	ip, lr
 800c8b6:	f849 1b04 	str.w	r1, [r9], #4
 800c8ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c8be:	d8e4      	bhi.n	800c88a <__multiply+0xaa>
 800c8c0:	9901      	ldr	r1, [sp, #4]
 800c8c2:	5072      	str	r2, [r6, r1]
 800c8c4:	9a03      	ldr	r2, [sp, #12]
 800c8c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c8ca:	3304      	adds	r3, #4
 800c8cc:	f1b9 0f00 	cmp.w	r9, #0
 800c8d0:	d01f      	beq.n	800c912 <__multiply+0x132>
 800c8d2:	6834      	ldr	r4, [r6, #0]
 800c8d4:	f105 0114 	add.w	r1, r5, #20
 800c8d8:	46b6      	mov	lr, r6
 800c8da:	f04f 0a00 	mov.w	sl, #0
 800c8de:	880a      	ldrh	r2, [r1, #0]
 800c8e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c8e4:	fb09 b202 	mla	r2, r9, r2, fp
 800c8e8:	4492      	add	sl, r2
 800c8ea:	b2a4      	uxth	r4, r4
 800c8ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c8f0:	f84e 4b04 	str.w	r4, [lr], #4
 800c8f4:	f851 4b04 	ldr.w	r4, [r1], #4
 800c8f8:	f8be 2000 	ldrh.w	r2, [lr]
 800c8fc:	0c24      	lsrs	r4, r4, #16
 800c8fe:	fb09 2404 	mla	r4, r9, r4, r2
 800c902:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c906:	458c      	cmp	ip, r1
 800c908:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c90c:	d8e7      	bhi.n	800c8de <__multiply+0xfe>
 800c90e:	9a01      	ldr	r2, [sp, #4]
 800c910:	50b4      	str	r4, [r6, r2]
 800c912:	3604      	adds	r6, #4
 800c914:	e7a3      	b.n	800c85e <__multiply+0x7e>
 800c916:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1a5      	bne.n	800c86a <__multiply+0x8a>
 800c91e:	3f01      	subs	r7, #1
 800c920:	e7a1      	b.n	800c866 <__multiply+0x86>
 800c922:	bf00      	nop
 800c924:	0800ddbc 	.word	0x0800ddbc
 800c928:	0800deb0 	.word	0x0800deb0

0800c92c <__pow5mult>:
 800c92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c930:	4615      	mov	r5, r2
 800c932:	f012 0203 	ands.w	r2, r2, #3
 800c936:	4606      	mov	r6, r0
 800c938:	460f      	mov	r7, r1
 800c93a:	d007      	beq.n	800c94c <__pow5mult+0x20>
 800c93c:	4c25      	ldr	r4, [pc, #148]	; (800c9d4 <__pow5mult+0xa8>)
 800c93e:	3a01      	subs	r2, #1
 800c940:	2300      	movs	r3, #0
 800c942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c946:	f7ff fe51 	bl	800c5ec <__multadd>
 800c94a:	4607      	mov	r7, r0
 800c94c:	10ad      	asrs	r5, r5, #2
 800c94e:	d03d      	beq.n	800c9cc <__pow5mult+0xa0>
 800c950:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c952:	b97c      	cbnz	r4, 800c974 <__pow5mult+0x48>
 800c954:	2010      	movs	r0, #16
 800c956:	f7ff fdcd 	bl	800c4f4 <malloc>
 800c95a:	4602      	mov	r2, r0
 800c95c:	6270      	str	r0, [r6, #36]	; 0x24
 800c95e:	b928      	cbnz	r0, 800c96c <__pow5mult+0x40>
 800c960:	4b1d      	ldr	r3, [pc, #116]	; (800c9d8 <__pow5mult+0xac>)
 800c962:	481e      	ldr	r0, [pc, #120]	; (800c9dc <__pow5mult+0xb0>)
 800c964:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c968:	f000 fe96 	bl	800d698 <__assert_func>
 800c96c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c970:	6004      	str	r4, [r0, #0]
 800c972:	60c4      	str	r4, [r0, #12]
 800c974:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c97c:	b94c      	cbnz	r4, 800c992 <__pow5mult+0x66>
 800c97e:	f240 2171 	movw	r1, #625	; 0x271
 800c982:	4630      	mov	r0, r6
 800c984:	f7ff ff16 	bl	800c7b4 <__i2b>
 800c988:	2300      	movs	r3, #0
 800c98a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c98e:	4604      	mov	r4, r0
 800c990:	6003      	str	r3, [r0, #0]
 800c992:	f04f 0900 	mov.w	r9, #0
 800c996:	07eb      	lsls	r3, r5, #31
 800c998:	d50a      	bpl.n	800c9b0 <__pow5mult+0x84>
 800c99a:	4639      	mov	r1, r7
 800c99c:	4622      	mov	r2, r4
 800c99e:	4630      	mov	r0, r6
 800c9a0:	f7ff ff1e 	bl	800c7e0 <__multiply>
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	4680      	mov	r8, r0
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7ff fdfd 	bl	800c5a8 <_Bfree>
 800c9ae:	4647      	mov	r7, r8
 800c9b0:	106d      	asrs	r5, r5, #1
 800c9b2:	d00b      	beq.n	800c9cc <__pow5mult+0xa0>
 800c9b4:	6820      	ldr	r0, [r4, #0]
 800c9b6:	b938      	cbnz	r0, 800c9c8 <__pow5mult+0x9c>
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	4621      	mov	r1, r4
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f7ff ff0f 	bl	800c7e0 <__multiply>
 800c9c2:	6020      	str	r0, [r4, #0]
 800c9c4:	f8c0 9000 	str.w	r9, [r0]
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	e7e4      	b.n	800c996 <__pow5mult+0x6a>
 800c9cc:	4638      	mov	r0, r7
 800c9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9d2:	bf00      	nop
 800c9d4:	0800e000 	.word	0x0800e000
 800c9d8:	0800dd46 	.word	0x0800dd46
 800c9dc:	0800deb0 	.word	0x0800deb0

0800c9e0 <__lshift>:
 800c9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	6849      	ldr	r1, [r1, #4]
 800c9e8:	6923      	ldr	r3, [r4, #16]
 800c9ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9ee:	68a3      	ldr	r3, [r4, #8]
 800c9f0:	4607      	mov	r7, r0
 800c9f2:	4691      	mov	r9, r2
 800c9f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9f8:	f108 0601 	add.w	r6, r8, #1
 800c9fc:	42b3      	cmp	r3, r6
 800c9fe:	db0b      	blt.n	800ca18 <__lshift+0x38>
 800ca00:	4638      	mov	r0, r7
 800ca02:	f7ff fd91 	bl	800c528 <_Balloc>
 800ca06:	4605      	mov	r5, r0
 800ca08:	b948      	cbnz	r0, 800ca1e <__lshift+0x3e>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	4b28      	ldr	r3, [pc, #160]	; (800cab0 <__lshift+0xd0>)
 800ca0e:	4829      	ldr	r0, [pc, #164]	; (800cab4 <__lshift+0xd4>)
 800ca10:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca14:	f000 fe40 	bl	800d698 <__assert_func>
 800ca18:	3101      	adds	r1, #1
 800ca1a:	005b      	lsls	r3, r3, #1
 800ca1c:	e7ee      	b.n	800c9fc <__lshift+0x1c>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f100 0114 	add.w	r1, r0, #20
 800ca24:	f100 0210 	add.w	r2, r0, #16
 800ca28:	4618      	mov	r0, r3
 800ca2a:	4553      	cmp	r3, sl
 800ca2c:	db33      	blt.n	800ca96 <__lshift+0xb6>
 800ca2e:	6920      	ldr	r0, [r4, #16]
 800ca30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca34:	f104 0314 	add.w	r3, r4, #20
 800ca38:	f019 091f 	ands.w	r9, r9, #31
 800ca3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca44:	d02b      	beq.n	800ca9e <__lshift+0xbe>
 800ca46:	f1c9 0e20 	rsb	lr, r9, #32
 800ca4a:	468a      	mov	sl, r1
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	6818      	ldr	r0, [r3, #0]
 800ca50:	fa00 f009 	lsl.w	r0, r0, r9
 800ca54:	4302      	orrs	r2, r0
 800ca56:	f84a 2b04 	str.w	r2, [sl], #4
 800ca5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca5e:	459c      	cmp	ip, r3
 800ca60:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca64:	d8f3      	bhi.n	800ca4e <__lshift+0x6e>
 800ca66:	ebac 0304 	sub.w	r3, ip, r4
 800ca6a:	3b15      	subs	r3, #21
 800ca6c:	f023 0303 	bic.w	r3, r3, #3
 800ca70:	3304      	adds	r3, #4
 800ca72:	f104 0015 	add.w	r0, r4, #21
 800ca76:	4584      	cmp	ip, r0
 800ca78:	bf38      	it	cc
 800ca7a:	2304      	movcc	r3, #4
 800ca7c:	50ca      	str	r2, [r1, r3]
 800ca7e:	b10a      	cbz	r2, 800ca84 <__lshift+0xa4>
 800ca80:	f108 0602 	add.w	r6, r8, #2
 800ca84:	3e01      	subs	r6, #1
 800ca86:	4638      	mov	r0, r7
 800ca88:	612e      	str	r6, [r5, #16]
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	f7ff fd8c 	bl	800c5a8 <_Bfree>
 800ca90:	4628      	mov	r0, r5
 800ca92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca96:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	e7c5      	b.n	800ca2a <__lshift+0x4a>
 800ca9e:	3904      	subs	r1, #4
 800caa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800caa4:	f841 2f04 	str.w	r2, [r1, #4]!
 800caa8:	459c      	cmp	ip, r3
 800caaa:	d8f9      	bhi.n	800caa0 <__lshift+0xc0>
 800caac:	e7ea      	b.n	800ca84 <__lshift+0xa4>
 800caae:	bf00      	nop
 800cab0:	0800ddbc 	.word	0x0800ddbc
 800cab4:	0800deb0 	.word	0x0800deb0

0800cab8 <__mcmp>:
 800cab8:	b530      	push	{r4, r5, lr}
 800caba:	6902      	ldr	r2, [r0, #16]
 800cabc:	690c      	ldr	r4, [r1, #16]
 800cabe:	1b12      	subs	r2, r2, r4
 800cac0:	d10e      	bne.n	800cae0 <__mcmp+0x28>
 800cac2:	f100 0314 	add.w	r3, r0, #20
 800cac6:	3114      	adds	r1, #20
 800cac8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cacc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cad0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cad4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cad8:	42a5      	cmp	r5, r4
 800cada:	d003      	beq.n	800cae4 <__mcmp+0x2c>
 800cadc:	d305      	bcc.n	800caea <__mcmp+0x32>
 800cade:	2201      	movs	r2, #1
 800cae0:	4610      	mov	r0, r2
 800cae2:	bd30      	pop	{r4, r5, pc}
 800cae4:	4283      	cmp	r3, r0
 800cae6:	d3f3      	bcc.n	800cad0 <__mcmp+0x18>
 800cae8:	e7fa      	b.n	800cae0 <__mcmp+0x28>
 800caea:	f04f 32ff 	mov.w	r2, #4294967295
 800caee:	e7f7      	b.n	800cae0 <__mcmp+0x28>

0800caf0 <__mdiff>:
 800caf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	460c      	mov	r4, r1
 800caf6:	4606      	mov	r6, r0
 800caf8:	4611      	mov	r1, r2
 800cafa:	4620      	mov	r0, r4
 800cafc:	4617      	mov	r7, r2
 800cafe:	f7ff ffdb 	bl	800cab8 <__mcmp>
 800cb02:	1e05      	subs	r5, r0, #0
 800cb04:	d110      	bne.n	800cb28 <__mdiff+0x38>
 800cb06:	4629      	mov	r1, r5
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f7ff fd0d 	bl	800c528 <_Balloc>
 800cb0e:	b930      	cbnz	r0, 800cb1e <__mdiff+0x2e>
 800cb10:	4b39      	ldr	r3, [pc, #228]	; (800cbf8 <__mdiff+0x108>)
 800cb12:	4602      	mov	r2, r0
 800cb14:	f240 2132 	movw	r1, #562	; 0x232
 800cb18:	4838      	ldr	r0, [pc, #224]	; (800cbfc <__mdiff+0x10c>)
 800cb1a:	f000 fdbd 	bl	800d698 <__assert_func>
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb28:	bfa4      	itt	ge
 800cb2a:	463b      	movge	r3, r7
 800cb2c:	4627      	movge	r7, r4
 800cb2e:	4630      	mov	r0, r6
 800cb30:	6879      	ldr	r1, [r7, #4]
 800cb32:	bfa6      	itte	ge
 800cb34:	461c      	movge	r4, r3
 800cb36:	2500      	movge	r5, #0
 800cb38:	2501      	movlt	r5, #1
 800cb3a:	f7ff fcf5 	bl	800c528 <_Balloc>
 800cb3e:	b920      	cbnz	r0, 800cb4a <__mdiff+0x5a>
 800cb40:	4b2d      	ldr	r3, [pc, #180]	; (800cbf8 <__mdiff+0x108>)
 800cb42:	4602      	mov	r2, r0
 800cb44:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cb48:	e7e6      	b.n	800cb18 <__mdiff+0x28>
 800cb4a:	693e      	ldr	r6, [r7, #16]
 800cb4c:	60c5      	str	r5, [r0, #12]
 800cb4e:	6925      	ldr	r5, [r4, #16]
 800cb50:	f107 0114 	add.w	r1, r7, #20
 800cb54:	f104 0914 	add.w	r9, r4, #20
 800cb58:	f100 0e14 	add.w	lr, r0, #20
 800cb5c:	f107 0210 	add.w	r2, r7, #16
 800cb60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cb64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cb68:	46f2      	mov	sl, lr
 800cb6a:	2700      	movs	r7, #0
 800cb6c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb74:	fa1f f883 	uxth.w	r8, r3
 800cb78:	fa17 f78b 	uxtah	r7, r7, fp
 800cb7c:	0c1b      	lsrs	r3, r3, #16
 800cb7e:	eba7 0808 	sub.w	r8, r7, r8
 800cb82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb8a:	fa1f f888 	uxth.w	r8, r8
 800cb8e:	141f      	asrs	r7, r3, #16
 800cb90:	454d      	cmp	r5, r9
 800cb92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb96:	f84a 3b04 	str.w	r3, [sl], #4
 800cb9a:	d8e7      	bhi.n	800cb6c <__mdiff+0x7c>
 800cb9c:	1b2b      	subs	r3, r5, r4
 800cb9e:	3b15      	subs	r3, #21
 800cba0:	f023 0303 	bic.w	r3, r3, #3
 800cba4:	3304      	adds	r3, #4
 800cba6:	3415      	adds	r4, #21
 800cba8:	42a5      	cmp	r5, r4
 800cbaa:	bf38      	it	cc
 800cbac:	2304      	movcc	r3, #4
 800cbae:	4419      	add	r1, r3
 800cbb0:	4473      	add	r3, lr
 800cbb2:	469e      	mov	lr, r3
 800cbb4:	460d      	mov	r5, r1
 800cbb6:	4565      	cmp	r5, ip
 800cbb8:	d30e      	bcc.n	800cbd8 <__mdiff+0xe8>
 800cbba:	f10c 0203 	add.w	r2, ip, #3
 800cbbe:	1a52      	subs	r2, r2, r1
 800cbc0:	f022 0203 	bic.w	r2, r2, #3
 800cbc4:	3903      	subs	r1, #3
 800cbc6:	458c      	cmp	ip, r1
 800cbc8:	bf38      	it	cc
 800cbca:	2200      	movcc	r2, #0
 800cbcc:	441a      	add	r2, r3
 800cbce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cbd2:	b17b      	cbz	r3, 800cbf4 <__mdiff+0x104>
 800cbd4:	6106      	str	r6, [r0, #16]
 800cbd6:	e7a5      	b.n	800cb24 <__mdiff+0x34>
 800cbd8:	f855 8b04 	ldr.w	r8, [r5], #4
 800cbdc:	fa17 f488 	uxtah	r4, r7, r8
 800cbe0:	1422      	asrs	r2, r4, #16
 800cbe2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cbe6:	b2a4      	uxth	r4, r4
 800cbe8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cbec:	f84e 4b04 	str.w	r4, [lr], #4
 800cbf0:	1417      	asrs	r7, r2, #16
 800cbf2:	e7e0      	b.n	800cbb6 <__mdiff+0xc6>
 800cbf4:	3e01      	subs	r6, #1
 800cbf6:	e7ea      	b.n	800cbce <__mdiff+0xde>
 800cbf8:	0800ddbc 	.word	0x0800ddbc
 800cbfc:	0800deb0 	.word	0x0800deb0

0800cc00 <__ulp>:
 800cc00:	b082      	sub	sp, #8
 800cc02:	ed8d 0b00 	vstr	d0, [sp]
 800cc06:	9b01      	ldr	r3, [sp, #4]
 800cc08:	4912      	ldr	r1, [pc, #72]	; (800cc54 <__ulp+0x54>)
 800cc0a:	4019      	ands	r1, r3
 800cc0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cc10:	2900      	cmp	r1, #0
 800cc12:	dd05      	ble.n	800cc20 <__ulp+0x20>
 800cc14:	2200      	movs	r2, #0
 800cc16:	460b      	mov	r3, r1
 800cc18:	ec43 2b10 	vmov	d0, r2, r3
 800cc1c:	b002      	add	sp, #8
 800cc1e:	4770      	bx	lr
 800cc20:	4249      	negs	r1, r1
 800cc22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cc26:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cc2a:	f04f 0200 	mov.w	r2, #0
 800cc2e:	f04f 0300 	mov.w	r3, #0
 800cc32:	da04      	bge.n	800cc3e <__ulp+0x3e>
 800cc34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cc38:	fa41 f300 	asr.w	r3, r1, r0
 800cc3c:	e7ec      	b.n	800cc18 <__ulp+0x18>
 800cc3e:	f1a0 0114 	sub.w	r1, r0, #20
 800cc42:	291e      	cmp	r1, #30
 800cc44:	bfda      	itte	le
 800cc46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cc4a:	fa20 f101 	lsrle.w	r1, r0, r1
 800cc4e:	2101      	movgt	r1, #1
 800cc50:	460a      	mov	r2, r1
 800cc52:	e7e1      	b.n	800cc18 <__ulp+0x18>
 800cc54:	7ff00000 	.word	0x7ff00000

0800cc58 <__b2d>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	6905      	ldr	r5, [r0, #16]
 800cc5c:	f100 0714 	add.w	r7, r0, #20
 800cc60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cc64:	1f2e      	subs	r6, r5, #4
 800cc66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f7ff fd52 	bl	800c714 <__hi0bits>
 800cc70:	f1c0 0320 	rsb	r3, r0, #32
 800cc74:	280a      	cmp	r0, #10
 800cc76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ccf4 <__b2d+0x9c>
 800cc7a:	600b      	str	r3, [r1, #0]
 800cc7c:	dc14      	bgt.n	800cca8 <__b2d+0x50>
 800cc7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800cc82:	fa24 f10e 	lsr.w	r1, r4, lr
 800cc86:	42b7      	cmp	r7, r6
 800cc88:	ea41 030c 	orr.w	r3, r1, ip
 800cc8c:	bf34      	ite	cc
 800cc8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cc92:	2100      	movcs	r1, #0
 800cc94:	3015      	adds	r0, #21
 800cc96:	fa04 f000 	lsl.w	r0, r4, r0
 800cc9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800cc9e:	ea40 0201 	orr.w	r2, r0, r1
 800cca2:	ec43 2b10 	vmov	d0, r2, r3
 800cca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cca8:	42b7      	cmp	r7, r6
 800ccaa:	bf3a      	itte	cc
 800ccac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ccb0:	f1a5 0608 	subcc.w	r6, r5, #8
 800ccb4:	2100      	movcs	r1, #0
 800ccb6:	380b      	subs	r0, #11
 800ccb8:	d017      	beq.n	800ccea <__b2d+0x92>
 800ccba:	f1c0 0c20 	rsb	ip, r0, #32
 800ccbe:	fa04 f500 	lsl.w	r5, r4, r0
 800ccc2:	42be      	cmp	r6, r7
 800ccc4:	fa21 f40c 	lsr.w	r4, r1, ip
 800ccc8:	ea45 0504 	orr.w	r5, r5, r4
 800cccc:	bf8c      	ite	hi
 800ccce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ccd2:	2400      	movls	r4, #0
 800ccd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ccd8:	fa01 f000 	lsl.w	r0, r1, r0
 800ccdc:	fa24 f40c 	lsr.w	r4, r4, ip
 800cce0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cce4:	ea40 0204 	orr.w	r2, r0, r4
 800cce8:	e7db      	b.n	800cca2 <__b2d+0x4a>
 800ccea:	ea44 030c 	orr.w	r3, r4, ip
 800ccee:	460a      	mov	r2, r1
 800ccf0:	e7d7      	b.n	800cca2 <__b2d+0x4a>
 800ccf2:	bf00      	nop
 800ccf4:	3ff00000 	.word	0x3ff00000

0800ccf8 <__d2b>:
 800ccf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccfc:	4689      	mov	r9, r1
 800ccfe:	2101      	movs	r1, #1
 800cd00:	ec57 6b10 	vmov	r6, r7, d0
 800cd04:	4690      	mov	r8, r2
 800cd06:	f7ff fc0f 	bl	800c528 <_Balloc>
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	b930      	cbnz	r0, 800cd1c <__d2b+0x24>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	4b25      	ldr	r3, [pc, #148]	; (800cda8 <__d2b+0xb0>)
 800cd12:	4826      	ldr	r0, [pc, #152]	; (800cdac <__d2b+0xb4>)
 800cd14:	f240 310a 	movw	r1, #778	; 0x30a
 800cd18:	f000 fcbe 	bl	800d698 <__assert_func>
 800cd1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cd20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd24:	bb35      	cbnz	r5, 800cd74 <__d2b+0x7c>
 800cd26:	2e00      	cmp	r6, #0
 800cd28:	9301      	str	r3, [sp, #4]
 800cd2a:	d028      	beq.n	800cd7e <__d2b+0x86>
 800cd2c:	4668      	mov	r0, sp
 800cd2e:	9600      	str	r6, [sp, #0]
 800cd30:	f7ff fd10 	bl	800c754 <__lo0bits>
 800cd34:	9900      	ldr	r1, [sp, #0]
 800cd36:	b300      	cbz	r0, 800cd7a <__d2b+0x82>
 800cd38:	9a01      	ldr	r2, [sp, #4]
 800cd3a:	f1c0 0320 	rsb	r3, r0, #32
 800cd3e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd42:	430b      	orrs	r3, r1
 800cd44:	40c2      	lsrs	r2, r0
 800cd46:	6163      	str	r3, [r4, #20]
 800cd48:	9201      	str	r2, [sp, #4]
 800cd4a:	9b01      	ldr	r3, [sp, #4]
 800cd4c:	61a3      	str	r3, [r4, #24]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	bf14      	ite	ne
 800cd52:	2202      	movne	r2, #2
 800cd54:	2201      	moveq	r2, #1
 800cd56:	6122      	str	r2, [r4, #16]
 800cd58:	b1d5      	cbz	r5, 800cd90 <__d2b+0x98>
 800cd5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd5e:	4405      	add	r5, r0
 800cd60:	f8c9 5000 	str.w	r5, [r9]
 800cd64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd68:	f8c8 0000 	str.w	r0, [r8]
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	b003      	add	sp, #12
 800cd70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd78:	e7d5      	b.n	800cd26 <__d2b+0x2e>
 800cd7a:	6161      	str	r1, [r4, #20]
 800cd7c:	e7e5      	b.n	800cd4a <__d2b+0x52>
 800cd7e:	a801      	add	r0, sp, #4
 800cd80:	f7ff fce8 	bl	800c754 <__lo0bits>
 800cd84:	9b01      	ldr	r3, [sp, #4]
 800cd86:	6163      	str	r3, [r4, #20]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	6122      	str	r2, [r4, #16]
 800cd8c:	3020      	adds	r0, #32
 800cd8e:	e7e3      	b.n	800cd58 <__d2b+0x60>
 800cd90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd98:	f8c9 0000 	str.w	r0, [r9]
 800cd9c:	6918      	ldr	r0, [r3, #16]
 800cd9e:	f7ff fcb9 	bl	800c714 <__hi0bits>
 800cda2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cda6:	e7df      	b.n	800cd68 <__d2b+0x70>
 800cda8:	0800ddbc 	.word	0x0800ddbc
 800cdac:	0800deb0 	.word	0x0800deb0

0800cdb0 <__ratio>:
 800cdb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb4:	4688      	mov	r8, r1
 800cdb6:	4669      	mov	r1, sp
 800cdb8:	4681      	mov	r9, r0
 800cdba:	f7ff ff4d 	bl	800cc58 <__b2d>
 800cdbe:	a901      	add	r1, sp, #4
 800cdc0:	4640      	mov	r0, r8
 800cdc2:	ec55 4b10 	vmov	r4, r5, d0
 800cdc6:	f7ff ff47 	bl	800cc58 <__b2d>
 800cdca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cdce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cdd2:	eba3 0c02 	sub.w	ip, r3, r2
 800cdd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cdda:	1a9b      	subs	r3, r3, r2
 800cddc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cde0:	ec51 0b10 	vmov	r0, r1, d0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	bfd6      	itet	le
 800cde8:	460a      	movle	r2, r1
 800cdea:	462a      	movgt	r2, r5
 800cdec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cdf0:	468b      	mov	fp, r1
 800cdf2:	462f      	mov	r7, r5
 800cdf4:	bfd4      	ite	le
 800cdf6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cdfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cdfe:	4620      	mov	r0, r4
 800ce00:	ee10 2a10 	vmov	r2, s0
 800ce04:	465b      	mov	r3, fp
 800ce06:	4639      	mov	r1, r7
 800ce08:	f7f3 fd20 	bl	800084c <__aeabi_ddiv>
 800ce0c:	ec41 0b10 	vmov	d0, r0, r1
 800ce10:	b003      	add	sp, #12
 800ce12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce16 <__copybits>:
 800ce16:	3901      	subs	r1, #1
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	1149      	asrs	r1, r1, #5
 800ce1c:	6914      	ldr	r4, [r2, #16]
 800ce1e:	3101      	adds	r1, #1
 800ce20:	f102 0314 	add.w	r3, r2, #20
 800ce24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce2c:	1f05      	subs	r5, r0, #4
 800ce2e:	42a3      	cmp	r3, r4
 800ce30:	d30c      	bcc.n	800ce4c <__copybits+0x36>
 800ce32:	1aa3      	subs	r3, r4, r2
 800ce34:	3b11      	subs	r3, #17
 800ce36:	f023 0303 	bic.w	r3, r3, #3
 800ce3a:	3211      	adds	r2, #17
 800ce3c:	42a2      	cmp	r2, r4
 800ce3e:	bf88      	it	hi
 800ce40:	2300      	movhi	r3, #0
 800ce42:	4418      	add	r0, r3
 800ce44:	2300      	movs	r3, #0
 800ce46:	4288      	cmp	r0, r1
 800ce48:	d305      	bcc.n	800ce56 <__copybits+0x40>
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ce50:	f845 6f04 	str.w	r6, [r5, #4]!
 800ce54:	e7eb      	b.n	800ce2e <__copybits+0x18>
 800ce56:	f840 3b04 	str.w	r3, [r0], #4
 800ce5a:	e7f4      	b.n	800ce46 <__copybits+0x30>

0800ce5c <__any_on>:
 800ce5c:	f100 0214 	add.w	r2, r0, #20
 800ce60:	6900      	ldr	r0, [r0, #16]
 800ce62:	114b      	asrs	r3, r1, #5
 800ce64:	4298      	cmp	r0, r3
 800ce66:	b510      	push	{r4, lr}
 800ce68:	db11      	blt.n	800ce8e <__any_on+0x32>
 800ce6a:	dd0a      	ble.n	800ce82 <__any_on+0x26>
 800ce6c:	f011 011f 	ands.w	r1, r1, #31
 800ce70:	d007      	beq.n	800ce82 <__any_on+0x26>
 800ce72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce76:	fa24 f001 	lsr.w	r0, r4, r1
 800ce7a:	fa00 f101 	lsl.w	r1, r0, r1
 800ce7e:	428c      	cmp	r4, r1
 800ce80:	d10b      	bne.n	800ce9a <__any_on+0x3e>
 800ce82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d803      	bhi.n	800ce92 <__any_on+0x36>
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	bd10      	pop	{r4, pc}
 800ce8e:	4603      	mov	r3, r0
 800ce90:	e7f7      	b.n	800ce82 <__any_on+0x26>
 800ce92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce96:	2900      	cmp	r1, #0
 800ce98:	d0f5      	beq.n	800ce86 <__any_on+0x2a>
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	e7f6      	b.n	800ce8c <__any_on+0x30>

0800ce9e <_calloc_r>:
 800ce9e:	b513      	push	{r0, r1, r4, lr}
 800cea0:	434a      	muls	r2, r1
 800cea2:	4611      	mov	r1, r2
 800cea4:	9201      	str	r2, [sp, #4]
 800cea6:	f000 f859 	bl	800cf5c <_malloc_r>
 800ceaa:	4604      	mov	r4, r0
 800ceac:	b118      	cbz	r0, 800ceb6 <_calloc_r+0x18>
 800ceae:	9a01      	ldr	r2, [sp, #4]
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	f7fc f869 	bl	8008f88 <memset>
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	b002      	add	sp, #8
 800ceba:	bd10      	pop	{r4, pc}

0800cebc <_free_r>:
 800cebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cebe:	2900      	cmp	r1, #0
 800cec0:	d048      	beq.n	800cf54 <_free_r+0x98>
 800cec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cec6:	9001      	str	r0, [sp, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f1a1 0404 	sub.w	r4, r1, #4
 800cece:	bfb8      	it	lt
 800ced0:	18e4      	addlt	r4, r4, r3
 800ced2:	f000 fc6f 	bl	800d7b4 <__malloc_lock>
 800ced6:	4a20      	ldr	r2, [pc, #128]	; (800cf58 <_free_r+0x9c>)
 800ced8:	9801      	ldr	r0, [sp, #4]
 800ceda:	6813      	ldr	r3, [r2, #0]
 800cedc:	4615      	mov	r5, r2
 800cede:	b933      	cbnz	r3, 800ceee <_free_r+0x32>
 800cee0:	6063      	str	r3, [r4, #4]
 800cee2:	6014      	str	r4, [r2, #0]
 800cee4:	b003      	add	sp, #12
 800cee6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ceea:	f000 bc69 	b.w	800d7c0 <__malloc_unlock>
 800ceee:	42a3      	cmp	r3, r4
 800cef0:	d90b      	bls.n	800cf0a <_free_r+0x4e>
 800cef2:	6821      	ldr	r1, [r4, #0]
 800cef4:	1862      	adds	r2, r4, r1
 800cef6:	4293      	cmp	r3, r2
 800cef8:	bf04      	itt	eq
 800cefa:	681a      	ldreq	r2, [r3, #0]
 800cefc:	685b      	ldreq	r3, [r3, #4]
 800cefe:	6063      	str	r3, [r4, #4]
 800cf00:	bf04      	itt	eq
 800cf02:	1852      	addeq	r2, r2, r1
 800cf04:	6022      	streq	r2, [r4, #0]
 800cf06:	602c      	str	r4, [r5, #0]
 800cf08:	e7ec      	b.n	800cee4 <_free_r+0x28>
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	b10b      	cbz	r3, 800cf14 <_free_r+0x58>
 800cf10:	42a3      	cmp	r3, r4
 800cf12:	d9fa      	bls.n	800cf0a <_free_r+0x4e>
 800cf14:	6811      	ldr	r1, [r2, #0]
 800cf16:	1855      	adds	r5, r2, r1
 800cf18:	42a5      	cmp	r5, r4
 800cf1a:	d10b      	bne.n	800cf34 <_free_r+0x78>
 800cf1c:	6824      	ldr	r4, [r4, #0]
 800cf1e:	4421      	add	r1, r4
 800cf20:	1854      	adds	r4, r2, r1
 800cf22:	42a3      	cmp	r3, r4
 800cf24:	6011      	str	r1, [r2, #0]
 800cf26:	d1dd      	bne.n	800cee4 <_free_r+0x28>
 800cf28:	681c      	ldr	r4, [r3, #0]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	6053      	str	r3, [r2, #4]
 800cf2e:	4421      	add	r1, r4
 800cf30:	6011      	str	r1, [r2, #0]
 800cf32:	e7d7      	b.n	800cee4 <_free_r+0x28>
 800cf34:	d902      	bls.n	800cf3c <_free_r+0x80>
 800cf36:	230c      	movs	r3, #12
 800cf38:	6003      	str	r3, [r0, #0]
 800cf3a:	e7d3      	b.n	800cee4 <_free_r+0x28>
 800cf3c:	6825      	ldr	r5, [r4, #0]
 800cf3e:	1961      	adds	r1, r4, r5
 800cf40:	428b      	cmp	r3, r1
 800cf42:	bf04      	itt	eq
 800cf44:	6819      	ldreq	r1, [r3, #0]
 800cf46:	685b      	ldreq	r3, [r3, #4]
 800cf48:	6063      	str	r3, [r4, #4]
 800cf4a:	bf04      	itt	eq
 800cf4c:	1949      	addeq	r1, r1, r5
 800cf4e:	6021      	streq	r1, [r4, #0]
 800cf50:	6054      	str	r4, [r2, #4]
 800cf52:	e7c7      	b.n	800cee4 <_free_r+0x28>
 800cf54:	b003      	add	sp, #12
 800cf56:	bd30      	pop	{r4, r5, pc}
 800cf58:	20000200 	.word	0x20000200

0800cf5c <_malloc_r>:
 800cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5e:	1ccd      	adds	r5, r1, #3
 800cf60:	f025 0503 	bic.w	r5, r5, #3
 800cf64:	3508      	adds	r5, #8
 800cf66:	2d0c      	cmp	r5, #12
 800cf68:	bf38      	it	cc
 800cf6a:	250c      	movcc	r5, #12
 800cf6c:	2d00      	cmp	r5, #0
 800cf6e:	4606      	mov	r6, r0
 800cf70:	db01      	blt.n	800cf76 <_malloc_r+0x1a>
 800cf72:	42a9      	cmp	r1, r5
 800cf74:	d903      	bls.n	800cf7e <_malloc_r+0x22>
 800cf76:	230c      	movs	r3, #12
 800cf78:	6033      	str	r3, [r6, #0]
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf7e:	f000 fc19 	bl	800d7b4 <__malloc_lock>
 800cf82:	4921      	ldr	r1, [pc, #132]	; (800d008 <_malloc_r+0xac>)
 800cf84:	680a      	ldr	r2, [r1, #0]
 800cf86:	4614      	mov	r4, r2
 800cf88:	b99c      	cbnz	r4, 800cfb2 <_malloc_r+0x56>
 800cf8a:	4f20      	ldr	r7, [pc, #128]	; (800d00c <_malloc_r+0xb0>)
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	b923      	cbnz	r3, 800cf9a <_malloc_r+0x3e>
 800cf90:	4621      	mov	r1, r4
 800cf92:	4630      	mov	r0, r6
 800cf94:	f000 fafc 	bl	800d590 <_sbrk_r>
 800cf98:	6038      	str	r0, [r7, #0]
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f000 faf7 	bl	800d590 <_sbrk_r>
 800cfa2:	1c43      	adds	r3, r0, #1
 800cfa4:	d123      	bne.n	800cfee <_malloc_r+0x92>
 800cfa6:	230c      	movs	r3, #12
 800cfa8:	6033      	str	r3, [r6, #0]
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f000 fc08 	bl	800d7c0 <__malloc_unlock>
 800cfb0:	e7e3      	b.n	800cf7a <_malloc_r+0x1e>
 800cfb2:	6823      	ldr	r3, [r4, #0]
 800cfb4:	1b5b      	subs	r3, r3, r5
 800cfb6:	d417      	bmi.n	800cfe8 <_malloc_r+0x8c>
 800cfb8:	2b0b      	cmp	r3, #11
 800cfba:	d903      	bls.n	800cfc4 <_malloc_r+0x68>
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	441c      	add	r4, r3
 800cfc0:	6025      	str	r5, [r4, #0]
 800cfc2:	e004      	b.n	800cfce <_malloc_r+0x72>
 800cfc4:	6863      	ldr	r3, [r4, #4]
 800cfc6:	42a2      	cmp	r2, r4
 800cfc8:	bf0c      	ite	eq
 800cfca:	600b      	streq	r3, [r1, #0]
 800cfcc:	6053      	strne	r3, [r2, #4]
 800cfce:	4630      	mov	r0, r6
 800cfd0:	f000 fbf6 	bl	800d7c0 <__malloc_unlock>
 800cfd4:	f104 000b 	add.w	r0, r4, #11
 800cfd8:	1d23      	adds	r3, r4, #4
 800cfda:	f020 0007 	bic.w	r0, r0, #7
 800cfde:	1ac2      	subs	r2, r0, r3
 800cfe0:	d0cc      	beq.n	800cf7c <_malloc_r+0x20>
 800cfe2:	1a1b      	subs	r3, r3, r0
 800cfe4:	50a3      	str	r3, [r4, r2]
 800cfe6:	e7c9      	b.n	800cf7c <_malloc_r+0x20>
 800cfe8:	4622      	mov	r2, r4
 800cfea:	6864      	ldr	r4, [r4, #4]
 800cfec:	e7cc      	b.n	800cf88 <_malloc_r+0x2c>
 800cfee:	1cc4      	adds	r4, r0, #3
 800cff0:	f024 0403 	bic.w	r4, r4, #3
 800cff4:	42a0      	cmp	r0, r4
 800cff6:	d0e3      	beq.n	800cfc0 <_malloc_r+0x64>
 800cff8:	1a21      	subs	r1, r4, r0
 800cffa:	4630      	mov	r0, r6
 800cffc:	f000 fac8 	bl	800d590 <_sbrk_r>
 800d000:	3001      	adds	r0, #1
 800d002:	d1dd      	bne.n	800cfc0 <_malloc_r+0x64>
 800d004:	e7cf      	b.n	800cfa6 <_malloc_r+0x4a>
 800d006:	bf00      	nop
 800d008:	20000200 	.word	0x20000200
 800d00c:	20000204 	.word	0x20000204

0800d010 <__ssputs_r>:
 800d010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d014:	688e      	ldr	r6, [r1, #8]
 800d016:	429e      	cmp	r6, r3
 800d018:	4682      	mov	sl, r0
 800d01a:	460c      	mov	r4, r1
 800d01c:	4690      	mov	r8, r2
 800d01e:	461f      	mov	r7, r3
 800d020:	d838      	bhi.n	800d094 <__ssputs_r+0x84>
 800d022:	898a      	ldrh	r2, [r1, #12]
 800d024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d028:	d032      	beq.n	800d090 <__ssputs_r+0x80>
 800d02a:	6825      	ldr	r5, [r4, #0]
 800d02c:	6909      	ldr	r1, [r1, #16]
 800d02e:	eba5 0901 	sub.w	r9, r5, r1
 800d032:	6965      	ldr	r5, [r4, #20]
 800d034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d03c:	3301      	adds	r3, #1
 800d03e:	444b      	add	r3, r9
 800d040:	106d      	asrs	r5, r5, #1
 800d042:	429d      	cmp	r5, r3
 800d044:	bf38      	it	cc
 800d046:	461d      	movcc	r5, r3
 800d048:	0553      	lsls	r3, r2, #21
 800d04a:	d531      	bpl.n	800d0b0 <__ssputs_r+0xa0>
 800d04c:	4629      	mov	r1, r5
 800d04e:	f7ff ff85 	bl	800cf5c <_malloc_r>
 800d052:	4606      	mov	r6, r0
 800d054:	b950      	cbnz	r0, 800d06c <__ssputs_r+0x5c>
 800d056:	230c      	movs	r3, #12
 800d058:	f8ca 3000 	str.w	r3, [sl]
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d062:	81a3      	strh	r3, [r4, #12]
 800d064:	f04f 30ff 	mov.w	r0, #4294967295
 800d068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06c:	6921      	ldr	r1, [r4, #16]
 800d06e:	464a      	mov	r2, r9
 800d070:	f7fb ff7c 	bl	8008f6c <memcpy>
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d07e:	81a3      	strh	r3, [r4, #12]
 800d080:	6126      	str	r6, [r4, #16]
 800d082:	6165      	str	r5, [r4, #20]
 800d084:	444e      	add	r6, r9
 800d086:	eba5 0509 	sub.w	r5, r5, r9
 800d08a:	6026      	str	r6, [r4, #0]
 800d08c:	60a5      	str	r5, [r4, #8]
 800d08e:	463e      	mov	r6, r7
 800d090:	42be      	cmp	r6, r7
 800d092:	d900      	bls.n	800d096 <__ssputs_r+0x86>
 800d094:	463e      	mov	r6, r7
 800d096:	4632      	mov	r2, r6
 800d098:	6820      	ldr	r0, [r4, #0]
 800d09a:	4641      	mov	r1, r8
 800d09c:	f000 fb70 	bl	800d780 <memmove>
 800d0a0:	68a3      	ldr	r3, [r4, #8]
 800d0a2:	6822      	ldr	r2, [r4, #0]
 800d0a4:	1b9b      	subs	r3, r3, r6
 800d0a6:	4432      	add	r2, r6
 800d0a8:	60a3      	str	r3, [r4, #8]
 800d0aa:	6022      	str	r2, [r4, #0]
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	e7db      	b.n	800d068 <__ssputs_r+0x58>
 800d0b0:	462a      	mov	r2, r5
 800d0b2:	f000 fb8b 	bl	800d7cc <_realloc_r>
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d1e1      	bne.n	800d080 <__ssputs_r+0x70>
 800d0bc:	6921      	ldr	r1, [r4, #16]
 800d0be:	4650      	mov	r0, sl
 800d0c0:	f7ff fefc 	bl	800cebc <_free_r>
 800d0c4:	e7c7      	b.n	800d056 <__ssputs_r+0x46>
	...

0800d0c8 <_svfiprintf_r>:
 800d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	4698      	mov	r8, r3
 800d0ce:	898b      	ldrh	r3, [r1, #12]
 800d0d0:	061b      	lsls	r3, r3, #24
 800d0d2:	b09d      	sub	sp, #116	; 0x74
 800d0d4:	4607      	mov	r7, r0
 800d0d6:	460d      	mov	r5, r1
 800d0d8:	4614      	mov	r4, r2
 800d0da:	d50e      	bpl.n	800d0fa <_svfiprintf_r+0x32>
 800d0dc:	690b      	ldr	r3, [r1, #16]
 800d0de:	b963      	cbnz	r3, 800d0fa <_svfiprintf_r+0x32>
 800d0e0:	2140      	movs	r1, #64	; 0x40
 800d0e2:	f7ff ff3b 	bl	800cf5c <_malloc_r>
 800d0e6:	6028      	str	r0, [r5, #0]
 800d0e8:	6128      	str	r0, [r5, #16]
 800d0ea:	b920      	cbnz	r0, 800d0f6 <_svfiprintf_r+0x2e>
 800d0ec:	230c      	movs	r3, #12
 800d0ee:	603b      	str	r3, [r7, #0]
 800d0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f4:	e0d1      	b.n	800d29a <_svfiprintf_r+0x1d2>
 800d0f6:	2340      	movs	r3, #64	; 0x40
 800d0f8:	616b      	str	r3, [r5, #20]
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d0fe:	2320      	movs	r3, #32
 800d100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d104:	f8cd 800c 	str.w	r8, [sp, #12]
 800d108:	2330      	movs	r3, #48	; 0x30
 800d10a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d2b4 <_svfiprintf_r+0x1ec>
 800d10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d112:	f04f 0901 	mov.w	r9, #1
 800d116:	4623      	mov	r3, r4
 800d118:	469a      	mov	sl, r3
 800d11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d11e:	b10a      	cbz	r2, 800d124 <_svfiprintf_r+0x5c>
 800d120:	2a25      	cmp	r2, #37	; 0x25
 800d122:	d1f9      	bne.n	800d118 <_svfiprintf_r+0x50>
 800d124:	ebba 0b04 	subs.w	fp, sl, r4
 800d128:	d00b      	beq.n	800d142 <_svfiprintf_r+0x7a>
 800d12a:	465b      	mov	r3, fp
 800d12c:	4622      	mov	r2, r4
 800d12e:	4629      	mov	r1, r5
 800d130:	4638      	mov	r0, r7
 800d132:	f7ff ff6d 	bl	800d010 <__ssputs_r>
 800d136:	3001      	adds	r0, #1
 800d138:	f000 80aa 	beq.w	800d290 <_svfiprintf_r+0x1c8>
 800d13c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d13e:	445a      	add	r2, fp
 800d140:	9209      	str	r2, [sp, #36]	; 0x24
 800d142:	f89a 3000 	ldrb.w	r3, [sl]
 800d146:	2b00      	cmp	r3, #0
 800d148:	f000 80a2 	beq.w	800d290 <_svfiprintf_r+0x1c8>
 800d14c:	2300      	movs	r3, #0
 800d14e:	f04f 32ff 	mov.w	r2, #4294967295
 800d152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d156:	f10a 0a01 	add.w	sl, sl, #1
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	9307      	str	r3, [sp, #28]
 800d15e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d162:	931a      	str	r3, [sp, #104]	; 0x68
 800d164:	4654      	mov	r4, sl
 800d166:	2205      	movs	r2, #5
 800d168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d16c:	4851      	ldr	r0, [pc, #324]	; (800d2b4 <_svfiprintf_r+0x1ec>)
 800d16e:	f7f3 f837 	bl	80001e0 <memchr>
 800d172:	9a04      	ldr	r2, [sp, #16]
 800d174:	b9d8      	cbnz	r0, 800d1ae <_svfiprintf_r+0xe6>
 800d176:	06d0      	lsls	r0, r2, #27
 800d178:	bf44      	itt	mi
 800d17a:	2320      	movmi	r3, #32
 800d17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d180:	0711      	lsls	r1, r2, #28
 800d182:	bf44      	itt	mi
 800d184:	232b      	movmi	r3, #43	; 0x2b
 800d186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d18a:	f89a 3000 	ldrb.w	r3, [sl]
 800d18e:	2b2a      	cmp	r3, #42	; 0x2a
 800d190:	d015      	beq.n	800d1be <_svfiprintf_r+0xf6>
 800d192:	9a07      	ldr	r2, [sp, #28]
 800d194:	4654      	mov	r4, sl
 800d196:	2000      	movs	r0, #0
 800d198:	f04f 0c0a 	mov.w	ip, #10
 800d19c:	4621      	mov	r1, r4
 800d19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1a2:	3b30      	subs	r3, #48	; 0x30
 800d1a4:	2b09      	cmp	r3, #9
 800d1a6:	d94e      	bls.n	800d246 <_svfiprintf_r+0x17e>
 800d1a8:	b1b0      	cbz	r0, 800d1d8 <_svfiprintf_r+0x110>
 800d1aa:	9207      	str	r2, [sp, #28]
 800d1ac:	e014      	b.n	800d1d8 <_svfiprintf_r+0x110>
 800d1ae:	eba0 0308 	sub.w	r3, r0, r8
 800d1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	9304      	str	r3, [sp, #16]
 800d1ba:	46a2      	mov	sl, r4
 800d1bc:	e7d2      	b.n	800d164 <_svfiprintf_r+0x9c>
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	1d19      	adds	r1, r3, #4
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	9103      	str	r1, [sp, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	bfbb      	ittet	lt
 800d1ca:	425b      	neglt	r3, r3
 800d1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d1d0:	9307      	strge	r3, [sp, #28]
 800d1d2:	9307      	strlt	r3, [sp, #28]
 800d1d4:	bfb8      	it	lt
 800d1d6:	9204      	strlt	r2, [sp, #16]
 800d1d8:	7823      	ldrb	r3, [r4, #0]
 800d1da:	2b2e      	cmp	r3, #46	; 0x2e
 800d1dc:	d10c      	bne.n	800d1f8 <_svfiprintf_r+0x130>
 800d1de:	7863      	ldrb	r3, [r4, #1]
 800d1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d1e2:	d135      	bne.n	800d250 <_svfiprintf_r+0x188>
 800d1e4:	9b03      	ldr	r3, [sp, #12]
 800d1e6:	1d1a      	adds	r2, r3, #4
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	9203      	str	r2, [sp, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	bfb8      	it	lt
 800d1f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1f4:	3402      	adds	r4, #2
 800d1f6:	9305      	str	r3, [sp, #20]
 800d1f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d2c4 <_svfiprintf_r+0x1fc>
 800d1fc:	7821      	ldrb	r1, [r4, #0]
 800d1fe:	2203      	movs	r2, #3
 800d200:	4650      	mov	r0, sl
 800d202:	f7f2 ffed 	bl	80001e0 <memchr>
 800d206:	b140      	cbz	r0, 800d21a <_svfiprintf_r+0x152>
 800d208:	2340      	movs	r3, #64	; 0x40
 800d20a:	eba0 000a 	sub.w	r0, r0, sl
 800d20e:	fa03 f000 	lsl.w	r0, r3, r0
 800d212:	9b04      	ldr	r3, [sp, #16]
 800d214:	4303      	orrs	r3, r0
 800d216:	3401      	adds	r4, #1
 800d218:	9304      	str	r3, [sp, #16]
 800d21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d21e:	4826      	ldr	r0, [pc, #152]	; (800d2b8 <_svfiprintf_r+0x1f0>)
 800d220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d224:	2206      	movs	r2, #6
 800d226:	f7f2 ffdb 	bl	80001e0 <memchr>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d038      	beq.n	800d2a0 <_svfiprintf_r+0x1d8>
 800d22e:	4b23      	ldr	r3, [pc, #140]	; (800d2bc <_svfiprintf_r+0x1f4>)
 800d230:	bb1b      	cbnz	r3, 800d27a <_svfiprintf_r+0x1b2>
 800d232:	9b03      	ldr	r3, [sp, #12]
 800d234:	3307      	adds	r3, #7
 800d236:	f023 0307 	bic.w	r3, r3, #7
 800d23a:	3308      	adds	r3, #8
 800d23c:	9303      	str	r3, [sp, #12]
 800d23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d240:	4433      	add	r3, r6
 800d242:	9309      	str	r3, [sp, #36]	; 0x24
 800d244:	e767      	b.n	800d116 <_svfiprintf_r+0x4e>
 800d246:	fb0c 3202 	mla	r2, ip, r2, r3
 800d24a:	460c      	mov	r4, r1
 800d24c:	2001      	movs	r0, #1
 800d24e:	e7a5      	b.n	800d19c <_svfiprintf_r+0xd4>
 800d250:	2300      	movs	r3, #0
 800d252:	3401      	adds	r4, #1
 800d254:	9305      	str	r3, [sp, #20]
 800d256:	4619      	mov	r1, r3
 800d258:	f04f 0c0a 	mov.w	ip, #10
 800d25c:	4620      	mov	r0, r4
 800d25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d262:	3a30      	subs	r2, #48	; 0x30
 800d264:	2a09      	cmp	r2, #9
 800d266:	d903      	bls.n	800d270 <_svfiprintf_r+0x1a8>
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d0c5      	beq.n	800d1f8 <_svfiprintf_r+0x130>
 800d26c:	9105      	str	r1, [sp, #20]
 800d26e:	e7c3      	b.n	800d1f8 <_svfiprintf_r+0x130>
 800d270:	fb0c 2101 	mla	r1, ip, r1, r2
 800d274:	4604      	mov	r4, r0
 800d276:	2301      	movs	r3, #1
 800d278:	e7f0      	b.n	800d25c <_svfiprintf_r+0x194>
 800d27a:	ab03      	add	r3, sp, #12
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	462a      	mov	r2, r5
 800d280:	4b0f      	ldr	r3, [pc, #60]	; (800d2c0 <_svfiprintf_r+0x1f8>)
 800d282:	a904      	add	r1, sp, #16
 800d284:	4638      	mov	r0, r7
 800d286:	f7fb ff27 	bl	80090d8 <_printf_float>
 800d28a:	1c42      	adds	r2, r0, #1
 800d28c:	4606      	mov	r6, r0
 800d28e:	d1d6      	bne.n	800d23e <_svfiprintf_r+0x176>
 800d290:	89ab      	ldrh	r3, [r5, #12]
 800d292:	065b      	lsls	r3, r3, #25
 800d294:	f53f af2c 	bmi.w	800d0f0 <_svfiprintf_r+0x28>
 800d298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d29a:	b01d      	add	sp, #116	; 0x74
 800d29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a0:	ab03      	add	r3, sp, #12
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	462a      	mov	r2, r5
 800d2a6:	4b06      	ldr	r3, [pc, #24]	; (800d2c0 <_svfiprintf_r+0x1f8>)
 800d2a8:	a904      	add	r1, sp, #16
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	f7fc f9b8 	bl	8009620 <_printf_i>
 800d2b0:	e7eb      	b.n	800d28a <_svfiprintf_r+0x1c2>
 800d2b2:	bf00      	nop
 800d2b4:	0800e00c 	.word	0x0800e00c
 800d2b8:	0800e016 	.word	0x0800e016
 800d2bc:	080090d9 	.word	0x080090d9
 800d2c0:	0800d011 	.word	0x0800d011
 800d2c4:	0800e012 	.word	0x0800e012

0800d2c8 <__sfputc_r>:
 800d2c8:	6893      	ldr	r3, [r2, #8]
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	b410      	push	{r4}
 800d2d0:	6093      	str	r3, [r2, #8]
 800d2d2:	da08      	bge.n	800d2e6 <__sfputc_r+0x1e>
 800d2d4:	6994      	ldr	r4, [r2, #24]
 800d2d6:	42a3      	cmp	r3, r4
 800d2d8:	db01      	blt.n	800d2de <__sfputc_r+0x16>
 800d2da:	290a      	cmp	r1, #10
 800d2dc:	d103      	bne.n	800d2e6 <__sfputc_r+0x1e>
 800d2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2e2:	f7fd bc3b 	b.w	800ab5c <__swbuf_r>
 800d2e6:	6813      	ldr	r3, [r2, #0]
 800d2e8:	1c58      	adds	r0, r3, #1
 800d2ea:	6010      	str	r0, [r2, #0]
 800d2ec:	7019      	strb	r1, [r3, #0]
 800d2ee:	4608      	mov	r0, r1
 800d2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2f4:	4770      	bx	lr

0800d2f6 <__sfputs_r>:
 800d2f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f8:	4606      	mov	r6, r0
 800d2fa:	460f      	mov	r7, r1
 800d2fc:	4614      	mov	r4, r2
 800d2fe:	18d5      	adds	r5, r2, r3
 800d300:	42ac      	cmp	r4, r5
 800d302:	d101      	bne.n	800d308 <__sfputs_r+0x12>
 800d304:	2000      	movs	r0, #0
 800d306:	e007      	b.n	800d318 <__sfputs_r+0x22>
 800d308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30c:	463a      	mov	r2, r7
 800d30e:	4630      	mov	r0, r6
 800d310:	f7ff ffda 	bl	800d2c8 <__sfputc_r>
 800d314:	1c43      	adds	r3, r0, #1
 800d316:	d1f3      	bne.n	800d300 <__sfputs_r+0xa>
 800d318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d31c <_vfiprintf_r>:
 800d31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d320:	460d      	mov	r5, r1
 800d322:	b09d      	sub	sp, #116	; 0x74
 800d324:	4614      	mov	r4, r2
 800d326:	4698      	mov	r8, r3
 800d328:	4606      	mov	r6, r0
 800d32a:	b118      	cbz	r0, 800d334 <_vfiprintf_r+0x18>
 800d32c:	6983      	ldr	r3, [r0, #24]
 800d32e:	b90b      	cbnz	r3, 800d334 <_vfiprintf_r+0x18>
 800d330:	f7fe fc68 	bl	800bc04 <__sinit>
 800d334:	4b89      	ldr	r3, [pc, #548]	; (800d55c <_vfiprintf_r+0x240>)
 800d336:	429d      	cmp	r5, r3
 800d338:	d11b      	bne.n	800d372 <_vfiprintf_r+0x56>
 800d33a:	6875      	ldr	r5, [r6, #4]
 800d33c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d33e:	07d9      	lsls	r1, r3, #31
 800d340:	d405      	bmi.n	800d34e <_vfiprintf_r+0x32>
 800d342:	89ab      	ldrh	r3, [r5, #12]
 800d344:	059a      	lsls	r2, r3, #22
 800d346:	d402      	bmi.n	800d34e <_vfiprintf_r+0x32>
 800d348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d34a:	f7ff f86c 	bl	800c426 <__retarget_lock_acquire_recursive>
 800d34e:	89ab      	ldrh	r3, [r5, #12]
 800d350:	071b      	lsls	r3, r3, #28
 800d352:	d501      	bpl.n	800d358 <_vfiprintf_r+0x3c>
 800d354:	692b      	ldr	r3, [r5, #16]
 800d356:	b9eb      	cbnz	r3, 800d394 <_vfiprintf_r+0x78>
 800d358:	4629      	mov	r1, r5
 800d35a:	4630      	mov	r0, r6
 800d35c:	f7fd fc50 	bl	800ac00 <__swsetup_r>
 800d360:	b1c0      	cbz	r0, 800d394 <_vfiprintf_r+0x78>
 800d362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d364:	07dc      	lsls	r4, r3, #31
 800d366:	d50e      	bpl.n	800d386 <_vfiprintf_r+0x6a>
 800d368:	f04f 30ff 	mov.w	r0, #4294967295
 800d36c:	b01d      	add	sp, #116	; 0x74
 800d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d372:	4b7b      	ldr	r3, [pc, #492]	; (800d560 <_vfiprintf_r+0x244>)
 800d374:	429d      	cmp	r5, r3
 800d376:	d101      	bne.n	800d37c <_vfiprintf_r+0x60>
 800d378:	68b5      	ldr	r5, [r6, #8]
 800d37a:	e7df      	b.n	800d33c <_vfiprintf_r+0x20>
 800d37c:	4b79      	ldr	r3, [pc, #484]	; (800d564 <_vfiprintf_r+0x248>)
 800d37e:	429d      	cmp	r5, r3
 800d380:	bf08      	it	eq
 800d382:	68f5      	ldreq	r5, [r6, #12]
 800d384:	e7da      	b.n	800d33c <_vfiprintf_r+0x20>
 800d386:	89ab      	ldrh	r3, [r5, #12]
 800d388:	0598      	lsls	r0, r3, #22
 800d38a:	d4ed      	bmi.n	800d368 <_vfiprintf_r+0x4c>
 800d38c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d38e:	f7ff f84b 	bl	800c428 <__retarget_lock_release_recursive>
 800d392:	e7e9      	b.n	800d368 <_vfiprintf_r+0x4c>
 800d394:	2300      	movs	r3, #0
 800d396:	9309      	str	r3, [sp, #36]	; 0x24
 800d398:	2320      	movs	r3, #32
 800d39a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d39e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3a2:	2330      	movs	r3, #48	; 0x30
 800d3a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d568 <_vfiprintf_r+0x24c>
 800d3a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3ac:	f04f 0901 	mov.w	r9, #1
 800d3b0:	4623      	mov	r3, r4
 800d3b2:	469a      	mov	sl, r3
 800d3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3b8:	b10a      	cbz	r2, 800d3be <_vfiprintf_r+0xa2>
 800d3ba:	2a25      	cmp	r2, #37	; 0x25
 800d3bc:	d1f9      	bne.n	800d3b2 <_vfiprintf_r+0x96>
 800d3be:	ebba 0b04 	subs.w	fp, sl, r4
 800d3c2:	d00b      	beq.n	800d3dc <_vfiprintf_r+0xc0>
 800d3c4:	465b      	mov	r3, fp
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	4629      	mov	r1, r5
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	f7ff ff93 	bl	800d2f6 <__sfputs_r>
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	f000 80aa 	beq.w	800d52a <_vfiprintf_r+0x20e>
 800d3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3d8:	445a      	add	r2, fp
 800d3da:	9209      	str	r2, [sp, #36]	; 0x24
 800d3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f000 80a2 	beq.w	800d52a <_vfiprintf_r+0x20e>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3f0:	f10a 0a01 	add.w	sl, sl, #1
 800d3f4:	9304      	str	r3, [sp, #16]
 800d3f6:	9307      	str	r3, [sp, #28]
 800d3f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3fc:	931a      	str	r3, [sp, #104]	; 0x68
 800d3fe:	4654      	mov	r4, sl
 800d400:	2205      	movs	r2, #5
 800d402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d406:	4858      	ldr	r0, [pc, #352]	; (800d568 <_vfiprintf_r+0x24c>)
 800d408:	f7f2 feea 	bl	80001e0 <memchr>
 800d40c:	9a04      	ldr	r2, [sp, #16]
 800d40e:	b9d8      	cbnz	r0, 800d448 <_vfiprintf_r+0x12c>
 800d410:	06d1      	lsls	r1, r2, #27
 800d412:	bf44      	itt	mi
 800d414:	2320      	movmi	r3, #32
 800d416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d41a:	0713      	lsls	r3, r2, #28
 800d41c:	bf44      	itt	mi
 800d41e:	232b      	movmi	r3, #43	; 0x2b
 800d420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d424:	f89a 3000 	ldrb.w	r3, [sl]
 800d428:	2b2a      	cmp	r3, #42	; 0x2a
 800d42a:	d015      	beq.n	800d458 <_vfiprintf_r+0x13c>
 800d42c:	9a07      	ldr	r2, [sp, #28]
 800d42e:	4654      	mov	r4, sl
 800d430:	2000      	movs	r0, #0
 800d432:	f04f 0c0a 	mov.w	ip, #10
 800d436:	4621      	mov	r1, r4
 800d438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d43c:	3b30      	subs	r3, #48	; 0x30
 800d43e:	2b09      	cmp	r3, #9
 800d440:	d94e      	bls.n	800d4e0 <_vfiprintf_r+0x1c4>
 800d442:	b1b0      	cbz	r0, 800d472 <_vfiprintf_r+0x156>
 800d444:	9207      	str	r2, [sp, #28]
 800d446:	e014      	b.n	800d472 <_vfiprintf_r+0x156>
 800d448:	eba0 0308 	sub.w	r3, r0, r8
 800d44c:	fa09 f303 	lsl.w	r3, r9, r3
 800d450:	4313      	orrs	r3, r2
 800d452:	9304      	str	r3, [sp, #16]
 800d454:	46a2      	mov	sl, r4
 800d456:	e7d2      	b.n	800d3fe <_vfiprintf_r+0xe2>
 800d458:	9b03      	ldr	r3, [sp, #12]
 800d45a:	1d19      	adds	r1, r3, #4
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	9103      	str	r1, [sp, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	bfbb      	ittet	lt
 800d464:	425b      	neglt	r3, r3
 800d466:	f042 0202 	orrlt.w	r2, r2, #2
 800d46a:	9307      	strge	r3, [sp, #28]
 800d46c:	9307      	strlt	r3, [sp, #28]
 800d46e:	bfb8      	it	lt
 800d470:	9204      	strlt	r2, [sp, #16]
 800d472:	7823      	ldrb	r3, [r4, #0]
 800d474:	2b2e      	cmp	r3, #46	; 0x2e
 800d476:	d10c      	bne.n	800d492 <_vfiprintf_r+0x176>
 800d478:	7863      	ldrb	r3, [r4, #1]
 800d47a:	2b2a      	cmp	r3, #42	; 0x2a
 800d47c:	d135      	bne.n	800d4ea <_vfiprintf_r+0x1ce>
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	1d1a      	adds	r2, r3, #4
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	9203      	str	r2, [sp, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	bfb8      	it	lt
 800d48a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d48e:	3402      	adds	r4, #2
 800d490:	9305      	str	r3, [sp, #20]
 800d492:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d578 <_vfiprintf_r+0x25c>
 800d496:	7821      	ldrb	r1, [r4, #0]
 800d498:	2203      	movs	r2, #3
 800d49a:	4650      	mov	r0, sl
 800d49c:	f7f2 fea0 	bl	80001e0 <memchr>
 800d4a0:	b140      	cbz	r0, 800d4b4 <_vfiprintf_r+0x198>
 800d4a2:	2340      	movs	r3, #64	; 0x40
 800d4a4:	eba0 000a 	sub.w	r0, r0, sl
 800d4a8:	fa03 f000 	lsl.w	r0, r3, r0
 800d4ac:	9b04      	ldr	r3, [sp, #16]
 800d4ae:	4303      	orrs	r3, r0
 800d4b0:	3401      	adds	r4, #1
 800d4b2:	9304      	str	r3, [sp, #16]
 800d4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b8:	482c      	ldr	r0, [pc, #176]	; (800d56c <_vfiprintf_r+0x250>)
 800d4ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4be:	2206      	movs	r2, #6
 800d4c0:	f7f2 fe8e 	bl	80001e0 <memchr>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	d03f      	beq.n	800d548 <_vfiprintf_r+0x22c>
 800d4c8:	4b29      	ldr	r3, [pc, #164]	; (800d570 <_vfiprintf_r+0x254>)
 800d4ca:	bb1b      	cbnz	r3, 800d514 <_vfiprintf_r+0x1f8>
 800d4cc:	9b03      	ldr	r3, [sp, #12]
 800d4ce:	3307      	adds	r3, #7
 800d4d0:	f023 0307 	bic.w	r3, r3, #7
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	9303      	str	r3, [sp, #12]
 800d4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4da:	443b      	add	r3, r7
 800d4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d4de:	e767      	b.n	800d3b0 <_vfiprintf_r+0x94>
 800d4e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4e4:	460c      	mov	r4, r1
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	e7a5      	b.n	800d436 <_vfiprintf_r+0x11a>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	3401      	adds	r4, #1
 800d4ee:	9305      	str	r3, [sp, #20]
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	f04f 0c0a 	mov.w	ip, #10
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4fc:	3a30      	subs	r2, #48	; 0x30
 800d4fe:	2a09      	cmp	r2, #9
 800d500:	d903      	bls.n	800d50a <_vfiprintf_r+0x1ee>
 800d502:	2b00      	cmp	r3, #0
 800d504:	d0c5      	beq.n	800d492 <_vfiprintf_r+0x176>
 800d506:	9105      	str	r1, [sp, #20]
 800d508:	e7c3      	b.n	800d492 <_vfiprintf_r+0x176>
 800d50a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d50e:	4604      	mov	r4, r0
 800d510:	2301      	movs	r3, #1
 800d512:	e7f0      	b.n	800d4f6 <_vfiprintf_r+0x1da>
 800d514:	ab03      	add	r3, sp, #12
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	462a      	mov	r2, r5
 800d51a:	4b16      	ldr	r3, [pc, #88]	; (800d574 <_vfiprintf_r+0x258>)
 800d51c:	a904      	add	r1, sp, #16
 800d51e:	4630      	mov	r0, r6
 800d520:	f7fb fdda 	bl	80090d8 <_printf_float>
 800d524:	4607      	mov	r7, r0
 800d526:	1c78      	adds	r0, r7, #1
 800d528:	d1d6      	bne.n	800d4d8 <_vfiprintf_r+0x1bc>
 800d52a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d52c:	07d9      	lsls	r1, r3, #31
 800d52e:	d405      	bmi.n	800d53c <_vfiprintf_r+0x220>
 800d530:	89ab      	ldrh	r3, [r5, #12]
 800d532:	059a      	lsls	r2, r3, #22
 800d534:	d402      	bmi.n	800d53c <_vfiprintf_r+0x220>
 800d536:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d538:	f7fe ff76 	bl	800c428 <__retarget_lock_release_recursive>
 800d53c:	89ab      	ldrh	r3, [r5, #12]
 800d53e:	065b      	lsls	r3, r3, #25
 800d540:	f53f af12 	bmi.w	800d368 <_vfiprintf_r+0x4c>
 800d544:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d546:	e711      	b.n	800d36c <_vfiprintf_r+0x50>
 800d548:	ab03      	add	r3, sp, #12
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	462a      	mov	r2, r5
 800d54e:	4b09      	ldr	r3, [pc, #36]	; (800d574 <_vfiprintf_r+0x258>)
 800d550:	a904      	add	r1, sp, #16
 800d552:	4630      	mov	r0, r6
 800d554:	f7fc f864 	bl	8009620 <_printf_i>
 800d558:	e7e4      	b.n	800d524 <_vfiprintf_r+0x208>
 800d55a:	bf00      	nop
 800d55c:	0800ddf0 	.word	0x0800ddf0
 800d560:	0800de10 	.word	0x0800de10
 800d564:	0800ddd0 	.word	0x0800ddd0
 800d568:	0800e00c 	.word	0x0800e00c
 800d56c:	0800e016 	.word	0x0800e016
 800d570:	080090d9 	.word	0x080090d9
 800d574:	0800d2f7 	.word	0x0800d2f7
 800d578:	0800e012 	.word	0x0800e012
 800d57c:	00000000 	.word	0x00000000

0800d580 <nan>:
 800d580:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d588 <nan+0x8>
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	00000000 	.word	0x00000000
 800d58c:	7ff80000 	.word	0x7ff80000

0800d590 <_sbrk_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4d06      	ldr	r5, [pc, #24]	; (800d5ac <_sbrk_r+0x1c>)
 800d594:	2300      	movs	r3, #0
 800d596:	4604      	mov	r4, r0
 800d598:	4608      	mov	r0, r1
 800d59a:	602b      	str	r3, [r5, #0]
 800d59c:	f7f6 fecc 	bl	8004338 <_sbrk>
 800d5a0:	1c43      	adds	r3, r0, #1
 800d5a2:	d102      	bne.n	800d5aa <_sbrk_r+0x1a>
 800d5a4:	682b      	ldr	r3, [r5, #0]
 800d5a6:	b103      	cbz	r3, 800d5aa <_sbrk_r+0x1a>
 800d5a8:	6023      	str	r3, [r4, #0]
 800d5aa:	bd38      	pop	{r3, r4, r5, pc}
 800d5ac:	200144cc 	.word	0x200144cc

0800d5b0 <__sread>:
 800d5b0:	b510      	push	{r4, lr}
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5b8:	f000 f92e 	bl	800d818 <_read_r>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	bfab      	itete	ge
 800d5c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5c2:	89a3      	ldrhlt	r3, [r4, #12]
 800d5c4:	181b      	addge	r3, r3, r0
 800d5c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5ca:	bfac      	ite	ge
 800d5cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5ce:	81a3      	strhlt	r3, [r4, #12]
 800d5d0:	bd10      	pop	{r4, pc}

0800d5d2 <__swrite>:
 800d5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d6:	461f      	mov	r7, r3
 800d5d8:	898b      	ldrh	r3, [r1, #12]
 800d5da:	05db      	lsls	r3, r3, #23
 800d5dc:	4605      	mov	r5, r0
 800d5de:	460c      	mov	r4, r1
 800d5e0:	4616      	mov	r6, r2
 800d5e2:	d505      	bpl.n	800d5f0 <__swrite+0x1e>
 800d5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e8:	2302      	movs	r3, #2
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f000 f8b6 	bl	800d75c <_lseek_r>
 800d5f0:	89a3      	ldrh	r3, [r4, #12]
 800d5f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5fa:	81a3      	strh	r3, [r4, #12]
 800d5fc:	4632      	mov	r2, r6
 800d5fe:	463b      	mov	r3, r7
 800d600:	4628      	mov	r0, r5
 800d602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d606:	f000 b835 	b.w	800d674 <_write_r>

0800d60a <__sseek>:
 800d60a:	b510      	push	{r4, lr}
 800d60c:	460c      	mov	r4, r1
 800d60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d612:	f000 f8a3 	bl	800d75c <_lseek_r>
 800d616:	1c43      	adds	r3, r0, #1
 800d618:	89a3      	ldrh	r3, [r4, #12]
 800d61a:	bf15      	itete	ne
 800d61c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d61e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d626:	81a3      	strheq	r3, [r4, #12]
 800d628:	bf18      	it	ne
 800d62a:	81a3      	strhne	r3, [r4, #12]
 800d62c:	bd10      	pop	{r4, pc}

0800d62e <__sclose>:
 800d62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d632:	f000 b84f 	b.w	800d6d4 <_close_r>

0800d636 <strncmp>:
 800d636:	b510      	push	{r4, lr}
 800d638:	b16a      	cbz	r2, 800d656 <strncmp+0x20>
 800d63a:	3901      	subs	r1, #1
 800d63c:	1884      	adds	r4, r0, r2
 800d63e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d642:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d646:	4293      	cmp	r3, r2
 800d648:	d103      	bne.n	800d652 <strncmp+0x1c>
 800d64a:	42a0      	cmp	r0, r4
 800d64c:	d001      	beq.n	800d652 <strncmp+0x1c>
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1f5      	bne.n	800d63e <strncmp+0x8>
 800d652:	1a98      	subs	r0, r3, r2
 800d654:	bd10      	pop	{r4, pc}
 800d656:	4610      	mov	r0, r2
 800d658:	e7fc      	b.n	800d654 <strncmp+0x1e>

0800d65a <__ascii_wctomb>:
 800d65a:	b149      	cbz	r1, 800d670 <__ascii_wctomb+0x16>
 800d65c:	2aff      	cmp	r2, #255	; 0xff
 800d65e:	bf85      	ittet	hi
 800d660:	238a      	movhi	r3, #138	; 0x8a
 800d662:	6003      	strhi	r3, [r0, #0]
 800d664:	700a      	strbls	r2, [r1, #0]
 800d666:	f04f 30ff 	movhi.w	r0, #4294967295
 800d66a:	bf98      	it	ls
 800d66c:	2001      	movls	r0, #1
 800d66e:	4770      	bx	lr
 800d670:	4608      	mov	r0, r1
 800d672:	4770      	bx	lr

0800d674 <_write_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	4d07      	ldr	r5, [pc, #28]	; (800d694 <_write_r+0x20>)
 800d678:	4604      	mov	r4, r0
 800d67a:	4608      	mov	r0, r1
 800d67c:	4611      	mov	r1, r2
 800d67e:	2200      	movs	r2, #0
 800d680:	602a      	str	r2, [r5, #0]
 800d682:	461a      	mov	r2, r3
 800d684:	f7f6 fe07 	bl	8004296 <_write>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	d102      	bne.n	800d692 <_write_r+0x1e>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	b103      	cbz	r3, 800d692 <_write_r+0x1e>
 800d690:	6023      	str	r3, [r4, #0]
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	200144cc 	.word	0x200144cc

0800d698 <__assert_func>:
 800d698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d69a:	4614      	mov	r4, r2
 800d69c:	461a      	mov	r2, r3
 800d69e:	4b09      	ldr	r3, [pc, #36]	; (800d6c4 <__assert_func+0x2c>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4605      	mov	r5, r0
 800d6a4:	68d8      	ldr	r0, [r3, #12]
 800d6a6:	b14c      	cbz	r4, 800d6bc <__assert_func+0x24>
 800d6a8:	4b07      	ldr	r3, [pc, #28]	; (800d6c8 <__assert_func+0x30>)
 800d6aa:	9100      	str	r1, [sp, #0]
 800d6ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6b0:	4906      	ldr	r1, [pc, #24]	; (800d6cc <__assert_func+0x34>)
 800d6b2:	462b      	mov	r3, r5
 800d6b4:	f000 f81e 	bl	800d6f4 <fiprintf>
 800d6b8:	f000 f8c0 	bl	800d83c <abort>
 800d6bc:	4b04      	ldr	r3, [pc, #16]	; (800d6d0 <__assert_func+0x38>)
 800d6be:	461c      	mov	r4, r3
 800d6c0:	e7f3      	b.n	800d6aa <__assert_func+0x12>
 800d6c2:	bf00      	nop
 800d6c4:	2000000c 	.word	0x2000000c
 800d6c8:	0800e01d 	.word	0x0800e01d
 800d6cc:	0800e02a 	.word	0x0800e02a
 800d6d0:	0800e058 	.word	0x0800e058

0800d6d4 <_close_r>:
 800d6d4:	b538      	push	{r3, r4, r5, lr}
 800d6d6:	4d06      	ldr	r5, [pc, #24]	; (800d6f0 <_close_r+0x1c>)
 800d6d8:	2300      	movs	r3, #0
 800d6da:	4604      	mov	r4, r0
 800d6dc:	4608      	mov	r0, r1
 800d6de:	602b      	str	r3, [r5, #0]
 800d6e0:	f7f6 fdf5 	bl	80042ce <_close>
 800d6e4:	1c43      	adds	r3, r0, #1
 800d6e6:	d102      	bne.n	800d6ee <_close_r+0x1a>
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	b103      	cbz	r3, 800d6ee <_close_r+0x1a>
 800d6ec:	6023      	str	r3, [r4, #0]
 800d6ee:	bd38      	pop	{r3, r4, r5, pc}
 800d6f0:	200144cc 	.word	0x200144cc

0800d6f4 <fiprintf>:
 800d6f4:	b40e      	push	{r1, r2, r3}
 800d6f6:	b503      	push	{r0, r1, lr}
 800d6f8:	4601      	mov	r1, r0
 800d6fa:	ab03      	add	r3, sp, #12
 800d6fc:	4805      	ldr	r0, [pc, #20]	; (800d714 <fiprintf+0x20>)
 800d6fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d702:	6800      	ldr	r0, [r0, #0]
 800d704:	9301      	str	r3, [sp, #4]
 800d706:	f7ff fe09 	bl	800d31c <_vfiprintf_r>
 800d70a:	b002      	add	sp, #8
 800d70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d710:	b003      	add	sp, #12
 800d712:	4770      	bx	lr
 800d714:	2000000c 	.word	0x2000000c

0800d718 <_fstat_r>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	4d07      	ldr	r5, [pc, #28]	; (800d738 <_fstat_r+0x20>)
 800d71c:	2300      	movs	r3, #0
 800d71e:	4604      	mov	r4, r0
 800d720:	4608      	mov	r0, r1
 800d722:	4611      	mov	r1, r2
 800d724:	602b      	str	r3, [r5, #0]
 800d726:	f7f6 fdde 	bl	80042e6 <_fstat>
 800d72a:	1c43      	adds	r3, r0, #1
 800d72c:	d102      	bne.n	800d734 <_fstat_r+0x1c>
 800d72e:	682b      	ldr	r3, [r5, #0]
 800d730:	b103      	cbz	r3, 800d734 <_fstat_r+0x1c>
 800d732:	6023      	str	r3, [r4, #0]
 800d734:	bd38      	pop	{r3, r4, r5, pc}
 800d736:	bf00      	nop
 800d738:	200144cc 	.word	0x200144cc

0800d73c <_isatty_r>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	4d06      	ldr	r5, [pc, #24]	; (800d758 <_isatty_r+0x1c>)
 800d740:	2300      	movs	r3, #0
 800d742:	4604      	mov	r4, r0
 800d744:	4608      	mov	r0, r1
 800d746:	602b      	str	r3, [r5, #0]
 800d748:	f7f6 fddd 	bl	8004306 <_isatty>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	d102      	bne.n	800d756 <_isatty_r+0x1a>
 800d750:	682b      	ldr	r3, [r5, #0]
 800d752:	b103      	cbz	r3, 800d756 <_isatty_r+0x1a>
 800d754:	6023      	str	r3, [r4, #0]
 800d756:	bd38      	pop	{r3, r4, r5, pc}
 800d758:	200144cc 	.word	0x200144cc

0800d75c <_lseek_r>:
 800d75c:	b538      	push	{r3, r4, r5, lr}
 800d75e:	4d07      	ldr	r5, [pc, #28]	; (800d77c <_lseek_r+0x20>)
 800d760:	4604      	mov	r4, r0
 800d762:	4608      	mov	r0, r1
 800d764:	4611      	mov	r1, r2
 800d766:	2200      	movs	r2, #0
 800d768:	602a      	str	r2, [r5, #0]
 800d76a:	461a      	mov	r2, r3
 800d76c:	f7f6 fdd6 	bl	800431c <_lseek>
 800d770:	1c43      	adds	r3, r0, #1
 800d772:	d102      	bne.n	800d77a <_lseek_r+0x1e>
 800d774:	682b      	ldr	r3, [r5, #0]
 800d776:	b103      	cbz	r3, 800d77a <_lseek_r+0x1e>
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	bd38      	pop	{r3, r4, r5, pc}
 800d77c:	200144cc 	.word	0x200144cc

0800d780 <memmove>:
 800d780:	4288      	cmp	r0, r1
 800d782:	b510      	push	{r4, lr}
 800d784:	eb01 0402 	add.w	r4, r1, r2
 800d788:	d902      	bls.n	800d790 <memmove+0x10>
 800d78a:	4284      	cmp	r4, r0
 800d78c:	4623      	mov	r3, r4
 800d78e:	d807      	bhi.n	800d7a0 <memmove+0x20>
 800d790:	1e43      	subs	r3, r0, #1
 800d792:	42a1      	cmp	r1, r4
 800d794:	d008      	beq.n	800d7a8 <memmove+0x28>
 800d796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d79a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d79e:	e7f8      	b.n	800d792 <memmove+0x12>
 800d7a0:	4402      	add	r2, r0
 800d7a2:	4601      	mov	r1, r0
 800d7a4:	428a      	cmp	r2, r1
 800d7a6:	d100      	bne.n	800d7aa <memmove+0x2a>
 800d7a8:	bd10      	pop	{r4, pc}
 800d7aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7b2:	e7f7      	b.n	800d7a4 <memmove+0x24>

0800d7b4 <__malloc_lock>:
 800d7b4:	4801      	ldr	r0, [pc, #4]	; (800d7bc <__malloc_lock+0x8>)
 800d7b6:	f7fe be36 	b.w	800c426 <__retarget_lock_acquire_recursive>
 800d7ba:	bf00      	nop
 800d7bc:	200144c4 	.word	0x200144c4

0800d7c0 <__malloc_unlock>:
 800d7c0:	4801      	ldr	r0, [pc, #4]	; (800d7c8 <__malloc_unlock+0x8>)
 800d7c2:	f7fe be31 	b.w	800c428 <__retarget_lock_release_recursive>
 800d7c6:	bf00      	nop
 800d7c8:	200144c4 	.word	0x200144c4

0800d7cc <_realloc_r>:
 800d7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ce:	4607      	mov	r7, r0
 800d7d0:	4614      	mov	r4, r2
 800d7d2:	460e      	mov	r6, r1
 800d7d4:	b921      	cbnz	r1, 800d7e0 <_realloc_r+0x14>
 800d7d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d7da:	4611      	mov	r1, r2
 800d7dc:	f7ff bbbe 	b.w	800cf5c <_malloc_r>
 800d7e0:	b922      	cbnz	r2, 800d7ec <_realloc_r+0x20>
 800d7e2:	f7ff fb6b 	bl	800cebc <_free_r>
 800d7e6:	4625      	mov	r5, r4
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ec:	f000 f82d 	bl	800d84a <_malloc_usable_size_r>
 800d7f0:	42a0      	cmp	r0, r4
 800d7f2:	d20f      	bcs.n	800d814 <_realloc_r+0x48>
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	4638      	mov	r0, r7
 800d7f8:	f7ff fbb0 	bl	800cf5c <_malloc_r>
 800d7fc:	4605      	mov	r5, r0
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d0f2      	beq.n	800d7e8 <_realloc_r+0x1c>
 800d802:	4631      	mov	r1, r6
 800d804:	4622      	mov	r2, r4
 800d806:	f7fb fbb1 	bl	8008f6c <memcpy>
 800d80a:	4631      	mov	r1, r6
 800d80c:	4638      	mov	r0, r7
 800d80e:	f7ff fb55 	bl	800cebc <_free_r>
 800d812:	e7e9      	b.n	800d7e8 <_realloc_r+0x1c>
 800d814:	4635      	mov	r5, r6
 800d816:	e7e7      	b.n	800d7e8 <_realloc_r+0x1c>

0800d818 <_read_r>:
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4d07      	ldr	r5, [pc, #28]	; (800d838 <_read_r+0x20>)
 800d81c:	4604      	mov	r4, r0
 800d81e:	4608      	mov	r0, r1
 800d820:	4611      	mov	r1, r2
 800d822:	2200      	movs	r2, #0
 800d824:	602a      	str	r2, [r5, #0]
 800d826:	461a      	mov	r2, r3
 800d828:	f7f6 fd18 	bl	800425c <_read>
 800d82c:	1c43      	adds	r3, r0, #1
 800d82e:	d102      	bne.n	800d836 <_read_r+0x1e>
 800d830:	682b      	ldr	r3, [r5, #0]
 800d832:	b103      	cbz	r3, 800d836 <_read_r+0x1e>
 800d834:	6023      	str	r3, [r4, #0]
 800d836:	bd38      	pop	{r3, r4, r5, pc}
 800d838:	200144cc 	.word	0x200144cc

0800d83c <abort>:
 800d83c:	b508      	push	{r3, lr}
 800d83e:	2006      	movs	r0, #6
 800d840:	f000 f834 	bl	800d8ac <raise>
 800d844:	2001      	movs	r0, #1
 800d846:	f7f6 fcff 	bl	8004248 <_exit>

0800d84a <_malloc_usable_size_r>:
 800d84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d84e:	1f18      	subs	r0, r3, #4
 800d850:	2b00      	cmp	r3, #0
 800d852:	bfbc      	itt	lt
 800d854:	580b      	ldrlt	r3, [r1, r0]
 800d856:	18c0      	addlt	r0, r0, r3
 800d858:	4770      	bx	lr

0800d85a <_raise_r>:
 800d85a:	291f      	cmp	r1, #31
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	4604      	mov	r4, r0
 800d860:	460d      	mov	r5, r1
 800d862:	d904      	bls.n	800d86e <_raise_r+0x14>
 800d864:	2316      	movs	r3, #22
 800d866:	6003      	str	r3, [r0, #0]
 800d868:	f04f 30ff 	mov.w	r0, #4294967295
 800d86c:	bd38      	pop	{r3, r4, r5, pc}
 800d86e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d870:	b112      	cbz	r2, 800d878 <_raise_r+0x1e>
 800d872:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d876:	b94b      	cbnz	r3, 800d88c <_raise_r+0x32>
 800d878:	4620      	mov	r0, r4
 800d87a:	f000 f831 	bl	800d8e0 <_getpid_r>
 800d87e:	462a      	mov	r2, r5
 800d880:	4601      	mov	r1, r0
 800d882:	4620      	mov	r0, r4
 800d884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d888:	f000 b818 	b.w	800d8bc <_kill_r>
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d00a      	beq.n	800d8a6 <_raise_r+0x4c>
 800d890:	1c59      	adds	r1, r3, #1
 800d892:	d103      	bne.n	800d89c <_raise_r+0x42>
 800d894:	2316      	movs	r3, #22
 800d896:	6003      	str	r3, [r0, #0]
 800d898:	2001      	movs	r0, #1
 800d89a:	e7e7      	b.n	800d86c <_raise_r+0x12>
 800d89c:	2400      	movs	r4, #0
 800d89e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	4798      	blx	r3
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	e7e0      	b.n	800d86c <_raise_r+0x12>
	...

0800d8ac <raise>:
 800d8ac:	4b02      	ldr	r3, [pc, #8]	; (800d8b8 <raise+0xc>)
 800d8ae:	4601      	mov	r1, r0
 800d8b0:	6818      	ldr	r0, [r3, #0]
 800d8b2:	f7ff bfd2 	b.w	800d85a <_raise_r>
 800d8b6:	bf00      	nop
 800d8b8:	2000000c 	.word	0x2000000c

0800d8bc <_kill_r>:
 800d8bc:	b538      	push	{r3, r4, r5, lr}
 800d8be:	4d07      	ldr	r5, [pc, #28]	; (800d8dc <_kill_r+0x20>)
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	4608      	mov	r0, r1
 800d8c6:	4611      	mov	r1, r2
 800d8c8:	602b      	str	r3, [r5, #0]
 800d8ca:	f7f6 fcad 	bl	8004228 <_kill>
 800d8ce:	1c43      	adds	r3, r0, #1
 800d8d0:	d102      	bne.n	800d8d8 <_kill_r+0x1c>
 800d8d2:	682b      	ldr	r3, [r5, #0]
 800d8d4:	b103      	cbz	r3, 800d8d8 <_kill_r+0x1c>
 800d8d6:	6023      	str	r3, [r4, #0]
 800d8d8:	bd38      	pop	{r3, r4, r5, pc}
 800d8da:	bf00      	nop
 800d8dc:	200144cc 	.word	0x200144cc

0800d8e0 <_getpid_r>:
 800d8e0:	f7f6 bc9a 	b.w	8004218 <_getpid>

0800d8e4 <_init>:
 800d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e6:	bf00      	nop
 800d8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ea:	bc08      	pop	{r3}
 800d8ec:	469e      	mov	lr, r3
 800d8ee:	4770      	bx	lr

0800d8f0 <_fini>:
 800d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f2:	bf00      	nop
 800d8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8f6:	bc08      	pop	{r3}
 800d8f8:	469e      	mov	lr, r3
 800d8fa:	4770      	bx	lr
