
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800ca68  0800ca68  0001ca68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfbc  0800cfbc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfbc  0800cfbc  0001cfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfc4  0800cfc4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfc4  0800cfc4  0001cfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfc8  0800cfc8  0001cfc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cfcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001e0  0800d1ac  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800d1ac  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000303e3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d2f  00000000  00000000  000505f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00055328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  000569f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026204  00000000  00000000  00057ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e016  00000000  00000000  0007e0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb2fd  00000000  00000000  0009c0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001673ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000724c  00000000  00000000  00167444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca4c 	.word	0x0800ca4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ca4c 	.word	0x0800ca4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <IMU_read_byte>:
volatile Inertial inertial_offset;

Coordinate COORDINATE_ZERO;

uint8_t IMU_read_byte( uint8_t reg )
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <IMU_read_byte+0x54>)
 8001008:	f004 f90a 	bl	8005220 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <IMU_read_byte+0x58>)
 8001016:	f004 ff2f 	bl	8005e78 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <IMU_read_byte+0x58>)
 8001024:	f005 f85c 	bl	80060e0 <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <IMU_read_byte+0x54>)
 8001030:	f004 f8f6 	bl	8005220 <HAL_GPIO_WritePin>
#endif

	return val;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	20000378 	.word	0x20000378

08001048 <IMU_write_byte>:

void IMU_write_byte( uint8_t reg, uint8_t val )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <IMU_write_byte+0x54>)
 800106a:	f004 f8d9 	bl	8005220 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2201      	movs	r2, #1
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <IMU_write_byte+0x58>)
 8001078:	f004 fefe 	bl	8005e78 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 800107c:	1db9      	adds	r1, r7, #6
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <IMU_write_byte+0x58>)
 8001084:	f004 fef8 	bl	8005e78 <HAL_SPI_Transmit>
#if USE_NCS
	CS_SET;
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <IMU_write_byte+0x54>)
 8001090:	f004 f8c6 	bl	8005220 <HAL_GPIO_WritePin>
#endif
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	20000378 	.word	0x20000378
 80010a4:	00000000 	.word	0x00000000

080010a8 <IMU_init>:

uint8_t IMU_init(uint8_t* wai)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	CS_RESET;
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	4834      	ldr	r0, [pc, #208]	; (8001188 <IMU_init+0xe0>)
 80010b8:	f004 f8b2 	bl	8005220 <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

	COORDINATE_ZERO.x = 0;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <IMU_init+0xe4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]
	COORDINATE_ZERO.y = 0;
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <IMU_init+0xe4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	805a      	strh	r2, [r3, #2]
	COORDINATE_ZERO.z = 0;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <IMU_init+0xe4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	809a      	strh	r2, [r3, #4]

	RADPERDEG = ((double) M_PI / (double) 180);
 80010d2:	492f      	ldr	r1, [pc, #188]	; (8001190 <IMU_init+0xe8>)
 80010d4:	a32a      	add	r3, pc, #168	; (adr r3, 8001180 <IMU_init+0xd8>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	e9c1 2300 	strd	r2, r3, [r1]

#if	INIT_ZERO
	inertial.accel = COORDINATE_ZERO;
 80010de:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <IMU_init+0xec>)
 80010e0:	4a2a      	ldr	r2, [pc, #168]	; (800118c <IMU_init+0xe4>)
 80010e2:	6811      	ldr	r1, [r2, #0]
 80010e4:	6019      	str	r1, [r3, #0]
 80010e6:	8892      	ldrh	r2, [r2, #4]
 80010e8:	809a      	strh	r2, [r3, #4]
	inertial.gyro = COORDINATE_ZERO;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <IMU_init+0xec>)
 80010ec:	4a27      	ldr	r2, [pc, #156]	; (800118c <IMU_init+0xe4>)
 80010ee:	3306      	adds	r3, #6
 80010f0:	6811      	ldr	r1, [r2, #0]
 80010f2:	6019      	str	r1, [r3, #0]
 80010f4:	8892      	ldrh	r2, [r2, #4]
 80010f6:	809a      	strh	r2, [r3, #4]
	displacement.position = COORDINATE_ZERO;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <IMU_init+0xf0>)
 80010fa:	4a24      	ldr	r2, [pc, #144]	; (800118c <IMU_init+0xe4>)
 80010fc:	6811      	ldr	r1, [r2, #0]
 80010fe:	6019      	str	r1, [r3, #0]
 8001100:	8892      	ldrh	r2, [r2, #4]
 8001102:	809a      	strh	r2, [r3, #4]
	displacement.theta = COORDINATE_ZERO;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <IMU_init+0xf0>)
 8001106:	4a21      	ldr	r2, [pc, #132]	; (800118c <IMU_init+0xe4>)
 8001108:	3306      	adds	r3, #6
 800110a:	6811      	ldr	r1, [r2, #0]
 800110c:	6019      	str	r1, [r3, #0]
 800110e:	8892      	ldrh	r2, [r2, #4]
 8001110:	809a      	strh	r2, [r3, #4]
#endif

	who_am_i = IMU_read_byte(0x00);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff ff6a 	bl	8000fec <IMU_read_byte>
 8001118:	4603      	mov	r3, r0
 800111a:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7bba      	ldrb	r2, [r7, #14]
 8001120:	701a      	strb	r2, [r3, #0]
	if ( who_am_i == 0xE0 )
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	2be0      	cmp	r3, #224	; 0xe0
 8001126:	d11e      	bne.n	8001166 <IMU_init+0xbe>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
		IMU_write_byte(PWR_MGMT_1,0x01);	//PWR_MGMT_1
 800112c:	2101      	movs	r1, #1
 800112e:	2006      	movs	r0, #6
 8001130:	f7ff ff8a 	bl	8001048 <IMU_write_byte>
		HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	; 0x64
 8001136:	f002 fd75 	bl	8003c24 <HAL_Delay>
		IMU_write_byte(USER_CTRL,0x10);	//USER_CTRL
 800113a:	2110      	movs	r1, #16
 800113c:	2003      	movs	r0, #3
 800113e:	f7ff ff83 	bl	8001048 <IMU_write_byte>
		IMU_write_byte(REG_BANK_SEL,0x20);	//USER_BANK2
 8001142:	2120      	movs	r1, #32
 8001144:	207f      	movs	r0, #127	; 0x7f
 8001146:	f7ff ff7f 	bl	8001048 <IMU_write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		IMU_write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 800114a:	2107      	movs	r1, #7
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ff7b 	bl	8001048 <IMU_write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		IMU_write_byte(0x14,0x00);	//range±2g
 8001152:	2100      	movs	r1, #0
 8001154:	2014      	movs	r0, #20
 8001156:	f7ff ff77 	bl	8001048 <IMU_write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		IMU_write_byte(REG_BANK_SEL,0x00);	//USER_BANK0
 800115a:	2100      	movs	r1, #0
 800115c:	207f      	movs	r0, #127	; 0x7f
 800115e:	f7ff ff73 	bl	8001048 <IMU_write_byte>
		IMU_set_offset();
 8001162:	f000 f81b 	bl	800119c <IMU_set_offset>
	}
#if USE_NCS
	CS_SET;
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <IMU_init+0xe0>)
 800116e:	f004 f857 	bl	8005220 <HAL_GPIO_WritePin>
#endif
	return ret;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	a2529d39 	.word	0xa2529d39
 8001184:	3f91df46 	.word	0x3f91df46
 8001188:	40020400 	.word	0x40020400
 800118c:	20000210 	.word	0x20000210
 8001190:	20000208 	.word	0x20000208
 8001194:	20000230 	.word	0x20000230
 8001198:	20000224 	.word	0x20000224

0800119c <IMU_set_offset>:
	CS_SET;
#endif
}

void IMU_set_offset()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	IMU_read();
 80011a0:	f000 f80e 	bl	80011c0 <IMU_read>
	inertial_offset = inertial;
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <IMU_set_offset+0x1c>)
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <IMU_set_offset+0x20>)
 80011a8:	6810      	ldr	r0, [r2, #0]
 80011aa:	6851      	ldr	r1, [r2, #4]
 80011ac:	6892      	ldr	r2, [r2, #8]
 80011ae:	6018      	str	r0, [r3, #0]
 80011b0:	6059      	str	r1, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000218 	.word	0x20000218
 80011bc:	20000230 	.word	0x20000230

080011c0 <IMU_read>:

void IMU_read()
{
 80011c0:	b598      	push	{r3, r4, r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)IMU_read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)IMU_read_byte(ACCEL_XOUT_L));
 80011c4:	202d      	movs	r0, #45	; 0x2d
 80011c6:	f7ff ff11 	bl	8000fec <IMU_read_byte>
 80011ca:	4603      	mov	r3, r0
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21c      	sxth	r4, r3
 80011d0:	202e      	movs	r0, #46	; 0x2e
 80011d2:	f7ff ff0b 	bl	8000fec <IMU_read_byte>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4323      	orrs	r3, r4
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <IMU_read+0xbc>)
 80011e0:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)IMU_read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)IMU_read_byte(ACCEL_YOUT_L));
 80011e2:	202f      	movs	r0, #47	; 0x2f
 80011e4:	f7ff ff02 	bl	8000fec <IMU_read_byte>
 80011e8:	4603      	mov	r3, r0
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21c      	sxth	r4, r3
 80011ee:	2030      	movs	r0, #48	; 0x30
 80011f0:	f7ff fefc 	bl	8000fec <IMU_read_byte>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4323      	orrs	r3, r4
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <IMU_read+0xbc>)
 80011fe:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)IMU_read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)IMU_read_byte(ACCEL_ZOUT_L));
 8001200:	2031      	movs	r0, #49	; 0x31
 8001202:	f7ff fef3 	bl	8000fec <IMU_read_byte>
 8001206:	4603      	mov	r3, r0
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21c      	sxth	r4, r3
 800120c:	2032      	movs	r0, #50	; 0x32
 800120e:	f7ff feed 	bl	8000fec <IMU_read_byte>
 8001212:	4603      	mov	r3, r0
 8001214:	b21b      	sxth	r3, r3
 8001216:	4323      	orrs	r3, r4
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <IMU_read+0xbc>)
 800121c:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)IMU_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)IMU_read_byte(GYRO_XOUT_L));
 800121e:	2033      	movs	r0, #51	; 0x33
 8001220:	f7ff fee4 	bl	8000fec <IMU_read_byte>
 8001224:	4603      	mov	r3, r0
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21c      	sxth	r4, r3
 800122a:	2034      	movs	r0, #52	; 0x34
 800122c:	f7ff fede 	bl	8000fec <IMU_read_byte>
 8001230:	4603      	mov	r3, r0
 8001232:	b21b      	sxth	r3, r3
 8001234:	4323      	orrs	r3, r4
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <IMU_read+0xbc>)
 800123a:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)IMU_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)IMU_read_byte(GYRO_YOUT_L));
 800123c:	2035      	movs	r0, #53	; 0x35
 800123e:	f7ff fed5 	bl	8000fec <IMU_read_byte>
 8001242:	4603      	mov	r3, r0
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21c      	sxth	r4, r3
 8001248:	2036      	movs	r0, #54	; 0x36
 800124a:	f7ff fecf 	bl	8000fec <IMU_read_byte>
 800124e:	4603      	mov	r3, r0
 8001250:	b21b      	sxth	r3, r3
 8001252:	4323      	orrs	r3, r4
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <IMU_read+0xbc>)
 8001258:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)IMU_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)IMU_read_byte(GYRO_ZOUT_L));
 800125a:	2037      	movs	r0, #55	; 0x37
 800125c:	f7ff fec6 	bl	8000fec <IMU_read_byte>
 8001260:	4603      	mov	r3, r0
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21c      	sxth	r4, r3
 8001266:	2038      	movs	r0, #56	; 0x38
 8001268:	f7ff fec0 	bl	8000fec <IMU_read_byte>
 800126c:	4603      	mov	r3, r0
 800126e:	b21b      	sxth	r3, r3
 8001270:	4323      	orrs	r3, r4
 8001272:	b21a      	sxth	r2, r3
 8001274:	4b01      	ldr	r3, [pc, #4]	; (800127c <IMU_read+0xbc>)
 8001276:	815a      	strh	r2, [r3, #10]
}
 8001278:	bf00      	nop
 800127a:	bd98      	pop	{r3, r4, r7, pc}
 800127c:	20000230 	.word	0x20000230

08001280 <rotary_init>:
#include "Rotary.h"

PlayMode playmode;

void rotary_init()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <rotary_init+0x14>)
 8001286:	f005 fb12 	bl	80068ae <HAL_TIM_Base_Start_IT>
    rotary_set_playmode();
 800128a:	f000 f805 	bl	8001298 <rotary_set_playmode>
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000052c 	.word	0x2000052c

08001298 <rotary_set_playmode>:

void rotary_set_playmode()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 800129c:	f000 f814 	bl	80012c8 <rotary_read>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b01      	ldr	r3, [pc, #4]	; (80012ac <rotary_set_playmode+0x14>)
 80012a6:	701a      	strb	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000023c 	.word	0x2000023c

080012b0 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
    return playmode;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <rotary_read_playmode+0x14>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2000023c 	.word	0x2000023c

080012c8 <rotary_read>:

uint8_t rotary_read()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
    uint8_t rotaryvalue_ = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]

    rotaryvalue_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 80012d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d6:	481f      	ldr	r0, [pc, #124]	; (8001354 <rotary_read+0x8c>)
 80012d8:	f003 ff8a 	bl	80051f0 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf0c      	ite	eq
 80012e2:	2301      	moveq	r3, #1
 80012e4:	2300      	movne	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4413      	add	r3, r2
 80012ee:	71fb      	strb	r3, [r7, #7]
    rotaryvalue_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 80012f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f4:	4817      	ldr	r0, [pc, #92]	; (8001354 <rotary_read+0x8c>)
 80012f6:	f003 ff7b 	bl	80051f0 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <rotary_read+0x3c>
 8001300:	2302      	movs	r3, #2
 8001302:	e000      	b.n	8001306 <rotary_read+0x3e>
 8001304:	2300      	movs	r3, #0
 8001306:	b2da      	uxtb	r2, r3
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4413      	add	r3, r2
 800130c:	71fb      	strb	r3, [r7, #7]
    rotaryvalue_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 800130e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <rotary_read+0x90>)
 8001314:	f003 ff6c 	bl	80051f0 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <rotary_read+0x5a>
 800131e:	2304      	movs	r3, #4
 8001320:	e000      	b.n	8001324 <rotary_read+0x5c>
 8001322:	2300      	movs	r3, #0
 8001324:	b2da      	uxtb	r2, r3
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4413      	add	r3, r2
 800132a:	71fb      	strb	r3, [r7, #7]
    rotaryvalue_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 800132c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <rotary_read+0x8c>)
 8001332:	f003 ff5d 	bl	80051f0 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <rotary_read+0x78>
 800133c:	2308      	movs	r3, #8
 800133e:	e000      	b.n	8001342 <rotary_read+0x7a>
 8001340:	2300      	movs	r3, #0
 8001342:	b2da      	uxtb	r2, r3
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	4413      	add	r3, r2
 8001348:	71fb      	strb	r3, [r7, #7]

    return rotaryvalue_;
 800134a:	79fb      	ldrb	r3, [r7, #7]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40020800 	.word	0x40020800
 8001358:	40020000 	.word	0x40020000

0800135c <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
    enter = 1;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <switch_set_enter+0x14>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	2000023d 	.word	0x2000023d

08001374 <switch_reset_enter>:

void switch_reset_enter()
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
    enter = 0;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <switch_reset_enter+0x14>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	2000023d 	.word	0x2000023d

0800138c <switch_init>:

void switch_init()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
    switch_reset_enter();
 8001390:	f7ff fff0 	bl	8001374 <switch_reset_enter>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <switch_read_enter>:

uint8_t switch_read_enter()
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
    return enter;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <switch_read_enter+0x14>)
 800139e:	781b      	ldrb	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2000023d 	.word	0x2000023d

080013b0 <switch1_read>:

uint8_t switch1_read()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) ? 0 : 1;
 80013b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <switch1_read+0x20>)
 80013ba:	f003 ff19 	bl	80051f0 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40020800 	.word	0x40020800

080013d4 <switch2_read>:

uint8_t switch2_read()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) ? 0 : 1;
 80013d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <switch2_read+0x20>)
 80013de:	f003 ff07 	bl	80051f0 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40020800 	.word	0x40020800

080013f8 <switch_read>:

uint8_t switch_read()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 0;
 8001402:	f7ff ffd5 	bl	80013b0 <switch1_read>
 8001406:	4603      	mov	r3, r0
 8001408:	b2da      	uxtb	r2, r3
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4413      	add	r3, r2
 800140e:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 1;
 8001410:	f7ff ffe0 	bl	80013d4 <switch2_read>
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4413      	add	r3, r2
 800141e:	71fb      	strb	r3, [r7, #7]

    return value_;
 8001420:	79fb      	ldrb	r3, [r7, #7]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <switch_enter>:

void switch_enter()
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 800142e:	f7ff ffe3 	bl	80013f8 <switch_read>
 8001432:	4603      	mov	r3, r0
 8001434:	2b01      	cmp	r3, #1
 8001436:	d102      	bne.n	800143e <switch_enter+0x14>
    {
        switch_reset_enter();
 8001438:	f7ff ff9c 	bl	8001374 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 800143c:	e006      	b.n	800144c <switch_enter+0x22>
    else if(switch_read() == 0b10)
 800143e:	f7ff ffdb 	bl	80013f8 <switch_read>
 8001442:	4603      	mov	r3, r0
 8001444:	2b02      	cmp	r3, #2
 8001446:	d101      	bne.n	800144c <switch_enter+0x22>
        switch_set_enter();
 8001448:	f7ff ff88 	bl	800135c <switch_set_enter>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <analog_set>:
uint16_t analogmax[CALIBRATIONSIZE];
uint16_t analogmin[CALIBRATIONSIZE];
uint16_t analograte[CALIBRATIONSIZE];

void analog_set(FlashBuffer *flashbuffer_)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e017      	b.n	800148e <analog_set+0x3e>
	{
		flashbuffer_ -> analogmin[i] = analogmin[i];
 800145e:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <analog_set+0x54>)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	460a      	mov	r2, r1
 8001470:	805a      	strh	r2, [r3, #2]
		flashbuffer_ -> analogmax[i] = analogmax[i];
 8001472:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <analog_set+0x58>)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3310      	adds	r3, #16
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	460a      	mov	r2, r1
 8001486:	805a      	strh	r2, [r3, #2]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d9e4      	bls.n	800145e <analog_set+0xe>
	}
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000284 	.word	0x20000284
 80014a8:	200002c8 	.word	0x200002c8

080014ac <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <analog_set_calibrationsize+0x1c>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	7013      	strb	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	200002a4 	.word	0x200002a4

080014cc <analog_read_calibrationsize>:

uint8_t analog_read_calibrationsize()
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	return calibrationsize;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <analog_read_calibrationsize+0x14>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200002a4 	.word	0x200002a4

080014e4 <analog_calibration_init>:

void analog_calibration_init()
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	e00d      	b.n	800150c <analog_calibration_init+0x28>
    {
        analogmax[i] = 0;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <analog_calibration_init+0x3c>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <analog_calibration_init+0x40>)
 80014fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001502:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	3301      	adds	r3, #1
 800150a:	71fb      	strb	r3, [r7, #7]
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	d9ee      	bls.n	80014f0 <analog_calibration_init+0xc>
    }
}
 8001512:	bf00      	nop
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	200002c8 	.word	0x200002c8
 8001524:	20000284 	.word	0x20000284

08001528 <analog_init>:

void analog_init()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 800152c:	2010      	movs	r0, #16
 800152e:	f7ff ffbd 	bl	80014ac <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <analog_init+0x20>)
 8001534:	f002 fb9a 	bl	8003c6c <HAL_ADC_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <analog_init+0x1a>
    {
        Error_Handler();
 800153e:	f001 f937 	bl	80027b0 <Error_Handler>
    }
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200004e4 	.word	0x200004e4

0800154c <analog_sensor_init>:

void analog_sensor_init()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    sensgettime = 0;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <analog_sensor_init+0x2c>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE_MAX) != HAL_OK)
 8001556:	2210      	movs	r2, #16
 8001558:	4908      	ldr	r1, [pc, #32]	; (800157c <analog_sensor_init+0x30>)
 800155a:	4809      	ldr	r0, [pc, #36]	; (8001580 <analog_sensor_init+0x34>)
 800155c:	f002 fbca 	bl	8003cf4 <HAL_ADC_Start_DMA>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <analog_sensor_init+0x1e>
    {
        Error_Handler();
 8001566:	f001 f923 	bl	80027b0 <Error_Handler>
    }
    HAL_Delay(1000);
 800156a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156e:	f002 fb59 	bl	8003c24 <HAL_Delay>
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000260 	.word	0x20000260
 800157c:	20000264 	.word	0x20000264
 8001580:	200004e4 	.word	0x200004e4

08001584 <analog_sensor_finalize>:

void analog_sensor_finalize()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <analog_sensor_finalize+0x10>)
 800158a:	f002 fca5 	bl	8003ed8 <HAL_ADC_Stop_DMA>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200004e4 	.word	0x200004e4

08001598 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	analograte[i] = ((analog[i] - analogmin[i]) * 1000) / (analogmax[i] - analogmin[i]);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <analog_sensor_get+0x5c>)
 80015a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015aa:	4619      	mov	r1, r3
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <analog_sensor_get+0x60>)
 80015b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b4:	1acb      	subs	r3, r1, r3
 80015b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ba:	fb02 f203 	mul.w	r2, r2, r3
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <analog_sensor_get+0x64>)
 80015c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015c6:	4618      	mov	r0, r3
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	490b      	ldr	r1, [pc, #44]	; (80015f8 <analog_sensor_get+0x60>)
 80015cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015d0:	1ac3      	subs	r3, r0, r3
 80015d2:	fb92 f2f3 	sdiv	r2, r2, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	b291      	uxth	r1, r2
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <analog_sensor_get+0x68>)
 80015dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500);
#endif
	return analograte[i];
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <analog_sensor_get+0x68>)
 80015e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	20000240 	.word	0x20000240
 80015f8:	20000284 	.word	0x20000284
 80015fc:	200002c8 	.word	0x200002c8
 8001600:	200002a8 	.word	0x200002a8

08001604 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001604:	b490      	push	{r4, r7}
 8001606:	b0cc      	sub	sp, #304	; 0x130
 8001608:	af00      	add	r7, sp, #0
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	6018      	str	r0, [r3, #0]
	uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 800160e:	4b5e      	ldr	r3, [pc, #376]	; (8001788 <HAL_ADC_ConvCpltCallback+0x184>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b08      	cmp	r3, #8
 8001614:	f240 808f 	bls.w	8001736 <HAL_ADC_ConvCpltCallback+0x132>
    {
		sensgettime = 0;
 8001618:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <HAL_ADC_ConvCpltCallback+0x184>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE_MAX; index++)
 800161e:	2300      	movs	r3, #0
 8001620:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8001624:	e082      	b.n	800172c <HAL_ADC_ConvCpltCallback+0x128>
        {
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001626:	2300      	movs	r3, #0
 8001628:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 800162c:	e042      	b.n	80016b4 <HAL_ADC_ConvCpltCallback+0xb0>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 800162e:	2300      	movs	r3, #0
 8001630:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 8001634:	e033      	b.n	800169e <HAL_ADC_ConvCpltCallback+0x9a>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001636:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800163a:	1e59      	subs	r1, r3, #1
 800163c:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	0109      	lsls	r1, r1, #4
 8001646:	440a      	add	r2, r1
 8001648:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800164c:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001650:	f897 412d 	ldrb.w	r4, [r7, #301]	; 0x12d
 8001654:	f897 012f 	ldrb.w	r0, [r7, #303]	; 0x12f
 8001658:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800165c:	1e59      	subs	r1, r3, #1
 800165e:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	0124      	lsls	r4, r4, #4
 8001668:	4420      	add	r0, r4
 800166a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	0109      	lsls	r1, r1, #4
 8001674:	440a      	add	r2, r1
 8001676:	4601      	mov	r1, r0
 8001678:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 800167c:	f897 112d 	ldrb.w	r1, [r7, #301]	; 0x12d
 8001680:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	0109      	lsls	r1, r1, #4
 800168a:	440a      	add	r2, r1
 800168c:	f8b7 1128 	ldrh.w	r1, [r7, #296]	; 0x128
 8001690:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001694:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001698:	3b01      	subs	r3, #1
 800169a:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 800169e:	f897 212d 	ldrb.w	r2, [r7, #301]	; 0x12d
 80016a2:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d8c5      	bhi.n	8001636 <HAL_ADC_ConvCpltCallback+0x32>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 80016aa:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80016ae:	3301      	adds	r3, #1
 80016b0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80016b4:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d9b8      	bls.n	800162e <HAL_ADC_ConvCpltCallback+0x2a>
				}
			}

			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 80016bc:	f897 112f 	ldrb.w	r1, [r7, #303]	; 0x12f
 80016c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80016c4:	f107 0208 	add.w	r2, r7, #8
 80016c8:	3140      	adds	r1, #64	; 0x40
 80016ca:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80016ce:	4a2f      	ldr	r2, [pc, #188]	; (800178c <HAL_ADC_ConvCpltCallback+0x188>)
 80016d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			// get maxvalue and minimumvalue
			uint16_t analogbuf;
			analogbuf = analog[index];
 80016d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80016d8:	4a2c      	ldr	r2, [pc, #176]	; (800178c <HAL_ADC_ConvCpltCallback+0x188>)
 80016da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016de:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
			analogmax[index] = (analogmax[index] < analogbuf) ? analogbuf : analogmax[index];
 80016e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80016e6:	4a2a      	ldr	r2, [pc, #168]	; (8001790 <HAL_ADC_ConvCpltCallback+0x18c>)
 80016e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80016ec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80016f0:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 80016f4:	428a      	cmp	r2, r1
 80016f6:	bf38      	it	cc
 80016f8:	460a      	movcc	r2, r1
 80016fa:	b291      	uxth	r1, r2
 80016fc:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_ADC_ConvCpltCallback+0x18c>)
 80016fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analogbuf) ? analogbuf : analogmin[index];
 8001702:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001706:	4a23      	ldr	r2, [pc, #140]	; (8001794 <HAL_ADC_ConvCpltCallback+0x190>)
 8001708:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800170c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001710:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 8001714:	428a      	cmp	r2, r1
 8001716:	bf28      	it	cs
 8001718:	460a      	movcs	r2, r1
 800171a:	b291      	uxth	r1, r2
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <HAL_ADC_ConvCpltCallback+0x190>)
 800171e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE_MAX; index++)
 8001722:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001726:	3301      	adds	r3, #1
 8001728:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 800172c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001730:	2b0f      	cmp	r3, #15
 8001732:	f67f af78 	bls.w	8001626 <HAL_ADC_ConvCpltCallback+0x22>
		}
	}

    /* sensorget */
	for(unsigned char index = 0; CALIBRATIONSIZE_MAX > index; index++)
 8001736:	2300      	movs	r3, #0
 8001738:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 800173c:	e014      	b.n	8001768 <HAL_ADC_ConvCpltCallback+0x164>
    {
		analogbuffers[sensgettime][index] = analograw[index];
 800173e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001742:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_ADC_ConvCpltCallback+0x184>)
 8001744:	6811      	ldr	r1, [r2, #0]
 8001746:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
 800174a:	4813      	ldr	r0, [pc, #76]	; (8001798 <HAL_ADC_ConvCpltCallback+0x194>)
 800174c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	0109      	lsls	r1, r1, #4
 8001756:	440a      	add	r2, r1
 8001758:	4601      	mov	r1, r0
 800175a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE_MAX > index; index++)
 800175e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001762:	3301      	adds	r3, #1
 8001764:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
 8001768:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d9e6      	bls.n	800173e <HAL_ADC_ConvCpltCallback+0x13a>
	}
	sensgettime++;
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_ADC_ConvCpltCallback+0x184>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_ADC_ConvCpltCallback+0x184>)
 8001778:	6013      	str	r3, [r2, #0]
}
 800177a:	bf00      	nop
 800177c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001780:	46bd      	mov	sp, r7
 8001782:	bc90      	pop	{r4, r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000260 	.word	0x20000260
 800178c:	20000240 	.word	0x20000240
 8001790:	200002c8 	.word	0x200002c8
 8001794:	20000284 	.word	0x20000284
 8001798:	20000264 	.word	0x20000264

0800179c <course_read_state_time>:
	course_length += length;
	return course_read_length();
}

uint16_t course_read_state_time()
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
    return course_state_time;
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <course_read_state_time+0x14>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	200002f0 	.word	0x200002f0

080017b4 <course_state_function>:
	tim10_length_init();
    return (double) TREAD * (double) ((left_length) + (right_length)) / (double) ((left_length) - (right_length)) / (double) 2;
}

void course_state_function()
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	if(rotary_read_playmode() == search)
 80017b8:	f7ff fd7a 	bl	80012b0 <rotary_read_playmode>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d104      	bne.n	80017cc <course_state_function+0x18>
	{
		if(course_read_state_time() + 1 >= COURSE_STATE_SIZE)	// sizeof(flash_buffer.radius) / sizeof(flash_buffer.radius[0]))
 80017c2:	f7ff ffeb 	bl	800179c <course_read_state_time>
		{
            motor_enable(0);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 fffe 	bl	80027c8 <motor_enable>
			flashbuffer.radius[course_state_time] = course_calclate_radius();
			course_length = 0;
//			my_gyro.z = 0;
		}
	}
	if(rotary_read_playmode() == accel)
 80017cc:	f7ff fd70 	bl	80012b0 <rotary_read_playmode>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d104      	bne.n	80017e0 <course_state_function+0x2c>
	{
//		velocity_control_switch_function();
		if(course_read_state_time() + 1 >= COURSE_STATE_SIZE)	// sizeof(flash_buffer.radius) / sizeof(flash_buffer.radius[0]))
 80017d6:	f7ff ffe1 	bl	800179c <course_read_state_time>
		{
			motor_enable(0);
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 fff4 	bl	80027c8 <motor_enable>
#if USE_COURSE_STATE_TIME
			course_increment_state_time();
#endif
		}
	}
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	0000      	movs	r0, r0
	...

080017e8 <encoder_init>:
/* encoders are updated only in encoder file. */
double encoder_left, encoder_right, encoder;

/* private */
void encoder_init()
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
    LENGTHPERPULSE = M_PI * TIREDIAMETER * PINION / (double) PULSEPERROTATE / (double) SUPER;
 80017ec:	4908      	ldr	r1, [pc, #32]	; (8001810 <encoder_init+0x28>)
 80017ee:	a306      	add	r3, pc, #24	; (adr r3, 8001808 <encoder_init+0x20>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	24a478cb 	.word	0x24a478cb
 800180c:	40192ab8 	.word	0x40192ab8
 8001810:	20000310 	.word	0x20000310

08001814 <encoder_finalize>:

void encoder_finalize()
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
    encoder_stop();
 8001818:	f000 f82c 	bl	8001874 <encoder_stop>
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <encoder_set_middle+0x20>)
 8001826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2 -> CNT = ENCODER_MIDDLE;
 800182c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40010000 	.word	0x40010000

08001844 <encoder_start>:

void encoder_start()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    encoder_set_middle();
 8001848:	f7ff ffea 	bl	8001820 <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800184c:	213c      	movs	r1, #60	; 0x3c
 800184e:	4806      	ldr	r0, [pc, #24]	; (8001868 <encoder_start+0x24>)
 8001850:	f005 f9d0 	bl	8006bf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001854:	213c      	movs	r1, #60	; 0x3c
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <encoder_start+0x28>)
 8001858:	f005 f9cc 	bl	8006bf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <encoder_start+0x2c>)
 800185e:	f005 f826 	bl	80068ae <HAL_TIM_Base_Start_IT>
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000060c 	.word	0x2000060c
 800186c:	200004a4 	.word	0x200004a4
 8001870:	20000464 	.word	0x20000464

08001874 <encoder_stop>:

void encoder_stop()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001878:	213c      	movs	r1, #60	; 0x3c
 800187a:	4804      	ldr	r0, [pc, #16]	; (800188c <encoder_stop+0x18>)
 800187c:	f005 f9f2 	bl	8006c64 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001880:	213c      	movs	r1, #60	; 0x3c
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <encoder_stop+0x1c>)
 8001884:	f005 f9ee 	bl	8006c64 <HAL_TIM_Encoder_Stop>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000060c 	.word	0x2000060c
 8001890:	200004a4 	.word	0x200004a4

08001894 <encoder_read>:

double encoder_read()
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
    return encoder;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <encoder_read+0x20>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	ec43 2b17 	vmov	d7, r2, r3
}
 80018a2:	eeb0 0a47 	vmov.f32	s0, s14
 80018a6:	eef0 0a67 	vmov.f32	s1, s15
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000300 	.word	0x20000300

080018b8 <encoder_read_left>:

double encoder_read_left()
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
    return encoder_left;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <encoder_read_left+0x20>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80018c6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ca:	eef0 0a67 	vmov.f32	s1, s15
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200002f8 	.word	0x200002f8

080018dc <encoder_read_right>:

double encoder_read_right()
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
    return encoder_right;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <encoder_read_right+0x20>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80018ea:	eeb0 0a47 	vmov.f32	s0, s14
 80018ee:	eef0 0a67 	vmov.f32	s1, s15
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000308 	.word	0x20000308

08001900 <encoder_set>:

/* only read tim10_main */
void encoder_set()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <encoder_set+0x6c>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fdf9 	bl	8000504 <__aeabi_ui2d>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4916      	ldr	r1, [pc, #88]	; (8001970 <encoder_set+0x70>)
 8001918:	e9c1 2300 	strd	r2, r3, [r1]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <encoder_set+0x74>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fded 	bl	8000504 <__aeabi_ui2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4912      	ldr	r1, [pc, #72]	; (8001978 <encoder_set+0x78>)
 8001930:	e9c1 2300 	strd	r2, r3, [r1]
    encoder = (encoder_left + encoder_right) / 2;
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <encoder_set+0x70>)
 8001936:	e9d3 0100 	ldrd	r0, r1, [r3]
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <encoder_set+0x78>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7fe fca4 	bl	800028c <__adddf3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001954:	f7fe ff7a 	bl	800084c <__aeabi_ddiv>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <encoder_set+0x7c>)
 800195e:	e9c1 2300 	strd	r2, r3, [r1]

    encoder_set_middle();
 8001962:	f7ff ff5d 	bl	8001820 <encoder_set_middle>
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40010000 	.word	0x40010000
 8001970:	200002f8 	.word	0x200002f8
 8001974:	40000400 	.word	0x40000400
 8001978:	20000308 	.word	0x20000308
 800197c:	20000300 	.word	0x20000300

08001980 <HAL_TIM_PeriodElapsedCallback>:
static void MX_I2C1_Init(void);
static void MX_TIM14_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    tim6_main();
 8001992:	f001 fe17 	bl	80035c4 <tim6_main>
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
    tim10_main();
 80019a0:	f001 fd36 	bl	8003410 <tim10_main>
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    tim11_main();
 80019ae:	f001 fdcf 	bl	8003550 <tim11_main>
	}
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40001000 	.word	0x40001000
 80019c0:	40014400 	.word	0x40014400
 80019c4:	40014800 	.word	0x40014800

080019c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019cc:	f002 f8b8 	bl	8003b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d0:	f000 f978 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d4:	f000 fd64 	bl	80024a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80019d8:	f000 fd42 	bl	8002460 <MX_DMA_Init>
  MX_ADC1_Init();
 80019dc:	f000 f9dc 	bl	8001d98 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80019e0:	f000 fd14 	bl	800240c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80019e4:	f000 fc70 	bl	80022c8 <MX_TIM6_Init>
  MX_TIM4_Init();
 80019e8:	f000 fc0a 	bl	8002200 <MX_TIM4_Init>
  MX_TIM1_Init();
 80019ec:	f000 fb5c 	bl	80020a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80019f0:	f000 fbb2 	bl	8002158 <MX_TIM3_Init>
  MX_TIM10_Init();
 80019f4:	f000 fc9e 	bl	8002334 <MX_TIM10_Init>
  MX_TIM11_Init();
 80019f8:	f000 fcc0 	bl	800237c <MX_TIM11_Init>
  MX_SPI2_Init();
 80019fc:	f000 fb1e 	bl	800203c <MX_SPI2_Init>
  MX_I2C1_Init();
 8001a00:	f000 faee 	bl	8001fe0 <MX_I2C1_Init>
  MX_TIM14_Init();
 8001a04:	f000 fcde 	bl	80023c4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8001a08:	48ac      	ldr	r0, [pc, #688]	; (8001cbc <main+0x2f4>)
 8001a0a:	f007 f9f5 	bl	8008df8 <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8001a0e:	48ac      	ldr	r0, [pc, #688]	; (8001cc0 <main+0x2f8>)
 8001a10:	f007 fa78 	bl	8008f04 <puts>

  main_init();
 8001a14:	f000 feb0 	bl	8002778 <main_init>
	{
#if D_WHILE_PRINT
		printf("///// WHILE /////\n\r");
#endif

		if(switch_read_enter())
 8001a18:	f7ff fcbe 	bl	8001398 <switch_read_enter>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8145 	beq.w	8001cae <main+0x2e6>
		{
			switch(rotary_read())
 8001a24:	f7ff fc50 	bl	80012c8 <rotary_read>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f200 8141 	bhi.w	8001cb2 <main+0x2ea>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <main+0x70>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a79 	.word	0x08001a79
 8001a3c:	08001ac3 	.word	0x08001ac3
 8001a40:	08001ae5 	.word	0x08001ae5
 8001a44:	08001b05 	.word	0x08001b05
 8001a48:	08001b25 	.word	0x08001b25
 8001a4c:	08001b45 	.word	0x08001b45
 8001a50:	08001b65 	.word	0x08001b65
 8001a54:	08001b85 	.word	0x08001b85
 8001a58:	08001ba5 	.word	0x08001ba5
 8001a5c:	08001bc5 	.word	0x08001bc5
 8001a60:	08001be5 	.word	0x08001be5
 8001a64:	08001c05 	.word	0x08001c05
 8001a68:	08001c25 	.word	0x08001c25
 8001a6c:	08001c45 	.word	0x08001c45
 8001a70:	08001c65 	.word	0x08001c65
 8001a74:	08001c85 	.word	0x08001c85
      {
			case 0x00:
				if(rotary_read_playmode() == calibration)
 8001a78:	f7ff fc1a 	bl	80012b0 <rotary_read_playmode>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10f      	bne.n	8001aa2 <main+0xda>
				{
          analog_calibration_init();
 8001a82:	f7ff fd2f 	bl	80014e4 <analog_calibration_init>
					start_analog();
 8001a86:	f000 fe5f 	bl	8002748 <start_analog>

					while(switch_read_enter())
 8001a8a:	e002      	b.n	8001a92 <main+0xca>
					{
						HAL_Delay(100);
 8001a8c:	2064      	movs	r0, #100	; 0x64
 8001a8e:	f002 f8c9 	bl	8003c24 <HAL_Delay>
					while(switch_read_enter())
 8001a92:	f7ff fc81 	bl	8001398 <switch_read_enter>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f7      	bne.n	8001a8c <main+0xc4>
					}

					end_analog();
 8001a9c:	f000 fe5a 	bl	8002754 <end_analog>
						HAL_Delay(250);
					}

					running_finalize();
				}
				break;	// case 0x00:
 8001aa0:	e10a      	b.n	8001cb8 <main+0x2f0>
					running_initialize();
 8001aa2:	f000 fde7 	bl	8002674 <running_initialize>
					while(switch_read_enter())
 8001aa6:	e004      	b.n	8001ab2 <main+0xea>
						d_print();
 8001aa8:	f000 ff56 	bl	8002958 <d_print>
						HAL_Delay(250);
 8001aac:	20fa      	movs	r0, #250	; 0xfa
 8001aae:	f002 f8b9 	bl	8003c24 <HAL_Delay>
					while(switch_read_enter())
 8001ab2:	f7ff fc71 	bl	8001398 <switch_read_enter>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f5      	bne.n	8001aa8 <main+0xe0>
					running_finalize();
 8001abc:	f000 fe02 	bl	80026c4 <running_finalize>
				break;	// case 0x00:
 8001ac0:	e0fa      	b.n	8001cb8 <main+0x2f0>
			case 0x01:	// 1
				running_initialize();
 8001ac2:	f000 fdd7 	bl	8002674 <running_initialize>

				while (switch_read_enter())
 8001ac6:	e005      	b.n	8001ad4 <main+0x10c>
        {
					d_print();
 8001ac8:	f000 ff46 	bl	8002958 <d_print>
					HAL_Delay(500);
 8001acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad0:	f002 f8a8 	bl	8003c24 <HAL_Delay>
				while (switch_read_enter())
 8001ad4:	f7ff fc60 	bl	8001398 <switch_read_enter>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f4      	bne.n	8001ac8 <main+0x100>
				}

				running_finalize();
 8001ade:	f000 fdf1 	bl	80026c4 <running_finalize>
				break;
 8001ae2:	e0e9      	b.n	8001cb8 <main+0x2f0>
			case 0x02:	// 2
				running_initialize();
 8001ae4:	f000 fdc6 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001ae8:	e004      	b.n	8001af4 <main+0x12c>
        {
					d_print();
 8001aea:	f000 ff35 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001aee:	20fa      	movs	r0, #250	; 0xfa
 8001af0:	f002 f898 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001af4:	f7ff fc50 	bl	8001398 <switch_read_enter>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f5      	bne.n	8001aea <main+0x122>
				}

				running_finalize();
 8001afe:	f000 fde1 	bl	80026c4 <running_finalize>
				break;
 8001b02:	e0d9      	b.n	8001cb8 <main+0x2f0>
			case 0x03:	// 3
				running_initialize();
 8001b04:	f000 fdb6 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001b08:	e004      	b.n	8001b14 <main+0x14c>
        {
					d_print();
 8001b0a:	f000 ff25 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001b0e:	20fa      	movs	r0, #250	; 0xfa
 8001b10:	f002 f888 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001b14:	f7ff fc40 	bl	8001398 <switch_read_enter>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f5      	bne.n	8001b0a <main+0x142>
				}

				running_finalize();
 8001b1e:	f000 fdd1 	bl	80026c4 <running_finalize>
				break;
 8001b22:	e0c9      	b.n	8001cb8 <main+0x2f0>
			case 0x04:	// 4
				running_initialize();
 8001b24:	f000 fda6 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001b28:	e004      	b.n	8001b34 <main+0x16c>
        {
					d_print();
 8001b2a:	f000 ff15 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001b2e:	20fa      	movs	r0, #250	; 0xfa
 8001b30:	f002 f878 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001b34:	f7ff fc30 	bl	8001398 <switch_read_enter>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f5      	bne.n	8001b2a <main+0x162>
				}

				running_finalize();
 8001b3e:	f000 fdc1 	bl	80026c4 <running_finalize>
				break;
 8001b42:	e0b9      	b.n	8001cb8 <main+0x2f0>
			case 0x05:	// 5
				running_initialize();
 8001b44:	f000 fd96 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001b48:	e004      	b.n	8001b54 <main+0x18c>
        {
					d_print();
 8001b4a:	f000 ff05 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001b4e:	20fa      	movs	r0, #250	; 0xfa
 8001b50:	f002 f868 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001b54:	f7ff fc20 	bl	8001398 <switch_read_enter>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f5      	bne.n	8001b4a <main+0x182>
				}

				running_finalize();
 8001b5e:	f000 fdb1 	bl	80026c4 <running_finalize>
				break;
 8001b62:	e0a9      	b.n	8001cb8 <main+0x2f0>
			case 0x06:	// 6
				running_initialize();
 8001b64:	f000 fd86 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001b68:	e004      	b.n	8001b74 <main+0x1ac>
        {
					d_print();
 8001b6a:	f000 fef5 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001b6e:	20fa      	movs	r0, #250	; 0xfa
 8001b70:	f002 f858 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001b74:	f7ff fc10 	bl	8001398 <switch_read_enter>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f5      	bne.n	8001b6a <main+0x1a2>
				}

				running_finalize();
 8001b7e:	f000 fda1 	bl	80026c4 <running_finalize>
				break;
 8001b82:	e099      	b.n	8001cb8 <main+0x2f0>
			case 0x07:	// 7
				running_initialize();
 8001b84:	f000 fd76 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001b88:	e004      	b.n	8001b94 <main+0x1cc>
        {
					d_print();
 8001b8a:	f000 fee5 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001b8e:	20fa      	movs	r0, #250	; 0xfa
 8001b90:	f002 f848 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001b94:	f7ff fc00 	bl	8001398 <switch_read_enter>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f5      	bne.n	8001b8a <main+0x1c2>
				}

				running_finalize();
 8001b9e:	f000 fd91 	bl	80026c4 <running_finalize>
				break;
 8001ba2:	e089      	b.n	8001cb8 <main+0x2f0>
			case 0x08:	// 8
				running_initialize();
 8001ba4:	f000 fd66 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001ba8:	e004      	b.n	8001bb4 <main+0x1ec>
        {
					d_print();
 8001baa:	f000 fed5 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001bae:	20fa      	movs	r0, #250	; 0xfa
 8001bb0:	f002 f838 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001bb4:	f7ff fbf0 	bl	8001398 <switch_read_enter>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f5      	bne.n	8001baa <main+0x1e2>
				}

				running_finalize();
 8001bbe:	f000 fd81 	bl	80026c4 <running_finalize>
				break;
 8001bc2:	e079      	b.n	8001cb8 <main+0x2f0>
			case 0x09:	// 9
				running_initialize();
 8001bc4:	f000 fd56 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001bc8:	e004      	b.n	8001bd4 <main+0x20c>
        {
					d_print();
 8001bca:	f000 fec5 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001bce:	20fa      	movs	r0, #250	; 0xfa
 8001bd0:	f002 f828 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001bd4:	f7ff fbe0 	bl	8001398 <switch_read_enter>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f5      	bne.n	8001bca <main+0x202>
				}

				running_finalize();
 8001bde:	f000 fd71 	bl	80026c4 <running_finalize>
				break;
 8001be2:	e069      	b.n	8001cb8 <main+0x2f0>
			case 0x0A:	// A
				running_initialize();
 8001be4:	f000 fd46 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001be8:	e004      	b.n	8001bf4 <main+0x22c>
        {
					d_print();
 8001bea:	f000 feb5 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001bee:	20fa      	movs	r0, #250	; 0xfa
 8001bf0:	f002 f818 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001bf4:	f7ff fbd0 	bl	8001398 <switch_read_enter>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f5      	bne.n	8001bea <main+0x222>
				}

				running_finalize();
 8001bfe:	f000 fd61 	bl	80026c4 <running_finalize>
				break;
 8001c02:	e059      	b.n	8001cb8 <main+0x2f0>
			case 0x0B:	// B
				running_initialize();
 8001c04:	f000 fd36 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001c08:	e004      	b.n	8001c14 <main+0x24c>
        {
					d_print();
 8001c0a:	f000 fea5 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001c0e:	20fa      	movs	r0, #250	; 0xfa
 8001c10:	f002 f808 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001c14:	f7ff fbc0 	bl	8001398 <switch_read_enter>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f5      	bne.n	8001c0a <main+0x242>
				}

				running_finalize();
 8001c1e:	f000 fd51 	bl	80026c4 <running_finalize>
				break;
 8001c22:	e049      	b.n	8001cb8 <main+0x2f0>
			case 0x0C:	// C
				running_initialize();
 8001c24:	f000 fd26 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001c28:	e004      	b.n	8001c34 <main+0x26c>
        {
					d_print();
 8001c2a:	f000 fe95 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001c2e:	20fa      	movs	r0, #250	; 0xfa
 8001c30:	f001 fff8 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001c34:	f7ff fbb0 	bl	8001398 <switch_read_enter>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f5      	bne.n	8001c2a <main+0x262>
				}

				running_finalize();
 8001c3e:	f000 fd41 	bl	80026c4 <running_finalize>
				break;
 8001c42:	e039      	b.n	8001cb8 <main+0x2f0>
			case 0x0D:	// D
				running_initialize();
 8001c44:	f000 fd16 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001c48:	e004      	b.n	8001c54 <main+0x28c>
        {
					d_print();
 8001c4a:	f000 fe85 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001c4e:	20fa      	movs	r0, #250	; 0xfa
 8001c50:	f001 ffe8 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001c54:	f7ff fba0 	bl	8001398 <switch_read_enter>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f5      	bne.n	8001c4a <main+0x282>
				}

				running_finalize();
 8001c5e:	f000 fd31 	bl	80026c4 <running_finalize>
				break;
 8001c62:	e029      	b.n	8001cb8 <main+0x2f0>
			case 0x0E:	// E
				running_initialize();
 8001c64:	f000 fd06 	bl	8002674 <running_initialize>

				while(switch_read_enter())
 8001c68:	e004      	b.n	8001c74 <main+0x2ac>
        {
					d_print();
 8001c6a:	f000 fe75 	bl	8002958 <d_print>
					HAL_Delay(250);
 8001c6e:	20fa      	movs	r0, #250	; 0xfa
 8001c70:	f001 ffd8 	bl	8003c24 <HAL_Delay>
				while(switch_read_enter())
 8001c74:	f7ff fb90 	bl	8001398 <switch_read_enter>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f5      	bne.n	8001c6a <main+0x2a2>
				}

				running_finalize();
 8001c7e:	f000 fd21 	bl	80026c4 <running_finalize>
				break;
 8001c82:	e019      	b.n	8001cb8 <main+0x2f0>
			case 0x0F:
				if(rotary_read_playmode()== flash_print)
 8001c84:	f7ff fb14 	bl	80012b0 <rotary_read_playmode>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	d013      	beq.n	8001cb6 <main+0x2ee>
        {
				}
        else    // if(!(rotary_read_playmode()== flash_print))
        {
					running_initialize();
 8001c8e:	f000 fcf1 	bl	8002674 <running_initialize>

					while(switch_read_enter())
 8001c92:	e004      	b.n	8001c9e <main+0x2d6>
          {
						d_print();
 8001c94:	f000 fe60 	bl	8002958 <d_print>
						HAL_Delay(250);
 8001c98:	20fa      	movs	r0, #250	; 0xfa
 8001c9a:	f001 ffc3 	bl	8003c24 <HAL_Delay>
					while(switch_read_enter())
 8001c9e:	f7ff fb7b 	bl	8001398 <switch_read_enter>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f5      	bne.n	8001c94 <main+0x2cc>
					}

					running_finalize();
 8001ca8:	f000 fd0c 	bl	80026c4 <running_finalize>
				}
				break;
 8001cac:	e003      	b.n	8001cb6 <main+0x2ee>
			default:
				break;
			} // switch(rotary_value)
		}	// if(switch_read_enter())
 8001cae:	bf00      	nop
 8001cb0:	e6b2      	b.n	8001a18 <main+0x50>
				break;
 8001cb2:	bf00      	nop
 8001cb4:	e6b0      	b.n	8001a18 <main+0x50>
				break;
 8001cb6:	bf00      	nop
		if(switch_read_enter())
 8001cb8:	e6ae      	b.n	8001a18 <main+0x50>
 8001cba:	bf00      	nop
 8001cbc:	0800ca68 	.word	0x0800ca68
 8001cc0:	0800ca70 	.word	0x0800ca70

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	; 0x50
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0320 	add.w	r3, r7, #32
 8001cce:	2230      	movs	r2, #48	; 0x30
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f006 fa0e 	bl	80080f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d20:	2301      	movs	r3, #1
 8001d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d34:	2308      	movs	r3, #8
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d38:	23a8      	movs	r3, #168	; 0xa8
 8001d3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d40:	2304      	movs	r3, #4
 8001d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fbc7 	bl	80054dc <HAL_RCC_OscConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d54:	f000 fd2c 	bl	80027b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d58:	230f      	movs	r3, #15
 8001d5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2105      	movs	r1, #5
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fe20 	bl	80059bc <HAL_RCC_ClockConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d82:	f000 fd15 	bl	80027b0 <Error_Handler>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3750      	adds	r7, #80	; 0x50
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000

08001d98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d9e:	463b      	mov	r3, r7
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001daa:	4b8a      	ldr	r3, [pc, #552]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001dac:	4a8a      	ldr	r2, [pc, #552]	; (8001fd8 <MX_ADC1_Init+0x240>)
 8001dae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001db0:	4b88      	ldr	r3, [pc, #544]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001db2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001db6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001db8:	4b86      	ldr	r3, [pc, #536]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001dbe:	4b85      	ldr	r3, [pc, #532]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001dc4:	4b83      	ldr	r3, [pc, #524]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dca:	4b82      	ldr	r3, [pc, #520]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dd2:	4b80      	ldr	r3, [pc, #512]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001dda:	4a80      	ldr	r2, [pc, #512]	; (8001fdc <MX_ADC1_Init+0x244>)
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dde:	4b7d      	ldr	r3, [pc, #500]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8001de4:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001de6:	2210      	movs	r2, #16
 8001de8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dea:	4b7a      	ldr	r3, [pc, #488]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001df2:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001df8:	4876      	ldr	r0, [pc, #472]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001dfa:	f001 ff37 	bl	8003c6c <HAL_ADC_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e04:	f000 fcd4 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e08:	2309      	movs	r3, #9
 8001e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001e10:	2303      	movs	r3, #3
 8001e12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e14:	463b      	mov	r3, r7
 8001e16:	4619      	mov	r1, r3
 8001e18:	486e      	ldr	r0, [pc, #440]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001e1a:	f002 f8bb 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e24:	f000 fcc4 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e28:	230a      	movs	r3, #10
 8001e2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e30:	463b      	mov	r3, r7
 8001e32:	4619      	mov	r1, r3
 8001e34:	4867      	ldr	r0, [pc, #412]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001e36:	f002 f8ad 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001e40:	f000 fcb6 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e44:	2308      	movs	r3, #8
 8001e46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4860      	ldr	r0, [pc, #384]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001e52:	f002 f89f 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001e5c:	f000 fca8 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e60:	230b      	movs	r3, #11
 8001e62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001e64:	2304      	movs	r3, #4
 8001e66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4859      	ldr	r0, [pc, #356]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001e6e:	f002 f891 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001e78:	f000 fc9a 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001e80:	2305      	movs	r3, #5
 8001e82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e84:	463b      	mov	r3, r7
 8001e86:	4619      	mov	r1, r3
 8001e88:	4852      	ldr	r0, [pc, #328]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001e8a:	f002 f883 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001e94:	f000 fc8c 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001e98:	230c      	movs	r3, #12
 8001e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001e9c:	2306      	movs	r3, #6
 8001e9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	484b      	ldr	r0, [pc, #300]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001ea6:	f002 f875 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001eb0:	f000 fc7e 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001eb4:	230e      	movs	r3, #14
 8001eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001eb8:	2307      	movs	r3, #7
 8001eba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4844      	ldr	r0, [pc, #272]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001ec2:	f002 f867 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001ecc:	f000 fc70 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001ed0:	230d      	movs	r3, #13
 8001ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed8:	463b      	mov	r3, r7
 8001eda:	4619      	mov	r1, r3
 8001edc:	483d      	ldr	r0, [pc, #244]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001ede:	f002 f859 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001ee8:	f000 fc62 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001eec:	2307      	movs	r3, #7
 8001eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001ef0:	2309      	movs	r3, #9
 8001ef2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4836      	ldr	r0, [pc, #216]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001efa:	f002 f84b 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001f04:	f000 fc54 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4619      	mov	r1, r3
 8001f14:	482f      	ldr	r0, [pc, #188]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001f16:	f002 f83d 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001f20:	f000 fc46 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f24:	2306      	movs	r3, #6
 8001f26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001f28:	230b      	movs	r3, #11
 8001f2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4828      	ldr	r0, [pc, #160]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001f32:	f002 f82f 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001f3c:	f000 fc38 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001f44:	230c      	movs	r3, #12
 8001f46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4821      	ldr	r0, [pc, #132]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001f4e:	f002 f821 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001f58:	f000 fc2a 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001f5c:	2305      	movs	r3, #5
 8001f5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001f60:	230d      	movs	r3, #13
 8001f62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f64:	463b      	mov	r3, r7
 8001f66:	4619      	mov	r1, r3
 8001f68:	481a      	ldr	r0, [pc, #104]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001f6a:	f002 f813 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001f74:	f000 fc1c 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001f7c:	230e      	movs	r3, #14
 8001f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f80:	463b      	mov	r3, r7
 8001f82:	4619      	mov	r1, r3
 8001f84:	4813      	ldr	r0, [pc, #76]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001f86:	f002 f805 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8001f90:	f000 fc0e 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f94:	2304      	movs	r3, #4
 8001f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8001f98:	230f      	movs	r3, #15
 8001f9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001fa2:	f001 fff7 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8001fac:	f000 fc00 	bl	80027b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb8:	463b      	mov	r3, r7
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_ADC1_Init+0x23c>)
 8001fbe:	f001 ffe9 	bl	8003f94 <HAL_ADC_ConfigChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8001fc8:	f000 fbf2 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200004e4 	.word	0x200004e4
 8001fd8:	40012000 	.word	0x40012000
 8001fdc:	0f000001 	.word	0x0f000001

08001fe0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_I2C1_Init+0x50>)
 8001fe6:	4a13      	ldr	r2, [pc, #76]	; (8002034 <MX_I2C1_Init+0x54>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_I2C1_Init+0x50>)
 8001fec:	4a12      	ldr	r2, [pc, #72]	; (8002038 <MX_I2C1_Init+0x58>)
 8001fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_I2C1_Init+0x50>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <MX_I2C1_Init+0x50>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_I2C1_Init+0x50>)
 8001ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002002:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <MX_I2C1_Init+0x50>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_I2C1_Init+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <MX_I2C1_Init+0x50>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_I2C1_Init+0x50>)
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_I2C1_Init+0x50>)
 800201e:	f003 f919 	bl	8005254 <HAL_I2C_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002028:	f000 fbc2 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000410 	.word	0x20000410
 8002034:	40005400 	.word	0x40005400
 8002038:	000186a0 	.word	0x000186a0

0800203c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <MX_SPI2_Init+0x64>)
 8002042:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <MX_SPI2_Init+0x68>)
 8002044:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <MX_SPI2_Init+0x64>)
 8002048:	f44f 7282 	mov.w	r2, #260	; 0x104
 800204c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <MX_SPI2_Init+0x64>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <MX_SPI2_Init+0x64>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_SPI2_Init+0x64>)
 800205c:	2202      	movs	r2, #2
 800205e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <MX_SPI2_Init+0x64>)
 8002062:	2201      	movs	r2, #1
 8002064:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <MX_SPI2_Init+0x64>)
 8002068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800206c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MX_SPI2_Init+0x64>)
 8002070:	2228      	movs	r2, #40	; 0x28
 8002072:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <MX_SPI2_Init+0x64>)
 8002076:	2200      	movs	r2, #0
 8002078:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <MX_SPI2_Init+0x64>)
 800207c:	2200      	movs	r2, #0
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <MX_SPI2_Init+0x64>)
 8002082:	2200      	movs	r2, #0
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <MX_SPI2_Init+0x64>)
 8002088:	220a      	movs	r2, #10
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800208c:	4804      	ldr	r0, [pc, #16]	; (80020a0 <MX_SPI2_Init+0x64>)
 800208e:	f003 fe8f 	bl	8005db0 <HAL_SPI_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002098:	f000 fb8a 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000378 	.word	0x20000378
 80020a4:	40003800 	.word	0x40003800

080020a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	2224      	movs	r2, #36	; 0x24
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f006 f81c 	bl	80080f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <MX_TIM1_Init+0xa8>)
 80020c6:	4a23      	ldr	r2, [pc, #140]	; (8002154 <MX_TIM1_Init+0xac>)
 80020c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <MX_TIM1_Init+0xa8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <MX_TIM1_Init+0xa8>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2047;
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <MX_TIM1_Init+0xa8>)
 80020d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <MX_TIM1_Init+0xa8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <MX_TIM1_Init+0xa8>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <MX_TIM1_Init+0xa8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020f0:	2303      	movs	r3, #3
 80020f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020f8:	2301      	movs	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002108:	2301      	movs	r3, #1
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	4619      	mov	r1, r3
 800211a:	480d      	ldr	r0, [pc, #52]	; (8002150 <MX_TIM1_Init+0xa8>)
 800211c:	f004 fcd8 	bl	8006ad0 <HAL_TIM_Encoder_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002126:	f000 fb43 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4806      	ldr	r0, [pc, #24]	; (8002150 <MX_TIM1_Init+0xa8>)
 8002138:	f005 fa48 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002142:	f000 fb35 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	3730      	adds	r7, #48	; 0x30
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000060c 	.word	0x2000060c
 8002154:	40010000 	.word	0x40010000

08002158 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	; 0x30
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	2224      	movs	r2, #36	; 0x24
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f005 ffc4 	bl	80080f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <MX_TIM3_Init+0xa0>)
 8002176:	4a21      	ldr	r2, [pc, #132]	; (80021fc <MX_TIM3_Init+0xa4>)
 8002178:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <MX_TIM3_Init+0xa0>)
 800217c:	2200      	movs	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <MX_TIM3_Init+0xa0>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2047;
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <MX_TIM3_Init+0xa0>)
 8002188:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800218c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <MX_TIM3_Init+0xa0>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <MX_TIM3_Init+0xa0>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800219a:	2303      	movs	r3, #3
 800219c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021a2:	2301      	movs	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021b2:	2301      	movs	r3, #1
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	4619      	mov	r1, r3
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <MX_TIM3_Init+0xa0>)
 80021c6:	f004 fc83 	bl	8006ad0 <HAL_TIM_Encoder_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80021d0:	f000 faee 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_TIM3_Init+0xa0>)
 80021e2:	f005 f9f3 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80021ec:	f000 fae0 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	3730      	adds	r7, #48	; 0x30
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200004a4 	.word	0x200004a4
 80021fc:	40000400 	.word	0x40000400

08002200 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002206:	f107 0320 	add.w	r3, r7, #32
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
 800221e:	615a      	str	r2, [r3, #20]
 8002220:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002222:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <MX_TIM4_Init+0xc0>)
 8002224:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <MX_TIM4_Init+0xc4>)
 8002226:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <MX_TIM4_Init+0xc0>)
 800222a:	2202      	movs	r2, #2
 800222c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222e:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <MX_TIM4_Init+0xc0>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <MX_TIM4_Init+0xc0>)
 8002236:	f240 32e7 	movw	r2, #999	; 0x3e7
 800223a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <MX_TIM4_Init+0xc0>)
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <MX_TIM4_Init+0xc0>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002248:	481d      	ldr	r0, [pc, #116]	; (80022c0 <MX_TIM4_Init+0xc0>)
 800224a:	f004 fb7f 	bl	800694c <HAL_TIM_PWM_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002254:	f000 faac 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002260:	f107 0320 	add.w	r3, r7, #32
 8002264:	4619      	mov	r1, r3
 8002266:	4816      	ldr	r0, [pc, #88]	; (80022c0 <MX_TIM4_Init+0xc0>)
 8002268:	f005 f9b0 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002272:	f000 fa9d 	bl	80027b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002276:	2360      	movs	r3, #96	; 0x60
 8002278:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2200      	movs	r2, #0
 800228a:	4619      	mov	r1, r3
 800228c:	480c      	ldr	r0, [pc, #48]	; (80022c0 <MX_TIM4_Init+0xc0>)
 800228e:	f004 fe39 	bl	8006f04 <HAL_TIM_PWM_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002298:	f000 fa8a 	bl	80027b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	2204      	movs	r2, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4807      	ldr	r0, [pc, #28]	; (80022c0 <MX_TIM4_Init+0xc0>)
 80022a4:	f004 fe2e 	bl	8006f04 <HAL_TIM_PWM_ConfigChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80022ae:	f000 fa7f 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022b2:	4803      	ldr	r0, [pc, #12]	; (80022c0 <MX_TIM4_Init+0xc0>)
 80022b4:	f000 fec6 	bl	8003044 <HAL_TIM_MspPostInit>

}
 80022b8:	bf00      	nop
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200003d0 	.word	0x200003d0
 80022c4:	40000800 	.word	0x40000800

080022c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ce:	463b      	mov	r3, r7
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <MX_TIM6_Init+0x64>)
 80022d8:	4a15      	ldr	r2, [pc, #84]	; (8002330 <MX_TIM6_Init+0x68>)
 80022da:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <MX_TIM6_Init+0x64>)
 80022de:	2204      	movs	r2, #4
 80022e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <MX_TIM6_Init+0x64>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16799;
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <MX_TIM6_Init+0x64>)
 80022ea:	f244 129f 	movw	r2, #16799	; 0x419f
 80022ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <MX_TIM6_Init+0x64>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022f6:	480d      	ldr	r0, [pc, #52]	; (800232c <MX_TIM6_Init+0x64>)
 80022f8:	f004 faae 	bl	8006858 <HAL_TIM_Base_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002302:	f000 fa55 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800230e:	463b      	mov	r3, r7
 8002310:	4619      	mov	r1, r3
 8002312:	4806      	ldr	r0, [pc, #24]	; (800232c <MX_TIM6_Init+0x64>)
 8002314:	f005 f95a 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800231e:	f000 fa47 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200005cc 	.word	0x200005cc
 8002330:	40001000 	.word	0x40001000

08002334 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_TIM10_Init+0x40>)
 800233a:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <MX_TIM10_Init+0x44>)
 800233c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <MX_TIM10_Init+0x40>)
 8002340:	2204      	movs	r2, #4
 8002342:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <MX_TIM10_Init+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <MX_TIM10_Init+0x40>)
 800234c:	f248 323f 	movw	r2, #33599	; 0x833f
 8002350:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <MX_TIM10_Init+0x40>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_TIM10_Init+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_TIM10_Init+0x40>)
 8002360:	f004 fa7a 	bl	8006858 <HAL_TIM_Base_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800236a:	f000 fa21 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000464 	.word	0x20000464
 8002378:	40014400 	.word	0x40014400

0800237c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_TIM11_Init+0x40>)
 8002382:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <MX_TIM11_Init+0x44>)
 8002384:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <MX_TIM11_Init+0x40>)
 8002388:	2204      	movs	r2, #4
 800238a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <MX_TIM11_Init+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <MX_TIM11_Init+0x40>)
 8002394:	f248 323f 	movw	r2, #33599	; 0x833f
 8002398:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <MX_TIM11_Init+0x40>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <MX_TIM11_Init+0x40>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_TIM11_Init+0x40>)
 80023a8:	f004 fa56 	bl	8006858 <HAL_TIM_Base_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80023b2:	f000 f9fd 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000052c 	.word	0x2000052c
 80023c0:	40014800 	.word	0x40014800

080023c4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80023c8:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_TIM14_Init+0x40>)
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <MX_TIM14_Init+0x44>)
 80023cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <MX_TIM14_Init+0x40>)
 80023d0:	2204      	movs	r2, #4
 80023d2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_TIM14_Init+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <MX_TIM14_Init+0x40>)
 80023dc:	f248 323f 	movw	r2, #33599	; 0x833f
 80023e0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_TIM14_Init+0x40>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_TIM14_Init+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_TIM14_Init+0x40>)
 80023f0:	f004 fa32 	bl	8006858 <HAL_TIM_Base_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80023fa:	f000 f9d9 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000068c 	.word	0x2000068c
 8002408:	40002000 	.word	0x40002000

0800240c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <MX_USART6_UART_Init+0x4c>)
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <MX_USART6_UART_Init+0x50>)
 8002414:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <MX_USART6_UART_Init+0x4c>)
 8002418:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800241c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_USART6_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <MX_USART6_UART_Init+0x4c>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <MX_USART6_UART_Init+0x4c>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MX_USART6_UART_Init+0x4c>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_USART6_UART_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_USART6_UART_Init+0x4c>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_USART6_UART_Init+0x4c>)
 8002444:	f005 f952 	bl	80076ec <HAL_UART_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800244e:	f000 f9af 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000064c 	.word	0x2000064c
 800245c:	40011400 	.word	0x40011400

08002460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_DMA_Init+0x3c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <MX_DMA_Init+0x3c>)
 8002470:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_DMA_Init+0x3c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	2038      	movs	r0, #56	; 0x38
 8002488:	f002 f8ff 	bl	800468a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800248c:	2038      	movs	r0, #56	; 0x38
 800248e:	f002 f918 	bl	80046c2 <HAL_NVIC_EnableIRQ>

}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800

080024a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	4b69      	ldr	r3, [pc, #420]	; (8002660 <MX_GPIO_Init+0x1c0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a68      	ldr	r2, [pc, #416]	; (8002660 <MX_GPIO_Init+0x1c0>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b66      	ldr	r3, [pc, #408]	; (8002660 <MX_GPIO_Init+0x1c0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <MX_GPIO_Init+0x1c0>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a61      	ldr	r2, [pc, #388]	; (8002660 <MX_GPIO_Init+0x1c0>)
 80024dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <MX_GPIO_Init+0x1c0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <MX_GPIO_Init+0x1c0>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a5a      	ldr	r2, [pc, #360]	; (8002660 <MX_GPIO_Init+0x1c0>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b58      	ldr	r3, [pc, #352]	; (8002660 <MX_GPIO_Init+0x1c0>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	4b54      	ldr	r3, [pc, #336]	; (8002660 <MX_GPIO_Init+0x1c0>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a53      	ldr	r2, [pc, #332]	; (8002660 <MX_GPIO_Init+0x1c0>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b51      	ldr	r3, [pc, #324]	; (8002660 <MX_GPIO_Init+0x1c0>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4b4d      	ldr	r3, [pc, #308]	; (8002660 <MX_GPIO_Init+0x1c0>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a4c      	ldr	r2, [pc, #304]	; (8002660 <MX_GPIO_Init+0x1c0>)
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <MX_GPIO_Init+0x1c0>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8002548:	4846      	ldr	r0, [pc, #280]	; (8002664 <MX_GPIO_Init+0x1c4>)
 800254a:	f002 fe69 	bl	8005220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 800254e:	2200      	movs	r2, #0
 8002550:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002554:	4844      	ldr	r0, [pc, #272]	; (8002668 <MX_GPIO_Init+0x1c8>)
 8002556:	f002 fe63 	bl	8005220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002560:	4842      	ldr	r0, [pc, #264]	; (800266c <MX_GPIO_Init+0x1cc>)
 8002562:	f002 fe5d 	bl	8005220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	2104      	movs	r1, #4
 800256a:	4841      	ldr	r0, [pc, #260]	; (8002670 <MX_GPIO_Init+0x1d0>)
 800256c:	f002 fe58 	bl	8005220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8002570:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002576:	2301      	movs	r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4836      	ldr	r0, [pc, #216]	; (8002664 <MX_GPIO_Init+0x1c4>)
 800258a:	f002 fc95 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 800258e:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8002592:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4830      	ldr	r0, [pc, #192]	; (8002664 <MX_GPIO_Init+0x1c4>)
 80025a4:	f002 fc88 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 80025a8:	f640 0304 	movw	r3, #2052	; 0x804
 80025ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	482a      	ldr	r0, [pc, #168]	; (8002668 <MX_GPIO_Init+0x1c8>)
 80025be:	f002 fc7b 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 80025c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c8:	2301      	movs	r3, #1
 80025ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4619      	mov	r1, r3
 80025da:	4823      	ldr	r0, [pc, #140]	; (8002668 <MX_GPIO_Init+0x1c8>)
 80025dc:	f002 fc6c 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 80025e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	4619      	mov	r1, r3
 80025f8:	481c      	ldr	r0, [pc, #112]	; (800266c <MX_GPIO_Init+0x1cc>)
 80025fa:	f002 fc5d 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 80025fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	4619      	mov	r1, r3
 8002612:	4816      	ldr	r0, [pc, #88]	; (800266c <MX_GPIO_Init+0x1cc>)
 8002614:	f002 fc50 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800262a:	2301      	movs	r3, #1
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4619      	mov	r1, r3
 8002634:	480d      	ldr	r0, [pc, #52]	; (800266c <MX_GPIO_Init+0x1cc>)
 8002636:	f002 fc3f 	bl	8004eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 800263a:	2304      	movs	r3, #4
 800263c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4619      	mov	r1, r3
 8002650:	4807      	ldr	r0, [pc, #28]	; (8002670 <MX_GPIO_Init+0x1d0>)
 8002652:	f002 fc31 	bl	8004eb8 <HAL_GPIO_Init>
}
 8002656:	bf00      	nop
 8002658:	3728      	adds	r7, #40	; 0x28
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	40020800 	.word	0x40020800
 8002668:	40020400 	.word	0x40020400
 800266c:	40020000 	.word	0x40020000
 8002670:	40020c00 	.word	0x40020c00

08002674 <running_initialize>:

/* USER CODE BEGIN 4 */
void running_initialize()
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b095      	sub	sp, #84	; 0x54
 8002678:	af14      	add	r7, sp, #80	; 0x50
  analog_set(flashbuffer);
 800267a:	4c11      	ldr	r4, [pc, #68]	; (80026c0 <running_initialize+0x4c>)
 800267c:	4668      	mov	r0, sp
 800267e:	f104 0310 	add.w	r3, r4, #16
 8002682:	2250      	movs	r2, #80	; 0x50
 8002684:	4619      	mov	r1, r3
 8002686:	f005 fd27 	bl	80080d8 <memcpy>
 800268a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800268e:	f7fe fedf 	bl	8001450 <analog_set>
	HAL_Delay(3000);
 8002692:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002696:	f001 fac5 	bl	8003c24 <HAL_Delay>
	start_analog();
 800269a:	f000 f855 	bl	8002748 <start_analog>
  velotrace_start();
 800269e:	f001 f8e7 	bl	8003870 <velotrace_start>
	start_encoder();
 80026a2:	f000 f85d 	bl	8002760 <start_encoder>
  sidesensor_init();
 80026a6:	f000 f989 	bl	80029bc <sidesensor_init>
  tim6_init();
 80026aa:	f000 ff57 	bl	800355c <tim6_init>
  tim10_init();
 80026ae:	f000 fea3 	bl	80033f8 <tim10_init>
  start_motor();
 80026b2:	f000 f811 	bl	80026d8 <start_motor>
}
 80026b6:	bf00      	nop
 80026b8:	3704      	adds	r7, #4
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd90      	pop	{r4, r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000318 	.word	0x20000318

080026c4 <running_finalize>:

void running_finalize()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  end_motor();
 80026c8:	f000 f80d 	bl	80026e6 <end_motor>
	end_analog();
 80026cc:	f000 f842 	bl	8002754 <end_analog>
	end_encoder();
 80026d0:	f000 f84c 	bl	800276c <end_encoder>
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <start_motor>:

void start_motor()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  motor_enable(1);
 80026dc:	2001      	movs	r0, #1
 80026de:	f000 f873 	bl	80027c8 <motor_enable>
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <end_motor>:

void end_motor()
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	af00      	add	r7, sp, #0
  motor_enable(0);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f000 f86c 	bl	80027c8 <motor_enable>
  tim6_fin();
 80026f0:	f000 ff54 	bl	800359c <tim6_fin>
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <imu_initialize>:

void imu_initialize()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
#if USE_IMU
	printf("Starting SPI2 (IMU)\r\n");
 80026fe:	480e      	ldr	r0, [pc, #56]	; (8002738 <imu_initialize+0x40>)
 8002700:	f006 fc00 	bl	8008f04 <puts>
	uint8_t wai, ret;
	ret = IMU_init(&wai);
 8002704:	1dbb      	adds	r3, r7, #6
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fcce 	bl	80010a8 <IMU_init>
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
	printf("who_am_i = %d\r\n", wai);
 8002710:	79bb      	ldrb	r3, [r7, #6]
 8002712:	4619      	mov	r1, r3
 8002714:	4809      	ldr	r0, [pc, #36]	; (800273c <imu_initialize+0x44>)
 8002716:	f006 fb6f 	bl	8008df8 <iprintf>
	if (ret == 1) {
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d103      	bne.n	8002728 <imu_initialize+0x30>
		printf("SPI INIT COLLECT!\r\n");
 8002720:	4807      	ldr	r0, [pc, #28]	; (8002740 <imu_initialize+0x48>)
 8002722:	f006 fbef 	bl	8008f04 <puts>
	} else {
		printf("SPI INIT FAILURE x_x \r\n");
	}
#endif

}
 8002726:	e002      	b.n	800272e <imu_initialize+0x36>
		printf("SPI INIT FAILURE x_x \r\n");
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <imu_initialize+0x4c>)
 800272a:	f006 fbeb 	bl	8008f04 <puts>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	0800ca90 	.word	0x0800ca90
 800273c:	0800caa8 	.word	0x0800caa8
 8002740:	0800cab8 	.word	0x0800cab8
 8002744:	0800cacc 	.word	0x0800cacc

08002748 <start_analog>:

void start_analog()
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  // start_analog();
  analog_sensor_init();
 800274c:	f7fe fefe 	bl	800154c <analog_sensor_init>
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <end_analog>:

void end_analog()
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  // end_alanog();
  analog_sensor_finalize();
 8002758:	f7fe ff14 	bl	8001584 <analog_sensor_finalize>
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}

08002760 <start_encoder>:

void start_encoder()
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  encoder_start();
 8002764:	f7ff f86e 	bl	8001844 <encoder_start>
}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}

0800276c <end_encoder>:
void end_flash()
{
}

void end_encoder()
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  encoder_finalize();
 8002770:	f7ff f850 	bl	8001814 <encoder_finalize>
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}

08002778 <main_init>:

void main_init()
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  tim11_init();
 800277c:	f000 fee2 	bl	8003544 <tim11_init>
  motor_init();
 8002780:	f000 f81b 	bl	80027ba <motor_init>
  rotary_init();
 8002784:	f7fe fd7c 	bl	8001280 <rotary_init>
  encoder_init();
 8002788:	f7ff f82e 	bl	80017e8 <encoder_init>
  velotrace_init(1);
 800278c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80027a8 <main_init+0x30>
 8002790:	f001 f886 	bl	80038a0 <velotrace_init>
  tracer_init(1);
 8002794:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80027a8 <main_init+0x30>
 8002798:	f000 ffc6 	bl	8003728 <tracer_init>
  analog_init();
 800279c:	f7fe fec4 	bl	8001528 <analog_init>
//  pid_gain_initialize();
  imu_initialize();
 80027a0:	f7ff ffaa 	bl	80026f8 <imu_initialize>
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	00000000 	.word	0x00000000
 80027ac:	3ff00000 	.word	0x3ff00000

080027b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b4:	b672      	cpsid	i
}
 80027b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027b8:	e7fe      	b.n	80027b8 <Error_Handler+0x8>

080027ba <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	af00      	add	r7, sp, #0
    motor_enable(0);
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f802 	bl	80027c8 <motor_enable>
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <motor_enable+0x28>)
 80027e2:	701a      	strb	r2, [r3, #0]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	200006cc 	.word	0x200006cc

080027f4 <motor_read_enable>:

char motor_read_enable()
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
    return enable;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <motor_read_enable+0x14>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	200006cc 	.word	0x200006cc

0800280c <motor_set>:

void motor_set(double motor_left_, double motor_right_)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	ed87 0b02 	vstr	d0, [r7, #8]
 8002816:	ed87 1b00 	vstr	d1, [r7]
    if(motor_left_ < 0)
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002826:	f7fe f959 	bl	8000adc <__aeabi_dcmplt>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <motor_set+0x3c>
    {
        HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002830:	2200      	movs	r2, #0
 8002832:	2104      	movs	r1, #4
 8002834:	483a      	ldr	r0, [pc, #232]	; (8002920 <motor_set+0x114>)
 8002836:	f002 fcf3 	bl	8005220 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e004      	b.n	8002852 <motor_set+0x46>
    }
    else
    {
        HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_SET);
 8002848:	2201      	movs	r2, #1
 800284a:	2104      	movs	r1, #4
 800284c:	4834      	ldr	r0, [pc, #208]	; (8002920 <motor_set+0x114>)
 800284e:	f002 fce7 	bl	8005220 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800285e:	f7fe f93d 	bl	8000adc <__aeabi_dcmplt>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00c      	beq.n	8002882 <motor_set+0x76>
    {
        HAL_GPIO_WritePin(DRV2_PH_GPIO_Port, DRV2_PH_Pin, GPIO_PIN_SET);
 8002868:	2201      	movs	r2, #1
 800286a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800286e:	482d      	ldr	r0, [pc, #180]	; (8002924 <motor_set+0x118>)
 8002870:	f002 fcd6 	bl	8005220 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	e005      	b.n	800288e <motor_set+0x82>
    }
    else
    {
        HAL_GPIO_WritePin(DRV2_PH_GPIO_Port, DRV2_PH_Pin, GPIO_PIN_RESET);
 8002882:	2200      	movs	r2, #0
 8002884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002888:	4826      	ldr	r0, [pc, #152]	; (8002924 <motor_set+0x118>)
 800288a:	f002 fcc9 	bl	8005220 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b25      	ldr	r3, [pc, #148]	; (8002928 <motor_set+0x11c>)
 8002894:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002898:	f7fe f93e 	bl	8000b18 <__aeabi_dcmpgt>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <motor_set+0x9e>
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <motor_set+0x11c>)
 80028a8:	e001      	b.n	80028ae <motor_set+0xa2>
 80028aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <motor_set+0x11c>)
 80028b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028bc:	f7fe f92c 	bl	8000b18 <__aeabi_dcmpgt>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <motor_set+0xc2>
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <motor_set+0x11c>)
 80028cc:	e001      	b.n	80028d2 <motor_set+0xc6>
 80028ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028d2:	e9c7 2300 	strd	r2, r3, [r7]

    if(enable)
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <motor_set+0x120>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <motor_set+0xea>
    {
        motor_left_ = 0;
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
        motor_right_ = 0;
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	e9c7 2300 	strd	r2, r3, [r7]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <motor_set+0x124>)
 80028f8:	681c      	ldr	r4, [r3, #0]
 80028fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028fe:	f7fe f953 	bl	8000ba8 <__aeabi_d2uiz>
 8002902:	4603      	mov	r3, r0
 8002904:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <motor_set+0x124>)
 8002908:	681c      	ldr	r4, [r3, #0]
 800290a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800290e:	f7fe f94b 	bl	8000ba8 <__aeabi_d2uiz>
 8002912:	4603      	mov	r3, r0
 8002914:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bd90      	pop	{r4, r7, pc}
 800291e:	bf00      	nop
 8002920:	40020c00 	.word	0x40020c00
 8002924:	40020800 	.word	0x40020800
 8002928:	408f4000 	.word	0x408f4000
 800292c:	200006cc 	.word	0x200006cc
 8002930:	200003d0 	.word	0x200003d0

08002934 <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 800293c:	1d39      	adds	r1, r7, #4
 800293e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002942:	2201      	movs	r2, #1
 8002944:	4803      	ldr	r0, [pc, #12]	; (8002954 <__io_putchar+0x20>)
 8002946:	f004 ff1e 	bl	8007786 <HAL_UART_Transmit>
	return ch;
 800294a:	687b      	ldr	r3, [r7, #4]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	2000064c 	.word	0x2000064c

08002958 <d_print>:

void d_print()
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
	// debug print
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <sidesensor_read>:
#include "sidesensor.h"

unsigned char subsensbuf, marker, sidedeltacount, markerstate, rightmarkercount;

uint8_t sidesensor_read()
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(SubSens1_GPIO_Port, SubSens1_Pin) ? 1 : 0;
 8002972:	2104      	movs	r1, #4
 8002974:	4810      	ldr	r0, [pc, #64]	; (80029b8 <sidesensor_read+0x50>)
 8002976:	f002 fc3b 	bl	80051f0 <HAL_GPIO_ReadPin>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf0c      	ite	eq
 8002980:	2301      	moveq	r3, #1
 8002982:	2300      	movne	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	b2da      	uxtb	r2, r3
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	4413      	add	r3, r2
 800298c:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(SubSens2_GPIO_Port, SubSens2_Pin) ? 2 : 0;
 800298e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002992:	4809      	ldr	r0, [pc, #36]	; (80029b8 <sidesensor_read+0x50>)
 8002994:	f002 fc2c 	bl	80051f0 <HAL_GPIO_ReadPin>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <sidesensor_read+0x3a>
 800299e:	2302      	movs	r3, #2
 80029a0:	e000      	b.n	80029a4 <sidesensor_read+0x3c>
 80029a2:	2300      	movs	r3, #0
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	4413      	add	r3, r2
 80029aa:	71fb      	strb	r3, [r7, #7]

    return subsens;
 80029ac:	79fb      	ldrb	r3, [r7, #7]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40020400 	.word	0x40020400

080029bc <sidesensor_init>:

void sidesensor_init()
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
    marker = 0;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <sidesensor_init+0x2c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <sidesensor_init+0x30>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <sidesensor_init+0x34>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
    markerstate = 0;
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <sidesensor_init+0x38>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <sidesensor_init+0x3c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim14);
 80029de:	4807      	ldr	r0, [pc, #28]	; (80029fc <sidesensor_init+0x40>)
 80029e0:	f003 ff65 	bl	80068ae <HAL_TIM_Base_Start_IT>
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200006d0 	.word	0x200006d0
 80029ec:	200006cd 	.word	0x200006cd
 80029f0:	200006ce 	.word	0x200006ce
 80029f4:	200006cf 	.word	0x200006cf
 80029f8:	200006d1 	.word	0x200006d1
 80029fc:	2000068c 	.word	0x2000068c

08002a00 <sidesensor_right>:

void sidesensor_right()
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
    markerstate = 0b01;
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <sidesensor_right+0x28>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
    if(rightmarkercount == 1 - 1)
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <sidesensor_right+0x2c>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
    }
    else if(rightmarkercount == 2 - 1)
    {
        // stop
    }
    rightmarkercount++;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <sidesensor_right+0x2c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <sidesensor_right+0x2c>)
 8002a1a:	701a      	strb	r2, [r3, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	200006cf 	.word	0x200006cf
 8002a2c:	200006d1 	.word	0x200006d1

08002a30 <sidesensor_left>:

void sidesensor_left()
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
    // curve
    markerstate = 0b10;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <sidesensor_left+0x14>)
 8002a36:	2202      	movs	r2, #2
 8002a38:	701a      	strb	r2, [r3, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	200006cf 	.word	0x200006cf

08002a48 <sidesensor_cross>:

void sidesensor_cross()
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
    // cross
    markerstate = 0b11;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <sidesensor_cross+0x14>)
 8002a4e:	2203      	movs	r2, #3
 8002a50:	701a      	strb	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	200006cf 	.word	0x200006cf

08002a60 <sidesensor_function>:

void sidesensor_function()
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 8002a66:	f7ff ff7f 	bl	8002968 <sidesensor_read>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]

	if(subsens != subsensbuf)
 8002a6e:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <sidesensor_function+0xac>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	79fa      	ldrb	r2, [r7, #7]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d044      	beq.n	8002b02 <sidesensor_function+0xa2>
	{
		subsensbuf = subsens;
 8002a78:	4a24      	ldr	r2, [pc, #144]	; (8002b0c <sidesensor_function+0xac>)
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 8002a7e:	79fa      	ldrb	r2, [r7, #7]
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <sidesensor_function+0xb0>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <sidesensor_function+0xb4>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <sidesensor_function+0xb4>)
 8002a96:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d12b      	bne.n	8002af6 <sidesensor_function+0x96>
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <sidesensor_function+0xb0>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d027      	beq.n	8002af6 <sidesensor_function+0x96>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <sidesensor_function+0xb4>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <sidesensor_function+0xb4>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	109b      	asrs	r3, r3, #2
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8002abe:	797b      	ldrb	r3, [r7, #5]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10e      	bne.n	8002ae2 <sidesensor_function+0x82>
			{
				if (first == 0b01)
 8002ac4:	79bb      	ldrb	r3, [r7, #6]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <sidesensor_function+0x70>
				{
					// right -> start / stop
                    sidesensor_right();
 8002aca:	f7ff ff99 	bl	8002a00 <sidesensor_right>
 8002ace:	e00a      	b.n	8002ae6 <sidesensor_function+0x86>
				}
				else if (first == 0b10)
 8002ad0:	79bb      	ldrb	r3, [r7, #6]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d102      	bne.n	8002adc <sidesensor_function+0x7c>
				{
					// left -> curve
                    sidesensor_left();
 8002ad6:	f7ff ffab 	bl	8002a30 <sidesensor_left>
 8002ada:	e004      	b.n	8002ae6 <sidesensor_function+0x86>
				}
				else
				{
					// cross
                    sidesensor_cross();
 8002adc:	f7ff ffb4 	bl	8002a48 <sidesensor_cross>
 8002ae0:	e001      	b.n	8002ae6 <sidesensor_function+0x86>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8002ae2:	f7ff ffb1 	bl	8002a48 <sidesensor_cross>
			}
			sidedeltacount = 0;
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <sidesensor_function+0xb0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <sidesensor_function+0xb4>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
		{
 8002af2:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 8002af4:	e005      	b.n	8002b02 <sidesensor_function+0xa2>
			sidedeltacount++;
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <sidesensor_function+0xb0>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	3301      	adds	r3, #1
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <sidesensor_function+0xb0>)
 8002b00:	701a      	strb	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200006cd 	.word	0x200006cd
 8002b10:	200006ce 	.word	0x200006ce
 8002b14:	200006d0 	.word	0x200006d0

08002b18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_MspInit+0x54>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <HAL_MspInit+0x54>)
 8002b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <HAL_MspInit+0x54>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_MspInit+0x54>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <HAL_MspInit+0x54>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <HAL_MspInit+0x54>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	210f      	movs	r1, #15
 8002b5a:	f06f 0003 	mvn.w	r0, #3
 8002b5e:	f001 fd94 	bl	800468a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800

08002b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a49      	ldr	r2, [pc, #292]	; (8002cb4 <HAL_ADC_MspInit+0x144>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	f040 808c 	bne.w	8002cac <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	4a46      	ldr	r2, [pc, #280]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba4:	4b44      	ldr	r3, [pc, #272]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	4a3f      	ldr	r2, [pc, #252]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4a38      	ldr	r2, [pc, #224]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6313      	str	r3, [r2, #48]	; 0x30
 8002bdc:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_ADC_MspInit+0x148>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c04:	233f      	movs	r3, #63	; 0x3f
 8002c06:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c10:	f107 031c 	add.w	r3, r7, #28
 8002c14:	4619      	mov	r1, r3
 8002c16:	4829      	ldr	r0, [pc, #164]	; (8002cbc <HAL_ADC_MspInit+0x14c>)
 8002c18:	f002 f94e 	bl	8004eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c1c:	23ff      	movs	r3, #255	; 0xff
 8002c1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c20:	2303      	movs	r3, #3
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4824      	ldr	r0, [pc, #144]	; (8002cc0 <HAL_ADC_MspInit+0x150>)
 8002c30:	f002 f942 	bl	8004eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c34:	2303      	movs	r3, #3
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	4619      	mov	r1, r3
 8002c46:	481f      	ldr	r0, [pc, #124]	; (8002cc4 <HAL_ADC_MspInit+0x154>)
 8002c48:	f002 f936 	bl	8004eb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HAL_ADC_MspInit+0x15c>)
 8002c50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c6c:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c7a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c90:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002c92:	f001 fd31 	bl	80046f8 <HAL_DMA_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002c9c:	f7ff fd88 	bl	80027b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a09      	ldr	r2, [pc, #36]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ca6:	4a08      	ldr	r2, [pc, #32]	; (8002cc8 <HAL_ADC_MspInit+0x158>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cac:	bf00      	nop
 8002cae:	3730      	adds	r7, #48	; 0x30
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40012000 	.word	0x40012000
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	2000056c 	.word	0x2000056c
 8002ccc:	40026410 	.word	0x40026410

08002cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a19      	ldr	r2, [pc, #100]	; (8002d54 <HAL_I2C_MspInit+0x84>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d12c      	bne.n	8002d4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_I2C_MspInit+0x88>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <HAL_I2C_MspInit+0x88>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_I2C_MspInit+0x88>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d14:	2312      	movs	r3, #18
 8002d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d20:	2304      	movs	r3, #4
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4619      	mov	r1, r3
 8002d2a:	480c      	ldr	r0, [pc, #48]	; (8002d5c <HAL_I2C_MspInit+0x8c>)
 8002d2c:	f002 f8c4 	bl	8004eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_I2C_MspInit+0x88>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_I2C_MspInit+0x88>)
 8002d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_I2C_MspInit+0x88>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40005400 	.word	0x40005400
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020400 	.word	0x40020400

08002d60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_SPI_MspInit+0x84>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12c      	bne.n	8002ddc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_SPI_MspInit+0x88>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002dba:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dcc:	2305      	movs	r3, #5
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4805      	ldr	r0, [pc, #20]	; (8002dec <HAL_SPI_MspInit+0x8c>)
 8002dd8:	f002 f86e 	bl	8004eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ddc:	bf00      	nop
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40003800 	.word	0x40003800
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020400 	.word	0x40020400

08002df0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	; 0x30
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 031c 	add.w	r3, r7, #28
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ef8 <HAL_TIM_Encoder_MspInit+0x108>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d13d      	bne.n	8002e8e <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	4a38      	ldr	r2, [pc, #224]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6453      	str	r3, [r2, #68]	; 0x44
 8002e22:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a31      	ldr	r2, [pc, #196]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8002e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e60:	f107 031c 	add.w	r3, r7, #28
 8002e64:	4619      	mov	r1, r3
 8002e66:	4826      	ldr	r0, [pc, #152]	; (8002f00 <HAL_TIM_Encoder_MspInit+0x110>)
 8002e68:	f002 f826 	bl	8004eb8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2019      	movs	r0, #25
 8002e72:	f001 fc0a 	bl	800468a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e76:	2019      	movs	r0, #25
 8002e78:	f001 fc23 	bl	80046c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	201a      	movs	r0, #26
 8002e82:	f001 fc02 	bl	800468a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e86:	201a      	movs	r0, #26
 8002e88:	f001 fc1b 	bl	80046c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e8c:	e030      	b.n	8002ef0 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x114>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d12b      	bne.n	8002ef0 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	4a16      	ldr	r2, [pc, #88]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ea2:	f043 0302 	orr.w	r3, r3, #2
 8002ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	4a0f      	ldr	r2, [pc, #60]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8002ed0:	2330      	movs	r3, #48	; 0x30
 8002ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee4:	f107 031c 	add.w	r3, r7, #28
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4807      	ldr	r0, [pc, #28]	; (8002f08 <HAL_TIM_Encoder_MspInit+0x118>)
 8002eec:	f001 ffe4 	bl	8004eb8 <HAL_GPIO_Init>
}
 8002ef0:	bf00      	nop
 8002ef2:	3730      	adds	r7, #48	; 0x30
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020000 	.word	0x40020000
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40020400 	.word	0x40020400

08002f0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10d      	bne.n	8002f3a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_TIM_PWM_MspInit+0x40>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_TIM_PWM_MspInit+0x40>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_TIM_PWM_MspInit+0x40>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40000800 	.word	0x40000800
 8002f4c:	40023800 	.word	0x40023800

08002f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a34      	ldr	r2, [pc, #208]	; (8003030 <HAL_TIM_Base_MspInit+0xe0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d116      	bne.n	8002f90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	4b33      	ldr	r3, [pc, #204]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4a32      	ldr	r2, [pc, #200]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8002f6c:	f043 0310 	orr.w	r3, r3, #16
 8002f70:	6413      	str	r3, [r2, #64]	; 0x40
 8002f72:	4b30      	ldr	r3, [pc, #192]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	2036      	movs	r0, #54	; 0x36
 8002f84:	f001 fb81 	bl	800468a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f88:	2036      	movs	r0, #54	; 0x36
 8002f8a:	f001 fb9a 	bl	80046c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002f8e:	e04a      	b.n	8003026 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a28      	ldr	r2, [pc, #160]	; (8003038 <HAL_TIM_Base_MspInit+0xe8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d116      	bne.n	8002fc8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	4b25      	ldr	r3, [pc, #148]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a24      	ldr	r2, [pc, #144]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	2019      	movs	r0, #25
 8002fbc:	f001 fb65 	bl	800468a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fc0:	2019      	movs	r0, #25
 8002fc2:	f001 fb7e 	bl	80046c2 <HAL_NVIC_EnableIRQ>
}
 8002fc6:	e02e      	b.n	8003026 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <HAL_TIM_Base_MspInit+0xec>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d116      	bne.n	8003000 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	4b17      	ldr	r3, [pc, #92]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	4a16      	ldr	r2, [pc, #88]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8002fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	201a      	movs	r0, #26
 8002ff4:	f001 fb49 	bl	800468a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ff8:	201a      	movs	r0, #26
 8002ffa:	f001 fb62 	bl	80046c2 <HAL_NVIC_EnableIRQ>
}
 8002ffe:	e012      	b.n	8003026 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM14)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <HAL_TIM_Base_MspInit+0xf0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10d      	bne.n	8003026 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a08      	ldr	r2, [pc, #32]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_TIM_Base_MspInit+0xe4>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
}
 8003026:	bf00      	nop
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40001000 	.word	0x40001000
 8003034:	40023800 	.word	0x40023800
 8003038:	40014400 	.word	0x40014400
 800303c:	40014800 	.word	0x40014800
 8003040:	40002000 	.word	0x40002000

08003044 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a12      	ldr	r2, [pc, #72]	; (80030ac <HAL_TIM_MspPostInit+0x68>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d11d      	bne.n	80030a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_TIM_MspPostInit+0x6c>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <HAL_TIM_MspPostInit+0x6c>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_TIM_MspPostInit+0x6c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8003082:	23c0      	movs	r3, #192	; 0xc0
 8003084:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	2302      	movs	r3, #2
 8003088:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003092:	2302      	movs	r3, #2
 8003094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f107 030c 	add.w	r3, r7, #12
 800309a:	4619      	mov	r1, r3
 800309c:	4805      	ldr	r0, [pc, #20]	; (80030b4 <HAL_TIM_MspPostInit+0x70>)
 800309e:	f001 ff0b 	bl	8004eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80030a2:	bf00      	nop
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40000800 	.word	0x40000800
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020400 	.word	0x40020400

080030b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a19      	ldr	r2, [pc, #100]	; (800313c <HAL_UART_MspInit+0x84>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d12b      	bne.n	8003132 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	4b18      	ldr	r3, [pc, #96]	; (8003140 <HAL_UART_MspInit+0x88>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4a17      	ldr	r2, [pc, #92]	; (8003140 <HAL_UART_MspInit+0x88>)
 80030e4:	f043 0320 	orr.w	r3, r3, #32
 80030e8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_UART_MspInit+0x88>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_UART_MspInit+0x88>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a10      	ldr	r2, [pc, #64]	; (8003140 <HAL_UART_MspInit+0x88>)
 8003100:	f043 0304 	orr.w	r3, r3, #4
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_UART_MspInit+0x88>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003112:	23c0      	movs	r3, #192	; 0xc0
 8003114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311e:	2303      	movs	r3, #3
 8003120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003122:	2308      	movs	r3, #8
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003126:	f107 0314 	add.w	r3, r7, #20
 800312a:	4619      	mov	r1, r3
 800312c:	4805      	ldr	r0, [pc, #20]	; (8003144 <HAL_UART_MspInit+0x8c>)
 800312e:	f001 fec3 	bl	8004eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003132:	bf00      	nop
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40011400 	.word	0x40011400
 8003140:	40023800 	.word	0x40023800
 8003144:	40020800 	.word	0x40020800

08003148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800314c:	e7fe      	b.n	800314c <NMI_Handler+0x4>

0800314e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003152:	e7fe      	b.n	8003152 <HardFault_Handler+0x4>

08003154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003158:	e7fe      	b.n	8003158 <MemManage_Handler+0x4>

0800315a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800315e:	e7fe      	b.n	800315e <BusFault_Handler+0x4>

08003160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003164:	e7fe      	b.n	8003164 <UsageFault_Handler+0x4>

08003166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003194:	f000 fd26 	bl	8003be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}

0800319c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031a0:	4803      	ldr	r0, [pc, #12]	; (80031b0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80031a2:	f003 fda7 	bl	8006cf4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80031a6:	4803      	ldr	r0, [pc, #12]	; (80031b4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80031a8:	f003 fda4 	bl	8006cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	2000060c 	.word	0x2000060c
 80031b4:	20000464 	.word	0x20000464

080031b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031bc:	4803      	ldr	r0, [pc, #12]	; (80031cc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80031be:	f003 fd99 	bl	8006cf4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80031c2:	4803      	ldr	r0, [pc, #12]	; (80031d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80031c4:	f003 fd96 	bl	8006cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	2000060c 	.word	0x2000060c
 80031d0:	2000052c 	.word	0x2000052c

080031d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <TIM6_DAC_IRQHandler+0x10>)
 80031da:	f003 fd8b 	bl	8006cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200005cc 	.word	0x200005cc

080031e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <DMA2_Stream0_IRQHandler+0x10>)
 80031ee:	f001 fbf9 	bl	80049e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2000056c 	.word	0x2000056c

080031fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
	return 1;
 8003200:	2301      	movs	r3, #1
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <_kill>:

int _kill(int pid, int sig)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003216:	f004 ff35 	bl	8008084 <__errno>
 800321a:	4603      	mov	r3, r0
 800321c:	2216      	movs	r2, #22
 800321e:	601a      	str	r2, [r3, #0]
	return -1;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <_exit>:

void _exit (int status)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ffe7 	bl	800320c <_kill>
	while (1) {}		/* Make sure we hang here */
 800323e:	e7fe      	b.n	800323e <_exit+0x12>

08003240 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e00a      	b.n	8003268 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003252:	f3af 8000 	nop.w
 8003256:	4601      	mov	r1, r0
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	60ba      	str	r2, [r7, #8]
 800325e:	b2ca      	uxtb	r2, r1
 8003260:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3301      	adds	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	dbf0      	blt.n	8003252 <_read+0x12>
	}

return len;
 8003270:	687b      	ldr	r3, [r7, #4]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e009      	b.n	80032a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	60ba      	str	r2, [r7, #8]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fb4d 	bl	8002934 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	dbf1      	blt.n	800328c <_write+0x12>
	}
	return len;
 80032a8:	687b      	ldr	r3, [r7, #4]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_close>:

int _close(int file)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
	return -1;
 80032ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032da:	605a      	str	r2, [r3, #4]
	return 0;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <_isatty>:

int _isatty(int file)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
	return 1;
 80032f2:	2301      	movs	r3, #1
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
	return 0;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003324:	4a14      	ldr	r2, [pc, #80]	; (8003378 <_sbrk+0x5c>)
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <_sbrk+0x60>)
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <_sbrk+0x64>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <_sbrk+0x64>)
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <_sbrk+0x68>)
 800333c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <_sbrk+0x64>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d207      	bcs.n	800335c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800334c:	f004 fe9a 	bl	8008084 <__errno>
 8003350:	4603      	mov	r3, r0
 8003352:	220c      	movs	r2, #12
 8003354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	e009      	b.n	8003370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <_sbrk+0x64>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <_sbrk+0x64>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	4a05      	ldr	r2, [pc, #20]	; (8003380 <_sbrk+0x64>)
 800336c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800336e:	68fb      	ldr	r3, [r7, #12]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20020000 	.word	0x20020000
 800337c:	00000400 	.word	0x00000400
 8003380:	200001fc 	.word	0x200001fc
 8003384:	20000760 	.word	0x20000760

08003388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <SystemInit+0x28>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <SystemInit+0x28>)
 8003394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <SystemInit+0x28>)
 800339e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033a2:	609a      	str	r2, [r3, #8]
#endif
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <tim10_length_init>:
/* lengths is updated only in tim10 file. */
double length, length_left, length_right;
double velocity_left, velocity_right, velocity;

void tim10_length_init()
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  length_left = 0;
 80033b8:	490c      	ldr	r1, [pc, #48]	; (80033ec <tim10_length_init+0x38>)
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	e9c1 2300 	strd	r2, r3, [r1]
  length_right = 0;
 80033c6:	490a      	ldr	r1, [pc, #40]	; (80033f0 <tim10_length_init+0x3c>)
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9c1 2300 	strd	r2, r3, [r1]
  length = 0;
 80033d4:	4907      	ldr	r1, [pc, #28]	; (80033f4 <tim10_length_init+0x40>)
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	e9c1 2300 	strd	r2, r3, [r1]
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	200006d8 	.word	0x200006d8
 80033f0:	20000700 	.word	0x20000700
 80033f4:	200006e0 	.word	0x200006e0

080033f8 <tim10_init>:

void tim10_init()
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  tim10_length_init();
 80033fc:	f7ff ffda 	bl	80033b4 <tim10_length_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <tim10_init+0x14>)
 8003402:	f003 fa78 	bl	80068f6 <HAL_TIM_Base_Stop_IT>
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000464 	.word	0x20000464

08003410 <tim10_main>:
{
  return length;
}

void tim10_main()
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* set encoder middle and update velocities */
  encoder_set();
 8003414:	f7fe fa74 	bl	8001900 <encoder_set>

  /* update velocity */
  velocity_left = encoder_read_left() * (double) LENGTHPERPULSE * (double) TIM10_Hz;
 8003418:	f7fe fa4e 	bl	80018b8 <encoder_read_left>
 800341c:	ec51 0b10 	vmov	r0, r1, d0
 8003420:	4b41      	ldr	r3, [pc, #260]	; (8003528 <tim10_main+0x118>)
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f7fd f8e7 	bl	80005f8 <__aeabi_dmul>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	a339      	add	r3, pc, #228	; (adr r3, 8003518 <tim10_main+0x108>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f7fd f8de 	bl	80005f8 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	493a      	ldr	r1, [pc, #232]	; (800352c <tim10_main+0x11c>)
 8003442:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = encoder_read_right() * (double) LENGTHPERPULSE * (double) TIM10_Hz;
 8003446:	f7fe fa49 	bl	80018dc <encoder_read_right>
 800344a:	ec51 0b10 	vmov	r0, r1, d0
 800344e:	4b36      	ldr	r3, [pc, #216]	; (8003528 <tim10_main+0x118>)
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f7fd f8d0 	bl	80005f8 <__aeabi_dmul>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	a32d      	add	r3, pc, #180	; (adr r3, 8003518 <tim10_main+0x108>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f7fd f8c7 	bl	80005f8 <__aeabi_dmul>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4930      	ldr	r1, [pc, #192]	; (8003530 <tim10_main+0x120>)
 8003470:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = encoder_read() * (double) LENGTHPERPULSE * (double) TIM10_Hz;
 8003474:	f7fe fa0e 	bl	8001894 <encoder_read>
 8003478:	ec51 0b10 	vmov	r0, r1, d0
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <tim10_main+0x118>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f7fd f8b9 	bl	80005f8 <__aeabi_dmul>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4610      	mov	r0, r2
 800348c:	4619      	mov	r1, r3
 800348e:	a322      	add	r3, pc, #136	; (adr r3, 8003518 <tim10_main+0x108>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f7fd f8b0 	bl	80005f8 <__aeabi_dmul>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4925      	ldr	r1, [pc, #148]	; (8003534 <tim10_main+0x124>)
 800349e:	e9c1 2300 	strd	r2, r3, [r1]

  /* update lengths */
  length_left += (double) encoder_read_left();
 80034a2:	f7fe fa09 	bl	80018b8 <encoder_read_left>
 80034a6:	ec51 0b10 	vmov	r0, r1, d0
 80034aa:	4b23      	ldr	r3, [pc, #140]	; (8003538 <tim10_main+0x128>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fc feec 	bl	800028c <__adddf3>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	491f      	ldr	r1, [pc, #124]	; (8003538 <tim10_main+0x128>)
 80034ba:	e9c1 2300 	strd	r2, r3, [r1]
  length_right += (double) encoder_read_right();
 80034be:	f7fe fa0d 	bl	80018dc <encoder_read_right>
 80034c2:	ec51 0b10 	vmov	r0, r1, d0
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <tim10_main+0x12c>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f7fc fede 	bl	800028c <__adddf3>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4919      	ldr	r1, [pc, #100]	; (800353c <tim10_main+0x12c>)
 80034d6:	e9c1 2300 	strd	r2, r3, [r1]
  length += (double) encoder_read();
 80034da:	f7fe f9db 	bl	8001894 <encoder_read>
 80034de:	ec51 0b10 	vmov	r0, r1, d0
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <tim10_main+0x130>)
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	f7fc fed0 	bl	800028c <__adddf3>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4913      	ldr	r1, [pc, #76]	; (8003540 <tim10_main+0x130>)
 80034f2:	e9c1 2300 	strd	r2, r3, [r1]

  if(length >= SAMPLING_LENGTH)
 80034f6:	4b12      	ldr	r3, [pc, #72]	; (8003540 <tim10_main+0x130>)
 80034f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034fc:	a308      	add	r3, pc, #32	; (adr r3, 8003520 <tim10_main+0x110>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fd faff 	bl	8000b04 <__aeabi_dcmpge>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <tim10_main+0x100>
  {
    course_state_function();
 800350c:	f7fe f952 	bl	80017b4 <course_state_function>
  }

  sidesensor_function();
 8003510:	f7ff faa6 	bl	8002a60 <sidesensor_function>
//  led_brink();
}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}
 8003518:	d2f1a9fc 	.word	0xd2f1a9fc
 800351c:	3f50624d 	.word	0x3f50624d
 8003520:	00000000 	.word	0x00000000
 8003524:	40c38800 	.word	0x40c38800
 8003528:	20000310 	.word	0x20000310
 800352c:	200006f8 	.word	0x200006f8
 8003530:	200006f0 	.word	0x200006f0
 8003534:	200006e8 	.word	0x200006e8
 8003538:	200006d8 	.word	0x200006d8
 800353c:	20000700 	.word	0x20000700
 8003540:	200006e0 	.word	0x200006e0

08003544 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
    switch_init();
 8003548:	f7fd ff20 	bl	800138c <switch_init>
}
 800354c:	bf00      	nop
 800354e:	bd80      	pop	{r7, pc}

08003550 <tim11_main>:

void tim11_main()
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
    switch_enter();
 8003554:	f7fd ff69 	bl	800142a <switch_enter>
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}

0800355c <tim6_init>:
#include "tim6.h"

int beforedirection, sdirection;

void tim6_init()
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
    beforedirection = 0;
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <tim6_init+0x30>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
    sdirection = 0;
 8003566:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <tim6_init+0x34>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 800356c:	2100      	movs	r1, #0
 800356e:	4809      	ldr	r0, [pc, #36]	; (8003594 <tim6_init+0x38>)
 8003570:	f003 fa18 	bl	80069a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003574:	2104      	movs	r1, #4
 8003576:	4807      	ldr	r0, [pc, #28]	; (8003594 <tim6_init+0x38>)
 8003578:	f003 fa14 	bl	80069a4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 800357c:	4806      	ldr	r0, [pc, #24]	; (8003598 <tim6_init+0x3c>)
 800357e:	f003 f996 	bl	80068ae <HAL_TIM_Base_Start_IT>
#if PLAY
    motor_enable(1);
 8003582:	2001      	movs	r0, #1
 8003584:	f7ff f920 	bl	80027c8 <motor_enable>
#endif
}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}
 800358c:	2000070c 	.word	0x2000070c
 8003590:	20000708 	.word	0x20000708
 8003594:	200003d0 	.word	0x200003d0
 8003598:	200005cc 	.word	0x200005cc

0800359c <tim6_fin>:

void tim6_fin()
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 80035a0:	4806      	ldr	r0, [pc, #24]	; (80035bc <tim6_fin+0x20>)
 80035a2:	f003 f9a8 	bl	80068f6 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80035a6:	2104      	movs	r1, #4
 80035a8:	4805      	ldr	r0, [pc, #20]	; (80035c0 <tim6_fin+0x24>)
 80035aa:	f003 fa39 	bl	8006a20 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80035ae:	2100      	movs	r1, #0
 80035b0:	4803      	ldr	r0, [pc, #12]	; (80035c0 <tim6_fin+0x24>)
 80035b2:	f003 fa35 	bl	8006a20 <HAL_TIM_PWM_Stop>
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200005cc 	.word	0x200005cc
 80035c0:	200003d0 	.word	0x200003d0

080035c4 <tim6_main>:

void tim6_main()
{
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
    uint16_t analogl, analogr;
    int direction;
    double leftmotor, rightmotor;
    analogl = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	83fb      	strh	r3, [r7, #30]
    analogr = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	83bb      	strh	r3, [r7, #28]

    for(unsigned char i = 0; i < analog_read_calibrationsize(); i++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	71fb      	strb	r3, [r7, #7]
 80035d6:	e01b      	b.n	8003610 <tim6_main+0x4c>
    {
        if(i % 2 == 0)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <tim6_main+0x34>
        {
            analogl += analog_sensor_get(i);
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd ffd6 	bl	8001598 <analog_sensor_get>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	8bfb      	ldrh	r3, [r7, #30]
 80035f2:	4413      	add	r3, r2
 80035f4:	83fb      	strh	r3, [r7, #30]
 80035f6:	e008      	b.n	800360a <tim6_main+0x46>
        }
        else
        {
            analogr += analog_sensor_get(i);
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd ffcc 	bl	8001598 <analog_sensor_get>
 8003600:	4603      	mov	r3, r0
 8003602:	461a      	mov	r2, r3
 8003604:	8bbb      	ldrh	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	83bb      	strh	r3, [r7, #28]
    for(unsigned char i = 0; i < analog_read_calibrationsize(); i++)
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	3301      	adds	r3, #1
 800360e:	71fb      	strb	r3, [r7, #7]
 8003610:	f7fd ff5c 	bl	80014cc <analog_read_calibrationsize>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	4293      	cmp	r3, r2
 800361c:	d3dc      	bcc.n	80035d8 <tim6_main+0x14>
        }
    }

    if(analogl + analogr >= 980 * analog_read_calibrationsize())
 800361e:	8bfa      	ldrh	r2, [r7, #30]
 8003620:	8bbb      	ldrh	r3, [r7, #28]
 8003622:	18d4      	adds	r4, r2, r3
 8003624:	f7fd ff52 	bl	80014cc <analog_read_calibrationsize>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8003630:	fb03 f302 	mul.w	r3, r3, r2
 8003634:	429c      	cmp	r4, r3
 8003636:	db05      	blt.n	8003644 <tim6_main+0x80>
    {
        velotrace_set_target(0);
 8003638:	2000      	movs	r0, #0
 800363a:	f000 f9b1 	bl	80039a0 <velotrace_set_target>
        motor_enable(0);
 800363e:	2000      	movs	r0, #0
 8003640:	f7ff f8c2 	bl	80027c8 <motor_enable>
    }

    // ( direction > 0 ) is ( analogl > analogr ) i.e. left is black, right is white.
    // When ( direction > 0 ) , must turn right.
    direction = (analogl - analogr);	// difference
 8003644:	8bfa      	ldrh	r2, [r7, #30]
 8003646:	8bbb      	ldrh	r3, [r7, #28]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	61bb      	str	r3, [r7, #24]

    if(analogl + analogr <= 700 * analog_read_calibrationsize())
 800364c:	8bfa      	ldrh	r2, [r7, #30]
 800364e:	8bbb      	ldrh	r3, [r7, #28]
 8003650:	18d4      	adds	r4, r2, r3
 8003652:	f7fd ff3b 	bl	80014cc <analog_read_calibrationsize>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800365e:	fb03 f302 	mul.w	r3, r3, r2
 8003662:	429c      	cmp	r4, r3
 8003664:	dc01      	bgt.n	800366a <tim6_main+0xa6>
    {
        direction = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
    }

    if(motor_read_enable())
 800366a:	f7ff f8c3 	bl	80027f4 <motor_read_enable>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d042      	beq.n	80036fa <tim6_main+0x136>
    {
        leftmotor = velotrace_solve(encoder_read()) + tracer_solve(direction);
 8003674:	f7fe f90e 	bl	8001894 <encoder_read>
 8003678:	eeb0 7a40 	vmov.f32	s14, s0
 800367c:	eef0 7a60 	vmov.f32	s15, s1
 8003680:	eeb0 0a47 	vmov.f32	s0, s14
 8003684:	eef0 0a67 	vmov.f32	s1, s15
 8003688:	f000 f9b0 	bl	80039ec <velotrace_solve>
 800368c:	ec55 4b10 	vmov	r4, r5, d0
 8003690:	69b8      	ldr	r0, [r7, #24]
 8003692:	f7fc ff47 	bl	8000524 <__aeabi_i2d>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	ec43 2b10 	vmov	d0, r2, r3
 800369e:	f000 f867 	bl	8003770 <tracer_solve>
 80036a2:	ec53 2b10 	vmov	r2, r3, d0
 80036a6:	4620      	mov	r0, r4
 80036a8:	4629      	mov	r1, r5
 80036aa:	f7fc fdef 	bl	800028c <__adddf3>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        rightmotor = velotrace_solve(encoder_read()) - tracer_solve(direction);
 80036b6:	f7fe f8ed 	bl	8001894 <encoder_read>
 80036ba:	eeb0 7a40 	vmov.f32	s14, s0
 80036be:	eef0 7a60 	vmov.f32	s15, s1
 80036c2:	eeb0 0a47 	vmov.f32	s0, s14
 80036c6:	eef0 0a67 	vmov.f32	s1, s15
 80036ca:	f000 f98f 	bl	80039ec <velotrace_solve>
 80036ce:	ec55 4b10 	vmov	r4, r5, d0
 80036d2:	69b8      	ldr	r0, [r7, #24]
 80036d4:	f7fc ff26 	bl	8000524 <__aeabi_i2d>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	ec43 2b10 	vmov	d0, r2, r3
 80036e0:	f000 f846 	bl	8003770 <tracer_solve>
 80036e4:	ec53 2b10 	vmov	r2, r3, d0
 80036e8:	4620      	mov	r0, r4
 80036ea:	4629      	mov	r1, r5
 80036ec:	f7fc fdcc 	bl	8000288 <__aeabi_dsub>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80036f8:	e00b      	b.n	8003712 <tim6_main+0x14e>
    }
    else
    {
        leftmotor = 0;
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9c7 2304 	strd	r2, r3, [r7, #16]
        rightmotor = 0;
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }

    motor_set(leftmotor, rightmotor);
 8003712:	ed97 1b02 	vldr	d1, [r7, #8]
 8003716:	ed97 0b04 	vldr	d0, [r7, #16]
 800371a:	f7ff f877 	bl	800280c <motor_set>
}
 800371e:	bf00      	nop
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003728 <tracer_init>:
double samplingtime;

PID pid;

void tracer_init(double samplingtime_)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	ed87 0b00 	vstr	d0, [r7]
    samplingtime = samplingtime_;
 8003732:	490c      	ldr	r1, [pc, #48]	; (8003764 <tracer_init+0x3c>)
 8003734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003738:	e9c1 2300 	strd	r2, r3, [r1]
    s_error = 0;
 800373c:	490a      	ldr	r1, [pc, #40]	; (8003768 <tracer_init+0x40>)
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	e9c1 2300 	strd	r2, r3, [r1]
    before_error = 0;
 800374a:	4908      	ldr	r1, [pc, #32]	; (800376c <tracer_init+0x44>)
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	20000738 	.word	0x20000738
 8003768:	20000730 	.word	0x20000730
 800376c:	20000740 	.word	0x20000740

08003770 <tracer_solve>:
{
    pid.target = target_;
}

double tracer_solve(double reference_)
{
 8003770:	b5b0      	push	{r4, r5, r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	ed87 0b00 	vstr	d0, [r7]
    double error = reference_ - pid.target;
 800377a:	4b39      	ldr	r3, [pc, #228]	; (8003860 <tracer_solve+0xf0>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003784:	f7fc fd80 	bl	8000288 <__aeabi_dsub>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double d_error = error - before_error;
 8003790:	4b34      	ldr	r3, [pc, #208]	; (8003864 <tracer_solve+0xf4>)
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800379a:	f7fc fd75 	bl	8000288 <__aeabi_dsub>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_error += error;
 80037a6:	4b30      	ldr	r3, [pc, #192]	; (8003868 <tracer_solve+0xf8>)
 80037a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b0:	f7fc fd6c 	bl	800028c <__adddf3>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	492b      	ldr	r1, [pc, #172]	; (8003868 <tracer_solve+0xf8>)
 80037ba:	e9c1 2300 	strd	r2, r3, [r1]
    double result = pid.kp * error + pid.ki * s_error * samplingtime + pid.kd * d_error / samplingtime;
 80037be:	4b28      	ldr	r3, [pc, #160]	; (8003860 <tracer_solve+0xf0>)
 80037c0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80037c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c8:	f7fc ff16 	bl	80005f8 <__aeabi_dmul>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4614      	mov	r4, r2
 80037d2:	461d      	mov	r5, r3
 80037d4:	4b22      	ldr	r3, [pc, #136]	; (8003860 <tracer_solve+0xf0>)
 80037d6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80037da:	4b23      	ldr	r3, [pc, #140]	; (8003868 <tracer_solve+0xf8>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f7fc ff0a 	bl	80005f8 <__aeabi_dmul>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <tracer_solve+0xfc>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f7fc ff01 	bl	80005f8 <__aeabi_dmul>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4620      	mov	r0, r4
 80037fc:	4629      	mov	r1, r5
 80037fe:	f7fc fd45 	bl	800028c <__adddf3>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4614      	mov	r4, r2
 8003808:	461d      	mov	r5, r3
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <tracer_solve+0xf0>)
 800380c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003810:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003814:	f7fc fef0 	bl	80005f8 <__aeabi_dmul>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	4b12      	ldr	r3, [pc, #72]	; (800386c <tracer_solve+0xfc>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f7fd f811 	bl	800084c <__aeabi_ddiv>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4620      	mov	r0, r4
 8003830:	4629      	mov	r1, r5
 8003832:	f7fc fd2b 	bl	800028c <__adddf3>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    error = before_error;
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <tracer_solve+0xf4>)
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result;
 8003848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800384c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003850:	eeb0 0a47 	vmov.f32	s0, s14
 8003854:	eef0 0a67 	vmov.f32	s1, s15
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bdb0      	pop	{r4, r5, r7, pc}
 800385e:	bf00      	nop
 8003860:	20000710 	.word	0x20000710
 8003864:	20000740 	.word	0x20000740
 8003868:	20000730 	.word	0x20000730
 800386c:	20000738 	.word	0x20000738

08003870 <velotrace_start>:
double samplingtime;

PID pid;

void velotrace_start()
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
    velotrace_init(1);
 8003874:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8003898 <velotrace_start+0x28>
 8003878:	f000 f812 	bl	80038a0 <velotrace_init>
    if(rotary_read_playmode() == search)
 800387c:	f7fd fd18 	bl	80012b0 <rotary_read_playmode>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <velotrace_start+0x22>
    {
        velotrace_set_gain(0);
 8003886:	2000      	movs	r0, #0
 8003888:	f000 f82e 	bl	80038e8 <velotrace_set_gain>
        velotrace_set_target(0);
 800388c:	2000      	movs	r0, #0
 800388e:	f000 f887 	bl	80039a0 <velotrace_set_target>
    }
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	00000000 	.word	0x00000000
 800389c:	3ff00000 	.word	0x3ff00000

080038a0 <velotrace_init>:

void velotrace_init(double samplingtime_)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	ed87 0b00 	vstr	d0, [r7]
    samplingtime = samplingtime_;
 80038aa:	490c      	ldr	r1, [pc, #48]	; (80038dc <velotrace_init+0x3c>)
 80038ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b0:	e9c1 2300 	strd	r2, r3, [r1]
    s_error = 0;
 80038b4:	490a      	ldr	r1, [pc, #40]	; (80038e0 <velotrace_init+0x40>)
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9c1 2300 	strd	r2, r3, [r1]
    before_error = 0;
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <velotrace_init+0x44>)
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20000738 	.word	0x20000738
 80038e0:	20000730 	.word	0x20000730
 80038e4:	20000740 	.word	0x20000740

080038e8 <velotrace_set_gain>:

void velotrace_set_gain(unsigned short int i)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	80fb      	strh	r3, [r7, #6]
    pid.kp = VELOCITY_KP_MAX - (VELOTRACE_STEP_SIZE - i + 1) * (double) VELOCITY_KP_TOLERANCE;
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	f1c3 0311 	rsb	r3, r3, #17
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fe13 	bl	8000524 <__aeabi_i2d>
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	f7fc fe77 	bl	80005f8 <__aeabi_dmul>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	f04f 0000 	mov.w	r0, #0
 8003912:	4921      	ldr	r1, [pc, #132]	; (8003998 <velotrace_set_gain+0xb0>)
 8003914:	f7fc fcb8 	bl	8000288 <__aeabi_dsub>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	491f      	ldr	r1, [pc, #124]	; (800399c <velotrace_set_gain+0xb4>)
 800391e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid.ki = VELOCITY_KI_MAX - (VELOTRACE_STEP_SIZE - i + 1) * (double) VELOCITY_KI_TOLERANCE;
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	f1c3 0311 	rsb	r3, r3, #17
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fdfb 	bl	8000524 <__aeabi_i2d>
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	f7fc fe5f 	bl	80005f8 <__aeabi_dmul>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	a114      	add	r1, pc, #80	; (adr r1, 8003990 <velotrace_set_gain+0xa8>)
 8003940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003944:	f7fc fca0 	bl	8000288 <__aeabi_dsub>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4913      	ldr	r1, [pc, #76]	; (800399c <velotrace_set_gain+0xb4>)
 800394e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid.kd = VELOCITY_KD_MAX - (VELOTRACE_STEP_SIZE - i + 1) * (double) VELOCITY_KD_TOLERANCE;
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	f1c3 0311 	rsb	r3, r3, #17
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fde3 	bl	8000524 <__aeabi_i2d>
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	f7fc fe47 	bl	80005f8 <__aeabi_dmul>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	f04f 0000 	mov.w	r0, #0
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	f7fc fc87 	bl	8000288 <__aeabi_dsub>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4907      	ldr	r1, [pc, #28]	; (800399c <velotrace_set_gain+0xb4>)
 8003980:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	f3af 8000 	nop.w
 8003990:	e0000000 	.word	0xe0000000
 8003994:	3faeb851 	.word	0x3faeb851
 8003998:	40180000 	.word	0x40180000
 800399c:	20000710 	.word	0x20000710

080039a0 <velotrace_set_target>:

void velotrace_set_target(unsigned short int i)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	80fb      	strh	r3, [r7, #6]
    pid.target = VELOCITY_TARGET_MAX - (VELOTRACE_STEP_SIZE - i + 1) * (double) VELOCITY_TARGET_TOLERANCE;
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	f1c3 0311 	rsb	r3, r3, #17
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fdb7 	bl	8000524 <__aeabi_i2d>
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <velotrace_set_target+0x40>)
 80039bc:	f7fc fe1c 	bl	80005f8 <__aeabi_dmul>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	f04f 0000 	mov.w	r0, #0
 80039c8:	4906      	ldr	r1, [pc, #24]	; (80039e4 <velotrace_set_target+0x44>)
 80039ca:	f7fc fc5d 	bl	8000288 <__aeabi_dsub>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4905      	ldr	r1, [pc, #20]	; (80039e8 <velotrace_set_target+0x48>)
 80039d4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	404f0000 	.word	0x404f0000
 80039e4:	409f4000 	.word	0x409f4000
 80039e8:	20000710 	.word	0x20000710

080039ec <velotrace_solve>:

double velotrace_solve(double reference_)
{
 80039ec:	b5b0      	push	{r4, r5, r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	ed87 0b00 	vstr	d0, [r7]
    double error = reference_ - pid.target;
 80039f6:	4b39      	ldr	r3, [pc, #228]	; (8003adc <velotrace_solve+0xf0>)
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a00:	f7fc fc42 	bl	8000288 <__aeabi_dsub>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double d_error = error - before_error;
 8003a0c:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <velotrace_solve+0xf4>)
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a16:	f7fc fc37 	bl	8000288 <__aeabi_dsub>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_error += error;
 8003a22:	4b30      	ldr	r3, [pc, #192]	; (8003ae4 <velotrace_solve+0xf8>)
 8003a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a2c:	f7fc fc2e 	bl	800028c <__adddf3>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	492b      	ldr	r1, [pc, #172]	; (8003ae4 <velotrace_solve+0xf8>)
 8003a36:	e9c1 2300 	strd	r2, r3, [r1]
    double result = pid.kp * error + pid. ki * s_error * samplingtime + pid.kd * d_error / samplingtime;
 8003a3a:	4b28      	ldr	r3, [pc, #160]	; (8003adc <velotrace_solve+0xf0>)
 8003a3c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a44:	f7fc fdd8 	bl	80005f8 <__aeabi_dmul>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	461d      	mov	r5, r3
 8003a50:	4b22      	ldr	r3, [pc, #136]	; (8003adc <velotrace_solve+0xf0>)
 8003a52:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <velotrace_solve+0xf8>)
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f7fc fdcc 	bl	80005f8 <__aeabi_dmul>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <velotrace_solve+0xfc>)
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc fdc3 	bl	80005f8 <__aeabi_dmul>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4620      	mov	r0, r4
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f7fc fc07 	bl	800028c <__adddf3>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4614      	mov	r4, r2
 8003a84:	461d      	mov	r5, r3
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <velotrace_solve+0xf0>)
 8003a88:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003a8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a90:	f7fc fdb2 	bl	80005f8 <__aeabi_dmul>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <velotrace_solve+0xfc>)
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f7fc fed3 	bl	800084c <__aeabi_ddiv>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4620      	mov	r0, r4
 8003aac:	4629      	mov	r1, r5
 8003aae:	f7fc fbed 	bl	800028c <__adddf3>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    error = before_error;
 8003aba:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <velotrace_solve+0xf4>)
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result;
 8003ac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac8:	ec43 2b17 	vmov	d7, r2, r3
}
 8003acc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ad0:	eef0 0a67 	vmov.f32	s1, s15
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000710 	.word	0x20000710
 8003ae0:	20000740 	.word	0x20000740
 8003ae4:	20000730 	.word	0x20000730
 8003ae8:	20000738 	.word	0x20000738

08003aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003af0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003af2:	e003      	b.n	8003afc <LoopCopyDataInit>

08003af4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003af6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003af8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003afa:	3104      	adds	r1, #4

08003afc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003afc:	480b      	ldr	r0, [pc, #44]	; (8003b2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b04:	d3f6      	bcc.n	8003af4 <CopyDataInit>
  ldr  r2, =_sbss
 8003b06:	4a0b      	ldr	r2, [pc, #44]	; (8003b34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b08:	e002      	b.n	8003b10 <LoopFillZerobss>

08003b0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b0c:	f842 3b04 	str.w	r3, [r2], #4

08003b10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b14:	d3f9      	bcc.n	8003b0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b16:	f7ff fc37 	bl	8003388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b1a:	f004 fab9 	bl	8008090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b1e:	f7fd ff53 	bl	80019c8 <main>
  bx  lr    
 8003b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003b28:	0800cfcc 	.word	0x0800cfcc
  ldr  r0, =_sdata
 8003b2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b30:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003b34:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003b38:	2000075c 	.word	0x2000075c

08003b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b3c:	e7fe      	b.n	8003b3c <ADC_IRQHandler>
	...

08003b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <HAL_Init+0x40>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <HAL_Init+0x40>)
 8003b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_Init+0x40>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <HAL_Init+0x40>)
 8003b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <HAL_Init+0x40>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a07      	ldr	r2, [pc, #28]	; (8003b80 <HAL_Init+0x40>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b68:	2003      	movs	r0, #3
 8003b6a:	f000 fd83 	bl	8004674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b6e:	2000      	movs	r0, #0
 8003b70:	f000 f808 	bl	8003b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b74:	f7fe ffd0 	bl	8002b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023c00 	.word	0x40023c00

08003b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_InitTick+0x54>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_InitTick+0x58>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	4619      	mov	r1, r3
 8003b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fd9b 	bl	80046de <HAL_SYSTICK_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e00e      	b.n	8003bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b0f      	cmp	r3, #15
 8003bb6:	d80a      	bhi.n	8003bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb8:	2200      	movs	r2, #0
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	f000 fd63 	bl	800468a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc4:	4a06      	ldr	r2, [pc, #24]	; (8003be0 <HAL_InitTick+0x5c>)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	20000008 	.word	0x20000008
 8003be0:	20000004 	.word	0x20000004

08003be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_IncTick+0x20>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_IncTick+0x24>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <HAL_IncTick+0x24>)
 8003bf6:	6013      	str	r3, [r2, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000008 	.word	0x20000008
 8003c08:	20000748 	.word	0x20000748

08003c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <HAL_GetTick+0x14>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000748 	.word	0x20000748

08003c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c2c:	f7ff ffee 	bl	8003c0c <HAL_GetTick>
 8003c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d005      	beq.n	8003c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <HAL_Delay+0x44>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c4a:	bf00      	nop
 8003c4c:	f7ff ffde 	bl	8003c0c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d8f7      	bhi.n	8003c4c <HAL_Delay+0x28>
  {
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000008 	.word	0x20000008

08003c6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e033      	b.n	8003cea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fe ff70 	bl	8002b70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cb2:	f023 0302 	bic.w	r3, r3, #2
 8003cb6:	f043 0202 	orr.w	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa8a 	bl	80041d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	f043 0201 	orr.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40
 8003cda:	e001      	b.n	8003ce0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_Start_DMA+0x1e>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e0cc      	b.n	8003eac <HAL_ADC_Start_DMA+0x1b8>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d018      	beq.n	8003d5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d38:	4b5e      	ldr	r3, [pc, #376]	; (8003eb4 <HAL_ADC_Start_DMA+0x1c0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a5e      	ldr	r2, [pc, #376]	; (8003eb8 <HAL_ADC_Start_DMA+0x1c4>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	0c9a      	lsrs	r2, r3, #18
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d4c:	e002      	b.n	8003d54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f9      	bne.n	8003d4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	f040 80a0 	bne.w	8003eaa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da8:	d106      	bne.n	8003db8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f023 0206 	bic.w	r2, r3, #6
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
 8003db6:	e002      	b.n	8003dbe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dc6:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <HAL_ADC_Start_DMA+0x1c8>)
 8003dc8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	4a3c      	ldr	r2, [pc, #240]	; (8003ec0 <HAL_ADC_Start_DMA+0x1cc>)
 8003dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	4a3b      	ldr	r2, [pc, #236]	; (8003ec4 <HAL_ADC_Start_DMA+0x1d0>)
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	4a3a      	ldr	r2, [pc, #232]	; (8003ec8 <HAL_ADC_Start_DMA+0x1d4>)
 8003de0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003dea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003dfa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	334c      	adds	r3, #76	; 0x4c
 8003e16:	4619      	mov	r1, r3
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f000 fd1a 	bl	8004854 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d12a      	bne.n	8003e82 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a26      	ldr	r2, [pc, #152]	; (8003ecc <HAL_ADC_Start_DMA+0x1d8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d015      	beq.n	8003e62 <HAL_ADC_Start_DMA+0x16e>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <HAL_ADC_Start_DMA+0x1dc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d105      	bne.n	8003e4c <HAL_ADC_Start_DMA+0x158>
 8003e40:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <HAL_ADC_Start_DMA+0x1c8>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a20      	ldr	r2, [pc, #128]	; (8003ed4 <HAL_ADC_Start_DMA+0x1e0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d129      	bne.n	8003eaa <HAL_ADC_Start_DMA+0x1b6>
 8003e56:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_ADC_Start_DMA+0x1c8>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d123      	bne.n	8003eaa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d11c      	bne.n	8003eaa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	e013      	b.n	8003eaa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <HAL_ADC_Start_DMA+0x1d8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10e      	bne.n	8003eaa <HAL_ADC_Start_DMA+0x1b6>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d107      	bne.n	8003eaa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ea8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	431bde83 	.word	0x431bde83
 8003ebc:	40012300 	.word	0x40012300
 8003ec0:	080043d1 	.word	0x080043d1
 8003ec4:	0800448b 	.word	0x0800448b
 8003ec8:	080044a7 	.word	0x080044a7
 8003ecc:	40012000 	.word	0x40012000
 8003ed0:	40012100 	.word	0x40012100
 8003ed4:	40012200 	.word	0x40012200

08003ed8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_Stop_DMA+0x1a>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e038      	b.n	8003f64 <HAL_ADC_Stop_DMA+0x8c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0201 	bic.w	r2, r2, #1
 8003f08:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d120      	bne.n	8003f5a <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f26:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fce9 	bl	8004904 <HAL_DMA_Abort>
 8003f32:	4603      	mov	r3, r0
 8003f34:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003f44:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x1c>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e105      	b.n	80041bc <HAL_ADC_ConfigChannel+0x228>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b09      	cmp	r3, #9
 8003fbe:	d925      	bls.n	800400c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4613      	mov	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3b1e      	subs	r3, #30
 8003fd6:	2207      	movs	r2, #7
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68d9      	ldr	r1, [r3, #12]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4403      	add	r3, r0
 8003ffe:	3b1e      	subs	r3, #30
 8004000:	409a      	lsls	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	60da      	str	r2, [r3, #12]
 800400a:	e022      	b.n	8004052 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6919      	ldr	r1, [r3, #16]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	4613      	mov	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	4413      	add	r3, r2
 8004020:	2207      	movs	r2, #7
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43da      	mvns	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	400a      	ands	r2, r1
 800402e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6919      	ldr	r1, [r3, #16]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	4618      	mov	r0, r3
 8004042:	4603      	mov	r3, r0
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4403      	add	r3, r0
 8004048:	409a      	lsls	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d824      	bhi.n	80040a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	3b05      	subs	r3, #5
 800406c:	221f      	movs	r2, #31
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43da      	mvns	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	400a      	ands	r2, r1
 800407a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	4618      	mov	r0, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	3b05      	subs	r3, #5
 8004096:	fa00 f203 	lsl.w	r2, r0, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	635a      	str	r2, [r3, #52]	; 0x34
 80040a2:	e04c      	b.n	800413e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	d824      	bhi.n	80040f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	3b23      	subs	r3, #35	; 0x23
 80040be:	221f      	movs	r2, #31
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43da      	mvns	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	400a      	ands	r2, r1
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	4618      	mov	r0, r3
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	3b23      	subs	r3, #35	; 0x23
 80040e8:	fa00 f203 	lsl.w	r2, r0, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
 80040f4:	e023      	b.n	800413e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	3b41      	subs	r3, #65	; 0x41
 8004108:	221f      	movs	r2, #31
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43da      	mvns	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	400a      	ands	r2, r1
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	4618      	mov	r0, r3
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	3b41      	subs	r3, #65	; 0x41
 8004132:	fa00 f203 	lsl.w	r2, r0, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <HAL_ADC_ConfigChannel+0x234>)
 8004140:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a21      	ldr	r2, [pc, #132]	; (80041cc <HAL_ADC_ConfigChannel+0x238>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d109      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x1cc>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b12      	cmp	r3, #18
 8004152:	d105      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_ADC_ConfigChannel+0x238>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d123      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x21e>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b10      	cmp	r3, #16
 8004170:	d003      	beq.n	800417a <HAL_ADC_ConfigChannel+0x1e6>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b11      	cmp	r3, #17
 8004178:	d11b      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b10      	cmp	r3, #16
 800418c:	d111      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <HAL_ADC_ConfigChannel+0x23c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <HAL_ADC_ConfigChannel+0x240>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	0c9a      	lsrs	r2, r3, #18
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041a4:	e002      	b.n	80041ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f9      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40012300 	.word	0x40012300
 80041cc:	40012000 	.word	0x40012000
 80041d0:	20000000 	.word	0x20000000
 80041d4:	431bde83 	.word	0x431bde83

080041d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041e0:	4b79      	ldr	r3, [pc, #484]	; (80043c8 <ADC_Init+0x1f0>)
 80041e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800420c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6859      	ldr	r1, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	021a      	lsls	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6859      	ldr	r1, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6899      	ldr	r1, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	4a58      	ldr	r2, [pc, #352]	; (80043cc <ADC_Init+0x1f4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d022      	beq.n	80042b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800427e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6899      	ldr	r1, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6899      	ldr	r1, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	e00f      	b.n	80042d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0202 	bic.w	r2, r2, #2
 80042e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6899      	ldr	r1, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7e1b      	ldrb	r3, [r3, #24]
 80042f0:	005a      	lsls	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004312:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004322:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	3b01      	subs	r3, #1
 8004330:	035a      	lsls	r2, r3, #13
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	e007      	b.n	800434c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800434a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	3b01      	subs	r3, #1
 8004368:	051a      	lsls	r2, r3, #20
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6899      	ldr	r1, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800438e:	025a      	lsls	r2, r3, #9
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6899      	ldr	r1, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	029a      	lsls	r2, r3, #10
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40012300 	.word	0x40012300
 80043cc:	0f000001 	.word	0x0f000001

080043d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d13c      	bne.n	8004464 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d12b      	bne.n	800445c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004408:	2b00      	cmp	r3, #0
 800440a:	d127      	bne.n	800445c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004424:	2b00      	cmp	r3, #0
 8004426:	d119      	bne.n	800445c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0220 	bic.w	r2, r2, #32
 8004436:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d105      	bne.n	800445c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f043 0201 	orr.w	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7fd f8d1 	bl	8001604 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004462:	e00e      	b.n	8004482 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff fd85 	bl	8003f80 <HAL_ADC_ErrorCallback>
}
 8004476:	e004      	b.n	8004482 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff fd67 	bl	8003f6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2240      	movs	r2, #64	; 0x40
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f043 0204 	orr.w	r2, r3, #4
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7ff fd5a 	bl	8003f80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <__NVIC_SetPriorityGrouping+0x44>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f0:	4013      	ands	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004506:	4a04      	ldr	r2, [pc, #16]	; (8004518 <__NVIC_SetPriorityGrouping+0x44>)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	60d3      	str	r3, [r2, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <__NVIC_GetPriorityGrouping+0x18>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	0a1b      	lsrs	r3, r3, #8
 8004526:	f003 0307 	and.w	r3, r3, #7
}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	2b00      	cmp	r3, #0
 8004548:	db0b      	blt.n	8004562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	f003 021f 	and.w	r2, r3, #31
 8004550:	4907      	ldr	r1, [pc, #28]	; (8004570 <__NVIC_EnableIRQ+0x38>)
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2001      	movs	r0, #1
 800455a:	fa00 f202 	lsl.w	r2, r0, r2
 800455e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	e000e100 	.word	0xe000e100

08004574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	6039      	str	r1, [r7, #0]
 800457e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004584:	2b00      	cmp	r3, #0
 8004586:	db0a      	blt.n	800459e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	490c      	ldr	r1, [pc, #48]	; (80045c0 <__NVIC_SetPriority+0x4c>)
 800458e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004592:	0112      	lsls	r2, r2, #4
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	440b      	add	r3, r1
 8004598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800459c:	e00a      	b.n	80045b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4908      	ldr	r1, [pc, #32]	; (80045c4 <__NVIC_SetPriority+0x50>)
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	3b04      	subs	r3, #4
 80045ac:	0112      	lsls	r2, r2, #4
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	440b      	add	r3, r1
 80045b2:	761a      	strb	r2, [r3, #24]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	e000e100 	.word	0xe000e100
 80045c4:	e000ed00 	.word	0xe000ed00

080045c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b089      	sub	sp, #36	; 0x24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f1c3 0307 	rsb	r3, r3, #7
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	bf28      	it	cs
 80045e6:	2304      	movcs	r3, #4
 80045e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3304      	adds	r3, #4
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d902      	bls.n	80045f8 <NVIC_EncodePriority+0x30>
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3b03      	subs	r3, #3
 80045f6:	e000      	b.n	80045fa <NVIC_EncodePriority+0x32>
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43da      	mvns	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	401a      	ands	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004610:	f04f 31ff 	mov.w	r1, #4294967295
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	fa01 f303 	lsl.w	r3, r1, r3
 800461a:	43d9      	mvns	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004620:	4313      	orrs	r3, r2
         );
}
 8004622:	4618      	mov	r0, r3
 8004624:	3724      	adds	r7, #36	; 0x24
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3b01      	subs	r3, #1
 800463c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004640:	d301      	bcc.n	8004646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004642:	2301      	movs	r3, #1
 8004644:	e00f      	b.n	8004666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004646:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <SysTick_Config+0x40>)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3b01      	subs	r3, #1
 800464c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800464e:	210f      	movs	r1, #15
 8004650:	f04f 30ff 	mov.w	r0, #4294967295
 8004654:	f7ff ff8e 	bl	8004574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <SysTick_Config+0x40>)
 800465a:	2200      	movs	r2, #0
 800465c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800465e:	4b04      	ldr	r3, [pc, #16]	; (8004670 <SysTick_Config+0x40>)
 8004660:	2207      	movs	r2, #7
 8004662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	e000e010 	.word	0xe000e010

08004674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff ff29 	bl	80044d4 <__NVIC_SetPriorityGrouping>
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	4603      	mov	r3, r0
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800469c:	f7ff ff3e 	bl	800451c <__NVIC_GetPriorityGrouping>
 80046a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	6978      	ldr	r0, [r7, #20]
 80046a8:	f7ff ff8e 	bl	80045c8 <NVIC_EncodePriority>
 80046ac:	4602      	mov	r2, r0
 80046ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ff5d 	bl	8004574 <__NVIC_SetPriority>
}
 80046ba:	bf00      	nop
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff31 	bl	8004538 <__NVIC_EnableIRQ>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff ffa2 	bl	8004630 <SysTick_Config>
 80046ec:	4603      	mov	r3, r0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff fa82 	bl	8003c0c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e099      	b.n	8004848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004734:	e00f      	b.n	8004756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004736:	f7ff fa69 	bl	8003c0c <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b05      	cmp	r3, #5
 8004742:	d908      	bls.n	8004756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2203      	movs	r2, #3
 800474e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e078      	b.n	8004848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e8      	bne.n	8004736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4b38      	ldr	r3, [pc, #224]	; (8004850 <HAL_DMA_Init+0x158>)
 8004770:	4013      	ands	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800479a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d107      	bne.n	80047c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	4313      	orrs	r3, r2
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0307 	bic.w	r3, r3, #7
 80047d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d117      	bne.n	800481a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00e      	beq.n	800481a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fadf 	bl	8004dc0 <DMA_CheckFifoParam>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2240      	movs	r2, #64	; 0x40
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004816:	2301      	movs	r3, #1
 8004818:	e016      	b.n	8004848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa96 	bl	8004d54 <DMA_CalcBaseAndBitshift>
 8004828:	4603      	mov	r3, r0
 800482a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	223f      	movs	r2, #63	; 0x3f
 8004832:	409a      	lsls	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	f010803f 	.word	0xf010803f

08004854 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_DMA_Start_IT+0x26>
 8004876:	2302      	movs	r3, #2
 8004878:	e040      	b.n	80048fc <HAL_DMA_Start_IT+0xa8>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d12f      	bne.n	80048ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fa28 	bl	8004cf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ac:	223f      	movs	r2, #63	; 0x3f
 80048ae:	409a      	lsls	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0216 	orr.w	r2, r2, #22
 80048c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0208 	orr.w	r2, r2, #8
 80048da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e005      	b.n	80048fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
 80048f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004910:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004912:	f7ff f97b 	bl	8003c0c <HAL_GetTick>
 8004916:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d008      	beq.n	8004936 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2280      	movs	r2, #128	; 0x80
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e052      	b.n	80049dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0216 	bic.w	r2, r2, #22
 8004944:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004954:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_DMA_Abort+0x62>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0208 	bic.w	r2, r2, #8
 8004974:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004986:	e013      	b.n	80049b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004988:	f7ff f940 	bl	8003c0c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b05      	cmp	r3, #5
 8004994:	d90c      	bls.n	80049b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2203      	movs	r2, #3
 80049a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e015      	b.n	80049dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e4      	bne.n	8004988 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c2:	223f      	movs	r2, #63	; 0x3f
 80049c4:	409a      	lsls	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049f0:	4b92      	ldr	r3, [pc, #584]	; (8004c3c <HAL_DMA_IRQHandler+0x258>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a92      	ldr	r2, [pc, #584]	; (8004c40 <HAL_DMA_IRQHandler+0x25c>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	0a9b      	lsrs	r3, r3, #10
 80049fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0e:	2208      	movs	r2, #8
 8004a10:	409a      	lsls	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01a      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d013      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0204 	bic.w	r2, r2, #4
 8004a36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	409a      	lsls	r2, r3
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	f043 0201 	orr.w	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a54:	2201      	movs	r2, #1
 8004a56:	409a      	lsls	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d012      	beq.n	8004a86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a72:	2201      	movs	r2, #1
 8004a74:	409a      	lsls	r2, r3
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	f043 0202 	orr.w	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d012      	beq.n	8004abc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00b      	beq.n	8004abc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	f043 0204 	orr.w	r2, r3, #4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d043      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d03c      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	2210      	movs	r2, #16
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d018      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d108      	bne.n	8004b14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d024      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
 8004b12:	e01f      	b.n	8004b54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01b      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
 8004b24:	e016      	b.n	8004b54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d107      	bne.n	8004b44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0208 	bic.w	r2, r2, #8
 8004b42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b58:	2220      	movs	r2, #32
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 808e 	beq.w	8004c82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	409a      	lsls	r2, r3
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	d136      	bne.n	8004bfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0216 	bic.w	r2, r2, #22
 8004b9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <HAL_DMA_IRQHandler+0x1da>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0208 	bic.w	r2, r2, #8
 8004bcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd2:	223f      	movs	r2, #63	; 0x3f
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d07d      	beq.n	8004cee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	4798      	blx	r3
        }
        return;
 8004bfa:	e078      	b.n	8004cee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01c      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d030      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	4798      	blx	r3
 8004c28:	e02b      	b.n	8004c82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d027      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	4798      	blx	r3
 8004c3a:	e022      	b.n	8004c82 <HAL_DMA_IRQHandler+0x29e>
 8004c3c:	20000000 	.word	0x20000000
 8004c40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10f      	bne.n	8004c72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0210 	bic.w	r2, r2, #16
 8004c60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d032      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d022      	beq.n	8004cdc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2205      	movs	r2, #5
 8004c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d307      	bcc.n	8004cca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f2      	bne.n	8004cae <HAL_DMA_IRQHandler+0x2ca>
 8004cc8:	e000      	b.n	8004ccc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004cca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
 8004cec:	e000      	b.n	8004cf0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004cee:	bf00      	nop
    }
  }
}
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop

08004cf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d108      	bne.n	8004d38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d36:	e007      	b.n	8004d48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	60da      	str	r2, [r3, #12]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	3b10      	subs	r3, #16
 8004d64:	4a14      	ldr	r2, [pc, #80]	; (8004db8 <DMA_CalcBaseAndBitshift+0x64>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	091b      	lsrs	r3, r3, #4
 8004d6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d6e:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <DMA_CalcBaseAndBitshift+0x68>)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d909      	bls.n	8004d96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	1d1a      	adds	r2, r3, #4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	659a      	str	r2, [r3, #88]	; 0x58
 8004d94:	e007      	b.n	8004da6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	aaaaaaab 	.word	0xaaaaaaab
 8004dbc:	0800cafc 	.word	0x0800cafc

08004dc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d11f      	bne.n	8004e1a <DMA_CheckFifoParam+0x5a>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d856      	bhi.n	8004e8e <DMA_CheckFifoParam+0xce>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <DMA_CheckFifoParam+0x28>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004e0b 	.word	0x08004e0b
 8004df0:	08004df9 	.word	0x08004df9
 8004df4:	08004e8f 	.word	0x08004e8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d046      	beq.n	8004e92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e08:	e043      	b.n	8004e92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e12:	d140      	bne.n	8004e96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e18:	e03d      	b.n	8004e96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e22:	d121      	bne.n	8004e68 <DMA_CheckFifoParam+0xa8>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d837      	bhi.n	8004e9a <DMA_CheckFifoParam+0xda>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <DMA_CheckFifoParam+0x70>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e41 	.word	0x08004e41
 8004e34:	08004e47 	.word	0x08004e47
 8004e38:	08004e41 	.word	0x08004e41
 8004e3c:	08004e59 	.word	0x08004e59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      break;
 8004e44:	e030      	b.n	8004ea8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d025      	beq.n	8004e9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e56:	e022      	b.n	8004e9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e60:	d11f      	bne.n	8004ea2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e66:	e01c      	b.n	8004ea2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d903      	bls.n	8004e76 <DMA_CheckFifoParam+0xb6>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d003      	beq.n	8004e7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e74:	e018      	b.n	8004ea8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7a:	e015      	b.n	8004ea8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00e      	beq.n	8004ea6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8c:	e00b      	b.n	8004ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e00a      	b.n	8004ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8004e92:	bf00      	nop
 8004e94:	e008      	b.n	8004ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8004e96:	bf00      	nop
 8004e98:	e006      	b.n	8004ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8004e9a:	bf00      	nop
 8004e9c:	e004      	b.n	8004ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8004e9e:	bf00      	nop
 8004ea0:	e002      	b.n	8004ea8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ea2:	bf00      	nop
 8004ea4:	e000      	b.n	8004ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ea6:	bf00      	nop
    }
  } 
  
  return status; 
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop

08004eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e16b      	b.n	80051ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	f040 815a 	bne.w	80051a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d00b      	beq.n	8004f12 <HAL_GPIO_Init+0x5a>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d007      	beq.n	8004f12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f06:	2b11      	cmp	r3, #17
 8004f08:	d003      	beq.n	8004f12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b12      	cmp	r3, #18
 8004f10:	d130      	bne.n	8004f74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43db      	mvns	r3, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4013      	ands	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f48:	2201      	movs	r2, #1
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 0201 	and.w	r2, r3, #1
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	2203      	movs	r2, #3
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d003      	beq.n	8004fb4 <HAL_GPIO_Init+0xfc>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b12      	cmp	r3, #18
 8004fb2:	d123      	bne.n	8004ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	08da      	lsrs	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3208      	adds	r2, #8
 8004fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	220f      	movs	r2, #15
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	08da      	lsrs	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3208      	adds	r2, #8
 8004ff6:	69b9      	ldr	r1, [r7, #24]
 8004ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	2203      	movs	r2, #3
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4013      	ands	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 0203 	and.w	r2, r3, #3
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80b4 	beq.w	80051a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	4b60      	ldr	r3, [pc, #384]	; (80051c4 <HAL_GPIO_Init+0x30c>)
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	4a5f      	ldr	r2, [pc, #380]	; (80051c4 <HAL_GPIO_Init+0x30c>)
 8005048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800504c:	6453      	str	r3, [r2, #68]	; 0x44
 800504e:	4b5d      	ldr	r3, [pc, #372]	; (80051c4 <HAL_GPIO_Init+0x30c>)
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800505a:	4a5b      	ldr	r2, [pc, #364]	; (80051c8 <HAL_GPIO_Init+0x310>)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	089b      	lsrs	r3, r3, #2
 8005060:	3302      	adds	r3, #2
 8005062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	220f      	movs	r2, #15
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a52      	ldr	r2, [pc, #328]	; (80051cc <HAL_GPIO_Init+0x314>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d02b      	beq.n	80050de <HAL_GPIO_Init+0x226>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a51      	ldr	r2, [pc, #324]	; (80051d0 <HAL_GPIO_Init+0x318>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d025      	beq.n	80050da <HAL_GPIO_Init+0x222>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a50      	ldr	r2, [pc, #320]	; (80051d4 <HAL_GPIO_Init+0x31c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d01f      	beq.n	80050d6 <HAL_GPIO_Init+0x21e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a4f      	ldr	r2, [pc, #316]	; (80051d8 <HAL_GPIO_Init+0x320>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d019      	beq.n	80050d2 <HAL_GPIO_Init+0x21a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a4e      	ldr	r2, [pc, #312]	; (80051dc <HAL_GPIO_Init+0x324>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d013      	beq.n	80050ce <HAL_GPIO_Init+0x216>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a4d      	ldr	r2, [pc, #308]	; (80051e0 <HAL_GPIO_Init+0x328>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00d      	beq.n	80050ca <HAL_GPIO_Init+0x212>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a4c      	ldr	r2, [pc, #304]	; (80051e4 <HAL_GPIO_Init+0x32c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d007      	beq.n	80050c6 <HAL_GPIO_Init+0x20e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a4b      	ldr	r2, [pc, #300]	; (80051e8 <HAL_GPIO_Init+0x330>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d101      	bne.n	80050c2 <HAL_GPIO_Init+0x20a>
 80050be:	2307      	movs	r3, #7
 80050c0:	e00e      	b.n	80050e0 <HAL_GPIO_Init+0x228>
 80050c2:	2308      	movs	r3, #8
 80050c4:	e00c      	b.n	80050e0 <HAL_GPIO_Init+0x228>
 80050c6:	2306      	movs	r3, #6
 80050c8:	e00a      	b.n	80050e0 <HAL_GPIO_Init+0x228>
 80050ca:	2305      	movs	r3, #5
 80050cc:	e008      	b.n	80050e0 <HAL_GPIO_Init+0x228>
 80050ce:	2304      	movs	r3, #4
 80050d0:	e006      	b.n	80050e0 <HAL_GPIO_Init+0x228>
 80050d2:	2303      	movs	r3, #3
 80050d4:	e004      	b.n	80050e0 <HAL_GPIO_Init+0x228>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e002      	b.n	80050e0 <HAL_GPIO_Init+0x228>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_GPIO_Init+0x228>
 80050de:	2300      	movs	r3, #0
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	f002 0203 	and.w	r2, r2, #3
 80050e6:	0092      	lsls	r2, r2, #2
 80050e8:	4093      	lsls	r3, r2
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050f0:	4935      	ldr	r1, [pc, #212]	; (80051c8 <HAL_GPIO_Init+0x310>)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	089b      	lsrs	r3, r3, #2
 80050f6:	3302      	adds	r3, #2
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050fe:	4b3b      	ldr	r3, [pc, #236]	; (80051ec <HAL_GPIO_Init+0x334>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	43db      	mvns	r3, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4013      	ands	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005122:	4a32      	ldr	r2, [pc, #200]	; (80051ec <HAL_GPIO_Init+0x334>)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005128:	4b30      	ldr	r3, [pc, #192]	; (80051ec <HAL_GPIO_Init+0x334>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	43db      	mvns	r3, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4013      	ands	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800514c:	4a27      	ldr	r2, [pc, #156]	; (80051ec <HAL_GPIO_Init+0x334>)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005152:	4b26      	ldr	r3, [pc, #152]	; (80051ec <HAL_GPIO_Init+0x334>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005176:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <HAL_GPIO_Init+0x334>)
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800517c:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <HAL_GPIO_Init+0x334>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051a0:	4a12      	ldr	r2, [pc, #72]	; (80051ec <HAL_GPIO_Init+0x334>)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	f67f ae90 	bls.w	8004ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	3724      	adds	r7, #36	; 0x24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40023800 	.word	0x40023800
 80051c8:	40013800 	.word	0x40013800
 80051cc:	40020000 	.word	0x40020000
 80051d0:	40020400 	.word	0x40020400
 80051d4:	40020800 	.word	0x40020800
 80051d8:	40020c00 	.word	0x40020c00
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40021400 	.word	0x40021400
 80051e4:	40021800 	.word	0x40021800
 80051e8:	40021c00 	.word	0x40021c00
 80051ec:	40013c00 	.word	0x40013c00

080051f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	887b      	ldrh	r3, [r7, #2]
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
 800520c:	e001      	b.n	8005212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800520e:	2300      	movs	r3, #0
 8005210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005212:	7bfb      	ldrb	r3, [r7, #15]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	807b      	strh	r3, [r7, #2]
 800522c:	4613      	mov	r3, r2
 800522e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005230:	787b      	ldrb	r3, [r7, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005236:	887a      	ldrh	r2, [r7, #2]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800523c:	e003      	b.n	8005246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800523e:	887b      	ldrh	r3, [r7, #2]
 8005240:	041a      	lsls	r2, r3, #16
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	619a      	str	r2, [r3, #24]
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e12b      	b.n	80054be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fd fd28 	bl	8002cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2224      	movs	r2, #36	; 0x24
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052b8:	f000 fd52 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 80052bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4a81      	ldr	r2, [pc, #516]	; (80054c8 <HAL_I2C_Init+0x274>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d807      	bhi.n	80052d8 <HAL_I2C_Init+0x84>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4a80      	ldr	r2, [pc, #512]	; (80054cc <HAL_I2C_Init+0x278>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	bf94      	ite	ls
 80052d0:	2301      	movls	r3, #1
 80052d2:	2300      	movhi	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e006      	b.n	80052e6 <HAL_I2C_Init+0x92>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4a7d      	ldr	r2, [pc, #500]	; (80054d0 <HAL_I2C_Init+0x27c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	bf94      	ite	ls
 80052e0:	2301      	movls	r3, #1
 80052e2:	2300      	movhi	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e0e7      	b.n	80054be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a78      	ldr	r2, [pc, #480]	; (80054d4 <HAL_I2C_Init+0x280>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	0c9b      	lsrs	r3, r3, #18
 80052f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4a6a      	ldr	r2, [pc, #424]	; (80054c8 <HAL_I2C_Init+0x274>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d802      	bhi.n	8005328 <HAL_I2C_Init+0xd4>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	3301      	adds	r3, #1
 8005326:	e009      	b.n	800533c <HAL_I2C_Init+0xe8>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	4a69      	ldr	r2, [pc, #420]	; (80054d8 <HAL_I2C_Init+0x284>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	099b      	lsrs	r3, r3, #6
 800533a:	3301      	adds	r3, #1
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	430b      	orrs	r3, r1
 8005342:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800534e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	495c      	ldr	r1, [pc, #368]	; (80054c8 <HAL_I2C_Init+0x274>)
 8005358:	428b      	cmp	r3, r1
 800535a:	d819      	bhi.n	8005390 <HAL_I2C_Init+0x13c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	1e59      	subs	r1, r3, #1
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	fbb1 f3f3 	udiv	r3, r1, r3
 800536a:	1c59      	adds	r1, r3, #1
 800536c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005370:	400b      	ands	r3, r1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_I2C_Init+0x138>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1e59      	subs	r1, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fbb1 f3f3 	udiv	r3, r1, r3
 8005384:	3301      	adds	r3, #1
 8005386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800538a:	e051      	b.n	8005430 <HAL_I2C_Init+0x1dc>
 800538c:	2304      	movs	r3, #4
 800538e:	e04f      	b.n	8005430 <HAL_I2C_Init+0x1dc>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d111      	bne.n	80053bc <HAL_I2C_Init+0x168>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	1e58      	subs	r0, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6859      	ldr	r1, [r3, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	440b      	add	r3, r1
 80053a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053aa:	3301      	adds	r3, #1
 80053ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e012      	b.n	80053e2 <HAL_I2C_Init+0x18e>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1e58      	subs	r0, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6859      	ldr	r1, [r3, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	0099      	lsls	r1, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80053d2:	3301      	adds	r3, #1
 80053d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_I2C_Init+0x196>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e022      	b.n	8005430 <HAL_I2C_Init+0x1dc>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10e      	bne.n	8005410 <HAL_I2C_Init+0x1bc>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1e58      	subs	r0, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6859      	ldr	r1, [r3, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	440b      	add	r3, r1
 8005400:	fbb0 f3f3 	udiv	r3, r0, r3
 8005404:	3301      	adds	r3, #1
 8005406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540e:	e00f      	b.n	8005430 <HAL_I2C_Init+0x1dc>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	1e58      	subs	r0, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6859      	ldr	r1, [r3, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	0099      	lsls	r1, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	fbb0 f3f3 	udiv	r3, r0, r3
 8005426:	3301      	adds	r3, #1
 8005428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800542c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	6809      	ldr	r1, [r1, #0]
 8005434:	4313      	orrs	r3, r2
 8005436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800545e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6911      	ldr	r1, [r2, #16]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	68d2      	ldr	r2, [r2, #12]
 800546a:	4311      	orrs	r1, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	430b      	orrs	r3, r1
 8005472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	000186a0 	.word	0x000186a0
 80054cc:	001e847f 	.word	0x001e847f
 80054d0:	003d08ff 	.word	0x003d08ff
 80054d4:	431bde83 	.word	0x431bde83
 80054d8:	10624dd3 	.word	0x10624dd3

080054dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e25b      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d075      	beq.n	80055e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054fa:	4ba3      	ldr	r3, [pc, #652]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b04      	cmp	r3, #4
 8005504:	d00c      	beq.n	8005520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005506:	4ba0      	ldr	r3, [pc, #640]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800550e:	2b08      	cmp	r3, #8
 8005510:	d112      	bne.n	8005538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005512:	4b9d      	ldr	r3, [pc, #628]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800551e:	d10b      	bne.n	8005538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005520:	4b99      	ldr	r3, [pc, #612]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d05b      	beq.n	80055e4 <HAL_RCC_OscConfig+0x108>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d157      	bne.n	80055e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e236      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005540:	d106      	bne.n	8005550 <HAL_RCC_OscConfig+0x74>
 8005542:	4b91      	ldr	r3, [pc, #580]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a90      	ldr	r2, [pc, #576]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	e01d      	b.n	800558c <HAL_RCC_OscConfig+0xb0>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005558:	d10c      	bne.n	8005574 <HAL_RCC_OscConfig+0x98>
 800555a:	4b8b      	ldr	r3, [pc, #556]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a8a      	ldr	r2, [pc, #552]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	4b88      	ldr	r3, [pc, #544]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a87      	ldr	r2, [pc, #540]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 800556c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	e00b      	b.n	800558c <HAL_RCC_OscConfig+0xb0>
 8005574:	4b84      	ldr	r3, [pc, #528]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a83      	ldr	r2, [pc, #524]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 800557a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	4b81      	ldr	r3, [pc, #516]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a80      	ldr	r2, [pc, #512]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800558a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d013      	beq.n	80055bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005594:	f7fe fb3a 	bl	8003c0c <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800559c:	f7fe fb36 	bl	8003c0c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b64      	cmp	r3, #100	; 0x64
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e1fb      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ae:	4b76      	ldr	r3, [pc, #472]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0xc0>
 80055ba:	e014      	b.n	80055e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fe fb26 	bl	8003c0c <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055c4:	f7fe fb22 	bl	8003c0c <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	; 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e1e7      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d6:	4b6c      	ldr	r3, [pc, #432]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0xe8>
 80055e2:	e000      	b.n	80055e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d063      	beq.n	80056ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055f2:	4b65      	ldr	r3, [pc, #404]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055fe:	4b62      	ldr	r3, [pc, #392]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005606:	2b08      	cmp	r3, #8
 8005608:	d11c      	bne.n	8005644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800560a:	4b5f      	ldr	r3, [pc, #380]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d116      	bne.n	8005644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005616:	4b5c      	ldr	r3, [pc, #368]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_RCC_OscConfig+0x152>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d001      	beq.n	800562e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e1bb      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562e:	4b56      	ldr	r3, [pc, #344]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4952      	ldr	r1, [pc, #328]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 800563e:	4313      	orrs	r3, r2
 8005640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005642:	e03a      	b.n	80056ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d020      	beq.n	800568e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800564c:	4b4f      	ldr	r3, [pc, #316]	; (800578c <HAL_RCC_OscConfig+0x2b0>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fe fadb 	bl	8003c0c <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800565a:	f7fe fad7 	bl	8003c0c <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e19c      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566c:	4b46      	ldr	r3, [pc, #280]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005678:	4b43      	ldr	r3, [pc, #268]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4940      	ldr	r1, [pc, #256]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005688:	4313      	orrs	r3, r2
 800568a:	600b      	str	r3, [r1, #0]
 800568c:	e015      	b.n	80056ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800568e:	4b3f      	ldr	r3, [pc, #252]	; (800578c <HAL_RCC_OscConfig+0x2b0>)
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005694:	f7fe faba 	bl	8003c0c <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800569c:	f7fe fab6 	bl	8003c0c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e17b      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ae:	4b36      	ldr	r3, [pc, #216]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f0      	bne.n	800569c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d030      	beq.n	8005728 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d016      	beq.n	80056fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ce:	4b30      	ldr	r3, [pc, #192]	; (8005790 <HAL_RCC_OscConfig+0x2b4>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fe fa9a 	bl	8003c0c <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056dc:	f7fe fa96 	bl	8003c0c <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e15b      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ee:	4b26      	ldr	r3, [pc, #152]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 80056f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0x200>
 80056fa:	e015      	b.n	8005728 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056fc:	4b24      	ldr	r3, [pc, #144]	; (8005790 <HAL_RCC_OscConfig+0x2b4>)
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005702:	f7fe fa83 	bl	8003c0c <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800570a:	f7fe fa7f 	bl	8003c0c <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e144      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800571c:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 800571e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f0      	bne.n	800570a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80a0 	beq.w	8005876 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800573a:	4b13      	ldr	r3, [pc, #76]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10f      	bne.n	8005766 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	4a0e      	ldr	r2, [pc, #56]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005754:	6413      	str	r3, [r2, #64]	; 0x40
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <HAL_RCC_OscConfig+0x2ac>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005762:	2301      	movs	r3, #1
 8005764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <HAL_RCC_OscConfig+0x2b8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d121      	bne.n	80057b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005772:	4b08      	ldr	r3, [pc, #32]	; (8005794 <HAL_RCC_OscConfig+0x2b8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a07      	ldr	r2, [pc, #28]	; (8005794 <HAL_RCC_OscConfig+0x2b8>)
 8005778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800577e:	f7fe fa45 	bl	8003c0c <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005784:	e011      	b.n	80057aa <HAL_RCC_OscConfig+0x2ce>
 8005786:	bf00      	nop
 8005788:	40023800 	.word	0x40023800
 800578c:	42470000 	.word	0x42470000
 8005790:	42470e80 	.word	0x42470e80
 8005794:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005798:	f7fe fa38 	bl	8003c0c <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e0fd      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057aa:	4b81      	ldr	r3, [pc, #516]	; (80059b0 <HAL_RCC_OscConfig+0x4d4>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d106      	bne.n	80057cc <HAL_RCC_OscConfig+0x2f0>
 80057be:	4b7d      	ldr	r3, [pc, #500]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	4a7c      	ldr	r2, [pc, #496]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ca:	e01c      	b.n	8005806 <HAL_RCC_OscConfig+0x32a>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b05      	cmp	r3, #5
 80057d2:	d10c      	bne.n	80057ee <HAL_RCC_OscConfig+0x312>
 80057d4:	4b77      	ldr	r3, [pc, #476]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	4a76      	ldr	r2, [pc, #472]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80057da:	f043 0304 	orr.w	r3, r3, #4
 80057de:	6713      	str	r3, [r2, #112]	; 0x70
 80057e0:	4b74      	ldr	r3, [pc, #464]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80057e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e4:	4a73      	ldr	r2, [pc, #460]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	6713      	str	r3, [r2, #112]	; 0x70
 80057ec:	e00b      	b.n	8005806 <HAL_RCC_OscConfig+0x32a>
 80057ee:	4b71      	ldr	r3, [pc, #452]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	4a70      	ldr	r2, [pc, #448]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	6713      	str	r3, [r2, #112]	; 0x70
 80057fa:	4b6e      	ldr	r3, [pc, #440]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	4a6d      	ldr	r2, [pc, #436]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d015      	beq.n	800583a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580e:	f7fe f9fd 	bl	8003c0c <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005814:	e00a      	b.n	800582c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005816:	f7fe f9f9 	bl	8003c0c <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f241 3288 	movw	r2, #5000	; 0x1388
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e0bc      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582c:	4b61      	ldr	r3, [pc, #388]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0ee      	beq.n	8005816 <HAL_RCC_OscConfig+0x33a>
 8005838:	e014      	b.n	8005864 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800583a:	f7fe f9e7 	bl	8003c0c <HAL_GetTick>
 800583e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005840:	e00a      	b.n	8005858 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005842:	f7fe f9e3 	bl	8003c0c <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005850:	4293      	cmp	r3, r2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e0a6      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005858:	4b56      	ldr	r3, [pc, #344]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1ee      	bne.n	8005842 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d105      	bne.n	8005876 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800586a:	4b52      	ldr	r3, [pc, #328]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	4a51      	ldr	r2, [pc, #324]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 8005870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 8092 	beq.w	80059a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005880:	4b4c      	ldr	r3, [pc, #304]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 030c 	and.w	r3, r3, #12
 8005888:	2b08      	cmp	r3, #8
 800588a:	d05c      	beq.n	8005946 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d141      	bne.n	8005918 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005894:	4b48      	ldr	r3, [pc, #288]	; (80059b8 <HAL_RCC_OscConfig+0x4dc>)
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589a:	f7fe f9b7 	bl	8003c0c <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a2:	f7fe f9b3 	bl	8003c0c <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e078      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b4:	4b3f      	ldr	r3, [pc, #252]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f0      	bne.n	80058a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	019b      	lsls	r3, r3, #6
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	3b01      	subs	r3, #1
 80058da:	041b      	lsls	r3, r3, #16
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	061b      	lsls	r3, r3, #24
 80058e4:	4933      	ldr	r1, [pc, #204]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ea:	4b33      	ldr	r3, [pc, #204]	; (80059b8 <HAL_RCC_OscConfig+0x4dc>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f0:	f7fe f98c 	bl	8003c0c <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f8:	f7fe f988 	bl	8003c0c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e04d      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590a:	4b2a      	ldr	r3, [pc, #168]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x41c>
 8005916:	e045      	b.n	80059a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005918:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <HAL_RCC_OscConfig+0x4dc>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591e:	f7fe f975 	bl	8003c0c <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005926:	f7fe f971 	bl	8003c0c <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e036      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005938:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1f0      	bne.n	8005926 <HAL_RCC_OscConfig+0x44a>
 8005944:	e02e      	b.n	80059a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e029      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005952:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <HAL_RCC_OscConfig+0x4d8>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	429a      	cmp	r2, r3
 8005964:	d11c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005970:	429a      	cmp	r2, r3
 8005972:	d115      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800597a:	4013      	ands	r3, r2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005980:	4293      	cmp	r3, r2
 8005982:	d10d      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800598e:	429a      	cmp	r2, r3
 8005990:	d106      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40007000 	.word	0x40007000
 80059b4:	40023800 	.word	0x40023800
 80059b8:	42470060 	.word	0x42470060

080059bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0cc      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059d0:	4b68      	ldr	r3, [pc, #416]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 030f 	and.w	r3, r3, #15
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d90c      	bls.n	80059f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059de:	4b65      	ldr	r3, [pc, #404]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e6:	4b63      	ldr	r3, [pc, #396]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0b8      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d020      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a10:	4b59      	ldr	r3, [pc, #356]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	4a58      	ldr	r2, [pc, #352]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a28:	4b53      	ldr	r3, [pc, #332]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4a52      	ldr	r2, [pc, #328]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a34:	4b50      	ldr	r3, [pc, #320]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	494d      	ldr	r1, [pc, #308]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d044      	beq.n	8005adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d107      	bne.n	8005a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5a:	4b47      	ldr	r3, [pc, #284]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d119      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e07f      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d003      	beq.n	8005a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d107      	bne.n	8005a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a7a:	4b3f      	ldr	r3, [pc, #252]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e06f      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a8a:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e067      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a9a:	4b37      	ldr	r3, [pc, #220]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 0203 	bic.w	r2, r3, #3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4934      	ldr	r1, [pc, #208]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aac:	f7fe f8ae 	bl	8003c0c <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab2:	e00a      	b.n	8005aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab4:	f7fe f8aa 	bl	8003c0c <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e04f      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aca:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 020c 	and.w	r2, r3, #12
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d1eb      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005adc:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d20c      	bcs.n	8005b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aea:	4b22      	ldr	r3, [pc, #136]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af2:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <HAL_RCC_ClockConfig+0x1b8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d001      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e032      	b.n	8005b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b10:	4b19      	ldr	r3, [pc, #100]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	4916      	ldr	r1, [pc, #88]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b2e:	4b12      	ldr	r3, [pc, #72]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	490e      	ldr	r1, [pc, #56]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b42:	f000 f821 	bl	8005b88 <HAL_RCC_GetSysClockFreq>
 8005b46:	4602      	mov	r2, r0
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	091b      	lsrs	r3, r3, #4
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	490a      	ldr	r1, [pc, #40]	; (8005b7c <HAL_RCC_ClockConfig+0x1c0>)
 8005b54:	5ccb      	ldrb	r3, [r1, r3]
 8005b56:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5a:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <HAL_RCC_ClockConfig+0x1c8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe f80e 	bl	8003b84 <HAL_InitTick>

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40023c00 	.word	0x40023c00
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	0800cae4 	.word	0x0800cae4
 8005b80:	20000000 	.word	0x20000000
 8005b84:	20000004 	.word	0x20000004

08005b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	607b      	str	r3, [r7, #4]
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ba0:	4b67      	ldr	r3, [pc, #412]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 030c 	and.w	r3, r3, #12
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d00d      	beq.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	f200 80bd 	bhi.w	8005d2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_RCC_GetSysClockFreq+0x34>
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d003      	beq.n	8005bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bba:	e0b7      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bbc:	4b61      	ldr	r3, [pc, #388]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bbe:	60bb      	str	r3, [r7, #8]
       break;
 8005bc0:	e0b7      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bc2:	4b60      	ldr	r3, [pc, #384]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bc4:	60bb      	str	r3, [r7, #8]
      break;
 8005bc6:	e0b4      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bc8:	4b5d      	ldr	r3, [pc, #372]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bd2:	4b5b      	ldr	r3, [pc, #364]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d04d      	beq.n	8005c7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bde:	4b58      	ldr	r3, [pc, #352]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	099b      	lsrs	r3, r3, #6
 8005be4:	461a      	mov	r2, r3
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bee:	f04f 0100 	mov.w	r1, #0
 8005bf2:	ea02 0800 	and.w	r8, r2, r0
 8005bf6:	ea03 0901 	and.w	r9, r3, r1
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	014b      	lsls	r3, r1, #5
 8005c08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c0c:	0142      	lsls	r2, r0, #5
 8005c0e:	4610      	mov	r0, r2
 8005c10:	4619      	mov	r1, r3
 8005c12:	ebb0 0008 	subs.w	r0, r0, r8
 8005c16:	eb61 0109 	sbc.w	r1, r1, r9
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	018b      	lsls	r3, r1, #6
 8005c24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c28:	0182      	lsls	r2, r0, #6
 8005c2a:	1a12      	subs	r2, r2, r0
 8005c2c:	eb63 0301 	sbc.w	r3, r3, r1
 8005c30:	f04f 0000 	mov.w	r0, #0
 8005c34:	f04f 0100 	mov.w	r1, #0
 8005c38:	00d9      	lsls	r1, r3, #3
 8005c3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c3e:	00d0      	lsls	r0, r2, #3
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	eb12 0208 	adds.w	r2, r2, r8
 8005c48:	eb43 0309 	adc.w	r3, r3, r9
 8005c4c:	f04f 0000 	mov.w	r0, #0
 8005c50:	f04f 0100 	mov.w	r1, #0
 8005c54:	0299      	lsls	r1, r3, #10
 8005c56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c5a:	0290      	lsls	r0, r2, #10
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4610      	mov	r0, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	f7fb f80c 	bl	8000c88 <__aeabi_uldivmod>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4613      	mov	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	e04a      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c7a:	4b31      	ldr	r3, [pc, #196]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	099b      	lsrs	r3, r3, #6
 8005c80:	461a      	mov	r2, r3
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c8a:	f04f 0100 	mov.w	r1, #0
 8005c8e:	ea02 0400 	and.w	r4, r2, r0
 8005c92:	ea03 0501 	and.w	r5, r3, r1
 8005c96:	4620      	mov	r0, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	014b      	lsls	r3, r1, #5
 8005ca4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ca8:	0142      	lsls	r2, r0, #5
 8005caa:	4610      	mov	r0, r2
 8005cac:	4619      	mov	r1, r3
 8005cae:	1b00      	subs	r0, r0, r4
 8005cb0:	eb61 0105 	sbc.w	r1, r1, r5
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	018b      	lsls	r3, r1, #6
 8005cbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005cc2:	0182      	lsls	r2, r0, #6
 8005cc4:	1a12      	subs	r2, r2, r0
 8005cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8005cca:	f04f 0000 	mov.w	r0, #0
 8005cce:	f04f 0100 	mov.w	r1, #0
 8005cd2:	00d9      	lsls	r1, r3, #3
 8005cd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cd8:	00d0      	lsls	r0, r2, #3
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	1912      	adds	r2, r2, r4
 8005ce0:	eb45 0303 	adc.w	r3, r5, r3
 8005ce4:	f04f 0000 	mov.w	r0, #0
 8005ce8:	f04f 0100 	mov.w	r1, #0
 8005cec:	0299      	lsls	r1, r3, #10
 8005cee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005cf2:	0290      	lsls	r0, r2, #10
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	f7fa ffc0 	bl	8000c88 <__aeabi_uldivmod>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	0c1b      	lsrs	r3, r3, #16
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d28:	60bb      	str	r3, [r7, #8]
      break;
 8005d2a:	e002      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d2e:	60bb      	str	r3, [r7, #8]
      break;
 8005d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d32:	68bb      	ldr	r3, [r7, #8]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d3e:	bf00      	nop
 8005d40:	40023800 	.word	0x40023800
 8005d44:	00f42400 	.word	0x00f42400

08005d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d4c:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	20000000 	.word	0x20000000

08005d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d64:	f7ff fff0 	bl	8005d48 <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	0a9b      	lsrs	r3, r3, #10
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4903      	ldr	r1, [pc, #12]	; (8005d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	0800caf4 	.word	0x0800caf4

08005d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d8c:	f7ff ffdc 	bl	8005d48 <HAL_RCC_GetHCLKFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	0b5b      	lsrs	r3, r3, #13
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4903      	ldr	r1, [pc, #12]	; (8005dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40023800 	.word	0x40023800
 8005dac:	0800caf4 	.word	0x0800caf4

08005db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e056      	b.n	8005e70 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fc ffbf 	bl	8002d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	ea42 0103 	orr.w	r1, r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	0c1b      	lsrs	r3, r3, #16
 8005e40:	f003 0104 	and.w	r1, r3, #4
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	69da      	ldr	r2, [r3, #28]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_SPI_Transmit+0x22>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e11e      	b.n	80060d8 <HAL_SPI_Transmit+0x260>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ea2:	f7fd feb3 	bl	8003c0c <HAL_GetTick>
 8005ea6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ea8:	88fb      	ldrh	r3, [r7, #6]
 8005eaa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d002      	beq.n	8005ebe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ebc:	e103      	b.n	80060c6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_SPI_Transmit+0x52>
 8005ec4:	88fb      	ldrh	r3, [r7, #6]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ece:	e0fa      	b.n	80060c6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	88fa      	ldrh	r2, [r7, #6]
 8005ee8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	88fa      	ldrh	r2, [r7, #6]
 8005eee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f16:	d107      	bne.n	8005f28 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f32:	2b40      	cmp	r3, #64	; 0x40
 8005f34:	d007      	beq.n	8005f46 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4e:	d14b      	bne.n	8005fe8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_SPI_Transmit+0xe6>
 8005f58:	8afb      	ldrh	r3, [r7, #22]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d13e      	bne.n	8005fdc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	881a      	ldrh	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	1c9a      	adds	r2, r3, #2
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f82:	e02b      	b.n	8005fdc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d112      	bne.n	8005fb8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	881a      	ldrh	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	1c9a      	adds	r2, r3, #2
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fb6:	e011      	b.n	8005fdc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fb8:	f7fd fe28 	bl	8003c0c <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d803      	bhi.n	8005fd0 <HAL_SPI_Transmit+0x158>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d102      	bne.n	8005fd6 <HAL_SPI_Transmit+0x15e>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fda:	e074      	b.n	80060c6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1ce      	bne.n	8005f84 <HAL_SPI_Transmit+0x10c>
 8005fe6:	e04c      	b.n	8006082 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <HAL_SPI_Transmit+0x17e>
 8005ff0:	8afb      	ldrh	r3, [r7, #22]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d140      	bne.n	8006078 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	7812      	ldrb	r2, [r2, #0]
 8006002:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800601c:	e02c      	b.n	8006078 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b02      	cmp	r3, #2
 800602a:	d113      	bne.n	8006054 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	86da      	strh	r2, [r3, #54]	; 0x36
 8006052:	e011      	b.n	8006078 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006054:	f7fd fdda 	bl	8003c0c <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d803      	bhi.n	800606c <HAL_SPI_Transmit+0x1f4>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d102      	bne.n	8006072 <HAL_SPI_Transmit+0x1fa>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006076:	e026      	b.n	80060c6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1cd      	bne.n	800601e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fba4 	bl	80067d4 <SPI_EndRxTxTransaction>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e000      	b.n	80060c6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80060c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060fc:	d112      	bne.n	8006124 <HAL_SPI_Receive+0x44>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10e      	bne.n	8006124 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2204      	movs	r2, #4
 800610a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f8e9 	bl	80062f2 <HAL_SPI_TransmitReceive>
 8006120:	4603      	mov	r3, r0
 8006122:	e0e2      	b.n	80062ea <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_SPI_Receive+0x52>
 800612e:	2302      	movs	r3, #2
 8006130:	e0db      	b.n	80062ea <HAL_SPI_Receive+0x20a>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800613a:	f7fd fd67 	bl	8003c0c <HAL_GetTick>
 800613e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d002      	beq.n	8006152 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800614c:	2302      	movs	r3, #2
 800614e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006150:	e0c2      	b.n	80062d8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_SPI_Receive+0x7e>
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d102      	bne.n	8006164 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006162:	e0b9      	b.n	80062d8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2204      	movs	r2, #4
 8006168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061aa:	d107      	bne.n	80061bc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d007      	beq.n	80061da <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d162      	bne.n	80062a8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80061e2:	e02e      	b.n	8006242 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d115      	bne.n	800621e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f103 020c 	add.w	r2, r3, #12
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800621c:	e011      	b.n	8006242 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800621e:	f7fd fcf5 	bl	8003c0c <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d803      	bhi.n	8006236 <HAL_SPI_Receive+0x156>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d102      	bne.n	800623c <HAL_SPI_Receive+0x15c>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006240:	e04a      	b.n	80062d8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1cb      	bne.n	80061e4 <HAL_SPI_Receive+0x104>
 800624c:	e031      	b.n	80062b2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d113      	bne.n	8006284 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	b292      	uxth	r2, r2
 8006268:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006282:	e011      	b.n	80062a8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006284:	f7fd fcc2 	bl	8003c0c <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d803      	bhi.n	800629c <HAL_SPI_Receive+0x1bc>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629a:	d102      	bne.n	80062a2 <HAL_SPI_Receive+0x1c2>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062a6:	e017      	b.n	80062d8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1cd      	bne.n	800624e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fa27 	bl	800670a <SPI_EndRxTransaction>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2220      	movs	r2, #32
 80062c6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	75fb      	strb	r3, [r7, #23]
 80062d4:	e000      	b.n	80062d8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80062d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b08c      	sub	sp, #48	; 0x30
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
 80062fe:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006300:	2301      	movs	r3, #1
 8006302:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_SPI_TransmitReceive+0x26>
 8006314:	2302      	movs	r3, #2
 8006316:	e18a      	b.n	800662e <HAL_SPI_TransmitReceive+0x33c>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006320:	f7fd fc74 	bl	8003c0c <HAL_GetTick>
 8006324:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800632c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006336:	887b      	ldrh	r3, [r7, #2]
 8006338:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800633a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800633e:	2b01      	cmp	r3, #1
 8006340:	d00f      	beq.n	8006362 <HAL_SPI_TransmitReceive+0x70>
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006348:	d107      	bne.n	800635a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <HAL_SPI_TransmitReceive+0x68>
 8006352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006356:	2b04      	cmp	r3, #4
 8006358:	d003      	beq.n	8006362 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800635a:	2302      	movs	r3, #2
 800635c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006360:	e15b      	b.n	800661a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x82>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x82>
 800636e:	887b      	ldrh	r3, [r7, #2]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800637a:	e14e      	b.n	800661a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b04      	cmp	r3, #4
 8006386:	d003      	beq.n	8006390 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2205      	movs	r2, #5
 800638c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	887a      	ldrh	r2, [r7, #2]
 80063a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	887a      	ldrh	r2, [r7, #2]
 80063a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	887a      	ldrh	r2, [r7, #2]
 80063b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	887a      	ldrh	r2, [r7, #2]
 80063b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d007      	beq.n	80063e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ec:	d178      	bne.n	80064e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_SPI_TransmitReceive+0x10a>
 80063f6:	8b7b      	ldrh	r3, [r7, #26]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d166      	bne.n	80064ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006400:	881a      	ldrh	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	1c9a      	adds	r2, r3, #2
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006416:	b29b      	uxth	r3, r3
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006420:	e053      	b.n	80064ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b02      	cmp	r3, #2
 800642e:	d11b      	bne.n	8006468 <HAL_SPI_TransmitReceive+0x176>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d016      	beq.n	8006468 <HAL_SPI_TransmitReceive+0x176>
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d113      	bne.n	8006468 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	881a      	ldrh	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b01      	cmp	r3, #1
 8006474:	d119      	bne.n	80064aa <HAL_SPI_TransmitReceive+0x1b8>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d014      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	b292      	uxth	r2, r2
 800648c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	1c9a      	adds	r2, r3, #2
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064a6:	2301      	movs	r3, #1
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064aa:	f7fd fbaf 	bl	8003c0c <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d807      	bhi.n	80064ca <HAL_SPI_TransmitReceive+0x1d8>
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c0:	d003      	beq.n	80064ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064c8:	e0a7      	b.n	800661a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1a6      	bne.n	8006422 <HAL_SPI_TransmitReceive+0x130>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1a1      	bne.n	8006422 <HAL_SPI_TransmitReceive+0x130>
 80064de:	e07c      	b.n	80065da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <HAL_SPI_TransmitReceive+0x1fc>
 80064e8:	8b7b      	ldrh	r3, [r7, #26]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d16b      	bne.n	80065c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	330c      	adds	r3, #12
 80064f8:	7812      	ldrb	r2, [r2, #0]
 80064fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006514:	e057      	b.n	80065c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b02      	cmp	r3, #2
 8006522:	d11c      	bne.n	800655e <HAL_SPI_TransmitReceive+0x26c>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d017      	beq.n	800655e <HAL_SPI_TransmitReceive+0x26c>
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d114      	bne.n	800655e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b01      	cmp	r3, #1
 800656a:	d119      	bne.n	80065a0 <HAL_SPI_TransmitReceive+0x2ae>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d014      	beq.n	80065a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800659c:	2301      	movs	r3, #1
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065a0:	f7fd fb34 	bl	8003c0c <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d803      	bhi.n	80065b8 <HAL_SPI_TransmitReceive+0x2c6>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	d102      	bne.n	80065be <HAL_SPI_TransmitReceive+0x2cc>
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d103      	bne.n	80065c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065c4:	e029      	b.n	800661a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1a2      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x224>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d19d      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f8f8 	bl	80067d4 <SPI_EndRxTxTransaction>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d006      	beq.n	80065f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80065f6:	e010      	b.n	800661a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10b      	bne.n	8006618 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	e000      	b.n	800661a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006618:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800662a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800662e:	4618      	mov	r0, r3
 8006630:	3730      	adds	r7, #48	; 0x30
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	4613      	mov	r3, r2
 8006644:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006646:	e04c      	b.n	80066e2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664e:	d048      	beq.n	80066e2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006650:	f7fd fadc 	bl	8003c0c <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d902      	bls.n	8006666 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d13d      	bne.n	80066e2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006674:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800667e:	d111      	bne.n	80066a4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006688:	d004      	beq.n	8006694 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006692:	d107      	bne.n	80066a4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ac:	d10f      	bne.n	80066ce <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e00f      	b.n	8006702 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4013      	ands	r3, r2
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	bf0c      	ite	eq
 80066f2:	2301      	moveq	r3, #1
 80066f4:	2300      	movne	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d1a3      	bne.n	8006648 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b086      	sub	sp, #24
 800670e:	af02      	add	r7, sp, #8
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800671e:	d111      	bne.n	8006744 <SPI_EndRxTransaction+0x3a>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006728:	d004      	beq.n	8006734 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006732:	d107      	bne.n	8006744 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006742:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800674c:	d12a      	bne.n	80067a4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006756:	d012      	beq.n	800677e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2200      	movs	r2, #0
 8006760:	2180      	movs	r1, #128	; 0x80
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff ff67 	bl	8006636 <SPI_WaitFlagStateUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d02d      	beq.n	80067ca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	f043 0220 	orr.w	r2, r3, #32
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e026      	b.n	80067cc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2200      	movs	r2, #0
 8006786:	2101      	movs	r1, #1
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff ff54 	bl	8006636 <SPI_WaitFlagStateUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01a      	beq.n	80067ca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006798:	f043 0220 	orr.w	r2, r3, #32
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e013      	b.n	80067cc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2200      	movs	r2, #0
 80067ac:	2101      	movs	r1, #1
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff ff41 	bl	8006636 <SPI_WaitFlagStateUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067be:	f043 0220 	orr.w	r2, r3, #32
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e000      	b.n	80067cc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067e0:	4b1b      	ldr	r3, [pc, #108]	; (8006850 <SPI_EndRxTxTransaction+0x7c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1b      	ldr	r2, [pc, #108]	; (8006854 <SPI_EndRxTxTransaction+0x80>)
 80067e6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ea:	0d5b      	lsrs	r3, r3, #21
 80067ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067f0:	fb02 f303 	mul.w	r3, r2, r3
 80067f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067fe:	d112      	bne.n	8006826 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2200      	movs	r2, #0
 8006808:	2180      	movs	r1, #128	; 0x80
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f7ff ff13 	bl	8006636 <SPI_WaitFlagStateUntilTimeout>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681a:	f043 0220 	orr.w	r2, r3, #32
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e00f      	b.n	8006846 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	3b01      	subs	r3, #1
 8006830:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683c:	2b80      	cmp	r3, #128	; 0x80
 800683e:	d0f2      	beq.n	8006826 <SPI_EndRxTxTransaction+0x52>
 8006840:	e000      	b.n	8006844 <SPI_EndRxTxTransaction+0x70>
        break;
 8006842:	bf00      	nop
  }

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000000 	.word	0x20000000
 8006854:	165e9f81 	.word	0x165e9f81

08006858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e01d      	b.n	80068a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fc fb66 	bl	8002f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f000 fc22 	bl	80070e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0201 	orr.w	r2, r2, #1
 80068c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b06      	cmp	r3, #6
 80068d6:	d007      	beq.n	80068e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a1a      	ldr	r2, [r3, #32]
 8006914:	f241 1311 	movw	r3, #4369	; 0x1111
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10f      	bne.n	800693e <HAL_TIM_Base_Stop_IT+0x48>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	f240 4344 	movw	r3, #1092	; 0x444
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d107      	bne.n	800693e <HAL_TIM_Base_Stop_IT+0x48>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0201 	bic.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e01d      	b.n	800699a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fc faca 	bl	8002f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3304      	adds	r3, #4
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f000 fba8 	bl	80070e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2201      	movs	r2, #1
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fde2 	bl	8007580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <HAL_TIM_PWM_Start+0x74>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d004      	beq.n	80069d0 <HAL_TIM_PWM_Start+0x2c>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a14      	ldr	r2, [pc, #80]	; (8006a1c <HAL_TIM_PWM_Start+0x78>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d101      	bne.n	80069d4 <HAL_TIM_PWM_Start+0x30>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <HAL_TIM_PWM_Start+0x32>
 80069d4:	2300      	movs	r3, #0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b06      	cmp	r3, #6
 80069fa:	d007      	beq.n	8006a0c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40010000 	.word	0x40010000
 8006a1c:	40010400 	.word	0x40010400

08006a20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fda4 	bl	8007580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a22      	ldr	r2, [pc, #136]	; (8006ac8 <HAL_TIM_PWM_Stop+0xa8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <HAL_TIM_PWM_Stop+0x2c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a21      	ldr	r2, [pc, #132]	; (8006acc <HAL_TIM_PWM_Stop+0xac>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIM_PWM_Stop+0x30>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <HAL_TIM_PWM_Stop+0x32>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d017      	beq.n	8006a86 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6a1a      	ldr	r2, [r3, #32]
 8006a5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10f      	bne.n	8006a86 <HAL_TIM_PWM_Stop+0x66>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6a1a      	ldr	r2, [r3, #32]
 8006a6c:	f240 4344 	movw	r3, #1092	; 0x444
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d107      	bne.n	8006a86 <HAL_TIM_PWM_Stop+0x66>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6a1a      	ldr	r2, [r3, #32]
 8006a8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a90:	4013      	ands	r3, r2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10f      	bne.n	8006ab6 <HAL_TIM_PWM_Stop+0x96>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6a1a      	ldr	r2, [r3, #32]
 8006a9c:	f240 4344 	movw	r3, #1092	; 0x444
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d107      	bne.n	8006ab6 <HAL_TIM_PWM_Stop+0x96>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40010400 	.word	0x40010400

08006ad0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e083      	b.n	8006bec <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d106      	bne.n	8006afe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7fc f979 	bl	8002df0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2202      	movs	r2, #2
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b14:	f023 0307 	bic.w	r3, r3, #7
 8006b18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3304      	adds	r3, #4
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f000 fadb 	bl	80070e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	4313      	orrs	r3, r2
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b70:	f023 030c 	bic.w	r3, r3, #12
 8006b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	011a      	lsls	r2, r3, #4
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	031b      	lsls	r3, r3, #12
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006bb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_TIM_Encoder_Start+0x18>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d008      	beq.n	8006c1c <HAL_TIM_Encoder_Start+0x28>
 8006c0a:	e00f      	b.n	8006c2c <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2201      	movs	r2, #1
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fcb3 	bl	8007580 <TIM_CCxChannelCmd>
      break;
 8006c1a:	e016      	b.n	8006c4a <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2201      	movs	r2, #1
 8006c22:	2104      	movs	r1, #4
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 fcab 	bl	8007580 <TIM_CCxChannelCmd>
      break;
 8006c2a:	e00e      	b.n	8006c4a <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2201      	movs	r2, #1
 8006c32:	2100      	movs	r1, #0
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fca3 	bl	8007580 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	2104      	movs	r1, #4
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fc9c 	bl	8007580 <TIM_CCxChannelCmd>
      break;
 8006c48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f042 0201 	orr.w	r2, r2, #1
 8006c58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_TIM_Encoder_Stop+0x18>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d008      	beq.n	8006c8c <HAL_TIM_Encoder_Stop+0x28>
 8006c7a:	e00f      	b.n	8006c9c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2200      	movs	r2, #0
 8006c82:	2100      	movs	r1, #0
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fc7b 	bl	8007580 <TIM_CCxChannelCmd>
      break;
 8006c8a:	e016      	b.n	8006cba <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2200      	movs	r2, #0
 8006c92:	2104      	movs	r1, #4
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fc73 	bl	8007580 <TIM_CCxChannelCmd>
      break;
 8006c9a:	e00e      	b.n	8006cba <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 fc6b 	bl	8007580 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2104      	movs	r1, #4
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fc64 	bl	8007580 <TIM_CCxChannelCmd>
      break;
 8006cb8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a1a      	ldr	r2, [r3, #32]
 8006cc0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10f      	bne.n	8006cea <HAL_TIM_Encoder_Stop+0x86>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6a1a      	ldr	r2, [r3, #32]
 8006cd0:	f240 4344 	movw	r3, #1092	; 0x444
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d107      	bne.n	8006cea <HAL_TIM_Encoder_Stop+0x86>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d122      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d11b      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 0202 	mvn.w	r2, #2
 8006d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f9b4 	bl	80070a4 <HAL_TIM_IC_CaptureCallback>
 8006d3c:	e005      	b.n	8006d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f9a6 	bl	8007090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f9b7 	bl	80070b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d122      	bne.n	8006da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d11b      	bne.n	8006da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0204 	mvn.w	r2, #4
 8006d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f98a 	bl	80070a4 <HAL_TIM_IC_CaptureCallback>
 8006d90:	e005      	b.n	8006d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f97c 	bl	8007090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f98d 	bl	80070b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b08      	cmp	r3, #8
 8006db0:	d122      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d11b      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0208 	mvn.w	r2, #8
 8006dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2204      	movs	r2, #4
 8006dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f960 	bl	80070a4 <HAL_TIM_IC_CaptureCallback>
 8006de4:	e005      	b.n	8006df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f952 	bl	8007090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f963 	bl	80070b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0310 	and.w	r3, r3, #16
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d122      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d11b      	bne.n	8006e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0210 	mvn.w	r2, #16
 8006e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2208      	movs	r2, #8
 8006e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f936 	bl	80070a4 <HAL_TIM_IC_CaptureCallback>
 8006e38:	e005      	b.n	8006e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f928 	bl	8007090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f939 	bl	80070b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d10e      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d107      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0201 	mvn.w	r2, #1
 8006e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fa fd84 	bl	8001980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d10e      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d107      	bne.n	8006ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fc1a 	bl	80076d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b40      	cmp	r3, #64	; 0x40
 8006eb0:	d10e      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	d107      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8fe 	bl	80070cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d10e      	bne.n	8006efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d107      	bne.n	8006efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0220 	mvn.w	r2, #32
 8006ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fbe4 	bl	80076c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d101      	bne.n	8006f1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	e0b4      	b.n	8007088 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b0c      	cmp	r3, #12
 8006f32:	f200 809f 	bhi.w	8007074 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006f36:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f71 	.word	0x08006f71
 8006f40:	08007075 	.word	0x08007075
 8006f44:	08007075 	.word	0x08007075
 8006f48:	08007075 	.word	0x08007075
 8006f4c:	08006fb1 	.word	0x08006fb1
 8006f50:	08007075 	.word	0x08007075
 8006f54:	08007075 	.word	0x08007075
 8006f58:	08007075 	.word	0x08007075
 8006f5c:	08006ff3 	.word	0x08006ff3
 8006f60:	08007075 	.word	0x08007075
 8006f64:	08007075 	.word	0x08007075
 8006f68:	08007075 	.word	0x08007075
 8006f6c:	08007033 	.word	0x08007033
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 f952 	bl	8007220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0208 	orr.w	r2, r2, #8
 8006f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0204 	bic.w	r2, r2, #4
 8006f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6999      	ldr	r1, [r3, #24]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	619a      	str	r2, [r3, #24]
      break;
 8006fae:	e062      	b.n	8007076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f9a2 	bl	8007300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6999      	ldr	r1, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	021a      	lsls	r2, r3, #8
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	619a      	str	r2, [r3, #24]
      break;
 8006ff0:	e041      	b.n	8007076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 f9f7 	bl	80073ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69da      	ldr	r2, [r3, #28]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0208 	orr.w	r2, r2, #8
 800700c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69da      	ldr	r2, [r3, #28]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0204 	bic.w	r2, r2, #4
 800701c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69d9      	ldr	r1, [r3, #28]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	691a      	ldr	r2, [r3, #16]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	61da      	str	r2, [r3, #28]
      break;
 8007030:	e021      	b.n	8007076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fa4b 	bl	80074d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800704c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800705c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69d9      	ldr	r1, [r3, #28]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	021a      	lsls	r2, r3, #8
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	61da      	str	r2, [r3, #28]
      break;
 8007072:	e000      	b.n	8007076 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007074:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a40      	ldr	r2, [pc, #256]	; (80071f4 <TIM_Base_SetConfig+0x114>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d013      	beq.n	8007120 <TIM_Base_SetConfig+0x40>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fe:	d00f      	beq.n	8007120 <TIM_Base_SetConfig+0x40>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a3d      	ldr	r2, [pc, #244]	; (80071f8 <TIM_Base_SetConfig+0x118>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00b      	beq.n	8007120 <TIM_Base_SetConfig+0x40>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a3c      	ldr	r2, [pc, #240]	; (80071fc <TIM_Base_SetConfig+0x11c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d007      	beq.n	8007120 <TIM_Base_SetConfig+0x40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a3b      	ldr	r2, [pc, #236]	; (8007200 <TIM_Base_SetConfig+0x120>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d003      	beq.n	8007120 <TIM_Base_SetConfig+0x40>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a3a      	ldr	r2, [pc, #232]	; (8007204 <TIM_Base_SetConfig+0x124>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d108      	bne.n	8007132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a2f      	ldr	r2, [pc, #188]	; (80071f4 <TIM_Base_SetConfig+0x114>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d02b      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007140:	d027      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a2c      	ldr	r2, [pc, #176]	; (80071f8 <TIM_Base_SetConfig+0x118>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d023      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a2b      	ldr	r2, [pc, #172]	; (80071fc <TIM_Base_SetConfig+0x11c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01f      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a2a      	ldr	r2, [pc, #168]	; (8007200 <TIM_Base_SetConfig+0x120>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01b      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a29      	ldr	r2, [pc, #164]	; (8007204 <TIM_Base_SetConfig+0x124>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d017      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a28      	ldr	r2, [pc, #160]	; (8007208 <TIM_Base_SetConfig+0x128>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a27      	ldr	r2, [pc, #156]	; (800720c <TIM_Base_SetConfig+0x12c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00f      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a26      	ldr	r2, [pc, #152]	; (8007210 <TIM_Base_SetConfig+0x130>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00b      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a25      	ldr	r2, [pc, #148]	; (8007214 <TIM_Base_SetConfig+0x134>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d007      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a24      	ldr	r2, [pc, #144]	; (8007218 <TIM_Base_SetConfig+0x138>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d003      	beq.n	8007192 <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a23      	ldr	r2, [pc, #140]	; (800721c <TIM_Base_SetConfig+0x13c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d108      	bne.n	80071a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a0a      	ldr	r2, [pc, #40]	; (80071f4 <TIM_Base_SetConfig+0x114>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d003      	beq.n	80071d8 <TIM_Base_SetConfig+0xf8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a0c      	ldr	r2, [pc, #48]	; (8007204 <TIM_Base_SetConfig+0x124>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d103      	bne.n	80071e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	615a      	str	r2, [r3, #20]
}
 80071e6:	bf00      	nop
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40010000 	.word	0x40010000
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	40000c00 	.word	0x40000c00
 8007204:	40010400 	.word	0x40010400
 8007208:	40014000 	.word	0x40014000
 800720c:	40014400 	.word	0x40014400
 8007210:	40014800 	.word	0x40014800
 8007214:	40001800 	.word	0x40001800
 8007218:	40001c00 	.word	0x40001c00
 800721c:	40002000 	.word	0x40002000

08007220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 0201 	bic.w	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 0303 	bic.w	r3, r3, #3
 8007256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f023 0302 	bic.w	r3, r3, #2
 8007268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a20      	ldr	r2, [pc, #128]	; (80072f8 <TIM_OC1_SetConfig+0xd8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d003      	beq.n	8007284 <TIM_OC1_SetConfig+0x64>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <TIM_OC1_SetConfig+0xdc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d10c      	bne.n	800729e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f023 0308 	bic.w	r3, r3, #8
 800728a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f023 0304 	bic.w	r3, r3, #4
 800729c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <TIM_OC1_SetConfig+0xd8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d003      	beq.n	80072ae <TIM_OC1_SetConfig+0x8e>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a14      	ldr	r2, [pc, #80]	; (80072fc <TIM_OC1_SetConfig+0xdc>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d111      	bne.n	80072d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	621a      	str	r2, [r3, #32]
}
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	40010000 	.word	0x40010000
 80072fc:	40010400 	.word	0x40010400

08007300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f023 0210 	bic.w	r2, r3, #16
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f023 0320 	bic.w	r3, r3, #32
 800734a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a22      	ldr	r2, [pc, #136]	; (80073e4 <TIM_OC2_SetConfig+0xe4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_OC2_SetConfig+0x68>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a21      	ldr	r2, [pc, #132]	; (80073e8 <TIM_OC2_SetConfig+0xe8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d10d      	bne.n	8007384 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800736e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	4313      	orrs	r3, r2
 800737a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <TIM_OC2_SetConfig+0xe4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d003      	beq.n	8007394 <TIM_OC2_SetConfig+0x94>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a16      	ldr	r2, [pc, #88]	; (80073e8 <TIM_OC2_SetConfig+0xe8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d113      	bne.n	80073bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800739a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40010400 	.word	0x40010400

080073ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a21      	ldr	r2, [pc, #132]	; (80074cc <TIM_OC3_SetConfig+0xe0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_OC3_SetConfig+0x66>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a20      	ldr	r2, [pc, #128]	; (80074d0 <TIM_OC3_SetConfig+0xe4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10d      	bne.n	800746e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800746c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a16      	ldr	r2, [pc, #88]	; (80074cc <TIM_OC3_SetConfig+0xe0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_OC3_SetConfig+0x92>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a15      	ldr	r2, [pc, #84]	; (80074d0 <TIM_OC3_SetConfig+0xe4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d113      	bne.n	80074a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800748c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40010400 	.word	0x40010400

080074d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800751e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	031b      	lsls	r3, r3, #12
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a12      	ldr	r2, [pc, #72]	; (8007578 <TIM_OC4_SetConfig+0xa4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d003      	beq.n	800753c <TIM_OC4_SetConfig+0x68>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a11      	ldr	r2, [pc, #68]	; (800757c <TIM_OC4_SetConfig+0xa8>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d109      	bne.n	8007550 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	019b      	lsls	r3, r3, #6
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4313      	orrs	r3, r2
 800754e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	621a      	str	r2, [r3, #32]
}
 800756a:	bf00      	nop
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	40010000 	.word	0x40010000
 800757c:	40010400 	.word	0x40010400

08007580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	2201      	movs	r2, #1
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1a      	ldr	r2, [r3, #32]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	43db      	mvns	r3, r3
 80075a2:	401a      	ands	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a1a      	ldr	r2, [r3, #32]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	fa01 f303 	lsl.w	r3, r1, r3
 80075b8:	431a      	orrs	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	621a      	str	r2, [r3, #32]
}
 80075be:	bf00      	nop
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e05a      	b.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a21      	ldr	r2, [pc, #132]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d022      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d01d      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1d      	ldr	r2, [pc, #116]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d018      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1b      	ldr	r2, [pc, #108]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00e      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a18      	ldr	r2, [pc, #96]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d009      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a17      	ldr	r2, [pc, #92]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d004      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a15      	ldr	r2, [pc, #84]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d10c      	bne.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	4313      	orrs	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	40010000 	.word	0x40010000
 80076ac:	40000400 	.word	0x40000400
 80076b0:	40000800 	.word	0x40000800
 80076b4:	40000c00 	.word	0x40000c00
 80076b8:	40010400 	.word	0x40010400
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40001800 	.word	0x40001800

080076c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e03f      	b.n	800777e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fb fcd0 	bl	80030b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2224      	movs	r2, #36	; 0x24
 800771c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800772e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f90b 	bl	800794c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695a      	ldr	r2, [r3, #20]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af02      	add	r7, sp, #8
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	603b      	str	r3, [r7, #0]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	f040 8083 	bne.w	80078ae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <HAL_UART_Transmit+0x2e>
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e07b      	b.n	80078b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_UART_Transmit+0x40>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e074      	b.n	80078b0 <HAL_UART_Transmit+0x12a>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2221      	movs	r2, #33	; 0x21
 80077d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80077dc:	f7fc fa16 	bl	8003c0c <HAL_GetTick>
 80077e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	88fa      	ldrh	r2, [r7, #6]
 80077e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	88fa      	ldrh	r2, [r7, #6]
 80077ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80077f6:	e042      	b.n	800787e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	3b01      	subs	r3, #1
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780e:	d122      	bne.n	8007856 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	2200      	movs	r2, #0
 8007818:	2180      	movs	r1, #128	; 0x80
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f84c 	bl	80078b8 <UART_WaitOnFlagUntilTimeout>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e042      	b.n	80078b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800783c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d103      	bne.n	800784e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	3302      	adds	r3, #2
 800784a:	60bb      	str	r3, [r7, #8]
 800784c:	e017      	b.n	800787e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	3301      	adds	r3, #1
 8007852:	60bb      	str	r3, [r7, #8]
 8007854:	e013      	b.n	800787e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2200      	movs	r2, #0
 800785e:	2180      	movs	r1, #128	; 0x80
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f829 	bl	80078b8 <UART_WaitOnFlagUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e01f      	b.n	80078b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	60ba      	str	r2, [r7, #8]
 8007876:	781a      	ldrb	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1b7      	bne.n	80077f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2200      	movs	r2, #0
 8007890:	2140      	movs	r1, #64	; 0x40
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 f810 	bl	80078b8 <UART_WaitOnFlagUntilTimeout>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e006      	b.n	80078b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e000      	b.n	80078b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
  }
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	603b      	str	r3, [r7, #0]
 80078c4:	4613      	mov	r3, r2
 80078c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c8:	e02c      	b.n	8007924 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d028      	beq.n	8007924 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078d8:	f7fc f998 	bl	8003c0c <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d21d      	bcs.n	8007924 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695a      	ldr	r2, [r3, #20]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 0201 	bic.w	r2, r2, #1
 8007906:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2220      	movs	r2, #32
 8007914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e00f      	b.n	8007944 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	4013      	ands	r3, r2
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	429a      	cmp	r2, r3
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	429a      	cmp	r2, r3
 8007940:	d0c3      	beq.n	80078ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007950:	b0bd      	sub	sp, #244	; 0xf4
 8007952:	af00      	add	r7, sp, #0
 8007954:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007968:	68d9      	ldr	r1, [r3, #12]
 800796a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	ea40 0301 	orr.w	r3, r0, r1
 8007974:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	431a      	orrs	r2, r3
 8007984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	431a      	orrs	r2, r3
 800798c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	4313      	orrs	r3, r2
 8007994:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8007998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079a4:	f021 010c 	bic.w	r1, r1, #12
 80079a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80079b2:	430b      	orrs	r3, r1
 80079b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c6:	6999      	ldr	r1, [r3, #24]
 80079c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	ea40 0301 	orr.w	r3, r0, r1
 80079d2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079de:	f040 81a5 	bne.w	8007d2c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4bcd      	ldr	r3, [pc, #820]	; (8007d20 <UART_SetConfig+0x3d4>)
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d006      	beq.n	80079fc <UART_SetConfig+0xb0>
 80079ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	4bcb      	ldr	r3, [pc, #812]	; (8007d24 <UART_SetConfig+0x3d8>)
 80079f6:	429a      	cmp	r2, r3
 80079f8:	f040 80cb 	bne.w	8007b92 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079fc:	f7fe f9c4 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 8007a00:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a08:	461c      	mov	r4, r3
 8007a0a:	f04f 0500 	mov.w	r5, #0
 8007a0e:	4622      	mov	r2, r4
 8007a10:	462b      	mov	r3, r5
 8007a12:	1891      	adds	r1, r2, r2
 8007a14:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007a18:	415b      	adcs	r3, r3
 8007a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a1e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007a22:	1912      	adds	r2, r2, r4
 8007a24:	eb45 0303 	adc.w	r3, r5, r3
 8007a28:	f04f 0000 	mov.w	r0, #0
 8007a2c:	f04f 0100 	mov.w	r1, #0
 8007a30:	00d9      	lsls	r1, r3, #3
 8007a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a36:	00d0      	lsls	r0, r2, #3
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	1911      	adds	r1, r2, r4
 8007a3e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8007a42:	416b      	adcs	r3, r5
 8007a44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	1891      	adds	r1, r2, r2
 8007a56:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007a5a:	415b      	adcs	r3, r3
 8007a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a60:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007a64:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007a68:	f7f9 f90e 	bl	8000c88 <__aeabi_uldivmod>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4bad      	ldr	r3, [pc, #692]	; (8007d28 <UART_SetConfig+0x3dc>)
 8007a72:	fba3 2302 	umull	r2, r3, r3, r2
 8007a76:	095b      	lsrs	r3, r3, #5
 8007a78:	011e      	lsls	r6, r3, #4
 8007a7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a7e:	461c      	mov	r4, r3
 8007a80:	f04f 0500 	mov.w	r5, #0
 8007a84:	4622      	mov	r2, r4
 8007a86:	462b      	mov	r3, r5
 8007a88:	1891      	adds	r1, r2, r2
 8007a8a:	67b9      	str	r1, [r7, #120]	; 0x78
 8007a8c:	415b      	adcs	r3, r3
 8007a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a90:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007a94:	1912      	adds	r2, r2, r4
 8007a96:	eb45 0303 	adc.w	r3, r5, r3
 8007a9a:	f04f 0000 	mov.w	r0, #0
 8007a9e:	f04f 0100 	mov.w	r1, #0
 8007aa2:	00d9      	lsls	r1, r3, #3
 8007aa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007aa8:	00d0      	lsls	r0, r2, #3
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	1911      	adds	r1, r2, r4
 8007ab0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007ab4:	416b      	adcs	r3, r5
 8007ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f04f 0300 	mov.w	r3, #0
 8007ac6:	1891      	adds	r1, r2, r2
 8007ac8:	6739      	str	r1, [r7, #112]	; 0x70
 8007aca:	415b      	adcs	r3, r3
 8007acc:	677b      	str	r3, [r7, #116]	; 0x74
 8007ace:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007ad2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007ad6:	f7f9 f8d7 	bl	8000c88 <__aeabi_uldivmod>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4b92      	ldr	r3, [pc, #584]	; (8007d28 <UART_SetConfig+0x3dc>)
 8007ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae4:	095b      	lsrs	r3, r3, #5
 8007ae6:	2164      	movs	r1, #100	; 0x64
 8007ae8:	fb01 f303 	mul.w	r3, r1, r3
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	3332      	adds	r3, #50	; 0x32
 8007af2:	4a8d      	ldr	r2, [pc, #564]	; (8007d28 <UART_SetConfig+0x3dc>)
 8007af4:	fba2 2303 	umull	r2, r3, r2, r3
 8007af8:	095b      	lsrs	r3, r3, #5
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b00:	441e      	add	r6, r3
 8007b02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b06:	4618      	mov	r0, r3
 8007b08:	f04f 0100 	mov.w	r1, #0
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	1894      	adds	r4, r2, r2
 8007b12:	66bc      	str	r4, [r7, #104]	; 0x68
 8007b14:	415b      	adcs	r3, r3
 8007b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007b1c:	1812      	adds	r2, r2, r0
 8007b1e:	eb41 0303 	adc.w	r3, r1, r3
 8007b22:	f04f 0400 	mov.w	r4, #0
 8007b26:	f04f 0500 	mov.w	r5, #0
 8007b2a:	00dd      	lsls	r5, r3, #3
 8007b2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b30:	00d4      	lsls	r4, r2, #3
 8007b32:	4622      	mov	r2, r4
 8007b34:	462b      	mov	r3, r5
 8007b36:	1814      	adds	r4, r2, r0
 8007b38:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8007b3c:	414b      	adcs	r3, r1
 8007b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	f04f 0300 	mov.w	r3, #0
 8007b4e:	1891      	adds	r1, r2, r2
 8007b50:	6639      	str	r1, [r7, #96]	; 0x60
 8007b52:	415b      	adcs	r3, r3
 8007b54:	667b      	str	r3, [r7, #100]	; 0x64
 8007b56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b5e:	f7f9 f893 	bl	8000c88 <__aeabi_uldivmod>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4b70      	ldr	r3, [pc, #448]	; (8007d28 <UART_SetConfig+0x3dc>)
 8007b68:	fba3 1302 	umull	r1, r3, r3, r2
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	2164      	movs	r1, #100	; 0x64
 8007b70:	fb01 f303 	mul.w	r3, r1, r3
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	3332      	adds	r3, #50	; 0x32
 8007b7a:	4a6b      	ldr	r2, [pc, #428]	; (8007d28 <UART_SetConfig+0x3dc>)
 8007b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b80:	095b      	lsrs	r3, r3, #5
 8007b82:	f003 0207 	and.w	r2, r3, #7
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4432      	add	r2, r6
 8007b8e:	609a      	str	r2, [r3, #8]
 8007b90:	e26d      	b.n	800806e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b92:	f7fe f8e5 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007b96:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b9e:	461c      	mov	r4, r3
 8007ba0:	f04f 0500 	mov.w	r5, #0
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	462b      	mov	r3, r5
 8007ba8:	1891      	adds	r1, r2, r2
 8007baa:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bac:	415b      	adcs	r3, r3
 8007bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bb4:	1912      	adds	r2, r2, r4
 8007bb6:	eb45 0303 	adc.w	r3, r5, r3
 8007bba:	f04f 0000 	mov.w	r0, #0
 8007bbe:	f04f 0100 	mov.w	r1, #0
 8007bc2:	00d9      	lsls	r1, r3, #3
 8007bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bc8:	00d0      	lsls	r0, r2, #3
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	1911      	adds	r1, r2, r4
 8007bd0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007bd4:	416b      	adcs	r3, r5
 8007bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	461a      	mov	r2, r3
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	1891      	adds	r1, r2, r2
 8007be8:	6539      	str	r1, [r7, #80]	; 0x50
 8007bea:	415b      	adcs	r3, r3
 8007bec:	657b      	str	r3, [r7, #84]	; 0x54
 8007bee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007bf2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007bf6:	f7f9 f847 	bl	8000c88 <__aeabi_uldivmod>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4b4a      	ldr	r3, [pc, #296]	; (8007d28 <UART_SetConfig+0x3dc>)
 8007c00:	fba3 2302 	umull	r2, r3, r3, r2
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	011e      	lsls	r6, r3, #4
 8007c08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c0c:	461c      	mov	r4, r3
 8007c0e:	f04f 0500 	mov.w	r5, #0
 8007c12:	4622      	mov	r2, r4
 8007c14:	462b      	mov	r3, r5
 8007c16:	1891      	adds	r1, r2, r2
 8007c18:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c1a:	415b      	adcs	r3, r3
 8007c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c22:	1912      	adds	r2, r2, r4
 8007c24:	eb45 0303 	adc.w	r3, r5, r3
 8007c28:	f04f 0000 	mov.w	r0, #0
 8007c2c:	f04f 0100 	mov.w	r1, #0
 8007c30:	00d9      	lsls	r1, r3, #3
 8007c32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c36:	00d0      	lsls	r0, r2, #3
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	1911      	adds	r1, r2, r4
 8007c3e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8007c42:	416b      	adcs	r3, r5
 8007c44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f04f 0300 	mov.w	r3, #0
 8007c54:	1891      	adds	r1, r2, r2
 8007c56:	6439      	str	r1, [r7, #64]	; 0x40
 8007c58:	415b      	adcs	r3, r3
 8007c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c60:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007c64:	f7f9 f810 	bl	8000c88 <__aeabi_uldivmod>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4b2e      	ldr	r3, [pc, #184]	; (8007d28 <UART_SetConfig+0x3dc>)
 8007c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c72:	095b      	lsrs	r3, r3, #5
 8007c74:	2164      	movs	r1, #100	; 0x64
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	3332      	adds	r3, #50	; 0x32
 8007c80:	4a29      	ldr	r2, [pc, #164]	; (8007d28 <UART_SetConfig+0x3dc>)
 8007c82:	fba2 2303 	umull	r2, r3, r2, r3
 8007c86:	095b      	lsrs	r3, r3, #5
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c8e:	441e      	add	r6, r3
 8007c90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c94:	4618      	mov	r0, r3
 8007c96:	f04f 0100 	mov.w	r1, #0
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	1894      	adds	r4, r2, r2
 8007ca0:	63bc      	str	r4, [r7, #56]	; 0x38
 8007ca2:	415b      	adcs	r3, r3
 8007ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007caa:	1812      	adds	r2, r2, r0
 8007cac:	eb41 0303 	adc.w	r3, r1, r3
 8007cb0:	f04f 0400 	mov.w	r4, #0
 8007cb4:	f04f 0500 	mov.w	r5, #0
 8007cb8:	00dd      	lsls	r5, r3, #3
 8007cba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cbe:	00d4      	lsls	r4, r2, #3
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	462b      	mov	r3, r5
 8007cc4:	1814      	adds	r4, r2, r0
 8007cc6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8007cca:	414b      	adcs	r3, r1
 8007ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	1891      	adds	r1, r2, r2
 8007cde:	6339      	str	r1, [r7, #48]	; 0x30
 8007ce0:	415b      	adcs	r3, r3
 8007ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ce8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cec:	f7f8 ffcc 	bl	8000c88 <__aeabi_uldivmod>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <UART_SetConfig+0x3dc>)
 8007cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8007cfa:	095b      	lsrs	r3, r3, #5
 8007cfc:	2164      	movs	r1, #100	; 0x64
 8007cfe:	fb01 f303 	mul.w	r3, r1, r3
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	3332      	adds	r3, #50	; 0x32
 8007d08:	4a07      	ldr	r2, [pc, #28]	; (8007d28 <UART_SetConfig+0x3dc>)
 8007d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0e:	095b      	lsrs	r3, r3, #5
 8007d10:	f003 0207 	and.w	r2, r3, #7
 8007d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4432      	add	r2, r6
 8007d1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007d1e:	e1a6      	b.n	800806e <UART_SetConfig+0x722>
 8007d20:	40011000 	.word	0x40011000
 8007d24:	40011400 	.word	0x40011400
 8007d28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4bd1      	ldr	r3, [pc, #836]	; (8008078 <UART_SetConfig+0x72c>)
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d006      	beq.n	8007d46 <UART_SetConfig+0x3fa>
 8007d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4bcf      	ldr	r3, [pc, #828]	; (800807c <UART_SetConfig+0x730>)
 8007d40:	429a      	cmp	r2, r3
 8007d42:	f040 80ca 	bne.w	8007eda <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d46:	f7fe f81f 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 8007d4a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d52:	461c      	mov	r4, r3
 8007d54:	f04f 0500 	mov.w	r5, #0
 8007d58:	4622      	mov	r2, r4
 8007d5a:	462b      	mov	r3, r5
 8007d5c:	1891      	adds	r1, r2, r2
 8007d5e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007d60:	415b      	adcs	r3, r3
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d68:	1912      	adds	r2, r2, r4
 8007d6a:	eb45 0303 	adc.w	r3, r5, r3
 8007d6e:	f04f 0000 	mov.w	r0, #0
 8007d72:	f04f 0100 	mov.w	r1, #0
 8007d76:	00d9      	lsls	r1, r3, #3
 8007d78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d7c:	00d0      	lsls	r0, r2, #3
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	eb12 0a04 	adds.w	sl, r2, r4
 8007d86:	eb43 0b05 	adc.w	fp, r3, r5
 8007d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f04f 0100 	mov.w	r1, #0
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	008b      	lsls	r3, r1, #2
 8007da0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007da4:	0082      	lsls	r2, r0, #2
 8007da6:	4650      	mov	r0, sl
 8007da8:	4659      	mov	r1, fp
 8007daa:	f7f8 ff6d 	bl	8000c88 <__aeabi_uldivmod>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4bb3      	ldr	r3, [pc, #716]	; (8008080 <UART_SetConfig+0x734>)
 8007db4:	fba3 2302 	umull	r2, r3, r3, r2
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	011e      	lsls	r6, r3, #4
 8007dbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f04f 0100 	mov.w	r1, #0
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	1894      	adds	r4, r2, r2
 8007dcc:	623c      	str	r4, [r7, #32]
 8007dce:	415b      	adcs	r3, r3
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dd6:	1812      	adds	r2, r2, r0
 8007dd8:	eb41 0303 	adc.w	r3, r1, r3
 8007ddc:	f04f 0400 	mov.w	r4, #0
 8007de0:	f04f 0500 	mov.w	r5, #0
 8007de4:	00dd      	lsls	r5, r3, #3
 8007de6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007dea:	00d4      	lsls	r4, r2, #3
 8007dec:	4622      	mov	r2, r4
 8007dee:	462b      	mov	r3, r5
 8007df0:	1814      	adds	r4, r2, r0
 8007df2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8007df6:	414b      	adcs	r3, r1
 8007df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f04f 0100 	mov.w	r1, #0
 8007e08:	f04f 0200 	mov.w	r2, #0
 8007e0c:	f04f 0300 	mov.w	r3, #0
 8007e10:	008b      	lsls	r3, r1, #2
 8007e12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e16:	0082      	lsls	r2, r0, #2
 8007e18:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007e1c:	f7f8 ff34 	bl	8000c88 <__aeabi_uldivmod>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4b96      	ldr	r3, [pc, #600]	; (8008080 <UART_SetConfig+0x734>)
 8007e26:	fba3 1302 	umull	r1, r3, r3, r2
 8007e2a:	095b      	lsrs	r3, r3, #5
 8007e2c:	2164      	movs	r1, #100	; 0x64
 8007e2e:	fb01 f303 	mul.w	r3, r1, r3
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	011b      	lsls	r3, r3, #4
 8007e36:	3332      	adds	r3, #50	; 0x32
 8007e38:	4a91      	ldr	r2, [pc, #580]	; (8008080 <UART_SetConfig+0x734>)
 8007e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3e:	095b      	lsrs	r3, r3, #5
 8007e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e44:	441e      	add	r6, r3
 8007e46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f04f 0100 	mov.w	r1, #0
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	1894      	adds	r4, r2, r2
 8007e56:	61bc      	str	r4, [r7, #24]
 8007e58:	415b      	adcs	r3, r3
 8007e5a:	61fb      	str	r3, [r7, #28]
 8007e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e60:	1812      	adds	r2, r2, r0
 8007e62:	eb41 0303 	adc.w	r3, r1, r3
 8007e66:	f04f 0400 	mov.w	r4, #0
 8007e6a:	f04f 0500 	mov.w	r5, #0
 8007e6e:	00dd      	lsls	r5, r3, #3
 8007e70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e74:	00d4      	lsls	r4, r2, #3
 8007e76:	4622      	mov	r2, r4
 8007e78:	462b      	mov	r3, r5
 8007e7a:	1814      	adds	r4, r2, r0
 8007e7c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8007e80:	414b      	adcs	r3, r1
 8007e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f04f 0100 	mov.w	r1, #0
 8007e92:	f04f 0200 	mov.w	r2, #0
 8007e96:	f04f 0300 	mov.w	r3, #0
 8007e9a:	008b      	lsls	r3, r1, #2
 8007e9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ea0:	0082      	lsls	r2, r0, #2
 8007ea2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007ea6:	f7f8 feef 	bl	8000c88 <__aeabi_uldivmod>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4b74      	ldr	r3, [pc, #464]	; (8008080 <UART_SetConfig+0x734>)
 8007eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	2164      	movs	r1, #100	; 0x64
 8007eb8:	fb01 f303 	mul.w	r3, r1, r3
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	3332      	adds	r3, #50	; 0x32
 8007ec2:	4a6f      	ldr	r2, [pc, #444]	; (8008080 <UART_SetConfig+0x734>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	095b      	lsrs	r3, r3, #5
 8007eca:	f003 020f 	and.w	r2, r3, #15
 8007ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4432      	add	r2, r6
 8007ed6:	609a      	str	r2, [r3, #8]
 8007ed8:	e0c9      	b.n	800806e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eda:	f7fd ff41 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007ede:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ee2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ee6:	461c      	mov	r4, r3
 8007ee8:	f04f 0500 	mov.w	r5, #0
 8007eec:	4622      	mov	r2, r4
 8007eee:	462b      	mov	r3, r5
 8007ef0:	1891      	adds	r1, r2, r2
 8007ef2:	6139      	str	r1, [r7, #16]
 8007ef4:	415b      	adcs	r3, r3
 8007ef6:	617b      	str	r3, [r7, #20]
 8007ef8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007efc:	1912      	adds	r2, r2, r4
 8007efe:	eb45 0303 	adc.w	r3, r5, r3
 8007f02:	f04f 0000 	mov.w	r0, #0
 8007f06:	f04f 0100 	mov.w	r1, #0
 8007f0a:	00d9      	lsls	r1, r3, #3
 8007f0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f10:	00d0      	lsls	r0, r2, #3
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	eb12 0804 	adds.w	r8, r2, r4
 8007f1a:	eb43 0905 	adc.w	r9, r3, r5
 8007f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f04f 0100 	mov.w	r1, #0
 8007f2a:	f04f 0200 	mov.w	r2, #0
 8007f2e:	f04f 0300 	mov.w	r3, #0
 8007f32:	008b      	lsls	r3, r1, #2
 8007f34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f38:	0082      	lsls	r2, r0, #2
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	f7f8 fea3 	bl	8000c88 <__aeabi_uldivmod>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4b4e      	ldr	r3, [pc, #312]	; (8008080 <UART_SetConfig+0x734>)
 8007f48:	fba3 2302 	umull	r2, r3, r3, r2
 8007f4c:	095b      	lsrs	r3, r3, #5
 8007f4e:	011e      	lsls	r6, r3, #4
 8007f50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f54:	4618      	mov	r0, r3
 8007f56:	f04f 0100 	mov.w	r1, #0
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	1894      	adds	r4, r2, r2
 8007f60:	60bc      	str	r4, [r7, #8]
 8007f62:	415b      	adcs	r3, r3
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f6a:	1812      	adds	r2, r2, r0
 8007f6c:	eb41 0303 	adc.w	r3, r1, r3
 8007f70:	f04f 0400 	mov.w	r4, #0
 8007f74:	f04f 0500 	mov.w	r5, #0
 8007f78:	00dd      	lsls	r5, r3, #3
 8007f7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f7e:	00d4      	lsls	r4, r2, #3
 8007f80:	4622      	mov	r2, r4
 8007f82:	462b      	mov	r3, r5
 8007f84:	1814      	adds	r4, r2, r0
 8007f86:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8007f8a:	414b      	adcs	r3, r1
 8007f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f04f 0100 	mov.w	r1, #0
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	008b      	lsls	r3, r1, #2
 8007fa6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007faa:	0082      	lsls	r2, r0, #2
 8007fac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007fb0:	f7f8 fe6a 	bl	8000c88 <__aeabi_uldivmod>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4b31      	ldr	r3, [pc, #196]	; (8008080 <UART_SetConfig+0x734>)
 8007fba:	fba3 1302 	umull	r1, r3, r3, r2
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	2164      	movs	r1, #100	; 0x64
 8007fc2:	fb01 f303 	mul.w	r3, r1, r3
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	3332      	adds	r3, #50	; 0x32
 8007fcc:	4a2c      	ldr	r2, [pc, #176]	; (8008080 <UART_SetConfig+0x734>)
 8007fce:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fd8:	441e      	add	r6, r3
 8007fda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f04f 0100 	mov.w	r1, #0
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	1894      	adds	r4, r2, r2
 8007fea:	603c      	str	r4, [r7, #0]
 8007fec:	415b      	adcs	r3, r3
 8007fee:	607b      	str	r3, [r7, #4]
 8007ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ff4:	1812      	adds	r2, r2, r0
 8007ff6:	eb41 0303 	adc.w	r3, r1, r3
 8007ffa:	f04f 0400 	mov.w	r4, #0
 8007ffe:	f04f 0500 	mov.w	r5, #0
 8008002:	00dd      	lsls	r5, r3, #3
 8008004:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008008:	00d4      	lsls	r4, r2, #3
 800800a:	4622      	mov	r2, r4
 800800c:	462b      	mov	r3, r5
 800800e:	1814      	adds	r4, r2, r0
 8008010:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008014:	414b      	adcs	r3, r1
 8008016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800801a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	4618      	mov	r0, r3
 8008022:	f04f 0100 	mov.w	r1, #0
 8008026:	f04f 0200 	mov.w	r2, #0
 800802a:	f04f 0300 	mov.w	r3, #0
 800802e:	008b      	lsls	r3, r1, #2
 8008030:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008034:	0082      	lsls	r2, r0, #2
 8008036:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800803a:	f7f8 fe25 	bl	8000c88 <__aeabi_uldivmod>
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <UART_SetConfig+0x734>)
 8008044:	fba3 1302 	umull	r1, r3, r3, r2
 8008048:	095b      	lsrs	r3, r3, #5
 800804a:	2164      	movs	r1, #100	; 0x64
 800804c:	fb01 f303 	mul.w	r3, r1, r3
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	011b      	lsls	r3, r3, #4
 8008054:	3332      	adds	r3, #50	; 0x32
 8008056:	4a0a      	ldr	r2, [pc, #40]	; (8008080 <UART_SetConfig+0x734>)
 8008058:	fba2 2303 	umull	r2, r3, r2, r3
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	f003 020f 	and.w	r2, r3, #15
 8008062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4432      	add	r2, r6
 800806a:	609a      	str	r2, [r3, #8]
}
 800806c:	e7ff      	b.n	800806e <UART_SetConfig+0x722>
 800806e:	bf00      	nop
 8008070:	37f4      	adds	r7, #244	; 0xf4
 8008072:	46bd      	mov	sp, r7
 8008074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008078:	40011000 	.word	0x40011000
 800807c:	40011400 	.word	0x40011400
 8008080:	51eb851f 	.word	0x51eb851f

08008084 <__errno>:
 8008084:	4b01      	ldr	r3, [pc, #4]	; (800808c <__errno+0x8>)
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	2000000c 	.word	0x2000000c

08008090 <__libc_init_array>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	4d0d      	ldr	r5, [pc, #52]	; (80080c8 <__libc_init_array+0x38>)
 8008094:	4c0d      	ldr	r4, [pc, #52]	; (80080cc <__libc_init_array+0x3c>)
 8008096:	1b64      	subs	r4, r4, r5
 8008098:	10a4      	asrs	r4, r4, #2
 800809a:	2600      	movs	r6, #0
 800809c:	42a6      	cmp	r6, r4
 800809e:	d109      	bne.n	80080b4 <__libc_init_array+0x24>
 80080a0:	4d0b      	ldr	r5, [pc, #44]	; (80080d0 <__libc_init_array+0x40>)
 80080a2:	4c0c      	ldr	r4, [pc, #48]	; (80080d4 <__libc_init_array+0x44>)
 80080a4:	f004 fcd2 	bl	800ca4c <_init>
 80080a8:	1b64      	subs	r4, r4, r5
 80080aa:	10a4      	asrs	r4, r4, #2
 80080ac:	2600      	movs	r6, #0
 80080ae:	42a6      	cmp	r6, r4
 80080b0:	d105      	bne.n	80080be <__libc_init_array+0x2e>
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b8:	4798      	blx	r3
 80080ba:	3601      	adds	r6, #1
 80080bc:	e7ee      	b.n	800809c <__libc_init_array+0xc>
 80080be:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c2:	4798      	blx	r3
 80080c4:	3601      	adds	r6, #1
 80080c6:	e7f2      	b.n	80080ae <__libc_init_array+0x1e>
 80080c8:	0800cfc4 	.word	0x0800cfc4
 80080cc:	0800cfc4 	.word	0x0800cfc4
 80080d0:	0800cfc4 	.word	0x0800cfc4
 80080d4:	0800cfc8 	.word	0x0800cfc8

080080d8 <memcpy>:
 80080d8:	440a      	add	r2, r1
 80080da:	4291      	cmp	r1, r2
 80080dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80080e0:	d100      	bne.n	80080e4 <memcpy+0xc>
 80080e2:	4770      	bx	lr
 80080e4:	b510      	push	{r4, lr}
 80080e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080ee:	4291      	cmp	r1, r2
 80080f0:	d1f9      	bne.n	80080e6 <memcpy+0xe>
 80080f2:	bd10      	pop	{r4, pc}

080080f4 <memset>:
 80080f4:	4402      	add	r2, r0
 80080f6:	4603      	mov	r3, r0
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d100      	bne.n	80080fe <memset+0xa>
 80080fc:	4770      	bx	lr
 80080fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008102:	e7f9      	b.n	80080f8 <memset+0x4>

08008104 <__cvt>:
 8008104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008108:	ec55 4b10 	vmov	r4, r5, d0
 800810c:	2d00      	cmp	r5, #0
 800810e:	460e      	mov	r6, r1
 8008110:	4619      	mov	r1, r3
 8008112:	462b      	mov	r3, r5
 8008114:	bfbb      	ittet	lt
 8008116:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800811a:	461d      	movlt	r5, r3
 800811c:	2300      	movge	r3, #0
 800811e:	232d      	movlt	r3, #45	; 0x2d
 8008120:	700b      	strb	r3, [r1, #0]
 8008122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008124:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008128:	4691      	mov	r9, r2
 800812a:	f023 0820 	bic.w	r8, r3, #32
 800812e:	bfbc      	itt	lt
 8008130:	4622      	movlt	r2, r4
 8008132:	4614      	movlt	r4, r2
 8008134:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008138:	d005      	beq.n	8008146 <__cvt+0x42>
 800813a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800813e:	d100      	bne.n	8008142 <__cvt+0x3e>
 8008140:	3601      	adds	r6, #1
 8008142:	2102      	movs	r1, #2
 8008144:	e000      	b.n	8008148 <__cvt+0x44>
 8008146:	2103      	movs	r1, #3
 8008148:	ab03      	add	r3, sp, #12
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	ab02      	add	r3, sp, #8
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	ec45 4b10 	vmov	d0, r4, r5
 8008154:	4653      	mov	r3, sl
 8008156:	4632      	mov	r2, r6
 8008158:	f001 ff02 	bl	8009f60 <_dtoa_r>
 800815c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008160:	4607      	mov	r7, r0
 8008162:	d102      	bne.n	800816a <__cvt+0x66>
 8008164:	f019 0f01 	tst.w	r9, #1
 8008168:	d022      	beq.n	80081b0 <__cvt+0xac>
 800816a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800816e:	eb07 0906 	add.w	r9, r7, r6
 8008172:	d110      	bne.n	8008196 <__cvt+0x92>
 8008174:	783b      	ldrb	r3, [r7, #0]
 8008176:	2b30      	cmp	r3, #48	; 0x30
 8008178:	d10a      	bne.n	8008190 <__cvt+0x8c>
 800817a:	2200      	movs	r2, #0
 800817c:	2300      	movs	r3, #0
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008186:	b918      	cbnz	r0, 8008190 <__cvt+0x8c>
 8008188:	f1c6 0601 	rsb	r6, r6, #1
 800818c:	f8ca 6000 	str.w	r6, [sl]
 8008190:	f8da 3000 	ldr.w	r3, [sl]
 8008194:	4499      	add	r9, r3
 8008196:	2200      	movs	r2, #0
 8008198:	2300      	movs	r3, #0
 800819a:	4620      	mov	r0, r4
 800819c:	4629      	mov	r1, r5
 800819e:	f7f8 fc93 	bl	8000ac8 <__aeabi_dcmpeq>
 80081a2:	b108      	cbz	r0, 80081a8 <__cvt+0xa4>
 80081a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80081a8:	2230      	movs	r2, #48	; 0x30
 80081aa:	9b03      	ldr	r3, [sp, #12]
 80081ac:	454b      	cmp	r3, r9
 80081ae:	d307      	bcc.n	80081c0 <__cvt+0xbc>
 80081b0:	9b03      	ldr	r3, [sp, #12]
 80081b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081b4:	1bdb      	subs	r3, r3, r7
 80081b6:	4638      	mov	r0, r7
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	b004      	add	sp, #16
 80081bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c0:	1c59      	adds	r1, r3, #1
 80081c2:	9103      	str	r1, [sp, #12]
 80081c4:	701a      	strb	r2, [r3, #0]
 80081c6:	e7f0      	b.n	80081aa <__cvt+0xa6>

080081c8 <__exponent>:
 80081c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ca:	4603      	mov	r3, r0
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bfb8      	it	lt
 80081d0:	4249      	neglt	r1, r1
 80081d2:	f803 2b02 	strb.w	r2, [r3], #2
 80081d6:	bfb4      	ite	lt
 80081d8:	222d      	movlt	r2, #45	; 0x2d
 80081da:	222b      	movge	r2, #43	; 0x2b
 80081dc:	2909      	cmp	r1, #9
 80081de:	7042      	strb	r2, [r0, #1]
 80081e0:	dd2a      	ble.n	8008238 <__exponent+0x70>
 80081e2:	f10d 0407 	add.w	r4, sp, #7
 80081e6:	46a4      	mov	ip, r4
 80081e8:	270a      	movs	r7, #10
 80081ea:	46a6      	mov	lr, r4
 80081ec:	460a      	mov	r2, r1
 80081ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80081f2:	fb07 1516 	mls	r5, r7, r6, r1
 80081f6:	3530      	adds	r5, #48	; 0x30
 80081f8:	2a63      	cmp	r2, #99	; 0x63
 80081fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80081fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008202:	4631      	mov	r1, r6
 8008204:	dcf1      	bgt.n	80081ea <__exponent+0x22>
 8008206:	3130      	adds	r1, #48	; 0x30
 8008208:	f1ae 0502 	sub.w	r5, lr, #2
 800820c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008210:	1c44      	adds	r4, r0, #1
 8008212:	4629      	mov	r1, r5
 8008214:	4561      	cmp	r1, ip
 8008216:	d30a      	bcc.n	800822e <__exponent+0x66>
 8008218:	f10d 0209 	add.w	r2, sp, #9
 800821c:	eba2 020e 	sub.w	r2, r2, lr
 8008220:	4565      	cmp	r5, ip
 8008222:	bf88      	it	hi
 8008224:	2200      	movhi	r2, #0
 8008226:	4413      	add	r3, r2
 8008228:	1a18      	subs	r0, r3, r0
 800822a:	b003      	add	sp, #12
 800822c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800822e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008232:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008236:	e7ed      	b.n	8008214 <__exponent+0x4c>
 8008238:	2330      	movs	r3, #48	; 0x30
 800823a:	3130      	adds	r1, #48	; 0x30
 800823c:	7083      	strb	r3, [r0, #2]
 800823e:	70c1      	strb	r1, [r0, #3]
 8008240:	1d03      	adds	r3, r0, #4
 8008242:	e7f1      	b.n	8008228 <__exponent+0x60>

08008244 <_printf_float>:
 8008244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008248:	ed2d 8b02 	vpush	{d8}
 800824c:	b08d      	sub	sp, #52	; 0x34
 800824e:	460c      	mov	r4, r1
 8008250:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008254:	4616      	mov	r6, r2
 8008256:	461f      	mov	r7, r3
 8008258:	4605      	mov	r5, r0
 800825a:	f003 f993 	bl	800b584 <_localeconv_r>
 800825e:	f8d0 a000 	ldr.w	sl, [r0]
 8008262:	4650      	mov	r0, sl
 8008264:	f7f7 ffb4 	bl	80001d0 <strlen>
 8008268:	2300      	movs	r3, #0
 800826a:	930a      	str	r3, [sp, #40]	; 0x28
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	9305      	str	r3, [sp, #20]
 8008270:	f8d8 3000 	ldr.w	r3, [r8]
 8008274:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008278:	3307      	adds	r3, #7
 800827a:	f023 0307 	bic.w	r3, r3, #7
 800827e:	f103 0208 	add.w	r2, r3, #8
 8008282:	f8c8 2000 	str.w	r2, [r8]
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800828e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008292:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008296:	9307      	str	r3, [sp, #28]
 8008298:	f8cd 8018 	str.w	r8, [sp, #24]
 800829c:	ee08 0a10 	vmov	s16, r0
 80082a0:	4b9f      	ldr	r3, [pc, #636]	; (8008520 <_printf_float+0x2dc>)
 80082a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082a6:	f04f 32ff 	mov.w	r2, #4294967295
 80082aa:	f7f8 fc3f 	bl	8000b2c <__aeabi_dcmpun>
 80082ae:	bb88      	cbnz	r0, 8008314 <_printf_float+0xd0>
 80082b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082b4:	4b9a      	ldr	r3, [pc, #616]	; (8008520 <_printf_float+0x2dc>)
 80082b6:	f04f 32ff 	mov.w	r2, #4294967295
 80082ba:	f7f8 fc19 	bl	8000af0 <__aeabi_dcmple>
 80082be:	bb48      	cbnz	r0, 8008314 <_printf_float+0xd0>
 80082c0:	2200      	movs	r2, #0
 80082c2:	2300      	movs	r3, #0
 80082c4:	4640      	mov	r0, r8
 80082c6:	4649      	mov	r1, r9
 80082c8:	f7f8 fc08 	bl	8000adc <__aeabi_dcmplt>
 80082cc:	b110      	cbz	r0, 80082d4 <_printf_float+0x90>
 80082ce:	232d      	movs	r3, #45	; 0x2d
 80082d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082d4:	4b93      	ldr	r3, [pc, #588]	; (8008524 <_printf_float+0x2e0>)
 80082d6:	4894      	ldr	r0, [pc, #592]	; (8008528 <_printf_float+0x2e4>)
 80082d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80082dc:	bf94      	ite	ls
 80082de:	4698      	movls	r8, r3
 80082e0:	4680      	movhi	r8, r0
 80082e2:	2303      	movs	r3, #3
 80082e4:	6123      	str	r3, [r4, #16]
 80082e6:	9b05      	ldr	r3, [sp, #20]
 80082e8:	f023 0204 	bic.w	r2, r3, #4
 80082ec:	6022      	str	r2, [r4, #0]
 80082ee:	f04f 0900 	mov.w	r9, #0
 80082f2:	9700      	str	r7, [sp, #0]
 80082f4:	4633      	mov	r3, r6
 80082f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80082f8:	4621      	mov	r1, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f000 f9d8 	bl	80086b0 <_printf_common>
 8008300:	3001      	adds	r0, #1
 8008302:	f040 8090 	bne.w	8008426 <_printf_float+0x1e2>
 8008306:	f04f 30ff 	mov.w	r0, #4294967295
 800830a:	b00d      	add	sp, #52	; 0x34
 800830c:	ecbd 8b02 	vpop	{d8}
 8008310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	4642      	mov	r2, r8
 8008316:	464b      	mov	r3, r9
 8008318:	4640      	mov	r0, r8
 800831a:	4649      	mov	r1, r9
 800831c:	f7f8 fc06 	bl	8000b2c <__aeabi_dcmpun>
 8008320:	b140      	cbz	r0, 8008334 <_printf_float+0xf0>
 8008322:	464b      	mov	r3, r9
 8008324:	2b00      	cmp	r3, #0
 8008326:	bfbc      	itt	lt
 8008328:	232d      	movlt	r3, #45	; 0x2d
 800832a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800832e:	487f      	ldr	r0, [pc, #508]	; (800852c <_printf_float+0x2e8>)
 8008330:	4b7f      	ldr	r3, [pc, #508]	; (8008530 <_printf_float+0x2ec>)
 8008332:	e7d1      	b.n	80082d8 <_printf_float+0x94>
 8008334:	6863      	ldr	r3, [r4, #4]
 8008336:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800833a:	9206      	str	r2, [sp, #24]
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	d13f      	bne.n	80083c0 <_printf_float+0x17c>
 8008340:	2306      	movs	r3, #6
 8008342:	6063      	str	r3, [r4, #4]
 8008344:	9b05      	ldr	r3, [sp, #20]
 8008346:	6861      	ldr	r1, [r4, #4]
 8008348:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800834c:	2300      	movs	r3, #0
 800834e:	9303      	str	r3, [sp, #12]
 8008350:	ab0a      	add	r3, sp, #40	; 0x28
 8008352:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008356:	ab09      	add	r3, sp, #36	; 0x24
 8008358:	ec49 8b10 	vmov	d0, r8, r9
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	6022      	str	r2, [r4, #0]
 8008360:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008364:	4628      	mov	r0, r5
 8008366:	f7ff fecd 	bl	8008104 <__cvt>
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800836e:	2b47      	cmp	r3, #71	; 0x47
 8008370:	4680      	mov	r8, r0
 8008372:	d108      	bne.n	8008386 <_printf_float+0x142>
 8008374:	1cc8      	adds	r0, r1, #3
 8008376:	db02      	blt.n	800837e <_printf_float+0x13a>
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	4299      	cmp	r1, r3
 800837c:	dd41      	ble.n	8008402 <_printf_float+0x1be>
 800837e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008382:	fa5f fb8b 	uxtb.w	fp, fp
 8008386:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800838a:	d820      	bhi.n	80083ce <_printf_float+0x18a>
 800838c:	3901      	subs	r1, #1
 800838e:	465a      	mov	r2, fp
 8008390:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008394:	9109      	str	r1, [sp, #36]	; 0x24
 8008396:	f7ff ff17 	bl	80081c8 <__exponent>
 800839a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800839c:	1813      	adds	r3, r2, r0
 800839e:	2a01      	cmp	r2, #1
 80083a0:	4681      	mov	r9, r0
 80083a2:	6123      	str	r3, [r4, #16]
 80083a4:	dc02      	bgt.n	80083ac <_printf_float+0x168>
 80083a6:	6822      	ldr	r2, [r4, #0]
 80083a8:	07d2      	lsls	r2, r2, #31
 80083aa:	d501      	bpl.n	80083b0 <_printf_float+0x16c>
 80083ac:	3301      	adds	r3, #1
 80083ae:	6123      	str	r3, [r4, #16]
 80083b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d09c      	beq.n	80082f2 <_printf_float+0xae>
 80083b8:	232d      	movs	r3, #45	; 0x2d
 80083ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083be:	e798      	b.n	80082f2 <_printf_float+0xae>
 80083c0:	9a06      	ldr	r2, [sp, #24]
 80083c2:	2a47      	cmp	r2, #71	; 0x47
 80083c4:	d1be      	bne.n	8008344 <_printf_float+0x100>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1bc      	bne.n	8008344 <_printf_float+0x100>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e7b9      	b.n	8008342 <_printf_float+0xfe>
 80083ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80083d2:	d118      	bne.n	8008406 <_printf_float+0x1c2>
 80083d4:	2900      	cmp	r1, #0
 80083d6:	6863      	ldr	r3, [r4, #4]
 80083d8:	dd0b      	ble.n	80083f2 <_printf_float+0x1ae>
 80083da:	6121      	str	r1, [r4, #16]
 80083dc:	b913      	cbnz	r3, 80083e4 <_printf_float+0x1a0>
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	07d0      	lsls	r0, r2, #31
 80083e2:	d502      	bpl.n	80083ea <_printf_float+0x1a6>
 80083e4:	3301      	adds	r3, #1
 80083e6:	440b      	add	r3, r1
 80083e8:	6123      	str	r3, [r4, #16]
 80083ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80083ec:	f04f 0900 	mov.w	r9, #0
 80083f0:	e7de      	b.n	80083b0 <_printf_float+0x16c>
 80083f2:	b913      	cbnz	r3, 80083fa <_printf_float+0x1b6>
 80083f4:	6822      	ldr	r2, [r4, #0]
 80083f6:	07d2      	lsls	r2, r2, #31
 80083f8:	d501      	bpl.n	80083fe <_printf_float+0x1ba>
 80083fa:	3302      	adds	r3, #2
 80083fc:	e7f4      	b.n	80083e8 <_printf_float+0x1a4>
 80083fe:	2301      	movs	r3, #1
 8008400:	e7f2      	b.n	80083e8 <_printf_float+0x1a4>
 8008402:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008408:	4299      	cmp	r1, r3
 800840a:	db05      	blt.n	8008418 <_printf_float+0x1d4>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	6121      	str	r1, [r4, #16]
 8008410:	07d8      	lsls	r0, r3, #31
 8008412:	d5ea      	bpl.n	80083ea <_printf_float+0x1a6>
 8008414:	1c4b      	adds	r3, r1, #1
 8008416:	e7e7      	b.n	80083e8 <_printf_float+0x1a4>
 8008418:	2900      	cmp	r1, #0
 800841a:	bfd4      	ite	le
 800841c:	f1c1 0202 	rsble	r2, r1, #2
 8008420:	2201      	movgt	r2, #1
 8008422:	4413      	add	r3, r2
 8008424:	e7e0      	b.n	80083e8 <_printf_float+0x1a4>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	055a      	lsls	r2, r3, #21
 800842a:	d407      	bmi.n	800843c <_printf_float+0x1f8>
 800842c:	6923      	ldr	r3, [r4, #16]
 800842e:	4642      	mov	r2, r8
 8008430:	4631      	mov	r1, r6
 8008432:	4628      	mov	r0, r5
 8008434:	47b8      	blx	r7
 8008436:	3001      	adds	r0, #1
 8008438:	d12c      	bne.n	8008494 <_printf_float+0x250>
 800843a:	e764      	b.n	8008306 <_printf_float+0xc2>
 800843c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008440:	f240 80e0 	bls.w	8008604 <_printf_float+0x3c0>
 8008444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008448:	2200      	movs	r2, #0
 800844a:	2300      	movs	r3, #0
 800844c:	f7f8 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008450:	2800      	cmp	r0, #0
 8008452:	d034      	beq.n	80084be <_printf_float+0x27a>
 8008454:	4a37      	ldr	r2, [pc, #220]	; (8008534 <_printf_float+0x2f0>)
 8008456:	2301      	movs	r3, #1
 8008458:	4631      	mov	r1, r6
 800845a:	4628      	mov	r0, r5
 800845c:	47b8      	blx	r7
 800845e:	3001      	adds	r0, #1
 8008460:	f43f af51 	beq.w	8008306 <_printf_float+0xc2>
 8008464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008468:	429a      	cmp	r2, r3
 800846a:	db02      	blt.n	8008472 <_printf_float+0x22e>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	07d8      	lsls	r0, r3, #31
 8008470:	d510      	bpl.n	8008494 <_printf_float+0x250>
 8008472:	ee18 3a10 	vmov	r3, s16
 8008476:	4652      	mov	r2, sl
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af41 	beq.w	8008306 <_printf_float+0xc2>
 8008484:	f04f 0800 	mov.w	r8, #0
 8008488:	f104 091a 	add.w	r9, r4, #26
 800848c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848e:	3b01      	subs	r3, #1
 8008490:	4543      	cmp	r3, r8
 8008492:	dc09      	bgt.n	80084a8 <_printf_float+0x264>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	079b      	lsls	r3, r3, #30
 8008498:	f100 8105 	bmi.w	80086a6 <_printf_float+0x462>
 800849c:	68e0      	ldr	r0, [r4, #12]
 800849e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a0:	4298      	cmp	r0, r3
 80084a2:	bfb8      	it	lt
 80084a4:	4618      	movlt	r0, r3
 80084a6:	e730      	b.n	800830a <_printf_float+0xc6>
 80084a8:	2301      	movs	r3, #1
 80084aa:	464a      	mov	r2, r9
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	47b8      	blx	r7
 80084b2:	3001      	adds	r0, #1
 80084b4:	f43f af27 	beq.w	8008306 <_printf_float+0xc2>
 80084b8:	f108 0801 	add.w	r8, r8, #1
 80084bc:	e7e6      	b.n	800848c <_printf_float+0x248>
 80084be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	dc39      	bgt.n	8008538 <_printf_float+0x2f4>
 80084c4:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <_printf_float+0x2f0>)
 80084c6:	2301      	movs	r3, #1
 80084c8:	4631      	mov	r1, r6
 80084ca:	4628      	mov	r0, r5
 80084cc:	47b8      	blx	r7
 80084ce:	3001      	adds	r0, #1
 80084d0:	f43f af19 	beq.w	8008306 <_printf_float+0xc2>
 80084d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d8:	4313      	orrs	r3, r2
 80084da:	d102      	bne.n	80084e2 <_printf_float+0x29e>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	07d9      	lsls	r1, r3, #31
 80084e0:	d5d8      	bpl.n	8008494 <_printf_float+0x250>
 80084e2:	ee18 3a10 	vmov	r3, s16
 80084e6:	4652      	mov	r2, sl
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	f43f af09 	beq.w	8008306 <_printf_float+0xc2>
 80084f4:	f04f 0900 	mov.w	r9, #0
 80084f8:	f104 0a1a 	add.w	sl, r4, #26
 80084fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fe:	425b      	negs	r3, r3
 8008500:	454b      	cmp	r3, r9
 8008502:	dc01      	bgt.n	8008508 <_printf_float+0x2c4>
 8008504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008506:	e792      	b.n	800842e <_printf_float+0x1ea>
 8008508:	2301      	movs	r3, #1
 800850a:	4652      	mov	r2, sl
 800850c:	4631      	mov	r1, r6
 800850e:	4628      	mov	r0, r5
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	f43f aef7 	beq.w	8008306 <_printf_float+0xc2>
 8008518:	f109 0901 	add.w	r9, r9, #1
 800851c:	e7ee      	b.n	80084fc <_printf_float+0x2b8>
 800851e:	bf00      	nop
 8008520:	7fefffff 	.word	0x7fefffff
 8008524:	0800cb08 	.word	0x0800cb08
 8008528:	0800cb0c 	.word	0x0800cb0c
 800852c:	0800cb14 	.word	0x0800cb14
 8008530:	0800cb10 	.word	0x0800cb10
 8008534:	0800cb18 	.word	0x0800cb18
 8008538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800853a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800853c:	429a      	cmp	r2, r3
 800853e:	bfa8      	it	ge
 8008540:	461a      	movge	r2, r3
 8008542:	2a00      	cmp	r2, #0
 8008544:	4691      	mov	r9, r2
 8008546:	dc37      	bgt.n	80085b8 <_printf_float+0x374>
 8008548:	f04f 0b00 	mov.w	fp, #0
 800854c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008550:	f104 021a 	add.w	r2, r4, #26
 8008554:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008556:	9305      	str	r3, [sp, #20]
 8008558:	eba3 0309 	sub.w	r3, r3, r9
 800855c:	455b      	cmp	r3, fp
 800855e:	dc33      	bgt.n	80085c8 <_printf_float+0x384>
 8008560:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008564:	429a      	cmp	r2, r3
 8008566:	db3b      	blt.n	80085e0 <_printf_float+0x39c>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	07da      	lsls	r2, r3, #31
 800856c:	d438      	bmi.n	80085e0 <_printf_float+0x39c>
 800856e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008570:	9b05      	ldr	r3, [sp, #20]
 8008572:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	eba2 0901 	sub.w	r9, r2, r1
 800857a:	4599      	cmp	r9, r3
 800857c:	bfa8      	it	ge
 800857e:	4699      	movge	r9, r3
 8008580:	f1b9 0f00 	cmp.w	r9, #0
 8008584:	dc35      	bgt.n	80085f2 <_printf_float+0x3ae>
 8008586:	f04f 0800 	mov.w	r8, #0
 800858a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800858e:	f104 0a1a 	add.w	sl, r4, #26
 8008592:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	eba3 0309 	sub.w	r3, r3, r9
 800859c:	4543      	cmp	r3, r8
 800859e:	f77f af79 	ble.w	8008494 <_printf_float+0x250>
 80085a2:	2301      	movs	r3, #1
 80085a4:	4652      	mov	r2, sl
 80085a6:	4631      	mov	r1, r6
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b8      	blx	r7
 80085ac:	3001      	adds	r0, #1
 80085ae:	f43f aeaa 	beq.w	8008306 <_printf_float+0xc2>
 80085b2:	f108 0801 	add.w	r8, r8, #1
 80085b6:	e7ec      	b.n	8008592 <_printf_float+0x34e>
 80085b8:	4613      	mov	r3, r2
 80085ba:	4631      	mov	r1, r6
 80085bc:	4642      	mov	r2, r8
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	d1c0      	bne.n	8008548 <_printf_float+0x304>
 80085c6:	e69e      	b.n	8008306 <_printf_float+0xc2>
 80085c8:	2301      	movs	r3, #1
 80085ca:	4631      	mov	r1, r6
 80085cc:	4628      	mov	r0, r5
 80085ce:	9205      	str	r2, [sp, #20]
 80085d0:	47b8      	blx	r7
 80085d2:	3001      	adds	r0, #1
 80085d4:	f43f ae97 	beq.w	8008306 <_printf_float+0xc2>
 80085d8:	9a05      	ldr	r2, [sp, #20]
 80085da:	f10b 0b01 	add.w	fp, fp, #1
 80085de:	e7b9      	b.n	8008554 <_printf_float+0x310>
 80085e0:	ee18 3a10 	vmov	r3, s16
 80085e4:	4652      	mov	r2, sl
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	d1be      	bne.n	800856e <_printf_float+0x32a>
 80085f0:	e689      	b.n	8008306 <_printf_float+0xc2>
 80085f2:	9a05      	ldr	r2, [sp, #20]
 80085f4:	464b      	mov	r3, r9
 80085f6:	4442      	add	r2, r8
 80085f8:	4631      	mov	r1, r6
 80085fa:	4628      	mov	r0, r5
 80085fc:	47b8      	blx	r7
 80085fe:	3001      	adds	r0, #1
 8008600:	d1c1      	bne.n	8008586 <_printf_float+0x342>
 8008602:	e680      	b.n	8008306 <_printf_float+0xc2>
 8008604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008606:	2a01      	cmp	r2, #1
 8008608:	dc01      	bgt.n	800860e <_printf_float+0x3ca>
 800860a:	07db      	lsls	r3, r3, #31
 800860c:	d538      	bpl.n	8008680 <_printf_float+0x43c>
 800860e:	2301      	movs	r3, #1
 8008610:	4642      	mov	r2, r8
 8008612:	4631      	mov	r1, r6
 8008614:	4628      	mov	r0, r5
 8008616:	47b8      	blx	r7
 8008618:	3001      	adds	r0, #1
 800861a:	f43f ae74 	beq.w	8008306 <_printf_float+0xc2>
 800861e:	ee18 3a10 	vmov	r3, s16
 8008622:	4652      	mov	r2, sl
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	f43f ae6b 	beq.w	8008306 <_printf_float+0xc2>
 8008630:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008634:	2200      	movs	r2, #0
 8008636:	2300      	movs	r3, #0
 8008638:	f7f8 fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 800863c:	b9d8      	cbnz	r0, 8008676 <_printf_float+0x432>
 800863e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008640:	f108 0201 	add.w	r2, r8, #1
 8008644:	3b01      	subs	r3, #1
 8008646:	4631      	mov	r1, r6
 8008648:	4628      	mov	r0, r5
 800864a:	47b8      	blx	r7
 800864c:	3001      	adds	r0, #1
 800864e:	d10e      	bne.n	800866e <_printf_float+0x42a>
 8008650:	e659      	b.n	8008306 <_printf_float+0xc2>
 8008652:	2301      	movs	r3, #1
 8008654:	4652      	mov	r2, sl
 8008656:	4631      	mov	r1, r6
 8008658:	4628      	mov	r0, r5
 800865a:	47b8      	blx	r7
 800865c:	3001      	adds	r0, #1
 800865e:	f43f ae52 	beq.w	8008306 <_printf_float+0xc2>
 8008662:	f108 0801 	add.w	r8, r8, #1
 8008666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008668:	3b01      	subs	r3, #1
 800866a:	4543      	cmp	r3, r8
 800866c:	dcf1      	bgt.n	8008652 <_printf_float+0x40e>
 800866e:	464b      	mov	r3, r9
 8008670:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008674:	e6dc      	b.n	8008430 <_printf_float+0x1ec>
 8008676:	f04f 0800 	mov.w	r8, #0
 800867a:	f104 0a1a 	add.w	sl, r4, #26
 800867e:	e7f2      	b.n	8008666 <_printf_float+0x422>
 8008680:	2301      	movs	r3, #1
 8008682:	4642      	mov	r2, r8
 8008684:	e7df      	b.n	8008646 <_printf_float+0x402>
 8008686:	2301      	movs	r3, #1
 8008688:	464a      	mov	r2, r9
 800868a:	4631      	mov	r1, r6
 800868c:	4628      	mov	r0, r5
 800868e:	47b8      	blx	r7
 8008690:	3001      	adds	r0, #1
 8008692:	f43f ae38 	beq.w	8008306 <_printf_float+0xc2>
 8008696:	f108 0801 	add.w	r8, r8, #1
 800869a:	68e3      	ldr	r3, [r4, #12]
 800869c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800869e:	1a5b      	subs	r3, r3, r1
 80086a0:	4543      	cmp	r3, r8
 80086a2:	dcf0      	bgt.n	8008686 <_printf_float+0x442>
 80086a4:	e6fa      	b.n	800849c <_printf_float+0x258>
 80086a6:	f04f 0800 	mov.w	r8, #0
 80086aa:	f104 0919 	add.w	r9, r4, #25
 80086ae:	e7f4      	b.n	800869a <_printf_float+0x456>

080086b0 <_printf_common>:
 80086b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b4:	4616      	mov	r6, r2
 80086b6:	4699      	mov	r9, r3
 80086b8:	688a      	ldr	r2, [r1, #8]
 80086ba:	690b      	ldr	r3, [r1, #16]
 80086bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086c0:	4293      	cmp	r3, r2
 80086c2:	bfb8      	it	lt
 80086c4:	4613      	movlt	r3, r2
 80086c6:	6033      	str	r3, [r6, #0]
 80086c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086cc:	4607      	mov	r7, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	b10a      	cbz	r2, 80086d6 <_printf_common+0x26>
 80086d2:	3301      	adds	r3, #1
 80086d4:	6033      	str	r3, [r6, #0]
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	0699      	lsls	r1, r3, #26
 80086da:	bf42      	ittt	mi
 80086dc:	6833      	ldrmi	r3, [r6, #0]
 80086de:	3302      	addmi	r3, #2
 80086e0:	6033      	strmi	r3, [r6, #0]
 80086e2:	6825      	ldr	r5, [r4, #0]
 80086e4:	f015 0506 	ands.w	r5, r5, #6
 80086e8:	d106      	bne.n	80086f8 <_printf_common+0x48>
 80086ea:	f104 0a19 	add.w	sl, r4, #25
 80086ee:	68e3      	ldr	r3, [r4, #12]
 80086f0:	6832      	ldr	r2, [r6, #0]
 80086f2:	1a9b      	subs	r3, r3, r2
 80086f4:	42ab      	cmp	r3, r5
 80086f6:	dc26      	bgt.n	8008746 <_printf_common+0x96>
 80086f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086fc:	1e13      	subs	r3, r2, #0
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	bf18      	it	ne
 8008702:	2301      	movne	r3, #1
 8008704:	0692      	lsls	r2, r2, #26
 8008706:	d42b      	bmi.n	8008760 <_printf_common+0xb0>
 8008708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800870c:	4649      	mov	r1, r9
 800870e:	4638      	mov	r0, r7
 8008710:	47c0      	blx	r8
 8008712:	3001      	adds	r0, #1
 8008714:	d01e      	beq.n	8008754 <_printf_common+0xa4>
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	68e5      	ldr	r5, [r4, #12]
 800871a:	6832      	ldr	r2, [r6, #0]
 800871c:	f003 0306 	and.w	r3, r3, #6
 8008720:	2b04      	cmp	r3, #4
 8008722:	bf08      	it	eq
 8008724:	1aad      	subeq	r5, r5, r2
 8008726:	68a3      	ldr	r3, [r4, #8]
 8008728:	6922      	ldr	r2, [r4, #16]
 800872a:	bf0c      	ite	eq
 800872c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008730:	2500      	movne	r5, #0
 8008732:	4293      	cmp	r3, r2
 8008734:	bfc4      	itt	gt
 8008736:	1a9b      	subgt	r3, r3, r2
 8008738:	18ed      	addgt	r5, r5, r3
 800873a:	2600      	movs	r6, #0
 800873c:	341a      	adds	r4, #26
 800873e:	42b5      	cmp	r5, r6
 8008740:	d11a      	bne.n	8008778 <_printf_common+0xc8>
 8008742:	2000      	movs	r0, #0
 8008744:	e008      	b.n	8008758 <_printf_common+0xa8>
 8008746:	2301      	movs	r3, #1
 8008748:	4652      	mov	r2, sl
 800874a:	4649      	mov	r1, r9
 800874c:	4638      	mov	r0, r7
 800874e:	47c0      	blx	r8
 8008750:	3001      	adds	r0, #1
 8008752:	d103      	bne.n	800875c <_printf_common+0xac>
 8008754:	f04f 30ff 	mov.w	r0, #4294967295
 8008758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875c:	3501      	adds	r5, #1
 800875e:	e7c6      	b.n	80086ee <_printf_common+0x3e>
 8008760:	18e1      	adds	r1, r4, r3
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	2030      	movs	r0, #48	; 0x30
 8008766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800876a:	4422      	add	r2, r4
 800876c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008774:	3302      	adds	r3, #2
 8008776:	e7c7      	b.n	8008708 <_printf_common+0x58>
 8008778:	2301      	movs	r3, #1
 800877a:	4622      	mov	r2, r4
 800877c:	4649      	mov	r1, r9
 800877e:	4638      	mov	r0, r7
 8008780:	47c0      	blx	r8
 8008782:	3001      	adds	r0, #1
 8008784:	d0e6      	beq.n	8008754 <_printf_common+0xa4>
 8008786:	3601      	adds	r6, #1
 8008788:	e7d9      	b.n	800873e <_printf_common+0x8e>
	...

0800878c <_printf_i>:
 800878c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008790:	460c      	mov	r4, r1
 8008792:	4691      	mov	r9, r2
 8008794:	7e27      	ldrb	r7, [r4, #24]
 8008796:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008798:	2f78      	cmp	r7, #120	; 0x78
 800879a:	4680      	mov	r8, r0
 800879c:	469a      	mov	sl, r3
 800879e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087a2:	d807      	bhi.n	80087b4 <_printf_i+0x28>
 80087a4:	2f62      	cmp	r7, #98	; 0x62
 80087a6:	d80a      	bhi.n	80087be <_printf_i+0x32>
 80087a8:	2f00      	cmp	r7, #0
 80087aa:	f000 80d8 	beq.w	800895e <_printf_i+0x1d2>
 80087ae:	2f58      	cmp	r7, #88	; 0x58
 80087b0:	f000 80a3 	beq.w	80088fa <_printf_i+0x16e>
 80087b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087bc:	e03a      	b.n	8008834 <_printf_i+0xa8>
 80087be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087c2:	2b15      	cmp	r3, #21
 80087c4:	d8f6      	bhi.n	80087b4 <_printf_i+0x28>
 80087c6:	a001      	add	r0, pc, #4	; (adr r0, 80087cc <_printf_i+0x40>)
 80087c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087cc:	08008825 	.word	0x08008825
 80087d0:	08008839 	.word	0x08008839
 80087d4:	080087b5 	.word	0x080087b5
 80087d8:	080087b5 	.word	0x080087b5
 80087dc:	080087b5 	.word	0x080087b5
 80087e0:	080087b5 	.word	0x080087b5
 80087e4:	08008839 	.word	0x08008839
 80087e8:	080087b5 	.word	0x080087b5
 80087ec:	080087b5 	.word	0x080087b5
 80087f0:	080087b5 	.word	0x080087b5
 80087f4:	080087b5 	.word	0x080087b5
 80087f8:	08008945 	.word	0x08008945
 80087fc:	08008869 	.word	0x08008869
 8008800:	08008927 	.word	0x08008927
 8008804:	080087b5 	.word	0x080087b5
 8008808:	080087b5 	.word	0x080087b5
 800880c:	08008967 	.word	0x08008967
 8008810:	080087b5 	.word	0x080087b5
 8008814:	08008869 	.word	0x08008869
 8008818:	080087b5 	.word	0x080087b5
 800881c:	080087b5 	.word	0x080087b5
 8008820:	0800892f 	.word	0x0800892f
 8008824:	680b      	ldr	r3, [r1, #0]
 8008826:	1d1a      	adds	r2, r3, #4
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	600a      	str	r2, [r1, #0]
 800882c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008834:	2301      	movs	r3, #1
 8008836:	e0a3      	b.n	8008980 <_printf_i+0x1f4>
 8008838:	6825      	ldr	r5, [r4, #0]
 800883a:	6808      	ldr	r0, [r1, #0]
 800883c:	062e      	lsls	r6, r5, #24
 800883e:	f100 0304 	add.w	r3, r0, #4
 8008842:	d50a      	bpl.n	800885a <_printf_i+0xce>
 8008844:	6805      	ldr	r5, [r0, #0]
 8008846:	600b      	str	r3, [r1, #0]
 8008848:	2d00      	cmp	r5, #0
 800884a:	da03      	bge.n	8008854 <_printf_i+0xc8>
 800884c:	232d      	movs	r3, #45	; 0x2d
 800884e:	426d      	negs	r5, r5
 8008850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008854:	485e      	ldr	r0, [pc, #376]	; (80089d0 <_printf_i+0x244>)
 8008856:	230a      	movs	r3, #10
 8008858:	e019      	b.n	800888e <_printf_i+0x102>
 800885a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800885e:	6805      	ldr	r5, [r0, #0]
 8008860:	600b      	str	r3, [r1, #0]
 8008862:	bf18      	it	ne
 8008864:	b22d      	sxthne	r5, r5
 8008866:	e7ef      	b.n	8008848 <_printf_i+0xbc>
 8008868:	680b      	ldr	r3, [r1, #0]
 800886a:	6825      	ldr	r5, [r4, #0]
 800886c:	1d18      	adds	r0, r3, #4
 800886e:	6008      	str	r0, [r1, #0]
 8008870:	0628      	lsls	r0, r5, #24
 8008872:	d501      	bpl.n	8008878 <_printf_i+0xec>
 8008874:	681d      	ldr	r5, [r3, #0]
 8008876:	e002      	b.n	800887e <_printf_i+0xf2>
 8008878:	0669      	lsls	r1, r5, #25
 800887a:	d5fb      	bpl.n	8008874 <_printf_i+0xe8>
 800887c:	881d      	ldrh	r5, [r3, #0]
 800887e:	4854      	ldr	r0, [pc, #336]	; (80089d0 <_printf_i+0x244>)
 8008880:	2f6f      	cmp	r7, #111	; 0x6f
 8008882:	bf0c      	ite	eq
 8008884:	2308      	moveq	r3, #8
 8008886:	230a      	movne	r3, #10
 8008888:	2100      	movs	r1, #0
 800888a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800888e:	6866      	ldr	r6, [r4, #4]
 8008890:	60a6      	str	r6, [r4, #8]
 8008892:	2e00      	cmp	r6, #0
 8008894:	bfa2      	ittt	ge
 8008896:	6821      	ldrge	r1, [r4, #0]
 8008898:	f021 0104 	bicge.w	r1, r1, #4
 800889c:	6021      	strge	r1, [r4, #0]
 800889e:	b90d      	cbnz	r5, 80088a4 <_printf_i+0x118>
 80088a0:	2e00      	cmp	r6, #0
 80088a2:	d04d      	beq.n	8008940 <_printf_i+0x1b4>
 80088a4:	4616      	mov	r6, r2
 80088a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80088aa:	fb03 5711 	mls	r7, r3, r1, r5
 80088ae:	5dc7      	ldrb	r7, [r0, r7]
 80088b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088b4:	462f      	mov	r7, r5
 80088b6:	42bb      	cmp	r3, r7
 80088b8:	460d      	mov	r5, r1
 80088ba:	d9f4      	bls.n	80088a6 <_printf_i+0x11a>
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d10b      	bne.n	80088d8 <_printf_i+0x14c>
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	07df      	lsls	r7, r3, #31
 80088c4:	d508      	bpl.n	80088d8 <_printf_i+0x14c>
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	6861      	ldr	r1, [r4, #4]
 80088ca:	4299      	cmp	r1, r3
 80088cc:	bfde      	ittt	le
 80088ce:	2330      	movle	r3, #48	; 0x30
 80088d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088d8:	1b92      	subs	r2, r2, r6
 80088da:	6122      	str	r2, [r4, #16]
 80088dc:	f8cd a000 	str.w	sl, [sp]
 80088e0:	464b      	mov	r3, r9
 80088e2:	aa03      	add	r2, sp, #12
 80088e4:	4621      	mov	r1, r4
 80088e6:	4640      	mov	r0, r8
 80088e8:	f7ff fee2 	bl	80086b0 <_printf_common>
 80088ec:	3001      	adds	r0, #1
 80088ee:	d14c      	bne.n	800898a <_printf_i+0x1fe>
 80088f0:	f04f 30ff 	mov.w	r0, #4294967295
 80088f4:	b004      	add	sp, #16
 80088f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fa:	4835      	ldr	r0, [pc, #212]	; (80089d0 <_printf_i+0x244>)
 80088fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	680e      	ldr	r6, [r1, #0]
 8008904:	061f      	lsls	r7, r3, #24
 8008906:	f856 5b04 	ldr.w	r5, [r6], #4
 800890a:	600e      	str	r6, [r1, #0]
 800890c:	d514      	bpl.n	8008938 <_printf_i+0x1ac>
 800890e:	07d9      	lsls	r1, r3, #31
 8008910:	bf44      	itt	mi
 8008912:	f043 0320 	orrmi.w	r3, r3, #32
 8008916:	6023      	strmi	r3, [r4, #0]
 8008918:	b91d      	cbnz	r5, 8008922 <_printf_i+0x196>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	f023 0320 	bic.w	r3, r3, #32
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	2310      	movs	r3, #16
 8008924:	e7b0      	b.n	8008888 <_printf_i+0xfc>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	f043 0320 	orr.w	r3, r3, #32
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	2378      	movs	r3, #120	; 0x78
 8008930:	4828      	ldr	r0, [pc, #160]	; (80089d4 <_printf_i+0x248>)
 8008932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008936:	e7e3      	b.n	8008900 <_printf_i+0x174>
 8008938:	065e      	lsls	r6, r3, #25
 800893a:	bf48      	it	mi
 800893c:	b2ad      	uxthmi	r5, r5
 800893e:	e7e6      	b.n	800890e <_printf_i+0x182>
 8008940:	4616      	mov	r6, r2
 8008942:	e7bb      	b.n	80088bc <_printf_i+0x130>
 8008944:	680b      	ldr	r3, [r1, #0]
 8008946:	6826      	ldr	r6, [r4, #0]
 8008948:	6960      	ldr	r0, [r4, #20]
 800894a:	1d1d      	adds	r5, r3, #4
 800894c:	600d      	str	r5, [r1, #0]
 800894e:	0635      	lsls	r5, r6, #24
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	d501      	bpl.n	8008958 <_printf_i+0x1cc>
 8008954:	6018      	str	r0, [r3, #0]
 8008956:	e002      	b.n	800895e <_printf_i+0x1d2>
 8008958:	0671      	lsls	r1, r6, #25
 800895a:	d5fb      	bpl.n	8008954 <_printf_i+0x1c8>
 800895c:	8018      	strh	r0, [r3, #0]
 800895e:	2300      	movs	r3, #0
 8008960:	6123      	str	r3, [r4, #16]
 8008962:	4616      	mov	r6, r2
 8008964:	e7ba      	b.n	80088dc <_printf_i+0x150>
 8008966:	680b      	ldr	r3, [r1, #0]
 8008968:	1d1a      	adds	r2, r3, #4
 800896a:	600a      	str	r2, [r1, #0]
 800896c:	681e      	ldr	r6, [r3, #0]
 800896e:	6862      	ldr	r2, [r4, #4]
 8008970:	2100      	movs	r1, #0
 8008972:	4630      	mov	r0, r6
 8008974:	f7f7 fc34 	bl	80001e0 <memchr>
 8008978:	b108      	cbz	r0, 800897e <_printf_i+0x1f2>
 800897a:	1b80      	subs	r0, r0, r6
 800897c:	6060      	str	r0, [r4, #4]
 800897e:	6863      	ldr	r3, [r4, #4]
 8008980:	6123      	str	r3, [r4, #16]
 8008982:	2300      	movs	r3, #0
 8008984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008988:	e7a8      	b.n	80088dc <_printf_i+0x150>
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	4632      	mov	r2, r6
 800898e:	4649      	mov	r1, r9
 8008990:	4640      	mov	r0, r8
 8008992:	47d0      	blx	sl
 8008994:	3001      	adds	r0, #1
 8008996:	d0ab      	beq.n	80088f0 <_printf_i+0x164>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	079b      	lsls	r3, r3, #30
 800899c:	d413      	bmi.n	80089c6 <_printf_i+0x23a>
 800899e:	68e0      	ldr	r0, [r4, #12]
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	4298      	cmp	r0, r3
 80089a4:	bfb8      	it	lt
 80089a6:	4618      	movlt	r0, r3
 80089a8:	e7a4      	b.n	80088f4 <_printf_i+0x168>
 80089aa:	2301      	movs	r3, #1
 80089ac:	4632      	mov	r2, r6
 80089ae:	4649      	mov	r1, r9
 80089b0:	4640      	mov	r0, r8
 80089b2:	47d0      	blx	sl
 80089b4:	3001      	adds	r0, #1
 80089b6:	d09b      	beq.n	80088f0 <_printf_i+0x164>
 80089b8:	3501      	adds	r5, #1
 80089ba:	68e3      	ldr	r3, [r4, #12]
 80089bc:	9903      	ldr	r1, [sp, #12]
 80089be:	1a5b      	subs	r3, r3, r1
 80089c0:	42ab      	cmp	r3, r5
 80089c2:	dcf2      	bgt.n	80089aa <_printf_i+0x21e>
 80089c4:	e7eb      	b.n	800899e <_printf_i+0x212>
 80089c6:	2500      	movs	r5, #0
 80089c8:	f104 0619 	add.w	r6, r4, #25
 80089cc:	e7f5      	b.n	80089ba <_printf_i+0x22e>
 80089ce:	bf00      	nop
 80089d0:	0800cb1a 	.word	0x0800cb1a
 80089d4:	0800cb2b 	.word	0x0800cb2b

080089d8 <_scanf_float>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	b087      	sub	sp, #28
 80089de:	4617      	mov	r7, r2
 80089e0:	9303      	str	r3, [sp, #12]
 80089e2:	688b      	ldr	r3, [r1, #8]
 80089e4:	1e5a      	subs	r2, r3, #1
 80089e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089ea:	bf83      	ittte	hi
 80089ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089f0:	195b      	addhi	r3, r3, r5
 80089f2:	9302      	strhi	r3, [sp, #8]
 80089f4:	2300      	movls	r3, #0
 80089f6:	bf86      	itte	hi
 80089f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089fc:	608b      	strhi	r3, [r1, #8]
 80089fe:	9302      	strls	r3, [sp, #8]
 8008a00:	680b      	ldr	r3, [r1, #0]
 8008a02:	468b      	mov	fp, r1
 8008a04:	2500      	movs	r5, #0
 8008a06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008a0a:	f84b 3b1c 	str.w	r3, [fp], #28
 8008a0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a12:	4680      	mov	r8, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	465e      	mov	r6, fp
 8008a18:	46aa      	mov	sl, r5
 8008a1a:	46a9      	mov	r9, r5
 8008a1c:	9501      	str	r5, [sp, #4]
 8008a1e:	68a2      	ldr	r2, [r4, #8]
 8008a20:	b152      	cbz	r2, 8008a38 <_scanf_float+0x60>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b4e      	cmp	r3, #78	; 0x4e
 8008a28:	d864      	bhi.n	8008af4 <_scanf_float+0x11c>
 8008a2a:	2b40      	cmp	r3, #64	; 0x40
 8008a2c:	d83c      	bhi.n	8008aa8 <_scanf_float+0xd0>
 8008a2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008a32:	b2c8      	uxtb	r0, r1
 8008a34:	280e      	cmp	r0, #14
 8008a36:	d93a      	bls.n	8008aae <_scanf_float+0xd6>
 8008a38:	f1b9 0f00 	cmp.w	r9, #0
 8008a3c:	d003      	beq.n	8008a46 <_scanf_float+0x6e>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a4a:	f1ba 0f01 	cmp.w	sl, #1
 8008a4e:	f200 8113 	bhi.w	8008c78 <_scanf_float+0x2a0>
 8008a52:	455e      	cmp	r6, fp
 8008a54:	f200 8105 	bhi.w	8008c62 <_scanf_float+0x28a>
 8008a58:	2501      	movs	r5, #1
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	b007      	add	sp, #28
 8008a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a66:	2a0d      	cmp	r2, #13
 8008a68:	d8e6      	bhi.n	8008a38 <_scanf_float+0x60>
 8008a6a:	a101      	add	r1, pc, #4	; (adr r1, 8008a70 <_scanf_float+0x98>)
 8008a6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a70:	08008baf 	.word	0x08008baf
 8008a74:	08008a39 	.word	0x08008a39
 8008a78:	08008a39 	.word	0x08008a39
 8008a7c:	08008a39 	.word	0x08008a39
 8008a80:	08008c0f 	.word	0x08008c0f
 8008a84:	08008be7 	.word	0x08008be7
 8008a88:	08008a39 	.word	0x08008a39
 8008a8c:	08008a39 	.word	0x08008a39
 8008a90:	08008bbd 	.word	0x08008bbd
 8008a94:	08008a39 	.word	0x08008a39
 8008a98:	08008a39 	.word	0x08008a39
 8008a9c:	08008a39 	.word	0x08008a39
 8008aa0:	08008a39 	.word	0x08008a39
 8008aa4:	08008b75 	.word	0x08008b75
 8008aa8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008aac:	e7db      	b.n	8008a66 <_scanf_float+0x8e>
 8008aae:	290e      	cmp	r1, #14
 8008ab0:	d8c2      	bhi.n	8008a38 <_scanf_float+0x60>
 8008ab2:	a001      	add	r0, pc, #4	; (adr r0, 8008ab8 <_scanf_float+0xe0>)
 8008ab4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ab8:	08008b67 	.word	0x08008b67
 8008abc:	08008a39 	.word	0x08008a39
 8008ac0:	08008b67 	.word	0x08008b67
 8008ac4:	08008bfb 	.word	0x08008bfb
 8008ac8:	08008a39 	.word	0x08008a39
 8008acc:	08008b15 	.word	0x08008b15
 8008ad0:	08008b51 	.word	0x08008b51
 8008ad4:	08008b51 	.word	0x08008b51
 8008ad8:	08008b51 	.word	0x08008b51
 8008adc:	08008b51 	.word	0x08008b51
 8008ae0:	08008b51 	.word	0x08008b51
 8008ae4:	08008b51 	.word	0x08008b51
 8008ae8:	08008b51 	.word	0x08008b51
 8008aec:	08008b51 	.word	0x08008b51
 8008af0:	08008b51 	.word	0x08008b51
 8008af4:	2b6e      	cmp	r3, #110	; 0x6e
 8008af6:	d809      	bhi.n	8008b0c <_scanf_float+0x134>
 8008af8:	2b60      	cmp	r3, #96	; 0x60
 8008afa:	d8b2      	bhi.n	8008a62 <_scanf_float+0x8a>
 8008afc:	2b54      	cmp	r3, #84	; 0x54
 8008afe:	d077      	beq.n	8008bf0 <_scanf_float+0x218>
 8008b00:	2b59      	cmp	r3, #89	; 0x59
 8008b02:	d199      	bne.n	8008a38 <_scanf_float+0x60>
 8008b04:	2d07      	cmp	r5, #7
 8008b06:	d197      	bne.n	8008a38 <_scanf_float+0x60>
 8008b08:	2508      	movs	r5, #8
 8008b0a:	e029      	b.n	8008b60 <_scanf_float+0x188>
 8008b0c:	2b74      	cmp	r3, #116	; 0x74
 8008b0e:	d06f      	beq.n	8008bf0 <_scanf_float+0x218>
 8008b10:	2b79      	cmp	r3, #121	; 0x79
 8008b12:	e7f6      	b.n	8008b02 <_scanf_float+0x12a>
 8008b14:	6821      	ldr	r1, [r4, #0]
 8008b16:	05c8      	lsls	r0, r1, #23
 8008b18:	d51a      	bpl.n	8008b50 <_scanf_float+0x178>
 8008b1a:	9b02      	ldr	r3, [sp, #8]
 8008b1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008b20:	6021      	str	r1, [r4, #0]
 8008b22:	f109 0901 	add.w	r9, r9, #1
 8008b26:	b11b      	cbz	r3, 8008b30 <_scanf_float+0x158>
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	3201      	adds	r2, #1
 8008b2c:	9302      	str	r3, [sp, #8]
 8008b2e:	60a2      	str	r2, [r4, #8]
 8008b30:	68a3      	ldr	r3, [r4, #8]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	60a3      	str	r3, [r4, #8]
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	607b      	str	r3, [r7, #4]
 8008b44:	f340 8084 	ble.w	8008c50 <_scanf_float+0x278>
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	603b      	str	r3, [r7, #0]
 8008b4e:	e766      	b.n	8008a1e <_scanf_float+0x46>
 8008b50:	eb1a 0f05 	cmn.w	sl, r5
 8008b54:	f47f af70 	bne.w	8008a38 <_scanf_float+0x60>
 8008b58:	6822      	ldr	r2, [r4, #0]
 8008b5a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008b5e:	6022      	str	r2, [r4, #0]
 8008b60:	f806 3b01 	strb.w	r3, [r6], #1
 8008b64:	e7e4      	b.n	8008b30 <_scanf_float+0x158>
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	0610      	lsls	r0, r2, #24
 8008b6a:	f57f af65 	bpl.w	8008a38 <_scanf_float+0x60>
 8008b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b72:	e7f4      	b.n	8008b5e <_scanf_float+0x186>
 8008b74:	f1ba 0f00 	cmp.w	sl, #0
 8008b78:	d10e      	bne.n	8008b98 <_scanf_float+0x1c0>
 8008b7a:	f1b9 0f00 	cmp.w	r9, #0
 8008b7e:	d10e      	bne.n	8008b9e <_scanf_float+0x1c6>
 8008b80:	6822      	ldr	r2, [r4, #0]
 8008b82:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b86:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b8a:	d108      	bne.n	8008b9e <_scanf_float+0x1c6>
 8008b8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b90:	6022      	str	r2, [r4, #0]
 8008b92:	f04f 0a01 	mov.w	sl, #1
 8008b96:	e7e3      	b.n	8008b60 <_scanf_float+0x188>
 8008b98:	f1ba 0f02 	cmp.w	sl, #2
 8008b9c:	d055      	beq.n	8008c4a <_scanf_float+0x272>
 8008b9e:	2d01      	cmp	r5, #1
 8008ba0:	d002      	beq.n	8008ba8 <_scanf_float+0x1d0>
 8008ba2:	2d04      	cmp	r5, #4
 8008ba4:	f47f af48 	bne.w	8008a38 <_scanf_float+0x60>
 8008ba8:	3501      	adds	r5, #1
 8008baa:	b2ed      	uxtb	r5, r5
 8008bac:	e7d8      	b.n	8008b60 <_scanf_float+0x188>
 8008bae:	f1ba 0f01 	cmp.w	sl, #1
 8008bb2:	f47f af41 	bne.w	8008a38 <_scanf_float+0x60>
 8008bb6:	f04f 0a02 	mov.w	sl, #2
 8008bba:	e7d1      	b.n	8008b60 <_scanf_float+0x188>
 8008bbc:	b97d      	cbnz	r5, 8008bde <_scanf_float+0x206>
 8008bbe:	f1b9 0f00 	cmp.w	r9, #0
 8008bc2:	f47f af3c 	bne.w	8008a3e <_scanf_float+0x66>
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008bcc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008bd0:	f47f af39 	bne.w	8008a46 <_scanf_float+0x6e>
 8008bd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008bd8:	6022      	str	r2, [r4, #0]
 8008bda:	2501      	movs	r5, #1
 8008bdc:	e7c0      	b.n	8008b60 <_scanf_float+0x188>
 8008bde:	2d03      	cmp	r5, #3
 8008be0:	d0e2      	beq.n	8008ba8 <_scanf_float+0x1d0>
 8008be2:	2d05      	cmp	r5, #5
 8008be4:	e7de      	b.n	8008ba4 <_scanf_float+0x1cc>
 8008be6:	2d02      	cmp	r5, #2
 8008be8:	f47f af26 	bne.w	8008a38 <_scanf_float+0x60>
 8008bec:	2503      	movs	r5, #3
 8008bee:	e7b7      	b.n	8008b60 <_scanf_float+0x188>
 8008bf0:	2d06      	cmp	r5, #6
 8008bf2:	f47f af21 	bne.w	8008a38 <_scanf_float+0x60>
 8008bf6:	2507      	movs	r5, #7
 8008bf8:	e7b2      	b.n	8008b60 <_scanf_float+0x188>
 8008bfa:	6822      	ldr	r2, [r4, #0]
 8008bfc:	0591      	lsls	r1, r2, #22
 8008bfe:	f57f af1b 	bpl.w	8008a38 <_scanf_float+0x60>
 8008c02:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008c06:	6022      	str	r2, [r4, #0]
 8008c08:	f8cd 9004 	str.w	r9, [sp, #4]
 8008c0c:	e7a8      	b.n	8008b60 <_scanf_float+0x188>
 8008c0e:	6822      	ldr	r2, [r4, #0]
 8008c10:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008c14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008c18:	d006      	beq.n	8008c28 <_scanf_float+0x250>
 8008c1a:	0550      	lsls	r0, r2, #21
 8008c1c:	f57f af0c 	bpl.w	8008a38 <_scanf_float+0x60>
 8008c20:	f1b9 0f00 	cmp.w	r9, #0
 8008c24:	f43f af0f 	beq.w	8008a46 <_scanf_float+0x6e>
 8008c28:	0591      	lsls	r1, r2, #22
 8008c2a:	bf58      	it	pl
 8008c2c:	9901      	ldrpl	r1, [sp, #4]
 8008c2e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c32:	bf58      	it	pl
 8008c34:	eba9 0101 	subpl.w	r1, r9, r1
 8008c38:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008c3c:	bf58      	it	pl
 8008c3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c42:	6022      	str	r2, [r4, #0]
 8008c44:	f04f 0900 	mov.w	r9, #0
 8008c48:	e78a      	b.n	8008b60 <_scanf_float+0x188>
 8008c4a:	f04f 0a03 	mov.w	sl, #3
 8008c4e:	e787      	b.n	8008b60 <_scanf_float+0x188>
 8008c50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c54:	4639      	mov	r1, r7
 8008c56:	4640      	mov	r0, r8
 8008c58:	4798      	blx	r3
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	f43f aedf 	beq.w	8008a1e <_scanf_float+0x46>
 8008c60:	e6ea      	b.n	8008a38 <_scanf_float+0x60>
 8008c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c6a:	463a      	mov	r2, r7
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	4798      	blx	r3
 8008c70:	6923      	ldr	r3, [r4, #16]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	6123      	str	r3, [r4, #16]
 8008c76:	e6ec      	b.n	8008a52 <_scanf_float+0x7a>
 8008c78:	1e6b      	subs	r3, r5, #1
 8008c7a:	2b06      	cmp	r3, #6
 8008c7c:	d825      	bhi.n	8008cca <_scanf_float+0x2f2>
 8008c7e:	2d02      	cmp	r5, #2
 8008c80:	d836      	bhi.n	8008cf0 <_scanf_float+0x318>
 8008c82:	455e      	cmp	r6, fp
 8008c84:	f67f aee8 	bls.w	8008a58 <_scanf_float+0x80>
 8008c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c8c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c90:	463a      	mov	r2, r7
 8008c92:	4640      	mov	r0, r8
 8008c94:	4798      	blx	r3
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	6123      	str	r3, [r4, #16]
 8008c9c:	e7f1      	b.n	8008c82 <_scanf_float+0x2aa>
 8008c9e:	9802      	ldr	r0, [sp, #8]
 8008ca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ca4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008ca8:	9002      	str	r0, [sp, #8]
 8008caa:	463a      	mov	r2, r7
 8008cac:	4640      	mov	r0, r8
 8008cae:	4798      	blx	r3
 8008cb0:	6923      	ldr	r3, [r4, #16]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cba:	fa5f fa8a 	uxtb.w	sl, sl
 8008cbe:	f1ba 0f02 	cmp.w	sl, #2
 8008cc2:	d1ec      	bne.n	8008c9e <_scanf_float+0x2c6>
 8008cc4:	3d03      	subs	r5, #3
 8008cc6:	b2ed      	uxtb	r5, r5
 8008cc8:	1b76      	subs	r6, r6, r5
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	05da      	lsls	r2, r3, #23
 8008cce:	d52f      	bpl.n	8008d30 <_scanf_float+0x358>
 8008cd0:	055b      	lsls	r3, r3, #21
 8008cd2:	d510      	bpl.n	8008cf6 <_scanf_float+0x31e>
 8008cd4:	455e      	cmp	r6, fp
 8008cd6:	f67f aebf 	bls.w	8008a58 <_scanf_float+0x80>
 8008cda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ce2:	463a      	mov	r2, r7
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	4798      	blx	r3
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	e7f1      	b.n	8008cd4 <_scanf_float+0x2fc>
 8008cf0:	46aa      	mov	sl, r5
 8008cf2:	9602      	str	r6, [sp, #8]
 8008cf4:	e7df      	b.n	8008cb6 <_scanf_float+0x2de>
 8008cf6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	2965      	cmp	r1, #101	; 0x65
 8008cfe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d02:	f106 35ff 	add.w	r5, r6, #4294967295
 8008d06:	6123      	str	r3, [r4, #16]
 8008d08:	d00c      	beq.n	8008d24 <_scanf_float+0x34c>
 8008d0a:	2945      	cmp	r1, #69	; 0x45
 8008d0c:	d00a      	beq.n	8008d24 <_scanf_float+0x34c>
 8008d0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d12:	463a      	mov	r2, r7
 8008d14:	4640      	mov	r0, r8
 8008d16:	4798      	blx	r3
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	1eb5      	subs	r5, r6, #2
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d28:	463a      	mov	r2, r7
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4798      	blx	r3
 8008d2e:	462e      	mov	r6, r5
 8008d30:	6825      	ldr	r5, [r4, #0]
 8008d32:	f015 0510 	ands.w	r5, r5, #16
 8008d36:	d158      	bne.n	8008dea <_scanf_float+0x412>
 8008d38:	7035      	strb	r5, [r6, #0]
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d44:	d11c      	bne.n	8008d80 <_scanf_float+0x3a8>
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	454b      	cmp	r3, r9
 8008d4a:	eba3 0209 	sub.w	r2, r3, r9
 8008d4e:	d124      	bne.n	8008d9a <_scanf_float+0x3c2>
 8008d50:	2200      	movs	r2, #0
 8008d52:	4659      	mov	r1, fp
 8008d54:	4640      	mov	r0, r8
 8008d56:	f000 ff29 	bl	8009bac <_strtod_r>
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	6821      	ldr	r1, [r4, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f011 0f02 	tst.w	r1, #2
 8008d64:	ec57 6b10 	vmov	r6, r7, d0
 8008d68:	f103 0204 	add.w	r2, r3, #4
 8008d6c:	d020      	beq.n	8008db0 <_scanf_float+0x3d8>
 8008d6e:	9903      	ldr	r1, [sp, #12]
 8008d70:	600a      	str	r2, [r1, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	e9c3 6700 	strd	r6, r7, [r3]
 8008d78:	68e3      	ldr	r3, [r4, #12]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60e3      	str	r3, [r4, #12]
 8008d7e:	e66c      	b.n	8008a5a <_scanf_float+0x82>
 8008d80:	9b04      	ldr	r3, [sp, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0e4      	beq.n	8008d50 <_scanf_float+0x378>
 8008d86:	9905      	ldr	r1, [sp, #20]
 8008d88:	230a      	movs	r3, #10
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	3101      	adds	r1, #1
 8008d8e:	4640      	mov	r0, r8
 8008d90:	f000 ff96 	bl	8009cc0 <_strtol_r>
 8008d94:	9b04      	ldr	r3, [sp, #16]
 8008d96:	9e05      	ldr	r6, [sp, #20]
 8008d98:	1ac2      	subs	r2, r0, r3
 8008d9a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d9e:	429e      	cmp	r6, r3
 8008da0:	bf28      	it	cs
 8008da2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008da6:	4912      	ldr	r1, [pc, #72]	; (8008df0 <_scanf_float+0x418>)
 8008da8:	4630      	mov	r0, r6
 8008daa:	f000 f8b9 	bl	8008f20 <siprintf>
 8008dae:	e7cf      	b.n	8008d50 <_scanf_float+0x378>
 8008db0:	f011 0f04 	tst.w	r1, #4
 8008db4:	9903      	ldr	r1, [sp, #12]
 8008db6:	600a      	str	r2, [r1, #0]
 8008db8:	d1db      	bne.n	8008d72 <_scanf_float+0x39a>
 8008dba:	f8d3 8000 	ldr.w	r8, [r3]
 8008dbe:	ee10 2a10 	vmov	r2, s0
 8008dc2:	ee10 0a10 	vmov	r0, s0
 8008dc6:	463b      	mov	r3, r7
 8008dc8:	4639      	mov	r1, r7
 8008dca:	f7f7 feaf 	bl	8000b2c <__aeabi_dcmpun>
 8008dce:	b128      	cbz	r0, 8008ddc <_scanf_float+0x404>
 8008dd0:	4808      	ldr	r0, [pc, #32]	; (8008df4 <_scanf_float+0x41c>)
 8008dd2:	f000 f89f 	bl	8008f14 <nanf>
 8008dd6:	ed88 0a00 	vstr	s0, [r8]
 8008dda:	e7cd      	b.n	8008d78 <_scanf_float+0x3a0>
 8008ddc:	4630      	mov	r0, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7f7 ff02 	bl	8000be8 <__aeabi_d2f>
 8008de4:	f8c8 0000 	str.w	r0, [r8]
 8008de8:	e7c6      	b.n	8008d78 <_scanf_float+0x3a0>
 8008dea:	2500      	movs	r5, #0
 8008dec:	e635      	b.n	8008a5a <_scanf_float+0x82>
 8008dee:	bf00      	nop
 8008df0:	0800cb3c 	.word	0x0800cb3c
 8008df4:	0800cfb8 	.word	0x0800cfb8

08008df8 <iprintf>:
 8008df8:	b40f      	push	{r0, r1, r2, r3}
 8008dfa:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <iprintf+0x2c>)
 8008dfc:	b513      	push	{r0, r1, r4, lr}
 8008dfe:	681c      	ldr	r4, [r3, #0]
 8008e00:	b124      	cbz	r4, 8008e0c <iprintf+0x14>
 8008e02:	69a3      	ldr	r3, [r4, #24]
 8008e04:	b913      	cbnz	r3, 8008e0c <iprintf+0x14>
 8008e06:	4620      	mov	r0, r4
 8008e08:	f001 ffb0 	bl	800ad6c <__sinit>
 8008e0c:	ab05      	add	r3, sp, #20
 8008e0e:	9a04      	ldr	r2, [sp, #16]
 8008e10:	68a1      	ldr	r1, [r4, #8]
 8008e12:	9301      	str	r3, [sp, #4]
 8008e14:	4620      	mov	r0, r4
 8008e16:	f003 fb35 	bl	800c484 <_vfiprintf_r>
 8008e1a:	b002      	add	sp, #8
 8008e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e20:	b004      	add	sp, #16
 8008e22:	4770      	bx	lr
 8008e24:	2000000c 	.word	0x2000000c

08008e28 <_puts_r>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	460e      	mov	r6, r1
 8008e2c:	4605      	mov	r5, r0
 8008e2e:	b118      	cbz	r0, 8008e38 <_puts_r+0x10>
 8008e30:	6983      	ldr	r3, [r0, #24]
 8008e32:	b90b      	cbnz	r3, 8008e38 <_puts_r+0x10>
 8008e34:	f001 ff9a 	bl	800ad6c <__sinit>
 8008e38:	69ab      	ldr	r3, [r5, #24]
 8008e3a:	68ac      	ldr	r4, [r5, #8]
 8008e3c:	b913      	cbnz	r3, 8008e44 <_puts_r+0x1c>
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f001 ff94 	bl	800ad6c <__sinit>
 8008e44:	4b2c      	ldr	r3, [pc, #176]	; (8008ef8 <_puts_r+0xd0>)
 8008e46:	429c      	cmp	r4, r3
 8008e48:	d120      	bne.n	8008e8c <_puts_r+0x64>
 8008e4a:	686c      	ldr	r4, [r5, #4]
 8008e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e4e:	07db      	lsls	r3, r3, #31
 8008e50:	d405      	bmi.n	8008e5e <_puts_r+0x36>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	0598      	lsls	r0, r3, #22
 8008e56:	d402      	bmi.n	8008e5e <_puts_r+0x36>
 8008e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e5a:	f002 fb98 	bl	800b58e <__retarget_lock_acquire_recursive>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	0719      	lsls	r1, r3, #28
 8008e62:	d51d      	bpl.n	8008ea0 <_puts_r+0x78>
 8008e64:	6923      	ldr	r3, [r4, #16]
 8008e66:	b1db      	cbz	r3, 8008ea0 <_puts_r+0x78>
 8008e68:	3e01      	subs	r6, #1
 8008e6a:	68a3      	ldr	r3, [r4, #8]
 8008e6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e70:	3b01      	subs	r3, #1
 8008e72:	60a3      	str	r3, [r4, #8]
 8008e74:	bb39      	cbnz	r1, 8008ec6 <_puts_r+0x9e>
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	da38      	bge.n	8008eec <_puts_r+0xc4>
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	210a      	movs	r1, #10
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f000 ff20 	bl	8009cc4 <__swbuf_r>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d011      	beq.n	8008eac <_puts_r+0x84>
 8008e88:	250a      	movs	r5, #10
 8008e8a:	e011      	b.n	8008eb0 <_puts_r+0x88>
 8008e8c:	4b1b      	ldr	r3, [pc, #108]	; (8008efc <_puts_r+0xd4>)
 8008e8e:	429c      	cmp	r4, r3
 8008e90:	d101      	bne.n	8008e96 <_puts_r+0x6e>
 8008e92:	68ac      	ldr	r4, [r5, #8]
 8008e94:	e7da      	b.n	8008e4c <_puts_r+0x24>
 8008e96:	4b1a      	ldr	r3, [pc, #104]	; (8008f00 <_puts_r+0xd8>)
 8008e98:	429c      	cmp	r4, r3
 8008e9a:	bf08      	it	eq
 8008e9c:	68ec      	ldreq	r4, [r5, #12]
 8008e9e:	e7d5      	b.n	8008e4c <_puts_r+0x24>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 ff60 	bl	8009d68 <__swsetup_r>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d0dd      	beq.n	8008e68 <_puts_r+0x40>
 8008eac:	f04f 35ff 	mov.w	r5, #4294967295
 8008eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eb2:	07da      	lsls	r2, r3, #31
 8008eb4:	d405      	bmi.n	8008ec2 <_puts_r+0x9a>
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	059b      	lsls	r3, r3, #22
 8008eba:	d402      	bmi.n	8008ec2 <_puts_r+0x9a>
 8008ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ebe:	f002 fb67 	bl	800b590 <__retarget_lock_release_recursive>
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	bd70      	pop	{r4, r5, r6, pc}
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	da04      	bge.n	8008ed4 <_puts_r+0xac>
 8008eca:	69a2      	ldr	r2, [r4, #24]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	dc06      	bgt.n	8008ede <_puts_r+0xb6>
 8008ed0:	290a      	cmp	r1, #10
 8008ed2:	d004      	beq.n	8008ede <_puts_r+0xb6>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	7019      	strb	r1, [r3, #0]
 8008edc:	e7c5      	b.n	8008e6a <_puts_r+0x42>
 8008ede:	4622      	mov	r2, r4
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f000 feef 	bl	8009cc4 <__swbuf_r>
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d1bf      	bne.n	8008e6a <_puts_r+0x42>
 8008eea:	e7df      	b.n	8008eac <_puts_r+0x84>
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	250a      	movs	r5, #10
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	6022      	str	r2, [r4, #0]
 8008ef4:	701d      	strb	r5, [r3, #0]
 8008ef6:	e7db      	b.n	8008eb0 <_puts_r+0x88>
 8008ef8:	0800cd50 	.word	0x0800cd50
 8008efc:	0800cd70 	.word	0x0800cd70
 8008f00:	0800cd30 	.word	0x0800cd30

08008f04 <puts>:
 8008f04:	4b02      	ldr	r3, [pc, #8]	; (8008f10 <puts+0xc>)
 8008f06:	4601      	mov	r1, r0
 8008f08:	6818      	ldr	r0, [r3, #0]
 8008f0a:	f7ff bf8d 	b.w	8008e28 <_puts_r>
 8008f0e:	bf00      	nop
 8008f10:	2000000c 	.word	0x2000000c

08008f14 <nanf>:
 8008f14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008f1c <nanf+0x8>
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	7fc00000 	.word	0x7fc00000

08008f20 <siprintf>:
 8008f20:	b40e      	push	{r1, r2, r3}
 8008f22:	b500      	push	{lr}
 8008f24:	b09c      	sub	sp, #112	; 0x70
 8008f26:	ab1d      	add	r3, sp, #116	; 0x74
 8008f28:	9002      	str	r0, [sp, #8]
 8008f2a:	9006      	str	r0, [sp, #24]
 8008f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f30:	4809      	ldr	r0, [pc, #36]	; (8008f58 <siprintf+0x38>)
 8008f32:	9107      	str	r1, [sp, #28]
 8008f34:	9104      	str	r1, [sp, #16]
 8008f36:	4909      	ldr	r1, [pc, #36]	; (8008f5c <siprintf+0x3c>)
 8008f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3c:	9105      	str	r1, [sp, #20]
 8008f3e:	6800      	ldr	r0, [r0, #0]
 8008f40:	9301      	str	r3, [sp, #4]
 8008f42:	a902      	add	r1, sp, #8
 8008f44:	f003 f974 	bl	800c230 <_svfiprintf_r>
 8008f48:	9b02      	ldr	r3, [sp, #8]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	b01c      	add	sp, #112	; 0x70
 8008f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f54:	b003      	add	sp, #12
 8008f56:	4770      	bx	lr
 8008f58:	2000000c 	.word	0x2000000c
 8008f5c:	ffff0208 	.word	0xffff0208

08008f60 <sulp>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	4604      	mov	r4, r0
 8008f64:	460d      	mov	r5, r1
 8008f66:	ec45 4b10 	vmov	d0, r4, r5
 8008f6a:	4616      	mov	r6, r2
 8008f6c:	f002 fefc 	bl	800bd68 <__ulp>
 8008f70:	ec51 0b10 	vmov	r0, r1, d0
 8008f74:	b17e      	cbz	r6, 8008f96 <sulp+0x36>
 8008f76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008f7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dd09      	ble.n	8008f96 <sulp+0x36>
 8008f82:	051b      	lsls	r3, r3, #20
 8008f84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008f88:	2400      	movs	r4, #0
 8008f8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	f7f7 fb31 	bl	80005f8 <__aeabi_dmul>
 8008f96:	bd70      	pop	{r4, r5, r6, pc}

08008f98 <_strtod_l>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	b0a3      	sub	sp, #140	; 0x8c
 8008f9e:	461f      	mov	r7, r3
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	931e      	str	r3, [sp, #120]	; 0x78
 8008fa4:	4ba4      	ldr	r3, [pc, #656]	; (8009238 <_strtod_l+0x2a0>)
 8008fa6:	9219      	str	r2, [sp, #100]	; 0x64
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	9307      	str	r3, [sp, #28]
 8008fac:	4604      	mov	r4, r0
 8008fae:	4618      	mov	r0, r3
 8008fb0:	4688      	mov	r8, r1
 8008fb2:	f7f7 f90d 	bl	80001d0 <strlen>
 8008fb6:	f04f 0a00 	mov.w	sl, #0
 8008fba:	4605      	mov	r5, r0
 8008fbc:	f04f 0b00 	mov.w	fp, #0
 8008fc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008fc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	2a2b      	cmp	r2, #43	; 0x2b
 8008fca:	d04c      	beq.n	8009066 <_strtod_l+0xce>
 8008fcc:	d839      	bhi.n	8009042 <_strtod_l+0xaa>
 8008fce:	2a0d      	cmp	r2, #13
 8008fd0:	d832      	bhi.n	8009038 <_strtod_l+0xa0>
 8008fd2:	2a08      	cmp	r2, #8
 8008fd4:	d832      	bhi.n	800903c <_strtod_l+0xa4>
 8008fd6:	2a00      	cmp	r2, #0
 8008fd8:	d03c      	beq.n	8009054 <_strtod_l+0xbc>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	930e      	str	r3, [sp, #56]	; 0x38
 8008fde:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008fe0:	7833      	ldrb	r3, [r6, #0]
 8008fe2:	2b30      	cmp	r3, #48	; 0x30
 8008fe4:	f040 80b4 	bne.w	8009150 <_strtod_l+0x1b8>
 8008fe8:	7873      	ldrb	r3, [r6, #1]
 8008fea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008fee:	2b58      	cmp	r3, #88	; 0x58
 8008ff0:	d16c      	bne.n	80090cc <_strtod_l+0x134>
 8008ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	ab1e      	add	r3, sp, #120	; 0x78
 8008ff8:	9702      	str	r7, [sp, #8]
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	4a8f      	ldr	r2, [pc, #572]	; (800923c <_strtod_l+0x2a4>)
 8008ffe:	ab1f      	add	r3, sp, #124	; 0x7c
 8009000:	a91d      	add	r1, sp, #116	; 0x74
 8009002:	4620      	mov	r0, r4
 8009004:	f001 ffb6 	bl	800af74 <__gethex>
 8009008:	f010 0707 	ands.w	r7, r0, #7
 800900c:	4605      	mov	r5, r0
 800900e:	d005      	beq.n	800901c <_strtod_l+0x84>
 8009010:	2f06      	cmp	r7, #6
 8009012:	d12a      	bne.n	800906a <_strtod_l+0xd2>
 8009014:	3601      	adds	r6, #1
 8009016:	2300      	movs	r3, #0
 8009018:	961d      	str	r6, [sp, #116]	; 0x74
 800901a:	930e      	str	r3, [sp, #56]	; 0x38
 800901c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800901e:	2b00      	cmp	r3, #0
 8009020:	f040 8596 	bne.w	8009b50 <_strtod_l+0xbb8>
 8009024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009026:	b1db      	cbz	r3, 8009060 <_strtod_l+0xc8>
 8009028:	4652      	mov	r2, sl
 800902a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800902e:	ec43 2b10 	vmov	d0, r2, r3
 8009032:	b023      	add	sp, #140	; 0x8c
 8009034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009038:	2a20      	cmp	r2, #32
 800903a:	d1ce      	bne.n	8008fda <_strtod_l+0x42>
 800903c:	3301      	adds	r3, #1
 800903e:	931d      	str	r3, [sp, #116]	; 0x74
 8009040:	e7c0      	b.n	8008fc4 <_strtod_l+0x2c>
 8009042:	2a2d      	cmp	r2, #45	; 0x2d
 8009044:	d1c9      	bne.n	8008fda <_strtod_l+0x42>
 8009046:	2201      	movs	r2, #1
 8009048:	920e      	str	r2, [sp, #56]	; 0x38
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	921d      	str	r2, [sp, #116]	; 0x74
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1c4      	bne.n	8008fde <_strtod_l+0x46>
 8009054:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009056:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800905a:	2b00      	cmp	r3, #0
 800905c:	f040 8576 	bne.w	8009b4c <_strtod_l+0xbb4>
 8009060:	4652      	mov	r2, sl
 8009062:	465b      	mov	r3, fp
 8009064:	e7e3      	b.n	800902e <_strtod_l+0x96>
 8009066:	2200      	movs	r2, #0
 8009068:	e7ee      	b.n	8009048 <_strtod_l+0xb0>
 800906a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800906c:	b13a      	cbz	r2, 800907e <_strtod_l+0xe6>
 800906e:	2135      	movs	r1, #53	; 0x35
 8009070:	a820      	add	r0, sp, #128	; 0x80
 8009072:	f002 ff84 	bl	800bf7e <__copybits>
 8009076:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009078:	4620      	mov	r0, r4
 800907a:	f002 fb49 	bl	800b710 <_Bfree>
 800907e:	3f01      	subs	r7, #1
 8009080:	2f05      	cmp	r7, #5
 8009082:	d807      	bhi.n	8009094 <_strtod_l+0xfc>
 8009084:	e8df f007 	tbb	[pc, r7]
 8009088:	1d180b0e 	.word	0x1d180b0e
 800908c:	030e      	.short	0x030e
 800908e:	f04f 0b00 	mov.w	fp, #0
 8009092:	46da      	mov	sl, fp
 8009094:	0728      	lsls	r0, r5, #28
 8009096:	d5c1      	bpl.n	800901c <_strtod_l+0x84>
 8009098:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800909c:	e7be      	b.n	800901c <_strtod_l+0x84>
 800909e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80090a2:	e7f7      	b.n	8009094 <_strtod_l+0xfc>
 80090a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80090a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80090aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80090ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80090b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80090b6:	e7ed      	b.n	8009094 <_strtod_l+0xfc>
 80090b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009240 <_strtod_l+0x2a8>
 80090bc:	f04f 0a00 	mov.w	sl, #0
 80090c0:	e7e8      	b.n	8009094 <_strtod_l+0xfc>
 80090c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80090c6:	f04f 3aff 	mov.w	sl, #4294967295
 80090ca:	e7e3      	b.n	8009094 <_strtod_l+0xfc>
 80090cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	921d      	str	r2, [sp, #116]	; 0x74
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	2b30      	cmp	r3, #48	; 0x30
 80090d6:	d0f9      	beq.n	80090cc <_strtod_l+0x134>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d09f      	beq.n	800901c <_strtod_l+0x84>
 80090dc:	2301      	movs	r3, #1
 80090de:	f04f 0900 	mov.w	r9, #0
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090e6:	930a      	str	r3, [sp, #40]	; 0x28
 80090e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80090ec:	464f      	mov	r7, r9
 80090ee:	220a      	movs	r2, #10
 80090f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80090f2:	7806      	ldrb	r6, [r0, #0]
 80090f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80090f8:	b2d9      	uxtb	r1, r3
 80090fa:	2909      	cmp	r1, #9
 80090fc:	d92a      	bls.n	8009154 <_strtod_l+0x1bc>
 80090fe:	9907      	ldr	r1, [sp, #28]
 8009100:	462a      	mov	r2, r5
 8009102:	f003 fb4c 	bl	800c79e <strncmp>
 8009106:	b398      	cbz	r0, 8009170 <_strtod_l+0x1d8>
 8009108:	2000      	movs	r0, #0
 800910a:	4633      	mov	r3, r6
 800910c:	463d      	mov	r5, r7
 800910e:	9007      	str	r0, [sp, #28]
 8009110:	4602      	mov	r2, r0
 8009112:	2b65      	cmp	r3, #101	; 0x65
 8009114:	d001      	beq.n	800911a <_strtod_l+0x182>
 8009116:	2b45      	cmp	r3, #69	; 0x45
 8009118:	d118      	bne.n	800914c <_strtod_l+0x1b4>
 800911a:	b91d      	cbnz	r5, 8009124 <_strtod_l+0x18c>
 800911c:	9b04      	ldr	r3, [sp, #16]
 800911e:	4303      	orrs	r3, r0
 8009120:	d098      	beq.n	8009054 <_strtod_l+0xbc>
 8009122:	2500      	movs	r5, #0
 8009124:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009128:	f108 0301 	add.w	r3, r8, #1
 800912c:	931d      	str	r3, [sp, #116]	; 0x74
 800912e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009132:	2b2b      	cmp	r3, #43	; 0x2b
 8009134:	d075      	beq.n	8009222 <_strtod_l+0x28a>
 8009136:	2b2d      	cmp	r3, #45	; 0x2d
 8009138:	d07b      	beq.n	8009232 <_strtod_l+0x29a>
 800913a:	f04f 0c00 	mov.w	ip, #0
 800913e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009142:	2909      	cmp	r1, #9
 8009144:	f240 8082 	bls.w	800924c <_strtod_l+0x2b4>
 8009148:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800914c:	2600      	movs	r6, #0
 800914e:	e09d      	b.n	800928c <_strtod_l+0x2f4>
 8009150:	2300      	movs	r3, #0
 8009152:	e7c4      	b.n	80090de <_strtod_l+0x146>
 8009154:	2f08      	cmp	r7, #8
 8009156:	bfd8      	it	le
 8009158:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800915a:	f100 0001 	add.w	r0, r0, #1
 800915e:	bfda      	itte	le
 8009160:	fb02 3301 	mlale	r3, r2, r1, r3
 8009164:	9309      	strle	r3, [sp, #36]	; 0x24
 8009166:	fb02 3909 	mlagt	r9, r2, r9, r3
 800916a:	3701      	adds	r7, #1
 800916c:	901d      	str	r0, [sp, #116]	; 0x74
 800916e:	e7bf      	b.n	80090f0 <_strtod_l+0x158>
 8009170:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009172:	195a      	adds	r2, r3, r5
 8009174:	921d      	str	r2, [sp, #116]	; 0x74
 8009176:	5d5b      	ldrb	r3, [r3, r5]
 8009178:	2f00      	cmp	r7, #0
 800917a:	d037      	beq.n	80091ec <_strtod_l+0x254>
 800917c:	9007      	str	r0, [sp, #28]
 800917e:	463d      	mov	r5, r7
 8009180:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009184:	2a09      	cmp	r2, #9
 8009186:	d912      	bls.n	80091ae <_strtod_l+0x216>
 8009188:	2201      	movs	r2, #1
 800918a:	e7c2      	b.n	8009112 <_strtod_l+0x17a>
 800918c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	921d      	str	r2, [sp, #116]	; 0x74
 8009192:	785b      	ldrb	r3, [r3, #1]
 8009194:	3001      	adds	r0, #1
 8009196:	2b30      	cmp	r3, #48	; 0x30
 8009198:	d0f8      	beq.n	800918c <_strtod_l+0x1f4>
 800919a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800919e:	2a08      	cmp	r2, #8
 80091a0:	f200 84db 	bhi.w	8009b5a <_strtod_l+0xbc2>
 80091a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80091a6:	9007      	str	r0, [sp, #28]
 80091a8:	2000      	movs	r0, #0
 80091aa:	920a      	str	r2, [sp, #40]	; 0x28
 80091ac:	4605      	mov	r5, r0
 80091ae:	3b30      	subs	r3, #48	; 0x30
 80091b0:	f100 0201 	add.w	r2, r0, #1
 80091b4:	d014      	beq.n	80091e0 <_strtod_l+0x248>
 80091b6:	9907      	ldr	r1, [sp, #28]
 80091b8:	4411      	add	r1, r2
 80091ba:	9107      	str	r1, [sp, #28]
 80091bc:	462a      	mov	r2, r5
 80091be:	eb00 0e05 	add.w	lr, r0, r5
 80091c2:	210a      	movs	r1, #10
 80091c4:	4572      	cmp	r2, lr
 80091c6:	d113      	bne.n	80091f0 <_strtod_l+0x258>
 80091c8:	182a      	adds	r2, r5, r0
 80091ca:	2a08      	cmp	r2, #8
 80091cc:	f105 0501 	add.w	r5, r5, #1
 80091d0:	4405      	add	r5, r0
 80091d2:	dc1c      	bgt.n	800920e <_strtod_l+0x276>
 80091d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091d6:	220a      	movs	r2, #10
 80091d8:	fb02 3301 	mla	r3, r2, r1, r3
 80091dc:	9309      	str	r3, [sp, #36]	; 0x24
 80091de:	2200      	movs	r2, #0
 80091e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091e2:	1c59      	adds	r1, r3, #1
 80091e4:	911d      	str	r1, [sp, #116]	; 0x74
 80091e6:	785b      	ldrb	r3, [r3, #1]
 80091e8:	4610      	mov	r0, r2
 80091ea:	e7c9      	b.n	8009180 <_strtod_l+0x1e8>
 80091ec:	4638      	mov	r0, r7
 80091ee:	e7d2      	b.n	8009196 <_strtod_l+0x1fe>
 80091f0:	2a08      	cmp	r2, #8
 80091f2:	dc04      	bgt.n	80091fe <_strtod_l+0x266>
 80091f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80091f6:	434e      	muls	r6, r1
 80091f8:	9609      	str	r6, [sp, #36]	; 0x24
 80091fa:	3201      	adds	r2, #1
 80091fc:	e7e2      	b.n	80091c4 <_strtod_l+0x22c>
 80091fe:	f102 0c01 	add.w	ip, r2, #1
 8009202:	f1bc 0f10 	cmp.w	ip, #16
 8009206:	bfd8      	it	le
 8009208:	fb01 f909 	mulle.w	r9, r1, r9
 800920c:	e7f5      	b.n	80091fa <_strtod_l+0x262>
 800920e:	2d10      	cmp	r5, #16
 8009210:	bfdc      	itt	le
 8009212:	220a      	movle	r2, #10
 8009214:	fb02 3909 	mlale	r9, r2, r9, r3
 8009218:	e7e1      	b.n	80091de <_strtod_l+0x246>
 800921a:	2300      	movs	r3, #0
 800921c:	9307      	str	r3, [sp, #28]
 800921e:	2201      	movs	r2, #1
 8009220:	e77c      	b.n	800911c <_strtod_l+0x184>
 8009222:	f04f 0c00 	mov.w	ip, #0
 8009226:	f108 0302 	add.w	r3, r8, #2
 800922a:	931d      	str	r3, [sp, #116]	; 0x74
 800922c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009230:	e785      	b.n	800913e <_strtod_l+0x1a6>
 8009232:	f04f 0c01 	mov.w	ip, #1
 8009236:	e7f6      	b.n	8009226 <_strtod_l+0x28e>
 8009238:	0800cdfc 	.word	0x0800cdfc
 800923c:	0800cb44 	.word	0x0800cb44
 8009240:	7ff00000 	.word	0x7ff00000
 8009244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009246:	1c59      	adds	r1, r3, #1
 8009248:	911d      	str	r1, [sp, #116]	; 0x74
 800924a:	785b      	ldrb	r3, [r3, #1]
 800924c:	2b30      	cmp	r3, #48	; 0x30
 800924e:	d0f9      	beq.n	8009244 <_strtod_l+0x2ac>
 8009250:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009254:	2908      	cmp	r1, #8
 8009256:	f63f af79 	bhi.w	800914c <_strtod_l+0x1b4>
 800925a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800925e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009260:	9308      	str	r3, [sp, #32]
 8009262:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009264:	1c59      	adds	r1, r3, #1
 8009266:	911d      	str	r1, [sp, #116]	; 0x74
 8009268:	785b      	ldrb	r3, [r3, #1]
 800926a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800926e:	2e09      	cmp	r6, #9
 8009270:	d937      	bls.n	80092e2 <_strtod_l+0x34a>
 8009272:	9e08      	ldr	r6, [sp, #32]
 8009274:	1b89      	subs	r1, r1, r6
 8009276:	2908      	cmp	r1, #8
 8009278:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800927c:	dc02      	bgt.n	8009284 <_strtod_l+0x2ec>
 800927e:	4576      	cmp	r6, lr
 8009280:	bfa8      	it	ge
 8009282:	4676      	movge	r6, lr
 8009284:	f1bc 0f00 	cmp.w	ip, #0
 8009288:	d000      	beq.n	800928c <_strtod_l+0x2f4>
 800928a:	4276      	negs	r6, r6
 800928c:	2d00      	cmp	r5, #0
 800928e:	d14f      	bne.n	8009330 <_strtod_l+0x398>
 8009290:	9904      	ldr	r1, [sp, #16]
 8009292:	4301      	orrs	r1, r0
 8009294:	f47f aec2 	bne.w	800901c <_strtod_l+0x84>
 8009298:	2a00      	cmp	r2, #0
 800929a:	f47f aedb 	bne.w	8009054 <_strtod_l+0xbc>
 800929e:	2b69      	cmp	r3, #105	; 0x69
 80092a0:	d027      	beq.n	80092f2 <_strtod_l+0x35a>
 80092a2:	dc24      	bgt.n	80092ee <_strtod_l+0x356>
 80092a4:	2b49      	cmp	r3, #73	; 0x49
 80092a6:	d024      	beq.n	80092f2 <_strtod_l+0x35a>
 80092a8:	2b4e      	cmp	r3, #78	; 0x4e
 80092aa:	f47f aed3 	bne.w	8009054 <_strtod_l+0xbc>
 80092ae:	499e      	ldr	r1, [pc, #632]	; (8009528 <_strtod_l+0x590>)
 80092b0:	a81d      	add	r0, sp, #116	; 0x74
 80092b2:	f002 f8b7 	bl	800b424 <__match>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f43f aecc 	beq.w	8009054 <_strtod_l+0xbc>
 80092bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b28      	cmp	r3, #40	; 0x28
 80092c2:	d12d      	bne.n	8009320 <_strtod_l+0x388>
 80092c4:	4999      	ldr	r1, [pc, #612]	; (800952c <_strtod_l+0x594>)
 80092c6:	aa20      	add	r2, sp, #128	; 0x80
 80092c8:	a81d      	add	r0, sp, #116	; 0x74
 80092ca:	f002 f8bf 	bl	800b44c <__hexnan>
 80092ce:	2805      	cmp	r0, #5
 80092d0:	d126      	bne.n	8009320 <_strtod_l+0x388>
 80092d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092d4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80092d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80092dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80092e0:	e69c      	b.n	800901c <_strtod_l+0x84>
 80092e2:	210a      	movs	r1, #10
 80092e4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80092e8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80092ec:	e7b9      	b.n	8009262 <_strtod_l+0x2ca>
 80092ee:	2b6e      	cmp	r3, #110	; 0x6e
 80092f0:	e7db      	b.n	80092aa <_strtod_l+0x312>
 80092f2:	498f      	ldr	r1, [pc, #572]	; (8009530 <_strtod_l+0x598>)
 80092f4:	a81d      	add	r0, sp, #116	; 0x74
 80092f6:	f002 f895 	bl	800b424 <__match>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	f43f aeaa 	beq.w	8009054 <_strtod_l+0xbc>
 8009300:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009302:	498c      	ldr	r1, [pc, #560]	; (8009534 <_strtod_l+0x59c>)
 8009304:	3b01      	subs	r3, #1
 8009306:	a81d      	add	r0, sp, #116	; 0x74
 8009308:	931d      	str	r3, [sp, #116]	; 0x74
 800930a:	f002 f88b 	bl	800b424 <__match>
 800930e:	b910      	cbnz	r0, 8009316 <_strtod_l+0x37e>
 8009310:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009312:	3301      	adds	r3, #1
 8009314:	931d      	str	r3, [sp, #116]	; 0x74
 8009316:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009544 <_strtod_l+0x5ac>
 800931a:	f04f 0a00 	mov.w	sl, #0
 800931e:	e67d      	b.n	800901c <_strtod_l+0x84>
 8009320:	4885      	ldr	r0, [pc, #532]	; (8009538 <_strtod_l+0x5a0>)
 8009322:	f003 f9e1 	bl	800c6e8 <nan>
 8009326:	ed8d 0b04 	vstr	d0, [sp, #16]
 800932a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800932e:	e675      	b.n	800901c <_strtod_l+0x84>
 8009330:	9b07      	ldr	r3, [sp, #28]
 8009332:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009334:	1af3      	subs	r3, r6, r3
 8009336:	2f00      	cmp	r7, #0
 8009338:	bf08      	it	eq
 800933a:	462f      	moveq	r7, r5
 800933c:	2d10      	cmp	r5, #16
 800933e:	9308      	str	r3, [sp, #32]
 8009340:	46a8      	mov	r8, r5
 8009342:	bfa8      	it	ge
 8009344:	f04f 0810 	movge.w	r8, #16
 8009348:	f7f7 f8dc 	bl	8000504 <__aeabi_ui2d>
 800934c:	2d09      	cmp	r5, #9
 800934e:	4682      	mov	sl, r0
 8009350:	468b      	mov	fp, r1
 8009352:	dd13      	ble.n	800937c <_strtod_l+0x3e4>
 8009354:	4b79      	ldr	r3, [pc, #484]	; (800953c <_strtod_l+0x5a4>)
 8009356:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800935a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800935e:	f7f7 f94b 	bl	80005f8 <__aeabi_dmul>
 8009362:	4682      	mov	sl, r0
 8009364:	4648      	mov	r0, r9
 8009366:	468b      	mov	fp, r1
 8009368:	f7f7 f8cc 	bl	8000504 <__aeabi_ui2d>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4650      	mov	r0, sl
 8009372:	4659      	mov	r1, fp
 8009374:	f7f6 ff8a 	bl	800028c <__adddf3>
 8009378:	4682      	mov	sl, r0
 800937a:	468b      	mov	fp, r1
 800937c:	2d0f      	cmp	r5, #15
 800937e:	dc38      	bgt.n	80093f2 <_strtod_l+0x45a>
 8009380:	9b08      	ldr	r3, [sp, #32]
 8009382:	2b00      	cmp	r3, #0
 8009384:	f43f ae4a 	beq.w	800901c <_strtod_l+0x84>
 8009388:	dd24      	ble.n	80093d4 <_strtod_l+0x43c>
 800938a:	2b16      	cmp	r3, #22
 800938c:	dc0b      	bgt.n	80093a6 <_strtod_l+0x40e>
 800938e:	4d6b      	ldr	r5, [pc, #428]	; (800953c <_strtod_l+0x5a4>)
 8009390:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009394:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009398:	4652      	mov	r2, sl
 800939a:	465b      	mov	r3, fp
 800939c:	f7f7 f92c 	bl	80005f8 <__aeabi_dmul>
 80093a0:	4682      	mov	sl, r0
 80093a2:	468b      	mov	fp, r1
 80093a4:	e63a      	b.n	800901c <_strtod_l+0x84>
 80093a6:	9a08      	ldr	r2, [sp, #32]
 80093a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80093ac:	4293      	cmp	r3, r2
 80093ae:	db20      	blt.n	80093f2 <_strtod_l+0x45a>
 80093b0:	4c62      	ldr	r4, [pc, #392]	; (800953c <_strtod_l+0x5a4>)
 80093b2:	f1c5 050f 	rsb	r5, r5, #15
 80093b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80093ba:	4652      	mov	r2, sl
 80093bc:	465b      	mov	r3, fp
 80093be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093c2:	f7f7 f919 	bl	80005f8 <__aeabi_dmul>
 80093c6:	9b08      	ldr	r3, [sp, #32]
 80093c8:	1b5d      	subs	r5, r3, r5
 80093ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80093ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80093d2:	e7e3      	b.n	800939c <_strtod_l+0x404>
 80093d4:	9b08      	ldr	r3, [sp, #32]
 80093d6:	3316      	adds	r3, #22
 80093d8:	db0b      	blt.n	80093f2 <_strtod_l+0x45a>
 80093da:	9b07      	ldr	r3, [sp, #28]
 80093dc:	4a57      	ldr	r2, [pc, #348]	; (800953c <_strtod_l+0x5a4>)
 80093de:	1b9e      	subs	r6, r3, r6
 80093e0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80093e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093e8:	4650      	mov	r0, sl
 80093ea:	4659      	mov	r1, fp
 80093ec:	f7f7 fa2e 	bl	800084c <__aeabi_ddiv>
 80093f0:	e7d6      	b.n	80093a0 <_strtod_l+0x408>
 80093f2:	9b08      	ldr	r3, [sp, #32]
 80093f4:	eba5 0808 	sub.w	r8, r5, r8
 80093f8:	4498      	add	r8, r3
 80093fa:	f1b8 0f00 	cmp.w	r8, #0
 80093fe:	dd71      	ble.n	80094e4 <_strtod_l+0x54c>
 8009400:	f018 030f 	ands.w	r3, r8, #15
 8009404:	d00a      	beq.n	800941c <_strtod_l+0x484>
 8009406:	494d      	ldr	r1, [pc, #308]	; (800953c <_strtod_l+0x5a4>)
 8009408:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800940c:	4652      	mov	r2, sl
 800940e:	465b      	mov	r3, fp
 8009410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009414:	f7f7 f8f0 	bl	80005f8 <__aeabi_dmul>
 8009418:	4682      	mov	sl, r0
 800941a:	468b      	mov	fp, r1
 800941c:	f038 080f 	bics.w	r8, r8, #15
 8009420:	d04d      	beq.n	80094be <_strtod_l+0x526>
 8009422:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009426:	dd22      	ble.n	800946e <_strtod_l+0x4d6>
 8009428:	2500      	movs	r5, #0
 800942a:	462e      	mov	r6, r5
 800942c:	9509      	str	r5, [sp, #36]	; 0x24
 800942e:	9507      	str	r5, [sp, #28]
 8009430:	2322      	movs	r3, #34	; 0x22
 8009432:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009544 <_strtod_l+0x5ac>
 8009436:	6023      	str	r3, [r4, #0]
 8009438:	f04f 0a00 	mov.w	sl, #0
 800943c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800943e:	2b00      	cmp	r3, #0
 8009440:	f43f adec 	beq.w	800901c <_strtod_l+0x84>
 8009444:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009446:	4620      	mov	r0, r4
 8009448:	f002 f962 	bl	800b710 <_Bfree>
 800944c:	9907      	ldr	r1, [sp, #28]
 800944e:	4620      	mov	r0, r4
 8009450:	f002 f95e 	bl	800b710 <_Bfree>
 8009454:	4631      	mov	r1, r6
 8009456:	4620      	mov	r0, r4
 8009458:	f002 f95a 	bl	800b710 <_Bfree>
 800945c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800945e:	4620      	mov	r0, r4
 8009460:	f002 f956 	bl	800b710 <_Bfree>
 8009464:	4629      	mov	r1, r5
 8009466:	4620      	mov	r0, r4
 8009468:	f002 f952 	bl	800b710 <_Bfree>
 800946c:	e5d6      	b.n	800901c <_strtod_l+0x84>
 800946e:	2300      	movs	r3, #0
 8009470:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009474:	4650      	mov	r0, sl
 8009476:	4659      	mov	r1, fp
 8009478:	4699      	mov	r9, r3
 800947a:	f1b8 0f01 	cmp.w	r8, #1
 800947e:	dc21      	bgt.n	80094c4 <_strtod_l+0x52c>
 8009480:	b10b      	cbz	r3, 8009486 <_strtod_l+0x4ee>
 8009482:	4682      	mov	sl, r0
 8009484:	468b      	mov	fp, r1
 8009486:	4b2e      	ldr	r3, [pc, #184]	; (8009540 <_strtod_l+0x5a8>)
 8009488:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800948c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009490:	4652      	mov	r2, sl
 8009492:	465b      	mov	r3, fp
 8009494:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009498:	f7f7 f8ae 	bl	80005f8 <__aeabi_dmul>
 800949c:	4b29      	ldr	r3, [pc, #164]	; (8009544 <_strtod_l+0x5ac>)
 800949e:	460a      	mov	r2, r1
 80094a0:	400b      	ands	r3, r1
 80094a2:	4929      	ldr	r1, [pc, #164]	; (8009548 <_strtod_l+0x5b0>)
 80094a4:	428b      	cmp	r3, r1
 80094a6:	4682      	mov	sl, r0
 80094a8:	d8be      	bhi.n	8009428 <_strtod_l+0x490>
 80094aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80094ae:	428b      	cmp	r3, r1
 80094b0:	bf86      	itte	hi
 80094b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800954c <_strtod_l+0x5b4>
 80094b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80094ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80094be:	2300      	movs	r3, #0
 80094c0:	9304      	str	r3, [sp, #16]
 80094c2:	e081      	b.n	80095c8 <_strtod_l+0x630>
 80094c4:	f018 0f01 	tst.w	r8, #1
 80094c8:	d007      	beq.n	80094da <_strtod_l+0x542>
 80094ca:	4b1d      	ldr	r3, [pc, #116]	; (8009540 <_strtod_l+0x5a8>)
 80094cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f7f7 f890 	bl	80005f8 <__aeabi_dmul>
 80094d8:	2301      	movs	r3, #1
 80094da:	f109 0901 	add.w	r9, r9, #1
 80094de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80094e2:	e7ca      	b.n	800947a <_strtod_l+0x4e2>
 80094e4:	d0eb      	beq.n	80094be <_strtod_l+0x526>
 80094e6:	f1c8 0800 	rsb	r8, r8, #0
 80094ea:	f018 020f 	ands.w	r2, r8, #15
 80094ee:	d00a      	beq.n	8009506 <_strtod_l+0x56e>
 80094f0:	4b12      	ldr	r3, [pc, #72]	; (800953c <_strtod_l+0x5a4>)
 80094f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094f6:	4650      	mov	r0, sl
 80094f8:	4659      	mov	r1, fp
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	f7f7 f9a5 	bl	800084c <__aeabi_ddiv>
 8009502:	4682      	mov	sl, r0
 8009504:	468b      	mov	fp, r1
 8009506:	ea5f 1828 	movs.w	r8, r8, asr #4
 800950a:	d0d8      	beq.n	80094be <_strtod_l+0x526>
 800950c:	f1b8 0f1f 	cmp.w	r8, #31
 8009510:	dd1e      	ble.n	8009550 <_strtod_l+0x5b8>
 8009512:	2500      	movs	r5, #0
 8009514:	462e      	mov	r6, r5
 8009516:	9509      	str	r5, [sp, #36]	; 0x24
 8009518:	9507      	str	r5, [sp, #28]
 800951a:	2322      	movs	r3, #34	; 0x22
 800951c:	f04f 0a00 	mov.w	sl, #0
 8009520:	f04f 0b00 	mov.w	fp, #0
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	e789      	b.n	800943c <_strtod_l+0x4a4>
 8009528:	0800cb15 	.word	0x0800cb15
 800952c:	0800cb58 	.word	0x0800cb58
 8009530:	0800cb0d 	.word	0x0800cb0d
 8009534:	0800cc9c 	.word	0x0800cc9c
 8009538:	0800cfb8 	.word	0x0800cfb8
 800953c:	0800ce98 	.word	0x0800ce98
 8009540:	0800ce70 	.word	0x0800ce70
 8009544:	7ff00000 	.word	0x7ff00000
 8009548:	7ca00000 	.word	0x7ca00000
 800954c:	7fefffff 	.word	0x7fefffff
 8009550:	f018 0310 	ands.w	r3, r8, #16
 8009554:	bf18      	it	ne
 8009556:	236a      	movne	r3, #106	; 0x6a
 8009558:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009910 <_strtod_l+0x978>
 800955c:	9304      	str	r3, [sp, #16]
 800955e:	4650      	mov	r0, sl
 8009560:	4659      	mov	r1, fp
 8009562:	2300      	movs	r3, #0
 8009564:	f018 0f01 	tst.w	r8, #1
 8009568:	d004      	beq.n	8009574 <_strtod_l+0x5dc>
 800956a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800956e:	f7f7 f843 	bl	80005f8 <__aeabi_dmul>
 8009572:	2301      	movs	r3, #1
 8009574:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009578:	f109 0908 	add.w	r9, r9, #8
 800957c:	d1f2      	bne.n	8009564 <_strtod_l+0x5cc>
 800957e:	b10b      	cbz	r3, 8009584 <_strtod_l+0x5ec>
 8009580:	4682      	mov	sl, r0
 8009582:	468b      	mov	fp, r1
 8009584:	9b04      	ldr	r3, [sp, #16]
 8009586:	b1bb      	cbz	r3, 80095b8 <_strtod_l+0x620>
 8009588:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800958c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009590:	2b00      	cmp	r3, #0
 8009592:	4659      	mov	r1, fp
 8009594:	dd10      	ble.n	80095b8 <_strtod_l+0x620>
 8009596:	2b1f      	cmp	r3, #31
 8009598:	f340 8128 	ble.w	80097ec <_strtod_l+0x854>
 800959c:	2b34      	cmp	r3, #52	; 0x34
 800959e:	bfde      	ittt	le
 80095a0:	3b20      	suble	r3, #32
 80095a2:	f04f 32ff 	movle.w	r2, #4294967295
 80095a6:	fa02 f303 	lslle.w	r3, r2, r3
 80095aa:	f04f 0a00 	mov.w	sl, #0
 80095ae:	bfcc      	ite	gt
 80095b0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80095b4:	ea03 0b01 	andle.w	fp, r3, r1
 80095b8:	2200      	movs	r2, #0
 80095ba:	2300      	movs	r3, #0
 80095bc:	4650      	mov	r0, sl
 80095be:	4659      	mov	r1, fp
 80095c0:	f7f7 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1a4      	bne.n	8009512 <_strtod_l+0x57a>
 80095c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095ce:	462b      	mov	r3, r5
 80095d0:	463a      	mov	r2, r7
 80095d2:	4620      	mov	r0, r4
 80095d4:	f002 f908 	bl	800b7e8 <__s2b>
 80095d8:	9009      	str	r0, [sp, #36]	; 0x24
 80095da:	2800      	cmp	r0, #0
 80095dc:	f43f af24 	beq.w	8009428 <_strtod_l+0x490>
 80095e0:	9b07      	ldr	r3, [sp, #28]
 80095e2:	1b9e      	subs	r6, r3, r6
 80095e4:	9b08      	ldr	r3, [sp, #32]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	bfb4      	ite	lt
 80095ea:	4633      	movlt	r3, r6
 80095ec:	2300      	movge	r3, #0
 80095ee:	9310      	str	r3, [sp, #64]	; 0x40
 80095f0:	9b08      	ldr	r3, [sp, #32]
 80095f2:	2500      	movs	r5, #0
 80095f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80095f8:	9318      	str	r3, [sp, #96]	; 0x60
 80095fa:	462e      	mov	r6, r5
 80095fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fe:	4620      	mov	r0, r4
 8009600:	6859      	ldr	r1, [r3, #4]
 8009602:	f002 f845 	bl	800b690 <_Balloc>
 8009606:	9007      	str	r0, [sp, #28]
 8009608:	2800      	cmp	r0, #0
 800960a:	f43f af11 	beq.w	8009430 <_strtod_l+0x498>
 800960e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009610:	691a      	ldr	r2, [r3, #16]
 8009612:	3202      	adds	r2, #2
 8009614:	f103 010c 	add.w	r1, r3, #12
 8009618:	0092      	lsls	r2, r2, #2
 800961a:	300c      	adds	r0, #12
 800961c:	f7fe fd5c 	bl	80080d8 <memcpy>
 8009620:	ec4b ab10 	vmov	d0, sl, fp
 8009624:	aa20      	add	r2, sp, #128	; 0x80
 8009626:	a91f      	add	r1, sp, #124	; 0x7c
 8009628:	4620      	mov	r0, r4
 800962a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800962e:	f002 fc17 	bl	800be60 <__d2b>
 8009632:	901e      	str	r0, [sp, #120]	; 0x78
 8009634:	2800      	cmp	r0, #0
 8009636:	f43f aefb 	beq.w	8009430 <_strtod_l+0x498>
 800963a:	2101      	movs	r1, #1
 800963c:	4620      	mov	r0, r4
 800963e:	f002 f96d 	bl	800b91c <__i2b>
 8009642:	4606      	mov	r6, r0
 8009644:	2800      	cmp	r0, #0
 8009646:	f43f aef3 	beq.w	8009430 <_strtod_l+0x498>
 800964a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800964c:	9904      	ldr	r1, [sp, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	bfab      	itete	ge
 8009652:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009654:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009656:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009658:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800965c:	bfac      	ite	ge
 800965e:	eb03 0902 	addge.w	r9, r3, r2
 8009662:	1ad7      	sublt	r7, r2, r3
 8009664:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009666:	eba3 0801 	sub.w	r8, r3, r1
 800966a:	4490      	add	r8, r2
 800966c:	4ba3      	ldr	r3, [pc, #652]	; (80098fc <_strtod_l+0x964>)
 800966e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009672:	4598      	cmp	r8, r3
 8009674:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009678:	f280 80cc 	bge.w	8009814 <_strtod_l+0x87c>
 800967c:	eba3 0308 	sub.w	r3, r3, r8
 8009680:	2b1f      	cmp	r3, #31
 8009682:	eba2 0203 	sub.w	r2, r2, r3
 8009686:	f04f 0101 	mov.w	r1, #1
 800968a:	f300 80b6 	bgt.w	80097fa <_strtod_l+0x862>
 800968e:	fa01 f303 	lsl.w	r3, r1, r3
 8009692:	9311      	str	r3, [sp, #68]	; 0x44
 8009694:	2300      	movs	r3, #0
 8009696:	930c      	str	r3, [sp, #48]	; 0x30
 8009698:	eb09 0802 	add.w	r8, r9, r2
 800969c:	9b04      	ldr	r3, [sp, #16]
 800969e:	45c1      	cmp	r9, r8
 80096a0:	4417      	add	r7, r2
 80096a2:	441f      	add	r7, r3
 80096a4:	464b      	mov	r3, r9
 80096a6:	bfa8      	it	ge
 80096a8:	4643      	movge	r3, r8
 80096aa:	42bb      	cmp	r3, r7
 80096ac:	bfa8      	it	ge
 80096ae:	463b      	movge	r3, r7
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	bfc2      	ittt	gt
 80096b4:	eba8 0803 	subgt.w	r8, r8, r3
 80096b8:	1aff      	subgt	r7, r7, r3
 80096ba:	eba9 0903 	subgt.w	r9, r9, r3
 80096be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dd17      	ble.n	80096f4 <_strtod_l+0x75c>
 80096c4:	4631      	mov	r1, r6
 80096c6:	461a      	mov	r2, r3
 80096c8:	4620      	mov	r0, r4
 80096ca:	f002 f9e3 	bl	800ba94 <__pow5mult>
 80096ce:	4606      	mov	r6, r0
 80096d0:	2800      	cmp	r0, #0
 80096d2:	f43f aead 	beq.w	8009430 <_strtod_l+0x498>
 80096d6:	4601      	mov	r1, r0
 80096d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80096da:	4620      	mov	r0, r4
 80096dc:	f002 f934 	bl	800b948 <__multiply>
 80096e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80096e2:	2800      	cmp	r0, #0
 80096e4:	f43f aea4 	beq.w	8009430 <_strtod_l+0x498>
 80096e8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80096ea:	4620      	mov	r0, r4
 80096ec:	f002 f810 	bl	800b710 <_Bfree>
 80096f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096f2:	931e      	str	r3, [sp, #120]	; 0x78
 80096f4:	f1b8 0f00 	cmp.w	r8, #0
 80096f8:	f300 8091 	bgt.w	800981e <_strtod_l+0x886>
 80096fc:	9b08      	ldr	r3, [sp, #32]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	dd08      	ble.n	8009714 <_strtod_l+0x77c>
 8009702:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009704:	9907      	ldr	r1, [sp, #28]
 8009706:	4620      	mov	r0, r4
 8009708:	f002 f9c4 	bl	800ba94 <__pow5mult>
 800970c:	9007      	str	r0, [sp, #28]
 800970e:	2800      	cmp	r0, #0
 8009710:	f43f ae8e 	beq.w	8009430 <_strtod_l+0x498>
 8009714:	2f00      	cmp	r7, #0
 8009716:	dd08      	ble.n	800972a <_strtod_l+0x792>
 8009718:	9907      	ldr	r1, [sp, #28]
 800971a:	463a      	mov	r2, r7
 800971c:	4620      	mov	r0, r4
 800971e:	f002 fa13 	bl	800bb48 <__lshift>
 8009722:	9007      	str	r0, [sp, #28]
 8009724:	2800      	cmp	r0, #0
 8009726:	f43f ae83 	beq.w	8009430 <_strtod_l+0x498>
 800972a:	f1b9 0f00 	cmp.w	r9, #0
 800972e:	dd08      	ble.n	8009742 <_strtod_l+0x7aa>
 8009730:	4631      	mov	r1, r6
 8009732:	464a      	mov	r2, r9
 8009734:	4620      	mov	r0, r4
 8009736:	f002 fa07 	bl	800bb48 <__lshift>
 800973a:	4606      	mov	r6, r0
 800973c:	2800      	cmp	r0, #0
 800973e:	f43f ae77 	beq.w	8009430 <_strtod_l+0x498>
 8009742:	9a07      	ldr	r2, [sp, #28]
 8009744:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009746:	4620      	mov	r0, r4
 8009748:	f002 fa86 	bl	800bc58 <__mdiff>
 800974c:	4605      	mov	r5, r0
 800974e:	2800      	cmp	r0, #0
 8009750:	f43f ae6e 	beq.w	8009430 <_strtod_l+0x498>
 8009754:	68c3      	ldr	r3, [r0, #12]
 8009756:	930f      	str	r3, [sp, #60]	; 0x3c
 8009758:	2300      	movs	r3, #0
 800975a:	60c3      	str	r3, [r0, #12]
 800975c:	4631      	mov	r1, r6
 800975e:	f002 fa5f 	bl	800bc20 <__mcmp>
 8009762:	2800      	cmp	r0, #0
 8009764:	da65      	bge.n	8009832 <_strtod_l+0x89a>
 8009766:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009768:	ea53 030a 	orrs.w	r3, r3, sl
 800976c:	f040 8087 	bne.w	800987e <_strtod_l+0x8e6>
 8009770:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009774:	2b00      	cmp	r3, #0
 8009776:	f040 8082 	bne.w	800987e <_strtod_l+0x8e6>
 800977a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800977e:	0d1b      	lsrs	r3, r3, #20
 8009780:	051b      	lsls	r3, r3, #20
 8009782:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009786:	d97a      	bls.n	800987e <_strtod_l+0x8e6>
 8009788:	696b      	ldr	r3, [r5, #20]
 800978a:	b913      	cbnz	r3, 8009792 <_strtod_l+0x7fa>
 800978c:	692b      	ldr	r3, [r5, #16]
 800978e:	2b01      	cmp	r3, #1
 8009790:	dd75      	ble.n	800987e <_strtod_l+0x8e6>
 8009792:	4629      	mov	r1, r5
 8009794:	2201      	movs	r2, #1
 8009796:	4620      	mov	r0, r4
 8009798:	f002 f9d6 	bl	800bb48 <__lshift>
 800979c:	4631      	mov	r1, r6
 800979e:	4605      	mov	r5, r0
 80097a0:	f002 fa3e 	bl	800bc20 <__mcmp>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	dd6a      	ble.n	800987e <_strtod_l+0x8e6>
 80097a8:	9904      	ldr	r1, [sp, #16]
 80097aa:	4a55      	ldr	r2, [pc, #340]	; (8009900 <_strtod_l+0x968>)
 80097ac:	465b      	mov	r3, fp
 80097ae:	2900      	cmp	r1, #0
 80097b0:	f000 8085 	beq.w	80098be <_strtod_l+0x926>
 80097b4:	ea02 010b 	and.w	r1, r2, fp
 80097b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80097bc:	dc7f      	bgt.n	80098be <_strtod_l+0x926>
 80097be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80097c2:	f77f aeaa 	ble.w	800951a <_strtod_l+0x582>
 80097c6:	4a4f      	ldr	r2, [pc, #316]	; (8009904 <_strtod_l+0x96c>)
 80097c8:	2300      	movs	r3, #0
 80097ca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80097ce:	4650      	mov	r0, sl
 80097d0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80097d4:	4659      	mov	r1, fp
 80097d6:	f7f6 ff0f 	bl	80005f8 <__aeabi_dmul>
 80097da:	460b      	mov	r3, r1
 80097dc:	4303      	orrs	r3, r0
 80097de:	bf08      	it	eq
 80097e0:	2322      	moveq	r3, #34	; 0x22
 80097e2:	4682      	mov	sl, r0
 80097e4:	468b      	mov	fp, r1
 80097e6:	bf08      	it	eq
 80097e8:	6023      	streq	r3, [r4, #0]
 80097ea:	e62b      	b.n	8009444 <_strtod_l+0x4ac>
 80097ec:	f04f 32ff 	mov.w	r2, #4294967295
 80097f0:	fa02 f303 	lsl.w	r3, r2, r3
 80097f4:	ea03 0a0a 	and.w	sl, r3, sl
 80097f8:	e6de      	b.n	80095b8 <_strtod_l+0x620>
 80097fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80097fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009802:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009806:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800980a:	fa01 f308 	lsl.w	r3, r1, r8
 800980e:	930c      	str	r3, [sp, #48]	; 0x30
 8009810:	9111      	str	r1, [sp, #68]	; 0x44
 8009812:	e741      	b.n	8009698 <_strtod_l+0x700>
 8009814:	2300      	movs	r3, #0
 8009816:	930c      	str	r3, [sp, #48]	; 0x30
 8009818:	2301      	movs	r3, #1
 800981a:	9311      	str	r3, [sp, #68]	; 0x44
 800981c:	e73c      	b.n	8009698 <_strtod_l+0x700>
 800981e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009820:	4642      	mov	r2, r8
 8009822:	4620      	mov	r0, r4
 8009824:	f002 f990 	bl	800bb48 <__lshift>
 8009828:	901e      	str	r0, [sp, #120]	; 0x78
 800982a:	2800      	cmp	r0, #0
 800982c:	f47f af66 	bne.w	80096fc <_strtod_l+0x764>
 8009830:	e5fe      	b.n	8009430 <_strtod_l+0x498>
 8009832:	465f      	mov	r7, fp
 8009834:	d16e      	bne.n	8009914 <_strtod_l+0x97c>
 8009836:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009838:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800983c:	b342      	cbz	r2, 8009890 <_strtod_l+0x8f8>
 800983e:	4a32      	ldr	r2, [pc, #200]	; (8009908 <_strtod_l+0x970>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d128      	bne.n	8009896 <_strtod_l+0x8fe>
 8009844:	9b04      	ldr	r3, [sp, #16]
 8009846:	4650      	mov	r0, sl
 8009848:	b1eb      	cbz	r3, 8009886 <_strtod_l+0x8ee>
 800984a:	4a2d      	ldr	r2, [pc, #180]	; (8009900 <_strtod_l+0x968>)
 800984c:	403a      	ands	r2, r7
 800984e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009852:	f04f 31ff 	mov.w	r1, #4294967295
 8009856:	d819      	bhi.n	800988c <_strtod_l+0x8f4>
 8009858:	0d12      	lsrs	r2, r2, #20
 800985a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800985e:	fa01 f303 	lsl.w	r3, r1, r3
 8009862:	4298      	cmp	r0, r3
 8009864:	d117      	bne.n	8009896 <_strtod_l+0x8fe>
 8009866:	4b29      	ldr	r3, [pc, #164]	; (800990c <_strtod_l+0x974>)
 8009868:	429f      	cmp	r7, r3
 800986a:	d102      	bne.n	8009872 <_strtod_l+0x8da>
 800986c:	3001      	adds	r0, #1
 800986e:	f43f addf 	beq.w	8009430 <_strtod_l+0x498>
 8009872:	4b23      	ldr	r3, [pc, #140]	; (8009900 <_strtod_l+0x968>)
 8009874:	403b      	ands	r3, r7
 8009876:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800987a:	f04f 0a00 	mov.w	sl, #0
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1a0      	bne.n	80097c6 <_strtod_l+0x82e>
 8009884:	e5de      	b.n	8009444 <_strtod_l+0x4ac>
 8009886:	f04f 33ff 	mov.w	r3, #4294967295
 800988a:	e7ea      	b.n	8009862 <_strtod_l+0x8ca>
 800988c:	460b      	mov	r3, r1
 800988e:	e7e8      	b.n	8009862 <_strtod_l+0x8ca>
 8009890:	ea53 030a 	orrs.w	r3, r3, sl
 8009894:	d088      	beq.n	80097a8 <_strtod_l+0x810>
 8009896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009898:	b1db      	cbz	r3, 80098d2 <_strtod_l+0x93a>
 800989a:	423b      	tst	r3, r7
 800989c:	d0ef      	beq.n	800987e <_strtod_l+0x8e6>
 800989e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098a0:	9a04      	ldr	r2, [sp, #16]
 80098a2:	4650      	mov	r0, sl
 80098a4:	4659      	mov	r1, fp
 80098a6:	b1c3      	cbz	r3, 80098da <_strtod_l+0x942>
 80098a8:	f7ff fb5a 	bl	8008f60 <sulp>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098b4:	f7f6 fcea 	bl	800028c <__adddf3>
 80098b8:	4682      	mov	sl, r0
 80098ba:	468b      	mov	fp, r1
 80098bc:	e7df      	b.n	800987e <_strtod_l+0x8e6>
 80098be:	4013      	ands	r3, r2
 80098c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80098c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80098c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80098cc:	f04f 3aff 	mov.w	sl, #4294967295
 80098d0:	e7d5      	b.n	800987e <_strtod_l+0x8e6>
 80098d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098d4:	ea13 0f0a 	tst.w	r3, sl
 80098d8:	e7e0      	b.n	800989c <_strtod_l+0x904>
 80098da:	f7ff fb41 	bl	8008f60 <sulp>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098e6:	f7f6 fccf 	bl	8000288 <__aeabi_dsub>
 80098ea:	2200      	movs	r2, #0
 80098ec:	2300      	movs	r3, #0
 80098ee:	4682      	mov	sl, r0
 80098f0:	468b      	mov	fp, r1
 80098f2:	f7f7 f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d0c1      	beq.n	800987e <_strtod_l+0x8e6>
 80098fa:	e60e      	b.n	800951a <_strtod_l+0x582>
 80098fc:	fffffc02 	.word	0xfffffc02
 8009900:	7ff00000 	.word	0x7ff00000
 8009904:	39500000 	.word	0x39500000
 8009908:	000fffff 	.word	0x000fffff
 800990c:	7fefffff 	.word	0x7fefffff
 8009910:	0800cb70 	.word	0x0800cb70
 8009914:	4631      	mov	r1, r6
 8009916:	4628      	mov	r0, r5
 8009918:	f002 fafe 	bl	800bf18 <__ratio>
 800991c:	ec59 8b10 	vmov	r8, r9, d0
 8009920:	ee10 0a10 	vmov	r0, s0
 8009924:	2200      	movs	r2, #0
 8009926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800992a:	4649      	mov	r1, r9
 800992c:	f7f7 f8e0 	bl	8000af0 <__aeabi_dcmple>
 8009930:	2800      	cmp	r0, #0
 8009932:	d07c      	beq.n	8009a2e <_strtod_l+0xa96>
 8009934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009936:	2b00      	cmp	r3, #0
 8009938:	d04c      	beq.n	80099d4 <_strtod_l+0xa3c>
 800993a:	4b95      	ldr	r3, [pc, #596]	; (8009b90 <_strtod_l+0xbf8>)
 800993c:	2200      	movs	r2, #0
 800993e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009942:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009b90 <_strtod_l+0xbf8>
 8009946:	f04f 0800 	mov.w	r8, #0
 800994a:	4b92      	ldr	r3, [pc, #584]	; (8009b94 <_strtod_l+0xbfc>)
 800994c:	403b      	ands	r3, r7
 800994e:	9311      	str	r3, [sp, #68]	; 0x44
 8009950:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009952:	4b91      	ldr	r3, [pc, #580]	; (8009b98 <_strtod_l+0xc00>)
 8009954:	429a      	cmp	r2, r3
 8009956:	f040 80b2 	bne.w	8009abe <_strtod_l+0xb26>
 800995a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800995e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009962:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009966:	ec4b ab10 	vmov	d0, sl, fp
 800996a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800996e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009972:	f002 f9f9 	bl	800bd68 <__ulp>
 8009976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800997a:	ec53 2b10 	vmov	r2, r3, d0
 800997e:	f7f6 fe3b 	bl	80005f8 <__aeabi_dmul>
 8009982:	4652      	mov	r2, sl
 8009984:	465b      	mov	r3, fp
 8009986:	f7f6 fc81 	bl	800028c <__adddf3>
 800998a:	460b      	mov	r3, r1
 800998c:	4981      	ldr	r1, [pc, #516]	; (8009b94 <_strtod_l+0xbfc>)
 800998e:	4a83      	ldr	r2, [pc, #524]	; (8009b9c <_strtod_l+0xc04>)
 8009990:	4019      	ands	r1, r3
 8009992:	4291      	cmp	r1, r2
 8009994:	4682      	mov	sl, r0
 8009996:	d95e      	bls.n	8009a56 <_strtod_l+0xabe>
 8009998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800999a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800999e:	4293      	cmp	r3, r2
 80099a0:	d103      	bne.n	80099aa <_strtod_l+0xa12>
 80099a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a4:	3301      	adds	r3, #1
 80099a6:	f43f ad43 	beq.w	8009430 <_strtod_l+0x498>
 80099aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009ba8 <_strtod_l+0xc10>
 80099ae:	f04f 3aff 	mov.w	sl, #4294967295
 80099b2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099b4:	4620      	mov	r0, r4
 80099b6:	f001 feab 	bl	800b710 <_Bfree>
 80099ba:	9907      	ldr	r1, [sp, #28]
 80099bc:	4620      	mov	r0, r4
 80099be:	f001 fea7 	bl	800b710 <_Bfree>
 80099c2:	4631      	mov	r1, r6
 80099c4:	4620      	mov	r0, r4
 80099c6:	f001 fea3 	bl	800b710 <_Bfree>
 80099ca:	4629      	mov	r1, r5
 80099cc:	4620      	mov	r0, r4
 80099ce:	f001 fe9f 	bl	800b710 <_Bfree>
 80099d2:	e613      	b.n	80095fc <_strtod_l+0x664>
 80099d4:	f1ba 0f00 	cmp.w	sl, #0
 80099d8:	d11b      	bne.n	8009a12 <_strtod_l+0xa7a>
 80099da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099de:	b9f3      	cbnz	r3, 8009a1e <_strtod_l+0xa86>
 80099e0:	4b6b      	ldr	r3, [pc, #428]	; (8009b90 <_strtod_l+0xbf8>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	4640      	mov	r0, r8
 80099e6:	4649      	mov	r1, r9
 80099e8:	f7f7 f878 	bl	8000adc <__aeabi_dcmplt>
 80099ec:	b9d0      	cbnz	r0, 8009a24 <_strtod_l+0xa8c>
 80099ee:	4640      	mov	r0, r8
 80099f0:	4649      	mov	r1, r9
 80099f2:	4b6b      	ldr	r3, [pc, #428]	; (8009ba0 <_strtod_l+0xc08>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	f7f6 fdff 	bl	80005f8 <__aeabi_dmul>
 80099fa:	4680      	mov	r8, r0
 80099fc:	4689      	mov	r9, r1
 80099fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009a02:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009a06:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a08:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009a0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009a10:	e79b      	b.n	800994a <_strtod_l+0x9b2>
 8009a12:	f1ba 0f01 	cmp.w	sl, #1
 8009a16:	d102      	bne.n	8009a1e <_strtod_l+0xa86>
 8009a18:	2f00      	cmp	r7, #0
 8009a1a:	f43f ad7e 	beq.w	800951a <_strtod_l+0x582>
 8009a1e:	4b61      	ldr	r3, [pc, #388]	; (8009ba4 <_strtod_l+0xc0c>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	e78c      	b.n	800993e <_strtod_l+0x9a6>
 8009a24:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ba0 <_strtod_l+0xc08>
 8009a28:	f04f 0800 	mov.w	r8, #0
 8009a2c:	e7e7      	b.n	80099fe <_strtod_l+0xa66>
 8009a2e:	4b5c      	ldr	r3, [pc, #368]	; (8009ba0 <_strtod_l+0xc08>)
 8009a30:	4640      	mov	r0, r8
 8009a32:	4649      	mov	r1, r9
 8009a34:	2200      	movs	r2, #0
 8009a36:	f7f6 fddf 	bl	80005f8 <__aeabi_dmul>
 8009a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a3c:	4680      	mov	r8, r0
 8009a3e:	4689      	mov	r9, r1
 8009a40:	b933      	cbnz	r3, 8009a50 <_strtod_l+0xab8>
 8009a42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a46:	9012      	str	r0, [sp, #72]	; 0x48
 8009a48:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a4a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009a4e:	e7dd      	b.n	8009a0c <_strtod_l+0xa74>
 8009a50:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009a54:	e7f9      	b.n	8009a4a <_strtod_l+0xab2>
 8009a56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009a5a:	9b04      	ldr	r3, [sp, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1a8      	bne.n	80099b2 <_strtod_l+0xa1a>
 8009a60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009a66:	0d1b      	lsrs	r3, r3, #20
 8009a68:	051b      	lsls	r3, r3, #20
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d1a1      	bne.n	80099b2 <_strtod_l+0xa1a>
 8009a6e:	4640      	mov	r0, r8
 8009a70:	4649      	mov	r1, r9
 8009a72:	f7f7 f921 	bl	8000cb8 <__aeabi_d2lz>
 8009a76:	f7f6 fd91 	bl	800059c <__aeabi_l2d>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4640      	mov	r0, r8
 8009a80:	4649      	mov	r1, r9
 8009a82:	f7f6 fc01 	bl	8000288 <__aeabi_dsub>
 8009a86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a8c:	ea43 030a 	orr.w	r3, r3, sl
 8009a90:	4313      	orrs	r3, r2
 8009a92:	4680      	mov	r8, r0
 8009a94:	4689      	mov	r9, r1
 8009a96:	d053      	beq.n	8009b40 <_strtod_l+0xba8>
 8009a98:	a335      	add	r3, pc, #212	; (adr r3, 8009b70 <_strtod_l+0xbd8>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f7f7 f81d 	bl	8000adc <__aeabi_dcmplt>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	f47f acce 	bne.w	8009444 <_strtod_l+0x4ac>
 8009aa8:	a333      	add	r3, pc, #204	; (adr r3, 8009b78 <_strtod_l+0xbe0>)
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	f7f7 f831 	bl	8000b18 <__aeabi_dcmpgt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	f43f af7b 	beq.w	80099b2 <_strtod_l+0xa1a>
 8009abc:	e4c2      	b.n	8009444 <_strtod_l+0x4ac>
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	b333      	cbz	r3, 8009b10 <_strtod_l+0xb78>
 8009ac2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ac4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ac8:	d822      	bhi.n	8009b10 <_strtod_l+0xb78>
 8009aca:	a32d      	add	r3, pc, #180	; (adr r3, 8009b80 <_strtod_l+0xbe8>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	4640      	mov	r0, r8
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	f7f7 f80c 	bl	8000af0 <__aeabi_dcmple>
 8009ad8:	b1a0      	cbz	r0, 8009b04 <_strtod_l+0xb6c>
 8009ada:	4649      	mov	r1, r9
 8009adc:	4640      	mov	r0, r8
 8009ade:	f7f7 f863 	bl	8000ba8 <__aeabi_d2uiz>
 8009ae2:	2801      	cmp	r0, #1
 8009ae4:	bf38      	it	cc
 8009ae6:	2001      	movcc	r0, #1
 8009ae8:	f7f6 fd0c 	bl	8000504 <__aeabi_ui2d>
 8009aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aee:	4680      	mov	r8, r0
 8009af0:	4689      	mov	r9, r1
 8009af2:	bb13      	cbnz	r3, 8009b3a <_strtod_l+0xba2>
 8009af4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009af8:	9014      	str	r0, [sp, #80]	; 0x50
 8009afa:	9315      	str	r3, [sp, #84]	; 0x54
 8009afc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009b00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009b08:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b0c:	1a9b      	subs	r3, r3, r2
 8009b0e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b14:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009b18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009b1c:	f002 f924 	bl	800bd68 <__ulp>
 8009b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b24:	ec53 2b10 	vmov	r2, r3, d0
 8009b28:	f7f6 fd66 	bl	80005f8 <__aeabi_dmul>
 8009b2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b30:	f7f6 fbac 	bl	800028c <__adddf3>
 8009b34:	4682      	mov	sl, r0
 8009b36:	468b      	mov	fp, r1
 8009b38:	e78f      	b.n	8009a5a <_strtod_l+0xac2>
 8009b3a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009b3e:	e7dd      	b.n	8009afc <_strtod_l+0xb64>
 8009b40:	a311      	add	r3, pc, #68	; (adr r3, 8009b88 <_strtod_l+0xbf0>)
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	f7f6 ffc9 	bl	8000adc <__aeabi_dcmplt>
 8009b4a:	e7b4      	b.n	8009ab6 <_strtod_l+0xb1e>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8009b50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	f7ff ba65 	b.w	8009024 <_strtod_l+0x8c>
 8009b5a:	2b65      	cmp	r3, #101	; 0x65
 8009b5c:	f43f ab5d 	beq.w	800921a <_strtod_l+0x282>
 8009b60:	2b45      	cmp	r3, #69	; 0x45
 8009b62:	f43f ab5a 	beq.w	800921a <_strtod_l+0x282>
 8009b66:	2201      	movs	r2, #1
 8009b68:	f7ff bb92 	b.w	8009290 <_strtod_l+0x2f8>
 8009b6c:	f3af 8000 	nop.w
 8009b70:	94a03595 	.word	0x94a03595
 8009b74:	3fdfffff 	.word	0x3fdfffff
 8009b78:	35afe535 	.word	0x35afe535
 8009b7c:	3fe00000 	.word	0x3fe00000
 8009b80:	ffc00000 	.word	0xffc00000
 8009b84:	41dfffff 	.word	0x41dfffff
 8009b88:	94a03595 	.word	0x94a03595
 8009b8c:	3fcfffff 	.word	0x3fcfffff
 8009b90:	3ff00000 	.word	0x3ff00000
 8009b94:	7ff00000 	.word	0x7ff00000
 8009b98:	7fe00000 	.word	0x7fe00000
 8009b9c:	7c9fffff 	.word	0x7c9fffff
 8009ba0:	3fe00000 	.word	0x3fe00000
 8009ba4:	bff00000 	.word	0xbff00000
 8009ba8:	7fefffff 	.word	0x7fefffff

08009bac <_strtod_r>:
 8009bac:	4b01      	ldr	r3, [pc, #4]	; (8009bb4 <_strtod_r+0x8>)
 8009bae:	f7ff b9f3 	b.w	8008f98 <_strtod_l>
 8009bb2:	bf00      	nop
 8009bb4:	20000074 	.word	0x20000074

08009bb8 <_strtol_l.isra.0>:
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbe:	d001      	beq.n	8009bc4 <_strtol_l.isra.0+0xc>
 8009bc0:	2b24      	cmp	r3, #36	; 0x24
 8009bc2:	d906      	bls.n	8009bd2 <_strtol_l.isra.0+0x1a>
 8009bc4:	f7fe fa5e 	bl	8008084 <__errno>
 8009bc8:	2316      	movs	r3, #22
 8009bca:	6003      	str	r3, [r0, #0]
 8009bcc:	2000      	movs	r0, #0
 8009bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd2:	4f3a      	ldr	r7, [pc, #232]	; (8009cbc <_strtol_l.isra.0+0x104>)
 8009bd4:	468e      	mov	lr, r1
 8009bd6:	4676      	mov	r6, lr
 8009bd8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009bdc:	5de5      	ldrb	r5, [r4, r7]
 8009bde:	f015 0508 	ands.w	r5, r5, #8
 8009be2:	d1f8      	bne.n	8009bd6 <_strtol_l.isra.0+0x1e>
 8009be4:	2c2d      	cmp	r4, #45	; 0x2d
 8009be6:	d134      	bne.n	8009c52 <_strtol_l.isra.0+0x9a>
 8009be8:	f89e 4000 	ldrb.w	r4, [lr]
 8009bec:	f04f 0801 	mov.w	r8, #1
 8009bf0:	f106 0e02 	add.w	lr, r6, #2
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d05c      	beq.n	8009cb2 <_strtol_l.isra.0+0xfa>
 8009bf8:	2b10      	cmp	r3, #16
 8009bfa:	d10c      	bne.n	8009c16 <_strtol_l.isra.0+0x5e>
 8009bfc:	2c30      	cmp	r4, #48	; 0x30
 8009bfe:	d10a      	bne.n	8009c16 <_strtol_l.isra.0+0x5e>
 8009c00:	f89e 4000 	ldrb.w	r4, [lr]
 8009c04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c08:	2c58      	cmp	r4, #88	; 0x58
 8009c0a:	d14d      	bne.n	8009ca8 <_strtol_l.isra.0+0xf0>
 8009c0c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009c10:	2310      	movs	r3, #16
 8009c12:	f10e 0e02 	add.w	lr, lr, #2
 8009c16:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009c1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c1e:	2600      	movs	r6, #0
 8009c20:	fbbc f9f3 	udiv	r9, ip, r3
 8009c24:	4635      	mov	r5, r6
 8009c26:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c2a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009c2e:	2f09      	cmp	r7, #9
 8009c30:	d818      	bhi.n	8009c64 <_strtol_l.isra.0+0xac>
 8009c32:	463c      	mov	r4, r7
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	dd24      	ble.n	8009c82 <_strtol_l.isra.0+0xca>
 8009c38:	2e00      	cmp	r6, #0
 8009c3a:	db1f      	blt.n	8009c7c <_strtol_l.isra.0+0xc4>
 8009c3c:	45a9      	cmp	r9, r5
 8009c3e:	d31d      	bcc.n	8009c7c <_strtol_l.isra.0+0xc4>
 8009c40:	d101      	bne.n	8009c46 <_strtol_l.isra.0+0x8e>
 8009c42:	45a2      	cmp	sl, r4
 8009c44:	db1a      	blt.n	8009c7c <_strtol_l.isra.0+0xc4>
 8009c46:	fb05 4503 	mla	r5, r5, r3, r4
 8009c4a:	2601      	movs	r6, #1
 8009c4c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009c50:	e7eb      	b.n	8009c2a <_strtol_l.isra.0+0x72>
 8009c52:	2c2b      	cmp	r4, #43	; 0x2b
 8009c54:	bf08      	it	eq
 8009c56:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009c5a:	46a8      	mov	r8, r5
 8009c5c:	bf08      	it	eq
 8009c5e:	f106 0e02 	addeq.w	lr, r6, #2
 8009c62:	e7c7      	b.n	8009bf4 <_strtol_l.isra.0+0x3c>
 8009c64:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009c68:	2f19      	cmp	r7, #25
 8009c6a:	d801      	bhi.n	8009c70 <_strtol_l.isra.0+0xb8>
 8009c6c:	3c37      	subs	r4, #55	; 0x37
 8009c6e:	e7e1      	b.n	8009c34 <_strtol_l.isra.0+0x7c>
 8009c70:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009c74:	2f19      	cmp	r7, #25
 8009c76:	d804      	bhi.n	8009c82 <_strtol_l.isra.0+0xca>
 8009c78:	3c57      	subs	r4, #87	; 0x57
 8009c7a:	e7db      	b.n	8009c34 <_strtol_l.isra.0+0x7c>
 8009c7c:	f04f 36ff 	mov.w	r6, #4294967295
 8009c80:	e7e4      	b.n	8009c4c <_strtol_l.isra.0+0x94>
 8009c82:	2e00      	cmp	r6, #0
 8009c84:	da05      	bge.n	8009c92 <_strtol_l.isra.0+0xda>
 8009c86:	2322      	movs	r3, #34	; 0x22
 8009c88:	6003      	str	r3, [r0, #0]
 8009c8a:	4665      	mov	r5, ip
 8009c8c:	b942      	cbnz	r2, 8009ca0 <_strtol_l.isra.0+0xe8>
 8009c8e:	4628      	mov	r0, r5
 8009c90:	e79d      	b.n	8009bce <_strtol_l.isra.0+0x16>
 8009c92:	f1b8 0f00 	cmp.w	r8, #0
 8009c96:	d000      	beq.n	8009c9a <_strtol_l.isra.0+0xe2>
 8009c98:	426d      	negs	r5, r5
 8009c9a:	2a00      	cmp	r2, #0
 8009c9c:	d0f7      	beq.n	8009c8e <_strtol_l.isra.0+0xd6>
 8009c9e:	b10e      	cbz	r6, 8009ca4 <_strtol_l.isra.0+0xec>
 8009ca0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009ca4:	6011      	str	r1, [r2, #0]
 8009ca6:	e7f2      	b.n	8009c8e <_strtol_l.isra.0+0xd6>
 8009ca8:	2430      	movs	r4, #48	; 0x30
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1b3      	bne.n	8009c16 <_strtol_l.isra.0+0x5e>
 8009cae:	2308      	movs	r3, #8
 8009cb0:	e7b1      	b.n	8009c16 <_strtol_l.isra.0+0x5e>
 8009cb2:	2c30      	cmp	r4, #48	; 0x30
 8009cb4:	d0a4      	beq.n	8009c00 <_strtol_l.isra.0+0x48>
 8009cb6:	230a      	movs	r3, #10
 8009cb8:	e7ad      	b.n	8009c16 <_strtol_l.isra.0+0x5e>
 8009cba:	bf00      	nop
 8009cbc:	0800cb99 	.word	0x0800cb99

08009cc0 <_strtol_r>:
 8009cc0:	f7ff bf7a 	b.w	8009bb8 <_strtol_l.isra.0>

08009cc4 <__swbuf_r>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	460e      	mov	r6, r1
 8009cc8:	4614      	mov	r4, r2
 8009cca:	4605      	mov	r5, r0
 8009ccc:	b118      	cbz	r0, 8009cd6 <__swbuf_r+0x12>
 8009cce:	6983      	ldr	r3, [r0, #24]
 8009cd0:	b90b      	cbnz	r3, 8009cd6 <__swbuf_r+0x12>
 8009cd2:	f001 f84b 	bl	800ad6c <__sinit>
 8009cd6:	4b21      	ldr	r3, [pc, #132]	; (8009d5c <__swbuf_r+0x98>)
 8009cd8:	429c      	cmp	r4, r3
 8009cda:	d12b      	bne.n	8009d34 <__swbuf_r+0x70>
 8009cdc:	686c      	ldr	r4, [r5, #4]
 8009cde:	69a3      	ldr	r3, [r4, #24]
 8009ce0:	60a3      	str	r3, [r4, #8]
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	071a      	lsls	r2, r3, #28
 8009ce6:	d52f      	bpl.n	8009d48 <__swbuf_r+0x84>
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	b36b      	cbz	r3, 8009d48 <__swbuf_r+0x84>
 8009cec:	6923      	ldr	r3, [r4, #16]
 8009cee:	6820      	ldr	r0, [r4, #0]
 8009cf0:	1ac0      	subs	r0, r0, r3
 8009cf2:	6963      	ldr	r3, [r4, #20]
 8009cf4:	b2f6      	uxtb	r6, r6
 8009cf6:	4283      	cmp	r3, r0
 8009cf8:	4637      	mov	r7, r6
 8009cfa:	dc04      	bgt.n	8009d06 <__swbuf_r+0x42>
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f000 ffa0 	bl	800ac44 <_fflush_r>
 8009d04:	bb30      	cbnz	r0, 8009d54 <__swbuf_r+0x90>
 8009d06:	68a3      	ldr	r3, [r4, #8]
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	60a3      	str	r3, [r4, #8]
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	1c5a      	adds	r2, r3, #1
 8009d10:	6022      	str	r2, [r4, #0]
 8009d12:	701e      	strb	r6, [r3, #0]
 8009d14:	6963      	ldr	r3, [r4, #20]
 8009d16:	3001      	adds	r0, #1
 8009d18:	4283      	cmp	r3, r0
 8009d1a:	d004      	beq.n	8009d26 <__swbuf_r+0x62>
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	07db      	lsls	r3, r3, #31
 8009d20:	d506      	bpl.n	8009d30 <__swbuf_r+0x6c>
 8009d22:	2e0a      	cmp	r6, #10
 8009d24:	d104      	bne.n	8009d30 <__swbuf_r+0x6c>
 8009d26:	4621      	mov	r1, r4
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f000 ff8b 	bl	800ac44 <_fflush_r>
 8009d2e:	b988      	cbnz	r0, 8009d54 <__swbuf_r+0x90>
 8009d30:	4638      	mov	r0, r7
 8009d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d34:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <__swbuf_r+0x9c>)
 8009d36:	429c      	cmp	r4, r3
 8009d38:	d101      	bne.n	8009d3e <__swbuf_r+0x7a>
 8009d3a:	68ac      	ldr	r4, [r5, #8]
 8009d3c:	e7cf      	b.n	8009cde <__swbuf_r+0x1a>
 8009d3e:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <__swbuf_r+0xa0>)
 8009d40:	429c      	cmp	r4, r3
 8009d42:	bf08      	it	eq
 8009d44:	68ec      	ldreq	r4, [r5, #12]
 8009d46:	e7ca      	b.n	8009cde <__swbuf_r+0x1a>
 8009d48:	4621      	mov	r1, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 f80c 	bl	8009d68 <__swsetup_r>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d0cb      	beq.n	8009cec <__swbuf_r+0x28>
 8009d54:	f04f 37ff 	mov.w	r7, #4294967295
 8009d58:	e7ea      	b.n	8009d30 <__swbuf_r+0x6c>
 8009d5a:	bf00      	nop
 8009d5c:	0800cd50 	.word	0x0800cd50
 8009d60:	0800cd70 	.word	0x0800cd70
 8009d64:	0800cd30 	.word	0x0800cd30

08009d68 <__swsetup_r>:
 8009d68:	4b32      	ldr	r3, [pc, #200]	; (8009e34 <__swsetup_r+0xcc>)
 8009d6a:	b570      	push	{r4, r5, r6, lr}
 8009d6c:	681d      	ldr	r5, [r3, #0]
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460c      	mov	r4, r1
 8009d72:	b125      	cbz	r5, 8009d7e <__swsetup_r+0x16>
 8009d74:	69ab      	ldr	r3, [r5, #24]
 8009d76:	b913      	cbnz	r3, 8009d7e <__swsetup_r+0x16>
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f000 fff7 	bl	800ad6c <__sinit>
 8009d7e:	4b2e      	ldr	r3, [pc, #184]	; (8009e38 <__swsetup_r+0xd0>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	d10f      	bne.n	8009da4 <__swsetup_r+0x3c>
 8009d84:	686c      	ldr	r4, [r5, #4]
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d8c:	0719      	lsls	r1, r3, #28
 8009d8e:	d42c      	bmi.n	8009dea <__swsetup_r+0x82>
 8009d90:	06dd      	lsls	r5, r3, #27
 8009d92:	d411      	bmi.n	8009db8 <__swsetup_r+0x50>
 8009d94:	2309      	movs	r3, #9
 8009d96:	6033      	str	r3, [r6, #0]
 8009d98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d9c:	81a3      	strh	r3, [r4, #12]
 8009d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009da2:	e03e      	b.n	8009e22 <__swsetup_r+0xba>
 8009da4:	4b25      	ldr	r3, [pc, #148]	; (8009e3c <__swsetup_r+0xd4>)
 8009da6:	429c      	cmp	r4, r3
 8009da8:	d101      	bne.n	8009dae <__swsetup_r+0x46>
 8009daa:	68ac      	ldr	r4, [r5, #8]
 8009dac:	e7eb      	b.n	8009d86 <__swsetup_r+0x1e>
 8009dae:	4b24      	ldr	r3, [pc, #144]	; (8009e40 <__swsetup_r+0xd8>)
 8009db0:	429c      	cmp	r4, r3
 8009db2:	bf08      	it	eq
 8009db4:	68ec      	ldreq	r4, [r5, #12]
 8009db6:	e7e6      	b.n	8009d86 <__swsetup_r+0x1e>
 8009db8:	0758      	lsls	r0, r3, #29
 8009dba:	d512      	bpl.n	8009de2 <__swsetup_r+0x7a>
 8009dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dbe:	b141      	cbz	r1, 8009dd2 <__swsetup_r+0x6a>
 8009dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dc4:	4299      	cmp	r1, r3
 8009dc6:	d002      	beq.n	8009dce <__swsetup_r+0x66>
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f002 f92b 	bl	800c024 <_free_r>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	6363      	str	r3, [r4, #52]	; 0x34
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	6063      	str	r3, [r4, #4]
 8009dde:	6923      	ldr	r3, [r4, #16]
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	f043 0308 	orr.w	r3, r3, #8
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	6923      	ldr	r3, [r4, #16]
 8009dec:	b94b      	cbnz	r3, 8009e02 <__swsetup_r+0x9a>
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009df8:	d003      	beq.n	8009e02 <__swsetup_r+0x9a>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f001 fbed 	bl	800b5dc <__smakebuf_r>
 8009e02:	89a0      	ldrh	r0, [r4, #12]
 8009e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e08:	f010 0301 	ands.w	r3, r0, #1
 8009e0c:	d00a      	beq.n	8009e24 <__swsetup_r+0xbc>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	60a3      	str	r3, [r4, #8]
 8009e12:	6963      	ldr	r3, [r4, #20]
 8009e14:	425b      	negs	r3, r3
 8009e16:	61a3      	str	r3, [r4, #24]
 8009e18:	6923      	ldr	r3, [r4, #16]
 8009e1a:	b943      	cbnz	r3, 8009e2e <__swsetup_r+0xc6>
 8009e1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e20:	d1ba      	bne.n	8009d98 <__swsetup_r+0x30>
 8009e22:	bd70      	pop	{r4, r5, r6, pc}
 8009e24:	0781      	lsls	r1, r0, #30
 8009e26:	bf58      	it	pl
 8009e28:	6963      	ldrpl	r3, [r4, #20]
 8009e2a:	60a3      	str	r3, [r4, #8]
 8009e2c:	e7f4      	b.n	8009e18 <__swsetup_r+0xb0>
 8009e2e:	2000      	movs	r0, #0
 8009e30:	e7f7      	b.n	8009e22 <__swsetup_r+0xba>
 8009e32:	bf00      	nop
 8009e34:	2000000c 	.word	0x2000000c
 8009e38:	0800cd50 	.word	0x0800cd50
 8009e3c:	0800cd70 	.word	0x0800cd70
 8009e40:	0800cd30 	.word	0x0800cd30

08009e44 <quorem>:
 8009e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e48:	6903      	ldr	r3, [r0, #16]
 8009e4a:	690c      	ldr	r4, [r1, #16]
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	4607      	mov	r7, r0
 8009e50:	f2c0 8081 	blt.w	8009f56 <quorem+0x112>
 8009e54:	3c01      	subs	r4, #1
 8009e56:	f101 0814 	add.w	r8, r1, #20
 8009e5a:	f100 0514 	add.w	r5, r0, #20
 8009e5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e62:	9301      	str	r3, [sp, #4]
 8009e64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e78:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e7c:	d331      	bcc.n	8009ee2 <quorem+0x9e>
 8009e7e:	f04f 0e00 	mov.w	lr, #0
 8009e82:	4640      	mov	r0, r8
 8009e84:	46ac      	mov	ip, r5
 8009e86:	46f2      	mov	sl, lr
 8009e88:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e8c:	b293      	uxth	r3, r2
 8009e8e:	fb06 e303 	mla	r3, r6, r3, lr
 8009e92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	ebaa 0303 	sub.w	r3, sl, r3
 8009e9c:	0c12      	lsrs	r2, r2, #16
 8009e9e:	f8dc a000 	ldr.w	sl, [ip]
 8009ea2:	fb06 e202 	mla	r2, r6, r2, lr
 8009ea6:	fa13 f38a 	uxtah	r3, r3, sl
 8009eaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009eae:	fa1f fa82 	uxth.w	sl, r2
 8009eb2:	f8dc 2000 	ldr.w	r2, [ip]
 8009eb6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009eba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ec4:	4581      	cmp	r9, r0
 8009ec6:	f84c 3b04 	str.w	r3, [ip], #4
 8009eca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ece:	d2db      	bcs.n	8009e88 <quorem+0x44>
 8009ed0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ed4:	b92b      	cbnz	r3, 8009ee2 <quorem+0x9e>
 8009ed6:	9b01      	ldr	r3, [sp, #4]
 8009ed8:	3b04      	subs	r3, #4
 8009eda:	429d      	cmp	r5, r3
 8009edc:	461a      	mov	r2, r3
 8009ede:	d32e      	bcc.n	8009f3e <quorem+0xfa>
 8009ee0:	613c      	str	r4, [r7, #16]
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	f001 fe9c 	bl	800bc20 <__mcmp>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	db24      	blt.n	8009f36 <quorem+0xf2>
 8009eec:	3601      	adds	r6, #1
 8009eee:	4628      	mov	r0, r5
 8009ef0:	f04f 0c00 	mov.w	ip, #0
 8009ef4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ef8:	f8d0 e000 	ldr.w	lr, [r0]
 8009efc:	b293      	uxth	r3, r2
 8009efe:	ebac 0303 	sub.w	r3, ip, r3
 8009f02:	0c12      	lsrs	r2, r2, #16
 8009f04:	fa13 f38e 	uxtah	r3, r3, lr
 8009f08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f16:	45c1      	cmp	r9, r8
 8009f18:	f840 3b04 	str.w	r3, [r0], #4
 8009f1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f20:	d2e8      	bcs.n	8009ef4 <quorem+0xb0>
 8009f22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f2a:	b922      	cbnz	r2, 8009f36 <quorem+0xf2>
 8009f2c:	3b04      	subs	r3, #4
 8009f2e:	429d      	cmp	r5, r3
 8009f30:	461a      	mov	r2, r3
 8009f32:	d30a      	bcc.n	8009f4a <quorem+0x106>
 8009f34:	613c      	str	r4, [r7, #16]
 8009f36:	4630      	mov	r0, r6
 8009f38:	b003      	add	sp, #12
 8009f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3e:	6812      	ldr	r2, [r2, #0]
 8009f40:	3b04      	subs	r3, #4
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	d1cc      	bne.n	8009ee0 <quorem+0x9c>
 8009f46:	3c01      	subs	r4, #1
 8009f48:	e7c7      	b.n	8009eda <quorem+0x96>
 8009f4a:	6812      	ldr	r2, [r2, #0]
 8009f4c:	3b04      	subs	r3, #4
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	d1f0      	bne.n	8009f34 <quorem+0xf0>
 8009f52:	3c01      	subs	r4, #1
 8009f54:	e7eb      	b.n	8009f2e <quorem+0xea>
 8009f56:	2000      	movs	r0, #0
 8009f58:	e7ee      	b.n	8009f38 <quorem+0xf4>
 8009f5a:	0000      	movs	r0, r0
 8009f5c:	0000      	movs	r0, r0
	...

08009f60 <_dtoa_r>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	ed2d 8b02 	vpush	{d8}
 8009f68:	ec57 6b10 	vmov	r6, r7, d0
 8009f6c:	b095      	sub	sp, #84	; 0x54
 8009f6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f74:	9105      	str	r1, [sp, #20]
 8009f76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f80:	b975      	cbnz	r5, 8009fa0 <_dtoa_r+0x40>
 8009f82:	2010      	movs	r0, #16
 8009f84:	f001 fb6a 	bl	800b65c <malloc>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	6260      	str	r0, [r4, #36]	; 0x24
 8009f8c:	b920      	cbnz	r0, 8009f98 <_dtoa_r+0x38>
 8009f8e:	4bb2      	ldr	r3, [pc, #712]	; (800a258 <_dtoa_r+0x2f8>)
 8009f90:	21ea      	movs	r1, #234	; 0xea
 8009f92:	48b2      	ldr	r0, [pc, #712]	; (800a25c <_dtoa_r+0x2fc>)
 8009f94:	f002 fc34 	bl	800c800 <__assert_func>
 8009f98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f9c:	6005      	str	r5, [r0, #0]
 8009f9e:	60c5      	str	r5, [r0, #12]
 8009fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fa2:	6819      	ldr	r1, [r3, #0]
 8009fa4:	b151      	cbz	r1, 8009fbc <_dtoa_r+0x5c>
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	604a      	str	r2, [r1, #4]
 8009faa:	2301      	movs	r3, #1
 8009fac:	4093      	lsls	r3, r2
 8009fae:	608b      	str	r3, [r1, #8]
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f001 fbad 	bl	800b710 <_Bfree>
 8009fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]
 8009fbc:	1e3b      	subs	r3, r7, #0
 8009fbe:	bfb9      	ittee	lt
 8009fc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fc4:	9303      	strlt	r3, [sp, #12]
 8009fc6:	2300      	movge	r3, #0
 8009fc8:	f8c8 3000 	strge.w	r3, [r8]
 8009fcc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009fd0:	4ba3      	ldr	r3, [pc, #652]	; (800a260 <_dtoa_r+0x300>)
 8009fd2:	bfbc      	itt	lt
 8009fd4:	2201      	movlt	r2, #1
 8009fd6:	f8c8 2000 	strlt.w	r2, [r8]
 8009fda:	ea33 0309 	bics.w	r3, r3, r9
 8009fde:	d11b      	bne.n	800a018 <_dtoa_r+0xb8>
 8009fe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fe2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fec:	4333      	orrs	r3, r6
 8009fee:	f000 857a 	beq.w	800aae6 <_dtoa_r+0xb86>
 8009ff2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ff4:	b963      	cbnz	r3, 800a010 <_dtoa_r+0xb0>
 8009ff6:	4b9b      	ldr	r3, [pc, #620]	; (800a264 <_dtoa_r+0x304>)
 8009ff8:	e024      	b.n	800a044 <_dtoa_r+0xe4>
 8009ffa:	4b9b      	ldr	r3, [pc, #620]	; (800a268 <_dtoa_r+0x308>)
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	3308      	adds	r3, #8
 800a000:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	9800      	ldr	r0, [sp, #0]
 800a006:	b015      	add	sp, #84	; 0x54
 800a008:	ecbd 8b02 	vpop	{d8}
 800a00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a010:	4b94      	ldr	r3, [pc, #592]	; (800a264 <_dtoa_r+0x304>)
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	3303      	adds	r3, #3
 800a016:	e7f3      	b.n	800a000 <_dtoa_r+0xa0>
 800a018:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a01c:	2200      	movs	r2, #0
 800a01e:	ec51 0b17 	vmov	r0, r1, d7
 800a022:	2300      	movs	r3, #0
 800a024:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a028:	f7f6 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a02c:	4680      	mov	r8, r0
 800a02e:	b158      	cbz	r0, 800a048 <_dtoa_r+0xe8>
 800a030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a032:	2301      	movs	r3, #1
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8551 	beq.w	800aae0 <_dtoa_r+0xb80>
 800a03e:	488b      	ldr	r0, [pc, #556]	; (800a26c <_dtoa_r+0x30c>)
 800a040:	6018      	str	r0, [r3, #0]
 800a042:	1e43      	subs	r3, r0, #1
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	e7dd      	b.n	800a004 <_dtoa_r+0xa4>
 800a048:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a04c:	aa12      	add	r2, sp, #72	; 0x48
 800a04e:	a913      	add	r1, sp, #76	; 0x4c
 800a050:	4620      	mov	r0, r4
 800a052:	f001 ff05 	bl	800be60 <__d2b>
 800a056:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a05a:	4683      	mov	fp, r0
 800a05c:	2d00      	cmp	r5, #0
 800a05e:	d07c      	beq.n	800a15a <_dtoa_r+0x1fa>
 800a060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a062:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a06a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a06e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a072:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a07a:	4b7d      	ldr	r3, [pc, #500]	; (800a270 <_dtoa_r+0x310>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	4630      	mov	r0, r6
 800a080:	4639      	mov	r1, r7
 800a082:	f7f6 f901 	bl	8000288 <__aeabi_dsub>
 800a086:	a36e      	add	r3, pc, #440	; (adr r3, 800a240 <_dtoa_r+0x2e0>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	f7f6 fab4 	bl	80005f8 <__aeabi_dmul>
 800a090:	a36d      	add	r3, pc, #436	; (adr r3, 800a248 <_dtoa_r+0x2e8>)
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	f7f6 f8f9 	bl	800028c <__adddf3>
 800a09a:	4606      	mov	r6, r0
 800a09c:	4628      	mov	r0, r5
 800a09e:	460f      	mov	r7, r1
 800a0a0:	f7f6 fa40 	bl	8000524 <__aeabi_i2d>
 800a0a4:	a36a      	add	r3, pc, #424	; (adr r3, 800a250 <_dtoa_r+0x2f0>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 faa5 	bl	80005f8 <__aeabi_dmul>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	f7f6 f8e9 	bl	800028c <__adddf3>
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	460f      	mov	r7, r1
 800a0be:	f7f6 fd4b 	bl	8000b58 <__aeabi_d2iz>
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4682      	mov	sl, r0
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 fd06 	bl	8000adc <__aeabi_dcmplt>
 800a0d0:	b148      	cbz	r0, 800a0e6 <_dtoa_r+0x186>
 800a0d2:	4650      	mov	r0, sl
 800a0d4:	f7f6 fa26 	bl	8000524 <__aeabi_i2d>
 800a0d8:	4632      	mov	r2, r6
 800a0da:	463b      	mov	r3, r7
 800a0dc:	f7f6 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0e0:	b908      	cbnz	r0, 800a0e6 <_dtoa_r+0x186>
 800a0e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0e6:	f1ba 0f16 	cmp.w	sl, #22
 800a0ea:	d854      	bhi.n	800a196 <_dtoa_r+0x236>
 800a0ec:	4b61      	ldr	r3, [pc, #388]	; (800a274 <_dtoa_r+0x314>)
 800a0ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0fa:	f7f6 fcef 	bl	8000adc <__aeabi_dcmplt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d04b      	beq.n	800a19a <_dtoa_r+0x23a>
 800a102:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a106:	2300      	movs	r3, #0
 800a108:	930e      	str	r3, [sp, #56]	; 0x38
 800a10a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a10c:	1b5d      	subs	r5, r3, r5
 800a10e:	1e6b      	subs	r3, r5, #1
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	bf43      	ittte	mi
 800a114:	2300      	movmi	r3, #0
 800a116:	f1c5 0801 	rsbmi	r8, r5, #1
 800a11a:	9304      	strmi	r3, [sp, #16]
 800a11c:	f04f 0800 	movpl.w	r8, #0
 800a120:	f1ba 0f00 	cmp.w	sl, #0
 800a124:	db3b      	blt.n	800a19e <_dtoa_r+0x23e>
 800a126:	9b04      	ldr	r3, [sp, #16]
 800a128:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a12c:	4453      	add	r3, sl
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	2300      	movs	r3, #0
 800a132:	9306      	str	r3, [sp, #24]
 800a134:	9b05      	ldr	r3, [sp, #20]
 800a136:	2b09      	cmp	r3, #9
 800a138:	d869      	bhi.n	800a20e <_dtoa_r+0x2ae>
 800a13a:	2b05      	cmp	r3, #5
 800a13c:	bfc4      	itt	gt
 800a13e:	3b04      	subgt	r3, #4
 800a140:	9305      	strgt	r3, [sp, #20]
 800a142:	9b05      	ldr	r3, [sp, #20]
 800a144:	f1a3 0302 	sub.w	r3, r3, #2
 800a148:	bfcc      	ite	gt
 800a14a:	2500      	movgt	r5, #0
 800a14c:	2501      	movle	r5, #1
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d869      	bhi.n	800a226 <_dtoa_r+0x2c6>
 800a152:	e8df f003 	tbb	[pc, r3]
 800a156:	4e2c      	.short	0x4e2c
 800a158:	5a4c      	.short	0x5a4c
 800a15a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a15e:	441d      	add	r5, r3
 800a160:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a164:	2b20      	cmp	r3, #32
 800a166:	bfc1      	itttt	gt
 800a168:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a16c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a170:	fa09 f303 	lslgt.w	r3, r9, r3
 800a174:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a178:	bfda      	itte	le
 800a17a:	f1c3 0320 	rsble	r3, r3, #32
 800a17e:	fa06 f003 	lslle.w	r0, r6, r3
 800a182:	4318      	orrgt	r0, r3
 800a184:	f7f6 f9be 	bl	8000504 <__aeabi_ui2d>
 800a188:	2301      	movs	r3, #1
 800a18a:	4606      	mov	r6, r0
 800a18c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a190:	3d01      	subs	r5, #1
 800a192:	9310      	str	r3, [sp, #64]	; 0x40
 800a194:	e771      	b.n	800a07a <_dtoa_r+0x11a>
 800a196:	2301      	movs	r3, #1
 800a198:	e7b6      	b.n	800a108 <_dtoa_r+0x1a8>
 800a19a:	900e      	str	r0, [sp, #56]	; 0x38
 800a19c:	e7b5      	b.n	800a10a <_dtoa_r+0x1aa>
 800a19e:	f1ca 0300 	rsb	r3, sl, #0
 800a1a2:	9306      	str	r3, [sp, #24]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	eba8 080a 	sub.w	r8, r8, sl
 800a1aa:	930d      	str	r3, [sp, #52]	; 0x34
 800a1ac:	e7c2      	b.n	800a134 <_dtoa_r+0x1d4>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9308      	str	r3, [sp, #32]
 800a1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	dc39      	bgt.n	800a22c <_dtoa_r+0x2cc>
 800a1b8:	f04f 0901 	mov.w	r9, #1
 800a1bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a1c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	6042      	str	r2, [r0, #4]
 800a1cc:	2204      	movs	r2, #4
 800a1ce:	f102 0614 	add.w	r6, r2, #20
 800a1d2:	429e      	cmp	r6, r3
 800a1d4:	6841      	ldr	r1, [r0, #4]
 800a1d6:	d92f      	bls.n	800a238 <_dtoa_r+0x2d8>
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f001 fa59 	bl	800b690 <_Balloc>
 800a1de:	9000      	str	r0, [sp, #0]
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d14b      	bne.n	800a27c <_dtoa_r+0x31c>
 800a1e4:	4b24      	ldr	r3, [pc, #144]	; (800a278 <_dtoa_r+0x318>)
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1ec:	e6d1      	b.n	8009f92 <_dtoa_r+0x32>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e7de      	b.n	800a1b0 <_dtoa_r+0x250>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	9308      	str	r3, [sp, #32]
 800a1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f8:	eb0a 0903 	add.w	r9, sl, r3
 800a1fc:	f109 0301 	add.w	r3, r9, #1
 800a200:	2b01      	cmp	r3, #1
 800a202:	9301      	str	r3, [sp, #4]
 800a204:	bfb8      	it	lt
 800a206:	2301      	movlt	r3, #1
 800a208:	e7dd      	b.n	800a1c6 <_dtoa_r+0x266>
 800a20a:	2301      	movs	r3, #1
 800a20c:	e7f2      	b.n	800a1f4 <_dtoa_r+0x294>
 800a20e:	2501      	movs	r5, #1
 800a210:	2300      	movs	r3, #0
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	9508      	str	r5, [sp, #32]
 800a216:	f04f 39ff 	mov.w	r9, #4294967295
 800a21a:	2200      	movs	r2, #0
 800a21c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a220:	2312      	movs	r3, #18
 800a222:	9209      	str	r2, [sp, #36]	; 0x24
 800a224:	e7cf      	b.n	800a1c6 <_dtoa_r+0x266>
 800a226:	2301      	movs	r3, #1
 800a228:	9308      	str	r3, [sp, #32]
 800a22a:	e7f4      	b.n	800a216 <_dtoa_r+0x2b6>
 800a22c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a230:	f8cd 9004 	str.w	r9, [sp, #4]
 800a234:	464b      	mov	r3, r9
 800a236:	e7c6      	b.n	800a1c6 <_dtoa_r+0x266>
 800a238:	3101      	adds	r1, #1
 800a23a:	6041      	str	r1, [r0, #4]
 800a23c:	0052      	lsls	r2, r2, #1
 800a23e:	e7c6      	b.n	800a1ce <_dtoa_r+0x26e>
 800a240:	636f4361 	.word	0x636f4361
 800a244:	3fd287a7 	.word	0x3fd287a7
 800a248:	8b60c8b3 	.word	0x8b60c8b3
 800a24c:	3fc68a28 	.word	0x3fc68a28
 800a250:	509f79fb 	.word	0x509f79fb
 800a254:	3fd34413 	.word	0x3fd34413
 800a258:	0800cca6 	.word	0x0800cca6
 800a25c:	0800ccbd 	.word	0x0800ccbd
 800a260:	7ff00000 	.word	0x7ff00000
 800a264:	0800cca2 	.word	0x0800cca2
 800a268:	0800cc99 	.word	0x0800cc99
 800a26c:	0800cb19 	.word	0x0800cb19
 800a270:	3ff80000 	.word	0x3ff80000
 800a274:	0800ce98 	.word	0x0800ce98
 800a278:	0800cd1c 	.word	0x0800cd1c
 800a27c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a27e:	9a00      	ldr	r2, [sp, #0]
 800a280:	601a      	str	r2, [r3, #0]
 800a282:	9b01      	ldr	r3, [sp, #4]
 800a284:	2b0e      	cmp	r3, #14
 800a286:	f200 80ad 	bhi.w	800a3e4 <_dtoa_r+0x484>
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	f000 80aa 	beq.w	800a3e4 <_dtoa_r+0x484>
 800a290:	f1ba 0f00 	cmp.w	sl, #0
 800a294:	dd36      	ble.n	800a304 <_dtoa_r+0x3a4>
 800a296:	4ac3      	ldr	r2, [pc, #780]	; (800a5a4 <_dtoa_r+0x644>)
 800a298:	f00a 030f 	and.w	r3, sl, #15
 800a29c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2a0:	ed93 7b00 	vldr	d7, [r3]
 800a2a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a2a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a2ac:	eeb0 8a47 	vmov.f32	s16, s14
 800a2b0:	eef0 8a67 	vmov.f32	s17, s15
 800a2b4:	d016      	beq.n	800a2e4 <_dtoa_r+0x384>
 800a2b6:	4bbc      	ldr	r3, [pc, #752]	; (800a5a8 <_dtoa_r+0x648>)
 800a2b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2c0:	f7f6 fac4 	bl	800084c <__aeabi_ddiv>
 800a2c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2c8:	f007 070f 	and.w	r7, r7, #15
 800a2cc:	2503      	movs	r5, #3
 800a2ce:	4eb6      	ldr	r6, [pc, #728]	; (800a5a8 <_dtoa_r+0x648>)
 800a2d0:	b957      	cbnz	r7, 800a2e8 <_dtoa_r+0x388>
 800a2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2d6:	ec53 2b18 	vmov	r2, r3, d8
 800a2da:	f7f6 fab7 	bl	800084c <__aeabi_ddiv>
 800a2de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2e2:	e029      	b.n	800a338 <_dtoa_r+0x3d8>
 800a2e4:	2502      	movs	r5, #2
 800a2e6:	e7f2      	b.n	800a2ce <_dtoa_r+0x36e>
 800a2e8:	07f9      	lsls	r1, r7, #31
 800a2ea:	d508      	bpl.n	800a2fe <_dtoa_r+0x39e>
 800a2ec:	ec51 0b18 	vmov	r0, r1, d8
 800a2f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2f4:	f7f6 f980 	bl	80005f8 <__aeabi_dmul>
 800a2f8:	ec41 0b18 	vmov	d8, r0, r1
 800a2fc:	3501      	adds	r5, #1
 800a2fe:	107f      	asrs	r7, r7, #1
 800a300:	3608      	adds	r6, #8
 800a302:	e7e5      	b.n	800a2d0 <_dtoa_r+0x370>
 800a304:	f000 80a6 	beq.w	800a454 <_dtoa_r+0x4f4>
 800a308:	f1ca 0600 	rsb	r6, sl, #0
 800a30c:	4ba5      	ldr	r3, [pc, #660]	; (800a5a4 <_dtoa_r+0x644>)
 800a30e:	4fa6      	ldr	r7, [pc, #664]	; (800a5a8 <_dtoa_r+0x648>)
 800a310:	f006 020f 	and.w	r2, r6, #15
 800a314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a320:	f7f6 f96a 	bl	80005f8 <__aeabi_dmul>
 800a324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a328:	1136      	asrs	r6, r6, #4
 800a32a:	2300      	movs	r3, #0
 800a32c:	2502      	movs	r5, #2
 800a32e:	2e00      	cmp	r6, #0
 800a330:	f040 8085 	bne.w	800a43e <_dtoa_r+0x4de>
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1d2      	bne.n	800a2de <_dtoa_r+0x37e>
 800a338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 808c 	beq.w	800a458 <_dtoa_r+0x4f8>
 800a340:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a344:	4b99      	ldr	r3, [pc, #612]	; (800a5ac <_dtoa_r+0x64c>)
 800a346:	2200      	movs	r2, #0
 800a348:	4630      	mov	r0, r6
 800a34a:	4639      	mov	r1, r7
 800a34c:	f7f6 fbc6 	bl	8000adc <__aeabi_dcmplt>
 800a350:	2800      	cmp	r0, #0
 800a352:	f000 8081 	beq.w	800a458 <_dtoa_r+0x4f8>
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d07d      	beq.n	800a458 <_dtoa_r+0x4f8>
 800a35c:	f1b9 0f00 	cmp.w	r9, #0
 800a360:	dd3c      	ble.n	800a3dc <_dtoa_r+0x47c>
 800a362:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a366:	9307      	str	r3, [sp, #28]
 800a368:	2200      	movs	r2, #0
 800a36a:	4b91      	ldr	r3, [pc, #580]	; (800a5b0 <_dtoa_r+0x650>)
 800a36c:	4630      	mov	r0, r6
 800a36e:	4639      	mov	r1, r7
 800a370:	f7f6 f942 	bl	80005f8 <__aeabi_dmul>
 800a374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a378:	3501      	adds	r5, #1
 800a37a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a37e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a382:	4628      	mov	r0, r5
 800a384:	f7f6 f8ce 	bl	8000524 <__aeabi_i2d>
 800a388:	4632      	mov	r2, r6
 800a38a:	463b      	mov	r3, r7
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	4b88      	ldr	r3, [pc, #544]	; (800a5b4 <_dtoa_r+0x654>)
 800a392:	2200      	movs	r2, #0
 800a394:	f7f5 ff7a 	bl	800028c <__adddf3>
 800a398:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a0:	9303      	str	r3, [sp, #12]
 800a3a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d15c      	bne.n	800a462 <_dtoa_r+0x502>
 800a3a8:	4b83      	ldr	r3, [pc, #524]	; (800a5b8 <_dtoa_r+0x658>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	f7f5 ff6a 	bl	8000288 <__aeabi_dsub>
 800a3b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	f7f6 fbac 	bl	8000b18 <__aeabi_dcmpgt>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	f040 8296 	bne.w	800a8f2 <_dtoa_r+0x992>
 800a3c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	f7f6 fb83 	bl	8000adc <__aeabi_dcmplt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f040 8288 	bne.w	800a8ec <_dtoa_r+0x98c>
 800a3dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f2c0 8158 	blt.w	800a69c <_dtoa_r+0x73c>
 800a3ec:	f1ba 0f0e 	cmp.w	sl, #14
 800a3f0:	f300 8154 	bgt.w	800a69c <_dtoa_r+0x73c>
 800a3f4:	4b6b      	ldr	r3, [pc, #428]	; (800a5a4 <_dtoa_r+0x644>)
 800a3f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a400:	2b00      	cmp	r3, #0
 800a402:	f280 80e3 	bge.w	800a5cc <_dtoa_r+0x66c>
 800a406:	9b01      	ldr	r3, [sp, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f300 80df 	bgt.w	800a5cc <_dtoa_r+0x66c>
 800a40e:	f040 826d 	bne.w	800a8ec <_dtoa_r+0x98c>
 800a412:	4b69      	ldr	r3, [pc, #420]	; (800a5b8 <_dtoa_r+0x658>)
 800a414:	2200      	movs	r2, #0
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f7f6 f8ed 	bl	80005f8 <__aeabi_dmul>
 800a41e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a422:	f7f6 fb6f 	bl	8000b04 <__aeabi_dcmpge>
 800a426:	9e01      	ldr	r6, [sp, #4]
 800a428:	4637      	mov	r7, r6
 800a42a:	2800      	cmp	r0, #0
 800a42c:	f040 8243 	bne.w	800a8b6 <_dtoa_r+0x956>
 800a430:	9d00      	ldr	r5, [sp, #0]
 800a432:	2331      	movs	r3, #49	; 0x31
 800a434:	f805 3b01 	strb.w	r3, [r5], #1
 800a438:	f10a 0a01 	add.w	sl, sl, #1
 800a43c:	e23f      	b.n	800a8be <_dtoa_r+0x95e>
 800a43e:	07f2      	lsls	r2, r6, #31
 800a440:	d505      	bpl.n	800a44e <_dtoa_r+0x4ee>
 800a442:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a446:	f7f6 f8d7 	bl	80005f8 <__aeabi_dmul>
 800a44a:	3501      	adds	r5, #1
 800a44c:	2301      	movs	r3, #1
 800a44e:	1076      	asrs	r6, r6, #1
 800a450:	3708      	adds	r7, #8
 800a452:	e76c      	b.n	800a32e <_dtoa_r+0x3ce>
 800a454:	2502      	movs	r5, #2
 800a456:	e76f      	b.n	800a338 <_dtoa_r+0x3d8>
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a45e:	930c      	str	r3, [sp, #48]	; 0x30
 800a460:	e78d      	b.n	800a37e <_dtoa_r+0x41e>
 800a462:	9900      	ldr	r1, [sp, #0]
 800a464:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a468:	4b4e      	ldr	r3, [pc, #312]	; (800a5a4 <_dtoa_r+0x644>)
 800a46a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a46e:	4401      	add	r1, r0
 800a470:	9102      	str	r1, [sp, #8]
 800a472:	9908      	ldr	r1, [sp, #32]
 800a474:	eeb0 8a47 	vmov.f32	s16, s14
 800a478:	eef0 8a67 	vmov.f32	s17, s15
 800a47c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a480:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a484:	2900      	cmp	r1, #0
 800a486:	d045      	beq.n	800a514 <_dtoa_r+0x5b4>
 800a488:	494c      	ldr	r1, [pc, #304]	; (800a5bc <_dtoa_r+0x65c>)
 800a48a:	2000      	movs	r0, #0
 800a48c:	f7f6 f9de 	bl	800084c <__aeabi_ddiv>
 800a490:	ec53 2b18 	vmov	r2, r3, d8
 800a494:	f7f5 fef8 	bl	8000288 <__aeabi_dsub>
 800a498:	9d00      	ldr	r5, [sp, #0]
 800a49a:	ec41 0b18 	vmov	d8, r0, r1
 800a49e:	4639      	mov	r1, r7
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f7f6 fb59 	bl	8000b58 <__aeabi_d2iz>
 800a4a6:	900c      	str	r0, [sp, #48]	; 0x30
 800a4a8:	f7f6 f83c 	bl	8000524 <__aeabi_i2d>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	f7f5 fee8 	bl	8000288 <__aeabi_dsub>
 800a4b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4ba:	3330      	adds	r3, #48	; 0x30
 800a4bc:	f805 3b01 	strb.w	r3, [r5], #1
 800a4c0:	ec53 2b18 	vmov	r2, r3, d8
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	460f      	mov	r7, r1
 800a4c8:	f7f6 fb08 	bl	8000adc <__aeabi_dcmplt>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d165      	bne.n	800a59c <_dtoa_r+0x63c>
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	463b      	mov	r3, r7
 800a4d4:	4935      	ldr	r1, [pc, #212]	; (800a5ac <_dtoa_r+0x64c>)
 800a4d6:	2000      	movs	r0, #0
 800a4d8:	f7f5 fed6 	bl	8000288 <__aeabi_dsub>
 800a4dc:	ec53 2b18 	vmov	r2, r3, d8
 800a4e0:	f7f6 fafc 	bl	8000adc <__aeabi_dcmplt>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f040 80b9 	bne.w	800a65c <_dtoa_r+0x6fc>
 800a4ea:	9b02      	ldr	r3, [sp, #8]
 800a4ec:	429d      	cmp	r5, r3
 800a4ee:	f43f af75 	beq.w	800a3dc <_dtoa_r+0x47c>
 800a4f2:	4b2f      	ldr	r3, [pc, #188]	; (800a5b0 <_dtoa_r+0x650>)
 800a4f4:	ec51 0b18 	vmov	r0, r1, d8
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f7f6 f87d 	bl	80005f8 <__aeabi_dmul>
 800a4fe:	4b2c      	ldr	r3, [pc, #176]	; (800a5b0 <_dtoa_r+0x650>)
 800a500:	ec41 0b18 	vmov	d8, r0, r1
 800a504:	2200      	movs	r2, #0
 800a506:	4630      	mov	r0, r6
 800a508:	4639      	mov	r1, r7
 800a50a:	f7f6 f875 	bl	80005f8 <__aeabi_dmul>
 800a50e:	4606      	mov	r6, r0
 800a510:	460f      	mov	r7, r1
 800a512:	e7c4      	b.n	800a49e <_dtoa_r+0x53e>
 800a514:	ec51 0b17 	vmov	r0, r1, d7
 800a518:	f7f6 f86e 	bl	80005f8 <__aeabi_dmul>
 800a51c:	9b02      	ldr	r3, [sp, #8]
 800a51e:	9d00      	ldr	r5, [sp, #0]
 800a520:	930c      	str	r3, [sp, #48]	; 0x30
 800a522:	ec41 0b18 	vmov	d8, r0, r1
 800a526:	4639      	mov	r1, r7
 800a528:	4630      	mov	r0, r6
 800a52a:	f7f6 fb15 	bl	8000b58 <__aeabi_d2iz>
 800a52e:	9011      	str	r0, [sp, #68]	; 0x44
 800a530:	f7f5 fff8 	bl	8000524 <__aeabi_i2d>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4630      	mov	r0, r6
 800a53a:	4639      	mov	r1, r7
 800a53c:	f7f5 fea4 	bl	8000288 <__aeabi_dsub>
 800a540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a542:	3330      	adds	r3, #48	; 0x30
 800a544:	f805 3b01 	strb.w	r3, [r5], #1
 800a548:	9b02      	ldr	r3, [sp, #8]
 800a54a:	429d      	cmp	r5, r3
 800a54c:	4606      	mov	r6, r0
 800a54e:	460f      	mov	r7, r1
 800a550:	f04f 0200 	mov.w	r2, #0
 800a554:	d134      	bne.n	800a5c0 <_dtoa_r+0x660>
 800a556:	4b19      	ldr	r3, [pc, #100]	; (800a5bc <_dtoa_r+0x65c>)
 800a558:	ec51 0b18 	vmov	r0, r1, d8
 800a55c:	f7f5 fe96 	bl	800028c <__adddf3>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	4630      	mov	r0, r6
 800a566:	4639      	mov	r1, r7
 800a568:	f7f6 fad6 	bl	8000b18 <__aeabi_dcmpgt>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d175      	bne.n	800a65c <_dtoa_r+0x6fc>
 800a570:	ec53 2b18 	vmov	r2, r3, d8
 800a574:	4911      	ldr	r1, [pc, #68]	; (800a5bc <_dtoa_r+0x65c>)
 800a576:	2000      	movs	r0, #0
 800a578:	f7f5 fe86 	bl	8000288 <__aeabi_dsub>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4630      	mov	r0, r6
 800a582:	4639      	mov	r1, r7
 800a584:	f7f6 faaa 	bl	8000adc <__aeabi_dcmplt>
 800a588:	2800      	cmp	r0, #0
 800a58a:	f43f af27 	beq.w	800a3dc <_dtoa_r+0x47c>
 800a58e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a590:	1e6b      	subs	r3, r5, #1
 800a592:	930c      	str	r3, [sp, #48]	; 0x30
 800a594:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a598:	2b30      	cmp	r3, #48	; 0x30
 800a59a:	d0f8      	beq.n	800a58e <_dtoa_r+0x62e>
 800a59c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a5a0:	e04a      	b.n	800a638 <_dtoa_r+0x6d8>
 800a5a2:	bf00      	nop
 800a5a4:	0800ce98 	.word	0x0800ce98
 800a5a8:	0800ce70 	.word	0x0800ce70
 800a5ac:	3ff00000 	.word	0x3ff00000
 800a5b0:	40240000 	.word	0x40240000
 800a5b4:	401c0000 	.word	0x401c0000
 800a5b8:	40140000 	.word	0x40140000
 800a5bc:	3fe00000 	.word	0x3fe00000
 800a5c0:	4baf      	ldr	r3, [pc, #700]	; (800a880 <_dtoa_r+0x920>)
 800a5c2:	f7f6 f819 	bl	80005f8 <__aeabi_dmul>
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	e7ac      	b.n	800a526 <_dtoa_r+0x5c6>
 800a5cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5d0:	9d00      	ldr	r5, [sp, #0]
 800a5d2:	4642      	mov	r2, r8
 800a5d4:	464b      	mov	r3, r9
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	4639      	mov	r1, r7
 800a5da:	f7f6 f937 	bl	800084c <__aeabi_ddiv>
 800a5de:	f7f6 fabb 	bl	8000b58 <__aeabi_d2iz>
 800a5e2:	9002      	str	r0, [sp, #8]
 800a5e4:	f7f5 ff9e 	bl	8000524 <__aeabi_i2d>
 800a5e8:	4642      	mov	r2, r8
 800a5ea:	464b      	mov	r3, r9
 800a5ec:	f7f6 f804 	bl	80005f8 <__aeabi_dmul>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	f7f5 fe46 	bl	8000288 <__aeabi_dsub>
 800a5fc:	9e02      	ldr	r6, [sp, #8]
 800a5fe:	9f01      	ldr	r7, [sp, #4]
 800a600:	3630      	adds	r6, #48	; 0x30
 800a602:	f805 6b01 	strb.w	r6, [r5], #1
 800a606:	9e00      	ldr	r6, [sp, #0]
 800a608:	1bae      	subs	r6, r5, r6
 800a60a:	42b7      	cmp	r7, r6
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	d137      	bne.n	800a682 <_dtoa_r+0x722>
 800a612:	f7f5 fe3b 	bl	800028c <__adddf3>
 800a616:	4642      	mov	r2, r8
 800a618:	464b      	mov	r3, r9
 800a61a:	4606      	mov	r6, r0
 800a61c:	460f      	mov	r7, r1
 800a61e:	f7f6 fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 800a622:	b9c8      	cbnz	r0, 800a658 <_dtoa_r+0x6f8>
 800a624:	4642      	mov	r2, r8
 800a626:	464b      	mov	r3, r9
 800a628:	4630      	mov	r0, r6
 800a62a:	4639      	mov	r1, r7
 800a62c:	f7f6 fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a630:	b110      	cbz	r0, 800a638 <_dtoa_r+0x6d8>
 800a632:	9b02      	ldr	r3, [sp, #8]
 800a634:	07d9      	lsls	r1, r3, #31
 800a636:	d40f      	bmi.n	800a658 <_dtoa_r+0x6f8>
 800a638:	4620      	mov	r0, r4
 800a63a:	4659      	mov	r1, fp
 800a63c:	f001 f868 	bl	800b710 <_Bfree>
 800a640:	2300      	movs	r3, #0
 800a642:	702b      	strb	r3, [r5, #0]
 800a644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a646:	f10a 0001 	add.w	r0, sl, #1
 800a64a:	6018      	str	r0, [r3, #0]
 800a64c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f43f acd8 	beq.w	800a004 <_dtoa_r+0xa4>
 800a654:	601d      	str	r5, [r3, #0]
 800a656:	e4d5      	b.n	800a004 <_dtoa_r+0xa4>
 800a658:	f8cd a01c 	str.w	sl, [sp, #28]
 800a65c:	462b      	mov	r3, r5
 800a65e:	461d      	mov	r5, r3
 800a660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a664:	2a39      	cmp	r2, #57	; 0x39
 800a666:	d108      	bne.n	800a67a <_dtoa_r+0x71a>
 800a668:	9a00      	ldr	r2, [sp, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d1f7      	bne.n	800a65e <_dtoa_r+0x6fe>
 800a66e:	9a07      	ldr	r2, [sp, #28]
 800a670:	9900      	ldr	r1, [sp, #0]
 800a672:	3201      	adds	r2, #1
 800a674:	9207      	str	r2, [sp, #28]
 800a676:	2230      	movs	r2, #48	; 0x30
 800a678:	700a      	strb	r2, [r1, #0]
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	3201      	adds	r2, #1
 800a67e:	701a      	strb	r2, [r3, #0]
 800a680:	e78c      	b.n	800a59c <_dtoa_r+0x63c>
 800a682:	4b7f      	ldr	r3, [pc, #508]	; (800a880 <_dtoa_r+0x920>)
 800a684:	2200      	movs	r2, #0
 800a686:	f7f5 ffb7 	bl	80005f8 <__aeabi_dmul>
 800a68a:	2200      	movs	r2, #0
 800a68c:	2300      	movs	r3, #0
 800a68e:	4606      	mov	r6, r0
 800a690:	460f      	mov	r7, r1
 800a692:	f7f6 fa19 	bl	8000ac8 <__aeabi_dcmpeq>
 800a696:	2800      	cmp	r0, #0
 800a698:	d09b      	beq.n	800a5d2 <_dtoa_r+0x672>
 800a69a:	e7cd      	b.n	800a638 <_dtoa_r+0x6d8>
 800a69c:	9a08      	ldr	r2, [sp, #32]
 800a69e:	2a00      	cmp	r2, #0
 800a6a0:	f000 80c4 	beq.w	800a82c <_dtoa_r+0x8cc>
 800a6a4:	9a05      	ldr	r2, [sp, #20]
 800a6a6:	2a01      	cmp	r2, #1
 800a6a8:	f300 80a8 	bgt.w	800a7fc <_dtoa_r+0x89c>
 800a6ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	f000 80a0 	beq.w	800a7f4 <_dtoa_r+0x894>
 800a6b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6b8:	9e06      	ldr	r6, [sp, #24]
 800a6ba:	4645      	mov	r5, r8
 800a6bc:	9a04      	ldr	r2, [sp, #16]
 800a6be:	2101      	movs	r1, #1
 800a6c0:	441a      	add	r2, r3
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	4498      	add	r8, r3
 800a6c6:	9204      	str	r2, [sp, #16]
 800a6c8:	f001 f928 	bl	800b91c <__i2b>
 800a6cc:	4607      	mov	r7, r0
 800a6ce:	2d00      	cmp	r5, #0
 800a6d0:	dd0b      	ble.n	800a6ea <_dtoa_r+0x78a>
 800a6d2:	9b04      	ldr	r3, [sp, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dd08      	ble.n	800a6ea <_dtoa_r+0x78a>
 800a6d8:	42ab      	cmp	r3, r5
 800a6da:	9a04      	ldr	r2, [sp, #16]
 800a6dc:	bfa8      	it	ge
 800a6de:	462b      	movge	r3, r5
 800a6e0:	eba8 0803 	sub.w	r8, r8, r3
 800a6e4:	1aed      	subs	r5, r5, r3
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	9304      	str	r3, [sp, #16]
 800a6ea:	9b06      	ldr	r3, [sp, #24]
 800a6ec:	b1fb      	cbz	r3, 800a72e <_dtoa_r+0x7ce>
 800a6ee:	9b08      	ldr	r3, [sp, #32]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 809f 	beq.w	800a834 <_dtoa_r+0x8d4>
 800a6f6:	2e00      	cmp	r6, #0
 800a6f8:	dd11      	ble.n	800a71e <_dtoa_r+0x7be>
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	4620      	mov	r0, r4
 800a700:	f001 f9c8 	bl	800ba94 <__pow5mult>
 800a704:	465a      	mov	r2, fp
 800a706:	4601      	mov	r1, r0
 800a708:	4607      	mov	r7, r0
 800a70a:	4620      	mov	r0, r4
 800a70c:	f001 f91c 	bl	800b948 <__multiply>
 800a710:	4659      	mov	r1, fp
 800a712:	9007      	str	r0, [sp, #28]
 800a714:	4620      	mov	r0, r4
 800a716:	f000 fffb 	bl	800b710 <_Bfree>
 800a71a:	9b07      	ldr	r3, [sp, #28]
 800a71c:	469b      	mov	fp, r3
 800a71e:	9b06      	ldr	r3, [sp, #24]
 800a720:	1b9a      	subs	r2, r3, r6
 800a722:	d004      	beq.n	800a72e <_dtoa_r+0x7ce>
 800a724:	4659      	mov	r1, fp
 800a726:	4620      	mov	r0, r4
 800a728:	f001 f9b4 	bl	800ba94 <__pow5mult>
 800a72c:	4683      	mov	fp, r0
 800a72e:	2101      	movs	r1, #1
 800a730:	4620      	mov	r0, r4
 800a732:	f001 f8f3 	bl	800b91c <__i2b>
 800a736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a738:	2b00      	cmp	r3, #0
 800a73a:	4606      	mov	r6, r0
 800a73c:	dd7c      	ble.n	800a838 <_dtoa_r+0x8d8>
 800a73e:	461a      	mov	r2, r3
 800a740:	4601      	mov	r1, r0
 800a742:	4620      	mov	r0, r4
 800a744:	f001 f9a6 	bl	800ba94 <__pow5mult>
 800a748:	9b05      	ldr	r3, [sp, #20]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	4606      	mov	r6, r0
 800a74e:	dd76      	ble.n	800a83e <_dtoa_r+0x8de>
 800a750:	2300      	movs	r3, #0
 800a752:	9306      	str	r3, [sp, #24]
 800a754:	6933      	ldr	r3, [r6, #16]
 800a756:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a75a:	6918      	ldr	r0, [r3, #16]
 800a75c:	f001 f88e 	bl	800b87c <__hi0bits>
 800a760:	f1c0 0020 	rsb	r0, r0, #32
 800a764:	9b04      	ldr	r3, [sp, #16]
 800a766:	4418      	add	r0, r3
 800a768:	f010 001f 	ands.w	r0, r0, #31
 800a76c:	f000 8086 	beq.w	800a87c <_dtoa_r+0x91c>
 800a770:	f1c0 0320 	rsb	r3, r0, #32
 800a774:	2b04      	cmp	r3, #4
 800a776:	dd7f      	ble.n	800a878 <_dtoa_r+0x918>
 800a778:	f1c0 001c 	rsb	r0, r0, #28
 800a77c:	9b04      	ldr	r3, [sp, #16]
 800a77e:	4403      	add	r3, r0
 800a780:	4480      	add	r8, r0
 800a782:	4405      	add	r5, r0
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	f1b8 0f00 	cmp.w	r8, #0
 800a78a:	dd05      	ble.n	800a798 <_dtoa_r+0x838>
 800a78c:	4659      	mov	r1, fp
 800a78e:	4642      	mov	r2, r8
 800a790:	4620      	mov	r0, r4
 800a792:	f001 f9d9 	bl	800bb48 <__lshift>
 800a796:	4683      	mov	fp, r0
 800a798:	9b04      	ldr	r3, [sp, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	dd05      	ble.n	800a7aa <_dtoa_r+0x84a>
 800a79e:	4631      	mov	r1, r6
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f001 f9d0 	bl	800bb48 <__lshift>
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d069      	beq.n	800a884 <_dtoa_r+0x924>
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4658      	mov	r0, fp
 800a7b4:	f001 fa34 	bl	800bc20 <__mcmp>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	da63      	bge.n	800a884 <_dtoa_r+0x924>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4659      	mov	r1, fp
 800a7c0:	220a      	movs	r2, #10
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 ffc6 	bl	800b754 <__multadd>
 800a7c8:	9b08      	ldr	r3, [sp, #32]
 800a7ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7ce:	4683      	mov	fp, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 818f 	beq.w	800aaf4 <_dtoa_r+0xb94>
 800a7d6:	4639      	mov	r1, r7
 800a7d8:	2300      	movs	r3, #0
 800a7da:	220a      	movs	r2, #10
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 ffb9 	bl	800b754 <__multadd>
 800a7e2:	f1b9 0f00 	cmp.w	r9, #0
 800a7e6:	4607      	mov	r7, r0
 800a7e8:	f300 808e 	bgt.w	800a908 <_dtoa_r+0x9a8>
 800a7ec:	9b05      	ldr	r3, [sp, #20]
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	dc50      	bgt.n	800a894 <_dtoa_r+0x934>
 800a7f2:	e089      	b.n	800a908 <_dtoa_r+0x9a8>
 800a7f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7fa:	e75d      	b.n	800a6b8 <_dtoa_r+0x758>
 800a7fc:	9b01      	ldr	r3, [sp, #4]
 800a7fe:	1e5e      	subs	r6, r3, #1
 800a800:	9b06      	ldr	r3, [sp, #24]
 800a802:	42b3      	cmp	r3, r6
 800a804:	bfbf      	itttt	lt
 800a806:	9b06      	ldrlt	r3, [sp, #24]
 800a808:	9606      	strlt	r6, [sp, #24]
 800a80a:	1af2      	sublt	r2, r6, r3
 800a80c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a80e:	bfb6      	itet	lt
 800a810:	189b      	addlt	r3, r3, r2
 800a812:	1b9e      	subge	r6, r3, r6
 800a814:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a816:	9b01      	ldr	r3, [sp, #4]
 800a818:	bfb8      	it	lt
 800a81a:	2600      	movlt	r6, #0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bfb5      	itete	lt
 800a820:	eba8 0503 	sublt.w	r5, r8, r3
 800a824:	9b01      	ldrge	r3, [sp, #4]
 800a826:	2300      	movlt	r3, #0
 800a828:	4645      	movge	r5, r8
 800a82a:	e747      	b.n	800a6bc <_dtoa_r+0x75c>
 800a82c:	9e06      	ldr	r6, [sp, #24]
 800a82e:	9f08      	ldr	r7, [sp, #32]
 800a830:	4645      	mov	r5, r8
 800a832:	e74c      	b.n	800a6ce <_dtoa_r+0x76e>
 800a834:	9a06      	ldr	r2, [sp, #24]
 800a836:	e775      	b.n	800a724 <_dtoa_r+0x7c4>
 800a838:	9b05      	ldr	r3, [sp, #20]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	dc18      	bgt.n	800a870 <_dtoa_r+0x910>
 800a83e:	9b02      	ldr	r3, [sp, #8]
 800a840:	b9b3      	cbnz	r3, 800a870 <_dtoa_r+0x910>
 800a842:	9b03      	ldr	r3, [sp, #12]
 800a844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a848:	b9a3      	cbnz	r3, 800a874 <_dtoa_r+0x914>
 800a84a:	9b03      	ldr	r3, [sp, #12]
 800a84c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a850:	0d1b      	lsrs	r3, r3, #20
 800a852:	051b      	lsls	r3, r3, #20
 800a854:	b12b      	cbz	r3, 800a862 <_dtoa_r+0x902>
 800a856:	9b04      	ldr	r3, [sp, #16]
 800a858:	3301      	adds	r3, #1
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	f108 0801 	add.w	r8, r8, #1
 800a860:	2301      	movs	r3, #1
 800a862:	9306      	str	r3, [sp, #24]
 800a864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a866:	2b00      	cmp	r3, #0
 800a868:	f47f af74 	bne.w	800a754 <_dtoa_r+0x7f4>
 800a86c:	2001      	movs	r0, #1
 800a86e:	e779      	b.n	800a764 <_dtoa_r+0x804>
 800a870:	2300      	movs	r3, #0
 800a872:	e7f6      	b.n	800a862 <_dtoa_r+0x902>
 800a874:	9b02      	ldr	r3, [sp, #8]
 800a876:	e7f4      	b.n	800a862 <_dtoa_r+0x902>
 800a878:	d085      	beq.n	800a786 <_dtoa_r+0x826>
 800a87a:	4618      	mov	r0, r3
 800a87c:	301c      	adds	r0, #28
 800a87e:	e77d      	b.n	800a77c <_dtoa_r+0x81c>
 800a880:	40240000 	.word	0x40240000
 800a884:	9b01      	ldr	r3, [sp, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	dc38      	bgt.n	800a8fc <_dtoa_r+0x99c>
 800a88a:	9b05      	ldr	r3, [sp, #20]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	dd35      	ble.n	800a8fc <_dtoa_r+0x99c>
 800a890:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a894:	f1b9 0f00 	cmp.w	r9, #0
 800a898:	d10d      	bne.n	800a8b6 <_dtoa_r+0x956>
 800a89a:	4631      	mov	r1, r6
 800a89c:	464b      	mov	r3, r9
 800a89e:	2205      	movs	r2, #5
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f000 ff57 	bl	800b754 <__multadd>
 800a8a6:	4601      	mov	r1, r0
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	4658      	mov	r0, fp
 800a8ac:	f001 f9b8 	bl	800bc20 <__mcmp>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	f73f adbd 	bgt.w	800a430 <_dtoa_r+0x4d0>
 800a8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b8:	9d00      	ldr	r5, [sp, #0]
 800a8ba:	ea6f 0a03 	mvn.w	sl, r3
 800a8be:	f04f 0800 	mov.w	r8, #0
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 ff23 	bl	800b710 <_Bfree>
 800a8ca:	2f00      	cmp	r7, #0
 800a8cc:	f43f aeb4 	beq.w	800a638 <_dtoa_r+0x6d8>
 800a8d0:	f1b8 0f00 	cmp.w	r8, #0
 800a8d4:	d005      	beq.n	800a8e2 <_dtoa_r+0x982>
 800a8d6:	45b8      	cmp	r8, r7
 800a8d8:	d003      	beq.n	800a8e2 <_dtoa_r+0x982>
 800a8da:	4641      	mov	r1, r8
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 ff17 	bl	800b710 <_Bfree>
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 ff13 	bl	800b710 <_Bfree>
 800a8ea:	e6a5      	b.n	800a638 <_dtoa_r+0x6d8>
 800a8ec:	2600      	movs	r6, #0
 800a8ee:	4637      	mov	r7, r6
 800a8f0:	e7e1      	b.n	800a8b6 <_dtoa_r+0x956>
 800a8f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a8f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a8f8:	4637      	mov	r7, r6
 800a8fa:	e599      	b.n	800a430 <_dtoa_r+0x4d0>
 800a8fc:	9b08      	ldr	r3, [sp, #32]
 800a8fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 80fd 	beq.w	800ab02 <_dtoa_r+0xba2>
 800a908:	2d00      	cmp	r5, #0
 800a90a:	dd05      	ble.n	800a918 <_dtoa_r+0x9b8>
 800a90c:	4639      	mov	r1, r7
 800a90e:	462a      	mov	r2, r5
 800a910:	4620      	mov	r0, r4
 800a912:	f001 f919 	bl	800bb48 <__lshift>
 800a916:	4607      	mov	r7, r0
 800a918:	9b06      	ldr	r3, [sp, #24]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d05c      	beq.n	800a9d8 <_dtoa_r+0xa78>
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	4620      	mov	r0, r4
 800a922:	f000 feb5 	bl	800b690 <_Balloc>
 800a926:	4605      	mov	r5, r0
 800a928:	b928      	cbnz	r0, 800a936 <_dtoa_r+0x9d6>
 800a92a:	4b80      	ldr	r3, [pc, #512]	; (800ab2c <_dtoa_r+0xbcc>)
 800a92c:	4602      	mov	r2, r0
 800a92e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a932:	f7ff bb2e 	b.w	8009f92 <_dtoa_r+0x32>
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	3202      	adds	r2, #2
 800a93a:	0092      	lsls	r2, r2, #2
 800a93c:	f107 010c 	add.w	r1, r7, #12
 800a940:	300c      	adds	r0, #12
 800a942:	f7fd fbc9 	bl	80080d8 <memcpy>
 800a946:	2201      	movs	r2, #1
 800a948:	4629      	mov	r1, r5
 800a94a:	4620      	mov	r0, r4
 800a94c:	f001 f8fc 	bl	800bb48 <__lshift>
 800a950:	9b00      	ldr	r3, [sp, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	9b00      	ldr	r3, [sp, #0]
 800a958:	444b      	add	r3, r9
 800a95a:	9307      	str	r3, [sp, #28]
 800a95c:	9b02      	ldr	r3, [sp, #8]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	46b8      	mov	r8, r7
 800a964:	9306      	str	r3, [sp, #24]
 800a966:	4607      	mov	r7, r0
 800a968:	9b01      	ldr	r3, [sp, #4]
 800a96a:	4631      	mov	r1, r6
 800a96c:	3b01      	subs	r3, #1
 800a96e:	4658      	mov	r0, fp
 800a970:	9302      	str	r3, [sp, #8]
 800a972:	f7ff fa67 	bl	8009e44 <quorem>
 800a976:	4603      	mov	r3, r0
 800a978:	3330      	adds	r3, #48	; 0x30
 800a97a:	9004      	str	r0, [sp, #16]
 800a97c:	4641      	mov	r1, r8
 800a97e:	4658      	mov	r0, fp
 800a980:	9308      	str	r3, [sp, #32]
 800a982:	f001 f94d 	bl	800bc20 <__mcmp>
 800a986:	463a      	mov	r2, r7
 800a988:	4681      	mov	r9, r0
 800a98a:	4631      	mov	r1, r6
 800a98c:	4620      	mov	r0, r4
 800a98e:	f001 f963 	bl	800bc58 <__mdiff>
 800a992:	68c2      	ldr	r2, [r0, #12]
 800a994:	9b08      	ldr	r3, [sp, #32]
 800a996:	4605      	mov	r5, r0
 800a998:	bb02      	cbnz	r2, 800a9dc <_dtoa_r+0xa7c>
 800a99a:	4601      	mov	r1, r0
 800a99c:	4658      	mov	r0, fp
 800a99e:	f001 f93f 	bl	800bc20 <__mcmp>
 800a9a2:	9b08      	ldr	r3, [sp, #32]
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a9ae:	f000 feaf 	bl	800b710 <_Bfree>
 800a9b2:	9b05      	ldr	r3, [sp, #20]
 800a9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9b6:	9d01      	ldr	r5, [sp, #4]
 800a9b8:	ea43 0102 	orr.w	r1, r3, r2
 800a9bc:	9b06      	ldr	r3, [sp, #24]
 800a9be:	430b      	orrs	r3, r1
 800a9c0:	9b08      	ldr	r3, [sp, #32]
 800a9c2:	d10d      	bne.n	800a9e0 <_dtoa_r+0xa80>
 800a9c4:	2b39      	cmp	r3, #57	; 0x39
 800a9c6:	d029      	beq.n	800aa1c <_dtoa_r+0xabc>
 800a9c8:	f1b9 0f00 	cmp.w	r9, #0
 800a9cc:	dd01      	ble.n	800a9d2 <_dtoa_r+0xa72>
 800a9ce:	9b04      	ldr	r3, [sp, #16]
 800a9d0:	3331      	adds	r3, #49	; 0x31
 800a9d2:	9a02      	ldr	r2, [sp, #8]
 800a9d4:	7013      	strb	r3, [r2, #0]
 800a9d6:	e774      	b.n	800a8c2 <_dtoa_r+0x962>
 800a9d8:	4638      	mov	r0, r7
 800a9da:	e7b9      	b.n	800a950 <_dtoa_r+0x9f0>
 800a9dc:	2201      	movs	r2, #1
 800a9de:	e7e2      	b.n	800a9a6 <_dtoa_r+0xa46>
 800a9e0:	f1b9 0f00 	cmp.w	r9, #0
 800a9e4:	db06      	blt.n	800a9f4 <_dtoa_r+0xa94>
 800a9e6:	9905      	ldr	r1, [sp, #20]
 800a9e8:	ea41 0909 	orr.w	r9, r1, r9
 800a9ec:	9906      	ldr	r1, [sp, #24]
 800a9ee:	ea59 0101 	orrs.w	r1, r9, r1
 800a9f2:	d120      	bne.n	800aa36 <_dtoa_r+0xad6>
 800a9f4:	2a00      	cmp	r2, #0
 800a9f6:	ddec      	ble.n	800a9d2 <_dtoa_r+0xa72>
 800a9f8:	4659      	mov	r1, fp
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	9301      	str	r3, [sp, #4]
 800aa00:	f001 f8a2 	bl	800bb48 <__lshift>
 800aa04:	4631      	mov	r1, r6
 800aa06:	4683      	mov	fp, r0
 800aa08:	f001 f90a 	bl	800bc20 <__mcmp>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	9b01      	ldr	r3, [sp, #4]
 800aa10:	dc02      	bgt.n	800aa18 <_dtoa_r+0xab8>
 800aa12:	d1de      	bne.n	800a9d2 <_dtoa_r+0xa72>
 800aa14:	07da      	lsls	r2, r3, #31
 800aa16:	d5dc      	bpl.n	800a9d2 <_dtoa_r+0xa72>
 800aa18:	2b39      	cmp	r3, #57	; 0x39
 800aa1a:	d1d8      	bne.n	800a9ce <_dtoa_r+0xa6e>
 800aa1c:	9a02      	ldr	r2, [sp, #8]
 800aa1e:	2339      	movs	r3, #57	; 0x39
 800aa20:	7013      	strb	r3, [r2, #0]
 800aa22:	462b      	mov	r3, r5
 800aa24:	461d      	mov	r5, r3
 800aa26:	3b01      	subs	r3, #1
 800aa28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa2c:	2a39      	cmp	r2, #57	; 0x39
 800aa2e:	d050      	beq.n	800aad2 <_dtoa_r+0xb72>
 800aa30:	3201      	adds	r2, #1
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	e745      	b.n	800a8c2 <_dtoa_r+0x962>
 800aa36:	2a00      	cmp	r2, #0
 800aa38:	dd03      	ble.n	800aa42 <_dtoa_r+0xae2>
 800aa3a:	2b39      	cmp	r3, #57	; 0x39
 800aa3c:	d0ee      	beq.n	800aa1c <_dtoa_r+0xabc>
 800aa3e:	3301      	adds	r3, #1
 800aa40:	e7c7      	b.n	800a9d2 <_dtoa_r+0xa72>
 800aa42:	9a01      	ldr	r2, [sp, #4]
 800aa44:	9907      	ldr	r1, [sp, #28]
 800aa46:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa4a:	428a      	cmp	r2, r1
 800aa4c:	d02a      	beq.n	800aaa4 <_dtoa_r+0xb44>
 800aa4e:	4659      	mov	r1, fp
 800aa50:	2300      	movs	r3, #0
 800aa52:	220a      	movs	r2, #10
 800aa54:	4620      	mov	r0, r4
 800aa56:	f000 fe7d 	bl	800b754 <__multadd>
 800aa5a:	45b8      	cmp	r8, r7
 800aa5c:	4683      	mov	fp, r0
 800aa5e:	f04f 0300 	mov.w	r3, #0
 800aa62:	f04f 020a 	mov.w	r2, #10
 800aa66:	4641      	mov	r1, r8
 800aa68:	4620      	mov	r0, r4
 800aa6a:	d107      	bne.n	800aa7c <_dtoa_r+0xb1c>
 800aa6c:	f000 fe72 	bl	800b754 <__multadd>
 800aa70:	4680      	mov	r8, r0
 800aa72:	4607      	mov	r7, r0
 800aa74:	9b01      	ldr	r3, [sp, #4]
 800aa76:	3301      	adds	r3, #1
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	e775      	b.n	800a968 <_dtoa_r+0xa08>
 800aa7c:	f000 fe6a 	bl	800b754 <__multadd>
 800aa80:	4639      	mov	r1, r7
 800aa82:	4680      	mov	r8, r0
 800aa84:	2300      	movs	r3, #0
 800aa86:	220a      	movs	r2, #10
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f000 fe63 	bl	800b754 <__multadd>
 800aa8e:	4607      	mov	r7, r0
 800aa90:	e7f0      	b.n	800aa74 <_dtoa_r+0xb14>
 800aa92:	f1b9 0f00 	cmp.w	r9, #0
 800aa96:	9a00      	ldr	r2, [sp, #0]
 800aa98:	bfcc      	ite	gt
 800aa9a:	464d      	movgt	r5, r9
 800aa9c:	2501      	movle	r5, #1
 800aa9e:	4415      	add	r5, r2
 800aaa0:	f04f 0800 	mov.w	r8, #0
 800aaa4:	4659      	mov	r1, fp
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	9301      	str	r3, [sp, #4]
 800aaac:	f001 f84c 	bl	800bb48 <__lshift>
 800aab0:	4631      	mov	r1, r6
 800aab2:	4683      	mov	fp, r0
 800aab4:	f001 f8b4 	bl	800bc20 <__mcmp>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	dcb2      	bgt.n	800aa22 <_dtoa_r+0xac2>
 800aabc:	d102      	bne.n	800aac4 <_dtoa_r+0xb64>
 800aabe:	9b01      	ldr	r3, [sp, #4]
 800aac0:	07db      	lsls	r3, r3, #31
 800aac2:	d4ae      	bmi.n	800aa22 <_dtoa_r+0xac2>
 800aac4:	462b      	mov	r3, r5
 800aac6:	461d      	mov	r5, r3
 800aac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aacc:	2a30      	cmp	r2, #48	; 0x30
 800aace:	d0fa      	beq.n	800aac6 <_dtoa_r+0xb66>
 800aad0:	e6f7      	b.n	800a8c2 <_dtoa_r+0x962>
 800aad2:	9a00      	ldr	r2, [sp, #0]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d1a5      	bne.n	800aa24 <_dtoa_r+0xac4>
 800aad8:	f10a 0a01 	add.w	sl, sl, #1
 800aadc:	2331      	movs	r3, #49	; 0x31
 800aade:	e779      	b.n	800a9d4 <_dtoa_r+0xa74>
 800aae0:	4b13      	ldr	r3, [pc, #76]	; (800ab30 <_dtoa_r+0xbd0>)
 800aae2:	f7ff baaf 	b.w	800a044 <_dtoa_r+0xe4>
 800aae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f47f aa86 	bne.w	8009ffa <_dtoa_r+0x9a>
 800aaee:	4b11      	ldr	r3, [pc, #68]	; (800ab34 <_dtoa_r+0xbd4>)
 800aaf0:	f7ff baa8 	b.w	800a044 <_dtoa_r+0xe4>
 800aaf4:	f1b9 0f00 	cmp.w	r9, #0
 800aaf8:	dc03      	bgt.n	800ab02 <_dtoa_r+0xba2>
 800aafa:	9b05      	ldr	r3, [sp, #20]
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	f73f aec9 	bgt.w	800a894 <_dtoa_r+0x934>
 800ab02:	9d00      	ldr	r5, [sp, #0]
 800ab04:	4631      	mov	r1, r6
 800ab06:	4658      	mov	r0, fp
 800ab08:	f7ff f99c 	bl	8009e44 <quorem>
 800ab0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab10:	f805 3b01 	strb.w	r3, [r5], #1
 800ab14:	9a00      	ldr	r2, [sp, #0]
 800ab16:	1aaa      	subs	r2, r5, r2
 800ab18:	4591      	cmp	r9, r2
 800ab1a:	ddba      	ble.n	800aa92 <_dtoa_r+0xb32>
 800ab1c:	4659      	mov	r1, fp
 800ab1e:	2300      	movs	r3, #0
 800ab20:	220a      	movs	r2, #10
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 fe16 	bl	800b754 <__multadd>
 800ab28:	4683      	mov	fp, r0
 800ab2a:	e7eb      	b.n	800ab04 <_dtoa_r+0xba4>
 800ab2c:	0800cd1c 	.word	0x0800cd1c
 800ab30:	0800cb18 	.word	0x0800cb18
 800ab34:	0800cc99 	.word	0x0800cc99

0800ab38 <__sflush_r>:
 800ab38:	898a      	ldrh	r2, [r1, #12]
 800ab3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3e:	4605      	mov	r5, r0
 800ab40:	0710      	lsls	r0, r2, #28
 800ab42:	460c      	mov	r4, r1
 800ab44:	d458      	bmi.n	800abf8 <__sflush_r+0xc0>
 800ab46:	684b      	ldr	r3, [r1, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	dc05      	bgt.n	800ab58 <__sflush_r+0x20>
 800ab4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	dc02      	bgt.n	800ab58 <__sflush_r+0x20>
 800ab52:	2000      	movs	r0, #0
 800ab54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab5a:	2e00      	cmp	r6, #0
 800ab5c:	d0f9      	beq.n	800ab52 <__sflush_r+0x1a>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab64:	682f      	ldr	r7, [r5, #0]
 800ab66:	602b      	str	r3, [r5, #0]
 800ab68:	d032      	beq.n	800abd0 <__sflush_r+0x98>
 800ab6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	075a      	lsls	r2, r3, #29
 800ab70:	d505      	bpl.n	800ab7e <__sflush_r+0x46>
 800ab72:	6863      	ldr	r3, [r4, #4]
 800ab74:	1ac0      	subs	r0, r0, r3
 800ab76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab78:	b10b      	cbz	r3, 800ab7e <__sflush_r+0x46>
 800ab7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab7c:	1ac0      	subs	r0, r0, r3
 800ab7e:	2300      	movs	r3, #0
 800ab80:	4602      	mov	r2, r0
 800ab82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab84:	6a21      	ldr	r1, [r4, #32]
 800ab86:	4628      	mov	r0, r5
 800ab88:	47b0      	blx	r6
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	89a3      	ldrh	r3, [r4, #12]
 800ab8e:	d106      	bne.n	800ab9e <__sflush_r+0x66>
 800ab90:	6829      	ldr	r1, [r5, #0]
 800ab92:	291d      	cmp	r1, #29
 800ab94:	d82c      	bhi.n	800abf0 <__sflush_r+0xb8>
 800ab96:	4a2a      	ldr	r2, [pc, #168]	; (800ac40 <__sflush_r+0x108>)
 800ab98:	40ca      	lsrs	r2, r1
 800ab9a:	07d6      	lsls	r6, r2, #31
 800ab9c:	d528      	bpl.n	800abf0 <__sflush_r+0xb8>
 800ab9e:	2200      	movs	r2, #0
 800aba0:	6062      	str	r2, [r4, #4]
 800aba2:	04d9      	lsls	r1, r3, #19
 800aba4:	6922      	ldr	r2, [r4, #16]
 800aba6:	6022      	str	r2, [r4, #0]
 800aba8:	d504      	bpl.n	800abb4 <__sflush_r+0x7c>
 800abaa:	1c42      	adds	r2, r0, #1
 800abac:	d101      	bne.n	800abb2 <__sflush_r+0x7a>
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	b903      	cbnz	r3, 800abb4 <__sflush_r+0x7c>
 800abb2:	6560      	str	r0, [r4, #84]	; 0x54
 800abb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abb6:	602f      	str	r7, [r5, #0]
 800abb8:	2900      	cmp	r1, #0
 800abba:	d0ca      	beq.n	800ab52 <__sflush_r+0x1a>
 800abbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abc0:	4299      	cmp	r1, r3
 800abc2:	d002      	beq.n	800abca <__sflush_r+0x92>
 800abc4:	4628      	mov	r0, r5
 800abc6:	f001 fa2d 	bl	800c024 <_free_r>
 800abca:	2000      	movs	r0, #0
 800abcc:	6360      	str	r0, [r4, #52]	; 0x34
 800abce:	e7c1      	b.n	800ab54 <__sflush_r+0x1c>
 800abd0:	6a21      	ldr	r1, [r4, #32]
 800abd2:	2301      	movs	r3, #1
 800abd4:	4628      	mov	r0, r5
 800abd6:	47b0      	blx	r6
 800abd8:	1c41      	adds	r1, r0, #1
 800abda:	d1c7      	bne.n	800ab6c <__sflush_r+0x34>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0c4      	beq.n	800ab6c <__sflush_r+0x34>
 800abe2:	2b1d      	cmp	r3, #29
 800abe4:	d001      	beq.n	800abea <__sflush_r+0xb2>
 800abe6:	2b16      	cmp	r3, #22
 800abe8:	d101      	bne.n	800abee <__sflush_r+0xb6>
 800abea:	602f      	str	r7, [r5, #0]
 800abec:	e7b1      	b.n	800ab52 <__sflush_r+0x1a>
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf4:	81a3      	strh	r3, [r4, #12]
 800abf6:	e7ad      	b.n	800ab54 <__sflush_r+0x1c>
 800abf8:	690f      	ldr	r7, [r1, #16]
 800abfa:	2f00      	cmp	r7, #0
 800abfc:	d0a9      	beq.n	800ab52 <__sflush_r+0x1a>
 800abfe:	0793      	lsls	r3, r2, #30
 800ac00:	680e      	ldr	r6, [r1, #0]
 800ac02:	bf08      	it	eq
 800ac04:	694b      	ldreq	r3, [r1, #20]
 800ac06:	600f      	str	r7, [r1, #0]
 800ac08:	bf18      	it	ne
 800ac0a:	2300      	movne	r3, #0
 800ac0c:	eba6 0807 	sub.w	r8, r6, r7
 800ac10:	608b      	str	r3, [r1, #8]
 800ac12:	f1b8 0f00 	cmp.w	r8, #0
 800ac16:	dd9c      	ble.n	800ab52 <__sflush_r+0x1a>
 800ac18:	6a21      	ldr	r1, [r4, #32]
 800ac1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac1c:	4643      	mov	r3, r8
 800ac1e:	463a      	mov	r2, r7
 800ac20:	4628      	mov	r0, r5
 800ac22:	47b0      	blx	r6
 800ac24:	2800      	cmp	r0, #0
 800ac26:	dc06      	bgt.n	800ac36 <__sflush_r+0xfe>
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac2e:	81a3      	strh	r3, [r4, #12]
 800ac30:	f04f 30ff 	mov.w	r0, #4294967295
 800ac34:	e78e      	b.n	800ab54 <__sflush_r+0x1c>
 800ac36:	4407      	add	r7, r0
 800ac38:	eba8 0800 	sub.w	r8, r8, r0
 800ac3c:	e7e9      	b.n	800ac12 <__sflush_r+0xda>
 800ac3e:	bf00      	nop
 800ac40:	20400001 	.word	0x20400001

0800ac44 <_fflush_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	690b      	ldr	r3, [r1, #16]
 800ac48:	4605      	mov	r5, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	b913      	cbnz	r3, 800ac54 <_fflush_r+0x10>
 800ac4e:	2500      	movs	r5, #0
 800ac50:	4628      	mov	r0, r5
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	b118      	cbz	r0, 800ac5e <_fflush_r+0x1a>
 800ac56:	6983      	ldr	r3, [r0, #24]
 800ac58:	b90b      	cbnz	r3, 800ac5e <_fflush_r+0x1a>
 800ac5a:	f000 f887 	bl	800ad6c <__sinit>
 800ac5e:	4b14      	ldr	r3, [pc, #80]	; (800acb0 <_fflush_r+0x6c>)
 800ac60:	429c      	cmp	r4, r3
 800ac62:	d11b      	bne.n	800ac9c <_fflush_r+0x58>
 800ac64:	686c      	ldr	r4, [r5, #4]
 800ac66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d0ef      	beq.n	800ac4e <_fflush_r+0xa>
 800ac6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac70:	07d0      	lsls	r0, r2, #31
 800ac72:	d404      	bmi.n	800ac7e <_fflush_r+0x3a>
 800ac74:	0599      	lsls	r1, r3, #22
 800ac76:	d402      	bmi.n	800ac7e <_fflush_r+0x3a>
 800ac78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac7a:	f000 fc88 	bl	800b58e <__retarget_lock_acquire_recursive>
 800ac7e:	4628      	mov	r0, r5
 800ac80:	4621      	mov	r1, r4
 800ac82:	f7ff ff59 	bl	800ab38 <__sflush_r>
 800ac86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac88:	07da      	lsls	r2, r3, #31
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	d4e0      	bmi.n	800ac50 <_fflush_r+0xc>
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	059b      	lsls	r3, r3, #22
 800ac92:	d4dd      	bmi.n	800ac50 <_fflush_r+0xc>
 800ac94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac96:	f000 fc7b 	bl	800b590 <__retarget_lock_release_recursive>
 800ac9a:	e7d9      	b.n	800ac50 <_fflush_r+0xc>
 800ac9c:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <_fflush_r+0x70>)
 800ac9e:	429c      	cmp	r4, r3
 800aca0:	d101      	bne.n	800aca6 <_fflush_r+0x62>
 800aca2:	68ac      	ldr	r4, [r5, #8]
 800aca4:	e7df      	b.n	800ac66 <_fflush_r+0x22>
 800aca6:	4b04      	ldr	r3, [pc, #16]	; (800acb8 <_fflush_r+0x74>)
 800aca8:	429c      	cmp	r4, r3
 800acaa:	bf08      	it	eq
 800acac:	68ec      	ldreq	r4, [r5, #12]
 800acae:	e7da      	b.n	800ac66 <_fflush_r+0x22>
 800acb0:	0800cd50 	.word	0x0800cd50
 800acb4:	0800cd70 	.word	0x0800cd70
 800acb8:	0800cd30 	.word	0x0800cd30

0800acbc <std>:
 800acbc:	2300      	movs	r3, #0
 800acbe:	b510      	push	{r4, lr}
 800acc0:	4604      	mov	r4, r0
 800acc2:	e9c0 3300 	strd	r3, r3, [r0]
 800acc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acca:	6083      	str	r3, [r0, #8]
 800accc:	8181      	strh	r1, [r0, #12]
 800acce:	6643      	str	r3, [r0, #100]	; 0x64
 800acd0:	81c2      	strh	r2, [r0, #14]
 800acd2:	6183      	str	r3, [r0, #24]
 800acd4:	4619      	mov	r1, r3
 800acd6:	2208      	movs	r2, #8
 800acd8:	305c      	adds	r0, #92	; 0x5c
 800acda:	f7fd fa0b 	bl	80080f4 <memset>
 800acde:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <std+0x38>)
 800ace0:	6263      	str	r3, [r4, #36]	; 0x24
 800ace2:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <std+0x3c>)
 800ace4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <std+0x40>)
 800ace8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acea:	4b05      	ldr	r3, [pc, #20]	; (800ad00 <std+0x44>)
 800acec:	6224      	str	r4, [r4, #32]
 800acee:	6323      	str	r3, [r4, #48]	; 0x30
 800acf0:	bd10      	pop	{r4, pc}
 800acf2:	bf00      	nop
 800acf4:	0800c719 	.word	0x0800c719
 800acf8:	0800c73b 	.word	0x0800c73b
 800acfc:	0800c773 	.word	0x0800c773
 800ad00:	0800c797 	.word	0x0800c797

0800ad04 <_cleanup_r>:
 800ad04:	4901      	ldr	r1, [pc, #4]	; (800ad0c <_cleanup_r+0x8>)
 800ad06:	f000 b8af 	b.w	800ae68 <_fwalk_reent>
 800ad0a:	bf00      	nop
 800ad0c:	0800ac45 	.word	0x0800ac45

0800ad10 <__sfmoreglue>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	1e4a      	subs	r2, r1, #1
 800ad14:	2568      	movs	r5, #104	; 0x68
 800ad16:	4355      	muls	r5, r2
 800ad18:	460e      	mov	r6, r1
 800ad1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad1e:	f001 f9d1 	bl	800c0c4 <_malloc_r>
 800ad22:	4604      	mov	r4, r0
 800ad24:	b140      	cbz	r0, 800ad38 <__sfmoreglue+0x28>
 800ad26:	2100      	movs	r1, #0
 800ad28:	e9c0 1600 	strd	r1, r6, [r0]
 800ad2c:	300c      	adds	r0, #12
 800ad2e:	60a0      	str	r0, [r4, #8]
 800ad30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad34:	f7fd f9de 	bl	80080f4 <memset>
 800ad38:	4620      	mov	r0, r4
 800ad3a:	bd70      	pop	{r4, r5, r6, pc}

0800ad3c <__sfp_lock_acquire>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__sfp_lock_acquire+0x8>)
 800ad3e:	f000 bc26 	b.w	800b58e <__retarget_lock_acquire_recursive>
 800ad42:	bf00      	nop
 800ad44:	20000754 	.word	0x20000754

0800ad48 <__sfp_lock_release>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__sfp_lock_release+0x8>)
 800ad4a:	f000 bc21 	b.w	800b590 <__retarget_lock_release_recursive>
 800ad4e:	bf00      	nop
 800ad50:	20000754 	.word	0x20000754

0800ad54 <__sinit_lock_acquire>:
 800ad54:	4801      	ldr	r0, [pc, #4]	; (800ad5c <__sinit_lock_acquire+0x8>)
 800ad56:	f000 bc1a 	b.w	800b58e <__retarget_lock_acquire_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	2000074f 	.word	0x2000074f

0800ad60 <__sinit_lock_release>:
 800ad60:	4801      	ldr	r0, [pc, #4]	; (800ad68 <__sinit_lock_release+0x8>)
 800ad62:	f000 bc15 	b.w	800b590 <__retarget_lock_release_recursive>
 800ad66:	bf00      	nop
 800ad68:	2000074f 	.word	0x2000074f

0800ad6c <__sinit>:
 800ad6c:	b510      	push	{r4, lr}
 800ad6e:	4604      	mov	r4, r0
 800ad70:	f7ff fff0 	bl	800ad54 <__sinit_lock_acquire>
 800ad74:	69a3      	ldr	r3, [r4, #24]
 800ad76:	b11b      	cbz	r3, 800ad80 <__sinit+0x14>
 800ad78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad7c:	f7ff bff0 	b.w	800ad60 <__sinit_lock_release>
 800ad80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad84:	6523      	str	r3, [r4, #80]	; 0x50
 800ad86:	4b13      	ldr	r3, [pc, #76]	; (800add4 <__sinit+0x68>)
 800ad88:	4a13      	ldr	r2, [pc, #76]	; (800add8 <__sinit+0x6c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad8e:	42a3      	cmp	r3, r4
 800ad90:	bf04      	itt	eq
 800ad92:	2301      	moveq	r3, #1
 800ad94:	61a3      	streq	r3, [r4, #24]
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 f820 	bl	800addc <__sfp>
 800ad9c:	6060      	str	r0, [r4, #4]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 f81c 	bl	800addc <__sfp>
 800ada4:	60a0      	str	r0, [r4, #8]
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 f818 	bl	800addc <__sfp>
 800adac:	2200      	movs	r2, #0
 800adae:	60e0      	str	r0, [r4, #12]
 800adb0:	2104      	movs	r1, #4
 800adb2:	6860      	ldr	r0, [r4, #4]
 800adb4:	f7ff ff82 	bl	800acbc <std>
 800adb8:	68a0      	ldr	r0, [r4, #8]
 800adba:	2201      	movs	r2, #1
 800adbc:	2109      	movs	r1, #9
 800adbe:	f7ff ff7d 	bl	800acbc <std>
 800adc2:	68e0      	ldr	r0, [r4, #12]
 800adc4:	2202      	movs	r2, #2
 800adc6:	2112      	movs	r1, #18
 800adc8:	f7ff ff78 	bl	800acbc <std>
 800adcc:	2301      	movs	r3, #1
 800adce:	61a3      	str	r3, [r4, #24]
 800add0:	e7d2      	b.n	800ad78 <__sinit+0xc>
 800add2:	bf00      	nop
 800add4:	0800cb04 	.word	0x0800cb04
 800add8:	0800ad05 	.word	0x0800ad05

0800addc <__sfp>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	4607      	mov	r7, r0
 800ade0:	f7ff ffac 	bl	800ad3c <__sfp_lock_acquire>
 800ade4:	4b1e      	ldr	r3, [pc, #120]	; (800ae60 <__sfp+0x84>)
 800ade6:	681e      	ldr	r6, [r3, #0]
 800ade8:	69b3      	ldr	r3, [r6, #24]
 800adea:	b913      	cbnz	r3, 800adf2 <__sfp+0x16>
 800adec:	4630      	mov	r0, r6
 800adee:	f7ff ffbd 	bl	800ad6c <__sinit>
 800adf2:	3648      	adds	r6, #72	; 0x48
 800adf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	d503      	bpl.n	800ae04 <__sfp+0x28>
 800adfc:	6833      	ldr	r3, [r6, #0]
 800adfe:	b30b      	cbz	r3, 800ae44 <__sfp+0x68>
 800ae00:	6836      	ldr	r6, [r6, #0]
 800ae02:	e7f7      	b.n	800adf4 <__sfp+0x18>
 800ae04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae08:	b9d5      	cbnz	r5, 800ae40 <__sfp+0x64>
 800ae0a:	4b16      	ldr	r3, [pc, #88]	; (800ae64 <__sfp+0x88>)
 800ae0c:	60e3      	str	r3, [r4, #12]
 800ae0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae12:	6665      	str	r5, [r4, #100]	; 0x64
 800ae14:	f000 fbba 	bl	800b58c <__retarget_lock_init_recursive>
 800ae18:	f7ff ff96 	bl	800ad48 <__sfp_lock_release>
 800ae1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae24:	6025      	str	r5, [r4, #0]
 800ae26:	61a5      	str	r5, [r4, #24]
 800ae28:	2208      	movs	r2, #8
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae30:	f7fd f960 	bl	80080f4 <memset>
 800ae34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae40:	3468      	adds	r4, #104	; 0x68
 800ae42:	e7d9      	b.n	800adf8 <__sfp+0x1c>
 800ae44:	2104      	movs	r1, #4
 800ae46:	4638      	mov	r0, r7
 800ae48:	f7ff ff62 	bl	800ad10 <__sfmoreglue>
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	6030      	str	r0, [r6, #0]
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d1d5      	bne.n	800ae00 <__sfp+0x24>
 800ae54:	f7ff ff78 	bl	800ad48 <__sfp_lock_release>
 800ae58:	230c      	movs	r3, #12
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	e7ee      	b.n	800ae3c <__sfp+0x60>
 800ae5e:	bf00      	nop
 800ae60:	0800cb04 	.word	0x0800cb04
 800ae64:	ffff0001 	.word	0xffff0001

0800ae68 <_fwalk_reent>:
 800ae68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	4688      	mov	r8, r1
 800ae70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae74:	2700      	movs	r7, #0
 800ae76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae7a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae7e:	d505      	bpl.n	800ae8c <_fwalk_reent+0x24>
 800ae80:	6824      	ldr	r4, [r4, #0]
 800ae82:	2c00      	cmp	r4, #0
 800ae84:	d1f7      	bne.n	800ae76 <_fwalk_reent+0xe>
 800ae86:	4638      	mov	r0, r7
 800ae88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8c:	89ab      	ldrh	r3, [r5, #12]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d907      	bls.n	800aea2 <_fwalk_reent+0x3a>
 800ae92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae96:	3301      	adds	r3, #1
 800ae98:	d003      	beq.n	800aea2 <_fwalk_reent+0x3a>
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	47c0      	blx	r8
 800aea0:	4307      	orrs	r7, r0
 800aea2:	3568      	adds	r5, #104	; 0x68
 800aea4:	e7e9      	b.n	800ae7a <_fwalk_reent+0x12>

0800aea6 <rshift>:
 800aea6:	6903      	ldr	r3, [r0, #16]
 800aea8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aeac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aeb0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aeb4:	f100 0414 	add.w	r4, r0, #20
 800aeb8:	dd45      	ble.n	800af46 <rshift+0xa0>
 800aeba:	f011 011f 	ands.w	r1, r1, #31
 800aebe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aec2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aec6:	d10c      	bne.n	800aee2 <rshift+0x3c>
 800aec8:	f100 0710 	add.w	r7, r0, #16
 800aecc:	4629      	mov	r1, r5
 800aece:	42b1      	cmp	r1, r6
 800aed0:	d334      	bcc.n	800af3c <rshift+0x96>
 800aed2:	1a9b      	subs	r3, r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	1eea      	subs	r2, r5, #3
 800aed8:	4296      	cmp	r6, r2
 800aeda:	bf38      	it	cc
 800aedc:	2300      	movcc	r3, #0
 800aede:	4423      	add	r3, r4
 800aee0:	e015      	b.n	800af0e <rshift+0x68>
 800aee2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aee6:	f1c1 0820 	rsb	r8, r1, #32
 800aeea:	40cf      	lsrs	r7, r1
 800aeec:	f105 0e04 	add.w	lr, r5, #4
 800aef0:	46a1      	mov	r9, r4
 800aef2:	4576      	cmp	r6, lr
 800aef4:	46f4      	mov	ip, lr
 800aef6:	d815      	bhi.n	800af24 <rshift+0x7e>
 800aef8:	1a9b      	subs	r3, r3, r2
 800aefa:	009a      	lsls	r2, r3, #2
 800aefc:	3a04      	subs	r2, #4
 800aefe:	3501      	adds	r5, #1
 800af00:	42ae      	cmp	r6, r5
 800af02:	bf38      	it	cc
 800af04:	2200      	movcc	r2, #0
 800af06:	18a3      	adds	r3, r4, r2
 800af08:	50a7      	str	r7, [r4, r2]
 800af0a:	b107      	cbz	r7, 800af0e <rshift+0x68>
 800af0c:	3304      	adds	r3, #4
 800af0e:	1b1a      	subs	r2, r3, r4
 800af10:	42a3      	cmp	r3, r4
 800af12:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af16:	bf08      	it	eq
 800af18:	2300      	moveq	r3, #0
 800af1a:	6102      	str	r2, [r0, #16]
 800af1c:	bf08      	it	eq
 800af1e:	6143      	streq	r3, [r0, #20]
 800af20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af24:	f8dc c000 	ldr.w	ip, [ip]
 800af28:	fa0c fc08 	lsl.w	ip, ip, r8
 800af2c:	ea4c 0707 	orr.w	r7, ip, r7
 800af30:	f849 7b04 	str.w	r7, [r9], #4
 800af34:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af38:	40cf      	lsrs	r7, r1
 800af3a:	e7da      	b.n	800aef2 <rshift+0x4c>
 800af3c:	f851 cb04 	ldr.w	ip, [r1], #4
 800af40:	f847 cf04 	str.w	ip, [r7, #4]!
 800af44:	e7c3      	b.n	800aece <rshift+0x28>
 800af46:	4623      	mov	r3, r4
 800af48:	e7e1      	b.n	800af0e <rshift+0x68>

0800af4a <__hexdig_fun>:
 800af4a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af4e:	2b09      	cmp	r3, #9
 800af50:	d802      	bhi.n	800af58 <__hexdig_fun+0xe>
 800af52:	3820      	subs	r0, #32
 800af54:	b2c0      	uxtb	r0, r0
 800af56:	4770      	bx	lr
 800af58:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af5c:	2b05      	cmp	r3, #5
 800af5e:	d801      	bhi.n	800af64 <__hexdig_fun+0x1a>
 800af60:	3847      	subs	r0, #71	; 0x47
 800af62:	e7f7      	b.n	800af54 <__hexdig_fun+0xa>
 800af64:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af68:	2b05      	cmp	r3, #5
 800af6a:	d801      	bhi.n	800af70 <__hexdig_fun+0x26>
 800af6c:	3827      	subs	r0, #39	; 0x27
 800af6e:	e7f1      	b.n	800af54 <__hexdig_fun+0xa>
 800af70:	2000      	movs	r0, #0
 800af72:	4770      	bx	lr

0800af74 <__gethex>:
 800af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	ed2d 8b02 	vpush	{d8}
 800af7c:	b089      	sub	sp, #36	; 0x24
 800af7e:	ee08 0a10 	vmov	s16, r0
 800af82:	9304      	str	r3, [sp, #16]
 800af84:	4bbc      	ldr	r3, [pc, #752]	; (800b278 <__gethex+0x304>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	4618      	mov	r0, r3
 800af8c:	468b      	mov	fp, r1
 800af8e:	4690      	mov	r8, r2
 800af90:	f7f5 f91e 	bl	80001d0 <strlen>
 800af94:	9b01      	ldr	r3, [sp, #4]
 800af96:	f8db 2000 	ldr.w	r2, [fp]
 800af9a:	4403      	add	r3, r0
 800af9c:	4682      	mov	sl, r0
 800af9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800afa2:	9305      	str	r3, [sp, #20]
 800afa4:	1c93      	adds	r3, r2, #2
 800afa6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800afaa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800afae:	32fe      	adds	r2, #254	; 0xfe
 800afb0:	18d1      	adds	r1, r2, r3
 800afb2:	461f      	mov	r7, r3
 800afb4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800afb8:	9100      	str	r1, [sp, #0]
 800afba:	2830      	cmp	r0, #48	; 0x30
 800afbc:	d0f8      	beq.n	800afb0 <__gethex+0x3c>
 800afbe:	f7ff ffc4 	bl	800af4a <__hexdig_fun>
 800afc2:	4604      	mov	r4, r0
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d13a      	bne.n	800b03e <__gethex+0xca>
 800afc8:	9901      	ldr	r1, [sp, #4]
 800afca:	4652      	mov	r2, sl
 800afcc:	4638      	mov	r0, r7
 800afce:	f001 fbe6 	bl	800c79e <strncmp>
 800afd2:	4605      	mov	r5, r0
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d168      	bne.n	800b0aa <__gethex+0x136>
 800afd8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800afdc:	eb07 060a 	add.w	r6, r7, sl
 800afe0:	f7ff ffb3 	bl	800af4a <__hexdig_fun>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d062      	beq.n	800b0ae <__gethex+0x13a>
 800afe8:	4633      	mov	r3, r6
 800afea:	7818      	ldrb	r0, [r3, #0]
 800afec:	2830      	cmp	r0, #48	; 0x30
 800afee:	461f      	mov	r7, r3
 800aff0:	f103 0301 	add.w	r3, r3, #1
 800aff4:	d0f9      	beq.n	800afea <__gethex+0x76>
 800aff6:	f7ff ffa8 	bl	800af4a <__hexdig_fun>
 800affa:	2301      	movs	r3, #1
 800affc:	fab0 f480 	clz	r4, r0
 800b000:	0964      	lsrs	r4, r4, #5
 800b002:	4635      	mov	r5, r6
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	463a      	mov	r2, r7
 800b008:	4616      	mov	r6, r2
 800b00a:	3201      	adds	r2, #1
 800b00c:	7830      	ldrb	r0, [r6, #0]
 800b00e:	f7ff ff9c 	bl	800af4a <__hexdig_fun>
 800b012:	2800      	cmp	r0, #0
 800b014:	d1f8      	bne.n	800b008 <__gethex+0x94>
 800b016:	9901      	ldr	r1, [sp, #4]
 800b018:	4652      	mov	r2, sl
 800b01a:	4630      	mov	r0, r6
 800b01c:	f001 fbbf 	bl	800c79e <strncmp>
 800b020:	b980      	cbnz	r0, 800b044 <__gethex+0xd0>
 800b022:	b94d      	cbnz	r5, 800b038 <__gethex+0xc4>
 800b024:	eb06 050a 	add.w	r5, r6, sl
 800b028:	462a      	mov	r2, r5
 800b02a:	4616      	mov	r6, r2
 800b02c:	3201      	adds	r2, #1
 800b02e:	7830      	ldrb	r0, [r6, #0]
 800b030:	f7ff ff8b 	bl	800af4a <__hexdig_fun>
 800b034:	2800      	cmp	r0, #0
 800b036:	d1f8      	bne.n	800b02a <__gethex+0xb6>
 800b038:	1bad      	subs	r5, r5, r6
 800b03a:	00ad      	lsls	r5, r5, #2
 800b03c:	e004      	b.n	800b048 <__gethex+0xd4>
 800b03e:	2400      	movs	r4, #0
 800b040:	4625      	mov	r5, r4
 800b042:	e7e0      	b.n	800b006 <__gethex+0x92>
 800b044:	2d00      	cmp	r5, #0
 800b046:	d1f7      	bne.n	800b038 <__gethex+0xc4>
 800b048:	7833      	ldrb	r3, [r6, #0]
 800b04a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b04e:	2b50      	cmp	r3, #80	; 0x50
 800b050:	d13b      	bne.n	800b0ca <__gethex+0x156>
 800b052:	7873      	ldrb	r3, [r6, #1]
 800b054:	2b2b      	cmp	r3, #43	; 0x2b
 800b056:	d02c      	beq.n	800b0b2 <__gethex+0x13e>
 800b058:	2b2d      	cmp	r3, #45	; 0x2d
 800b05a:	d02e      	beq.n	800b0ba <__gethex+0x146>
 800b05c:	1c71      	adds	r1, r6, #1
 800b05e:	f04f 0900 	mov.w	r9, #0
 800b062:	7808      	ldrb	r0, [r1, #0]
 800b064:	f7ff ff71 	bl	800af4a <__hexdig_fun>
 800b068:	1e43      	subs	r3, r0, #1
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b18      	cmp	r3, #24
 800b06e:	d82c      	bhi.n	800b0ca <__gethex+0x156>
 800b070:	f1a0 0210 	sub.w	r2, r0, #16
 800b074:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b078:	f7ff ff67 	bl	800af4a <__hexdig_fun>
 800b07c:	1e43      	subs	r3, r0, #1
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b18      	cmp	r3, #24
 800b082:	d91d      	bls.n	800b0c0 <__gethex+0x14c>
 800b084:	f1b9 0f00 	cmp.w	r9, #0
 800b088:	d000      	beq.n	800b08c <__gethex+0x118>
 800b08a:	4252      	negs	r2, r2
 800b08c:	4415      	add	r5, r2
 800b08e:	f8cb 1000 	str.w	r1, [fp]
 800b092:	b1e4      	cbz	r4, 800b0ce <__gethex+0x15a>
 800b094:	9b00      	ldr	r3, [sp, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	bf14      	ite	ne
 800b09a:	2700      	movne	r7, #0
 800b09c:	2706      	moveq	r7, #6
 800b09e:	4638      	mov	r0, r7
 800b0a0:	b009      	add	sp, #36	; 0x24
 800b0a2:	ecbd 8b02 	vpop	{d8}
 800b0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0aa:	463e      	mov	r6, r7
 800b0ac:	4625      	mov	r5, r4
 800b0ae:	2401      	movs	r4, #1
 800b0b0:	e7ca      	b.n	800b048 <__gethex+0xd4>
 800b0b2:	f04f 0900 	mov.w	r9, #0
 800b0b6:	1cb1      	adds	r1, r6, #2
 800b0b8:	e7d3      	b.n	800b062 <__gethex+0xee>
 800b0ba:	f04f 0901 	mov.w	r9, #1
 800b0be:	e7fa      	b.n	800b0b6 <__gethex+0x142>
 800b0c0:	230a      	movs	r3, #10
 800b0c2:	fb03 0202 	mla	r2, r3, r2, r0
 800b0c6:	3a10      	subs	r2, #16
 800b0c8:	e7d4      	b.n	800b074 <__gethex+0x100>
 800b0ca:	4631      	mov	r1, r6
 800b0cc:	e7df      	b.n	800b08e <__gethex+0x11a>
 800b0ce:	1bf3      	subs	r3, r6, r7
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	2b07      	cmp	r3, #7
 800b0d6:	dc0b      	bgt.n	800b0f0 <__gethex+0x17c>
 800b0d8:	ee18 0a10 	vmov	r0, s16
 800b0dc:	f000 fad8 	bl	800b690 <_Balloc>
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	b940      	cbnz	r0, 800b0f6 <__gethex+0x182>
 800b0e4:	4b65      	ldr	r3, [pc, #404]	; (800b27c <__gethex+0x308>)
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	21de      	movs	r1, #222	; 0xde
 800b0ea:	4865      	ldr	r0, [pc, #404]	; (800b280 <__gethex+0x30c>)
 800b0ec:	f001 fb88 	bl	800c800 <__assert_func>
 800b0f0:	3101      	adds	r1, #1
 800b0f2:	105b      	asrs	r3, r3, #1
 800b0f4:	e7ee      	b.n	800b0d4 <__gethex+0x160>
 800b0f6:	f100 0914 	add.w	r9, r0, #20
 800b0fa:	f04f 0b00 	mov.w	fp, #0
 800b0fe:	f1ca 0301 	rsb	r3, sl, #1
 800b102:	f8cd 9008 	str.w	r9, [sp, #8]
 800b106:	f8cd b000 	str.w	fp, [sp]
 800b10a:	9306      	str	r3, [sp, #24]
 800b10c:	42b7      	cmp	r7, r6
 800b10e:	d340      	bcc.n	800b192 <__gethex+0x21e>
 800b110:	9802      	ldr	r0, [sp, #8]
 800b112:	9b00      	ldr	r3, [sp, #0]
 800b114:	f840 3b04 	str.w	r3, [r0], #4
 800b118:	eba0 0009 	sub.w	r0, r0, r9
 800b11c:	1080      	asrs	r0, r0, #2
 800b11e:	0146      	lsls	r6, r0, #5
 800b120:	6120      	str	r0, [r4, #16]
 800b122:	4618      	mov	r0, r3
 800b124:	f000 fbaa 	bl	800b87c <__hi0bits>
 800b128:	1a30      	subs	r0, r6, r0
 800b12a:	f8d8 6000 	ldr.w	r6, [r8]
 800b12e:	42b0      	cmp	r0, r6
 800b130:	dd63      	ble.n	800b1fa <__gethex+0x286>
 800b132:	1b87      	subs	r7, r0, r6
 800b134:	4639      	mov	r1, r7
 800b136:	4620      	mov	r0, r4
 800b138:	f000 ff44 	bl	800bfc4 <__any_on>
 800b13c:	4682      	mov	sl, r0
 800b13e:	b1a8      	cbz	r0, 800b16c <__gethex+0x1f8>
 800b140:	1e7b      	subs	r3, r7, #1
 800b142:	1159      	asrs	r1, r3, #5
 800b144:	f003 021f 	and.w	r2, r3, #31
 800b148:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b14c:	f04f 0a01 	mov.w	sl, #1
 800b150:	fa0a f202 	lsl.w	r2, sl, r2
 800b154:	420a      	tst	r2, r1
 800b156:	d009      	beq.n	800b16c <__gethex+0x1f8>
 800b158:	4553      	cmp	r3, sl
 800b15a:	dd05      	ble.n	800b168 <__gethex+0x1f4>
 800b15c:	1eb9      	subs	r1, r7, #2
 800b15e:	4620      	mov	r0, r4
 800b160:	f000 ff30 	bl	800bfc4 <__any_on>
 800b164:	2800      	cmp	r0, #0
 800b166:	d145      	bne.n	800b1f4 <__gethex+0x280>
 800b168:	f04f 0a02 	mov.w	sl, #2
 800b16c:	4639      	mov	r1, r7
 800b16e:	4620      	mov	r0, r4
 800b170:	f7ff fe99 	bl	800aea6 <rshift>
 800b174:	443d      	add	r5, r7
 800b176:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b17a:	42ab      	cmp	r3, r5
 800b17c:	da4c      	bge.n	800b218 <__gethex+0x2a4>
 800b17e:	ee18 0a10 	vmov	r0, s16
 800b182:	4621      	mov	r1, r4
 800b184:	f000 fac4 	bl	800b710 <_Bfree>
 800b188:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b18a:	2300      	movs	r3, #0
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	27a3      	movs	r7, #163	; 0xa3
 800b190:	e785      	b.n	800b09e <__gethex+0x12a>
 800b192:	1e73      	subs	r3, r6, #1
 800b194:	9a05      	ldr	r2, [sp, #20]
 800b196:	9303      	str	r3, [sp, #12]
 800b198:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d019      	beq.n	800b1d4 <__gethex+0x260>
 800b1a0:	f1bb 0f20 	cmp.w	fp, #32
 800b1a4:	d107      	bne.n	800b1b6 <__gethex+0x242>
 800b1a6:	9b02      	ldr	r3, [sp, #8]
 800b1a8:	9a00      	ldr	r2, [sp, #0]
 800b1aa:	f843 2b04 	str.w	r2, [r3], #4
 800b1ae:	9302      	str	r3, [sp, #8]
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	469b      	mov	fp, r3
 800b1b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b1ba:	f7ff fec6 	bl	800af4a <__hexdig_fun>
 800b1be:	9b00      	ldr	r3, [sp, #0]
 800b1c0:	f000 000f 	and.w	r0, r0, #15
 800b1c4:	fa00 f00b 	lsl.w	r0, r0, fp
 800b1c8:	4303      	orrs	r3, r0
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	f10b 0b04 	add.w	fp, fp, #4
 800b1d0:	9b03      	ldr	r3, [sp, #12]
 800b1d2:	e00d      	b.n	800b1f0 <__gethex+0x27c>
 800b1d4:	9b03      	ldr	r3, [sp, #12]
 800b1d6:	9a06      	ldr	r2, [sp, #24]
 800b1d8:	4413      	add	r3, r2
 800b1da:	42bb      	cmp	r3, r7
 800b1dc:	d3e0      	bcc.n	800b1a0 <__gethex+0x22c>
 800b1de:	4618      	mov	r0, r3
 800b1e0:	9901      	ldr	r1, [sp, #4]
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	4652      	mov	r2, sl
 800b1e6:	f001 fada 	bl	800c79e <strncmp>
 800b1ea:	9b07      	ldr	r3, [sp, #28]
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d1d7      	bne.n	800b1a0 <__gethex+0x22c>
 800b1f0:	461e      	mov	r6, r3
 800b1f2:	e78b      	b.n	800b10c <__gethex+0x198>
 800b1f4:	f04f 0a03 	mov.w	sl, #3
 800b1f8:	e7b8      	b.n	800b16c <__gethex+0x1f8>
 800b1fa:	da0a      	bge.n	800b212 <__gethex+0x29e>
 800b1fc:	1a37      	subs	r7, r6, r0
 800b1fe:	4621      	mov	r1, r4
 800b200:	ee18 0a10 	vmov	r0, s16
 800b204:	463a      	mov	r2, r7
 800b206:	f000 fc9f 	bl	800bb48 <__lshift>
 800b20a:	1bed      	subs	r5, r5, r7
 800b20c:	4604      	mov	r4, r0
 800b20e:	f100 0914 	add.w	r9, r0, #20
 800b212:	f04f 0a00 	mov.w	sl, #0
 800b216:	e7ae      	b.n	800b176 <__gethex+0x202>
 800b218:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b21c:	42a8      	cmp	r0, r5
 800b21e:	dd72      	ble.n	800b306 <__gethex+0x392>
 800b220:	1b45      	subs	r5, r0, r5
 800b222:	42ae      	cmp	r6, r5
 800b224:	dc36      	bgt.n	800b294 <__gethex+0x320>
 800b226:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d02a      	beq.n	800b284 <__gethex+0x310>
 800b22e:	2b03      	cmp	r3, #3
 800b230:	d02c      	beq.n	800b28c <__gethex+0x318>
 800b232:	2b01      	cmp	r3, #1
 800b234:	d115      	bne.n	800b262 <__gethex+0x2ee>
 800b236:	42ae      	cmp	r6, r5
 800b238:	d113      	bne.n	800b262 <__gethex+0x2ee>
 800b23a:	2e01      	cmp	r6, #1
 800b23c:	d10b      	bne.n	800b256 <__gethex+0x2e2>
 800b23e:	9a04      	ldr	r2, [sp, #16]
 800b240:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b244:	6013      	str	r3, [r2, #0]
 800b246:	2301      	movs	r3, #1
 800b248:	6123      	str	r3, [r4, #16]
 800b24a:	f8c9 3000 	str.w	r3, [r9]
 800b24e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b250:	2762      	movs	r7, #98	; 0x62
 800b252:	601c      	str	r4, [r3, #0]
 800b254:	e723      	b.n	800b09e <__gethex+0x12a>
 800b256:	1e71      	subs	r1, r6, #1
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 feb3 	bl	800bfc4 <__any_on>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d1ed      	bne.n	800b23e <__gethex+0x2ca>
 800b262:	ee18 0a10 	vmov	r0, s16
 800b266:	4621      	mov	r1, r4
 800b268:	f000 fa52 	bl	800b710 <_Bfree>
 800b26c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b26e:	2300      	movs	r3, #0
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	2750      	movs	r7, #80	; 0x50
 800b274:	e713      	b.n	800b09e <__gethex+0x12a>
 800b276:	bf00      	nop
 800b278:	0800cdfc 	.word	0x0800cdfc
 800b27c:	0800cd1c 	.word	0x0800cd1c
 800b280:	0800cd90 	.word	0x0800cd90
 800b284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1eb      	bne.n	800b262 <__gethex+0x2ee>
 800b28a:	e7d8      	b.n	800b23e <__gethex+0x2ca>
 800b28c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1d5      	bne.n	800b23e <__gethex+0x2ca>
 800b292:	e7e6      	b.n	800b262 <__gethex+0x2ee>
 800b294:	1e6f      	subs	r7, r5, #1
 800b296:	f1ba 0f00 	cmp.w	sl, #0
 800b29a:	d131      	bne.n	800b300 <__gethex+0x38c>
 800b29c:	b127      	cbz	r7, 800b2a8 <__gethex+0x334>
 800b29e:	4639      	mov	r1, r7
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 fe8f 	bl	800bfc4 <__any_on>
 800b2a6:	4682      	mov	sl, r0
 800b2a8:	117b      	asrs	r3, r7, #5
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b2b0:	f007 071f 	and.w	r7, r7, #31
 800b2b4:	fa01 f707 	lsl.w	r7, r1, r7
 800b2b8:	421f      	tst	r7, r3
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	4620      	mov	r0, r4
 800b2be:	bf18      	it	ne
 800b2c0:	f04a 0a02 	orrne.w	sl, sl, #2
 800b2c4:	1b76      	subs	r6, r6, r5
 800b2c6:	f7ff fdee 	bl	800aea6 <rshift>
 800b2ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b2ce:	2702      	movs	r7, #2
 800b2d0:	f1ba 0f00 	cmp.w	sl, #0
 800b2d4:	d048      	beq.n	800b368 <__gethex+0x3f4>
 800b2d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d015      	beq.n	800b30a <__gethex+0x396>
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d017      	beq.n	800b312 <__gethex+0x39e>
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d109      	bne.n	800b2fa <__gethex+0x386>
 800b2e6:	f01a 0f02 	tst.w	sl, #2
 800b2ea:	d006      	beq.n	800b2fa <__gethex+0x386>
 800b2ec:	f8d9 0000 	ldr.w	r0, [r9]
 800b2f0:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2f4:	f01a 0f01 	tst.w	sl, #1
 800b2f8:	d10e      	bne.n	800b318 <__gethex+0x3a4>
 800b2fa:	f047 0710 	orr.w	r7, r7, #16
 800b2fe:	e033      	b.n	800b368 <__gethex+0x3f4>
 800b300:	f04f 0a01 	mov.w	sl, #1
 800b304:	e7d0      	b.n	800b2a8 <__gethex+0x334>
 800b306:	2701      	movs	r7, #1
 800b308:	e7e2      	b.n	800b2d0 <__gethex+0x35c>
 800b30a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b30c:	f1c3 0301 	rsb	r3, r3, #1
 800b310:	9315      	str	r3, [sp, #84]	; 0x54
 800b312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b314:	2b00      	cmp	r3, #0
 800b316:	d0f0      	beq.n	800b2fa <__gethex+0x386>
 800b318:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b31c:	f104 0314 	add.w	r3, r4, #20
 800b320:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b324:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b328:	f04f 0c00 	mov.w	ip, #0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b332:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b336:	d01c      	beq.n	800b372 <__gethex+0x3fe>
 800b338:	3201      	adds	r2, #1
 800b33a:	6002      	str	r2, [r0, #0]
 800b33c:	2f02      	cmp	r7, #2
 800b33e:	f104 0314 	add.w	r3, r4, #20
 800b342:	d13f      	bne.n	800b3c4 <__gethex+0x450>
 800b344:	f8d8 2000 	ldr.w	r2, [r8]
 800b348:	3a01      	subs	r2, #1
 800b34a:	42b2      	cmp	r2, r6
 800b34c:	d10a      	bne.n	800b364 <__gethex+0x3f0>
 800b34e:	1171      	asrs	r1, r6, #5
 800b350:	2201      	movs	r2, #1
 800b352:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b356:	f006 061f 	and.w	r6, r6, #31
 800b35a:	fa02 f606 	lsl.w	r6, r2, r6
 800b35e:	421e      	tst	r6, r3
 800b360:	bf18      	it	ne
 800b362:	4617      	movne	r7, r2
 800b364:	f047 0720 	orr.w	r7, r7, #32
 800b368:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b36a:	601c      	str	r4, [r3, #0]
 800b36c:	9b04      	ldr	r3, [sp, #16]
 800b36e:	601d      	str	r5, [r3, #0]
 800b370:	e695      	b.n	800b09e <__gethex+0x12a>
 800b372:	4299      	cmp	r1, r3
 800b374:	f843 cc04 	str.w	ip, [r3, #-4]
 800b378:	d8d8      	bhi.n	800b32c <__gethex+0x3b8>
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	459b      	cmp	fp, r3
 800b37e:	db19      	blt.n	800b3b4 <__gethex+0x440>
 800b380:	6861      	ldr	r1, [r4, #4]
 800b382:	ee18 0a10 	vmov	r0, s16
 800b386:	3101      	adds	r1, #1
 800b388:	f000 f982 	bl	800b690 <_Balloc>
 800b38c:	4681      	mov	r9, r0
 800b38e:	b918      	cbnz	r0, 800b398 <__gethex+0x424>
 800b390:	4b1a      	ldr	r3, [pc, #104]	; (800b3fc <__gethex+0x488>)
 800b392:	4602      	mov	r2, r0
 800b394:	2184      	movs	r1, #132	; 0x84
 800b396:	e6a8      	b.n	800b0ea <__gethex+0x176>
 800b398:	6922      	ldr	r2, [r4, #16]
 800b39a:	3202      	adds	r2, #2
 800b39c:	f104 010c 	add.w	r1, r4, #12
 800b3a0:	0092      	lsls	r2, r2, #2
 800b3a2:	300c      	adds	r0, #12
 800b3a4:	f7fc fe98 	bl	80080d8 <memcpy>
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	ee18 0a10 	vmov	r0, s16
 800b3ae:	f000 f9af 	bl	800b710 <_Bfree>
 800b3b2:	464c      	mov	r4, r9
 800b3b4:	6923      	ldr	r3, [r4, #16]
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3bc:	6122      	str	r2, [r4, #16]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	615a      	str	r2, [r3, #20]
 800b3c2:	e7bb      	b.n	800b33c <__gethex+0x3c8>
 800b3c4:	6922      	ldr	r2, [r4, #16]
 800b3c6:	455a      	cmp	r2, fp
 800b3c8:	dd0b      	ble.n	800b3e2 <__gethex+0x46e>
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f7ff fd6a 	bl	800aea6 <rshift>
 800b3d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3d6:	3501      	adds	r5, #1
 800b3d8:	42ab      	cmp	r3, r5
 800b3da:	f6ff aed0 	blt.w	800b17e <__gethex+0x20a>
 800b3de:	2701      	movs	r7, #1
 800b3e0:	e7c0      	b.n	800b364 <__gethex+0x3f0>
 800b3e2:	f016 061f 	ands.w	r6, r6, #31
 800b3e6:	d0fa      	beq.n	800b3de <__gethex+0x46a>
 800b3e8:	449a      	add	sl, r3
 800b3ea:	f1c6 0620 	rsb	r6, r6, #32
 800b3ee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b3f2:	f000 fa43 	bl	800b87c <__hi0bits>
 800b3f6:	42b0      	cmp	r0, r6
 800b3f8:	dbe7      	blt.n	800b3ca <__gethex+0x456>
 800b3fa:	e7f0      	b.n	800b3de <__gethex+0x46a>
 800b3fc:	0800cd1c 	.word	0x0800cd1c

0800b400 <L_shift>:
 800b400:	f1c2 0208 	rsb	r2, r2, #8
 800b404:	0092      	lsls	r2, r2, #2
 800b406:	b570      	push	{r4, r5, r6, lr}
 800b408:	f1c2 0620 	rsb	r6, r2, #32
 800b40c:	6843      	ldr	r3, [r0, #4]
 800b40e:	6804      	ldr	r4, [r0, #0]
 800b410:	fa03 f506 	lsl.w	r5, r3, r6
 800b414:	432c      	orrs	r4, r5
 800b416:	40d3      	lsrs	r3, r2
 800b418:	6004      	str	r4, [r0, #0]
 800b41a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b41e:	4288      	cmp	r0, r1
 800b420:	d3f4      	bcc.n	800b40c <L_shift+0xc>
 800b422:	bd70      	pop	{r4, r5, r6, pc}

0800b424 <__match>:
 800b424:	b530      	push	{r4, r5, lr}
 800b426:	6803      	ldr	r3, [r0, #0]
 800b428:	3301      	adds	r3, #1
 800b42a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b42e:	b914      	cbnz	r4, 800b436 <__match+0x12>
 800b430:	6003      	str	r3, [r0, #0]
 800b432:	2001      	movs	r0, #1
 800b434:	bd30      	pop	{r4, r5, pc}
 800b436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b43a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b43e:	2d19      	cmp	r5, #25
 800b440:	bf98      	it	ls
 800b442:	3220      	addls	r2, #32
 800b444:	42a2      	cmp	r2, r4
 800b446:	d0f0      	beq.n	800b42a <__match+0x6>
 800b448:	2000      	movs	r0, #0
 800b44a:	e7f3      	b.n	800b434 <__match+0x10>

0800b44c <__hexnan>:
 800b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b450:	680b      	ldr	r3, [r1, #0]
 800b452:	6801      	ldr	r1, [r0, #0]
 800b454:	115e      	asrs	r6, r3, #5
 800b456:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b45a:	f013 031f 	ands.w	r3, r3, #31
 800b45e:	b087      	sub	sp, #28
 800b460:	bf18      	it	ne
 800b462:	3604      	addne	r6, #4
 800b464:	2500      	movs	r5, #0
 800b466:	1f37      	subs	r7, r6, #4
 800b468:	4682      	mov	sl, r0
 800b46a:	4690      	mov	r8, r2
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b472:	46b9      	mov	r9, r7
 800b474:	463c      	mov	r4, r7
 800b476:	9502      	str	r5, [sp, #8]
 800b478:	46ab      	mov	fp, r5
 800b47a:	784a      	ldrb	r2, [r1, #1]
 800b47c:	1c4b      	adds	r3, r1, #1
 800b47e:	9303      	str	r3, [sp, #12]
 800b480:	b342      	cbz	r2, 800b4d4 <__hexnan+0x88>
 800b482:	4610      	mov	r0, r2
 800b484:	9105      	str	r1, [sp, #20]
 800b486:	9204      	str	r2, [sp, #16]
 800b488:	f7ff fd5f 	bl	800af4a <__hexdig_fun>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d14f      	bne.n	800b530 <__hexnan+0xe4>
 800b490:	9a04      	ldr	r2, [sp, #16]
 800b492:	9905      	ldr	r1, [sp, #20]
 800b494:	2a20      	cmp	r2, #32
 800b496:	d818      	bhi.n	800b4ca <__hexnan+0x7e>
 800b498:	9b02      	ldr	r3, [sp, #8]
 800b49a:	459b      	cmp	fp, r3
 800b49c:	dd13      	ble.n	800b4c6 <__hexnan+0x7a>
 800b49e:	454c      	cmp	r4, r9
 800b4a0:	d206      	bcs.n	800b4b0 <__hexnan+0x64>
 800b4a2:	2d07      	cmp	r5, #7
 800b4a4:	dc04      	bgt.n	800b4b0 <__hexnan+0x64>
 800b4a6:	462a      	mov	r2, r5
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f7ff ffa8 	bl	800b400 <L_shift>
 800b4b0:	4544      	cmp	r4, r8
 800b4b2:	d950      	bls.n	800b556 <__hexnan+0x10a>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f1a4 0904 	sub.w	r9, r4, #4
 800b4ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4be:	f8cd b008 	str.w	fp, [sp, #8]
 800b4c2:	464c      	mov	r4, r9
 800b4c4:	461d      	mov	r5, r3
 800b4c6:	9903      	ldr	r1, [sp, #12]
 800b4c8:	e7d7      	b.n	800b47a <__hexnan+0x2e>
 800b4ca:	2a29      	cmp	r2, #41	; 0x29
 800b4cc:	d156      	bne.n	800b57c <__hexnan+0x130>
 800b4ce:	3102      	adds	r1, #2
 800b4d0:	f8ca 1000 	str.w	r1, [sl]
 800b4d4:	f1bb 0f00 	cmp.w	fp, #0
 800b4d8:	d050      	beq.n	800b57c <__hexnan+0x130>
 800b4da:	454c      	cmp	r4, r9
 800b4dc:	d206      	bcs.n	800b4ec <__hexnan+0xa0>
 800b4de:	2d07      	cmp	r5, #7
 800b4e0:	dc04      	bgt.n	800b4ec <__hexnan+0xa0>
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f7ff ff8a 	bl	800b400 <L_shift>
 800b4ec:	4544      	cmp	r4, r8
 800b4ee:	d934      	bls.n	800b55a <__hexnan+0x10e>
 800b4f0:	f1a8 0204 	sub.w	r2, r8, #4
 800b4f4:	4623      	mov	r3, r4
 800b4f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4fa:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4fe:	429f      	cmp	r7, r3
 800b500:	d2f9      	bcs.n	800b4f6 <__hexnan+0xaa>
 800b502:	1b3b      	subs	r3, r7, r4
 800b504:	f023 0303 	bic.w	r3, r3, #3
 800b508:	3304      	adds	r3, #4
 800b50a:	3401      	adds	r4, #1
 800b50c:	3e03      	subs	r6, #3
 800b50e:	42b4      	cmp	r4, r6
 800b510:	bf88      	it	hi
 800b512:	2304      	movhi	r3, #4
 800b514:	4443      	add	r3, r8
 800b516:	2200      	movs	r2, #0
 800b518:	f843 2b04 	str.w	r2, [r3], #4
 800b51c:	429f      	cmp	r7, r3
 800b51e:	d2fb      	bcs.n	800b518 <__hexnan+0xcc>
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	b91b      	cbnz	r3, 800b52c <__hexnan+0xe0>
 800b524:	4547      	cmp	r7, r8
 800b526:	d127      	bne.n	800b578 <__hexnan+0x12c>
 800b528:	2301      	movs	r3, #1
 800b52a:	603b      	str	r3, [r7, #0]
 800b52c:	2005      	movs	r0, #5
 800b52e:	e026      	b.n	800b57e <__hexnan+0x132>
 800b530:	3501      	adds	r5, #1
 800b532:	2d08      	cmp	r5, #8
 800b534:	f10b 0b01 	add.w	fp, fp, #1
 800b538:	dd06      	ble.n	800b548 <__hexnan+0xfc>
 800b53a:	4544      	cmp	r4, r8
 800b53c:	d9c3      	bls.n	800b4c6 <__hexnan+0x7a>
 800b53e:	2300      	movs	r3, #0
 800b540:	f844 3c04 	str.w	r3, [r4, #-4]
 800b544:	2501      	movs	r5, #1
 800b546:	3c04      	subs	r4, #4
 800b548:	6822      	ldr	r2, [r4, #0]
 800b54a:	f000 000f 	and.w	r0, r0, #15
 800b54e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b552:	6022      	str	r2, [r4, #0]
 800b554:	e7b7      	b.n	800b4c6 <__hexnan+0x7a>
 800b556:	2508      	movs	r5, #8
 800b558:	e7b5      	b.n	800b4c6 <__hexnan+0x7a>
 800b55a:	9b01      	ldr	r3, [sp, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d0df      	beq.n	800b520 <__hexnan+0xd4>
 800b560:	f04f 32ff 	mov.w	r2, #4294967295
 800b564:	f1c3 0320 	rsb	r3, r3, #32
 800b568:	fa22 f303 	lsr.w	r3, r2, r3
 800b56c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b570:	401a      	ands	r2, r3
 800b572:	f846 2c04 	str.w	r2, [r6, #-4]
 800b576:	e7d3      	b.n	800b520 <__hexnan+0xd4>
 800b578:	3f04      	subs	r7, #4
 800b57a:	e7d1      	b.n	800b520 <__hexnan+0xd4>
 800b57c:	2004      	movs	r0, #4
 800b57e:	b007      	add	sp, #28
 800b580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b584 <_localeconv_r>:
 800b584:	4800      	ldr	r0, [pc, #0]	; (800b588 <_localeconv_r+0x4>)
 800b586:	4770      	bx	lr
 800b588:	20000164 	.word	0x20000164

0800b58c <__retarget_lock_init_recursive>:
 800b58c:	4770      	bx	lr

0800b58e <__retarget_lock_acquire_recursive>:
 800b58e:	4770      	bx	lr

0800b590 <__retarget_lock_release_recursive>:
 800b590:	4770      	bx	lr

0800b592 <__swhatbuf_r>:
 800b592:	b570      	push	{r4, r5, r6, lr}
 800b594:	460e      	mov	r6, r1
 800b596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59a:	2900      	cmp	r1, #0
 800b59c:	b096      	sub	sp, #88	; 0x58
 800b59e:	4614      	mov	r4, r2
 800b5a0:	461d      	mov	r5, r3
 800b5a2:	da07      	bge.n	800b5b4 <__swhatbuf_r+0x22>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	602b      	str	r3, [r5, #0]
 800b5a8:	89b3      	ldrh	r3, [r6, #12]
 800b5aa:	061a      	lsls	r2, r3, #24
 800b5ac:	d410      	bmi.n	800b5d0 <__swhatbuf_r+0x3e>
 800b5ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5b2:	e00e      	b.n	800b5d2 <__swhatbuf_r+0x40>
 800b5b4:	466a      	mov	r2, sp
 800b5b6:	f001 f963 	bl	800c880 <_fstat_r>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	dbf2      	blt.n	800b5a4 <__swhatbuf_r+0x12>
 800b5be:	9a01      	ldr	r2, [sp, #4]
 800b5c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5c8:	425a      	negs	r2, r3
 800b5ca:	415a      	adcs	r2, r3
 800b5cc:	602a      	str	r2, [r5, #0]
 800b5ce:	e7ee      	b.n	800b5ae <__swhatbuf_r+0x1c>
 800b5d0:	2340      	movs	r3, #64	; 0x40
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	b016      	add	sp, #88	; 0x58
 800b5d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5dc <__smakebuf_r>:
 800b5dc:	898b      	ldrh	r3, [r1, #12]
 800b5de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5e0:	079d      	lsls	r5, r3, #30
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	d507      	bpl.n	800b5f8 <__smakebuf_r+0x1c>
 800b5e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	6163      	str	r3, [r4, #20]
 800b5f4:	b002      	add	sp, #8
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	ab01      	add	r3, sp, #4
 800b5fa:	466a      	mov	r2, sp
 800b5fc:	f7ff ffc9 	bl	800b592 <__swhatbuf_r>
 800b600:	9900      	ldr	r1, [sp, #0]
 800b602:	4605      	mov	r5, r0
 800b604:	4630      	mov	r0, r6
 800b606:	f000 fd5d 	bl	800c0c4 <_malloc_r>
 800b60a:	b948      	cbnz	r0, 800b620 <__smakebuf_r+0x44>
 800b60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b610:	059a      	lsls	r2, r3, #22
 800b612:	d4ef      	bmi.n	800b5f4 <__smakebuf_r+0x18>
 800b614:	f023 0303 	bic.w	r3, r3, #3
 800b618:	f043 0302 	orr.w	r3, r3, #2
 800b61c:	81a3      	strh	r3, [r4, #12]
 800b61e:	e7e3      	b.n	800b5e8 <__smakebuf_r+0xc>
 800b620:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <__smakebuf_r+0x7c>)
 800b622:	62b3      	str	r3, [r6, #40]	; 0x28
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	6020      	str	r0, [r4, #0]
 800b628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b62c:	81a3      	strh	r3, [r4, #12]
 800b62e:	9b00      	ldr	r3, [sp, #0]
 800b630:	6163      	str	r3, [r4, #20]
 800b632:	9b01      	ldr	r3, [sp, #4]
 800b634:	6120      	str	r0, [r4, #16]
 800b636:	b15b      	cbz	r3, 800b650 <__smakebuf_r+0x74>
 800b638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b63c:	4630      	mov	r0, r6
 800b63e:	f001 f931 	bl	800c8a4 <_isatty_r>
 800b642:	b128      	cbz	r0, 800b650 <__smakebuf_r+0x74>
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f023 0303 	bic.w	r3, r3, #3
 800b64a:	f043 0301 	orr.w	r3, r3, #1
 800b64e:	81a3      	strh	r3, [r4, #12]
 800b650:	89a0      	ldrh	r0, [r4, #12]
 800b652:	4305      	orrs	r5, r0
 800b654:	81a5      	strh	r5, [r4, #12]
 800b656:	e7cd      	b.n	800b5f4 <__smakebuf_r+0x18>
 800b658:	0800ad05 	.word	0x0800ad05

0800b65c <malloc>:
 800b65c:	4b02      	ldr	r3, [pc, #8]	; (800b668 <malloc+0xc>)
 800b65e:	4601      	mov	r1, r0
 800b660:	6818      	ldr	r0, [r3, #0]
 800b662:	f000 bd2f 	b.w	800c0c4 <_malloc_r>
 800b666:	bf00      	nop
 800b668:	2000000c 	.word	0x2000000c

0800b66c <__ascii_mbtowc>:
 800b66c:	b082      	sub	sp, #8
 800b66e:	b901      	cbnz	r1, 800b672 <__ascii_mbtowc+0x6>
 800b670:	a901      	add	r1, sp, #4
 800b672:	b142      	cbz	r2, 800b686 <__ascii_mbtowc+0x1a>
 800b674:	b14b      	cbz	r3, 800b68a <__ascii_mbtowc+0x1e>
 800b676:	7813      	ldrb	r3, [r2, #0]
 800b678:	600b      	str	r3, [r1, #0]
 800b67a:	7812      	ldrb	r2, [r2, #0]
 800b67c:	1e10      	subs	r0, r2, #0
 800b67e:	bf18      	it	ne
 800b680:	2001      	movne	r0, #1
 800b682:	b002      	add	sp, #8
 800b684:	4770      	bx	lr
 800b686:	4610      	mov	r0, r2
 800b688:	e7fb      	b.n	800b682 <__ascii_mbtowc+0x16>
 800b68a:	f06f 0001 	mvn.w	r0, #1
 800b68e:	e7f8      	b.n	800b682 <__ascii_mbtowc+0x16>

0800b690 <_Balloc>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b694:	4604      	mov	r4, r0
 800b696:	460d      	mov	r5, r1
 800b698:	b976      	cbnz	r6, 800b6b8 <_Balloc+0x28>
 800b69a:	2010      	movs	r0, #16
 800b69c:	f7ff ffde 	bl	800b65c <malloc>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	6260      	str	r0, [r4, #36]	; 0x24
 800b6a4:	b920      	cbnz	r0, 800b6b0 <_Balloc+0x20>
 800b6a6:	4b18      	ldr	r3, [pc, #96]	; (800b708 <_Balloc+0x78>)
 800b6a8:	4818      	ldr	r0, [pc, #96]	; (800b70c <_Balloc+0x7c>)
 800b6aa:	2166      	movs	r1, #102	; 0x66
 800b6ac:	f001 f8a8 	bl	800c800 <__assert_func>
 800b6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6b4:	6006      	str	r6, [r0, #0]
 800b6b6:	60c6      	str	r6, [r0, #12]
 800b6b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b6ba:	68f3      	ldr	r3, [r6, #12]
 800b6bc:	b183      	cbz	r3, 800b6e0 <_Balloc+0x50>
 800b6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6c6:	b9b8      	cbnz	r0, 800b6f8 <_Balloc+0x68>
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b6ce:	1d72      	adds	r2, r6, #5
 800b6d0:	0092      	lsls	r2, r2, #2
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f000 fc97 	bl	800c006 <_calloc_r>
 800b6d8:	b160      	cbz	r0, 800b6f4 <_Balloc+0x64>
 800b6da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b6de:	e00e      	b.n	800b6fe <_Balloc+0x6e>
 800b6e0:	2221      	movs	r2, #33	; 0x21
 800b6e2:	2104      	movs	r1, #4
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f000 fc8e 	bl	800c006 <_calloc_r>
 800b6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6ec:	60f0      	str	r0, [r6, #12]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e4      	bne.n	800b6be <_Balloc+0x2e>
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	bd70      	pop	{r4, r5, r6, pc}
 800b6f8:	6802      	ldr	r2, [r0, #0]
 800b6fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6fe:	2300      	movs	r3, #0
 800b700:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b704:	e7f7      	b.n	800b6f6 <_Balloc+0x66>
 800b706:	bf00      	nop
 800b708:	0800cca6 	.word	0x0800cca6
 800b70c:	0800ce10 	.word	0x0800ce10

0800b710 <_Bfree>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b714:	4605      	mov	r5, r0
 800b716:	460c      	mov	r4, r1
 800b718:	b976      	cbnz	r6, 800b738 <_Bfree+0x28>
 800b71a:	2010      	movs	r0, #16
 800b71c:	f7ff ff9e 	bl	800b65c <malloc>
 800b720:	4602      	mov	r2, r0
 800b722:	6268      	str	r0, [r5, #36]	; 0x24
 800b724:	b920      	cbnz	r0, 800b730 <_Bfree+0x20>
 800b726:	4b09      	ldr	r3, [pc, #36]	; (800b74c <_Bfree+0x3c>)
 800b728:	4809      	ldr	r0, [pc, #36]	; (800b750 <_Bfree+0x40>)
 800b72a:	218a      	movs	r1, #138	; 0x8a
 800b72c:	f001 f868 	bl	800c800 <__assert_func>
 800b730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b734:	6006      	str	r6, [r0, #0]
 800b736:	60c6      	str	r6, [r0, #12]
 800b738:	b13c      	cbz	r4, 800b74a <_Bfree+0x3a>
 800b73a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b73c:	6862      	ldr	r2, [r4, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b744:	6021      	str	r1, [r4, #0]
 800b746:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b74a:	bd70      	pop	{r4, r5, r6, pc}
 800b74c:	0800cca6 	.word	0x0800cca6
 800b750:	0800ce10 	.word	0x0800ce10

0800b754 <__multadd>:
 800b754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b758:	690e      	ldr	r6, [r1, #16]
 800b75a:	4607      	mov	r7, r0
 800b75c:	4698      	mov	r8, r3
 800b75e:	460c      	mov	r4, r1
 800b760:	f101 0014 	add.w	r0, r1, #20
 800b764:	2300      	movs	r3, #0
 800b766:	6805      	ldr	r5, [r0, #0]
 800b768:	b2a9      	uxth	r1, r5
 800b76a:	fb02 8101 	mla	r1, r2, r1, r8
 800b76e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b772:	0c2d      	lsrs	r5, r5, #16
 800b774:	fb02 c505 	mla	r5, r2, r5, ip
 800b778:	b289      	uxth	r1, r1
 800b77a:	3301      	adds	r3, #1
 800b77c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b780:	429e      	cmp	r6, r3
 800b782:	f840 1b04 	str.w	r1, [r0], #4
 800b786:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b78a:	dcec      	bgt.n	800b766 <__multadd+0x12>
 800b78c:	f1b8 0f00 	cmp.w	r8, #0
 800b790:	d022      	beq.n	800b7d8 <__multadd+0x84>
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	42b3      	cmp	r3, r6
 800b796:	dc19      	bgt.n	800b7cc <__multadd+0x78>
 800b798:	6861      	ldr	r1, [r4, #4]
 800b79a:	4638      	mov	r0, r7
 800b79c:	3101      	adds	r1, #1
 800b79e:	f7ff ff77 	bl	800b690 <_Balloc>
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	b928      	cbnz	r0, 800b7b2 <__multadd+0x5e>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	4b0d      	ldr	r3, [pc, #52]	; (800b7e0 <__multadd+0x8c>)
 800b7aa:	480e      	ldr	r0, [pc, #56]	; (800b7e4 <__multadd+0x90>)
 800b7ac:	21b5      	movs	r1, #181	; 0xb5
 800b7ae:	f001 f827 	bl	800c800 <__assert_func>
 800b7b2:	6922      	ldr	r2, [r4, #16]
 800b7b4:	3202      	adds	r2, #2
 800b7b6:	f104 010c 	add.w	r1, r4, #12
 800b7ba:	0092      	lsls	r2, r2, #2
 800b7bc:	300c      	adds	r0, #12
 800b7be:	f7fc fc8b 	bl	80080d8 <memcpy>
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	f7ff ffa3 	bl	800b710 <_Bfree>
 800b7ca:	462c      	mov	r4, r5
 800b7cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b7d0:	3601      	adds	r6, #1
 800b7d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800b7d6:	6126      	str	r6, [r4, #16]
 800b7d8:	4620      	mov	r0, r4
 800b7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7de:	bf00      	nop
 800b7e0:	0800cd1c 	.word	0x0800cd1c
 800b7e4:	0800ce10 	.word	0x0800ce10

0800b7e8 <__s2b>:
 800b7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ec:	460c      	mov	r4, r1
 800b7ee:	4615      	mov	r5, r2
 800b7f0:	461f      	mov	r7, r3
 800b7f2:	2209      	movs	r2, #9
 800b7f4:	3308      	adds	r3, #8
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	2201      	movs	r2, #1
 800b800:	429a      	cmp	r2, r3
 800b802:	db09      	blt.n	800b818 <__s2b+0x30>
 800b804:	4630      	mov	r0, r6
 800b806:	f7ff ff43 	bl	800b690 <_Balloc>
 800b80a:	b940      	cbnz	r0, 800b81e <__s2b+0x36>
 800b80c:	4602      	mov	r2, r0
 800b80e:	4b19      	ldr	r3, [pc, #100]	; (800b874 <__s2b+0x8c>)
 800b810:	4819      	ldr	r0, [pc, #100]	; (800b878 <__s2b+0x90>)
 800b812:	21ce      	movs	r1, #206	; 0xce
 800b814:	f000 fff4 	bl	800c800 <__assert_func>
 800b818:	0052      	lsls	r2, r2, #1
 800b81a:	3101      	adds	r1, #1
 800b81c:	e7f0      	b.n	800b800 <__s2b+0x18>
 800b81e:	9b08      	ldr	r3, [sp, #32]
 800b820:	6143      	str	r3, [r0, #20]
 800b822:	2d09      	cmp	r5, #9
 800b824:	f04f 0301 	mov.w	r3, #1
 800b828:	6103      	str	r3, [r0, #16]
 800b82a:	dd16      	ble.n	800b85a <__s2b+0x72>
 800b82c:	f104 0909 	add.w	r9, r4, #9
 800b830:	46c8      	mov	r8, r9
 800b832:	442c      	add	r4, r5
 800b834:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b838:	4601      	mov	r1, r0
 800b83a:	3b30      	subs	r3, #48	; 0x30
 800b83c:	220a      	movs	r2, #10
 800b83e:	4630      	mov	r0, r6
 800b840:	f7ff ff88 	bl	800b754 <__multadd>
 800b844:	45a0      	cmp	r8, r4
 800b846:	d1f5      	bne.n	800b834 <__s2b+0x4c>
 800b848:	f1a5 0408 	sub.w	r4, r5, #8
 800b84c:	444c      	add	r4, r9
 800b84e:	1b2d      	subs	r5, r5, r4
 800b850:	1963      	adds	r3, r4, r5
 800b852:	42bb      	cmp	r3, r7
 800b854:	db04      	blt.n	800b860 <__s2b+0x78>
 800b856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b85a:	340a      	adds	r4, #10
 800b85c:	2509      	movs	r5, #9
 800b85e:	e7f6      	b.n	800b84e <__s2b+0x66>
 800b860:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b864:	4601      	mov	r1, r0
 800b866:	3b30      	subs	r3, #48	; 0x30
 800b868:	220a      	movs	r2, #10
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7ff ff72 	bl	800b754 <__multadd>
 800b870:	e7ee      	b.n	800b850 <__s2b+0x68>
 800b872:	bf00      	nop
 800b874:	0800cd1c 	.word	0x0800cd1c
 800b878:	0800ce10 	.word	0x0800ce10

0800b87c <__hi0bits>:
 800b87c:	0c03      	lsrs	r3, r0, #16
 800b87e:	041b      	lsls	r3, r3, #16
 800b880:	b9d3      	cbnz	r3, 800b8b8 <__hi0bits+0x3c>
 800b882:	0400      	lsls	r0, r0, #16
 800b884:	2310      	movs	r3, #16
 800b886:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b88a:	bf04      	itt	eq
 800b88c:	0200      	lsleq	r0, r0, #8
 800b88e:	3308      	addeq	r3, #8
 800b890:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b894:	bf04      	itt	eq
 800b896:	0100      	lsleq	r0, r0, #4
 800b898:	3304      	addeq	r3, #4
 800b89a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b89e:	bf04      	itt	eq
 800b8a0:	0080      	lsleq	r0, r0, #2
 800b8a2:	3302      	addeq	r3, #2
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	db05      	blt.n	800b8b4 <__hi0bits+0x38>
 800b8a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8ac:	f103 0301 	add.w	r3, r3, #1
 800b8b0:	bf08      	it	eq
 800b8b2:	2320      	moveq	r3, #32
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	4770      	bx	lr
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	e7e4      	b.n	800b886 <__hi0bits+0xa>

0800b8bc <__lo0bits>:
 800b8bc:	6803      	ldr	r3, [r0, #0]
 800b8be:	f013 0207 	ands.w	r2, r3, #7
 800b8c2:	4601      	mov	r1, r0
 800b8c4:	d00b      	beq.n	800b8de <__lo0bits+0x22>
 800b8c6:	07da      	lsls	r2, r3, #31
 800b8c8:	d424      	bmi.n	800b914 <__lo0bits+0x58>
 800b8ca:	0798      	lsls	r0, r3, #30
 800b8cc:	bf49      	itett	mi
 800b8ce:	085b      	lsrmi	r3, r3, #1
 800b8d0:	089b      	lsrpl	r3, r3, #2
 800b8d2:	2001      	movmi	r0, #1
 800b8d4:	600b      	strmi	r3, [r1, #0]
 800b8d6:	bf5c      	itt	pl
 800b8d8:	600b      	strpl	r3, [r1, #0]
 800b8da:	2002      	movpl	r0, #2
 800b8dc:	4770      	bx	lr
 800b8de:	b298      	uxth	r0, r3
 800b8e0:	b9b0      	cbnz	r0, 800b910 <__lo0bits+0x54>
 800b8e2:	0c1b      	lsrs	r3, r3, #16
 800b8e4:	2010      	movs	r0, #16
 800b8e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b8ea:	bf04      	itt	eq
 800b8ec:	0a1b      	lsreq	r3, r3, #8
 800b8ee:	3008      	addeq	r0, #8
 800b8f0:	071a      	lsls	r2, r3, #28
 800b8f2:	bf04      	itt	eq
 800b8f4:	091b      	lsreq	r3, r3, #4
 800b8f6:	3004      	addeq	r0, #4
 800b8f8:	079a      	lsls	r2, r3, #30
 800b8fa:	bf04      	itt	eq
 800b8fc:	089b      	lsreq	r3, r3, #2
 800b8fe:	3002      	addeq	r0, #2
 800b900:	07da      	lsls	r2, r3, #31
 800b902:	d403      	bmi.n	800b90c <__lo0bits+0x50>
 800b904:	085b      	lsrs	r3, r3, #1
 800b906:	f100 0001 	add.w	r0, r0, #1
 800b90a:	d005      	beq.n	800b918 <__lo0bits+0x5c>
 800b90c:	600b      	str	r3, [r1, #0]
 800b90e:	4770      	bx	lr
 800b910:	4610      	mov	r0, r2
 800b912:	e7e8      	b.n	800b8e6 <__lo0bits+0x2a>
 800b914:	2000      	movs	r0, #0
 800b916:	4770      	bx	lr
 800b918:	2020      	movs	r0, #32
 800b91a:	4770      	bx	lr

0800b91c <__i2b>:
 800b91c:	b510      	push	{r4, lr}
 800b91e:	460c      	mov	r4, r1
 800b920:	2101      	movs	r1, #1
 800b922:	f7ff feb5 	bl	800b690 <_Balloc>
 800b926:	4602      	mov	r2, r0
 800b928:	b928      	cbnz	r0, 800b936 <__i2b+0x1a>
 800b92a:	4b05      	ldr	r3, [pc, #20]	; (800b940 <__i2b+0x24>)
 800b92c:	4805      	ldr	r0, [pc, #20]	; (800b944 <__i2b+0x28>)
 800b92e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b932:	f000 ff65 	bl	800c800 <__assert_func>
 800b936:	2301      	movs	r3, #1
 800b938:	6144      	str	r4, [r0, #20]
 800b93a:	6103      	str	r3, [r0, #16]
 800b93c:	bd10      	pop	{r4, pc}
 800b93e:	bf00      	nop
 800b940:	0800cd1c 	.word	0x0800cd1c
 800b944:	0800ce10 	.word	0x0800ce10

0800b948 <__multiply>:
 800b948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94c:	4614      	mov	r4, r2
 800b94e:	690a      	ldr	r2, [r1, #16]
 800b950:	6923      	ldr	r3, [r4, #16]
 800b952:	429a      	cmp	r2, r3
 800b954:	bfb8      	it	lt
 800b956:	460b      	movlt	r3, r1
 800b958:	460d      	mov	r5, r1
 800b95a:	bfbc      	itt	lt
 800b95c:	4625      	movlt	r5, r4
 800b95e:	461c      	movlt	r4, r3
 800b960:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b964:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b968:	68ab      	ldr	r3, [r5, #8]
 800b96a:	6869      	ldr	r1, [r5, #4]
 800b96c:	eb0a 0709 	add.w	r7, sl, r9
 800b970:	42bb      	cmp	r3, r7
 800b972:	b085      	sub	sp, #20
 800b974:	bfb8      	it	lt
 800b976:	3101      	addlt	r1, #1
 800b978:	f7ff fe8a 	bl	800b690 <_Balloc>
 800b97c:	b930      	cbnz	r0, 800b98c <__multiply+0x44>
 800b97e:	4602      	mov	r2, r0
 800b980:	4b42      	ldr	r3, [pc, #264]	; (800ba8c <__multiply+0x144>)
 800b982:	4843      	ldr	r0, [pc, #268]	; (800ba90 <__multiply+0x148>)
 800b984:	f240 115d 	movw	r1, #349	; 0x15d
 800b988:	f000 ff3a 	bl	800c800 <__assert_func>
 800b98c:	f100 0614 	add.w	r6, r0, #20
 800b990:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b994:	4633      	mov	r3, r6
 800b996:	2200      	movs	r2, #0
 800b998:	4543      	cmp	r3, r8
 800b99a:	d31e      	bcc.n	800b9da <__multiply+0x92>
 800b99c:	f105 0c14 	add.w	ip, r5, #20
 800b9a0:	f104 0314 	add.w	r3, r4, #20
 800b9a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b9a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b9ac:	9202      	str	r2, [sp, #8]
 800b9ae:	ebac 0205 	sub.w	r2, ip, r5
 800b9b2:	3a15      	subs	r2, #21
 800b9b4:	f022 0203 	bic.w	r2, r2, #3
 800b9b8:	3204      	adds	r2, #4
 800b9ba:	f105 0115 	add.w	r1, r5, #21
 800b9be:	458c      	cmp	ip, r1
 800b9c0:	bf38      	it	cc
 800b9c2:	2204      	movcc	r2, #4
 800b9c4:	9201      	str	r2, [sp, #4]
 800b9c6:	9a02      	ldr	r2, [sp, #8]
 800b9c8:	9303      	str	r3, [sp, #12]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d808      	bhi.n	800b9e0 <__multiply+0x98>
 800b9ce:	2f00      	cmp	r7, #0
 800b9d0:	dc55      	bgt.n	800ba7e <__multiply+0x136>
 800b9d2:	6107      	str	r7, [r0, #16]
 800b9d4:	b005      	add	sp, #20
 800b9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9da:	f843 2b04 	str.w	r2, [r3], #4
 800b9de:	e7db      	b.n	800b998 <__multiply+0x50>
 800b9e0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b9e4:	f1ba 0f00 	cmp.w	sl, #0
 800b9e8:	d020      	beq.n	800ba2c <__multiply+0xe4>
 800b9ea:	f105 0e14 	add.w	lr, r5, #20
 800b9ee:	46b1      	mov	r9, r6
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b9f6:	f8d9 b000 	ldr.w	fp, [r9]
 800b9fa:	b2a1      	uxth	r1, r4
 800b9fc:	fa1f fb8b 	uxth.w	fp, fp
 800ba00:	fb0a b101 	mla	r1, sl, r1, fp
 800ba04:	4411      	add	r1, r2
 800ba06:	f8d9 2000 	ldr.w	r2, [r9]
 800ba0a:	0c24      	lsrs	r4, r4, #16
 800ba0c:	0c12      	lsrs	r2, r2, #16
 800ba0e:	fb0a 2404 	mla	r4, sl, r4, r2
 800ba12:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ba16:	b289      	uxth	r1, r1
 800ba18:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ba1c:	45f4      	cmp	ip, lr
 800ba1e:	f849 1b04 	str.w	r1, [r9], #4
 800ba22:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ba26:	d8e4      	bhi.n	800b9f2 <__multiply+0xaa>
 800ba28:	9901      	ldr	r1, [sp, #4]
 800ba2a:	5072      	str	r2, [r6, r1]
 800ba2c:	9a03      	ldr	r2, [sp, #12]
 800ba2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba32:	3304      	adds	r3, #4
 800ba34:	f1b9 0f00 	cmp.w	r9, #0
 800ba38:	d01f      	beq.n	800ba7a <__multiply+0x132>
 800ba3a:	6834      	ldr	r4, [r6, #0]
 800ba3c:	f105 0114 	add.w	r1, r5, #20
 800ba40:	46b6      	mov	lr, r6
 800ba42:	f04f 0a00 	mov.w	sl, #0
 800ba46:	880a      	ldrh	r2, [r1, #0]
 800ba48:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ba4c:	fb09 b202 	mla	r2, r9, r2, fp
 800ba50:	4492      	add	sl, r2
 800ba52:	b2a4      	uxth	r4, r4
 800ba54:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ba58:	f84e 4b04 	str.w	r4, [lr], #4
 800ba5c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ba60:	f8be 2000 	ldrh.w	r2, [lr]
 800ba64:	0c24      	lsrs	r4, r4, #16
 800ba66:	fb09 2404 	mla	r4, r9, r4, r2
 800ba6a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ba6e:	458c      	cmp	ip, r1
 800ba70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ba74:	d8e7      	bhi.n	800ba46 <__multiply+0xfe>
 800ba76:	9a01      	ldr	r2, [sp, #4]
 800ba78:	50b4      	str	r4, [r6, r2]
 800ba7a:	3604      	adds	r6, #4
 800ba7c:	e7a3      	b.n	800b9c6 <__multiply+0x7e>
 800ba7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1a5      	bne.n	800b9d2 <__multiply+0x8a>
 800ba86:	3f01      	subs	r7, #1
 800ba88:	e7a1      	b.n	800b9ce <__multiply+0x86>
 800ba8a:	bf00      	nop
 800ba8c:	0800cd1c 	.word	0x0800cd1c
 800ba90:	0800ce10 	.word	0x0800ce10

0800ba94 <__pow5mult>:
 800ba94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba98:	4615      	mov	r5, r2
 800ba9a:	f012 0203 	ands.w	r2, r2, #3
 800ba9e:	4606      	mov	r6, r0
 800baa0:	460f      	mov	r7, r1
 800baa2:	d007      	beq.n	800bab4 <__pow5mult+0x20>
 800baa4:	4c25      	ldr	r4, [pc, #148]	; (800bb3c <__pow5mult+0xa8>)
 800baa6:	3a01      	subs	r2, #1
 800baa8:	2300      	movs	r3, #0
 800baaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800baae:	f7ff fe51 	bl	800b754 <__multadd>
 800bab2:	4607      	mov	r7, r0
 800bab4:	10ad      	asrs	r5, r5, #2
 800bab6:	d03d      	beq.n	800bb34 <__pow5mult+0xa0>
 800bab8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800baba:	b97c      	cbnz	r4, 800badc <__pow5mult+0x48>
 800babc:	2010      	movs	r0, #16
 800babe:	f7ff fdcd 	bl	800b65c <malloc>
 800bac2:	4602      	mov	r2, r0
 800bac4:	6270      	str	r0, [r6, #36]	; 0x24
 800bac6:	b928      	cbnz	r0, 800bad4 <__pow5mult+0x40>
 800bac8:	4b1d      	ldr	r3, [pc, #116]	; (800bb40 <__pow5mult+0xac>)
 800baca:	481e      	ldr	r0, [pc, #120]	; (800bb44 <__pow5mult+0xb0>)
 800bacc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bad0:	f000 fe96 	bl	800c800 <__assert_func>
 800bad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bad8:	6004      	str	r4, [r0, #0]
 800bada:	60c4      	str	r4, [r0, #12]
 800badc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bae4:	b94c      	cbnz	r4, 800bafa <__pow5mult+0x66>
 800bae6:	f240 2171 	movw	r1, #625	; 0x271
 800baea:	4630      	mov	r0, r6
 800baec:	f7ff ff16 	bl	800b91c <__i2b>
 800baf0:	2300      	movs	r3, #0
 800baf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800baf6:	4604      	mov	r4, r0
 800baf8:	6003      	str	r3, [r0, #0]
 800bafa:	f04f 0900 	mov.w	r9, #0
 800bafe:	07eb      	lsls	r3, r5, #31
 800bb00:	d50a      	bpl.n	800bb18 <__pow5mult+0x84>
 800bb02:	4639      	mov	r1, r7
 800bb04:	4622      	mov	r2, r4
 800bb06:	4630      	mov	r0, r6
 800bb08:	f7ff ff1e 	bl	800b948 <__multiply>
 800bb0c:	4639      	mov	r1, r7
 800bb0e:	4680      	mov	r8, r0
 800bb10:	4630      	mov	r0, r6
 800bb12:	f7ff fdfd 	bl	800b710 <_Bfree>
 800bb16:	4647      	mov	r7, r8
 800bb18:	106d      	asrs	r5, r5, #1
 800bb1a:	d00b      	beq.n	800bb34 <__pow5mult+0xa0>
 800bb1c:	6820      	ldr	r0, [r4, #0]
 800bb1e:	b938      	cbnz	r0, 800bb30 <__pow5mult+0x9c>
 800bb20:	4622      	mov	r2, r4
 800bb22:	4621      	mov	r1, r4
 800bb24:	4630      	mov	r0, r6
 800bb26:	f7ff ff0f 	bl	800b948 <__multiply>
 800bb2a:	6020      	str	r0, [r4, #0]
 800bb2c:	f8c0 9000 	str.w	r9, [r0]
 800bb30:	4604      	mov	r4, r0
 800bb32:	e7e4      	b.n	800bafe <__pow5mult+0x6a>
 800bb34:	4638      	mov	r0, r7
 800bb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb3a:	bf00      	nop
 800bb3c:	0800cf60 	.word	0x0800cf60
 800bb40:	0800cca6 	.word	0x0800cca6
 800bb44:	0800ce10 	.word	0x0800ce10

0800bb48 <__lshift>:
 800bb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	6849      	ldr	r1, [r1, #4]
 800bb50:	6923      	ldr	r3, [r4, #16]
 800bb52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	4607      	mov	r7, r0
 800bb5a:	4691      	mov	r9, r2
 800bb5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb60:	f108 0601 	add.w	r6, r8, #1
 800bb64:	42b3      	cmp	r3, r6
 800bb66:	db0b      	blt.n	800bb80 <__lshift+0x38>
 800bb68:	4638      	mov	r0, r7
 800bb6a:	f7ff fd91 	bl	800b690 <_Balloc>
 800bb6e:	4605      	mov	r5, r0
 800bb70:	b948      	cbnz	r0, 800bb86 <__lshift+0x3e>
 800bb72:	4602      	mov	r2, r0
 800bb74:	4b28      	ldr	r3, [pc, #160]	; (800bc18 <__lshift+0xd0>)
 800bb76:	4829      	ldr	r0, [pc, #164]	; (800bc1c <__lshift+0xd4>)
 800bb78:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb7c:	f000 fe40 	bl	800c800 <__assert_func>
 800bb80:	3101      	adds	r1, #1
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	e7ee      	b.n	800bb64 <__lshift+0x1c>
 800bb86:	2300      	movs	r3, #0
 800bb88:	f100 0114 	add.w	r1, r0, #20
 800bb8c:	f100 0210 	add.w	r2, r0, #16
 800bb90:	4618      	mov	r0, r3
 800bb92:	4553      	cmp	r3, sl
 800bb94:	db33      	blt.n	800bbfe <__lshift+0xb6>
 800bb96:	6920      	ldr	r0, [r4, #16]
 800bb98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb9c:	f104 0314 	add.w	r3, r4, #20
 800bba0:	f019 091f 	ands.w	r9, r9, #31
 800bba4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bba8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbac:	d02b      	beq.n	800bc06 <__lshift+0xbe>
 800bbae:	f1c9 0e20 	rsb	lr, r9, #32
 800bbb2:	468a      	mov	sl, r1
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	6818      	ldr	r0, [r3, #0]
 800bbb8:	fa00 f009 	lsl.w	r0, r0, r9
 800bbbc:	4302      	orrs	r2, r0
 800bbbe:	f84a 2b04 	str.w	r2, [sl], #4
 800bbc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc6:	459c      	cmp	ip, r3
 800bbc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbcc:	d8f3      	bhi.n	800bbb6 <__lshift+0x6e>
 800bbce:	ebac 0304 	sub.w	r3, ip, r4
 800bbd2:	3b15      	subs	r3, #21
 800bbd4:	f023 0303 	bic.w	r3, r3, #3
 800bbd8:	3304      	adds	r3, #4
 800bbda:	f104 0015 	add.w	r0, r4, #21
 800bbde:	4584      	cmp	ip, r0
 800bbe0:	bf38      	it	cc
 800bbe2:	2304      	movcc	r3, #4
 800bbe4:	50ca      	str	r2, [r1, r3]
 800bbe6:	b10a      	cbz	r2, 800bbec <__lshift+0xa4>
 800bbe8:	f108 0602 	add.w	r6, r8, #2
 800bbec:	3e01      	subs	r6, #1
 800bbee:	4638      	mov	r0, r7
 800bbf0:	612e      	str	r6, [r5, #16]
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	f7ff fd8c 	bl	800b710 <_Bfree>
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc02:	3301      	adds	r3, #1
 800bc04:	e7c5      	b.n	800bb92 <__lshift+0x4a>
 800bc06:	3904      	subs	r1, #4
 800bc08:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc10:	459c      	cmp	ip, r3
 800bc12:	d8f9      	bhi.n	800bc08 <__lshift+0xc0>
 800bc14:	e7ea      	b.n	800bbec <__lshift+0xa4>
 800bc16:	bf00      	nop
 800bc18:	0800cd1c 	.word	0x0800cd1c
 800bc1c:	0800ce10 	.word	0x0800ce10

0800bc20 <__mcmp>:
 800bc20:	b530      	push	{r4, r5, lr}
 800bc22:	6902      	ldr	r2, [r0, #16]
 800bc24:	690c      	ldr	r4, [r1, #16]
 800bc26:	1b12      	subs	r2, r2, r4
 800bc28:	d10e      	bne.n	800bc48 <__mcmp+0x28>
 800bc2a:	f100 0314 	add.w	r3, r0, #20
 800bc2e:	3114      	adds	r1, #20
 800bc30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc40:	42a5      	cmp	r5, r4
 800bc42:	d003      	beq.n	800bc4c <__mcmp+0x2c>
 800bc44:	d305      	bcc.n	800bc52 <__mcmp+0x32>
 800bc46:	2201      	movs	r2, #1
 800bc48:	4610      	mov	r0, r2
 800bc4a:	bd30      	pop	{r4, r5, pc}
 800bc4c:	4283      	cmp	r3, r0
 800bc4e:	d3f3      	bcc.n	800bc38 <__mcmp+0x18>
 800bc50:	e7fa      	b.n	800bc48 <__mcmp+0x28>
 800bc52:	f04f 32ff 	mov.w	r2, #4294967295
 800bc56:	e7f7      	b.n	800bc48 <__mcmp+0x28>

0800bc58 <__mdiff>:
 800bc58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	4606      	mov	r6, r0
 800bc60:	4611      	mov	r1, r2
 800bc62:	4620      	mov	r0, r4
 800bc64:	4617      	mov	r7, r2
 800bc66:	f7ff ffdb 	bl	800bc20 <__mcmp>
 800bc6a:	1e05      	subs	r5, r0, #0
 800bc6c:	d110      	bne.n	800bc90 <__mdiff+0x38>
 800bc6e:	4629      	mov	r1, r5
 800bc70:	4630      	mov	r0, r6
 800bc72:	f7ff fd0d 	bl	800b690 <_Balloc>
 800bc76:	b930      	cbnz	r0, 800bc86 <__mdiff+0x2e>
 800bc78:	4b39      	ldr	r3, [pc, #228]	; (800bd60 <__mdiff+0x108>)
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	f240 2132 	movw	r1, #562	; 0x232
 800bc80:	4838      	ldr	r0, [pc, #224]	; (800bd64 <__mdiff+0x10c>)
 800bc82:	f000 fdbd 	bl	800c800 <__assert_func>
 800bc86:	2301      	movs	r3, #1
 800bc88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc90:	bfa4      	itt	ge
 800bc92:	463b      	movge	r3, r7
 800bc94:	4627      	movge	r7, r4
 800bc96:	4630      	mov	r0, r6
 800bc98:	6879      	ldr	r1, [r7, #4]
 800bc9a:	bfa6      	itte	ge
 800bc9c:	461c      	movge	r4, r3
 800bc9e:	2500      	movge	r5, #0
 800bca0:	2501      	movlt	r5, #1
 800bca2:	f7ff fcf5 	bl	800b690 <_Balloc>
 800bca6:	b920      	cbnz	r0, 800bcb2 <__mdiff+0x5a>
 800bca8:	4b2d      	ldr	r3, [pc, #180]	; (800bd60 <__mdiff+0x108>)
 800bcaa:	4602      	mov	r2, r0
 800bcac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bcb0:	e7e6      	b.n	800bc80 <__mdiff+0x28>
 800bcb2:	693e      	ldr	r6, [r7, #16]
 800bcb4:	60c5      	str	r5, [r0, #12]
 800bcb6:	6925      	ldr	r5, [r4, #16]
 800bcb8:	f107 0114 	add.w	r1, r7, #20
 800bcbc:	f104 0914 	add.w	r9, r4, #20
 800bcc0:	f100 0e14 	add.w	lr, r0, #20
 800bcc4:	f107 0210 	add.w	r2, r7, #16
 800bcc8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bccc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bcd0:	46f2      	mov	sl, lr
 800bcd2:	2700      	movs	r7, #0
 800bcd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bcd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bcdc:	fa1f f883 	uxth.w	r8, r3
 800bce0:	fa17 f78b 	uxtah	r7, r7, fp
 800bce4:	0c1b      	lsrs	r3, r3, #16
 800bce6:	eba7 0808 	sub.w	r8, r7, r8
 800bcea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bcf2:	fa1f f888 	uxth.w	r8, r8
 800bcf6:	141f      	asrs	r7, r3, #16
 800bcf8:	454d      	cmp	r5, r9
 800bcfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcfe:	f84a 3b04 	str.w	r3, [sl], #4
 800bd02:	d8e7      	bhi.n	800bcd4 <__mdiff+0x7c>
 800bd04:	1b2b      	subs	r3, r5, r4
 800bd06:	3b15      	subs	r3, #21
 800bd08:	f023 0303 	bic.w	r3, r3, #3
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	3415      	adds	r4, #21
 800bd10:	42a5      	cmp	r5, r4
 800bd12:	bf38      	it	cc
 800bd14:	2304      	movcc	r3, #4
 800bd16:	4419      	add	r1, r3
 800bd18:	4473      	add	r3, lr
 800bd1a:	469e      	mov	lr, r3
 800bd1c:	460d      	mov	r5, r1
 800bd1e:	4565      	cmp	r5, ip
 800bd20:	d30e      	bcc.n	800bd40 <__mdiff+0xe8>
 800bd22:	f10c 0203 	add.w	r2, ip, #3
 800bd26:	1a52      	subs	r2, r2, r1
 800bd28:	f022 0203 	bic.w	r2, r2, #3
 800bd2c:	3903      	subs	r1, #3
 800bd2e:	458c      	cmp	ip, r1
 800bd30:	bf38      	it	cc
 800bd32:	2200      	movcc	r2, #0
 800bd34:	441a      	add	r2, r3
 800bd36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd3a:	b17b      	cbz	r3, 800bd5c <__mdiff+0x104>
 800bd3c:	6106      	str	r6, [r0, #16]
 800bd3e:	e7a5      	b.n	800bc8c <__mdiff+0x34>
 800bd40:	f855 8b04 	ldr.w	r8, [r5], #4
 800bd44:	fa17 f488 	uxtah	r4, r7, r8
 800bd48:	1422      	asrs	r2, r4, #16
 800bd4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bd4e:	b2a4      	uxth	r4, r4
 800bd50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bd54:	f84e 4b04 	str.w	r4, [lr], #4
 800bd58:	1417      	asrs	r7, r2, #16
 800bd5a:	e7e0      	b.n	800bd1e <__mdiff+0xc6>
 800bd5c:	3e01      	subs	r6, #1
 800bd5e:	e7ea      	b.n	800bd36 <__mdiff+0xde>
 800bd60:	0800cd1c 	.word	0x0800cd1c
 800bd64:	0800ce10 	.word	0x0800ce10

0800bd68 <__ulp>:
 800bd68:	b082      	sub	sp, #8
 800bd6a:	ed8d 0b00 	vstr	d0, [sp]
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	4912      	ldr	r1, [pc, #72]	; (800bdbc <__ulp+0x54>)
 800bd72:	4019      	ands	r1, r3
 800bd74:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bd78:	2900      	cmp	r1, #0
 800bd7a:	dd05      	ble.n	800bd88 <__ulp+0x20>
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	ec43 2b10 	vmov	d0, r2, r3
 800bd84:	b002      	add	sp, #8
 800bd86:	4770      	bx	lr
 800bd88:	4249      	negs	r1, r1
 800bd8a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bd8e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bd92:	f04f 0200 	mov.w	r2, #0
 800bd96:	f04f 0300 	mov.w	r3, #0
 800bd9a:	da04      	bge.n	800bda6 <__ulp+0x3e>
 800bd9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bda0:	fa41 f300 	asr.w	r3, r1, r0
 800bda4:	e7ec      	b.n	800bd80 <__ulp+0x18>
 800bda6:	f1a0 0114 	sub.w	r1, r0, #20
 800bdaa:	291e      	cmp	r1, #30
 800bdac:	bfda      	itte	le
 800bdae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bdb2:	fa20 f101 	lsrle.w	r1, r0, r1
 800bdb6:	2101      	movgt	r1, #1
 800bdb8:	460a      	mov	r2, r1
 800bdba:	e7e1      	b.n	800bd80 <__ulp+0x18>
 800bdbc:	7ff00000 	.word	0x7ff00000

0800bdc0 <__b2d>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	6905      	ldr	r5, [r0, #16]
 800bdc4:	f100 0714 	add.w	r7, r0, #20
 800bdc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bdcc:	1f2e      	subs	r6, r5, #4
 800bdce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f7ff fd52 	bl	800b87c <__hi0bits>
 800bdd8:	f1c0 0320 	rsb	r3, r0, #32
 800bddc:	280a      	cmp	r0, #10
 800bdde:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be5c <__b2d+0x9c>
 800bde2:	600b      	str	r3, [r1, #0]
 800bde4:	dc14      	bgt.n	800be10 <__b2d+0x50>
 800bde6:	f1c0 0e0b 	rsb	lr, r0, #11
 800bdea:	fa24 f10e 	lsr.w	r1, r4, lr
 800bdee:	42b7      	cmp	r7, r6
 800bdf0:	ea41 030c 	orr.w	r3, r1, ip
 800bdf4:	bf34      	ite	cc
 800bdf6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdfa:	2100      	movcs	r1, #0
 800bdfc:	3015      	adds	r0, #21
 800bdfe:	fa04 f000 	lsl.w	r0, r4, r0
 800be02:	fa21 f10e 	lsr.w	r1, r1, lr
 800be06:	ea40 0201 	orr.w	r2, r0, r1
 800be0a:	ec43 2b10 	vmov	d0, r2, r3
 800be0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be10:	42b7      	cmp	r7, r6
 800be12:	bf3a      	itte	cc
 800be14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be18:	f1a5 0608 	subcc.w	r6, r5, #8
 800be1c:	2100      	movcs	r1, #0
 800be1e:	380b      	subs	r0, #11
 800be20:	d017      	beq.n	800be52 <__b2d+0x92>
 800be22:	f1c0 0c20 	rsb	ip, r0, #32
 800be26:	fa04 f500 	lsl.w	r5, r4, r0
 800be2a:	42be      	cmp	r6, r7
 800be2c:	fa21 f40c 	lsr.w	r4, r1, ip
 800be30:	ea45 0504 	orr.w	r5, r5, r4
 800be34:	bf8c      	ite	hi
 800be36:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800be3a:	2400      	movls	r4, #0
 800be3c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800be40:	fa01 f000 	lsl.w	r0, r1, r0
 800be44:	fa24 f40c 	lsr.w	r4, r4, ip
 800be48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be4c:	ea40 0204 	orr.w	r2, r0, r4
 800be50:	e7db      	b.n	800be0a <__b2d+0x4a>
 800be52:	ea44 030c 	orr.w	r3, r4, ip
 800be56:	460a      	mov	r2, r1
 800be58:	e7d7      	b.n	800be0a <__b2d+0x4a>
 800be5a:	bf00      	nop
 800be5c:	3ff00000 	.word	0x3ff00000

0800be60 <__d2b>:
 800be60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be64:	4689      	mov	r9, r1
 800be66:	2101      	movs	r1, #1
 800be68:	ec57 6b10 	vmov	r6, r7, d0
 800be6c:	4690      	mov	r8, r2
 800be6e:	f7ff fc0f 	bl	800b690 <_Balloc>
 800be72:	4604      	mov	r4, r0
 800be74:	b930      	cbnz	r0, 800be84 <__d2b+0x24>
 800be76:	4602      	mov	r2, r0
 800be78:	4b25      	ldr	r3, [pc, #148]	; (800bf10 <__d2b+0xb0>)
 800be7a:	4826      	ldr	r0, [pc, #152]	; (800bf14 <__d2b+0xb4>)
 800be7c:	f240 310a 	movw	r1, #778	; 0x30a
 800be80:	f000 fcbe 	bl	800c800 <__assert_func>
 800be84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be8c:	bb35      	cbnz	r5, 800bedc <__d2b+0x7c>
 800be8e:	2e00      	cmp	r6, #0
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	d028      	beq.n	800bee6 <__d2b+0x86>
 800be94:	4668      	mov	r0, sp
 800be96:	9600      	str	r6, [sp, #0]
 800be98:	f7ff fd10 	bl	800b8bc <__lo0bits>
 800be9c:	9900      	ldr	r1, [sp, #0]
 800be9e:	b300      	cbz	r0, 800bee2 <__d2b+0x82>
 800bea0:	9a01      	ldr	r2, [sp, #4]
 800bea2:	f1c0 0320 	rsb	r3, r0, #32
 800bea6:	fa02 f303 	lsl.w	r3, r2, r3
 800beaa:	430b      	orrs	r3, r1
 800beac:	40c2      	lsrs	r2, r0
 800beae:	6163      	str	r3, [r4, #20]
 800beb0:	9201      	str	r2, [sp, #4]
 800beb2:	9b01      	ldr	r3, [sp, #4]
 800beb4:	61a3      	str	r3, [r4, #24]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	bf14      	ite	ne
 800beba:	2202      	movne	r2, #2
 800bebc:	2201      	moveq	r2, #1
 800bebe:	6122      	str	r2, [r4, #16]
 800bec0:	b1d5      	cbz	r5, 800bef8 <__d2b+0x98>
 800bec2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bec6:	4405      	add	r5, r0
 800bec8:	f8c9 5000 	str.w	r5, [r9]
 800becc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bed0:	f8c8 0000 	str.w	r0, [r8]
 800bed4:	4620      	mov	r0, r4
 800bed6:	b003      	add	sp, #12
 800bed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bedc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bee0:	e7d5      	b.n	800be8e <__d2b+0x2e>
 800bee2:	6161      	str	r1, [r4, #20]
 800bee4:	e7e5      	b.n	800beb2 <__d2b+0x52>
 800bee6:	a801      	add	r0, sp, #4
 800bee8:	f7ff fce8 	bl	800b8bc <__lo0bits>
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	6163      	str	r3, [r4, #20]
 800bef0:	2201      	movs	r2, #1
 800bef2:	6122      	str	r2, [r4, #16]
 800bef4:	3020      	adds	r0, #32
 800bef6:	e7e3      	b.n	800bec0 <__d2b+0x60>
 800bef8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800befc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf00:	f8c9 0000 	str.w	r0, [r9]
 800bf04:	6918      	ldr	r0, [r3, #16]
 800bf06:	f7ff fcb9 	bl	800b87c <__hi0bits>
 800bf0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf0e:	e7df      	b.n	800bed0 <__d2b+0x70>
 800bf10:	0800cd1c 	.word	0x0800cd1c
 800bf14:	0800ce10 	.word	0x0800ce10

0800bf18 <__ratio>:
 800bf18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	4688      	mov	r8, r1
 800bf1e:	4669      	mov	r1, sp
 800bf20:	4681      	mov	r9, r0
 800bf22:	f7ff ff4d 	bl	800bdc0 <__b2d>
 800bf26:	a901      	add	r1, sp, #4
 800bf28:	4640      	mov	r0, r8
 800bf2a:	ec55 4b10 	vmov	r4, r5, d0
 800bf2e:	f7ff ff47 	bl	800bdc0 <__b2d>
 800bf32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf3a:	eba3 0c02 	sub.w	ip, r3, r2
 800bf3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf42:	1a9b      	subs	r3, r3, r2
 800bf44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf48:	ec51 0b10 	vmov	r0, r1, d0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	bfd6      	itet	le
 800bf50:	460a      	movle	r2, r1
 800bf52:	462a      	movgt	r2, r5
 800bf54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf58:	468b      	mov	fp, r1
 800bf5a:	462f      	mov	r7, r5
 800bf5c:	bfd4      	ite	le
 800bf5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf66:	4620      	mov	r0, r4
 800bf68:	ee10 2a10 	vmov	r2, s0
 800bf6c:	465b      	mov	r3, fp
 800bf6e:	4639      	mov	r1, r7
 800bf70:	f7f4 fc6c 	bl	800084c <__aeabi_ddiv>
 800bf74:	ec41 0b10 	vmov	d0, r0, r1
 800bf78:	b003      	add	sp, #12
 800bf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf7e <__copybits>:
 800bf7e:	3901      	subs	r1, #1
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	1149      	asrs	r1, r1, #5
 800bf84:	6914      	ldr	r4, [r2, #16]
 800bf86:	3101      	adds	r1, #1
 800bf88:	f102 0314 	add.w	r3, r2, #20
 800bf8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf94:	1f05      	subs	r5, r0, #4
 800bf96:	42a3      	cmp	r3, r4
 800bf98:	d30c      	bcc.n	800bfb4 <__copybits+0x36>
 800bf9a:	1aa3      	subs	r3, r4, r2
 800bf9c:	3b11      	subs	r3, #17
 800bf9e:	f023 0303 	bic.w	r3, r3, #3
 800bfa2:	3211      	adds	r2, #17
 800bfa4:	42a2      	cmp	r2, r4
 800bfa6:	bf88      	it	hi
 800bfa8:	2300      	movhi	r3, #0
 800bfaa:	4418      	add	r0, r3
 800bfac:	2300      	movs	r3, #0
 800bfae:	4288      	cmp	r0, r1
 800bfb0:	d305      	bcc.n	800bfbe <__copybits+0x40>
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfb8:	f845 6f04 	str.w	r6, [r5, #4]!
 800bfbc:	e7eb      	b.n	800bf96 <__copybits+0x18>
 800bfbe:	f840 3b04 	str.w	r3, [r0], #4
 800bfc2:	e7f4      	b.n	800bfae <__copybits+0x30>

0800bfc4 <__any_on>:
 800bfc4:	f100 0214 	add.w	r2, r0, #20
 800bfc8:	6900      	ldr	r0, [r0, #16]
 800bfca:	114b      	asrs	r3, r1, #5
 800bfcc:	4298      	cmp	r0, r3
 800bfce:	b510      	push	{r4, lr}
 800bfd0:	db11      	blt.n	800bff6 <__any_on+0x32>
 800bfd2:	dd0a      	ble.n	800bfea <__any_on+0x26>
 800bfd4:	f011 011f 	ands.w	r1, r1, #31
 800bfd8:	d007      	beq.n	800bfea <__any_on+0x26>
 800bfda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bfde:	fa24 f001 	lsr.w	r0, r4, r1
 800bfe2:	fa00 f101 	lsl.w	r1, r0, r1
 800bfe6:	428c      	cmp	r4, r1
 800bfe8:	d10b      	bne.n	800c002 <__any_on+0x3e>
 800bfea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d803      	bhi.n	800bffa <__any_on+0x36>
 800bff2:	2000      	movs	r0, #0
 800bff4:	bd10      	pop	{r4, pc}
 800bff6:	4603      	mov	r3, r0
 800bff8:	e7f7      	b.n	800bfea <__any_on+0x26>
 800bffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bffe:	2900      	cmp	r1, #0
 800c000:	d0f5      	beq.n	800bfee <__any_on+0x2a>
 800c002:	2001      	movs	r0, #1
 800c004:	e7f6      	b.n	800bff4 <__any_on+0x30>

0800c006 <_calloc_r>:
 800c006:	b513      	push	{r0, r1, r4, lr}
 800c008:	434a      	muls	r2, r1
 800c00a:	4611      	mov	r1, r2
 800c00c:	9201      	str	r2, [sp, #4]
 800c00e:	f000 f859 	bl	800c0c4 <_malloc_r>
 800c012:	4604      	mov	r4, r0
 800c014:	b118      	cbz	r0, 800c01e <_calloc_r+0x18>
 800c016:	9a01      	ldr	r2, [sp, #4]
 800c018:	2100      	movs	r1, #0
 800c01a:	f7fc f86b 	bl	80080f4 <memset>
 800c01e:	4620      	mov	r0, r4
 800c020:	b002      	add	sp, #8
 800c022:	bd10      	pop	{r4, pc}

0800c024 <_free_r>:
 800c024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c026:	2900      	cmp	r1, #0
 800c028:	d048      	beq.n	800c0bc <_free_r+0x98>
 800c02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c02e:	9001      	str	r0, [sp, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	f1a1 0404 	sub.w	r4, r1, #4
 800c036:	bfb8      	it	lt
 800c038:	18e4      	addlt	r4, r4, r3
 800c03a:	f000 fc6f 	bl	800c91c <__malloc_lock>
 800c03e:	4a20      	ldr	r2, [pc, #128]	; (800c0c0 <_free_r+0x9c>)
 800c040:	9801      	ldr	r0, [sp, #4]
 800c042:	6813      	ldr	r3, [r2, #0]
 800c044:	4615      	mov	r5, r2
 800c046:	b933      	cbnz	r3, 800c056 <_free_r+0x32>
 800c048:	6063      	str	r3, [r4, #4]
 800c04a:	6014      	str	r4, [r2, #0]
 800c04c:	b003      	add	sp, #12
 800c04e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c052:	f000 bc69 	b.w	800c928 <__malloc_unlock>
 800c056:	42a3      	cmp	r3, r4
 800c058:	d90b      	bls.n	800c072 <_free_r+0x4e>
 800c05a:	6821      	ldr	r1, [r4, #0]
 800c05c:	1862      	adds	r2, r4, r1
 800c05e:	4293      	cmp	r3, r2
 800c060:	bf04      	itt	eq
 800c062:	681a      	ldreq	r2, [r3, #0]
 800c064:	685b      	ldreq	r3, [r3, #4]
 800c066:	6063      	str	r3, [r4, #4]
 800c068:	bf04      	itt	eq
 800c06a:	1852      	addeq	r2, r2, r1
 800c06c:	6022      	streq	r2, [r4, #0]
 800c06e:	602c      	str	r4, [r5, #0]
 800c070:	e7ec      	b.n	800c04c <_free_r+0x28>
 800c072:	461a      	mov	r2, r3
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	b10b      	cbz	r3, 800c07c <_free_r+0x58>
 800c078:	42a3      	cmp	r3, r4
 800c07a:	d9fa      	bls.n	800c072 <_free_r+0x4e>
 800c07c:	6811      	ldr	r1, [r2, #0]
 800c07e:	1855      	adds	r5, r2, r1
 800c080:	42a5      	cmp	r5, r4
 800c082:	d10b      	bne.n	800c09c <_free_r+0x78>
 800c084:	6824      	ldr	r4, [r4, #0]
 800c086:	4421      	add	r1, r4
 800c088:	1854      	adds	r4, r2, r1
 800c08a:	42a3      	cmp	r3, r4
 800c08c:	6011      	str	r1, [r2, #0]
 800c08e:	d1dd      	bne.n	800c04c <_free_r+0x28>
 800c090:	681c      	ldr	r4, [r3, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	6053      	str	r3, [r2, #4]
 800c096:	4421      	add	r1, r4
 800c098:	6011      	str	r1, [r2, #0]
 800c09a:	e7d7      	b.n	800c04c <_free_r+0x28>
 800c09c:	d902      	bls.n	800c0a4 <_free_r+0x80>
 800c09e:	230c      	movs	r3, #12
 800c0a0:	6003      	str	r3, [r0, #0]
 800c0a2:	e7d3      	b.n	800c04c <_free_r+0x28>
 800c0a4:	6825      	ldr	r5, [r4, #0]
 800c0a6:	1961      	adds	r1, r4, r5
 800c0a8:	428b      	cmp	r3, r1
 800c0aa:	bf04      	itt	eq
 800c0ac:	6819      	ldreq	r1, [r3, #0]
 800c0ae:	685b      	ldreq	r3, [r3, #4]
 800c0b0:	6063      	str	r3, [r4, #4]
 800c0b2:	bf04      	itt	eq
 800c0b4:	1949      	addeq	r1, r1, r5
 800c0b6:	6021      	streq	r1, [r4, #0]
 800c0b8:	6054      	str	r4, [r2, #4]
 800c0ba:	e7c7      	b.n	800c04c <_free_r+0x28>
 800c0bc:	b003      	add	sp, #12
 800c0be:	bd30      	pop	{r4, r5, pc}
 800c0c0:	20000200 	.word	0x20000200

0800c0c4 <_malloc_r>:
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c6:	1ccd      	adds	r5, r1, #3
 800c0c8:	f025 0503 	bic.w	r5, r5, #3
 800c0cc:	3508      	adds	r5, #8
 800c0ce:	2d0c      	cmp	r5, #12
 800c0d0:	bf38      	it	cc
 800c0d2:	250c      	movcc	r5, #12
 800c0d4:	2d00      	cmp	r5, #0
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	db01      	blt.n	800c0de <_malloc_r+0x1a>
 800c0da:	42a9      	cmp	r1, r5
 800c0dc:	d903      	bls.n	800c0e6 <_malloc_r+0x22>
 800c0de:	230c      	movs	r3, #12
 800c0e0:	6033      	str	r3, [r6, #0]
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e6:	f000 fc19 	bl	800c91c <__malloc_lock>
 800c0ea:	4921      	ldr	r1, [pc, #132]	; (800c170 <_malloc_r+0xac>)
 800c0ec:	680a      	ldr	r2, [r1, #0]
 800c0ee:	4614      	mov	r4, r2
 800c0f0:	b99c      	cbnz	r4, 800c11a <_malloc_r+0x56>
 800c0f2:	4f20      	ldr	r7, [pc, #128]	; (800c174 <_malloc_r+0xb0>)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	b923      	cbnz	r3, 800c102 <_malloc_r+0x3e>
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f000 fafc 	bl	800c6f8 <_sbrk_r>
 800c100:	6038      	str	r0, [r7, #0]
 800c102:	4629      	mov	r1, r5
 800c104:	4630      	mov	r0, r6
 800c106:	f000 faf7 	bl	800c6f8 <_sbrk_r>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	d123      	bne.n	800c156 <_malloc_r+0x92>
 800c10e:	230c      	movs	r3, #12
 800c110:	6033      	str	r3, [r6, #0]
 800c112:	4630      	mov	r0, r6
 800c114:	f000 fc08 	bl	800c928 <__malloc_unlock>
 800c118:	e7e3      	b.n	800c0e2 <_malloc_r+0x1e>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	1b5b      	subs	r3, r3, r5
 800c11e:	d417      	bmi.n	800c150 <_malloc_r+0x8c>
 800c120:	2b0b      	cmp	r3, #11
 800c122:	d903      	bls.n	800c12c <_malloc_r+0x68>
 800c124:	6023      	str	r3, [r4, #0]
 800c126:	441c      	add	r4, r3
 800c128:	6025      	str	r5, [r4, #0]
 800c12a:	e004      	b.n	800c136 <_malloc_r+0x72>
 800c12c:	6863      	ldr	r3, [r4, #4]
 800c12e:	42a2      	cmp	r2, r4
 800c130:	bf0c      	ite	eq
 800c132:	600b      	streq	r3, [r1, #0]
 800c134:	6053      	strne	r3, [r2, #4]
 800c136:	4630      	mov	r0, r6
 800c138:	f000 fbf6 	bl	800c928 <__malloc_unlock>
 800c13c:	f104 000b 	add.w	r0, r4, #11
 800c140:	1d23      	adds	r3, r4, #4
 800c142:	f020 0007 	bic.w	r0, r0, #7
 800c146:	1ac2      	subs	r2, r0, r3
 800c148:	d0cc      	beq.n	800c0e4 <_malloc_r+0x20>
 800c14a:	1a1b      	subs	r3, r3, r0
 800c14c:	50a3      	str	r3, [r4, r2]
 800c14e:	e7c9      	b.n	800c0e4 <_malloc_r+0x20>
 800c150:	4622      	mov	r2, r4
 800c152:	6864      	ldr	r4, [r4, #4]
 800c154:	e7cc      	b.n	800c0f0 <_malloc_r+0x2c>
 800c156:	1cc4      	adds	r4, r0, #3
 800c158:	f024 0403 	bic.w	r4, r4, #3
 800c15c:	42a0      	cmp	r0, r4
 800c15e:	d0e3      	beq.n	800c128 <_malloc_r+0x64>
 800c160:	1a21      	subs	r1, r4, r0
 800c162:	4630      	mov	r0, r6
 800c164:	f000 fac8 	bl	800c6f8 <_sbrk_r>
 800c168:	3001      	adds	r0, #1
 800c16a:	d1dd      	bne.n	800c128 <_malloc_r+0x64>
 800c16c:	e7cf      	b.n	800c10e <_malloc_r+0x4a>
 800c16e:	bf00      	nop
 800c170:	20000200 	.word	0x20000200
 800c174:	20000204 	.word	0x20000204

0800c178 <__ssputs_r>:
 800c178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c17c:	688e      	ldr	r6, [r1, #8]
 800c17e:	429e      	cmp	r6, r3
 800c180:	4682      	mov	sl, r0
 800c182:	460c      	mov	r4, r1
 800c184:	4690      	mov	r8, r2
 800c186:	461f      	mov	r7, r3
 800c188:	d838      	bhi.n	800c1fc <__ssputs_r+0x84>
 800c18a:	898a      	ldrh	r2, [r1, #12]
 800c18c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c190:	d032      	beq.n	800c1f8 <__ssputs_r+0x80>
 800c192:	6825      	ldr	r5, [r4, #0]
 800c194:	6909      	ldr	r1, [r1, #16]
 800c196:	eba5 0901 	sub.w	r9, r5, r1
 800c19a:	6965      	ldr	r5, [r4, #20]
 800c19c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	444b      	add	r3, r9
 800c1a8:	106d      	asrs	r5, r5, #1
 800c1aa:	429d      	cmp	r5, r3
 800c1ac:	bf38      	it	cc
 800c1ae:	461d      	movcc	r5, r3
 800c1b0:	0553      	lsls	r3, r2, #21
 800c1b2:	d531      	bpl.n	800c218 <__ssputs_r+0xa0>
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7ff ff85 	bl	800c0c4 <_malloc_r>
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	b950      	cbnz	r0, 800c1d4 <__ssputs_r+0x5c>
 800c1be:	230c      	movs	r3, #12
 800c1c0:	f8ca 3000 	str.w	r3, [sl]
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d4:	6921      	ldr	r1, [r4, #16]
 800c1d6:	464a      	mov	r2, r9
 800c1d8:	f7fb ff7e 	bl	80080d8 <memcpy>
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	6126      	str	r6, [r4, #16]
 800c1ea:	6165      	str	r5, [r4, #20]
 800c1ec:	444e      	add	r6, r9
 800c1ee:	eba5 0509 	sub.w	r5, r5, r9
 800c1f2:	6026      	str	r6, [r4, #0]
 800c1f4:	60a5      	str	r5, [r4, #8]
 800c1f6:	463e      	mov	r6, r7
 800c1f8:	42be      	cmp	r6, r7
 800c1fa:	d900      	bls.n	800c1fe <__ssputs_r+0x86>
 800c1fc:	463e      	mov	r6, r7
 800c1fe:	4632      	mov	r2, r6
 800c200:	6820      	ldr	r0, [r4, #0]
 800c202:	4641      	mov	r1, r8
 800c204:	f000 fb70 	bl	800c8e8 <memmove>
 800c208:	68a3      	ldr	r3, [r4, #8]
 800c20a:	6822      	ldr	r2, [r4, #0]
 800c20c:	1b9b      	subs	r3, r3, r6
 800c20e:	4432      	add	r2, r6
 800c210:	60a3      	str	r3, [r4, #8]
 800c212:	6022      	str	r2, [r4, #0]
 800c214:	2000      	movs	r0, #0
 800c216:	e7db      	b.n	800c1d0 <__ssputs_r+0x58>
 800c218:	462a      	mov	r2, r5
 800c21a:	f000 fb8b 	bl	800c934 <_realloc_r>
 800c21e:	4606      	mov	r6, r0
 800c220:	2800      	cmp	r0, #0
 800c222:	d1e1      	bne.n	800c1e8 <__ssputs_r+0x70>
 800c224:	6921      	ldr	r1, [r4, #16]
 800c226:	4650      	mov	r0, sl
 800c228:	f7ff fefc 	bl	800c024 <_free_r>
 800c22c:	e7c7      	b.n	800c1be <__ssputs_r+0x46>
	...

0800c230 <_svfiprintf_r>:
 800c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	4698      	mov	r8, r3
 800c236:	898b      	ldrh	r3, [r1, #12]
 800c238:	061b      	lsls	r3, r3, #24
 800c23a:	b09d      	sub	sp, #116	; 0x74
 800c23c:	4607      	mov	r7, r0
 800c23e:	460d      	mov	r5, r1
 800c240:	4614      	mov	r4, r2
 800c242:	d50e      	bpl.n	800c262 <_svfiprintf_r+0x32>
 800c244:	690b      	ldr	r3, [r1, #16]
 800c246:	b963      	cbnz	r3, 800c262 <_svfiprintf_r+0x32>
 800c248:	2140      	movs	r1, #64	; 0x40
 800c24a:	f7ff ff3b 	bl	800c0c4 <_malloc_r>
 800c24e:	6028      	str	r0, [r5, #0]
 800c250:	6128      	str	r0, [r5, #16]
 800c252:	b920      	cbnz	r0, 800c25e <_svfiprintf_r+0x2e>
 800c254:	230c      	movs	r3, #12
 800c256:	603b      	str	r3, [r7, #0]
 800c258:	f04f 30ff 	mov.w	r0, #4294967295
 800c25c:	e0d1      	b.n	800c402 <_svfiprintf_r+0x1d2>
 800c25e:	2340      	movs	r3, #64	; 0x40
 800c260:	616b      	str	r3, [r5, #20]
 800c262:	2300      	movs	r3, #0
 800c264:	9309      	str	r3, [sp, #36]	; 0x24
 800c266:	2320      	movs	r3, #32
 800c268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c270:	2330      	movs	r3, #48	; 0x30
 800c272:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c41c <_svfiprintf_r+0x1ec>
 800c276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c27a:	f04f 0901 	mov.w	r9, #1
 800c27e:	4623      	mov	r3, r4
 800c280:	469a      	mov	sl, r3
 800c282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c286:	b10a      	cbz	r2, 800c28c <_svfiprintf_r+0x5c>
 800c288:	2a25      	cmp	r2, #37	; 0x25
 800c28a:	d1f9      	bne.n	800c280 <_svfiprintf_r+0x50>
 800c28c:	ebba 0b04 	subs.w	fp, sl, r4
 800c290:	d00b      	beq.n	800c2aa <_svfiprintf_r+0x7a>
 800c292:	465b      	mov	r3, fp
 800c294:	4622      	mov	r2, r4
 800c296:	4629      	mov	r1, r5
 800c298:	4638      	mov	r0, r7
 800c29a:	f7ff ff6d 	bl	800c178 <__ssputs_r>
 800c29e:	3001      	adds	r0, #1
 800c2a0:	f000 80aa 	beq.w	800c3f8 <_svfiprintf_r+0x1c8>
 800c2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2a6:	445a      	add	r2, fp
 800c2a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 80a2 	beq.w	800c3f8 <_svfiprintf_r+0x1c8>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2be:	f10a 0a01 	add.w	sl, sl, #1
 800c2c2:	9304      	str	r3, [sp, #16]
 800c2c4:	9307      	str	r3, [sp, #28]
 800c2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c2cc:	4654      	mov	r4, sl
 800c2ce:	2205      	movs	r2, #5
 800c2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d4:	4851      	ldr	r0, [pc, #324]	; (800c41c <_svfiprintf_r+0x1ec>)
 800c2d6:	f7f3 ff83 	bl	80001e0 <memchr>
 800c2da:	9a04      	ldr	r2, [sp, #16]
 800c2dc:	b9d8      	cbnz	r0, 800c316 <_svfiprintf_r+0xe6>
 800c2de:	06d0      	lsls	r0, r2, #27
 800c2e0:	bf44      	itt	mi
 800c2e2:	2320      	movmi	r3, #32
 800c2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e8:	0711      	lsls	r1, r2, #28
 800c2ea:	bf44      	itt	mi
 800c2ec:	232b      	movmi	r3, #43	; 0x2b
 800c2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f8:	d015      	beq.n	800c326 <_svfiprintf_r+0xf6>
 800c2fa:	9a07      	ldr	r2, [sp, #28]
 800c2fc:	4654      	mov	r4, sl
 800c2fe:	2000      	movs	r0, #0
 800c300:	f04f 0c0a 	mov.w	ip, #10
 800c304:	4621      	mov	r1, r4
 800c306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c30a:	3b30      	subs	r3, #48	; 0x30
 800c30c:	2b09      	cmp	r3, #9
 800c30e:	d94e      	bls.n	800c3ae <_svfiprintf_r+0x17e>
 800c310:	b1b0      	cbz	r0, 800c340 <_svfiprintf_r+0x110>
 800c312:	9207      	str	r2, [sp, #28]
 800c314:	e014      	b.n	800c340 <_svfiprintf_r+0x110>
 800c316:	eba0 0308 	sub.w	r3, r0, r8
 800c31a:	fa09 f303 	lsl.w	r3, r9, r3
 800c31e:	4313      	orrs	r3, r2
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	46a2      	mov	sl, r4
 800c324:	e7d2      	b.n	800c2cc <_svfiprintf_r+0x9c>
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	1d19      	adds	r1, r3, #4
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	9103      	str	r1, [sp, #12]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	bfbb      	ittet	lt
 800c332:	425b      	neglt	r3, r3
 800c334:	f042 0202 	orrlt.w	r2, r2, #2
 800c338:	9307      	strge	r3, [sp, #28]
 800c33a:	9307      	strlt	r3, [sp, #28]
 800c33c:	bfb8      	it	lt
 800c33e:	9204      	strlt	r2, [sp, #16]
 800c340:	7823      	ldrb	r3, [r4, #0]
 800c342:	2b2e      	cmp	r3, #46	; 0x2e
 800c344:	d10c      	bne.n	800c360 <_svfiprintf_r+0x130>
 800c346:	7863      	ldrb	r3, [r4, #1]
 800c348:	2b2a      	cmp	r3, #42	; 0x2a
 800c34a:	d135      	bne.n	800c3b8 <_svfiprintf_r+0x188>
 800c34c:	9b03      	ldr	r3, [sp, #12]
 800c34e:	1d1a      	adds	r2, r3, #4
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	9203      	str	r2, [sp, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	bfb8      	it	lt
 800c358:	f04f 33ff 	movlt.w	r3, #4294967295
 800c35c:	3402      	adds	r4, #2
 800c35e:	9305      	str	r3, [sp, #20]
 800c360:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c42c <_svfiprintf_r+0x1fc>
 800c364:	7821      	ldrb	r1, [r4, #0]
 800c366:	2203      	movs	r2, #3
 800c368:	4650      	mov	r0, sl
 800c36a:	f7f3 ff39 	bl	80001e0 <memchr>
 800c36e:	b140      	cbz	r0, 800c382 <_svfiprintf_r+0x152>
 800c370:	2340      	movs	r3, #64	; 0x40
 800c372:	eba0 000a 	sub.w	r0, r0, sl
 800c376:	fa03 f000 	lsl.w	r0, r3, r0
 800c37a:	9b04      	ldr	r3, [sp, #16]
 800c37c:	4303      	orrs	r3, r0
 800c37e:	3401      	adds	r4, #1
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c386:	4826      	ldr	r0, [pc, #152]	; (800c420 <_svfiprintf_r+0x1f0>)
 800c388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c38c:	2206      	movs	r2, #6
 800c38e:	f7f3 ff27 	bl	80001e0 <memchr>
 800c392:	2800      	cmp	r0, #0
 800c394:	d038      	beq.n	800c408 <_svfiprintf_r+0x1d8>
 800c396:	4b23      	ldr	r3, [pc, #140]	; (800c424 <_svfiprintf_r+0x1f4>)
 800c398:	bb1b      	cbnz	r3, 800c3e2 <_svfiprintf_r+0x1b2>
 800c39a:	9b03      	ldr	r3, [sp, #12]
 800c39c:	3307      	adds	r3, #7
 800c39e:	f023 0307 	bic.w	r3, r3, #7
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	9303      	str	r3, [sp, #12]
 800c3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a8:	4433      	add	r3, r6
 800c3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ac:	e767      	b.n	800c27e <_svfiprintf_r+0x4e>
 800c3ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	2001      	movs	r0, #1
 800c3b6:	e7a5      	b.n	800c304 <_svfiprintf_r+0xd4>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	3401      	adds	r4, #1
 800c3bc:	9305      	str	r3, [sp, #20]
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f04f 0c0a 	mov.w	ip, #10
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3ca:	3a30      	subs	r2, #48	; 0x30
 800c3cc:	2a09      	cmp	r2, #9
 800c3ce:	d903      	bls.n	800c3d8 <_svfiprintf_r+0x1a8>
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d0c5      	beq.n	800c360 <_svfiprintf_r+0x130>
 800c3d4:	9105      	str	r1, [sp, #20]
 800c3d6:	e7c3      	b.n	800c360 <_svfiprintf_r+0x130>
 800c3d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3dc:	4604      	mov	r4, r0
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e7f0      	b.n	800c3c4 <_svfiprintf_r+0x194>
 800c3e2:	ab03      	add	r3, sp, #12
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	462a      	mov	r2, r5
 800c3e8:	4b0f      	ldr	r3, [pc, #60]	; (800c428 <_svfiprintf_r+0x1f8>)
 800c3ea:	a904      	add	r1, sp, #16
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	f7fb ff29 	bl	8008244 <_printf_float>
 800c3f2:	1c42      	adds	r2, r0, #1
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	d1d6      	bne.n	800c3a6 <_svfiprintf_r+0x176>
 800c3f8:	89ab      	ldrh	r3, [r5, #12]
 800c3fa:	065b      	lsls	r3, r3, #25
 800c3fc:	f53f af2c 	bmi.w	800c258 <_svfiprintf_r+0x28>
 800c400:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c402:	b01d      	add	sp, #116	; 0x74
 800c404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c408:	ab03      	add	r3, sp, #12
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	462a      	mov	r2, r5
 800c40e:	4b06      	ldr	r3, [pc, #24]	; (800c428 <_svfiprintf_r+0x1f8>)
 800c410:	a904      	add	r1, sp, #16
 800c412:	4638      	mov	r0, r7
 800c414:	f7fc f9ba 	bl	800878c <_printf_i>
 800c418:	e7eb      	b.n	800c3f2 <_svfiprintf_r+0x1c2>
 800c41a:	bf00      	nop
 800c41c:	0800cf6c 	.word	0x0800cf6c
 800c420:	0800cf76 	.word	0x0800cf76
 800c424:	08008245 	.word	0x08008245
 800c428:	0800c179 	.word	0x0800c179
 800c42c:	0800cf72 	.word	0x0800cf72

0800c430 <__sfputc_r>:
 800c430:	6893      	ldr	r3, [r2, #8]
 800c432:	3b01      	subs	r3, #1
 800c434:	2b00      	cmp	r3, #0
 800c436:	b410      	push	{r4}
 800c438:	6093      	str	r3, [r2, #8]
 800c43a:	da08      	bge.n	800c44e <__sfputc_r+0x1e>
 800c43c:	6994      	ldr	r4, [r2, #24]
 800c43e:	42a3      	cmp	r3, r4
 800c440:	db01      	blt.n	800c446 <__sfputc_r+0x16>
 800c442:	290a      	cmp	r1, #10
 800c444:	d103      	bne.n	800c44e <__sfputc_r+0x1e>
 800c446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c44a:	f7fd bc3b 	b.w	8009cc4 <__swbuf_r>
 800c44e:	6813      	ldr	r3, [r2, #0]
 800c450:	1c58      	adds	r0, r3, #1
 800c452:	6010      	str	r0, [r2, #0]
 800c454:	7019      	strb	r1, [r3, #0]
 800c456:	4608      	mov	r0, r1
 800c458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c45c:	4770      	bx	lr

0800c45e <__sfputs_r>:
 800c45e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c460:	4606      	mov	r6, r0
 800c462:	460f      	mov	r7, r1
 800c464:	4614      	mov	r4, r2
 800c466:	18d5      	adds	r5, r2, r3
 800c468:	42ac      	cmp	r4, r5
 800c46a:	d101      	bne.n	800c470 <__sfputs_r+0x12>
 800c46c:	2000      	movs	r0, #0
 800c46e:	e007      	b.n	800c480 <__sfputs_r+0x22>
 800c470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c474:	463a      	mov	r2, r7
 800c476:	4630      	mov	r0, r6
 800c478:	f7ff ffda 	bl	800c430 <__sfputc_r>
 800c47c:	1c43      	adds	r3, r0, #1
 800c47e:	d1f3      	bne.n	800c468 <__sfputs_r+0xa>
 800c480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c484 <_vfiprintf_r>:
 800c484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	460d      	mov	r5, r1
 800c48a:	b09d      	sub	sp, #116	; 0x74
 800c48c:	4614      	mov	r4, r2
 800c48e:	4698      	mov	r8, r3
 800c490:	4606      	mov	r6, r0
 800c492:	b118      	cbz	r0, 800c49c <_vfiprintf_r+0x18>
 800c494:	6983      	ldr	r3, [r0, #24]
 800c496:	b90b      	cbnz	r3, 800c49c <_vfiprintf_r+0x18>
 800c498:	f7fe fc68 	bl	800ad6c <__sinit>
 800c49c:	4b89      	ldr	r3, [pc, #548]	; (800c6c4 <_vfiprintf_r+0x240>)
 800c49e:	429d      	cmp	r5, r3
 800c4a0:	d11b      	bne.n	800c4da <_vfiprintf_r+0x56>
 800c4a2:	6875      	ldr	r5, [r6, #4]
 800c4a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4a6:	07d9      	lsls	r1, r3, #31
 800c4a8:	d405      	bmi.n	800c4b6 <_vfiprintf_r+0x32>
 800c4aa:	89ab      	ldrh	r3, [r5, #12]
 800c4ac:	059a      	lsls	r2, r3, #22
 800c4ae:	d402      	bmi.n	800c4b6 <_vfiprintf_r+0x32>
 800c4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4b2:	f7ff f86c 	bl	800b58e <__retarget_lock_acquire_recursive>
 800c4b6:	89ab      	ldrh	r3, [r5, #12]
 800c4b8:	071b      	lsls	r3, r3, #28
 800c4ba:	d501      	bpl.n	800c4c0 <_vfiprintf_r+0x3c>
 800c4bc:	692b      	ldr	r3, [r5, #16]
 800c4be:	b9eb      	cbnz	r3, 800c4fc <_vfiprintf_r+0x78>
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f7fd fc50 	bl	8009d68 <__swsetup_r>
 800c4c8:	b1c0      	cbz	r0, 800c4fc <_vfiprintf_r+0x78>
 800c4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4cc:	07dc      	lsls	r4, r3, #31
 800c4ce:	d50e      	bpl.n	800c4ee <_vfiprintf_r+0x6a>
 800c4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d4:	b01d      	add	sp, #116	; 0x74
 800c4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4da:	4b7b      	ldr	r3, [pc, #492]	; (800c6c8 <_vfiprintf_r+0x244>)
 800c4dc:	429d      	cmp	r5, r3
 800c4de:	d101      	bne.n	800c4e4 <_vfiprintf_r+0x60>
 800c4e0:	68b5      	ldr	r5, [r6, #8]
 800c4e2:	e7df      	b.n	800c4a4 <_vfiprintf_r+0x20>
 800c4e4:	4b79      	ldr	r3, [pc, #484]	; (800c6cc <_vfiprintf_r+0x248>)
 800c4e6:	429d      	cmp	r5, r3
 800c4e8:	bf08      	it	eq
 800c4ea:	68f5      	ldreq	r5, [r6, #12]
 800c4ec:	e7da      	b.n	800c4a4 <_vfiprintf_r+0x20>
 800c4ee:	89ab      	ldrh	r3, [r5, #12]
 800c4f0:	0598      	lsls	r0, r3, #22
 800c4f2:	d4ed      	bmi.n	800c4d0 <_vfiprintf_r+0x4c>
 800c4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4f6:	f7ff f84b 	bl	800b590 <__retarget_lock_release_recursive>
 800c4fa:	e7e9      	b.n	800c4d0 <_vfiprintf_r+0x4c>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c500:	2320      	movs	r3, #32
 800c502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c506:	f8cd 800c 	str.w	r8, [sp, #12]
 800c50a:	2330      	movs	r3, #48	; 0x30
 800c50c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6d0 <_vfiprintf_r+0x24c>
 800c510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c514:	f04f 0901 	mov.w	r9, #1
 800c518:	4623      	mov	r3, r4
 800c51a:	469a      	mov	sl, r3
 800c51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c520:	b10a      	cbz	r2, 800c526 <_vfiprintf_r+0xa2>
 800c522:	2a25      	cmp	r2, #37	; 0x25
 800c524:	d1f9      	bne.n	800c51a <_vfiprintf_r+0x96>
 800c526:	ebba 0b04 	subs.w	fp, sl, r4
 800c52a:	d00b      	beq.n	800c544 <_vfiprintf_r+0xc0>
 800c52c:	465b      	mov	r3, fp
 800c52e:	4622      	mov	r2, r4
 800c530:	4629      	mov	r1, r5
 800c532:	4630      	mov	r0, r6
 800c534:	f7ff ff93 	bl	800c45e <__sfputs_r>
 800c538:	3001      	adds	r0, #1
 800c53a:	f000 80aa 	beq.w	800c692 <_vfiprintf_r+0x20e>
 800c53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c540:	445a      	add	r2, fp
 800c542:	9209      	str	r2, [sp, #36]	; 0x24
 800c544:	f89a 3000 	ldrb.w	r3, [sl]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f000 80a2 	beq.w	800c692 <_vfiprintf_r+0x20e>
 800c54e:	2300      	movs	r3, #0
 800c550:	f04f 32ff 	mov.w	r2, #4294967295
 800c554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c558:	f10a 0a01 	add.w	sl, sl, #1
 800c55c:	9304      	str	r3, [sp, #16]
 800c55e:	9307      	str	r3, [sp, #28]
 800c560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c564:	931a      	str	r3, [sp, #104]	; 0x68
 800c566:	4654      	mov	r4, sl
 800c568:	2205      	movs	r2, #5
 800c56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c56e:	4858      	ldr	r0, [pc, #352]	; (800c6d0 <_vfiprintf_r+0x24c>)
 800c570:	f7f3 fe36 	bl	80001e0 <memchr>
 800c574:	9a04      	ldr	r2, [sp, #16]
 800c576:	b9d8      	cbnz	r0, 800c5b0 <_vfiprintf_r+0x12c>
 800c578:	06d1      	lsls	r1, r2, #27
 800c57a:	bf44      	itt	mi
 800c57c:	2320      	movmi	r3, #32
 800c57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c582:	0713      	lsls	r3, r2, #28
 800c584:	bf44      	itt	mi
 800c586:	232b      	movmi	r3, #43	; 0x2b
 800c588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c58c:	f89a 3000 	ldrb.w	r3, [sl]
 800c590:	2b2a      	cmp	r3, #42	; 0x2a
 800c592:	d015      	beq.n	800c5c0 <_vfiprintf_r+0x13c>
 800c594:	9a07      	ldr	r2, [sp, #28]
 800c596:	4654      	mov	r4, sl
 800c598:	2000      	movs	r0, #0
 800c59a:	f04f 0c0a 	mov.w	ip, #10
 800c59e:	4621      	mov	r1, r4
 800c5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5a4:	3b30      	subs	r3, #48	; 0x30
 800c5a6:	2b09      	cmp	r3, #9
 800c5a8:	d94e      	bls.n	800c648 <_vfiprintf_r+0x1c4>
 800c5aa:	b1b0      	cbz	r0, 800c5da <_vfiprintf_r+0x156>
 800c5ac:	9207      	str	r2, [sp, #28]
 800c5ae:	e014      	b.n	800c5da <_vfiprintf_r+0x156>
 800c5b0:	eba0 0308 	sub.w	r3, r0, r8
 800c5b4:	fa09 f303 	lsl.w	r3, r9, r3
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	46a2      	mov	sl, r4
 800c5be:	e7d2      	b.n	800c566 <_vfiprintf_r+0xe2>
 800c5c0:	9b03      	ldr	r3, [sp, #12]
 800c5c2:	1d19      	adds	r1, r3, #4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	9103      	str	r1, [sp, #12]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	bfbb      	ittet	lt
 800c5cc:	425b      	neglt	r3, r3
 800c5ce:	f042 0202 	orrlt.w	r2, r2, #2
 800c5d2:	9307      	strge	r3, [sp, #28]
 800c5d4:	9307      	strlt	r3, [sp, #28]
 800c5d6:	bfb8      	it	lt
 800c5d8:	9204      	strlt	r2, [sp, #16]
 800c5da:	7823      	ldrb	r3, [r4, #0]
 800c5dc:	2b2e      	cmp	r3, #46	; 0x2e
 800c5de:	d10c      	bne.n	800c5fa <_vfiprintf_r+0x176>
 800c5e0:	7863      	ldrb	r3, [r4, #1]
 800c5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800c5e4:	d135      	bne.n	800c652 <_vfiprintf_r+0x1ce>
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	1d1a      	adds	r2, r3, #4
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	9203      	str	r2, [sp, #12]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	bfb8      	it	lt
 800c5f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5f6:	3402      	adds	r4, #2
 800c5f8:	9305      	str	r3, [sp, #20]
 800c5fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c6e0 <_vfiprintf_r+0x25c>
 800c5fe:	7821      	ldrb	r1, [r4, #0]
 800c600:	2203      	movs	r2, #3
 800c602:	4650      	mov	r0, sl
 800c604:	f7f3 fdec 	bl	80001e0 <memchr>
 800c608:	b140      	cbz	r0, 800c61c <_vfiprintf_r+0x198>
 800c60a:	2340      	movs	r3, #64	; 0x40
 800c60c:	eba0 000a 	sub.w	r0, r0, sl
 800c610:	fa03 f000 	lsl.w	r0, r3, r0
 800c614:	9b04      	ldr	r3, [sp, #16]
 800c616:	4303      	orrs	r3, r0
 800c618:	3401      	adds	r4, #1
 800c61a:	9304      	str	r3, [sp, #16]
 800c61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c620:	482c      	ldr	r0, [pc, #176]	; (800c6d4 <_vfiprintf_r+0x250>)
 800c622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c626:	2206      	movs	r2, #6
 800c628:	f7f3 fdda 	bl	80001e0 <memchr>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d03f      	beq.n	800c6b0 <_vfiprintf_r+0x22c>
 800c630:	4b29      	ldr	r3, [pc, #164]	; (800c6d8 <_vfiprintf_r+0x254>)
 800c632:	bb1b      	cbnz	r3, 800c67c <_vfiprintf_r+0x1f8>
 800c634:	9b03      	ldr	r3, [sp, #12]
 800c636:	3307      	adds	r3, #7
 800c638:	f023 0307 	bic.w	r3, r3, #7
 800c63c:	3308      	adds	r3, #8
 800c63e:	9303      	str	r3, [sp, #12]
 800c640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c642:	443b      	add	r3, r7
 800c644:	9309      	str	r3, [sp, #36]	; 0x24
 800c646:	e767      	b.n	800c518 <_vfiprintf_r+0x94>
 800c648:	fb0c 3202 	mla	r2, ip, r2, r3
 800c64c:	460c      	mov	r4, r1
 800c64e:	2001      	movs	r0, #1
 800c650:	e7a5      	b.n	800c59e <_vfiprintf_r+0x11a>
 800c652:	2300      	movs	r3, #0
 800c654:	3401      	adds	r4, #1
 800c656:	9305      	str	r3, [sp, #20]
 800c658:	4619      	mov	r1, r3
 800c65a:	f04f 0c0a 	mov.w	ip, #10
 800c65e:	4620      	mov	r0, r4
 800c660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c664:	3a30      	subs	r2, #48	; 0x30
 800c666:	2a09      	cmp	r2, #9
 800c668:	d903      	bls.n	800c672 <_vfiprintf_r+0x1ee>
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d0c5      	beq.n	800c5fa <_vfiprintf_r+0x176>
 800c66e:	9105      	str	r1, [sp, #20]
 800c670:	e7c3      	b.n	800c5fa <_vfiprintf_r+0x176>
 800c672:	fb0c 2101 	mla	r1, ip, r1, r2
 800c676:	4604      	mov	r4, r0
 800c678:	2301      	movs	r3, #1
 800c67a:	e7f0      	b.n	800c65e <_vfiprintf_r+0x1da>
 800c67c:	ab03      	add	r3, sp, #12
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	462a      	mov	r2, r5
 800c682:	4b16      	ldr	r3, [pc, #88]	; (800c6dc <_vfiprintf_r+0x258>)
 800c684:	a904      	add	r1, sp, #16
 800c686:	4630      	mov	r0, r6
 800c688:	f7fb fddc 	bl	8008244 <_printf_float>
 800c68c:	4607      	mov	r7, r0
 800c68e:	1c78      	adds	r0, r7, #1
 800c690:	d1d6      	bne.n	800c640 <_vfiprintf_r+0x1bc>
 800c692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c694:	07d9      	lsls	r1, r3, #31
 800c696:	d405      	bmi.n	800c6a4 <_vfiprintf_r+0x220>
 800c698:	89ab      	ldrh	r3, [r5, #12]
 800c69a:	059a      	lsls	r2, r3, #22
 800c69c:	d402      	bmi.n	800c6a4 <_vfiprintf_r+0x220>
 800c69e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6a0:	f7fe ff76 	bl	800b590 <__retarget_lock_release_recursive>
 800c6a4:	89ab      	ldrh	r3, [r5, #12]
 800c6a6:	065b      	lsls	r3, r3, #25
 800c6a8:	f53f af12 	bmi.w	800c4d0 <_vfiprintf_r+0x4c>
 800c6ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6ae:	e711      	b.n	800c4d4 <_vfiprintf_r+0x50>
 800c6b0:	ab03      	add	r3, sp, #12
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	462a      	mov	r2, r5
 800c6b6:	4b09      	ldr	r3, [pc, #36]	; (800c6dc <_vfiprintf_r+0x258>)
 800c6b8:	a904      	add	r1, sp, #16
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f7fc f866 	bl	800878c <_printf_i>
 800c6c0:	e7e4      	b.n	800c68c <_vfiprintf_r+0x208>
 800c6c2:	bf00      	nop
 800c6c4:	0800cd50 	.word	0x0800cd50
 800c6c8:	0800cd70 	.word	0x0800cd70
 800c6cc:	0800cd30 	.word	0x0800cd30
 800c6d0:	0800cf6c 	.word	0x0800cf6c
 800c6d4:	0800cf76 	.word	0x0800cf76
 800c6d8:	08008245 	.word	0x08008245
 800c6dc:	0800c45f 	.word	0x0800c45f
 800c6e0:	0800cf72 	.word	0x0800cf72
 800c6e4:	00000000 	.word	0x00000000

0800c6e8 <nan>:
 800c6e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c6f0 <nan+0x8>
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	00000000 	.word	0x00000000
 800c6f4:	7ff80000 	.word	0x7ff80000

0800c6f8 <_sbrk_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	4d06      	ldr	r5, [pc, #24]	; (800c714 <_sbrk_r+0x1c>)
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	4604      	mov	r4, r0
 800c700:	4608      	mov	r0, r1
 800c702:	602b      	str	r3, [r5, #0]
 800c704:	f7f6 fe0a 	bl	800331c <_sbrk>
 800c708:	1c43      	adds	r3, r0, #1
 800c70a:	d102      	bne.n	800c712 <_sbrk_r+0x1a>
 800c70c:	682b      	ldr	r3, [r5, #0]
 800c70e:	b103      	cbz	r3, 800c712 <_sbrk_r+0x1a>
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	bd38      	pop	{r3, r4, r5, pc}
 800c714:	20000758 	.word	0x20000758

0800c718 <__sread>:
 800c718:	b510      	push	{r4, lr}
 800c71a:	460c      	mov	r4, r1
 800c71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c720:	f000 f92e 	bl	800c980 <_read_r>
 800c724:	2800      	cmp	r0, #0
 800c726:	bfab      	itete	ge
 800c728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c72a:	89a3      	ldrhlt	r3, [r4, #12]
 800c72c:	181b      	addge	r3, r3, r0
 800c72e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c732:	bfac      	ite	ge
 800c734:	6563      	strge	r3, [r4, #84]	; 0x54
 800c736:	81a3      	strhlt	r3, [r4, #12]
 800c738:	bd10      	pop	{r4, pc}

0800c73a <__swrite>:
 800c73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c73e:	461f      	mov	r7, r3
 800c740:	898b      	ldrh	r3, [r1, #12]
 800c742:	05db      	lsls	r3, r3, #23
 800c744:	4605      	mov	r5, r0
 800c746:	460c      	mov	r4, r1
 800c748:	4616      	mov	r6, r2
 800c74a:	d505      	bpl.n	800c758 <__swrite+0x1e>
 800c74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c750:	2302      	movs	r3, #2
 800c752:	2200      	movs	r2, #0
 800c754:	f000 f8b6 	bl	800c8c4 <_lseek_r>
 800c758:	89a3      	ldrh	r3, [r4, #12]
 800c75a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c75e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c762:	81a3      	strh	r3, [r4, #12]
 800c764:	4632      	mov	r2, r6
 800c766:	463b      	mov	r3, r7
 800c768:	4628      	mov	r0, r5
 800c76a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c76e:	f000 b835 	b.w	800c7dc <_write_r>

0800c772 <__sseek>:
 800c772:	b510      	push	{r4, lr}
 800c774:	460c      	mov	r4, r1
 800c776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c77a:	f000 f8a3 	bl	800c8c4 <_lseek_r>
 800c77e:	1c43      	adds	r3, r0, #1
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	bf15      	itete	ne
 800c784:	6560      	strne	r0, [r4, #84]	; 0x54
 800c786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c78a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c78e:	81a3      	strheq	r3, [r4, #12]
 800c790:	bf18      	it	ne
 800c792:	81a3      	strhne	r3, [r4, #12]
 800c794:	bd10      	pop	{r4, pc}

0800c796 <__sclose>:
 800c796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c79a:	f000 b84f 	b.w	800c83c <_close_r>

0800c79e <strncmp>:
 800c79e:	b510      	push	{r4, lr}
 800c7a0:	b16a      	cbz	r2, 800c7be <strncmp+0x20>
 800c7a2:	3901      	subs	r1, #1
 800c7a4:	1884      	adds	r4, r0, r2
 800c7a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c7aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d103      	bne.n	800c7ba <strncmp+0x1c>
 800c7b2:	42a0      	cmp	r0, r4
 800c7b4:	d001      	beq.n	800c7ba <strncmp+0x1c>
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1f5      	bne.n	800c7a6 <strncmp+0x8>
 800c7ba:	1a98      	subs	r0, r3, r2
 800c7bc:	bd10      	pop	{r4, pc}
 800c7be:	4610      	mov	r0, r2
 800c7c0:	e7fc      	b.n	800c7bc <strncmp+0x1e>

0800c7c2 <__ascii_wctomb>:
 800c7c2:	b149      	cbz	r1, 800c7d8 <__ascii_wctomb+0x16>
 800c7c4:	2aff      	cmp	r2, #255	; 0xff
 800c7c6:	bf85      	ittet	hi
 800c7c8:	238a      	movhi	r3, #138	; 0x8a
 800c7ca:	6003      	strhi	r3, [r0, #0]
 800c7cc:	700a      	strbls	r2, [r1, #0]
 800c7ce:	f04f 30ff 	movhi.w	r0, #4294967295
 800c7d2:	bf98      	it	ls
 800c7d4:	2001      	movls	r0, #1
 800c7d6:	4770      	bx	lr
 800c7d8:	4608      	mov	r0, r1
 800c7da:	4770      	bx	lr

0800c7dc <_write_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4d07      	ldr	r5, [pc, #28]	; (800c7fc <_write_r+0x20>)
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	4608      	mov	r0, r1
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	602a      	str	r2, [r5, #0]
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	f7f6 fd45 	bl	800327a <_write>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_write_r+0x1e>
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_write_r+0x1e>
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	20000758 	.word	0x20000758

0800c800 <__assert_func>:
 800c800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c802:	4614      	mov	r4, r2
 800c804:	461a      	mov	r2, r3
 800c806:	4b09      	ldr	r3, [pc, #36]	; (800c82c <__assert_func+0x2c>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4605      	mov	r5, r0
 800c80c:	68d8      	ldr	r0, [r3, #12]
 800c80e:	b14c      	cbz	r4, 800c824 <__assert_func+0x24>
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <__assert_func+0x30>)
 800c812:	9100      	str	r1, [sp, #0]
 800c814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c818:	4906      	ldr	r1, [pc, #24]	; (800c834 <__assert_func+0x34>)
 800c81a:	462b      	mov	r3, r5
 800c81c:	f000 f81e 	bl	800c85c <fiprintf>
 800c820:	f000 f8c0 	bl	800c9a4 <abort>
 800c824:	4b04      	ldr	r3, [pc, #16]	; (800c838 <__assert_func+0x38>)
 800c826:	461c      	mov	r4, r3
 800c828:	e7f3      	b.n	800c812 <__assert_func+0x12>
 800c82a:	bf00      	nop
 800c82c:	2000000c 	.word	0x2000000c
 800c830:	0800cf7d 	.word	0x0800cf7d
 800c834:	0800cf8a 	.word	0x0800cf8a
 800c838:	0800cfb8 	.word	0x0800cfb8

0800c83c <_close_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4d06      	ldr	r5, [pc, #24]	; (800c858 <_close_r+0x1c>)
 800c840:	2300      	movs	r3, #0
 800c842:	4604      	mov	r4, r0
 800c844:	4608      	mov	r0, r1
 800c846:	602b      	str	r3, [r5, #0]
 800c848:	f7f6 fd33 	bl	80032b2 <_close>
 800c84c:	1c43      	adds	r3, r0, #1
 800c84e:	d102      	bne.n	800c856 <_close_r+0x1a>
 800c850:	682b      	ldr	r3, [r5, #0]
 800c852:	b103      	cbz	r3, 800c856 <_close_r+0x1a>
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	bd38      	pop	{r3, r4, r5, pc}
 800c858:	20000758 	.word	0x20000758

0800c85c <fiprintf>:
 800c85c:	b40e      	push	{r1, r2, r3}
 800c85e:	b503      	push	{r0, r1, lr}
 800c860:	4601      	mov	r1, r0
 800c862:	ab03      	add	r3, sp, #12
 800c864:	4805      	ldr	r0, [pc, #20]	; (800c87c <fiprintf+0x20>)
 800c866:	f853 2b04 	ldr.w	r2, [r3], #4
 800c86a:	6800      	ldr	r0, [r0, #0]
 800c86c:	9301      	str	r3, [sp, #4]
 800c86e:	f7ff fe09 	bl	800c484 <_vfiprintf_r>
 800c872:	b002      	add	sp, #8
 800c874:	f85d eb04 	ldr.w	lr, [sp], #4
 800c878:	b003      	add	sp, #12
 800c87a:	4770      	bx	lr
 800c87c:	2000000c 	.word	0x2000000c

0800c880 <_fstat_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4d07      	ldr	r5, [pc, #28]	; (800c8a0 <_fstat_r+0x20>)
 800c884:	2300      	movs	r3, #0
 800c886:	4604      	mov	r4, r0
 800c888:	4608      	mov	r0, r1
 800c88a:	4611      	mov	r1, r2
 800c88c:	602b      	str	r3, [r5, #0]
 800c88e:	f7f6 fd1c 	bl	80032ca <_fstat>
 800c892:	1c43      	adds	r3, r0, #1
 800c894:	d102      	bne.n	800c89c <_fstat_r+0x1c>
 800c896:	682b      	ldr	r3, [r5, #0]
 800c898:	b103      	cbz	r3, 800c89c <_fstat_r+0x1c>
 800c89a:	6023      	str	r3, [r4, #0]
 800c89c:	bd38      	pop	{r3, r4, r5, pc}
 800c89e:	bf00      	nop
 800c8a0:	20000758 	.word	0x20000758

0800c8a4 <_isatty_r>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	4d06      	ldr	r5, [pc, #24]	; (800c8c0 <_isatty_r+0x1c>)
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	4608      	mov	r0, r1
 800c8ae:	602b      	str	r3, [r5, #0]
 800c8b0:	f7f6 fd1b 	bl	80032ea <_isatty>
 800c8b4:	1c43      	adds	r3, r0, #1
 800c8b6:	d102      	bne.n	800c8be <_isatty_r+0x1a>
 800c8b8:	682b      	ldr	r3, [r5, #0]
 800c8ba:	b103      	cbz	r3, 800c8be <_isatty_r+0x1a>
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	bd38      	pop	{r3, r4, r5, pc}
 800c8c0:	20000758 	.word	0x20000758

0800c8c4 <_lseek_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4d07      	ldr	r5, [pc, #28]	; (800c8e4 <_lseek_r+0x20>)
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	4608      	mov	r0, r1
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	602a      	str	r2, [r5, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	f7f6 fd14 	bl	8003300 <_lseek>
 800c8d8:	1c43      	adds	r3, r0, #1
 800c8da:	d102      	bne.n	800c8e2 <_lseek_r+0x1e>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	b103      	cbz	r3, 800c8e2 <_lseek_r+0x1e>
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	20000758 	.word	0x20000758

0800c8e8 <memmove>:
 800c8e8:	4288      	cmp	r0, r1
 800c8ea:	b510      	push	{r4, lr}
 800c8ec:	eb01 0402 	add.w	r4, r1, r2
 800c8f0:	d902      	bls.n	800c8f8 <memmove+0x10>
 800c8f2:	4284      	cmp	r4, r0
 800c8f4:	4623      	mov	r3, r4
 800c8f6:	d807      	bhi.n	800c908 <memmove+0x20>
 800c8f8:	1e43      	subs	r3, r0, #1
 800c8fa:	42a1      	cmp	r1, r4
 800c8fc:	d008      	beq.n	800c910 <memmove+0x28>
 800c8fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c902:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c906:	e7f8      	b.n	800c8fa <memmove+0x12>
 800c908:	4402      	add	r2, r0
 800c90a:	4601      	mov	r1, r0
 800c90c:	428a      	cmp	r2, r1
 800c90e:	d100      	bne.n	800c912 <memmove+0x2a>
 800c910:	bd10      	pop	{r4, pc}
 800c912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c91a:	e7f7      	b.n	800c90c <memmove+0x24>

0800c91c <__malloc_lock>:
 800c91c:	4801      	ldr	r0, [pc, #4]	; (800c924 <__malloc_lock+0x8>)
 800c91e:	f7fe be36 	b.w	800b58e <__retarget_lock_acquire_recursive>
 800c922:	bf00      	nop
 800c924:	20000750 	.word	0x20000750

0800c928 <__malloc_unlock>:
 800c928:	4801      	ldr	r0, [pc, #4]	; (800c930 <__malloc_unlock+0x8>)
 800c92a:	f7fe be31 	b.w	800b590 <__retarget_lock_release_recursive>
 800c92e:	bf00      	nop
 800c930:	20000750 	.word	0x20000750

0800c934 <_realloc_r>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	4607      	mov	r7, r0
 800c938:	4614      	mov	r4, r2
 800c93a:	460e      	mov	r6, r1
 800c93c:	b921      	cbnz	r1, 800c948 <_realloc_r+0x14>
 800c93e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c942:	4611      	mov	r1, r2
 800c944:	f7ff bbbe 	b.w	800c0c4 <_malloc_r>
 800c948:	b922      	cbnz	r2, 800c954 <_realloc_r+0x20>
 800c94a:	f7ff fb6b 	bl	800c024 <_free_r>
 800c94e:	4625      	mov	r5, r4
 800c950:	4628      	mov	r0, r5
 800c952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c954:	f000 f82d 	bl	800c9b2 <_malloc_usable_size_r>
 800c958:	42a0      	cmp	r0, r4
 800c95a:	d20f      	bcs.n	800c97c <_realloc_r+0x48>
 800c95c:	4621      	mov	r1, r4
 800c95e:	4638      	mov	r0, r7
 800c960:	f7ff fbb0 	bl	800c0c4 <_malloc_r>
 800c964:	4605      	mov	r5, r0
 800c966:	2800      	cmp	r0, #0
 800c968:	d0f2      	beq.n	800c950 <_realloc_r+0x1c>
 800c96a:	4631      	mov	r1, r6
 800c96c:	4622      	mov	r2, r4
 800c96e:	f7fb fbb3 	bl	80080d8 <memcpy>
 800c972:	4631      	mov	r1, r6
 800c974:	4638      	mov	r0, r7
 800c976:	f7ff fb55 	bl	800c024 <_free_r>
 800c97a:	e7e9      	b.n	800c950 <_realloc_r+0x1c>
 800c97c:	4635      	mov	r5, r6
 800c97e:	e7e7      	b.n	800c950 <_realloc_r+0x1c>

0800c980 <_read_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	4d07      	ldr	r5, [pc, #28]	; (800c9a0 <_read_r+0x20>)
 800c984:	4604      	mov	r4, r0
 800c986:	4608      	mov	r0, r1
 800c988:	4611      	mov	r1, r2
 800c98a:	2200      	movs	r2, #0
 800c98c:	602a      	str	r2, [r5, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	f7f6 fc56 	bl	8003240 <_read>
 800c994:	1c43      	adds	r3, r0, #1
 800c996:	d102      	bne.n	800c99e <_read_r+0x1e>
 800c998:	682b      	ldr	r3, [r5, #0]
 800c99a:	b103      	cbz	r3, 800c99e <_read_r+0x1e>
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	bd38      	pop	{r3, r4, r5, pc}
 800c9a0:	20000758 	.word	0x20000758

0800c9a4 <abort>:
 800c9a4:	b508      	push	{r3, lr}
 800c9a6:	2006      	movs	r0, #6
 800c9a8:	f000 f834 	bl	800ca14 <raise>
 800c9ac:	2001      	movs	r0, #1
 800c9ae:	f7f6 fc3d 	bl	800322c <_exit>

0800c9b2 <_malloc_usable_size_r>:
 800c9b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b6:	1f18      	subs	r0, r3, #4
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	bfbc      	itt	lt
 800c9bc:	580b      	ldrlt	r3, [r1, r0]
 800c9be:	18c0      	addlt	r0, r0, r3
 800c9c0:	4770      	bx	lr

0800c9c2 <_raise_r>:
 800c9c2:	291f      	cmp	r1, #31
 800c9c4:	b538      	push	{r3, r4, r5, lr}
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	460d      	mov	r5, r1
 800c9ca:	d904      	bls.n	800c9d6 <_raise_r+0x14>
 800c9cc:	2316      	movs	r3, #22
 800c9ce:	6003      	str	r3, [r0, #0]
 800c9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d4:	bd38      	pop	{r3, r4, r5, pc}
 800c9d6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c9d8:	b112      	cbz	r2, 800c9e0 <_raise_r+0x1e>
 800c9da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9de:	b94b      	cbnz	r3, 800c9f4 <_raise_r+0x32>
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 f831 	bl	800ca48 <_getpid_r>
 800c9e6:	462a      	mov	r2, r5
 800c9e8:	4601      	mov	r1, r0
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9f0:	f000 b818 	b.w	800ca24 <_kill_r>
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d00a      	beq.n	800ca0e <_raise_r+0x4c>
 800c9f8:	1c59      	adds	r1, r3, #1
 800c9fa:	d103      	bne.n	800ca04 <_raise_r+0x42>
 800c9fc:	2316      	movs	r3, #22
 800c9fe:	6003      	str	r3, [r0, #0]
 800ca00:	2001      	movs	r0, #1
 800ca02:	e7e7      	b.n	800c9d4 <_raise_r+0x12>
 800ca04:	2400      	movs	r4, #0
 800ca06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	4798      	blx	r3
 800ca0e:	2000      	movs	r0, #0
 800ca10:	e7e0      	b.n	800c9d4 <_raise_r+0x12>
	...

0800ca14 <raise>:
 800ca14:	4b02      	ldr	r3, [pc, #8]	; (800ca20 <raise+0xc>)
 800ca16:	4601      	mov	r1, r0
 800ca18:	6818      	ldr	r0, [r3, #0]
 800ca1a:	f7ff bfd2 	b.w	800c9c2 <_raise_r>
 800ca1e:	bf00      	nop
 800ca20:	2000000c 	.word	0x2000000c

0800ca24 <_kill_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4d07      	ldr	r5, [pc, #28]	; (800ca44 <_kill_r+0x20>)
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	4611      	mov	r1, r2
 800ca30:	602b      	str	r3, [r5, #0]
 800ca32:	f7f6 fbeb 	bl	800320c <_kill>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	d102      	bne.n	800ca40 <_kill_r+0x1c>
 800ca3a:	682b      	ldr	r3, [r5, #0]
 800ca3c:	b103      	cbz	r3, 800ca40 <_kill_r+0x1c>
 800ca3e:	6023      	str	r3, [r4, #0]
 800ca40:	bd38      	pop	{r3, r4, r5, pc}
 800ca42:	bf00      	nop
 800ca44:	20000758 	.word	0x20000758

0800ca48 <_getpid_r>:
 800ca48:	f7f6 bbd8 	b.w	80031fc <_getpid>

0800ca4c <_init>:
 800ca4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4e:	bf00      	nop
 800ca50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca52:	bc08      	pop	{r3}
 800ca54:	469e      	mov	lr, r3
 800ca56:	4770      	bx	lr

0800ca58 <_fini>:
 800ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5a:	bf00      	nop
 800ca5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5e:	bc08      	pop	{r3}
 800ca60:	469e      	mov	lr, r3
 800ca62:	4770      	bx	lr
